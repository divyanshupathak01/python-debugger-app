AnswerId,AnswerBody
231855,"<p>To understand what <code>yield</code> does, you must understand what <em>generators</em> are. And before generators come <em>iterables</em>.</p>

<h2>Iterables</h2>

<p>When you create a list, you can read its items one by one. Reading its items one by one is called iteration:</p>

<pre><code>&gt;&gt;&gt; mylist = [1, 2, 3]
&gt;&gt;&gt; for i in mylist:
...    print(i)
1
2
3
</code></pre>

<p><code>mylist</code> is an <em>iterable</em>. When you use a list comprehension, you create a list, and so an iterable:</p>

<pre><code>&gt;&gt;&gt; mylist = [x*x for x in range(3)]
&gt;&gt;&gt; for i in mylist:
...    print(i)
0
1
4
</code></pre>

<p>Everything you can use ""<code>for... in...</code>"" on is an iterable; <code>lists</code>, <code>strings</code>, files...</p>

<p>These iterables are handy because you can read them as much as you wish, but you store all the values in memory and this is not always what you want when you have a lot of values.</p>

<h2>Generators</h2>

<p>Generators are iterators, but <strong>you can only iterate over them once</strong>. It's because they do not store all the values in memory, <strong>they generate the values on the fly</strong>:</p>

<pre><code>&gt;&gt;&gt; mygenerator = (x*x for x in range(3))
&gt;&gt;&gt; for i in mygenerator:
...    print(i)
0
1
4
</code></pre>

<p>It is just the same except you used <code>()</code> instead of <code>[]</code>. BUT, you <strong>cannot</strong> perform <code>for i in mygenerator</code> a second time since generators can only be used once: they calculate 0, then forget about it and calculate 1, and end calculating 4, one by one.</p>

<h2>Yield</h2>

<p><code>Yield</code> is a keyword that is used like <code>return</code>, except the function will return a generator.</p>

<pre><code>&gt;&gt;&gt; def createGenerator():
...    mylist = range(3)
...    for i in mylist:
...        yield i*i
...
&gt;&gt;&gt; mygenerator = createGenerator() # create a generator
&gt;&gt;&gt; print(mygenerator) # mygenerator is an object!
&lt;generator object createGenerator at 0xb7555c34&gt;
&gt;&gt;&gt; for i in mygenerator:
...     print(i)
0
1
4
</code></pre>

<p>Here it's a useless example, but it's handy when you know your function will return a huge set of values that you will only need to read once.</p>

<p>To master <code>yield</code>, you must understand that <strong>when you call the function, the code you have written in the function body does not run.</strong> The function only returns the generator object, this is a bit tricky :-)</p>

<p>Then, your code will be run each time the <code>for</code> uses the generator.</p>

<p>Now the hard part:</p>

<p>The first time the <code>for</code> calls the generator object created from your function, it will run the code in your function from the beginning until it hits <code>yield</code>, then it'll return the first value of the loop. Then, each other call will run the loop you have written in the function one more time, and return the next value, until there is no value to return.</p>

<p>The generator is considered empty once the function runs but does not hit <code>yield</code> anymore. It can be because the loop had come to an end, or because you do not satisfy an <code>""if/else""</code> anymore.</p>

<hr>

<h2>Your code explained</h2>

<p>Generator:</p>

<pre><code># Here you create the method of the node object that will return the generator
def node._get_child_candidates(self, distance, min_dist, max_dist):

  # Here is the code that will be called each time you use the generator object:

  # If there is still a child of the node object on its left
  # AND if distance is ok, return the next child
  if self._leftchild and distance - max_dist &lt; self._median:
      yield self._leftchild

  # If there is still a child of the node object on its right
  # AND if distance is ok, return the next child
  if self._rightchild and distance + max_dist &gt;= self._median:
      yield self._rightchild

  # If the function arrives here, the generator will be considered empty
  # there is no more than two values: the left and the right children
</code></pre>

<p>Caller:</p>

<pre><code># Create an empty list and a list with the current object reference
result, candidates = list(), [self]

# Loop on candidates (they contain only one element at the beginning)
while candidates:

    # Get the last candidate and remove it from the list
    node = candidates.pop()

    # Get the distance between obj and the candidate
    distance = node._get_dist(obj)

    # If distance is ok, then you can fill the result
    if distance &lt;= max_dist and distance &gt;= min_dist:
        result.extend(node._values)

    # Add the children of the candidate in the candidates list
    # so the loop will keep running until it will have looked
    # at all the children of the children of the children, etc. of the candidate
    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))

return result
</code></pre>

<p>This code contains several smart parts:</p>

<ul>
<li><p>The loop iterates on a list but the list expands while the loop is being iterated :-) It's a concise way to go through all these nested data even if it's a bit dangerous since you can end up with an infinite loop. In this case, <code>candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))</code> exhausts all the values of the generator, but <code>while</code> keeps creating new generator objects which will produce different values from the previous ones since it's not applied on the same node.</p></li>
<li><p>The <code>extend()</code> method is a list object method that expects an iterable and adds its values to the list.</p></li>
</ul>

<p>Usually we pass a list to it:</p>

<pre><code>&gt;&gt;&gt; a = [1, 2]
&gt;&gt;&gt; b = [3, 4]
&gt;&gt;&gt; a.extend(b)
&gt;&gt;&gt; print(a)
[1, 2, 3, 4]
</code></pre>

<p>But in your code it gets a generator, which is good because:</p>

<ol>
<li>You don't need to read the values twice.</li>
<li>You may have a lot of children and you don't want them all stored in memory.</li>
</ol>

<p>And it works because Python does not care if the argument of a method is a list or not. Python expects iterables so it will work with strings, lists, tuples and generators! This is called duck typing and is one of the reason why Python is so cool. But this is another story, for another question...</p>

<p>You can stop here, or read a little bit to see an advanced use of a generator:</p>

<h2>Controlling a generator exhaustion</h2>

<pre><code>&gt;&gt;&gt; class Bank(): # let's create a bank, building ATMs
...    crisis = False
...    def create_atm(self):
...        while not self.crisis:
...            yield ""$100""
&gt;&gt;&gt; hsbc = Bank() # when everything's ok the ATM gives you as much as you want
&gt;&gt;&gt; corner_street_atm = hsbc.create_atm()
&gt;&gt;&gt; print(corner_street_atm.next())
$100
&gt;&gt;&gt; print(corner_street_atm.next())
$100
&gt;&gt;&gt; print([corner_street_atm.next() for cash in range(5)])
['$100', '$100', '$100', '$100', '$100']
&gt;&gt;&gt; hsbc.crisis = True # crisis is coming, no more money!
&gt;&gt;&gt; print(corner_street_atm.next())
&lt;type 'exceptions.StopIteration'&gt;
&gt;&gt;&gt; wall_street_atm = hsbc.create_atm() # it's even true for new ATMs
&gt;&gt;&gt; print(wall_street_atm.next())
&lt;type 'exceptions.StopIteration'&gt;
&gt;&gt;&gt; hsbc.crisis = False # trouble is, even post-crisis the ATM remains empty
&gt;&gt;&gt; print(corner_street_atm.next())
&lt;type 'exceptions.StopIteration'&gt;
&gt;&gt;&gt; brand_new_atm = hsbc.create_atm() # build a new one to get back in business
&gt;&gt;&gt; for cash in brand_new_atm:
...    print cash
$100
$100
$100
$100
$100
$100
$100
$100
$100
...
</code></pre>

<p>It can be useful for various things like controlling access to a resource.</p>

<h2>Itertools, your best friend</h2>

<p>The itertools module contains special functions to manipulate iterables. Ever wish to duplicate a generator?
Chain two generators? Group values in a nested list with a one liner? <code>Map / Zip</code> without creating another list?</p>

<p>Then just <code>import itertools</code>.</p>

<p>An example? Let's see the possible orders of arrival for a 4 horse race:</p>

<pre><code>&gt;&gt;&gt; horses = [1, 2, 3, 4]
&gt;&gt;&gt; races = itertools.permutations(horses)
&gt;&gt;&gt; print(races)
&lt;itertools.permutations object at 0xb754f1dc&gt;
&gt;&gt;&gt; print(list(itertools.permutations(horses)))
[(1, 2, 3, 4),
 (1, 2, 4, 3),
 (1, 3, 2, 4),
 (1, 3, 4, 2),
 (1, 4, 2, 3),
 (1, 4, 3, 2),
 (2, 1, 3, 4),
 (2, 1, 4, 3),
 (2, 3, 1, 4),
 (2, 3, 4, 1),
 (2, 4, 1, 3),
 (2, 4, 3, 1),
 (3, 1, 2, 4),
 (3, 1, 4, 2),
 (3, 2, 1, 4),
 (3, 2, 4, 1),
 (3, 4, 1, 2),
 (3, 4, 2, 1),
 (4, 1, 2, 3),
 (4, 1, 3, 2),
 (4, 2, 1, 3),
 (4, 2, 3, 1),
 (4, 3, 1, 2),
 (4, 3, 2, 1)]
</code></pre>

<h2>Understanding the inner mechanisms of iteration</h2>

<p>Iteration is a process implying iterables (implementing the <code>__iter__()</code> method) and iterators (implementing the <code>__next__()</code> method).
Iterables are any objects you can get an iterator from. Iterators are objects that let you iterate on iterables.</p>

<p>More about it in this article about <a href=""http://effbot.org/zone/python-for-statement.htm"">how does the for loop work</a>.</p>
"
252711,"<p><a href=""https://docs.python.org/2/library/array.html?#array.array.append""><code>append</code></a>: Appends object at end.</p>

<pre><code>x = [1, 2, 3]
x.append([4, 5])
print (x)
</code></pre>

<p>gives you: <code>[1, 2, 3, [4, 5]]</code></p>

<hr>

<p><a href=""https://docs.python.org/2/library/array.html?#array.array.extend""><code>extend</code></a>: Extends list by appending elements from the iterable.</p>

<pre><code>x = [1, 2, 3]
x.extend([4, 5])
print (x)
</code></pre>

<p>gives you: <code>[1, 2, 3, 4, 5]</code></p>
"
53522,"<pre><code>if not a:
  print(""List is empty"")
</code></pre>

<p>Using the implicit booleanness of the empty list <code>a</code> is quite pythonic.</p>
"
82852,"<p>You can also use <a href=""https://docs.python.org/2/library/os.path.html#os.path.isfile""><code>os.path.isfile</code></a></p>

<blockquote>
  <p>Return <code>True</code> if path is an existing regular file. This follows symbolic links, so both <a href=""https://docs.python.org/2/library/os.path.html#os.path.islink"">islink()</a> and <a href=""https://docs.python.org/2/library/os.path.html#os.path.isfile"">isfile()</a> can be true for the same path.</p>
</blockquote>

<pre><code>import os.path
os.path.isfile(fname) 
</code></pre>

<p>if you need to be sure it's a file.</p>

<p>Starting with Python 3.4, the <a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_file""><code>pathlib</code> module</a> offers an object-oriented approach:</p>

<pre><code>from pathlib import Path

my_file = Path(""/path/to/file"")
if my_file.is_file():
    # file exists
</code></pre>
"
89243,"<p>Look at the <a href=""https://docs.python.org/2/library/subprocess.html"">subprocess module</a> in the stdlib:</p>

<pre><code>from subprocess import call
call([""ls"", ""-l""])
</code></pre>

<p>The advantage of subprocess vs system is that it is more flexible (you can get the stdout, stderr, the ""real"" status code, better error handling, etc...). I think os.system is deprecated, too, or will be:</p>

<p><a href=""https://docs.python.org/2/library/subprocess.html#replacing-older-functions-with-the-subprocess-module"">https://docs.python.org/2/library/subprocess.html#replacing-older-functions-with-the-subprocess-module</a></p>

<p>For quick/dirty/one time scripts, <code>os.system</code> is enough, though.</p>
"
273227,"<p>I see two answers with good qualities, each with a small flaw, so I will give my take on it:</p>

<p>Try <a href=""https://docs.python.org/2/library/os.path.html#os.path.exists""><code>os.path.exists</code></a>, and consider <a href=""https://docs.python.org/2/library/os.html#os.makedirs""><code>os.makedirs</code></a> for the creation.</p>

<pre><code>if not os.path.exists(directory):
    os.makedirs(directory)
</code></pre>

<p>As noted in comments and elsewhere, there's a race condition - if the directory is created between the <code>os.path.exists</code> and the <code>os.makedirs</code> calls, the <code>os.makedirs</code> will fail with an <code>OSError</code>. Unfortunately, blanket-catching <code>OSError</code> and continuing is not foolproof, as it will ignore a failure to create the directory due to other factors, such as insufficient permissions, full disk, etc.</p>

<p>One option would be to trap the <code>OSError</code> and examine the embedded error code, if one knew what's what (on my OS, 13 seems to indicate that permission is denied, and 17 that the file exists - it's not clear that that's even remotely portable, but is explored in <a href=""http://stackoverflow.com/questions/273698/is-there-a-cross-platform-way-of-getting-information-from-pythons-oserror"">Is there a cross-platform way of getting information from Pythonâs OSError</a>). Alternatively, there could be a second <code>os.path.exists</code>, but suppose another created the directory after the first check, then removed it before the second one - we could still be fooled. </p>

<p>Depending on the application, the danger of concurrent operations may be more or less than the danger posed by other factors such as file permissions. The developer would have to know more about the particular application being developed and its expected environment before choosing an implementation.</p>
"
92395,"<p>Here's a summary of the ways to call external programs and the advantages and disadvantages of each:</p>

<ol>
<li><p><code>os.system(""some_command with args"")</code> passes the command and arguments to your system's shell.  This is nice because you can actually run multiple commands at once in this manner and set up pipes and input/output redirection.  For example:  </p>

<pre><code>os.system(""some_command &lt; input_file | another_command &gt; output_file"")  
</code></pre>

<p>However, while this is convenient, you have to manually handle the escaping of shell characters such as spaces, etc.  On the other hand, this also lets you run commands which are simply shell commands and not actually external programs.  See <a href=""https://docs.python.org/2/library/os.html#os.system"">the documentation</a>.</p></li>
<li><p><code>stream = os.popen(""some_command with args"")</code> will do the same thing as <code>os.system</code> except that it gives you a file-like object that you can use to access standard input/output for that process.  There are 3 other variants of popen that all handle the i/o slightly differently.  If you pass everything as a string, then your command is passed to the shell; if you pass them as a list then you don't need to worry about escaping anything.  See <a href=""https://docs.python.org/2/library/os.html#os.popen"">the documentation</a>.</p></li>
<li><p>The <code>Popen</code> class of the <code>subprocess</code> module.  This is intended as a replacement for <code>os.popen</code> but has the downside of being slightly more complicated by virtue of being so comprehensive.  For example, you'd say:</p>

<pre><code>print subprocess.Popen(""echo Hello World"", shell=True, stdout=subprocess.PIPE).stdout.read()
</code></pre>

<p>instead of: </p>

<pre><code>print os.popen(""echo Hello World"").read()
</code></pre>

<p>but it is nice to have all of the options there in one unified class instead of 4 different popen functions.  See <a href=""https://docs.python.org/2/library/subprocess.html#popen-constructor"">the documentation</a>.</p></li>
<li><p>The <code>call</code> function from the <code>subprocess</code> module.  This is basically just like the <code>Popen</code> class and takes all of the same arguments, but it simply waits until the command completes and gives you the return code.  For example:</p>

<pre><code>return_code = subprocess.call(""echo Hello World"", shell=True)  
</code></pre>

<p>See <a href=""https://docs.python.org/2/library/subprocess.html#subprocess.call"">the documentation</a>.</p></li>
<li><p>If you're on Python 3.5 or later, you can use the new <a href=""https://docs.python.org/3.5/library/subprocess.html#subprocess.run""><code>subprocess.run</code></a> function, which is a lot like the above but even more flexible and returns a <a href=""https://docs.python.org/3.5/library/subprocess.html#subprocess.CompletedProcess""><code>CompletedProcess</code></a> object when the command finishes executing.</p></li>
<li><p>The os module also has all of the fork/exec/spawn functions that you'd have in a C program, but I don't recommend using them directly.</p></li>
</ol>

<p>The <code>subprocess</code> module should probably be what you use.</p>

<p>Finally please be aware that for all methods where you pass the final command to be executed by the shell as a string and you are responsible for escaping it. <strong>There are serious security implications</strong> if any part of the string that you pass can not be fully trusted. For example, if a user is entering some/any part of the string. If you are unsure, only use these methods with constants. To give you a hint of the implications consider this code:</p>

<pre><code>print subprocess.Popen(""echo %s "" % user_input, stdout=PIPE).stdout.read()
</code></pre>

<p>and imagine that the user enters ""my mama didnt love me &amp;&amp; rm -rf /"".</p>
"
176921,"<pre><code>&gt;&gt;&gt; [""foo"", ""bar"", ""baz""].index(""bar"")
1
</code></pre>

<p>Reference: <a href=""http://docs.python.org/2/tutorial/datastructures.html#more-on-lists"">Data Structures > More on Lists</a></p>
"
306417,"<p>Use <a href=""https://docs.python.org/2/library/random.html#random.choice""><code>random.choice</code></a>:</p>

<pre><code>import random

foo = ['a', 'b', 'c', 'd', 'e']
print(random.choice(foo))
</code></pre>
"
38990,"<p>In your case, what you can do is:</p>

<pre><code>z = dict(x.items() + y.items())
</code></pre>

<p>This will, as you want it, put the final dict in <code>z</code>, and make the value for key <code>b</code> be properly overridden by the second (<code>y</code>) dict's value:</p>

<pre><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}
&gt;&gt;&gt; y = {'b':10, 'c': 11}
&gt;&gt;&gt; z = dict(x.items() + y.items())
&gt;&gt;&gt; z
{'a': 1, 'c': 11, 'b': 10}
</code></pre>

<p>If you use Python 3, it is only a little more complicated.  To create <code>z</code>:</p>

<pre><code>&gt;&gt;&gt; z = dict(list(x.items()) + list(y.items()))
&gt;&gt;&gt; z
{'a': 1, 'c': 11, 'b': 10}
</code></pre>
"
312464,"<p>Here's a generator that yields the chunks you want:</p>

<pre><code>def chunks(l, n):
    """"""Yield successive n-sized chunks from l.""""""
    for i in range(0, len(l), n):
        yield l[i:i + n]
</code></pre>

<hr>

<pre><code>import pprint
pprint.pprint(list(chunks(range(10, 75), 10)))
[[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
 [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
 [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
 [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],
 [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],
 [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],
 [70, 71, 72, 73, 74]]
</code></pre>

<hr>

<p>If you're using Python 2, you should use <code>xrange()</code> instead of <code>range()</code>:</p>

<pre><code>def chunks(l, n):
    """"""Yield successive n-sized chunks from l.""""""
    for i in xrange(0, len(l), n):
        yield l[i:i + n]
</code></pre>

<hr>

<p>Also you can simply use list comprehension instead of write a function. Python 3:</p>

<pre><code>[l[i:i + n] for i in range(0, len(l), n)]
</code></pre>

<p>Python 2 version:</p>

<pre><code>[l[i:i + n] for i in xrange(0, len(l), n)]
</code></pre>
"
100146,"<p>A metaclass is the class of a class. Like a class defines how an instance of the class behaves, a metaclass defines how a class behaves. A class is an instance of a metaclass.</p>

<p><a href=""http://i.stack.imgur.com/QQ0OK.png""><img src=""http://i.stack.imgur.com/QQ0OK.png"" alt=""metaclass diagram""></a></p>

<p>While in Python you can use arbitrary callables for metaclasses (like <a href=""http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python/100037#100037"">Jerub</a> shows), the more useful approach is actually to make it an actual class itself. <code>type</code> is the usual metaclass in Python. In case you're wondering, yes, <code>type</code> is itself a class, and it is its own type. You won't be able to recreate something like <code>type</code> purely in Python, but Python cheats a little. To create your own metaclass in Python you really just want to subclass <code>type</code>.</p>

<p>A metaclass is most commonly used as a class-factory. Like you create an instance of the class by calling the class, Python creates a new class (when it executes the 'class' statement) by calling the metaclass. Combined with the normal <code>__init__</code> and <code>__new__</code> methods, metaclasses therefore allow you to do 'extra things' when creating a class, like registering the new class with some registry, or even replace the class with something else entirely.</p>

<p>When the <code>class</code> statement is executed, Python first executes the body of the <code>class</code> statement as a normal block of code. The resulting namespace (a dict) holds the attributes of the class-to-be. The metaclass is determined by looking at the baseclasses of the class-to-be (metaclasses are inherited), at the <code>__metaclass__</code> attribute of the class-to-be (if any) or the <code>__metaclass__</code> global variable. The metaclass is then called with the name, bases and attributes of the class to instantiate it.</p>

<p>However, metaclasses actually define the <em>type</em> of a class, not just a factory for it, so you can do much more with them. You can, for instance, define normal methods on the metaclass. These metaclass-methods are like classmethods, in that they can be called on the class without an instance, but they are also not like classmethods in that they cannot be called on an instance of the class. <code>type.__subclasses__()</code> is an example of a method on the <code>type</code> metaclass. You can also define the normal 'magic' methods, like <code>__add__</code>, <code>__iter__</code> and <code>__getattr__</code>, to implement or change how the class behaves.</p>

<p>Here's an aggregated example of the bits and pieces:</p>

<pre><code>def make_hook(f):
    """"""Decorator to turn 'foo' method into '__foo__'""""""
    f.is_hook = 1
    return f

class MyType(type):
    def __new__(cls, name, bases, attrs):

        if name.startswith('None'):
            return None

        # Go over attributes and see if they should be renamed.
        newattrs = {}
        for attrname, attrvalue in attrs.iteritems():
            if getattr(attrvalue, 'is_hook', 0):
                newattrs['__%s__' % attrname] = attrvalue
            else:
                newattrs[attrname] = attrvalue

        return super(MyType, cls).__new__(cls, name, bases, newattrs)

    def __init__(self, name, bases, attrs):
        super(MyType, self).__init__(name, bases, attrs)

        # classregistry.register(self, self.interfaces)
        print ""Would register class %s now."" % self

    def __add__(self, other):
        class AutoClass(self, other):
            pass
        return AutoClass
        # Alternatively, to autogenerate the classname as well as the class:
        # return type(self.__name__ + other.__name__, (self, other), {})

    def unregister(self):
        # classregistry.unregister(self)
        print ""Would unregister class %s now."" % self

class MyObject:
    __metaclass__ = MyType


class NoneSample(MyObject):
    pass

# Will print ""NoneType None""
print type(NoneSample), repr(NoneSample)

class Example(MyObject):
    def __init__(self, value):
        self.value = value
    @make_hook
    def add(self, other):
        return self.__class__(self.value + other.value)

# Will unregister the class
Example.unregister()

inst = Example(10)
# Will fail with an AttributeError
#inst.unregister()

print inst + inst
class Sibling(MyObject):
    pass

ExampleSibling = Example + Sibling
# ExampleSibling is now a subclass of both Example and Sibling (with no
# content of its own) although it will believe it's called 'AutoClass'
print ExampleSibling
print ExampleSibling.__mro__
</code></pre>
"
73050,"<p>It may look cleaner using a key instead a cmp:</p>

<pre class=""lang-py prettyprint-override""><code>newlist = sorted(list_to_be_sorted, key=lambda k: k['name']) 
</code></pre>

<p>or as J.F.Sebastian and others suggested,</p>

<pre class=""lang-py prettyprint-override""><code>from operator import itemgetter
newlist = sorted(list_to_be_sorted, key=itemgetter('name')) 
</code></pre>

<p>For completeness (as pointed out in comments by fitzgeraldsteele), add <code>reverse=True</code> to sort descending</p>

<pre class=""lang-py prettyprint-override""><code>newlist = sorted(l, key=itemgetter('name'), reverse=True)
</code></pre>
"
237028,"<h2>Shortcut to <a href=""http://en.wikipedia.org/wiki/Grok"">Grokking</a> <code>yield</code></h2>

<p>When you see a function with <code>yield</code> statements, apply this easy trick to understand what will happen:</p>

<ol>
<li>Insert a line <code>result = []</code> at the start of the function.</li>
<li>Replace each <code>yield expr</code> with <code>result.append(expr)</code>.</li>
<li>Insert a line <code>return result</code> at the bottom of the function.</li>
<li>Yay - no more <code>yield</code> statements! Read and figure out code.</li>
<li>Compare function to original definition.</li>
</ol>

<p>This trick may give you an idea of the logic behind the function, but what actually happens with <code>yield</code> is significantly different that what happens in the list based approach. In many cases the yield approach will be a lot more memory efficient and faster too. In other cases this trick will get you stuck in an infinite loop, even though the original function works just fine. Read on to learn more...</p>

<h2>Don't confuse your Iterables, Iterators and Generators</h2>

<p>First, the <strong>iterator protocol</strong> - when you write</p>

<pre><code>for x in mylist:
    ...loop body...
</code></pre>

<p>Python performs the following two steps:</p>

<ol>
<li><p>Gets an iterator for <code>mylist</code>:</p>

<p>Call <code>iter(mylist)</code> -> this returns an object with a <code>next()</code> method (or <code>__next__()</code> in Python 3).</p>

<p>[This is the step most people forget to tell you about]</p></li>
<li><p>Uses the iterator to loop over items:</p>

<p>Keep calling the <code>next()</code> method on the iterator returned from step 1. The return value from <code>next()</code> is assigned to <code>x</code> and the loop body is executed. If an exception <code>StopIteration</code> is raised from within <code>next()</code>, it means there are no more values in the iterator and the loop is exited.</p></li>
</ol>

<p>The truth is Python performs the above two steps anytime it wants to <em>loop over</em> the contents of an object - so it could be a for loop, but it could also be code like <code>otherlist.extend(mylist)</code> (where <code>otherlist</code> is a Python list).</p>

<p>Here <code>mylist</code> is an <em>iterable</em> because it implements the iterator protocol. In a user defined class, you can implement the <code>__iter__()</code> method to make instances of your class iterable. This method should return an <em>iterator</em>. An iterator is an object with a <code>next()</code> method. It is possible to implement both <code>__iter__()</code> and <code>next()</code> on the same class, and have <code>__iter__()</code> return <code>self</code>. This will work for simple cases, but not when you want two iterators looping over the same object at the same time.</p>

<p>So that's the iterator protocol, many objects implement this protocol:</p>

<ol>
<li>Built-in lists, dictionaries, tuples, sets, files.</li>
<li>User defined classes that implement <code>__iter__()</code>.</li>
<li>Generators.</li>
</ol>

<p>Note that a <code>for</code> loop doesn't know what kind of object it's dealing with - it just follows the iterator protocol, and is happy to get item after item as it calls <code>next()</code>. Built-in lists return their items one by one, dictionaries return the <em>keys</em> one by one, files return the <em>lines</em> one by one, etc. And generators return... well that's where <code>yield</code> comes in:</p>

<pre><code>def f123():
    yield 1
    yield 2
    yield 3

for item in f123():
    print item
</code></pre>

<p>Instead of <code>yield</code> statements, if you had three <code>return</code> statements in <code>f123()</code> only the first would get executed, and the function would exit. But <code>f123()</code> is no ordinary function. When <code>f123()</code> is called, it <em>does not</em> return any of the values in the yield statements! It returns a generator object. Also, the function does not really exit - it goes into a suspended state. When the <code>for</code> loop tries to loop over the generator object, the function resumes from its suspended state at the very next line after the <code>yield</code> it previously returned from, executes the next line of code, in this case a <code>yield</code> statement, and returns that as the next item. This happens until the function exits, at which point the generator raises <code>StopIteration</code>, and the loop exits. </p>

<p>So the generator object is sort of like an adapter - at one end it exhibits the iterator protocol, by exposing <code>__iter__()</code> and <code>next()</code> methods to keep the <code>for</code> loop happy. At the other end however, it runs the function just enough to get the next value out of it, and puts it back in suspended mode.</p>

<h2>Why Use Generators?</h2>

<p>Usually you can write code that doesn't use generators but implements the same logic. One option is to use the temporary list 'trick' I mentioned before. That will not work in all cases, for e.g. if you have infinite loops, or it may make inefficient use of memory when you have a really long list. The other approach is to implement a new iterable class <code>SomethingIter</code> that keeps state in instance members and performs the next logical step in it's <code>next()</code> (or <code>__next__()</code> in Python 3) method. Depending on the logic, the code inside the <code>next()</code> method may end up looking very complex and be prone to bugs. Here generators provide a clean and easy solution.</p>
"
68672,"<p>Variables declared inside the class definition, but not inside a method are class or static variables:</p>

<pre><code>&gt;&gt;&gt; class MyClass:
...     i = 3
...
&gt;&gt;&gt; MyClass.i
3 
</code></pre>

<p>As @<a href=""http://stackoverflow.com/questions/68645/static-class-variables-in-python#answer-69067"">millerdev</a> points out, this creates a class-level ""i"" variable, but this is distinct from any instance-level ""i"" variable, so you could have</p>

<pre><code>&gt;&gt;&gt; m = MyClass()
&gt;&gt;&gt; m.i = 4
&gt;&gt;&gt; MyClass.i, m.i
&gt;&gt;&gt; (3, 4)
</code></pre>

<p>This is different from C++ and Java, but not so different from C#, where a static member can't be accessed using a reference to an instance.</p>

<p>See <a href=""https://docs.python.org/2/tutorial/classes.html#class-objects"">what the Python tutorial has to say on the subject of classes and class objects</a>.</p>

<p>@Steve Johnson has already answered regarding <a href=""http://web.archive.org/web/20090214211613/http://pyref.infogami.com/staticmethod"">static methods</a>, also documented under <a href=""https://docs.python.org/2/library/functions.html#staticmethod"">""Built-in Functions"" in the Python Library Reference</a>.</p>

<pre><code>class C:
    @staticmethod
    def f(arg1, arg2, ...): ...
</code></pre>

<p>@beidy recommends <a href=""https://docs.python.org/2/library/functions.html#classmethod"">classmethod</a>s over staticmethod, as the method then receives the class type as the first argument, but I'm still a little fuzzy on the advantages of this approach over staticmethod. If you are too, then it probably doesn't matter.</p>
"
339013,"<p>Strings:</p>

<pre><code>&gt;&gt;&gt; n = '4'
&gt;&gt;&gt; print n.zfill(3)
004
</code></pre>

<p>And for numbers:</p>

<pre><code>&gt;&gt;&gt; n = 4
&gt;&gt;&gt; print '%03d' % n
004
&gt;&gt;&gt; print format(4, '03') # python &gt;= 2.6
004
&gt;&gt;&gt; print '{0:03d}'.format(4)  # python &gt;= 2.6
004
&gt;&gt;&gt; print '{foo:03d}'.format(foo=4)  # python &gt;= 2.6
004
&gt;&gt;&gt; print('{:03d}'.format(4))  # python &gt;= 2.7 + python3
004
&gt;&gt;&gt; print('{0:03d}'.format(4))  # python 3
004
</code></pre>

<p><a href=""https://docs.python.org/2/library/string.html#formatexamples"">String formatting documentation</a>.</p>
"
123212,"<p><a href=""http://docs.python.org/2/library/shutil.html""><code>shutil</code></a> has many methods you can use. One of which is:</p>

<pre><code>from shutil import copyfile

copyfile(src, dst)
</code></pre>

<p>Copy the contents of the file named <code>src</code> to a file named <code>dst</code>. The destination location must be writable; otherwise, an <code>IOError</code> exception will be raised. If <code>dst</code> already exists, it will be replaced. Special files such as character or block devices and pipes cannot be copied with this function. <code>src</code> and <code>dst</code> are path names given as strings. </p>
"
82846,"<p>You have the <a href=""https://docs.python.org/2/library/os.path.html#os.path.exists""><code>os.path.exists</code></a> function:</p>

<pre><code>import os.path
os.path.exists(file_path)
</code></pre>

<p>This returns <code>True</code> for both files and directories but you can additionally use <code>os.path.isfile</code> to test if it's a file specifically.</p>
"
275025,"<p>Try the <a href=""http://docs.python.org/2/library/stdtypes.html#str.rstrip"">rstrip</a> method.</p>

<pre><code>&gt;&gt;&gt; 'test string\n'.rstrip()
'test string'
</code></pre>

<p>Note that Python's rstrip method strips <em>all</em> kinds of trailing whitespace by default, not just one newline as Perl does with chomp. To strip only newlines:</p>

<pre><code>&gt;&gt;&gt; 'test string \n\n'.rstrip('\n')
'test string '
</code></pre>

<p>There is also the <code>lstrip</code> and <code>strip</code> methods.</p>

<pre><code>&gt;&gt;&gt; s = "" \n  abc   def   ""
&gt;&gt;&gt; s.strip()
'abc   def'
&gt;&gt;&gt; s.rstrip()
' \n  abc   def'
&gt;&gt;&gt; s.lstrip()
'abc   def   '
&gt;&gt;&gt;
</code></pre>
"
3071,"<p>Assuming module <code>foo</code> with method <code>bar</code>:</p>

<pre><code>import foo
methodToCall = getattr(foo, 'bar')
result = methodToCall()
</code></pre>

<p>As far as that goes, lines 2 and 3 can be compressed to:</p>

<pre><code>result = getattr(foo, 'bar')()
</code></pre>

<p>if that makes more sense for your use case.  You can use <code>getattr</code> in this fashion on class instance bound methods, module-level methods, class methods... the list goes on.</p>
"
287944,"<p>This somewhat depends on what platform you are on. The most common way to do this is by printing ANSI escape sequences. For a simple example, here's some python code from the <a href=""https://svn.blender.org/svnroot/bf-blender/trunk/blender/build_files/scons/tools/bcolors.py"">blender build scripts</a>:</p>

<pre><code>class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
</code></pre>

<p>To use code like this, you can do something like </p>

<pre><code>print bcolors.WARNING + ""Warning: No active frommets remain. Continue?"" 
      + bcolors.ENDC
</code></pre>

<p>This will work on unixes including OS X, linux and windows (provided you use <a href=""https://github.com/adoxa/ansicon"">ANSICON</a>, or in Windows 10 provided you enable <a href=""https://msdn.microsoft.com/en-us/library/mt638032"">VT100 emulation</a>). There are ansi codes for setting the color, moving the cursor, and more.</p>

<p>If you are going to get complicated with this (and it sounds like you are if you are writing a game), you should look into the ""curses"" module, which handles a lot of the complicated parts of this for you. The <a href=""http://docs.python.org/howto/curses.html"">Python Curses HowTO</a> is a good introduction.</p>

<p>If you are not using extended ASCII (i.e. not on a PC), you are stuck with the ascii characters below 127, and '#' or '@' is probably your best bet for a block. If you can ensure your terminal is using a IBM <a href=""http://telecom.tbi.net/asc-ibm.html"">extended ascii character set</a>, you have many more options. Characters 176, 177, 178 and 219 are the ""block characters"".</p>

<p>Some modern text-based programs, such as ""Dwarf Fortress"", emulate text mode in a graphical mode, and use images of the classic PC font. You can find some of these bitmaps that you can use on the <a href=""http://dwarffortresswiki.org/DF2014:Tilesets"">Dwarf Fortress Wiki</a> see (<a href=""http://dwarffortresswiki.org/Tileset_repository"">user-made tilesets</a>).</p>

<p>The <a href=""http://en.wikipedia.org/wiki/TMDC"">Text Mode Demo Contest</a> has more resources for doing graphics in text mode.</p>

<p>Hmm.. I think got a little carried away on this answer. I am in the midst of planning an epic text-based adventure game, though. Good luck with your colored text!</p>
"
36908,"<p>The <code>*args</code> and <code>**kwargs</code> is a common idiom to allow arbitrary number of arguments to functions as described in the section <a href=""http://docs.python.org/dev/tutorial/controlflow.html#more-on-defining-functions"">more on defining functions</a> in the Python documentation.</p>

<p>The <code>*args</code> will give you all function parameters <a href=""https://docs.python.org/dev/tutorial/controlflow.html#arbitrary-argument-lists"">as a tuple</a>:</p>

<pre><code>In [1]: def foo(*args):
   ...:     for a in args:
   ...:         print a
   ...:         
   ...:         

In [2]: foo(1)
1


In [4]: foo(1,2,3)
1
2
3
</code></pre>

<p>The <code>**kwargs</code> will give you all 
<strong>keyword arguments</strong> except for those corresponding to a formal parameter as a dictionary.</p>

<pre><code>In [5]: def bar(**kwargs):
   ...:     for a in kwargs:
   ...:         print a, kwargs[a]
   ...:         
   ...:         

In [6]: bar(name='one', age=27)
age 27
name one
</code></pre>

<p>Both idioms can be mixed with normal arguments to allow a set of fixed and some variable arguments:</p>

<pre><code>def foo(kind, *args, **kwargs):
   pass
</code></pre>

<p>Another usage of the <code>*l</code> idiom is to <strong>unpack argument lists</strong> when calling a function.</p>

<pre><code>In [9]: def foo(bar, lee):
   ...:     print bar, lee
   ...:     
   ...:     

In [10]: l = [1,2]

In [11]: foo(*l)
1 2
</code></pre>

<p>In Python 3 it is possible to use <code>*l</code> on the left side of an assignment (<a href=""http://www.python.org/dev/peps/pep-3132/"">Extended Iterable Unpacking</a>):</p>

<pre><code>first, *rest = [1,2,3,4]
first, *l, last = [1,2,3,4]
</code></pre>

<p>Also Python 3 adds new semantic (refer <a href=""https://www.python.org/dev/peps/pep-3102/"">PEP 3102</a>):</p>

<pre><code>def func(arg1, arg2, arg3='default', *, kwarg1='abc', kwarg2='xyz'):
    pass
</code></pre>

<p>Such function accepts only 2 positional arguments, and everything after <code>*</code> can only be passed as keyword argument, not positional one.</p>

<p>In Python 2 similar was true for all parameters after <code>*args</code>.</p>
"
303225,"<pre><code>import shutil

shutil.rmtree('/folder_name')
</code></pre>

<p><a href=""http://docs.python.org/library/shutil.html#shutil.rmtree"">Standard Library Reference: shutil.rmtree</a>.</p>
"
209854,"<p>Like this:</p>

<pre><code>&gt;&gt;&gt; keys = ['a', 'b', 'c']
&gt;&gt;&gt; values = [1, 2, 3]
&gt;&gt;&gt; dictionary = dict(zip(keys, values))
&gt;&gt;&gt; print dictionary
{'a': 1, 'b': 2, 'c': 3}
</code></pre>

<p>Voila :-)  The pairwise dict constructor and zip function are awesomely useful: <a href=""https://docs.python.org/2/library/functions.html#func-dict"">https://docs.python.org/2/library/functions.html#func-dict</a></p>
"
230774,"<pre><code>import sys
sys.stdout.flush()
</code></pre>

<p>Print by default prints to <code>sys.stdout</code>.</p>

<p>References:</p>

<ul>
<li><a href=""http://docs.python.org/reference/simple_stmts.html#the-print-statement"">http://docs.python.org/reference/simple_stmts.html#the-print-statement</a></li>
<li><a href=""http://docs.python.org/library/sys.html"">http://docs.python.org/library/sys.html</a></li>
<li><a href=""http://docs.python.org/library/stdtypes.html#file-objects"">http://docs.python.org/library/stdtypes.html#file-objects</a></li>
</ul>
"
22776,"<p>One more, using <a href=""http://docs.python.org/2/library/urllib.html#urllib.urlretrieve""><code>urlretrieve</code></a>:</p>

<pre><code>import urllib
urllib.urlretrieve (""http://www.example.com/songs/mp3.mp3"", ""mp3.mp3"")
</code></pre>

<p>(for Python 3+ use 'import urllib.request' and urllib.request.urlretrieve)</p>

<p>Yet another one, with a ""progressbar""</p>

<pre><code>import urllib2

url = ""http://download.thinkbroadband.com/10MB.zip""

file_name = url.split('/')[-1]
u = urllib2.urlopen(url)
f = open(file_name, 'wb')
meta = u.info()
file_size = int(meta.getheaders(""Content-Length"")[0])
print ""Downloading: %s Bytes: %s"" % (file_name, file_size)

file_size_dl = 0
block_sz = 8192
while True:
    buffer = u.read(block_sz)
    if not buffer:
        break

    file_size_dl += len(buffer)
    f.write(buffer)
    status = r""%10d  [%3.2f%%]"" % (file_size_dl, file_size_dl * 100. / file_size)
    status = status + chr(8)*(len(status)+1)
    print status,

f.close()
</code></pre>
"
152596,"<p>To check if the type of <code>o</code> is exactly <code>str</code>:</p>

<pre><code>type(o) is str
</code></pre>

<p>To check if <code>o</code> is an instance of <code>str</code> or any subclass of <code>str</code> (this would be the ""canonical"" way):</p>

<pre><code>isinstance(o, str)
</code></pre>

<p>The following also works, and can be useful in some cases:</p>

<pre><code>issubclass(type(o), str)
type(o) in ([str] + str.__subclasses__())
</code></pre>

<p>See <a href=""http://docs.python.org/2/library/functions.html"">Built-in Functions</a> in the Python Library Reference for relevant information.</p>

<p>One more note: in this case, you may actually want to use:</p>

<pre><code>isinstance(o, basestring)
</code></pre>

<p>because this will also catch Unicode strings (<code>unicode</code> is not a subclass of <code>str</code>; both <code>str</code> and <code>unicode</code> are subclasses of <code>basestring</code>).</p>

<p>Alternatively, <code>isinstance</code> accepts a tuple of classes. This will return True if x is an instance of any subclass of any of (str, unicode):</p>

<pre><code>isinstance(o, (str, unicode))
</code></pre>
"
227472,"<p>From <a href=""http://mail.python.org/pipermail/python-win32/2005-April/003100.html"">here</a>:</p>

<blockquote>
  <p>function ord() would get the int value
  of the char. And in case you want to
  convert back after playing with the
  number, function chr() does the trick.</p>
</blockquote>

<pre><code>&gt;&gt;&gt; ord('a')
97
&gt;&gt;&gt; chr(97)
'a'
&gt;&gt;&gt; chr(ord('a') + 3)
'd'
&gt;&gt;&gt;
</code></pre>

<p>There is also the <code>unichr</code> function, returning the <a href=""http://en.wikipedia.org/wiki/Unicode"">Unicode</a> character whose ordinal is the <code>unichr</code> argument:</p>

<pre><code>&gt;&gt;&gt; unichr(97)
u'a'
&gt;&gt;&gt; unichr(1234)
u'\u04d2'
</code></pre>
"
103081,"<p>If you'd like defaults you could use the dictionary <a href=""https://docs.python.org/2/library/stdtypes.html#dict.get""><code>get(key[, default])</code></a> method:</p>

<pre><code>def f(x):
    return {
        'a': 1,
        'b': 2,
    }.get(x, 9)    # 9 is default if x not found
</code></pre>
"
73673,"<pre><code>import sys
sys.exit()
</code></pre>

<p>details from the <a href=""https://docs.python.org/2/library/constants.html#exit""><code>sys</code> module documentation</a>:</p>

<blockquote>
  <p><code>sys.<strong>exit</strong>([<em>arg</em>])</code></p>
  
  <blockquote>
    <p>Exit from Python. This is implemented by raising the
    <a href=""https://docs.python.org/2/library/exceptions.html#SystemExit""><code>SystemExit</code></a> exception, so cleanup actions specified by finally clauses
    of <a href=""https://docs.python.org/2/reference/compound_stmts.html#try""><code>try</code></a> statements are honored, and it is possible to intercept the
    exit attempt at an outer level.</p>
    
    <p>The optional argument <em>arg</em> can be an integer giving the exit status
    (defaulting to zero), or another type of object. If it is an integer,
    zero is considered âsuccessful terminationâ and any nonzero value is
    considered âabnormal terminationâ by shells and the like. Most systems
    require it to be in the range 0-127, and produce undefined results
    otherwise. Some systems have a convention for assigning specific
    meanings to specific exit codes, but these are generally
    underdeveloped; Unix programs generally use 2 for command line syntax
    errors and 1 for all other kind of errors. If another type of object
    is passed, None is equivalent to passing zero, and any other object is
    printed to <a href=""https://docs.python.org/2/library/sys.html#sys.stderr""><code>stderr</code></a> and results in an exit code of 1. In particular,
    <code>sys.exit(""some error message"")</code> is a quick way to exit a program when
    an error occurs.</p>
    
    <p>Since <a href=""https://docs.python.org/2/library/constants.html#exit""><code>exit()</code></a> ultimately âonlyâ raises an exception, it will only exit
    the process when called from the main thread, and the exception is not
    intercepted.</p>
  </blockquote>
</blockquote>

<p>Note that this is the 'nice' way to exit.  @<a href=""http://stackoverflow.com/questions/73663/terminating-a-python-script#76374"">glyphtwistedmatrix</a> below points out that if you want a 'hard exit', you can use os._exit(<em>errorcode</em>), though it's likely os-specific to some extent (it might not take an errorcode under windows, for example), and it definitely is less friendly since it doesn't let the interpreter do any cleanup before the process dies.</p>
"
84173,"<p>Unlike <a href=""http://docs.python.org/3.3/library/os.path.html?highlight=os.path#os.path.isfile""><code>isfile()</code></a>, <a href=""http://docs.python.org/3.3/library/os.path.html?highlight=os.path#os.path.exists""><code>exists()</code></a> will yield <em>True</em> for directories.<br>
So depending on if you want only plain files or also directories, you'll use <code>isfile()</code> or <code>exists()</code>. Here is a simple REPL output.</p>

<pre><code>&gt;&gt;&gt; print os.path.isfile(""/etc/password.txt"")
True
&gt;&gt;&gt; print os.path.isfile(""/etc"")
False
&gt;&gt;&gt; print os.path.isfile(""/does/not/exist"")
False
&gt;&gt;&gt; print os.path.exists(""/etc/password.txt"")
True
&gt;&gt;&gt; print os.path.exists(""/etc"")
True
&gt;&gt;&gt; print os.path.exists(""/does/not/exist"")
False
</code></pre>
"
60211,"<p>You could use a dictionary:</p>

<pre><code>def f(x):
    return {
        'a': 1,
        'b': 2,
    }[x]
</code></pre>
"
178399,"<p>One thing that is really helpful in learning Python is to use the interactive help function:</p>

<pre><code>&gt;&gt;&gt; help([""foo"", ""bar"", ""baz""])
Help on list object:

class list(object)
 ...

 |
 |  index(...)
 |      L.index(value, [start, [stop]]) -&gt; integer -- return first index of value
 |
</code></pre>

<p>which will often lead you to the method you are looking for.</p>
"
53180,"<p>What is the line?  You can just have arguments on the next line without any problems:</p>

<pre><code>a = dostuff(blahblah1, blahblah2, blahblah3, blahblah4, blahblah5, 
            blahblah6, blahblah7)
</code></pre>

<p>Otherwise you can do something like this:</p>

<pre><code>if a == True and \
   b == False
</code></pre>

<p>Check the <a href=""http://www.python.org/dev/peps/pep-0008/"">style guide</a> for more information.</p>

<p>From your example line:</p>

<pre><code>a = '1' + '2' + '3' + \
    '4' + '5'
</code></pre>

<p>Or:</p>

<pre><code>a = ('1' + '2' + '3' +
    '4' + '5')
</code></pre>

<p>Note that the style guide says that using the implicit continuation with parentheses is preferred, but in this particular case just adding parentheses around your expression is probably the wrong way to go.</p>
"
36937,"<p>Before PEP 435, Python didn't have an equivalent but you could implement your own.</p>

<p>Myself, I like keeping it simple (I've seen some horribly complex examples on the net), something like this ...</p>

<pre><code>class Animal:
    DOG = 1
    CAT = 2

x = Animal.DOG
</code></pre>

<hr>

<p>In Python 3.4 (<a href=""http://www.python.org/dev/peps/pep-0435/"">PEP 435</a>), you can make Enum the base class.  This gets you a little bit of extra functionality, described in the PEP.  For example, enum values are distinct from integers.</p>

<pre><code>class Animal(Enum):
    DOG = 1
    CAT = 2

print(Animal.DOG)
&lt;Animal.DOG: 1&gt;
</code></pre>

<hr>

<p>If you don't want to type the values, use the following shortcut:</p>

<pre><code>class Animal(Enum):
    DOG, CAT = range(2)
</code></pre>
"
209550,"<p><strong>Without</strong> the 0x prefix, you need to specify the base explicitly, otherwise there's no way to tell:</p>

<pre><code>x = int(""deadbeef"", 16)
</code></pre>

<p><strong>With</strong> the 0x prefix, Python can distinguish hex and decimal automatically.</p>

<pre><code>&gt;&gt;&gt; print int(""0xdeadbeef"", 0)
3735928559
&gt;&gt;&gt; print int(""10"", 0)
10
</code></pre>

<p>(You <em>must</em> specify <code>0</code> as the base in order to invoke this prefix-guessing behavior; omitting the second parameter means to assume base-10. See the comments for more details.)</p>
"
2982,"<p>In Python, there is a difference between functions and bound methods.</p>

<pre><code>&gt;&gt;&gt; def foo():
...     print ""foo""
...
&gt;&gt;&gt; class A:
...     def bar( self ):
...         print ""bar""
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; foo
&lt;function foo at 0x00A98D70&gt;
&gt;&gt;&gt; a.bar
&lt;bound method A.bar of &lt;__main__.A instance at 0x00A9BC88&gt;&gt;
&gt;&gt;&gt;
</code></pre>

<p>Bound methods have been ""bound"" (how descriptive) to an instance, and that instance will be passed as the first argument whenever the method is called.</p>

<p>Callables that are attributes of a class (as opposed to an instance) are still unbound, though, so you can modify the class definition whenever you want:</p>

<pre><code>&gt;&gt;&gt; def fooFighters( self ):
...     print ""fooFighters""
...
&gt;&gt;&gt; A.fooFighters = fooFighters
&gt;&gt;&gt; a2 = A()
&gt;&gt;&gt; a2.fooFighters
&lt;bound method A.fooFighters of &lt;__main__.A instance at 0x00A9BEB8&gt;&gt;
&gt;&gt;&gt; a2.fooFighters()
fooFighters
</code></pre>

<p>Previously defined instances are updated as well (as long as they haven't overridden the attribute themselves):</p>

<pre><code>&gt;&gt;&gt; a.fooFighters()
fooFighters
</code></pre>

<p>The problem comes when you want to attach a method to a single instance:</p>

<pre><code>&gt;&gt;&gt; def barFighters( self ):
...     print ""barFighters""
...
&gt;&gt;&gt; a.barFighters = barFighters
&gt;&gt;&gt; a.barFighters()
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: barFighters() takes exactly 1 argument (0 given)
</code></pre>

<p>The function is not automatically bound when it's attached directly to an instance:</p>

<pre><code>&gt;&gt;&gt; a.barFighters
&lt;function barFighters at 0x00A98EF0&gt;
</code></pre>

<p>To bind it, we can use the <a href=""http://docs.python.org/library/types.html?highlight=methodtype#module-types"">MethodType function in the types module</a>:</p>

<pre><code>&gt;&gt;&gt; import types
&gt;&gt;&gt; a.barFighters = types.MethodType( barFighters, a )
&gt;&gt;&gt; a.barFighters
&lt;bound method ?.barFighters of &lt;__main__.A instance at 0x00A9BC88&gt;&gt;
&gt;&gt;&gt; a.barFighters()
barFighters
</code></pre>

<p>This time other instances of the class have not been affected:</p>

<pre><code>&gt;&gt;&gt; a2.barFighters()
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
AttributeError: A instance has no attribute 'barFighters'
</code></pre>

<p>More information can be found by reading about <a href=""http://users.rcn.com/python/download/Descriptor.htm"">descriptors</a> and <a href=""http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html"">metaclass</a> <a href=""http://www.gnosis.cx/publish/programming/metaclass_2.html"">programming</a>.</p>
"
67692,"<p>For Python 3.5+ use:</p>

<pre><code>import importlib.util
spec = importlib.util.spec_from_file_location(""module.name"", ""/path/to/file.py"")
foo = importlib.util.module_from_spec(spec)
spec.loader.exec_module(foo)
foo.MyClass()
</code></pre>

<p>For Python 3.3 and 3.4 use:</p>

<pre><code>from importlib.machinery import SourceFileLoader

foo = SourceFileLoader(""module.name"", ""/path/to/file.py"").load_module()
foo.MyClass()
</code></pre>

<p>(Although this has been deprecated in Python 3.4.)</p>

<p>Python 2 use:</p>

<pre><code>import imp

foo = imp.load_source('module.name', '/path/to/file.py')
foo.MyClass()
</code></pre>

<p>There are equivalent convenience functions for compiled Python files and DLLs.</p>

<p>See also. <a href=""http://bugs.python.org/issue21436"">http://bugs.python.org/issue21436</a>.</p>
"
53752,"<p>The pythonic way to do it is from the <a href=""https://www.python.org/dev/peps/pep-0008"">PEP 8 style guide</a>:</p>

<blockquote>
  <p>For sequences, (strings, lists, tuples), use the fact that empty sequences are false.
  </p>

<pre><code><b>Yes:</b> if not seq:
     if seq:

<b>No:</b>  if len(seq):
     if not len(seq):
</code></pre>
</blockquote>
"
43663,"<p>I didn't notice this earlier when I was looking at the <a href=""https://docs.python.org/2/library/calendar.html"">documentation for the calendar module</a>, but a method called <a href=""http://docs.python.org/library/calendar.html#calendar.monthrange"">monthrange</a> provides this information:</p>

<blockquote>
  <p><b>monthrange(year, month)</b><br>
  &nbsp;&nbsp;&nbsp;&nbsp;Returns weekday of first day of the month and number of days in month, for the specified year and month. </p>
</blockquote>

<pre><code>&gt;&gt;&gt; import calendar
&gt;&gt;&gt; calendar.monthrange(2002,1)
(1, 31)
&gt;&gt;&gt; calendar.monthrange(2008,2)
(4, 29)
&gt;&gt;&gt; calendar.monthrange(2100,2)
(0, 28)
</code></pre>

<p>so:</p>

<pre><code>calendar.monthrange(year, month)[1]
</code></pre>

<p>seems like the simplest way to go.</p>

<p>Just to be clear, <code>monthrange</code> supports leap years as well:</p>

<pre><code>&gt;&gt;&gt; from calendar import monthrange
&gt;&gt;&gt; monthrange(2012, 2)
(2, 29)
</code></pre>

<p><a href=""http://stackoverflow.com/questions/42950/get-last-day-of-the-month-in-python#43088"">My previous answer</a> still works, but is clearly suboptimal.</p>
"
237084,"<p>You have a couple of choices. For one, you can use the <a href=""https://docs.python.org/library/os.path.html#os.path.getmtime"">os.path.getmtime</a> and <a href=""https://docs.python.org/library/os.path.html#os.path.getctime"">os.path.getctime</a> functions:</p>

<pre><code>import os.path, time
print ""last modified: %s"" % time.ctime(os.path.getmtime(file))
print ""created: %s"" % time.ctime(os.path.getctime(file))
</code></pre>

<p>Your other option is to use <a href=""https://docs.python.org/library/os.html#os.stat"">os.stat</a>:</p>

<pre><code>import os, time
(mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(file)
print ""last modified: %s"" % time.ctime(mtime)
</code></pre>

<p><strong>Note</strong>: ctime() does <em>not</em> refer to creation time on *nix systems, but rather the last time the inode data changed. (thanks to kojiro for making that fact more clear in the comments by providing a link to an interesting blog post)</p>
"
136138,"<p>A staticmethod is a method that knows nothing about the class or instance it was called on. It just gets the arguments that were passed, no implicit first argument. It is basically useless in Python -- you can just use a module function instead of a staticmethod.</p>

<p>A classmethod, on the other hand, is a method that gets passed the class it was called on, or the class of the instance it was called on, as first argument. This is useful when you want the method to be a factory for the class: since it gets the actual class it was called on as first argument, you can always instantiate the right class, even when subclasses are involved. Observe for instance how <code>dict.fromkeys()</code>, a classmethod, returns an instance of the subclass when called on a subclass:</p>

<pre><code>&gt;&gt;&gt; class DictSubclass(dict):
...     def __repr__(self):
...         return ""DictSubclass""
... 
&gt;&gt;&gt; dict.fromkeys(""abc"")
{'a': None, 'c': None, 'b': None}
&gt;&gt;&gt; DictSubclass.fromkeys(""abc"")
DictSubclass
&gt;&gt;&gt; 
</code></pre>
"
120701,"<p>This is a way to traverse every file and directory in a directory tree:</p>

<pre><code>import os

for dirname, dirnames, filenames in os.walk('.'):
    # print path to all subdirectories first.
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))

    # print path to all filenames.
    for filename in filenames:
        print(os.path.join(dirname, filename))

    # Advanced usage:
    # editing the 'dirnames' list will stop os.walk() from recursing into there.
    if '.git' in dirnames:
        # don't go into any .git directories.
        dirnames.remove('.git')
</code></pre>
"
311655,"<h2>The WHY: dates are objects</h2>

<p>In Python, dates are objects. Therefore, when you manipulate them, you manipulate objects, not strings, not timestamps nor anything.</p>

<p>Any object in Python have TWO string representations:</p>

<ul>
<li><p>The regular representation that is used by ""print"", can be get using the <code>str()</code> function. It is most of the time the most common human readable format and is used to ease display. So <code>str(datetime.datetime(2008, 11, 22, 19, 53, 42))</code> gives you <code>'2008-11-22 19:53:42'</code>. </p></li>
<li><p>The alternative representation that is used to represent the object nature (as a data). It can be get using the <code>repr()</code> function and is handy to know what kind of data your manipulating while you are developing or debugging. <code>repr(datetime.datetime(2008, 11, 22, 19, 53, 42))</code> gives you <code>'datetime.datetime(2008, 11, 22, 19, 53, 42)'</code>.</p></li>
</ul>

<p>What happened is that when you have printed the date using ""print"", it used <code>str()</code> so you could see a nice date string. But when you have printed <code>mylist</code>, you have printed a list of objects and Python tried to represent the set of data, using <code>repr()</code>.</p>

<h2>The How: what do you want to do with that?</h2>

<p>Well, when you manipulate dates, keep using the date objects all long the way. They got thousand of useful methods and most of the Python API expect dates to be objects.</p>

<p>When you want to display them, just use <code>str()</code>. In Python, the good practice is to explicitly cast everything. So just when it's time to print, get a string representation of your date using <code>str(date)</code>.</p>

<p>One last thing. When you tried to print the dates, you printed <code>mylist</code>. If you want to print a date, you must print the date objects, not their container (the list).</p>

<p>E.G, you want to print all the date in a list :</p>

<pre><code>for date in mylist :
    print str(date)
</code></pre>

<p>Note that <strong><em>in that specific case</em></strong>, you can even omit <code>str()</code> because print will use it for you. But it should not become a habit :-)</p>

<h2>Practical case, using your code</h2>

<pre><code>import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print ""This is a new day : "", mylist[0] # will work
This is a new day : 2008-11-22

print ""This is a new day : "" + mylist[0] # will crash
cannot concatenate 'str' and 'datetime.date' objects

print ""This is a new day : "" + str(mylist[0]) 
This is a new day : 2008-11-22
</code></pre>

<h2>Advanced date formatting</h2>

<p>Dates have a default representation, but you may want to print them in a specific format. In that case, you can get a custom string representation using the <code>strftime()</code> method.</p>

<p><code>strftime()</code> expects a string pattern explaining how you want to format your date.</p>

<p>E.G : </p>

<pre><code>print today.strftime('We are the %d, %b %Y')
'We are the 22, Nov 2008'
</code></pre>

<p>All the letter after a <code>""%""</code> represent a format for something :</p>

<ul>
<li><code>%d</code> is the day number</li>
<li><code>%m</code> is the month number</li>
<li><code>%b</code> is the month abbreviation</li>
<li><code>%y</code> is the year last two digits</li>
<li><code>%Y</code> is the all year</li>
</ul>

<p>etc</p>

<p><a href=""http://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior"">Have a look at the official documentation</a>, or <a href=""http://strftime.org"">McCutchen's quick reference</a> you can't know them all.</p>

<p>Since <a href=""http://www.python.org/dev/peps/pep-3101/"">PEP3101</a>, every object can have its own format used automatically by the method format of any string. In the case of the datetime, the format is the same used in
strftime. So you can do the same as above like this:</p>

<pre><code>print ""We are the {:%d, %b %Y}"".format(today)
'We are the 22, Nov 2008'
</code></pre>

<p>The advantage of this form is that you can also convert other objects at the same time.</p>

<h2>Localization</h2>

<p>Dates can automatically adapt to the local language and culture if you use them the right way, but it's a bit complicated. Maybe for another question on SO(Stack Overflow) ;-)</p>
"
193539,"<p>You want vars() mixed with pprint:</p>

<pre><code>from pprint import pprint
pprint (vars(your_object))
</code></pre>
"
64130,"<p>Linked to, but not explicitly mentioned here, is exactly when <code>__all__</code> is used. It is a list of strings defining what symbols in a module will be exported when <code>from &lt;module&gt; import *</code> is used on the module.</p>

<p>For example, the following code in a <code>foo.py</code> explicitly exports the symbols <code>bar</code> and <code>baz</code>:</p>

<pre><code>__all__ = ['bar', 'baz']

waz = 5
bar = 10
def baz(): return 'baz'
</code></pre>

<p>These symbols can then be imported like so:</p>

<pre><code>from foo import *

print bar
print baz

# The following will trigger an exception, as ""waz"" is not exported by the module
print waz
</code></pre>

<p>If the <code>__all__</code> above is commented out, this code will then execute to completion, as the default behaviour of <code>import *</code> is to import all symbols that do not begin with an underscore, from the given namespace.</p>

<p>Reference: <a href=""https://docs.python.org/3.5/tutorial/modules.html#importing-from-a-package"">https://docs.python.org/3.5/tutorial/modules.html#importing-from-a-package</a></p>

<p><strong>NOTE:</strong> <code>__all__</code> affects the <code>from &lt;module&gt; import *</code> behavior only. Members that are not mentioned in <code>__all__</code> are still accessible from outside the module and can be imported with <code>from &lt;module&gt; import &lt;member&gt;</code>.</p>
"
39437,"<p>An alternative:</p>

<pre><code>z = x.copy()
z.update(y)
</code></pre>
"
309000,"<p>When you use a decorator, you're replacing one function with another.  In other words, if you have a decorator</p>

<pre><code>def logged(func):
    def with_logging(*args, **kwargs):
        print func.__name__ + "" was called""
        return func(*args, **kwargs)
    return with_logging
</code></pre>

<p>then when you say</p>

<pre><code>@logged
def f(x):
   """"""does some math""""""
   return x + x * x
</code></pre>

<p>it's exactly the same as saying</p>

<pre><code>def f(x):
    """"""does some math""""""
    return x + x * x
f = logged(f)
</code></pre>

<p>and your function f is replaced with the function with_logging.  Unfortunately, this means that if you then say</p>

<pre><code>print f.__name__
</code></pre>

<p>it will print <code>with_logging</code> because that's the name of your new function.  In fact, if you look at the docstring for f, it will be blank because with_logging has no docstring, and so the docstring you wrote won't be there anymore.  Also, if you look at the pydoc result for that function, it won't be listed as taking one argument <code>x</code>; instead it'll be listed as taking <code>*args</code> and <code>**kwargs</code> because that's what with_logging takes.</p>

<p>If using a decorator always meant losing this information about a function, it would be a serious problem.  That's why we have <code>functools.wraps</code>.  This takes a function used in a decorator and adds the functionality of copying over the function name, docstring, arguments list, etc.  And since <code>wraps</code> is itself a decorator, the following code does the correct thing:</p>

<pre><code>from functools import wraps
def logged(func):
    @wraps(func)
    def with_logging(*args, **kwargs):
        print func.__name__ + "" was called""
        return func(*args, **kwargs)
    return with_logging

@logged
def f(x):
   """"""does some math""""""
   return x + x * x

print f.__name__  # prints 'f'
print f.__doc__   # prints 'does some math'
</code></pre>
"
94962,"<p>range creates a list, so if you do <code>range(1, 10000000)</code> it creates a list in memory with <code>9999999</code> elements.</p>

<p><code>xrange</code> is a sequence object that  evaluates lazily.  </p>
"
133024,"<p><code>is</code> will return <code>True</code> if two variables point to the same object, <code>==</code> if the objects referred to by the variables are equal.</p>

<pre><code>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b is a 
True
&gt;&gt;&gt; b == a
True
&gt;&gt;&gt; b = a[:]
&gt;&gt;&gt; b is a
False
&gt;&gt;&gt; b == a
True
</code></pre>

<p>In your case, the second test only works because Python caches small integer objects, which is an implementation detail. For larger integers, this does not work:</p>

<pre><code>&gt;&gt;&gt; 1000 is 10**3
False
&gt;&gt;&gt; 1000 == 10**3
True
</code></pre>

<p>The same holds true for string literals:</p>

<pre><code>&gt;&gt;&gt; ""a"" is ""a""
True
&gt;&gt;&gt; ""aa"" is ""a"" * 2
True
&gt;&gt;&gt; x = ""a""
&gt;&gt;&gt; ""aa"" is x * 2
False
&gt;&gt;&gt; ""aa"" is intern(x*2)
True
</code></pre>

<p>Please see <a href=""http://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none"">this question</a> as well.</p>
"
51523,"<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.abspath(""mydir/myfile.txt"")
</code></pre>
"
293633,"<p>I'm surprised no one has mentioned the <a href=""http://pypi.python.org/pypi/termcolor"">Python termcolor module</a>. Usage is pretty simple:</p>

<pre><code>from termcolor import colored

print colored('hello', 'red'), colored('world', 'green')
</code></pre>

<p>It may not be sophisticated enough, however, for game programming and the ""colored blocks"" that you want to do...</p>
"
134951,"<p>Here you are:</p>

<pre><code>print ""%02d"" % (1,)
</code></pre>

<p>Basically <strong>%</strong> is like <code>printf</code> or <code>sprint</code>.</p>
"
69067,"<p>@Blair Conrad said static variables declared inside the class definition, but not inside a method are class or ""static"" variables:</p>

<pre><code>&gt;&gt;&gt; class Test(object):
...     i = 3
...
&gt;&gt;&gt; Test.i
3
</code></pre>

<p>There are a few gotcha's here. Carrying on from the example above:</p>

<pre><code>&gt;&gt;&gt; t = Test()
&gt;&gt;&gt; t.i     # static variable accessed via instance
3
&gt;&gt;&gt; t.i = 5 # but if we assign to the instance ...
&gt;&gt;&gt; Test.i  # we have not changed the static variable
3
&gt;&gt;&gt; t.i     # we have overwritten Test.i on t by creating a new attribute t.i
5
&gt;&gt;&gt; Test.i = 6 # to change the static variable we do it by assigning to the class
&gt;&gt;&gt; t.i
5
&gt;&gt;&gt; Test.i
6
&gt;&gt;&gt; u = Test()
&gt;&gt;&gt; u.i
6           # changes to t do not affect new instances of Test

# Namespaces are one honking great idea -- let's do more of those!
&gt;&gt;&gt; Test.__dict__
{'i': 6, ...}
&gt;&gt;&gt; t.__dict__
{'i': 5}
&gt;&gt;&gt; u.__dict__
{}
</code></pre>

<p>Notice how the instance variable <code>t.i</code> got out of sync with the ""static"" class variable when the attribute <code>i</code> was set directly on <code>t</code>. This is because <code>i</code> was re-bound within the <code>t</code> namespace, which is distinct from the <code>Test</code> namespace. If you want to change the value of a ""static"" variable, you must change it within the scope (or object) where it was originally defined. I put ""static"" in quotes because Python does not really have static variables in the sense that C++ and Java do.</p>

<p>Although it doesn't say anything specific about static variables or methods, the <a href=""http://docs.python.org/tut/"">Python tutorial</a> has some relevant information on <a href=""https://docs.python.org/2/tutorial/classes.html"">classes and class objects</a>. </p>

<p>@Steve Johnson also answered regarding static methods, also documented under ""Built-in Functions"" in the Python Library Reference.</p>

<pre><code>class Test(object):
    @staticmethod
    def f(arg1, arg2, ...):
        ...
</code></pre>

<p>@beid also mentioned classmethod, which is similar to staticmethod. A classmethod's first argument is the class object. Example:</p>

<pre><code>class Test(object):
    i = 3 # class (or static) variable
    @classmethod
    def g(cls, arg):
        # here we can use 'cls' instead of the class name (Test)
        if arg &gt; cls.i:
            cls.i = arg # would the the same as  Test.i = arg1
</code></pre>
"
19343,"<p><a href=""http://docs.python.org/library/functions.html#zip""><code>zip</code></a> is its own inverse! Provided you use the special * operator.</p>

<pre><code>&gt;&gt;&gt; zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])
[('a', 'b', 'c', 'd'), (1, 2, 3, 4)]
</code></pre>

<p>The way this works is by calling <code>zip</code> with the arguments:</p>

<pre><code>zip(('a', 1), ('b', 2), ('c', 3), ('d', 4))
</code></pre>

<p>â¦ except the arguments are passed to <code>zip</code> directly (after being converted to a tuple), so there's no need to worry about the number of arguments getting too big.</p>
"
261727,"<p>""Is there a good way to handle this problem?""  No.  Nothing can be protected against reverse engineering.  Even the firmware on DVD machines has been reverse engineered and <a href=""http://en.wikipedia.org/wiki/AACS%5Fencryption%5Fkey%5Fcontroversy"">AACS Encryption key</a> exposed.  And that's in spite of the DMCA making that a criminal offense.</p>

<p>Since no technical method can stop your customers from reading your code, you have to apply ordinary commercial methods.</p>

<ol>
<li><p>Licenses.  Contracts.  Terms and Conditions.  This still works even when people can read the code.  Note that some of your Python-based components may require that you pay fees before you sell software using those components.  Also, some open-source licenses prohibit you from concealing the source or origins of that component.  </p></li>
<li><p>Offer significant value.  If your stuff is so good -- at a price that is hard to refuse -- there's no incentive to waste time and money reverse engineering anything.  Reverse engineering is expensive.  Make your product slightly less expensive.</p></li>
<li><p>Offer upgrades and enhancements that make any reverse engineering a bad idea.  When the next release breaks their reverse engineering, there's no point.  This can be carried to absurd extremes, but you should offer new features that make the next release more valuable than reverse engineering.</p></li>
<li><p>Offer customization at rates so attractive that they'd rather pay you do build and support the enhancements.</p></li>
<li><p>Use a license key which expires.  This is cruel, and will give you a bad reputation, but it certainly makes your software stop working.  </p></li>
<li><p>Offer it as a web service.  SaaS involves no downloads to customers. </p></li>
</ol>
"
7286,"<p>As Sebastjan said, <strong>you first have to sort your data. This is important.</strong></p>

<p>The part I didn't get is that in the example construction</p>

<pre><code>groups = []
uniquekeys = []
for k, g in groupby(data, keyfunc):
   groups.append(list(g))    # Store group iterator as a list
   uniquekeys.append(k)
</code></pre>

<p><code>k</code> is the current grouping key, and <code>g</code> is an iterator that you can use to iterate over the group defined by that grouping key. In other words, the <code>groupby</code> iterator itself returns iterators.</p>

<p>Here's an example of that, using clearer variable names:</p>

<pre><code>from itertools import groupby

things = [(""animal"", ""bear""), (""animal"", ""duck""), (""plant"", ""cactus""), (""vehicle"", ""speed boat""), (""vehicle"", ""school bus"")]

for key, group in groupby(things, lambda x: x[0]):
    for thing in group:
        print ""A %s is a %s."" % (thing[1], key)
    print "" ""
</code></pre>

<p>This will give you the output:</p>

<blockquote>
  <p>A bear is a animal.<br>
  A duck is a animal.</p>
  
  <p>A cactus is a plant.</p>
  
  <p>A speed boat is a vehicle.<br>
  A school bus is a vehicle.</p>
</blockquote>

<p>In this example, <code>things</code> is a list of tuples where the first item in each tuple is the group the second item belongs to. </p>

<p>The <code>groupby()</code> function takes two arguments: (1) the data to group and (2) the function to group it with. </p>

<p>Here, <code>lambda x: x[0]</code> tells <code>groupby()</code> to use the first item in each tuple as the grouping key.</p>

<p>In the above <code>for</code> statement, <code>groupby</code> returns three (key, group iterator) pairs - once for each unique key. You can use the returned iterator to iterate over each individual item in that group.</p>

<p>Here's a slightly different example with the same data, using a list comprehension:</p>

<pre><code>for key, group in groupby(things, lambda x: x[0]):
    listOfThings = "" and "".join([thing[1] for thing in group])
    print key + ""s:  "" + listOfThings + "".""
</code></pre>

<p>This will give you the output:</p>

<blockquote>
  <p>animals: bear and duck.<br>
  plants: cactus.<br>
  vehicles: speed boat and school bus.</p>
</blockquote>
"
252705,"<p><code>append</code> adds an element to a list, <code>extend</code> concatenates the first list with another list (or another iterable not necessarily a list.)</p>

<pre><code>&gt;&gt;&gt; li = ['a', 'b', 'mpilgrim', 'z', 'example']
&gt;&gt;&gt; li
['a', 'b', 'mpilgrim', 'z', 'example']

&gt;&gt;&gt; li.append(""new"")               
&gt;&gt;&gt; li
['a', 'b', 'mpilgrim', 'z', 'example', 'new']

&gt;&gt;&gt; li.insert(2, ""new"")            
&gt;&gt;&gt; li
['a', 'b', 'new', 'mpilgrim', 'z', 'example', 'new']

&gt;&gt;&gt; li.extend([""two"", ""elements""]) 
&gt;&gt;&gt; li
['a', 'b', 'new', 'mpilgrim', 'z', 'example', 'new', 'two', 'elements']
</code></pre>

<p>From <a href=""http://www.diveintopython.net/native_data_types/lists.html#d0e5887"">Dive into Python</a>.</p>
"
325528,"<p>It is generally a bad pattern to kill a thread abruptly, in Python and in any language. Think of the following cases:</p>

<ul>
<li>the thread is holding a critical resource that must be closed properly</li>
<li>the thread has created several other threads that must be killed as well.</li>
</ul>

<p>The nice way of handling this if you can afford it (if you are managing your own threads) is to have an exit_request flag that each threads checks on regular interval to see if it is time for him to exit.</p>

<p><strong>For example:</strong></p>

<pre><code>import threading

class StoppableThread(threading.Thread):
    """"""Thread class with a stop() method. The thread itself has to check
    regularly for the stopped() condition.""""""

    def __init__(self):
        super(StoppableThread, self).__init__()
        self._stop = threading.Event()

    def stop(self):
        self._stop.set()

    def stopped(self):
        return self._stop.isSet()
</code></pre>

<p>In this code, you should call stop() on the thread when you want it to exit, and wait for the thread to exit properly using join(). The thread should check the stop flag at regular intervals.</p>

<p>There are cases however when you really need to kill a thread. An example is when you are wrapping an external library that is busy for long calls and you want to interrupt it.</p>

<p>The following code allows (with some restrictions) to raise an Exception in a Python thread:</p>

<pre><code>def _async_raise(tid, exctype):
    '''Raises an exception in the threads with id tid'''
    if not inspect.isclass(exctype):
        raise TypeError(""Only types can be raised (not instances)"")
    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(tid,
                                                  ctypes.py_object(exctype))
    if res == 0:
        raise ValueError(""invalid thread id"")
    elif res != 1:
        # ""if it returns a number greater than one, you're in trouble,
        # and you should call it again with exc=NULL to revert the effect""
        ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, 0)
        raise SystemError(""PyThreadState_SetAsyncExc failed"")

class ThreadWithExc(threading.Thread):
    '''A thread class that supports raising exception in the thread from
       another thread.
    '''
    def _get_my_tid(self):
        """"""determines this (self's) thread id

        CAREFUL : this function is executed in the context of the caller
        thread, to get the identity of the thread represented by this
        instance.
        """"""
        if not self.isAlive():
            raise threading.ThreadError(""the thread is not active"")

        # do we have it cached?
        if hasattr(self, ""_thread_id""):
            return self._thread_id

        # no, look for it in the _active dict
        for tid, tobj in threading._active.items():
            if tobj is self:
                self._thread_id = tid
                return tid

        # TODO: in python 2.6, there's a simpler way to do : self.ident

        raise AssertionError(""could not determine the thread's id"")

    def raiseExc(self, exctype):
        """"""Raises the given exception type in the context of this thread.

        If the thread is busy in a system call (time.sleep(),
        socket.accept(), ...), the exception is simply ignored.

        If you are sure that your exception should terminate the thread,
        one way to ensure that it works is:

            t = ThreadWithExc( ... )
            ...
            t.raiseExc( SomeException )
            while t.isAlive():
                time.sleep( 0.1 )
                t.raiseExc( SomeException )

        If the exception is to be caught by the thread, you need a way to
        check that your thread has caught it.

        CAREFUL : this function is executed in the context of the
        caller thread, to raise an excpetion in the context of the
        thread represented by this instance.
        """"""
        _async_raise( self._get_my_tid(), exctype )
</code></pre>

<p>As noted in the documentation, this is not a magic bullet because if the thread is busy outside the Python interpreter, it will not catch the interruption.</p>

<p>A good usage pattern of this code is to have the thread catch a specific exception and perform the cleanup. That way, you can interrupt a task and still have proper cleanup.</p>
"
248862,"<pre><code>import a_module
print a_module.__file__
</code></pre>

<p>Will actually give you the path to the .pyc file that was loaded, at least on Mac OS X. So I guess you can do</p>

<pre><code>import os
path = os.path.dirname(amodule.__file__)
</code></pre>

<p>You can also try</p>

<pre><code>path = os.path.abspath(amodule.__file__)
</code></pre>

<p>To get the directory to look for changes.</p>
"
266162,"<p>From an efficiency perspective, you're not going to beat translate() - it's performing raw string operations in C with a lookup table - there's not much that will beat that but writing your own C code.
If speed isn't a worry, another option though is:</p>

<pre><code>exclude = set(string.punctuation)
s = ''.join(ch for ch in s if ch not in exclude)
</code></pre>

<p>This is faster than s.replace with each char, but won't perform as well as non-pure python approaches such as regexes or string.translate, as you can see from the below timings.  For this type of problem, doing it at as low a level as possible pays off.</p>

<p>Timing code:</p>

<pre><code>import re, string, timeit

s = ""string. With. Punctuation""
exclude = set(string.punctuation)
table = string.maketrans("""","""")
regex = re.compile('[%s]' % re.escape(string.punctuation))

def test_set(s):
    return ''.join(ch for ch in s if ch not in exclude)

def test_re(s):  # From Vinko's solution, with fix.
    return regex.sub('', s)

def test_trans(s):
    return s.translate(table, string.punctuation)

def test_repl(s):  # From S.Lott's solution
    for c in string.punctuation:
        s=s.replace(c,"""")
    return s

print ""sets      :"",timeit.Timer('f(s)', 'from __main__ import s,test_set as f').timeit(1000000)
print ""regex     :"",timeit.Timer('f(s)', 'from __main__ import s,test_re as f').timeit(1000000)
print ""translate :"",timeit.Timer('f(s)', 'from __main__ import s,test_trans as f').timeit(1000000)
print ""replace   :"",timeit.Timer('f(s)', 'from __main__ import s,test_repl as f').timeit(1000000)
</code></pre>

<p>This gives the following results:</p>

<pre><code>sets      : 19.8566138744
regex     : 6.86155414581
translate : 2.12455511093
replace   : 28.4436721802
</code></pre>
"
159745,"<p>See Python <a href=""http://www.python.org/dev/peps/pep-0008/"">PEP 8</a>.</p>

<blockquote>
  <p>Function names should be lowercase,
  with words separated by underscores as
  necessary to improve readability.</p>
  
  <p>mixedCase is allowed only in contexts
  where that's already the prevailing
  style</p>
</blockquote>

<p>Variables...</p>

<blockquote>
  <p>Use the function naming rules:
  lowercase with words separated by
  underscores as necessary to improve
  readability.</p>
</blockquote>

<p>Personally, I deviate from this because I also prefer <code>mixedCase</code> over <code>lower_case</code> for my own projects.</p>
"
279586,"<p>A bit reversed, but this should work:</p>

<pre><code>def foo():
    foo.counter += 1
    print ""Counter is %d"" % foo.counter
foo.counter = 0
</code></pre>

<p>If you want the counter initialization code at the top instead of the bottom, you can create a decorator:</p>

<pre><code>def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate
</code></pre>

<p>Then use the code like this:</p>

<pre><code>@static_var(""counter"", 0)
def foo():
    foo.counter += 1
    print ""Counter is %d"" % foo.counter
</code></pre>

<p>It'll still require you to use the <code>foo.</code> prefix, unfortunately.</p>

<hr>

<p>EDIT (thanks to <a href=""http://stackoverflow.com/questions/279561/what-is-the-python-equivalent-of-static-variables-inside-a-function/279586#comment41067162_279586"">ony</a>): This looks even nicer:</p>

<pre><code>def static_vars(**kwargs):
    def decorate(func):
        for k in kwargs:
            setattr(func, k, kwargs[k])
        return func
    return decorate

@static_vars(counter=0)
def foo():
    foo.counter += 1
    print ""Counter is %d"" % foo.counter
</code></pre>
"
24377,"<p>Iterator objects in python conform to the iterator protocol, which basically means they provide two methods: <code>__iter__()</code>  and  <code>next()</code>.  The <code>__iter__</code> returns the iterator object and is implicitly called at the start of loops.  The <code>next()</code> method returns the next value and is implicitly called at each loop increment.  <code>next()</code> raises a StopIteration exception when there are no more value to return, which is implicitly captured by looping constructs to stop iterating.</p>

<p>Here's a simple example of a counter:</p>

<pre><code>class Counter:
    def __init__(self, low, high):
        self.current = low
        self.high = high

    def __iter__(self):
        return self

    def next(self): # Python 3: def __next__(self)
        if self.current &gt; self.high:
            raise StopIteration
        else:
            self.current += 1
            return self.current - 1


for c in Counter(3, 8):
    print c
</code></pre>

<p>This will print:</p>

<pre><code>3
4
5
6
7
8
</code></pre>

<p>This is easier to write using a generator, as covered in a previous answer:</p>

<pre><code>def counter(low, high):
    current = low
    while current &lt;= high:
        yield current
        current += 1

for c in counter(3, 8):
    print c
</code></pre>

<p>The printed output will be the same.  Under the hood, the generator object supports the iterator protocol and does something roughly similar to the class Counter.</p>

<p>David Mertz's article, <a href=""https://www.ibm.com/developerworks/library/l-pycon/"">Iterators and Simple Generators</a>, is a pretty good introduction. </p>
"
135114,"<p>For performance, especially when you're iterating over a large range, <code>xrange()</code> is usually better.  However, there are still a few cases why you might prefer <code>range()</code>:</p>

<ul>
<li><p>In python 3, <code>range()</code> does what <code>xrange()</code> used to do and <code>xrange()</code> does not exist.  If you want to write code that will run on both Python 2 and Python 3, you can't use <code>xrange()</code>.</p></li>
<li><p><code>range()</code> can actually be faster in some cases - eg. if iterating over the same sequence multiple times.  <code>xrange()</code> has to reconstruct the integer object every time, but <code>range()</code> will have real integer objects.  (It will always perform worse in terms of memory however)</p></li>
<li><p><code>xrange()</code> isn't usable in all cases where a real list is needed.  For instance, it doesn't support slices, or any list methods.</p></li>
</ul>

<p>[Edit] There are a couple of posts mentioning how <code>range()</code> will be upgraded by the 2to3 tool.  For the record, here's the output of running the tool on some sample usages of <code>range()</code> and <code>xrange()</code></p>

<pre><code>RefactoringTool: Skipping implicit fixer: buffer
RefactoringTool: Skipping implicit fixer: idioms
RefactoringTool: Skipping implicit fixer: ws_comma
--- range_test.py (original)
+++ range_test.py (refactored)
@@ -1,7 +1,7 @@

 for x in range(20):
-    a=range(20)
+    a=list(range(20))
     b=list(range(20))
     c=[x for x in range(20)]
     d=(x for x in range(20))
-    e=xrange(20)
+    e=range(20)
</code></pre>

<p>As you can see, when used in a for loop or comprehension, or where already wrapped with list(), range is left unchanged.</p>
"
120676,"<p>You can use</p>

<pre><code>os.listdir(path)
</code></pre>

<p>For reference and more os functions look here:</p>

<ul>
<li>Python 2 docs: <a href=""https://docs.python.org/2/library/os.html#os.listdir"">https://docs.python.org/2/library/os.html#os.listdir</a></li>
<li>Python 3 docs: <a href=""https://docs.python.org/3.4/library/os.html#os.listdir"">https://docs.python.org/3.4/library/os.html#os.listdir</a></li>
</ul>
"
255297,"<pre><code>my_function.__name__
</code></pre>

<p>Using <code>__name__</code> is the preferred method as it applies uniformly. Unlike <code>func_name</code>, it works on built-in functions as well:</p>

<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.time.func_name
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in ?
AttributeError: 'builtin_function_or_method' object has no attribute 'func_name'
&gt;&gt;&gt; time.time.__name__ 
'time'
</code></pre>

<p>Also the double underscores indicate to the reader this is a special attribute. As a bonus, classes and modules have a <code>__name__</code> attribute too, so you only have remember one special name.</p>
"
70900,"<p>The name scrambling is used to ensure that subclasses don't accidentally override the private methods and attributes of their superclasses. It's not designed to prevent deliberate access from outside.</p>

<p>For example:</p>

<pre><code>&gt;&gt;&gt; class Foo(object):
...     def __init__(self):
...         self.__baz = 42
...     def foo(self):
...         print self.__baz
...     
&gt;&gt;&gt; class Bar(Foo):
...     def __init__(self):
...         super(Bar, self).__init__()
...         self.__baz = 21
...     def bar(self):
...         print self.__baz
...
&gt;&gt;&gt; x = Bar()
&gt;&gt;&gt; x.foo()
42
&gt;&gt;&gt; x.bar()
21
&gt;&gt;&gt; print x.__dict__
{'_Bar__baz': 21, '_Foo__baz': 42}
</code></pre>

<p>Of course, it breaks down if two different classes have the same name.</p>
"
323259,"<p><a href=""http://www.activestate.com/ASPN/Python/Cookbook/"">Python Cookbook</a> has several recipes (implementations and corresponding discussions) for switch statement. Please visit the following links:</p>

<ol>
<li><p><a href=""http://code.activestate.com/recipes/410692/"">Readable switch construction without lambdas or dictionaries</a></p></li>
<li><p><a href=""http://code.activestate.com/recipes/410695/"">Exception-based Switch-Case</a></p></li>
<li><p><a href=""http://code.activestate.com/recipes/181064/"">Using a Dictionary in place of a 'switch' statement</a></p></li>
</ol>
"
1857,"<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; print os.name
posix
&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.system()
'Linux'
&gt;&gt;&gt; platform.release()
'2.6.22-15-generic'
</code></pre>

<p>See: <a href=""https://docs.python.org/2/library/platform.html"">platform â Access to underlying platformâs identifying data</a></p>
"
54873,"<p>From <a href=""http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes"">http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes</a> :</p>

<blockquote>
  <p>Up to Python 2.1, old-style classes were the only flavour available to the user. The concept of (old-style) class is unrelated to the concept of type: if <code>x</code> is an instance of an old-style class, then <code>x.__class__</code> designates the class of <code>x</code>, but <code>type(x)</code> is always <code>&lt;type 'instance'&gt;</code>. This reflects the fact that all old-style instances, independently of their class, are implemented with a single built-in type, called instance. </p>
  
  <p><strong>New-style classes were introduced in Python 2.2 to unify the concepts of class and type</strong>. A new-style class is simply a user-defined type, no more, no less. If x is an instance of a new-style class, then <code>type(x)</code> is typically the same as <code>x.__class__</code> (although this is not guaranteed â a new-style class instance is permitted to override the value returned for <code>x.__class__</code>).</p>
  
  <p><strong>The major motivation for introducing new-style classes is to provide a unified object model with a full meta-model</strong>. It also has a number of immediate benefits, like the ability to subclass most built-in types, or the introduction of ""descriptors"", which enable computed properties. </p>
  
  <p><strong>For compatibility reasons, classes are still old-style by default</strong>. New-style classes are created by specifying another new-style class (i.e. a type) as a parent class, or the ""top-level type"" object if no other parent is needed. The behaviour of new-style classes differs from that of old-style classes in a number of important details in addition to what type returns. Some of these changes are fundamental to the new object model, like the way special methods are invoked. Others are ""fixes"" that could not be implemented before for compatibility concerns, like the method resolution order in case of multiple inheritance. </p>
  
  <p><strong>Python 3 only has new-style classes</strong>. No matter if you subclass from <code>object</code> or not, classes are new-style in Python 3. It is however recommended that you still subclass from <code>object</code>.</p>
</blockquote>
"
145649,"<p>I like <a href=""http://docs.python.org/2/library/ctypes.html"">ctypes</a> a lot, <a href=""http://www.swig.org/"">swig</a> always tended to give me <a href=""http://groups.google.com/group/comp.lang.python/browse_thread/thread/d94badd9847fe43a?pli=1"">problems</a>. Also ctypes has the advantage that you don't need to satisfy any compile time dependency on python, and your binding will work on any python that has ctypes, not just the one it was compiled against.</p>

<p>Suppose you have a simple C++ example class you want to talk to in a file called foo.cpp:</p>

<pre><code>#include &lt;iostream&gt;

class Foo{
    public:
        void bar(){
            std::cout &lt;&lt; ""Hello"" &lt;&lt; std::endl;
        }
};
</code></pre>

<p>Since ctypes can only talk to C functions, you need to provide those declaring them as extern ""C""</p>

<pre><code>extern ""C"" {
    Foo* Foo_new(){ return new Foo(); }
    void Foo_bar(Foo* foo){ foo-&gt;bar(); }
}
</code></pre>

<p>Next you have to compile this to a shared library</p>

<pre><code>g++ -c -fPIC foo.cpp -o foo.o
g++ -shared -Wl,-soname,libfoo.so -o libfoo.so  foo.o
</code></pre>

<p>And finally you have to write your python wrapper (e.g. in fooWrapper.py)</p>

<pre><code>from ctypes import cdll
lib = cdll.LoadLibrary('./libfoo.so')

class Foo(object):
    def __init__(self):
        self.obj = lib.Foo_new()

    def bar(self):
        lib.Foo_bar(self.obj)
</code></pre>

<p>Once you have that you can call it like</p>

<pre><code>f = Foo()
f.bar() #and you will see ""Hello"" on the screen
</code></pre>
"
44781,"<pre><code>myList = ['a','b','c','d']
myString = "","".join(myList )
</code></pre>

<p>This won't work if the list contains numbers.</p>

<hr>

<p>As <a href=""http://stackoverflow.com/users/3399/ricardo-reyes"">Ricardo Reyes</a> suggested, if it contains non-string types (such as integers, floats, bools, None) then do:</p>

<pre><code>myList = ','.join(map(str, myList)) 
</code></pre>
"
64486,"<p>You can use the sleep() function in the time module. It can take a float argument for sub second resolution.</p>

<pre><code>from time import sleep
sleep(0.1) # Time in seconds.
</code></pre>
"
114267,"<p>In Python, there is a distinction between <em>bound</em> and <em>unbound</em> methods. </p>

<p>Basically, a call to a member function (like <code>method_one</code>), a bound function</p>

<pre><code>a_test.method_one()
</code></pre>

<p>is translated to</p>

<pre><code>Test.method_one(a_test)
</code></pre>

<p>i.e. a call to an unbound method. Because of that, a call to your version of <code>method_two</code> will fail with a <code>TypeError</code></p>

<pre><code>&gt;&gt;&gt; a_test = Test() 
&gt;&gt;&gt; a_test.method_two()
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: method_two() takes no arguments (1 given)
</code></pre>

<p>You can change the behavior of a method using a decorator</p>

<pre><code>class Test(object):
    def method_one(self):
        print ""Called method_one""

    @staticmethod
    def method_two():
        print ""Called method two""
</code></pre>

<p>The decorator tells the built-in default metaclass <code>type</code> (the class of a class, cf. <a href=""http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python"">this question</a>) to not create bound methods for <code>method_two</code>.</p>

<p>Now, you can invoke static method both on an instance or on the class directly:</p>

<pre><code>&gt;&gt;&gt; a_test = Test()
&gt;&gt;&gt; a_test.method_one()
Called method_one
&gt;&gt;&gt; a_test.method_two()
Called method_two
&gt;&gt;&gt; Test.method_two()
Called method_two
</code></pre>
"
151211,"<p>If you have two date objects, you can just subtract them.</p>

<pre><code>from datetime import date

d0 = date(2008, 8, 18)
d1 = date(2008, 9, 26)
delta = d0 - d1
print delta.days
</code></pre>

<p>The relevant section of the docs:
<a href=""https://docs.python.org/library/datetime.html"">https://docs.python.org/library/datetime.html</a></p>
"
280156,"<pre><code>max(stats, key=stats.get)
</code></pre>
"
70814,"<pre><code>var = raw_input(""Please enter something: "")
print ""you entered"", var
</code></pre>
"
181557,"<p>You don't need to use 4 spaces on your second conditional line.  Maybe use:</p>

<pre><code>if (cond1 == 'val1' and cond2 == 'val2' and 
       cond3 == 'val3' and cond4 == 'val4'):
    do_something
</code></pre>

<p>Also, don't forget the whitespace is more flexible than you might think:</p>

<pre><code>if (   
       cond1 == 'val1' and cond2 == 'val2' and 
       cond3 == 'val3' and cond4 == 'val4'
   ):
    do_something
if    (cond1 == 'val1' and cond2 == 'val2' and 
       cond3 == 'val3' and cond4 == 'val4'):
    do_something
</code></pre>

<p>Both of those are fairly ugly though.</p>

<p>Maybe lose the brackets (the <a href=""https://www.python.org/dev/peps/pep-0008/#multiline-if-statements"">Style Guide</a> discourages this though)?</p>

<pre><code>if cond1 == 'val1' and cond2 == 'val2' and \
   cond3 == 'val3' and cond4 == 'val4':
    do_something
</code></pre>

<p>This at least gives you some differentiation.</p>

<p>Or even:</p>

<pre><code>if cond1 == 'val1' and cond2 == 'val2' and \
                       cond3 == 'val3' and \
                       cond4 == 'val4':
    do_something
</code></pre>

<p>I think I prefer:</p>

<pre><code>if cond1 == 'val1' and \
   cond2 == 'val2' and \
   cond3 == 'val3' and \
   cond4 == 'val4':
    do_something
</code></pre>

<p>Here's the <a href=""https://www.python.org/dev/peps/pep-0008/#multiline-if-statements"">Style Guide</a>, which (since 2010) recommends using brackets.</p>
"
261817,"<h1>Python is not the tool you need</h1>

<p>You must use the right tool to do the right thing, and Python was not designed to be obfuscated. It's the contrary; everything is open or easy to reveal or modify in Python because that's the language's philosophy.</p>

<p>If you want something you can't see through, look for another tool. This is not a bad thing, it is important that several different tools exist for different usages.</p>

<h1>Obfuscation is really hard</h1>

<p>Even compiled programs can be reverse-engineered so don't think that you can fully protect any code. You can analyze obfuscated PHP, break the flash encryption key, etc. Newer versions of Windows are cracked every time.</p>

<h1>Having a legal requirement is a good way to go</h1>

<p>You cannot prevent somebody from misusing your code, but you can easily discover if someone does. Therefore, it's just a casual legal issue.</p>

<h1>Code protection is overrated</h1>

<p>Nowadays, business models tend to go for selling services instead of products. You cannot copy a service, pirate nor steal it. Maybe it's time to consider to go with the flow...</p>
"
319435,"<p>Assuming ASCII strings:</p>

<pre><code>string1 = 'Hello'
string2 = 'hello'

if string1.lower() == string2.lower():
    print ""The strings are the same (case insensitive)""
else:
    print ""The strings are not the same (case insensitive)""
</code></pre>
"
22682,"<p>In Python 2, use urllib2 which comes with the standard library.</p>

<pre><code>import urllib2
response = urllib2.urlopen('http://www.example.com/')
html = response.read()
</code></pre>

<p>This is the most basic way to use the library, minus any error handling.  You can also do more complex stuff such as changing headers.  The documentation can be found <a href=""http://docs.python.org/2/library/urllib2.html"">here.</a></p>
"
123238,"<pre><code>import shutil
shutil.copy2('/dir/file.ext', '/new/dir/newname.ext')
</code></pre>

<p>or</p>

<pre><code>shutil.copy2('/dir/file.ext', '/new/dir')
</code></pre>

<p><code>copy2</code> is also often useful, it preserves the original modification and access info (mtime and atime) in the file metadata.</p>
"
100345,"<p>You can use full <code>datetime</code> variables with <code>timedelta</code>, and by providing a dummy date then using <code>time</code> to just get the time value.</p>

<p>For example:</p>

<pre><code>import datetime
a = datetime.datetime(100,1,1,11,34,59)
b = a + datetime.timedelta(0,3) # days, seconds, then other fields.
print a.time()
print b.time()
</code></pre>

<p>results in the two values, three seconds apart:</p>

<pre><code>11:34:59
11:35:02
</code></pre>

<p>You could also opt for the more readable</p>

<pre><code>b = a + datetime.timedelta(seconds=3)
</code></pre>

<p>if you're so inclined.</p>

<hr>

<p>If you're after a function that can do this, you can look into using <code>addSecs</code> below:</p>

<pre><code>import datetime

def addSecs(tm, secs):
    fulldate = datetime.datetime(100, 1, 1, tm.hour, tm.minute, tm.second)
    fulldate = fulldate + datetime.timedelta(seconds=secs)
    return fulldate.time()

a = datetime.datetime.now().time()
b = addSecs(a, 300)
print a
print b
</code></pre>

<p>This outputs:</p>

<pre><code> 09:11:55.775695
 09:16:55
</code></pre>
"
261645,"<p>Python, being a byte-code-compiled interpreted language, is very difficult to lock down.  Even if you use a exe-packager like <a href=""http://py2exe.org"">py2exe</a>, the layout of the executable is well-known, and the Python byte-codes are well understood.</p>

<p>Usually in cases like this, you have to make a tradeoff.  How important is it really to protect the code?  Are there real secrets in there (such as a key for symmetric encryption of bank transfers), or are you just being paranoid?  Choose the language that lets you develop the best product quickest, and be realistic about how valuable your novel ideas are.</p>

<p>If you decide you really need to enforce the license check securely, write it as a small C extension so that the license check code can be extra-hard (but not impossible!) to reverse engineer, and leave the bulk of your code in Python.</p>
"
36156,"<p>Basic answer:</p>

<pre><code>mylist = [""b"", ""C"", ""A""]
mylist.sort()
</code></pre>

<p>This modifies your original list (i.e. sorts in-place). To get a sorted copy of the list, without changing the original, use the <a href=""http://docs.python.org/library/functions.html#sorted""><code>sorted()</code></a> function:</p>

<pre><code>for x in sorted(mylist):
    print x
</code></pre>

<p>However, the examples above are a bit naive, because they don't take locale into account, and perform a case-sensitive sorting. You can take advantage of the optional parameter <code>key</code> to specify custom sorting order (the alternative, using <code>cmp</code>, is a deprecated solution, as it has to be evaluated multiple times - <code>key</code> is only computed once per element).</p>

<p>So, to sort according to the current locale, taking language-specific rules into account (<a href=""http://docs.python.org/library/functools.html#functools.cmp_to_key""><code>cmp_to_key</code></a> is a helper function from functools):</p>

<pre><code>sorted(mylist, key=cmp_to_key(locale.strcoll))
</code></pre>

<p>And finally, if you need, you can specify a <a href=""http://docs.python.org/library/locale.html"">custom locale</a> for sorting:</p>

<pre><code>import locale
locale.setlocale(locale.LC_ALL, 'en_US.UTF-8') # vary depending on your lang/locale
assert sorted((u'Ab', u'ad', u'aa'),
  key=cmp_to_key(locale.strcoll)) == [u'aa', u'Ab', u'ad']
</code></pre>

<p>Last note: you will see examples of case-insensitive sorting which use the <code>lower()</code> method - those are incorrect, because they work only for the ASCII subset of characters. Those two are wrong for any non-English data:</p>

<pre><code># this is incorrect!
mylist.sort(key=lambda x: x.lower())
# alternative notation, a bit faster, but still wrong
mylist.sort(key=str.lower)
</code></pre>
"
192365,"<p>You are really mixing together two different things.</p>

<p>Use <a href=""https://docs.python.org/3/library/functions.html#dir"" rel=""nofollow""><code>dir()</code></a>, <a href=""https://docs.python.org/3/library/functions.html#vars"" rel=""nofollow""><code>vars()</code></a> or the <a href=""https://docs.python.org/3/library/inspect.html"" rel=""nofollow""><code>inspect</code></a> module to get what you are interested in (I use <code>__builtins__</code> as an example; you can use any object instead).</p>

<pre><code>&gt;&gt;&gt; l = dir(__builtins__)
&gt;&gt;&gt; d = __builtins__.__dict__
</code></pre>

<p>Print that dictionary however fancy you like:</p>

<pre><code>&gt;&gt;&gt; print l
['ArithmeticError', 'AssertionError', 'AttributeError',...
</code></pre>

<p>or</p>

<pre><code>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(l)
['ArithmeticError',
 'AssertionError',
 'AttributeError',
 'BaseException',
 'DeprecationWarning',
...

&gt;&gt;&gt; pprint(d, indent=2)
{ 'ArithmeticError': &lt;type 'exceptions.ArithmeticError'&gt;,
  'AssertionError': &lt;type 'exceptions.AssertionError'&gt;,
  'AttributeError': &lt;type 'exceptions.AttributeError'&gt;,
...
  '_': [ 'ArithmeticError',
         'AssertionError',
         'AttributeError',
         'BaseException',
         'DeprecationWarning',
...
</code></pre>
"
279253,"<p>Be sure that dirBar has the <code>__init__.py</code> file -- this makes a directory into a Python package.</p>
"
334666,"<p>Figured it out for myself in the end. It is simple, I was just missing the ** operator to unpack the dictionary</p>

<p>So my example becomes:</p>

<pre><code>d = dict(p1=1, p2=2)
def f2(p1,p2):
    print p1, p2
f2(**d)
</code></pre>
"
189685,"<p>My first instinct would be to refactor the nested loop into a function and use <code>return</code> to break out. </p>
"
141777,"<p>A much neater way to get 'alternate constructors' is to use classmethods. For instance:</p>

<pre><code>&gt;&gt;&gt; class MyData:
...     def __init__(self, data):
...         ""Initialize MyData from a sequence""
...         self.data = data
...     
...     @classmethod
...     def fromfilename(cls, filename):
...         ""Initialize MyData from a file""
...         data = open(filename).readlines()
...         return cls(data)
...     
...     @classmethod
...     def fromdict(cls, datadict):
...         ""Initialize MyData from a dict's items""
...         return cls(datadict.items())
... 
&gt;&gt;&gt; MyData([1, 2, 3]).data
[1, 2, 3]
&gt;&gt;&gt; MyData.fromfilename(""/tmp/foobar"").data
['foo\n', 'bar\n', 'baz\n']
&gt;&gt;&gt; MyData.fromdict({""spam"": ""ham""}).data
[('spam', 'ham')]
</code></pre>

<p>The reason it's neater is that there is no doubt about what type is expected, and you aren't forced to guess at what the caller intended for you to do with the datatype it gave you. The problem with <code>isinstance(x, basestring)</code> is that there is no way for the caller to tell you, for instance, that even though the type is not a basestring, you should treat it as a string (and not another sequence.) And perhaps the caller would like to use the same type for different purposes, sometimes as a single item, and sometimes as a sequence of items. Being explicit takes all doubt away and leads to more robust and clearer code.</p>
"
104471,"<p>And in <a href=""http://docs.python.org/dev/whatsnew/2.6.html"">Python 2.6</a> onwards:</p>

<pre><code>import itertools
itertools.permutations([1,2,3])
</code></pre>

<p>(returned as a generator.  Use <code>list(permutations(l))</code> to return as a list.)</p>
"
129522,"<p>Use <a href=""http://docs.python.org/library/unittest.html#unittest.TestCase.assertRaises""><code>TestCase.assertRaises</code></a> (or <code>TestCase.failUnlessRaises</code>) from the unittest module, for example:</p>

<pre><code>import mymod

class MyTestCase(unittest.TestCase):
    def test1(self):
        self.assertRaises(SomeCoolException, mymod.myfunc)
</code></pre>
"
268285,"<p>You can use <code>operator.itemgetter</code> for that:</p>

<pre><code>import operator
stats = {'a':1000, 'b':3000, 'c': 100}
max(stats.iteritems(), key=operator.itemgetter(1))[0]
</code></pre>

<p>And instead of building a new list in memory use <code>stats.iteritems()</code>. The <code>key</code> parameter to the <code>max()</code> function is a function that computes a key that is used to determine how to rank items.</p>

<p>Please note that if you were to have another key-value pair 'd': 3000 that this method will only return <strong>one</strong> of the <strong>two</strong> even though they both have the maximum value. </p>

<pre><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; stats = {'a':1000, 'b':3000, 'c': 100, 'd':3000}
&gt;&gt;&gt; max(stats.iteritems(), key=operator.itemgetter(1))[0]
'b' 
</code></pre>
"
79985,"<p>You want split, from the <a href=""https://docs.python.org/2/library/shlex.html"">shlex</a> module.</p>

<pre><code>&gt;&gt;&gt; import shlex
&gt;&gt;&gt; shlex.split('this is ""a test""')
['this', 'is', 'a test']
</code></pre>

<p>This should do exactly what you want.</p>
"
133384,"<p>I have module I use for situations like this - where a process will be running for a long time but gets stuck sometimes for unknown and irreproducible reasons.  Its a bit hacky, and only works on unix (requires signals):</p>

<pre><code>import code, traceback, signal

def debug(sig, frame):
    """"""Interrupt running process, and provide a python prompt for
    interactive debugging.""""""
    d={'_frame':frame}         # Allow access to frame object.
    d.update(frame.f_globals)  # Unless shadowed by global
    d.update(frame.f_locals)

    i = code.InteractiveConsole(d)
    message  = ""Signal received : entering python shell.\nTraceback:\n""
    message += ''.join(traceback.format_stack(frame))
    i.interact(message)

def listen():
    signal.signal(signal.SIGUSR1, debug)  # Register handler
</code></pre>

<p>To use, just call the listen() function at some point when your program starts up (You could even stick it in site.py to have all python programs use it), and let it run.  At any point, send the process a SIGUSR1 signal, using kill, or in python:</p>

<pre><code>    os.kill(pid, signal.SIGUSR1)
</code></pre>

<p>This will cause the program to break to a python console at the point it is currently at, showing you the stack trace, and letting you manipulate the variables.  Use control-d (EOF) to continue running (though note that you will probably interrupt any I/O etc at the point you signal, so it isn't fully non-intrusive.</p>

<p>I've another script that does the same thing, except it communicates with the running process through a pipe (to allow for debugging backgrounded processes etc).  Its a bit large to post here, but I've added it as a <a href=""http://code.activestate.com/recipes/576515/"">python cookbook recipe</a>.</p>
"
107717,"<p>From <a href=""http://mail.python.org/pipermail/tutor/2003-November/026645.html"">Magnus Lycka answer on a mailing list</a>:</p>

<blockquote>
  <p>You can skip buffering for a whole
  python process using ""python -u"" 
  (or#!/usr/bin/env python -u etc) or by
  setting the environment variable
  PYTHONUNBUFFERED.</p>
  
  <p>You could also replace sys.stdout with
  some other stream like wrapper which
  does a flush after every call.</p>

<pre><code>class Unbuffered(object):
   def __init__(self, stream):
       self.stream = stream
   def write(self, data):
       self.stream.write(data)
       self.stream.flush()
   def __getattr__(self, attr):
       return getattr(self.stream, attr)

import sys
sys.stdout = Unbuffered(sys.stdout)
print 'Hello'
</code></pre>
</blockquote>
"
273962,"<p>Define a maximum size.
Then, compute a resize ratio by taking <code>min(maxwidth/width, maxheight/height)</code>.</p>

<p>The proper size is <code>oldsize*ratio</code>.</p>

<p>There is of course also a library method to do this: the method <code>Image.thumbnail</code>.<br>
Below is an (edited) example from the <a href=""http://effbot.org/imagingbook/introduction.htm"">PIL documentation</a>.</p>

<pre><code>import os, sys
import Image

size = 128, 128

for infile in sys.argv[1:]:
    outfile = os.path.splitext(infile)[0] + "".thumbnail""
    if infile != outfile:
        try:
            im = Image.open(infile)
            im.thumbnail(size, Image.ANTIALIAS)
            im.save(outfile, ""JPEG"")
        except IOError:
            print ""cannot create thumbnail for '%s'"" % infile
</code></pre>
"
36926,"<p>It's also worth noting that you can use * and ** when calling functions as well. This is a shortcut that allows you to pass multiple arguments to a function directly using either a list/tuple or a dictionary. For example, if you have the following function:</p>

<pre><code>def foo(x,y,z):
    print ""x="" + str(x)
    print ""y="" + str(y)
    print ""z="" + str(z)
</code></pre>

<p>You can do things like:</p>

<pre><code>&gt;&gt;&gt; mylist = [1,2,3]
&gt;&gt;&gt; foo(*mylist)
x=1
y=2
z=3

&gt;&gt;&gt; mydict = {'x':1,'y':2,'z':3}
&gt;&gt;&gt; foo(**mydict)
x=1
y=2
z=3

&gt;&gt;&gt; mytuple = (1, 2, 3)
&gt;&gt;&gt; foo(*mytuple)
x=1
y=2
z=3
</code></pre>
"
256260,"<p>I would just raise <a href=""https://docs.python.org/2/library/exceptions.html#exceptions.ValueError"">ValueError</a>, unless you need a more specific exception..</p>

<pre><code>def import_to_orm(name, save=False, recurse=False):
    if recurse and not save:
        raise ValueError(""save must be True if recurse is True"")
</code></pre>

<p>There's really no point in doing <code>class BadValueError(ValueError):pass</code> - your custom class is identical in use to <a href=""https://docs.python.org/2/library/exceptions.html#exceptions.ValueError"">ValueError</a>, so why not use that?</p>
"
176589,"<p>Basically, Python lists are very flexible and can hold completely heterogeneous, arbitrary data, and they can be appended to very efficiently, in <a href=""http://en.wikipedia.org/wiki/Dynamic_array#Geometric_expansion_and_amortized_cost"">amortized constant time</a>.  If you need to shrink and grow your array time-efficiently and without hassle, they are the way to go.  But they use <strong>a lot more space than C arrays</strong>.</p>

<p>The <code>array.array</code> type, on the other hand, is just a thin wrapper on C arrays.  It can hold only homogeneous data, all of the same type, and so it uses only <code>sizeof(one object) * length</code> bytes of memory.  Mostly, you should use it when you need to expose a C array to an extension or a system call (for example, <code>ioctl</code> or <code>fctnl</code>).  It's also a good way to represent a <strong>mutable</strong> string (<code>array('B', bytes)</code>) until that actually becomes available in Python 3.0.</p>

<p>However, if you want to do <strong>math</strong> on a homogeneous array of numeric data, then you're much better off using NumPy, which can automatically vectorize operations on complex multi-dimensional arrays.</p>

<p><strong>To make a long story short</strong>: <code>array.array</code> is useful when you need a homogeneous C array of data for reasons <em>other than doing math</em>.</p>
"
164631,"<p>As another option, you can do look ups like:</p>

<pre><code>class UserAdmin(admin.ModelAdmin):
    list_display = (..., 'get_author')

    def get_author(self, obj):
        return obj.book.author
    get_author.short_description = 'Author'
    get_author.admin_order_field = 'book__author'
</code></pre>
"
218709,"<p>Take a look at the <a href=""http://docs.python.org/library/inspect.html"">inspect</a> module - this will do the inspection of the various code object properties for you.</p>

<pre><code>&gt;&gt;&gt; inspect.getargspec(aMethod)
(['arg1', 'arg2'], None, None, None)
</code></pre>

<p>The other results are the name of the *args and **kwargs variables, and the defaults provided.  ie.</p>

<pre><code>&gt;&gt;&gt; def foo(a,b,c=4, *arglist, **keywords): pass
&gt;&gt;&gt; inspect.getargspec(foo)
(['a', 'b', 'c'], 'arglist', 'keywords', (4,))
</code></pre>
"
122340,"<p>From <a href=""http://docs.djangoproject.com/en/dev/topics/install/#remove-any-old-versions-of-django"">""How to Install Django"" documentation</a> (though this is useful to more than just Django installation) - execute the following from the shell:</p>

<pre><code>python -c ""from distutils.sysconfig import get_python_lib; print(get_python_lib())""
</code></pre>

<p>Formatted for readability (rather than use as a one-liner), that looks like the following:</p>

<pre><code>from distutils.sysconfig import get_python_lib
print(get_python_lib())
</code></pre>
"
139193,"<p>You can use <code>dir(module)</code> to see all available methods/attributes.  Also check out PyDocs.</p>
"
231801,"<p>Think of it this way:</p>

<p>An iterator is just a fancy sounding term for an object that has a next() method.  So a yield-ed function ends up being something like this:</p>

<p>Original version:</p>

<pre><code>def some_function():
    for i in xrange(4):
        yield i

for i in some_function():
    print i
</code></pre>

<p>This is basically what the python interpreter does with the above code:</p>

<pre><code>class it:
    def __init__(self):
        #start at -1 so that we get 0 when we add 1 below.
        self.count = -1
    #the __iter__ method will be called once by the for loop.
    #the rest of the magic happens on the object returned by this method.
    #in this case it is the object itself.
    def __iter__(self):
        return self
    #the next method will be called repeatedly by the for loop
    #until it raises StopIteration.
    def next(self):
        self.count += 1
        if self.count &lt; 4:
            return self.count
        else:
            #a StopIteration exception is raised
            #to signal that the iterator is done.
            #This is caught implicitly by the for loop.
            raise StopIteration 

def some_func():
    return it()

for i in some_func():
    print i
</code></pre>

<p>For more insight as to what's happening behind the scenes, the for loop can be rewritten to this:</p>

<pre><code>iterator = some_func()
try:
    while 1:
        print iterator.next()
except StopIteration:
    pass
</code></pre>

<p>Does that make more sense or just confuse you more?  :)</p>

<p><strong>EDIT:</strong> I should note that this IS an oversimplification for illustrative purposes.  :)</p>

<p><strong>EDIT 2:</strong> Forgot to throw the StopIteration exception</p>
"
230780,"<p>Running <code>python -h</code>, I see a <em>command line option</em>:</p>

<blockquote>
  <p>-u     : unbuffered binary stdout and stderr; also PYTHONUNBUFFERED=x
           see man page for details on internal buffering relating to '-u'</p>
</blockquote>

<p>Here is the <a href=""http://docs.python.org/using/cmdline.html#cmdoption-u"">relevant doc</a>.</p>
"
126533,"<pre><code>&gt;&gt;&gt; a = [3,4,5,6]
&gt;&gt;&gt; for i, val in enumerate(a):
...     print i, val
...
0 3
1 4
2 5
3 6
&gt;&gt;&gt;
</code></pre>
"
62680,"<p>Note that best practice in current versions of Python is to use <i>new-style</i> classes, i.e.</p>

<pre><code>class Foo(object):
...
</code></pre>

<p>Also, there's a difference between an 'object' and a 'class'. To build a dictionary from an arbitrary <i>object</i>, it's sufficient to use <code>__dict__</code>. Usually, you'll declare your methods at class level and your attributes at instance level, so <code>__dict__</code> should be fine. For example:</p>

<pre><code>&gt;&gt;&gt; class A(object):
...   def __init__(self):
...     self.b = 1
...     self.c = 2
...   def do_nothing(self):
...     pass
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.__dict__
{'c': 2, 'b': 1}
</code></pre>

<p>Alternatively, depending on what you want to do, it might be nice to inherit from dict. Then your class is <em>already</em> a dictionary, and if you want you can override getattr and/or setattr to call through and set the dict. For example:</p>

<pre><code> class Foo(dict):
     def __init__(self):
         pass
     def __getattr__(self, attr):
         return self[attr]

     # etc...
</code></pre>
"
166589,"<p>I just found this but it seems a bit hackish, however they say tried it on *nix and I did on windows and it worked.</p>

<pre><code>import socket
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.connect((""gmail.com"",80))
print(s.getsockname()[0])
s.close()
</code></pre>

<p>This assumes you have an internet access, and that there is no local proxy.</p>
"
26611,"<p><code>is</code> always returns <code>True</code> if it compares the same object instance</p>

<p>Whereas <code>==</code> is ultimately determined by the <code>__eq__()</code> method</p>

<p>i.e.</p>

<pre><code>
>>> class foo(object):
       def __eq__(self, other):
           return True

>>> f = foo()
>>> f == None
True
>>> f is None
False
</code></pre>
"
306353,"<p>Take a look at this:</p>

<pre><code>&gt;&gt;&gt; a = 256
&gt;&gt;&gt; b = 256
&gt;&gt;&gt; id(a)
9987148
&gt;&gt;&gt; id(b)
9987148
&gt;&gt;&gt; a = 257
&gt;&gt;&gt; b = 257
&gt;&gt;&gt; id(a)
11662816
&gt;&gt;&gt; id(b)
11662828
</code></pre>

<p>EDIT: Here's what I found in the Python 2 documentation, <a href=""https://docs.python.org/2/c-api/int.html"">""Plain Integer Objects""</a> (It's the same for <a href=""https://docs.python.org/3/c-api/long.html"">Python 3</a>):</p>

<blockquote>
  <p>The current implementation keeps an
  array of integer objects for all
  integers between -5 and 256, when you
  create an int in that range you
  actually just get back a reference to
  the existing object. So it should be
  possible to change the value of 1. I
  suspect the behaviour of Python in
  this case is undefined. :-)</p>
</blockquote>
"
166520,"<pre><code>import socket
socket.gethostbyname(socket.gethostname())
</code></pre>

<p>This won't work always (returns <code>127.0.0.1</code> on machines having the hostname in <code>/etc/hosts</code> as <code>127.0.0.1</code>), a paliative would be what gimel shows, use <code>socket.getfqdn()</code> instead. Of course your machine needs a resolvable hostname.</p>
"
154617,"<p>From <a href=""http://docs.python.org/dev/whatsnew/2.6.html#interpreter-changes"">""Whatâs New in Python 2.6 - Interpreter Changes""</a>:</p>

<blockquote>
  <p>Python can now be prevented from
  writing .pyc or .pyo files by
  supplying the <a href=""http://docs.python.org/using/cmdline.html#cmdoption-B"">-B</a> switch to the Python
  interpreter, or by setting the
  <a href=""http://docs.python.org/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE"">PYTHONDONTWRITEBYTECODE</a> environment
  variable before running the
  interpreter. This setting is available
  to Python programs as the
  <a href=""http://docs.python.org/library/sys.html#sys.dont_write_bytecode""><code>sys.dont_write_bytecode</code></a> variable, and
  Python code can change the value to
  modify the interpreterâs behaviour.</p>
</blockquote>

<p>Update 2010-11-27: Python 3.2 addresses the issue of cluttering source folders with <code>.pyc</code> files by introducing a special <code>__pycache__</code> subfolder, see <a href=""http://docs.python.org/dev/whatsnew/3.2.html#pep-3147-pyc-repository-directories"">What's New in Python 3.2 - PYC Repository Directories</a>.</p>
"
190017,"<p>Some threads do background tasks, like sending keepalive packets, or performing periodic garbage collection, or whatever. These are only useful when the main program is running, and it's okay to kill them off once the other, non-daemon, threads have exited.</p>

<p>Without daemon threads, you'd have to keep track of them, and tell them to exit, before your program can completely quit. By setting them as daemon threads, you can let them run and forget about them, and when your program quits, any daemon threads are killed automatically.</p>
"
93179,"<p>It blocks the thread.  If you look in Modules/timemodule.c in the Python source, you'll see that in the call to <code>floatsleep()</code>, the substantive part of the sleep operation is wrapped in a Py_BEGIN_ALLOW_THREADS and Py_END_ALLOW_THREADS block, allowing other threads to continue to execute while the current one sleeps.  You can also test this with a simple python program:</p>

<pre><code>import time
from threading import Thread

class worker(Thread):
    def run(self):
    	for x in xrange(0,11):
    		print x
    		time.sleep(1)

class waiter(Thread):
    def run(self):
    	for x in xrange(100,103):
    		print x
    		time.sleep(5)

def run():
    worker().start()
    waiter().start()
</code></pre>

<p>Which will print:</p>

<pre><code>&gt;&gt;&gt; thread_test.run()
0
100
&gt;&gt;&gt; 1
2
3
4
5
101
6
7
8
9
10
102
</code></pre>
"
100037,"<p>Metaclasses are the secret sauce that make 'class' work. The default metaclass for a new style object is called 'type'.</p>

<pre class=""lang-none prettyprint-override""><code>class type(object)
  |  type(object) -&gt; the object's type
  |  type(name, bases, dict) -&gt; a new type
</code></pre>

<p>Metaclasses take 3 args. '<strong>name</strong>', '<strong>bases</strong>' and '<strong>dict</strong>'</p>

<p>Here is where the secret starts. Look for where name, bases and the dict come from in this example class definition.</p>

<pre><code>class ThisIsTheName(Bases, Are, Here):
    All_the_code_here
    def doesIs(create, a):
        dict
</code></pre>

<p>Lets define a metaclass that will demonstrate how '<strong>class:</strong>' calls it.</p>

<pre><code>def test_metaclass(name, bases, dict):
    print 'The Class Name is', name
    print 'The Class Bases are', bases
    print 'The dict has', len(dict), 'elems, the keys are', dict.keys()

    return ""yellow""

class TestName(object, None, int, 1):
    __metaclass__ = test_metaclass
    foo = 1
    def baz(self, arr):
        pass

print 'TestName = ', repr(TestName)

# output =&gt; 
The Class Name is TestName
The Class Bases are (&lt;type 'object'&gt;, None, &lt;type 'int'&gt;, 1)
The dict has 4 elems, the keys are ['baz', '__module__', 'foo', '__metaclass__']
TestName =  'yellow'
</code></pre>

<p>And now, an example that actually means something, this will automatically make the variables in the list ""attributes"" set on the class, and set to None.</p>

<pre><code>def init_attributes(name, bases, dict):
    if 'attributes' in dict:
        for attr in dict['attributes']:
            dict[attr] = None

    return type(name, bases, dict)

class Initialised(object):
    __metaclass__ = init_attributes
    attributes = ['foo', 'bar', 'baz']

print 'foo =&gt;', Initialised.foo
# output=&gt;
foo =&gt; None
</code></pre>

<p>Note that the magic behaviour that 'Initalised' gains by having the metaclass <code>init_attributes</code> is not passed onto a subclass of Initalised.</p>

<p>Here is an even more concrete example, showing how you can subclass 'type' to make a metaclass that performs an action when the class is created. This is quite tricky:</p>

<pre><code>class MetaSingleton(type):
    instance = None
    def __call__(cls, *args, **kw):
        if cls.instance is None:
            cls.instance = super(MetaSingleton, cls).__call__(*args, **kw)
        return cls.instance

 class Foo(object):
     __metaclass__ = MetaSingleton

 a = Foo()
 b = Foo()
 assert a is b
</code></pre>
"
193181,"<p>Doesn't too much matter.  Whatever makes you happy will work.  There aren't a lot of silly rules because Python projects can be simple.</p>

<ul>
<li><code>/scripts</code> or <code>/bin</code> for that kind of command-line interface stuff</li>
<li><code>/tests</code> for your tests</li>
<li><code>/lib</code> for your C-language libraries</li>
<li><code>/doc</code> for most documentation</li>
<li><code>/apidoc</code> for the Epydoc-generated API docs.</li>
</ul>

<p>And the top-level directory can contain README's, Config's and whatnot.</p>

<p>The hard choice is whether or not to use a <code>/src</code> tree.  Python doesn't have a distinction between <code>/src</code>, <code>/lib</code>, and <code>/bin</code> like Java or C has.</p>

<p>Since a top-level <code>/src</code> directory is seen by some as meaningless, your top-level directory can be the top-level architecture of your application.</p>

<ul>
<li><code>/foo</code></li>
<li><code>/bar</code></li>
<li><code>/baz</code></li>
</ul>

<p>I recommend putting all of this under the ""name-of-my-product"" directory.  So, if you're writing an application named <code>quux</code>, the directory that contains all this stuff is named  <code>/quux</code>.</p>

<p>Another project's <code>PYTHONPATH</code>, then, can include <code>/path/to/quux/foo</code> to reuse the <code>QUUX.foo</code> module.  </p>

<p>In my case, since I use Komodo Edit, my IDE cuft is a single .KPF file.  I actually put that in the top-level <code>/quux</code> directory, and omit adding it to SVN.</p>
"
292502,"<p>Actually, a concise rule for Python Scope resolution, from <a href=""http://rads.stackoverflow.com/amzn/click/0596513984"">Learning Python, 3rd. Ed.</a>. (These rules are specific to variable names, not attributes. If you reference it without a period, these rules apply)</p>

<p>LEGB Rule.</p>

<p><strong>L</strong>, Local â Names assigned in any way within a function (<code>def</code> or <code>lambda</code>)), and not declared global in that function.</p>

<p><strong>E</strong>, Enclosing function locals â Name in the local scope of any and all enclosing functions (<code>def</code> or <code>lambda</code>), from inner to outer.</p>

<p><strong>G</strong>, Global (module) â Names assigned at the top-level of a module file, or declared global in a <code>def</code> within the file.</p>

<p><strong>B</strong>, Built-in (Python) â Names preassigned in the built-in names module : <code>open</code>,<code>range</code>,<code>SyntaxError</code>,...</p>

<p>So, in the case of</p>

<pre><code>code1
class Foo:
   code2
   def spam.....
      code3
      for code4..:
       code5
       x()
</code></pre>

<p>The for loop does not have its own namespace. In LEGB order, the scopes would be </p>

<p>L : local, in the current def.</p>

<p>E : Enclosed function, any enclosing functions (if def spam was in another def)</p>

<p>G : Global. Were there any declared globally in the module?</p>

<p>B : Any builtin x() in Python.</p>
"
82836,"<pre><code>import os.path

if os.path.isfile(filename):
</code></pre>
"
269825,"<p>For a pure python module you can find the source by looking at <code>themodule.__file__</code>.
The datetime module, however, is written in C, and therefore <code>datetime.__file__</code> points to a .so file (there is no <code>datetime.__file__</code> on Windows), and therefore, you can't see the source.</p>

<p>If you download a python source tarball and extract it, the modules' code can be found in the <strong>Modules</strong> subdirectory.</p>

<p>For example, if you want to find the datetime code for python 2.6, you can look at</p>

<pre><code>Python-2.6/Modules/datetimemodule.c
</code></pre>

<p>You can also find the latest Mercurial version on the web at 
<a href=""https://hg.python.org/cpython/file/tip/Modules/_datetimemodule.c"">https://hg.python.org/cpython/file/tip/Modules/_datetimemodule.c</a></p>
"
183870,"<p>In Python 3.0, <code>5 / 2</code> will return <code>2.5</code> and <code>5 // 2</code> will return <code>2</code>.  The former is floating point division, and the latter is floor division, sometimes also called integer division.</p>

<p>In Python 2.2 or later in the 2.x line, there is no difference for integers unless you perform a <code>from __future__ import division</code>, which causes Python 2.x to adopt the behavior of 3.0</p>

<p>Regardless of the future import, <code>5.0 // 2</code> will return <code>2.0</code> since that's the floor division result of the operation.</p>

<p>You can find a detailed description at <a href=""https://docs.python.org/whatsnew/2.2.html#pep-238-changing-the-division-operator"">https://docs.python.org/whatsnew/2.2.html#pep-238-changing-the-division-operator</a></p>
"
180993,"<p><code>re.match</code> is anchored at the beginning of the string. That has nothing to do with newlines, so it is not the same as using <code>^</code> in the pattern.</p>

<p>As <a href=""http://docs.python.org/2/library/re.html#re.match"">re.match documentation</a> says:</p>

<blockquote>
  <p>If zero or more characters at the
  <strong>beginning of string</strong> match the regular expression pattern, return a
  corresponding <code>MatchObject</code> instance.
  Return <code>None</code> if the string does not
  match the pattern; note that this is
  different from a zero-length match.</p>
  
  <p>Note: If you want to locate a match
  anywhere in string, use <code>search()</code>
  instead.</p>
</blockquote>

<p><code>re.search</code> searches the entire string, as <a href=""http://docs.python.org/2/library/re.html#re.search"">the documentation says</a>:</p>

<blockquote>
  <p><strong>Scan through string</strong> looking for a
  location where the regular expression
  pattern produces a match, and return a
  corresponding <code>MatchObject</code> instance.
  Return <code>None</code> if no position in the
  string matches the pattern; note that
  this is different from finding a
  zero-length match at some point in the
  string.</p>
</blockquote>

<p>So if you need to match at the beginning of the string, or to match the entire string use <code>match</code>. It is faster. Otherwise use <code>search</code>.</p>

<p>The documentation has a <a href=""http://docs.python.org/2/library/re.html#search-vs-match"">specific section for <code>match</code> vs. <code>search</code></a> that also covers multiline strings:</p>

<blockquote>
  <p>Python offers two different primitive
  operations based on regular
  expressions: <code>match</code> checks for a match
  <strong>only at the beginning</strong> of the string,
  while <code>search</code> checks for a match
  <strong>anywhere</strong> in the string (this is what
  Perl does by default).</p>
  
  <p>Note that <code>match</code> may differ from <code>search</code>
  even when using a regular expression
  beginning with <code>'^'</code>: <code>'^'</code> matches only
  at the start of the string, or in
  <code>MULTILINE</code> mode also immediately
  following a newline. The â<code>match</code>â
  operation succeeds <em>only if the pattern
  matches at the <strong>start</strong> of the string</em>
  regardless of mode, or at the starting
  position given by the optional <code>pos</code>
  argument regardless of whether a
  newline precedes it.</p>
</blockquote>

<p>Now, enough talk. Time to some example code:</p>

<pre><code># example code:
string_with_newlines = """"""something
someotherthing""""""

import re

print re.match('some', string_with_newlines) # matches
print re.match('someother', 
               string_with_newlines) # won't match
print re.match('^someother', string_with_newlines, 
               re.MULTILINE) # also won't match
print re.search('someother', 
                string_with_newlines) # finds something
print re.search('^someother', string_with_newlines, 
                re.MULTILINE) # also finds something

m = re.compile('thing$', re.MULTILINE)

print m.match(string_with_newlines) # no match
print m.match(string_with_newlines, pos=4) # matches
print m.search(string_with_newlines, 
               re.MULTILINE) # also matches
</code></pre>
"
39858,"<p>Another, more concise, option:</p>

<pre><code>z = dict(x, **y)
</code></pre>

<p><strong>Note</strong>: this has become a popular answer, but it is important to point out that if <code>y</code> has any non-string keys, the fact that this works at all is an abuse of a CPython implementation detail, and it does not work in Python 3, or in PyPy, IronPython, or Jython. Also, <a href=""http://mail.python.org/pipermail/python-dev/2010-April/099459.html"">Guido is not a fan</a>. So I can't recommend this technique for forward-compatible or cross-implementation portable code, which really means it should be avoided entirely.</p>
"
204049,"<p><a href=""http://docs.python.org/2/library/subprocess.html#using-the-subprocess-module""><code>subprocess.call</code></a> will avoid problems with having to deal with quoting conventions of various shells. It accepts a list, rather than a string, so arguments are more easily delimited. i.e.</p>

<pre><code>import subprocess
subprocess.call(['C:\\Temp\\a b c\\Notepad.exe', 'C:\\test.txt'])
</code></pre>
"
201771,"<p>Well, you can make things a little easier by fixing up the syntax:</p>

<pre><code>def r(a):
  i = a.find('0')
  ~i or exit(a)
  [m in[(i-j)%9*(i/9^j/9)*(i/27^j/27|i%9/3^j%9/3)or a[j]for j in range(81)] or r(a[:i]+m+a[i+1:])for m in'%d'%5**18]
from sys import *
r(argv[1])
</code></pre>

<p>Cleaning up a little:</p>

<pre><code>from sys import exit, argv
def r(a):
  i = a.find('0')
  if i == -1:
    exit(a)
  for m in '%d' % 5**18:
    m in[(i-j)%9*(i/9^j/9)*(i/27^j/27|i%9/3^j%9/3) or a[j] for j in range(81)] or r(a[:i]+m+a[i+1:])

r(argv[1])
</code></pre>

<p>Okay, so this script expects a command-line argument, and calls the function r on it.  If there are no zeros in that string, r exits and prints out its argument.  </p>

<blockquote>
  <p>(If another type of object is passed,
  None is equivalent to passing zero,
  and any other object is printed to
  sys.stderr  and results in an exit
  code of 1. In particular,
  sys.exit(""some error message"") is a
  quick way to exit a program when an
  error occurs. See
  <a href=""http://www.python.org/doc/2.5.2/lib/module-sys.html"">http://www.python.org/doc/2.5.2/lib/module-sys.html</a>)</p>
</blockquote>

<p>I guess this means that zeros correspond to open spaces, and a puzzle with no zeros is solved.  Then there's that nasty recursive expression.</p>

<p>The loop is interesting: <code>for m in'%d'%5**18</code></p>

<p>Why 5**18? It turns out that <code>'%d'%5**18</code> evaluates to <code>'3814697265625'</code>.  This is a string that has each digit 1-9 at least once, so maybe it's trying to place each of them.  In fact, it looks like this is what <code>r(a[:i]+m+a[i+1:])</code> is doing: recursively calling r, with the first blank filled in by a digit from that string.  But this only happens if the earlier expression is false.  Let's look at that:</p>

<p><code>m in [(i-j)%9*(i/9^j/9)*(i/27^j/27|i%9/3^j%9/3) or a[j] for j in range(81)]</code></p>

<p>So the placement is done only if m is not in that monster list.  Each element is either a number (if the first expression is nonzero) or a character (if the first expression is zero).  m is ruled out as a possible substitution if it appears as a character, which can only happen if the first expression is zero.  When is the expression zero?</p>

<p>It has three parts that are multiplied:</p>

<ul>
<li><code>(i-j)%9</code> which is zero if i and j are a multiple of 9 apart, i.e. the same column.</li>
<li><code>(i/9^j/9)</code> which is zero if i/9 == j/9, i.e. the same row.</li>
<li><code>(i/27^j/27|i%9/3^j%9/3)</code> which is zero if both of these are zero:</li>
<li><ul>
<li><code>i/27^j^27</code> which is zero if i/27 == j/27, i.e. the same block of three rows</li>
</ul></li>
<li><ul>
<li><code>i%9/3^j%9/3</code> which is zero if i%9/3 == j%9/3, i.e. the same block of three columns</li>
</ul></li>
</ul>

<p>If any of these three parts is zero, the entire expression is zero.  In other words, if i and j share a row, column, or 3x3 block, then the value of j can't be used as a candidate for the blank at i.  Aha!</p>

<pre><code>from sys import exit, argv
def r(a):
  i = a.find('0')
  if i == -1:
    exit(a)
  for m in '3814697265625':
    okay = True
    for j in range(81):
      if (i-j)%9 == 0 or (i/9 == j/9) or (i/27 == j/27 and i%9/3 == j%9/3):
        if a[j] == m:
          okay = False
          break
    if okay:
      # At this point, m is not excluded by any row, column, or block, so let's place it and recurse
      r(a[:i]+m+a[i+1:])

r(argv[1])
</code></pre>

<p>Note that if none of the placements work out, r will return and back up to the point where something else can be chosen, so it's a basic depth first algorithm.</p>

<p>Not using any heuristics, it's not particularly efficient.  I took this puzzle from Wikipedia (<a href=""http://en.wikipedia.org/wiki/Sudoku"">http://en.wikipedia.org/wiki/Sudoku</a>):</p>

<pre><code>$ time python sudoku.py 530070000600195000098000060800060003400803001700020006060000280000419005000080079
534678912672195348198342567859761423426853791713924856961537284287419635345286179

real    0m47.881s
user    0m47.223s
sys 0m0.137s
</code></pre>

<p>Addendum: How I would rewrite it as a maintenance programmer (this version has about a 93x speedup :)</p>

<pre><code>import sys

def same_row(i,j): return (i/9 == j/9)
def same_col(i,j): return (i-j) % 9 == 0
def same_block(i,j): return (i/27 == j/27 and i%9/3 == j%9/3)

def r(a):
  i = a.find('0')
  if i == -1:
    sys.exit(a)

  excluded_numbers = set()
  for j in range(81):
    if same_row(i,j) or same_col(i,j) or same_block(i,j):
      excluded_numbers.add(a[j])

  for m in '123456789':
    if m not in excluded_numbers:
      # At this point, m is not excluded by any row, column, or block, so let's place it and recurse
      r(a[:i]+m+a[i+1:])

if __name__ == '__main__':
  if len(sys.argv) == 2 and len(sys.argv[1]) == 81:
    r(sys.argv[1])
  else:
    print 'Usage: python sudoku.py puzzle'
    print '  where puzzle is an 81 character string representing the puzzle read left-to-right, top-to-bottom, and 0 is a blank'
</code></pre>
"
312644,"<p>Directly from the (old) Python documentation (recipes for itertools):</p>

<pre><code>from itertools import izip, chain, repeat

def grouper(n, iterable, padvalue=None):
    ""grouper(3, 'abcdefg', 'x') --&gt; ('a','b','c'), ('d','e','f'), ('g','x','x')""
    return izip(*[chain(iterable, repeat(padvalue, n-1))]*n)
</code></pre>

<p>The current version, as suggested by J.F.Sebastian:</p>

<pre><code>from itertools import izip_longest # for Python 2.x
#from itertools import zip_longest # for Python 3.x
#from six.moves import zip_longest # for both (uses the six compat library)

def grouper(n, iterable, padvalue=None):
    ""grouper(3, 'abcdefg', 'x') --&gt; ('a','b','c'), ('d','e','f'), ('g','x','x')""
    return izip_longest(*[iter(iterable)]*n, fillvalue=padvalue)
</code></pre>

<p>I guess Guido's time machine worksâworkedâwill workâwill have workedâwas working again.</p>

<p>These solutions work because <code>[iter(iterable)]*n</code> (or the equivalent in the earlier version) creates <em>one</em> iterator, repeated <code>n</code> times in the list. <code>izip_longest</code> then effectively performs a round-robin of ""each"" iterator; because this is the same iterator, it is advanced by each such call, resulting in each such zip-roundrobin generating one tuple of <code>n</code> items.</p>
"
13107,"<p>For reference&mdash;<em>future</em> Python possibilities:<br />
Starting with Python 2.6 you can express binary literals using the prefix <strong>0b</strong> or <strong>0B</strong>:</p>

<pre><code>&gt;&gt;&gt; 0b101111
47
</code></pre>

<p>You can also use the new <strong>bin</strong> function to get the binary representation of a number:</p>

<pre><code>&gt;&gt;&gt; bin(173)
'0b10101101'
</code></pre>

<p>Development version of the documentation: <a href=""http://docs.python.org/dev/whatsnew/2.6.html#pep-3127-integer-literal-support-and-syntax"">What's New in Python 2.6</a></p>
"
36033,"<p>Use a <a href=""https://docs.python.org/2/library/collections.html#collections.namedtuple"">named tuple</a>, which was added to the <a href=""http://docs.python.org/library/collections.html"">collections module</a> in the standard library in Python 2.6. It's also possible to use Raymond Hettinger's <a href=""http://code.activestate.com/recipes/500261/"">named tuple</a> recipe if you need to support Python 2.4.</p>

<p>It's nice for your basic example, but also covers a bunch of edge cases you might run into later as well. Your fragment above would be written as:</p>

<pre><code>from collections import namedtuple
MyStruct = namedtuple(""MyStruct"", ""field1 field2 field3"")
</code></pre>

<p>The newly created type can be used like this:</p>

<pre><code>m = MyStruct(""foo"", ""bar"", ""baz"")
</code></pre>

<p>Or you can use named arguments:</p>

<pre><code>m = MyStruct(field1 = ""foo"", field2 = ""bar"", field3 = ""baz"")
</code></pre>
"
339024,"<p>Just use the <a href=""http://docs.python.org/2/library/stdtypes.html#string-methods"">rjust</a> method of the string object.</p>

<p>This example will make a string of 10 characters long, padding as necessary.</p>

<pre><code>&gt;&gt;&gt; t = 'test'
&gt;&gt;&gt; t.rjust(10, '0')
&gt;&gt;&gt; '000000test'
</code></pre>
"
44842,"<p>It's a list of public objects of that module. It overrides the default of hiding everything that begins with an underscore.</p>
"
111988,"<pre><code>import urllib2
opener = urllib2.build_opener(urllib2.HTTPHandler)
request = urllib2.Request('http://example.org', data='your_put_data')
request.add_header('Content-Type', 'your/contenttype')
request.get_method = lambda: 'PUT'
url = opener.open(request)
</code></pre>
"
262132,"<p>And in this context it can also be good to remember that strings are also iterable.</p>

<pre><code>&gt;&gt;&gt; a = [1, 2]
&gt;&gt;&gt; a
[1, 2]
&gt;&gt;&gt; a.extend('hey')
&gt;&gt;&gt; a
[1, 2, 'h', 'e', 'y']
</code></pre>
"
59841,"<p>Two options that don't require copying the whole set:</p>

<pre><code>for e in s:
    break
# e is now an element from s
</code></pre>

<p>Or...</p>

<pre><code>e = next(iter(s))
</code></pre>

<p>But in general, sets don't support indexing or slicing.</p>
"
165662,"<p><a href=""https://docs.python.org/3/library/subprocess.html?highlight=subprocess#subprocess.Popen.communicate""><code>Popen.communicate()</code></a> documentation:</p>

<blockquote>
  <p>Note that if you want to send data to
  the processâs stdin, you need to
  create the Popen object with
  stdin=PIPE. Similarly, to get anything
  other than None in the result tuple,
  you need to give stdout=PIPE and/or
  stderr=PIPE too.</p>
  
  <p><strong>Replacing os.popen*</strong></p>
</blockquote>

<pre><code>    pipe = os.popen(cmd, 'w', bufsize)
    # ==&gt;
    pipe = Popen(cmd, shell=True, bufsize=bufsize, stdin=PIPE).stdin
</code></pre>

<blockquote>
  <p><strong>Warning</strong> Use communicate() rather than
  stdin.write(), stdout.read() or
  stderr.read() to avoid deadlocks due
  to any of the other OS pipe buffers
  filling up and blocking the child
  process.</p>
</blockquote>

<p>So your example could be written as follows:</p>

<pre><code>from subprocess import Popen, PIPE, STDOUT

p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)    
grep_stdout = p.communicate(input=b'one\ntwo\nthree\nfour\nfive\nsix\n')[0]
print(grep_stdout.decode())
# -&gt; four
# -&gt; five
# -&gt;
</code></pre>
"
104436,"<p><strong>Starting with Python 2.6</strong> (and if you're on Python 3) you have a <strong>standard-library</strong> tool for this: <a href=""https://docs.python.org/2/library/itertools.html#itertools.permutations""><code>itertools.permutations</code></a>.</p>

<hr>

<p>If you're using an <strong>older Python (&lt;2.6)</strong> for some reason or are just curious to know how it works, here's one nice approach, taken from  <a href=""http://code.activestate.com/recipes/252178/"">http://code.activestate.com/recipes/252178/</a>:</p>

<pre><code>def all_perms(elements):
    if len(elements) &lt;=1:
        yield elements
    else:
        for perm in all_perms(elements[1:]):
            for i in range(len(elements)):
                # nb elements[0:1] works in both string and list contexts
                yield perm[:i] + elements[0:1] + perm[i:]
</code></pre>

<p>A couple of alternative approaches are listed in the documentation of <code>itertools.permutations</code>. Here's one:</p>

<pre><code>def permutations(iterable, r=None):
    # permutations('ABCD', 2) --&gt; AB AC AD BA BC BD CA CB CD DA DB DC
    # permutations(range(3)) --&gt; 012 021 102 120 201 210
    pool = tuple(iterable)
    n = len(pool)
    r = n if r is None else r
    if r &gt; n:
        return
    indices = range(n)
    cycles = range(n, n-r, -1)
    yield tuple(pool[i] for i in indices[:r])
    while n:
        for i in reversed(range(r)):
            cycles[i] -= 1
            if cycles[i] == 0:
                indices[i:] = indices[i+1:] + indices[i:i+1]
                cycles[i] = n - i
            else:
                j = cycles[i]
                indices[i], indices[-j] = indices[-j], indices[i]
                yield tuple(pool[i] for i in indices[:r])
                break
        else:
            return
</code></pre>

<p>And another, based on <code>itertools.product</code>:</p>

<pre><code>def permutations(iterable, r=None):
    pool = tuple(iterable)
    n = len(pool)
    r = n if r is None else r
    for indices in product(range(n), repeat=r):
        if len(set(indices)) == r:
            yield tuple(pool[i] for i in indices)
</code></pre>
"
2937,"<p>First you will need some GUI library with Python bindings and then (if you want) some program that will convert your python scripts into standalone executables.</p>

<p><strong>Cross-platform GUI libraries with Python bindings (Windows, Linux, Mac)</strong></p>

<p>Of course, there are many, but the most popular that I've seen in wild are:</p>

<ul>
<li><a href=""http://wiki.python.org/moin/TkInter"">Tkinter</a>  - based on <a href=""http://www.tcl.tk/"">Tk GUI toolkit</a> (de-facto standard GUI library for python, free for commercial projects)</li>
<li><a href=""http://www.wxpython.org/"">WxPython</a> - based on <a href=""http://www.wxwidgets.org/"">WxWidgets</a> (very popular, free for commercial projects)</li>
<li><a href=""http://www.riverbankcomputing.co.uk/news"">PyQt</a> - based on <a href=""http://trolltech.com/products/qt/"">Qt</a> (also very popular and more stable than WxWidgets but costly license for commercial projects)</li>
</ul>

<p>Complete list is at <a href=""http://wiki.python.org/moin/GuiProgramming"">http://wiki.python.org/moin/GuiProgramming</a></p>

<p><strong>Single executable (Windows)</strong></p>

<ul>
<li><a href=""http://www.py2exe.org/"">py2exe</a> - Probably the most popular out there (<a href=""http://stackoverflow.com/questions/2933/an-executable-python-app/31859#31859"">PyInstaller</a> is also gaining in popularity)</li>
</ul>

<p><strong>Single executable (Linux)</strong></p>

<ul>
<li><a href=""http://wiki.python.org/moin/Freeze"">Freeze</a> - works the same way like py2exe but targets Linux platform</li>
</ul>

<p><strong>Single executable (Mac)</strong></p>

<ul>
<li><a href=""https://pythonhosted.org/py2app/"">py2app</a> - again, works like py2exe but targets Mac OS</li>
</ul>
"
73149,"<p>Everyone seems to want to tell you what you should be doing rather than just answering the question.</p>

<p>The problem is that you're running the module as '__main__' by passing the mod1.py as an argument to the interpreter.</p>

<p>From <a href=""http://www.python.org/dev/peps/pep-0328/"">PEP 328</a>:</p>

<blockquote>
  <p>Relative imports use a module's __name__ attribute to determine that module's position in the package hierarchy. If the module's name does not contain any package information (e.g. it is set to '__main__') then relative imports are resolved as if the module were a top level module, regardless of where the module is actually located on the file system.</p>
</blockquote>

<p>In Python 2.6, they're adding the ability to reference modules relative to the main module.  <a href=""http://python.org/dev/peps/pep-0366/"">PEP 366</a> describes the change.</p>

<p><strong>Update</strong>: According to Nick Coghlan, the recommended alternative is to run the module inside the package using the -m switch.</p>
"
196391,"<p>I think you are not  asking the right question--</p>

<p>A string in python has no property corresponding to 'ascii', utf-8, or any other encoding. The source of your string (whether you read it from a file, input from a keyboard, etc.) may have encoded a unicode string in ascii to produce your string, but that's where you need to go for an answer.</p>

<p>Perhaps the question you can ask is: ""Is this string the result of encoding a unicode string in ascii?"" -- This you can answer
    by trying:</p>

<pre><code>try:
    mystring.decode('ascii')
except UnicodeDecodeError:
    print ""it was not a ascii-encoded unicode string""
else:
    print ""It may have been an ascii-encoded unicode string""
</code></pre>
"
34452,"<p>It appears you can use this code, replacing 'object' with the object you're interested in:-</p>

<pre><code>[method for method in dir(object) if callable(getattr(object, method))]
</code></pre>

<p>I discovered it at <a href=""http://www.diveintopython.net/power_of_introspection/index.html"">this site</a>, hopefully that should provide some further detail!</p>
"
255172,"<p>Just a comment. In <a href=""http://docs.python.org/dev/3.0/whatsnew/3.0.html"">Python 3</a>, you will use</p>

<pre><code>print('h', end='')
</code></pre>

<p>to suppress the endline terminator, and</p>

<pre><code>print('a', 'b', 'c', sep='')
</code></pre>

<p>to suppress the whitespace separator between items.</p>
"
240205,"<p>When you write <code>[x]*3</code> you get, essentially, the list <code>[x, x, x]</code>. That is, a list with 3 references to the same <code>x</code>. When you then modify this single <code>x</code> it is visible via all three references to it.</p>

<p>To fix it, you need to make sure that you create a new list at each position. One way to do it is</p>

<pre><code>[[1]*4 for n in range(3)]
</code></pre>
"
279338,"<p>You could also add the sub directory to your python path so that it imports as a normal script.</p>

<pre><code>import sys
sys.path.append( &lt;path to dirFoo&gt; )
import Bar
</code></pre>
"
129374,"<p>The advantage of adding a path to sys.path (over using imp) is that it simplifies things when importing more than one module from a single package.  For example:</p>

<pre><code>import sys
# the mock-0.3.1 dir contains testcase.py, testutils.py &amp; mock.py
sys.path.append('/foo/bar/mock-0.3.1')

from testcase import TestCase
from testutils import RunTests
from mock import Mock, sentinel, patch
</code></pre>
"
102632,"<p>Generators give you lazy evaluation. You use them by iterating over them, either explicitly with 'for' or implicitly by passing it to any function or construct that iterates. You can think of generators as returning multiple items, as if they return a list, but instead of returning them all at once they return them one-by-one, and the generator function is paused until the next item is requested.</p>

<p>Generators are good for calculating large sets of results (in particular calculations involving loops themselves) where you don't know if you are going to need all results, or where you don't want to allocate the memory for all results at the same time. Or for situations where the generator uses <em>another</em> generator, or consumes some other resource, and it's more convenient if that happened as late as possible.</p>

<p>Another use for generators (that is really the same) is to replace callbacks with iteration. In some situations you want a function to do a lot of work and occasionally report back to the caller. Traditionally you'd use a callback function for this. You pass this callback to the work-function and it would periodically call this callback. The generator approach is that the work-function (now a generator) knows nothing about the callback, and merely yields whenever it wants to report something. The caller, instead of writing a separate callback and passing that to the work-function, does all the reporting work in a little 'for' loop around the generator.</p>

<p>For example, say you wrote a 'filesystem search' program. You could perform the search in its entirety, collect the results and then display them one at a time. All of the results would have to be collected before you showed the first, and all of the results would be in memory at the same time. Or you could display the results while you find them, which would be more memory efficient and much friendlier towards the user. The latter could be done by passing the result-printing function to the filesystem-search function, or it could be done by just making the search function a generator and iterating over the result.</p>

<p>If you want to see an example of the latter two approaches, see os.path.walk() (the old filesystem-walking function with callback) and os.walk() (the new filesystem-walking generator.) Of course, if you really wanted to collect all results in a list, the generator approach is trivial to convert to the big-list approach:</p>

<pre><code>big_list = list(the_generator)
</code></pre>
"
290494,"<p>The shortest way would probably be to use the <a href=""http://docs.python.org/2/library/fileinput.html?highlight=fileinput#fileinput"">fileinput module</a>. For example, the following adds line numbers to a file, in-place:</p>

<pre><code>import fileinput

for line in fileinput.input(""test.txt"", inplace=True):
    print ""%d: %s"" % (fileinput.filelineno(), line),
</code></pre>

<p>What happens here is:</p>

<ol>
<li>The original file is moved to a backup file</li>
<li>The standard output is redirected to the original file within the loop</li>
<li>Thus any <code>print</code> statements write back into the original file</li>
</ol>

<p><code>fileinput</code> has more bells and whistles. For example, it can be used to automatically operate on all files in <code>sys.args[1:]</code>, without your having to iterate over them explicitly. Starting with Python 3.2 it also provides a convenient context manager for use in a <code>with</code> statement.</p>

<hr>

<p>While <code>fileinput</code> is great for throwaway scripts, I would be wary of using it in real code because admittedly it's not very readable or familiar. In real (production) code it's worthwhile to spend just a few more lines of code to make the process explicit and thus make the code readable.</p>

<p>There are two options:</p>

<ol>
<li>The file is not overly large, and you can just read it wholly to memory. Then close the file, reopen it in writing mode and write the modified contents back.</li>
<li>The file is too large to be stored in memory; you can move it over to a temporary file and open that, reading it line by line, writing back into the original file. Note that this requires twice the storage.</li>
</ol>
"
70833,"<p>To read user input you can try <a href=""http://docs.python.org/2/library/cmd.html"">the cmd module</a> for easily creating a mini-command line interpreter (with help texts and autocompletion) and <a href=""http://docs.python.org/2/library/functions.html#raw_input"">raw_input</a> for less fancy stuff (just reading a line of text from the user).</p>

<p>Command line inputs are in sys.argv. Try this in your script for Python 2:</p>

<pre><code>import sys
print sys.argv
</code></pre>

<p>For Python 3:</p>

<pre><code>import sys
print(sys.argv)
</code></pre>

<p>Since print has changed from a keyword in Python 2 into a function call in Python 3. </p>

<p>There are two modules for parsing command line options: <a href=""http://docs.python.org/2/library/optparse.html"">optparse</a> and <a href=""http://docs.python.org/2/library/getopt.html"">getopt</a>. If you just want to input files to your script, behold the power of <a href=""http://docs.python.org/2/library/fileinput.html"">fileinput</a>.</p>

<p>The <a href=""http://docs.python.org/2/library/"">Python library reference is your friend</a>.</p>
"
111255,"<p>A callable is anything that can be called. </p>

<p>The <a href=""http://svn.python.org/projects/python/trunk/Objects/object.c"">built-in <em>callable</em> (PyCallable_Check in objects.c)</a> checks if the argument is either:</p>

<ul>
<li>an instance of a class with a <em>__call__</em> method or</li>
<li>is of a type that has a non null <em>tp_call</em> (c struct) member which indicates callability otherwise (such as in functions, methods etc.)</li>
</ul>

<p>The method named <em>__call__</em> is (<a href=""http://docs.python.org/ref/callable-types.html"">according to the documentation</a>)</p>

<blockquote>
  <p>Called when the instance is ''called'' as a function</p>
</blockquote>

<h2>Example</h2>

<pre><code>class Foo:
  def __call__(self):
    print 'called'

foo_instance = Foo()
foo_instance() #this is calling the __call__ method
</code></pre>
"
119576,"<p>Because <a href=""http://www.python.org/dev/peps/pep-0008/#tabs-or-spaces"">PEP-8</a> tells us to use spaces :)</p>
"
170248,"<p><em>The following code with Python 2.6 and above ONLY</em></p>

<p>First, import <code>itertools</code>:</p>

<pre><code>import itertools
</code></pre>

<h3>Permutation (order matters):</h3>

<pre><code>print list(itertools.permutations([1,2,3,4], 2))
[(1, 2), (1, 3), (1, 4),
(2, 1), (2, 3), (2, 4),
(3, 1), (3, 2), (3, 4),
(4, 1), (4, 2), (4, 3)]
</code></pre>

<h3>Combination (order does NOT matter):</h3>

<pre><code>print list(itertools.combinations('123', 2))
[('1', '2'), ('1', '3'), ('2', '3')]
</code></pre>

<h3>Cartesian product (with several iterables):</h3>

<pre><code>print list(itertools.product([1,2,3], [4,5,6]))
[(1, 4), (1, 5), (1, 6),
(2, 4), (2, 5), (2, 6),
(3, 4), (3, 5), (3, 6)]
</code></pre>

<h3>Cartesian product (with one iterable and itself):</h3>

<pre><code>print list(itertools.product([1,2], repeat=3))
[(1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 2, 2),
(2, 1, 1), (2, 1, 2), (2, 2, 1), (2, 2, 2)]
</code></pre>
"
301146,"<p>With Python older than 2.7/3.1, that's pretty much how you do it. For newer versions, see <code>importlib.import_module</code> <a href=""https://docs.python.org/2/library/importlib.html#importlib.import_module"" rel=""nofollow"">for 2.7+</a> and <a href=""https://docs.python.org/3.1/library/importlib.html#importlib.import_module"" rel=""nofollow"">for 3.1+</a>.</p>

<p>You can use <code>exec</code> if you want to as well.</p>

<p>Note you can import a list of modules by doing this:</p>

<pre><code>&gt;&gt;&gt; moduleNames = ['sys', 'os', 're', 'unittest'] 
&gt;&gt;&gt; moduleNames
['sys', 'os', 're', 'unittest']
&gt;&gt;&gt; modules = map(__import__, moduleNames)
</code></pre>

<p>Ripped straight from <a href=""http://www.diveintopython.net/functional_programming/dynamic_import.html"" rel=""nofollow"">Dive Into Python</a>.</p>
"
280441,"<p>Use the <code>re.escape()</code> function for this:</p>

<p><a href=""http://docs.python.org/library/re.html#re.escape"">4.2.3 <code>re</code> Module Contents</a></p>

<blockquote>
  <p><strong>escape(string)</strong></p>
  
  <p>Return string with all non-alphanumerics backslashed; this is useful if you want to match an arbitrary literal string that may have regular expression metacharacters in it.</p>
</blockquote>

<p>A simplistic example, search any occurence of the provided string optionally followed by 's', and return the match object.</p>

<pre><code>def simplistic_plural(word, text):
    word_or_plural = re.escape(word) + 's?'
    return re.match(word_or_plural, text)
</code></pre>
"
135157,"<p>In Python 3, you would use the format() string method:</p>

<pre><code>for i in (1, 10, 100):
    print('{num:02d}'.format(num=i))
</code></pre>

<p>or using the built-in (for a single number):</p>

<pre><code>print(format(i, '02d'))
</code></pre>

<p>See the <a href=""http://www.python.org/dev/peps/pep-3101"">PEP-3101</a> documentation for the new formatting functions.</p>
"
172454,"<pre><code>inputString.splitlines()
</code></pre>

<p>Will give you a list with each item, the <a href=""http://docs.python.org/2/library/stdtypes.html#str.splitlines""><code>splitlines()</code></a> method is designed to split each line into a list element.</p>
"
310785,"<p>Python's argument expansion may be used to solve this problem:</p>

<pre><code>kwargs = {
    '{0}__{1}'.format('name', 'startswith'): 'A',
    '{0}__{1}'.format('name', 'endswith'): 'Z'
}

Person.objects.filter(**kwargs)
</code></pre>

<p>This is a very common and useful Python idiom.</p>
"
32440,"<p>Yes you can. I do it using the pythoncom libraries that come included with <a href=""http://www.activestate.com/Products/activepython/index.mhtml"" rel=""nofollow"">ActivePython</a> or can be installed with <a href=""https://sourceforge.net/projects/pywin32/"" rel=""nofollow"">pywin32</a> (Python for Windows extensions).</p>

<p>This is a basic skeleton for a simple service:</p>

<pre><code>import win32serviceutil
import win32service
import win32event
import servicemanager
import socket


class AppServerSvc (win32serviceutil.ServiceFramework):
    _svc_name_ = ""TestService""
    _svc_display_name_ = ""Test Service""

    def __init__(self,args):
        win32serviceutil.ServiceFramework.__init__(self,args)
        self.hWaitStop = win32event.CreateEvent(None,0,0,None)
        socket.setdefaulttimeout(60)

    def SvcStop(self):
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        win32event.SetEvent(self.hWaitStop)

    def SvcDoRun(self):
        servicemanager.LogMsg(servicemanager.EVENTLOG_INFORMATION_TYPE,
                              servicemanager.PYS_SERVICE_STARTED,
                              (self._svc_name_,''))
        self.main()

    def main(self):
        pass

if __name__ == '__main__':
    win32serviceutil.HandleCommandLine(AppServerSvc)
</code></pre>

<p>Your code would go in the main() method, usually with some kind of infinite loop that might be interrumped by checking a flag, that you set in the SvcStop method</p>
"
47826,"<p>John's answer is good (that list comprehensions are better when you want to iterate over something multiple times).  However, it's also worth noting that you should use a list if you want to use any of the list methods.  For example, the following code won't work:</p>

<pre><code>def gen():
    return (something for something in get_some_stuff())

print gen()[:2]     # generators don't support indexing or slicing
print [5,6] + gen() # generators can't be added to lists
</code></pre>

<p>Basically, use a generator expression if all you're doing is iterating once.  If you want to store and use the generated results, then you're probably better off with a list comprehension.</p>

<p>Since performance is the most common reason to choose one over the other, my advice is to not worry about it and just pick one; if you find that your program is running too slowly, then and only then should you go back and worry about tuning your code.</p>
"
50905,"<p>p1.py:</p>

<pre><code>execfile(""p2.py"")
</code></pre>

<p>p2.py:</p>

<pre><code>import inspect, os
print inspect.getfile(inspect.currentframe()) # script filename (usually with path)
print os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) # script directory
</code></pre>
"
291968,"<p>ForeignKey is represented by django.forms.ModelChoiceField, which is a ChoiceField whose choices are a model QuerySet.  See the reference for <a href=""http://docs.djangoproject.com/en/dev/ref/forms/fields/#modelchoicefield"">ModelChoiceField</a>.</p>

<p>So, provide a QuerySet to the field's <code>queryset</code> attribute.  Depends on how your form is built.  If you build an explicit form, you'll have fields named directly. </p>

<pre><code>form.rate.queryset = Rate.objects.filter(company_id=the_company.id)
</code></pre>

<p>If you take the default ModelForm object, <code>form.fields[""rate""].queryset = ...</code></p>

<p>This is done explicitly in the view.  No hacking around.</p>
"
114289,"<p>Methods in Python are a very, very simple thing once you understood the basics of the descriptor system.  Imagine the following class:</p>

<pre><code>class C(object):
    def foo(self):
        pass
</code></pre>

<p>Now let's have a look at that class in the shell:</p>

<pre><code>&gt;&gt;&gt; C.foo
&lt;unbound method C.foo&gt;
&gt;&gt;&gt; C.__dict__['foo']
&lt;function foo at 0x17d05b0&gt;
</code></pre>

<p>As you can see if you access the <code>foo</code> attribute on the class you get back an unbound method, however inside the class storage (the dict) there is a function.  Why's that?  The reason for this is that the class of your class implements a <code>__getattribute__</code> that resolves descriptors.  Sounds complex, but is not.  <code>C.foo</code> is roughly equivalent to this code in that special case:</p>

<pre><code>&gt;&gt;&gt; C.__dict__['foo'].__get__(None, C)
&lt;unbound method C.foo&gt;
</code></pre>

<p>That's because functions have a <code>__get__</code> method which makes them descriptors.  If you have an instance of a class it's nearly the same, just that <code>None</code> is the class instance:</p>

<pre><code>&gt;&gt;&gt; c = C()
&gt;&gt;&gt; C.__dict__['foo'].__get__(c, C)
&lt;bound method C.foo of &lt;__main__.C object at 0x17bd4d0&gt;&gt;
</code></pre>

<p>Now why does Python do that?  Because the method object binds the first parameter of a function to the instance of the class.  That's where self comes from.  Now sometimes you don't want your class to make a function a method, that's where <code>staticmethod</code> comes into play:</p>

<pre><code> class C(object):
  @staticmethod
  def foo():
   pass
</code></pre>

<p>The <code>staticmethod</code> decorator wraps your class and implements a dummy <code>__get__</code> that returns the wrapped function as function and not as a method:</p>

<pre><code>&gt;&gt;&gt; C.__dict__['foo'].__get__(None, C)
&lt;function foo at 0x17d0c30&gt;
</code></pre>

<p>Hope that explains it.</p>
"
347560,"<p>Django's contributed <a href=""http://docs.djangoproject.com/en/dev/ref/contrib/humanize/#ref-contrib-humanize"">humanize</a> application does this:</p>

<pre><code>{% load humanize %}
{{ my_num|intcomma }}
</code></pre>

<p>Be sure to add <code>'django.contrib.humanize'</code> to your <code>INSTALLED_APPS</code> list in the <code>settings.py</code> file.</p>
"
232791,"<p>I feel like I post a link to this presentation every day:  David M. Beazly's <a href=""http://www.dabeaz.com/generators/"">Generator Tricks for Systems Programmers</a>.  If you're a Python programmer and you're not extremely familiar with generators, you should read this.  It's a very clear explanation of what generators are, how they work, what the yield statement does, and it answers the question ""Do you really want to mess around with this obscure language feature?""  </p>

<p>SPOILER ALERT.  The answer is:  Yes.  Yes, you do.</p>
"
118508,"<p>The ellipsis is used to slice higher-dimensional data structures. </p>

<p>It's designed to mean <em>at this point, insert as many full slices (<code>:</code>) to extend the multi-dimensional slice to all dimensions</em>.</p>

<p><strong>Example</strong>:</p>

<pre><code>&gt;&gt;&gt; from numpy import arange
&gt;&gt;&gt; a = arange(16).reshape(2,2,2,2)
</code></pre>

<p>Now, you have a 4-dimensional matrix of order 2x2x2x2. To select all first elements in the 4th dimension, you can use the ellipsis notation</p>

<pre><code>&gt;&gt;&gt; a[..., 0].flatten()
array([ 0,  2,  4,  6,  8, 10, 12, 14])
</code></pre>

<p>which is equivalent to</p>

<pre><code>&gt;&gt;&gt; a[:,:,:,0].flatten()
array([ 0,  2,  4,  6,  8, 10, 12, 14])
</code></pre>

<p>In your own implementations, you're free to ignore the contract mentioned above and use it for whatever you see fit.</p>
"
339220,"<p>Based on your comments to orip's post, I guess this is what happened:</p>

<ol>
<li>You edited <code>__init__.py</code> on windows.</li>
<li>The windows editor added something non-printing, perhaps a carriage-return (end-of-line in Windows is CR/LF; in unix it is LF only), or perhaps a CTRL-Z (windows end-of-file).</li>
<li>You used WinSCP to copy the file to your unix box.</li>
<li>WinSCP thought: ""This has something that's not basic text; I'll put a .bin extension to indicate binary data.""</li>
<li>The missing <code>__init__.py</code> (now called <code>__init__.py.bin</code>) means python doesn't understand toolkit as a package.</li>
<li>You create <code>__init__.py</code> in the appropriate directory and everything works... ?</li>
</ol>
"
346501,"<p>Looks like OpenGL is trying to report some error on Win2003, however you've not configured your system where to output logging info.</p>

<p>You can add the following to the beginning of your program and you'll see details of the error in stderr.</p>

<pre><code>import logging
logging.basicConfig()
</code></pre>

<p>Checkout documentation on <a href=""https://docs.python.org/2/library/logging.html"">logging</a> module to get more config info, conceptually it's similar to log4J.</p>
"
187463,"<p>The method len() returns the number of elements in the list.</p>

<p>Syntax:</p>

<pre><code>len(myArray)
</code></pre>

<p>Eg:</p>

<pre><code>myArray = [1, 2, 3]
len(myArray)
</code></pre>

<p>Output:</p>

<pre><code>3
</code></pre>

<p></p>
"
222922,"<p>The benefits of <code>super()</code> in single-inheritance are minimal -- mostly, you don't have to hard-code the name of the base class into every method that uses its parent methods.</p>

<p>However, it's almost impossible to use multiple-inheritance without <code>super()</code>. This includes common idioms like mixins, interfaces, abstract classes, etc. This extends to code that later extends yours. If somebody later wanted to write a class that extended <code>Child</code> and a mixin, their code would not work properly.</p>
"
285076,"<pre><code>setattr(x, attr, 'magic')
</code></pre>

<p>For help on it:</p>

<pre><code>&gt;&gt;&gt; help(setattr)
Help on built-in function setattr in module __builtin__:

setattr(...)
    setattr(object, name, value)

    Set a named attribute on an object; setattr(x, 'y', v) is equivalent to
    ``x.y = v''.
</code></pre>

<p>Edit: However, you should note (as pointed out in comment) that you can't do that to a ""pure"" instance of object. But it is likely you have a simple subclass of object where it will work fine. I would strongly urge the O.P. to never make instances of object like that.</p>
"
60215,"<p>I've always liked doing it this way</p>

<pre><code>result = {
  'a': lambda x: x * 5,
  'b': lambda x: x + 7,
  'c': lambda x: x - 2
}[value](x)
</code></pre>

<p><a href=""http://blog.simonwillison.net/post/57956755106/switch"">From here</a></p>
"
237150,"<p>Strings do have a length method: <code>__len__()</code></p>

<p>The protocol in Python is to implement this method on objects which have a length and use the built-in <a href=""http://www.python.org/doc/2.5.2/lib/built-in-funcs.html#l2h-45""><code>len()</code></a> function, which calls it for you, similar to the way you would implement <code>__iter__()</code> and use the built-in <code>iter()</code> function (or have the method called behind the scenes for you) on objects which are iterable.</p>

<p>See <a href=""http://www.python.org/doc/2.5.2/ref/sequence-types.html"">Emulating container types</a> for more information.</p>

<p>Here's a good read on the subject of protocols in Python: <a href=""http://lucumr.pocoo.org/2011/7/9/python-and-pola/"">Python and the Principle of Least Astonishment</a></p>
"
172468,"<p>Like the others said:</p>

<pre><code>inputString.split('\n')  # --&gt; ['Line 1', 'Line 2', 'Line 3']
</code></pre>

<p>This is identical to the above, but the string module's functions are deprecated and should be avoided:</p>

<pre><code>import string
string.split(inputString, '\n')  # --&gt; ['Line 1', 'Line 2', 'Line 3']
</code></pre>

<p>Alternatively, if you want each line to include the break sequence (CR,LF,CRLF), use the <code>splitlines</code> method with a <code>True</code> argument:</p>

<pre><code>inputString.splitlines(True)  # --&gt; ['Line 1\n', 'Line 2\n', 'Line 3']
</code></pre>
"
332311,"<p>The following seems to work:</p>

<pre><code>from pylab import rcParams
rcParams['figure.figsize'] = 5, 10
</code></pre>

<p>This makes the figure's width 5 inches, and its height 10 <b>inches</b>. </p>

<p>The Figure class then uses this as the default value for one of its arguments.</p>
"
95246,"<p>I typically use:</p>

<pre><code>import subprocess

p = subprocess.Popen('ls', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
for line in p.stdout.readlines():
    print line,
retval = p.wait()
</code></pre>

<p>You are free to do what you want with the stdout data in the pipe.  In fact, you can simply omit those parameters (stdout= and stderr=) and it'll behave like os.system().</p>
"
185941,"<p>Updated to only delete files and to used the os.path.join() method suggested in the comments. If you also want to remove subdirectories, uncomment the elif statement.</p>

<pre><code>import os, shutil
folder = '/path/to/folder'
for the_file in os.listdir(folder):
    file_path = os.path.join(folder, the_file)
    try:
        if os.path.isfile(file_path):
            os.unlink(file_path)
        #elif os.path.isdir(file_path): shutil.rmtree(file_path)
    except Exception as e:
        print(e)
</code></pre>
"
113014,"<p>The way to do this using py2exe is to use the bundle_files option in your setup.py file. For a single file you will want to set <code>bundle_files</code> to 1, <code>compressed</code> to True, and set the zipfile option to None. That way it creates one compressed file for easy distribution.</p>

<p>Here is a more complete description of the bundle_file option quoted directly from the <a href=""http://www.py2exe.org/index.cgi/SingleFileExecutable?highlight=%28file%29|%28single%29"">py2exe site</a>*</p>

<blockquote>
  <p>Using ""bundle_files"" and ""zipfile""</p>
  
  <p>An easier (and better) way to create
  single-file executables is to set
  bundle_files to 1 or 2, and to set
  zipfile to None. This approach does
  not require extracting files to a
  temporary location, which provides
  much faster program startup.</p>
  
  <p>Valid values for bundle_files are:</p>
  
  <ul>
  <li>3 (default) don't bundle </li>
  <li>2 bundle everything but the Python interpreter</li>
  <li>1 bundle everything, including the Python interpreter </li>
  </ul>
  
  <p>If zipfile is set to None, the files will be bundle
  within the executable instead of library.zip.</p>
</blockquote>

<p>Here is a sample setup.py:</p>

<pre><code>from distutils.core import setup
import py2exe, sys, os

sys.argv.append('py2exe')

setup(
    options = {'py2exe': {'bundle_files': 1, 'compressed': True}},
    windows = [{'script': ""single.py""}],
    zipfile = None,
)
</code></pre>
"
160830,"<p>David Goodger (in ""Code Like a Pythonista"" <a href=""http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"">here</a>)  describes the PEP 8 recommendations as follows:</p>

<ul>
<li><p><code>joined_lower</code> for functions, methods,
attributes, variables</p></li>
<li><p><code>joined_lower</code> or <code>ALL_CAPS</code> for
constants</p></li>
<li><p><code>StudlyCaps</code> for classes</p></li>
<li><p><code>camelCase</code> only to conform to
pre-existing conventions</p></li>
</ul>
"
95100,"<blockquote>
  <p>range creates a list, so if you do <code>range(1, 10000000)</code> it creates a list in memory with <code>10000000</code> elements.</p>
  
  <p><code>xrange</code> <s>is a generator, so it</s> is a sequence object <s>is a</s> that  evaluates lazily.  </p>
</blockquote>

<p>This is true, but in Python 3, range will be implemented by the Python 2 xrange(). If you need to actually generate the list, you will need to do:</p>

<pre><code>list(range(1,100))
</code></pre>
"
255154,"<p>You can use:</p>

<pre><code>sys.stdout.write('h')
sys.stdout.write('m')
</code></pre>
"
4605,"<p>Patrick's solution is probably the cleanest.
If you need to dynamically pick up the module as well, you can import it like:</p>

<pre><code>m = __import__ ('foo')
func = getattr(m,'bar')
func()
</code></pre>
"
38276,"<p>Class methods are for when you need to have methods that aren't specific to any particular instance, but still involve the class in some way. The most interesting thing about them is that they can be overridden by subclasses, something that's simply not possible in Java's static methods or Python's module-level functions.</p>

<p>If you have a class <code>MyClass</code>, and a module-level function that operates on MyClass (factory, dependency injection stub, etc), make it a <code>classmethod</code>. Then it'll be available to subclasses.</p>
"
38916,"<p>The growing complexity of this answer over time, and the many hacks required, probably ought to caution you against doing this at all. It's relying on undocumented internal implementation details of the admin, is likely to break again in future versions of Django, and is no easier to implement than just finding another JS calendar widget and using that.</p>

<p>That said, here's what you have to do if you're determined to make this work:</p>

<ol>
<li><p>Define your own ModelForm subclass for your model (best to put it in forms.py in your app), and tell it to use the AdminDateWidget / AdminTimeWidget / AdminSplitDateTime (replace 'mydate' etc with the proper field names from your model):</p>

<pre><code>from django import forms
from my_app.models import Product
from django.contrib.admin import widgets                                       

class ProductForm(forms.ModelForm):
    class Meta:
        model = Product
    def __init__(self, *args, **kwargs):
        super(ProductForm, self).__init__(*args, **kwargs)
        self.fields['mydate'].widget = widgets.AdminDateWidget()
        self.fields['mytime'].widget = widgets.AdminTimeWidget()
        self.fields['mydatetime'].widget = widgets.AdminSplitDateTime()
</code></pre></li>
<li><p>Change your URLconf to pass 'form_class': ProductForm instead of 'model': Product to the generic create_object view (that'll mean ""from my_app.forms import ProductForm"" instead of ""from my_app.models import Product"", of course).</p></li>
<li><p>In the head of your template, include {{ form.media }} to output the links to the Javascript files.</p></li>
<li><p>And the hacky part: the admin date/time widgets presume that the i18n JS stuff has been loaded, and also require core.js, but don't provide either one automatically.  So in your template above {{ form.media }} you'll need:</p>

<pre><code>&lt;script type=""text/javascript"" src=""/my_admin/jsi18n/""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""/media/admin/js/core.js""&gt;&lt;/script&gt;
</code></pre>

<p>You may also wish to use the following admin CSS (thanks <a href=""http://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/719583#719583"">Alex</a> for mentioning this):</p>

<pre><code>&lt;link rel=""stylesheet"" type=""text/css"" href=""/media/admin/css/forms.css""/&gt;
&lt;link rel=""stylesheet"" type=""text/css"" href=""/media/admin/css/base.css""/&gt;
&lt;link rel=""stylesheet"" type=""text/css"" href=""/media/admin/css/global.css""/&gt;
&lt;link rel=""stylesheet"" type=""text/css"" href=""/media/admin/css/widgets.css""/&gt;
</code></pre></li>
</ol>

<p>This implies that Django's admin media (ADMIN_MEDIA_PREFIX) is at /media/admin/ - you can change that for your setup.  Ideally you'd use a context processor to pass this values to your template instead of hardcoding it, but that's beyond the scope of this question.</p>

<p>This also requires that the URL /my_admin/jsi18n/ be manually wired up to the django.views.i18n.javascript_catalog view (or null_javascript_catalog if you aren't using I18N).  You have to do this yourself instead of going through the admin application so it's accessible regardless of whether you're logged into the admin (thanks <a href=""http://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/408230#408230"">Jeremy</a> for pointing this out).  Sample code for your URLconf:</p>

<pre><code>(r'^my_admin/jsi18n', 'django.views.i18n.javascript_catalog'),
</code></pre>

<p>Lastly, if you are using Django 1.2 or later, you need some additional code in your template to help the widgets find their media:</p>

<pre><code>{% load adminmedia %} /* At the top of the template. */

/* In the head section of the template. */
&lt;script type=""text/javascript""&gt;
window.__admin_media_prefix__ = ""{% filter escapejs %}{% admin_media_prefix %}{% endfilter %}"";
&lt;/script&gt;
</code></pre>

<p>Thanks <a href=""http://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/2818128#2818128"">lupefiasco</a> for this addition.</p>
"
231778,"<p><code>yield</code> is just like <code>return</code> - it returns whatever you tell it to.  The only difference is that the next time you call the function, execution starts from the last call to the <code>yield</code> statement.</p>

<p>In the case of your code, the function <code>get_child_candidates</code> is acting like an iterator so that when you extend your list, it adds one element at a time to the new list.</p>

<p><code>list.extend</code> calls an iterator until it's exhausted.  In the case of the code sample you posted, it would be much clearer to just return a tuple and append that to the list.</p>
"
128577,"<p>Module importing is quite fast, but not instant. This means that:</p>

<ul>
<li>Putting the imports at the top of the module is fine, because it's a trivial cost that's only paid once.</li>
<li>Putting the imports within a function will cause calls to that function to take longer.</li>
</ul>

<p>So if you care about efficiency, put the imports at the top. Only move them into a function if your profiling shows that would help (you <strong>did</strong> profile to see where best to improve performance, right??)</p>

<p><hr /></p>

<p>The best reasons I've seen to perform lazy imports are:</p>

<ul>
<li>Optional library support. If your code has multiple paths that use different libraries, don't break if an optional library is not installed.</li>
<li>In the <code>__init__.py</code> of a plugin, which might be imported but not actually used. Examples are Bazaar plugins, which use <code>bzrlib</code>'s lazy-loading framework.</li>
</ul>
"
37081,"<p>If you need the numeric values, here's the quickest way:</p>

<pre><code>dog, cat, rabbit = range(3)
</code></pre>
"
100762,"<p>In the first test, Python try to convert the object to a <code>bool</code> value if it is not already one. Roughly, <strong>we are asking the object : are you meaningful or not ?</strong> This is done using the following algorithm :</p>

<ol>
<li><p>If the object has a <code>__nonzero__</code> special method (as do numeric built-ins, <code>int</code> and <code>float</code>), it calls this method. It must either return a <code>bool</code> value which is then directly used, or an <code>int</code> value that is considered <code>False</code> if equal to zero.</p></li>
<li><p>Otherwise, if the object has a <code>__len__</code> special method (as do container built-ins, <code>list</code>, <code>dict</code>, <code>set</code>, <code>tuple</code>, ...), it calls this method, considering a container <code>False</code> if it is empty (length is zero).</p></li>
<li><p>Otherwise, the object is considered <code>True</code> unless it is <code>None</code> in which case, it is considered <code>False</code>.</p></li>
</ol>

<p>In the second test, the object is compared for equality to <code>None</code>. Here, <strong>we are asking the object, ""Are you equal to this other value?""</strong> This is done using the following algorithm :</p>

<ol>
<li><p>If the object has a <code>__eq__</code> method, it is called, and the return value is then converted to a <code>bool</code>value and used to determine the outcome of the <code>if</code>.</p></li>
<li><p>Otherwise, if the object has a <code>__cmp__</code> method, it is called. This function must return an <code>int</code> indicating the order of the two object (<code>-1</code> if <code>self &lt; other</code>, <code>0</code> if <code>self == other</code>, <code>+1</code> if <code>self &gt; other</code>).</p></li>
<li><p>Otherwise, the object are compared for identity (ie. they are reference to the same object, as can be tested by the <code>is</code> operator).</p></li>
</ol>

<p>There is another test possible using the <code>is</code> operator. <strong>We would be asking the object, ""Are you this particular object?""</strong></p>

<p>Generally, I would recommend to use the first test with non-numerical values, to use the test for equality when you want to compare objects of the same nature (two strings, two numbers, ...) and to check for identity only when using sentinel values (<code>None</code> meaning not initialized for a member field for exemple, or when using the <code>getattr</code> or the <code>__getitem__</code> methods).</p>

<p>To summarize, we have :</p>

<pre><code>&gt;&gt;&gt; class A(object):
...    def __repr__(self):
...        return 'A()'
...    def __nonzero__(self):
...        return False

&gt;&gt;&gt; class B(object):
...    def __repr__(self):
...        return 'B()'
...    def __len__(self):
...        return 0

&gt;&gt;&gt; class C(object):
...    def __repr__(self):
...        return 'C()'
...    def __cmp__(self, other):
...        return 0

&gt;&gt;&gt; class D(object):
...    def __repr__(self):
...        return 'D()'
...    def __eq__(self, other):
...        return True

&gt;&gt;&gt; for obj in ['', (), [], {}, 0, 0., A(), B(), C(), D(), None]:
...     print '%4s: bool(obj) -&gt; %5s, obj == None -&gt; %5s, obj is None -&gt; %5s' % \
...         (repr(obj), bool(obj), obj == None, obj is None)
  '': bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
  (): bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
  []: bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
  {}: bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
   0: bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
 0.0: bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
 A(): bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
 B(): bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
 C(): bool(obj) -&gt;  True, obj == None -&gt;  True, obj is None -&gt; False
 D(): bool(obj) -&gt;  True, obj == None -&gt;  True, obj is None -&gt; False
None: bool(obj) -&gt; False, obj == None -&gt;  True, obj is None -&gt;  True
</code></pre>
"
279597,"<p>You can add attributes to a function, and use it as a static variable.</p>

<pre><code>def myfunc():
  myfunc.counter += 1
  print myfunc.counter

# attribute must be initialized
myfunc.counter = 0
</code></pre>

<p>Alternatively, if you don't want to setup the variable outside the function, you can use <code>hasattr()</code> to avoid an <code>AttributeError</code> exception:</p>

<pre><code>def myfunc():
  if not hasattr(myfunc, ""counter""):
     myfunc.counter = 0  # it doesn't exist yet, so initialize it
  myfunc.counter += 1
</code></pre>

<p>Anyway static variables are rather rare, and you should find a better place for this variable, most likely inside a class.</p>
"
79877,"<p>First, parse the string into a naive datetime object. This is an instance of <code>datetime.datetime</code> with no attached timezone information. See documentation for <code>datetime.strptime</code> for information on parsing the date string.</p>

<p>Use the <a href=""http://pytz.sourceforge.net/""><code>pytz</code></a> module, which comes with a full list of time zones + UTC. Figure out what the local timezone is, construct a timezone object from it, and manipulate and attach it to the naive datetime.</p>

<p>Finally, use <code>datetime.astimezone()</code> method to convert the datetime to UTC.</p>

<p>Source code, using local timezone ""America/Los_Angeles"", for the string ""2001-2-3 10:11:12"":</p>

<pre><code>import pytz, datetime
local = pytz.timezone (""America/Los_Angeles"")
naive = datetime.datetime.strptime (""2001-2-3 10:11:12"", ""%Y-%m-%d %H:%M:%S"")
local_dt = local.localize(naive, is_dst=None)
utc_dt = local_dt.astimezone (pytz.utc)
</code></pre>

<p>From there, you can use the <code>strftime()</code> method to format the UTC datetime as needed:</p>

<pre><code>utc_dt.strftime (""%Y-%m-%d %H:%M:%S"")
</code></pre>
"
269806,"<p>Running <code>python -v</code> from the command line should tell you what is being imported and from where.  This works for me on Windows and Mac OS X.</p>

<pre><code>C:\&gt;python -v
# installing zipimport hook
import zipimport # builtin
# installed zipimport hook
# C:\Python24\lib\site.pyc has bad mtime
import site # from C:\Python24\lib\site.py
# wrote C:\Python24\lib\site.pyc
# C:\Python24\lib\os.pyc has bad mtime
import os # from C:\Python24\lib\os.py
# wrote C:\Python24\lib\os.pyc
import nt # builtin
# C:\Python24\lib\ntpath.pyc has bad mtime
...
</code></pre>

<p>I'm not sure what those bad mtime's are on my install!</p>
"
49492,"<p>This probably won't be a popular answer, but you almost certainly do not want to do this.  If you want a copy that's a merge, then use copy (or <a href=""https://docs.python.org/2/library/copy.html"">deepcopy</a>, depending on what you want) and then update.  The two lines of code are much more readable - more Pythonic - than the single line creation with .items() + .items().  Explicit is better than implicit.</p>

<p>In addition, when you use .items() (pre Python 3.0), you're creating a new list that contains the items from the dict.  If your dictionaries are large, then that is quite a lot of overhead (two large lists that will be thrown away as soon as the merged dict is created).  update() can work more efficiently, because it can run through the second dict item-by-item.</p>

<p>In terms of <a href=""https://docs.python.org/2/library/timeit.html"">time</a>:</p>

<pre><code>&gt;&gt;&gt; timeit.Timer(""dict(x, **y)"", ""x = dict(zip(range(1000), range(1000)))\ny=dict(zip(range(1000,2000), range(1000,2000)))"").timeit(100000)
15.52571702003479
&gt;&gt;&gt; timeit.Timer(""temp = x.copy()\ntemp.update(y)"", ""x = dict(zip(range(1000), range(1000)))\ny=dict(zip(range(1000,2000), range(1000,2000)))"").timeit(100000)
15.694622993469238
&gt;&gt;&gt; timeit.Timer(""dict(x.items() + y.items())"", ""x = dict(zip(range(1000), range(1000)))\ny=dict(zip(range(1000,2000), range(1000,2000)))"").timeit(100000)
41.484580039978027
</code></pre>

<p>IMO the tiny slowdown between the first two is worth it for the readability.  In addition, keyword arguments for dictionary creation was only added in Python 2.3, whereas copy() and update() will work in older versions.</p>
"
235764,"<p>The functions defined in the loop keep accessing the same variable <code>i</code> while its value changes. At the end of the loop, all the functions point to the same variable, which is holding the last value in the loop: the effect is what reported in the example.</p>

<p>In order to evaluate <code>i</code> and use its value, a common pattern is to set it as a parameter default: parameter defaults are evaluated when the <code>def</code> statement is executed, and thus the value of the loop variable is frozen.</p>

<p>The following works as expected:</p>

<pre><code>flist = []

for i in xrange(3):
    def func(x, i=i): # the *value* of i is copied in func() environment
        return x * i
    flist.append(func)

for f in flist:
    print f(2)
</code></pre>
"
320951,"<p>See the <a href=""https://docs.python.org/2/library/locale.html"">locale</a> module.</p>

<p>This does currency (and date) formatting.</p>

<pre><code>&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.setlocale( locale.LC_ALL, '' )
'English_United States.1252'
&gt;&gt;&gt; locale.currency( 188518982.18 )
'$188518982.18'
&gt;&gt;&gt; locale.currency( 188518982.18, grouping=True )
'$188,518,982.18'
</code></pre>
"
189580,"<pre><code>import urllib, urllib2, cookielib

username = 'myuser'
password = 'mypassword'

cj = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
login_data = urllib.urlencode({'username' : username, 'j_password' : password})
opener.open('http://www.example.com/login.php', login_data)
resp = opener.open('http://www.example.com/hiddenpage.php')
print resp.read()
</code></pre>

<p><code>resp.read()</code> is the straight html of the page you want to open, and you can use <code>opener</code> to view any page using your session cookie.</p>
"
298793,"<p>The <code>{{variable}}</code> is substituted directly into the HTML. Do a view source; it isn't a ""variable"" or anything like it. It's just rendered text.</p>

<p>Having said that, you can put this kind of substitution into your JavaScript.</p>

<pre class=""lang-html prettyprint-override""><code>&lt;script type=""text/javascript""&gt; 
   var a = ""{{someDjangoVariable}}"";
&lt;/script&gt;
</code></pre>

<p>This gives you ""dynamic"" javascript.</p>
"
68712,"<p>In general, you might expect tuples to be slightly faster. However you should definitely test your specific case (if the difference might impact the performance of your program --  remember ""premature optimization is the root of all evil"").</p>

<p>Python makes this very easy: <a href=""https://docs.python.org/2/library/timeit.html"">timeit</a> is your friend.</p>

<pre><code>$ python -m timeit ""x=(1,2,3,4,5,6,7,8)""
10000000 loops, best of 3: 0.0388 usec per loop

$ python -m timeit ""x=[1,2,3,4,5,6,7,8]""
1000000 loops, best of 3: 0.363 usec per loop
</code></pre>

<p>and...</p>

<pre><code>$ python -m timeit -s ""x=(1,2,3,4,5,6,7,8)"" ""y=x[3]""
10000000 loops, best of 3: 0.0938 usec per loop

$ python -m timeit -s ""x=[1,2,3,4,5,6,7,8]"" ""y=x[3]""
10000000 loops, best of 3: 0.0649 usec per loop
</code></pre>

<p>So in this case, instantiation is almost an order of magnitude faster for the tuple, but item access is actually somewhat faster for the list! So if you're creating a few tuples and accessing them many many times, it may actually be faster to use lists instead.</p>

<p>Of course if you want to <em>change</em> an item, the list will definitely be faster since you'd need to create an entire new tuple to change one item of it (since tuples are immutable).</p>
"
200027,"<p>Underscore.</p>

<pre><code>&gt;&gt;&gt; 5+5
10
&gt;&gt;&gt; _
10
&gt;&gt;&gt; _ + 5
15
&gt;&gt;&gt; _
15
</code></pre>
"
112980,"<p>You should always use <code>open()</code>.</p>

<p>As the <a href=""http://docs.python.org/2/library/functions.html#file"" rel=""nofollow"" title=""BuiltinFuncs Doc"">documentation</a> states:</p>

<blockquote>
  <p>When opening a file, it's preferable
  to use open() instead of invoking this
  constructor directly. file is more
  suited to type testing (for example,
  writing ""isinstance(f, file)"").</p>
</blockquote>

<p>Also, <code>file()</code> <a href=""http://docs.python.org/release/3.0/whatsnew/3.0.html#builtins"" rel=""nofollow"">has been removed</a> since Python 3.0.</p>
"
60236,"<p>In addition to the dictionary methods (which I really like, BTW), you can also use if-elif-else to obtain the switch/case/default functionality:</p>

<pre><code>if x == 'a':
    # Do the thing
elif x == 'b':
    # Do the other thing
if x in 'bc':
    # Fall-through by not using elif, but now the default case includes case 'a'!
elif x in 'xyz':
    # Do yet another thing
else:
    # Do the default
</code></pre>

<p>This of course is not identical to switch/case - you cannot have fall-through as easily as leaving off the break; statement, but you can have a more complicated test.  Its formatting is nicer than a series of nested ifs, even though functionally that's what it is closer to.</p>
"
209562,"<p>Any shell has several sets of features.</p>

<ul>
<li><p>The Essential Linux/Unix commands.  All of these are available through the <a href=""https://docs.python.org/3/library/subprocess.html"">subprocess</a> library.  This isn't always the best first choice for doing <em>all</em> external commands.  Look also at <a href=""https://docs.python.org/3/library/shutil.html"">shutil</a> for some commands that are separate Linux commands, but you could probably implement directly in your Python scripts.  Another huge batch of Linux commands are in the <a href=""https://docs.python.org/3/library/os.html"">os</a> library; you can do these more simply in Python.</p>

<p>And -- bonus! -- more quickly.  Each separate Linux command in the shell (with a few exceptions) forks a subprocess.  By using Python <code>shutil</code> and <code>os</code> modules, you don't fork a subprocess.</p></li>
<li><p>The shell environment features.  This includes stuff that sets a command's environment (current directory and environment variables and what-not).  You can easily manage this from Python directly.</p></li>
<li><p>The shell programming features.  This is all the process status code checking, the various logic commands (if, while, for, etc.) the test command and all of it's relatives.  The function definition stuff.  This is all much, much easier in Python.  This is one of the huge victories in getting rid of bash and doing it in Python.</p></li>
<li><p>Interaction features.  This includes command history and what-not.  You don't need this for writing shell scripts.  This is only for human interaction, and not for script-writing.</p></li>
<li><p>The shell file management features.  This includes redirection and pipelines.  This is trickier.  Much of this can be done with subprocess.  But some things that are easy in the shell are unpleasant in Python.  Specifically stuff like <code>(a | b; c ) | something &gt;result</code>.  This runs two processes in parallel (with output of <code>a</code> as input to <code>b</code>), followed by a third process.  The output from that sequence is run in parallel with <code>something</code> and the output is collected into a file named <code>result</code>.  That's just complex to express in any other language.</p></li>
</ul>

<p>Specific programs (awk, sed, grep, etc.) can often be rewritten as Python modules.  Don't go overboard.  Replace what you need and evolve your ""grep"" module.  Don't start out writing a Python module that replaces ""grep"".</p>

<p>The best thing is that you can do this in steps.</p>

<ol>
<li>Replace AWK and PERL with Python.  Leave everything else alone.</li>
<li>Look at replacing GREP with Python.  This can be a bit more complex, but your version of GREP can be tailored to your processing needs.</li>
<li>Look at replacing FIND with Python loops that use <code>os.walk</code>.  This is a big win because you don't spawn as many processes.</li>
<li>Look at replacing common shell logic (loops, decisions, etc.) with Python scripts.</li>
</ol>
"
114831,"<p>Yes, it is a hash mapping or hash table. You can read a description of python's dict implementation, as written by Tim Peters, <a href=""http://mail.python.org/pipermail/python-list/2000-March/048085.html"">here</a>.</p>

<p>That's why you can't use something 'not hashable' as a dict key, like a list:</p>

<pre><code>&gt;&gt;&gt; a = {}
&gt;&gt;&gt; b = ['some', 'list']
&gt;&gt;&gt; hash(b)
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: list objects are unhashable
&gt;&gt;&gt; a[b] = 'some'
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: list objects are unhashable
</code></pre>

<p>You can <a href=""http://en.wikipedia.org/wiki/Hash_table"">read more about hash tables</a> or <a href=""https://hg.python.org/cpython/file/10eea15880db/Objects/dictobject.c"">check how it has been implemented in python</a> and <a href=""https://hg.python.org/cpython/file/10eea15880db/Objects/dictnotes.txt"">why it is implemented that way</a>.</p>
"
186236,"<p>Try the shutil module</p>

<pre><code>import shutil
shutil.rmtree('/path/to/folder')
</code></pre>

<blockquote>
  <p>Description: <code>shutil.rmtree(path,
  ignore_errors=False, onerror=None)</code></p>
  
  <p>Docstring: Recursively delete a
  directory tree.</p>
  
  <p>If <code>ignore_errors</code> is set, errors are
  ignored; otherwise, if <code>onerror</code> is set,
  it is called to handle the error with
  arguments <code>(func, path, exc_info)</code> where
  <code>func</code> is <code>os.listdir</code>, <code>os.remove</code>, or
  <code>os.rmdir</code>; path is the argument to that
  function that caused it to fail; and
  <code>exc_info</code> is a tuple returned by
  <code>sys.exc_info()</code>. If <code>ignore_errors</code> is
  false and <code>onerror</code> is <code>None</code>, an
  exception is raised.</p>
</blockquote>
"
233835,"<p>Python is actually behaving as defined. <b>Three separate functions</b> are created, but  they each have the <b>closure of the environment they're defined in</b> - in this case, the global environment (or the outer function's environment if the loop is placed inside another function). This is exactly the problem, though - in this environment, <b>i is mutated</b>, and the closures all <b>refer to the same i</b>.</p>

<p>Here is the best solution I can come up with - create a function creater and invoke <i>that</i> instead. This will force <b>different environments</b> for each of the functions created, with a <b>different i</b> in each one.</p>

<pre><code>flist = []

for i in xrange(3):
    def funcC(j):
        def func(x): return x * j
        return func
    flist.append(funcC(i))

for f in flist:
    print f(2)
</code></pre>

<p>This is what happens when you mix side effects and functional programming. </p>
"
232853,"<p>There's one extra thing to mention: a function that yields doesn't actually have to terminate. I've written code like this:</p>

<pre><code>def fib():
    last, cur = 0, 1
    while True: 
        yield cur
        last, cur = cur, last + cur
</code></pre>

<p>Then I can use it in other code like this:</p>

<pre><code>for f in fib():
    if some_condition: break
    coolfuncs(f);
</code></pre>

<p>It really helps simplify some problems, and makes some things easier to work with. </p>
"
129610,"<p>The code in my previous answer can be simplified to:</p>

<pre><code>def test_afunction_throws_exception(self):
    self.assertRaises(ExpectedException, afunction)
</code></pre>

<p>And if afunction takes arguments, just pass them into assertRaises like this:</p>

<pre><code>def test_afunction_throws_exception(self):
    self.assertRaises(ExpectedException, afunction, arg1, arg2)
</code></pre>
"
113662,"<pre><code>&gt;&gt;&gt; list(""Word to Split"")
['W', 'o', 'r', 'd', ' ', 't', 'o', ' ', 'S', 'p', 'l', 'i', 't']
</code></pre>
"
53200,"<p>From <a href=""http://www.python.org/dev/peps/pep-0008/"">Style Guide for Python Code</a>:</p>

<blockquote>
  <p><strong>The preferred way of wrapping long lines is by using Python's implied line continuation inside parentheses, brackets and braces.</strong> Long lines can be broken over multiple lines by wrapping expressions in parentheses. These should be used in preference to using a backslash for line continuation.</p>
  
  <p>Backslashes may still be appropriate at times. For example, long, multiple with-statements cannot use implicit continuation, so backslashes are acceptable:</p>

<pre><code>with open('/path/to/some/file/you/want/to/read') as file_1, \
        open('/path/to/some/file/being/written', 'w') as file_2:
    file_2.write(file_1.read())
</code></pre>
  
  <p>Another such case is with assert statements.</p>
  
  <p>Make sure to indent the continued line appropriately. The preferred place to break around a binary operator is <strong>after</strong> the operator, not before it. Some examples:</p>

<pre><code>class Rectangle(Blob):

    def __init__(self, width, height,
                 color='black', emphasis=None, highlight=0):
        if (width == 0 and height == 0 and
                color == 'red' and emphasis == 'strong' or
                highlight &gt; 100):
            raise ValueError(""sorry, you lose"")
        if width == 0 and height == 0 and (color == 'red' or
                                           emphasis is None):
            raise ValueError(""I don't think so -- values are %s, %s"" %
                             (width, height))
        Blob.__init__(self, width, height,
                      color, emphasis, highlight)
</code></pre>
</blockquote>

<p>EDIT: PEP8 now recommends the <em>opposite convention</em> (for breaking at binary operations) used by Mathematicians and their publishers to improve readability. </p>

<p>Donald Knuth's style of breaking <strong>before</strong> a binary operator aligns operators vertically, thus reducing the eye's workload when determining which items are added and subtracted.</p>

<p>From <a href=""http://legacy.python.org/dev/peps/pep-0008/#should-a-line-break-before-or-after-a-binary-operator"">PEP8: Should a line break before or after a binary operator?</a>:</p>

<blockquote>
  <p>Donald Knuth explains the traditional rule in his Computers and Typesetting series: ""Although formulas within a paragraph always break after binary operations and relations, displayed formulas always break before binary operations""[3].</p>
  
  <p>Following the tradition from mathematics usually results in more readable code:</p>

<pre><code># Yes: easy to match operators with operands
income = (gross_wages
          + taxable_interest
          + (dividends - qualified_dividends)
          - ira_deduction
          - student_loan_interest)
</code></pre>
  
  <p>In Python code, it is permissible to break before or after a binary operator, as long as the convention is consistent locally. For new code Knuth's style is suggested.</p>
</blockquote>

<p>[3]: Donald Knuth's The TeXBook, pages 195 and 196</p>
"
147114,"<p>The suggestion to install a signal handler is a good one, and I use it a lot.  For example, <a href=""http://bazaar-vcs.org/"">bzr</a> by default installs a SIGQUIT handler that invokes <code>pdb.set_trace()</code> to immediately drop you into a <a href=""http://docs.python.org/lib/module-pdb.html"">pdb</a> prompt.  (See the <a href=""https://bazaar.launchpad.net/~bzr-pqm/bzr/bzr.dev/view/head:/bzrlib/breakin.py"">bzrlib.breakin</a> module's source for the exact details.)  With pdb you can not only get the current stack trace but also inspect variables, etc.  </p>

<p>However, sometimes I need to debug a process that I didn't have the foresight to install the signal handler in.  On linux, you can attach gdb to the process and get a python stack trace with some gdb macros.  Put <a href=""http://svn.python.org/projects/python/trunk/Misc/gdbinit"">http://svn.python.org/projects/python/trunk/Misc/gdbinit</a> in <code>~/.gdbinit</code>, then:</p>

<ul>
<li>Attach gdb: <code>gdb -p</code> <em><code>PID</code></em></li>
<li>Get the python stack trace: <code>pystack</code></li>
</ul>

<p>It's not totally reliable unfortunately, but it works most of the time.</p>

<p>Finally, attaching <code>strace</code> can often give you a good idea what a process is doing.</p>
"
22721,"<pre class=""lang-py prettyprint-override""><code>import urllib2
mp3file = urllib2.urlopen(""http://www.example.com/songs/mp3.mp3"")
with open('test.mp3','wb') as output:
  output.write(mp3file.read())
</code></pre>

<p>The <code>wb</code> in <code>open('test.mp3','wb')</code> opens a file (and erases any existing file) in binary mode so you can save data with it instead of just text.</p>
"
98178,"<p>The solution is simple. It's actually <a href=""http://docs.djangoproject.com/en/dev/ref/templates/api/#configuring-the-template-system-in-standalone-mode"">well documented</a>, but not too easy to find. (I had to dig around -- it didn't come up when I tried a few different Google searches.)</p>

<p>The following code works:</p>

<pre><code>&gt;&gt;&gt; from django.template import Template, Context
&gt;&gt;&gt; from django.conf import settings
&gt;&gt;&gt; settings.configure()
&gt;&gt;&gt; t = Template('My name is {{ my_name }}.')
&gt;&gt;&gt; c = Context({'my_name': 'Daryl Spitzer'})
&gt;&gt;&gt; t.render(c)
u'My name is Daryl Spitzer.'
</code></pre>

<p>See the Django documentation (linked above) for a description of some of the settings you may want to define (as keyword arguments to configure).</p>
"
70555,"<p>From <a href=""http://www.faqs.org/docs/diveintopython/fileinfo_private.html"">http://www.faqs.org/docs/diveintopython/fileinfo_private.html</a></p>

<blockquote>
  <p>Strictly speaking, private methods are
  accessible outside their class, just
  not easily accessible. Nothing in
  Python is truly private; internally,
  the names of private methods and
  attributes are mangled and unmangled
  on the fly to make them seem
  inaccessible by their given names. You
  can access the __parse method of the
  MP3FileInfo class by the name
  _MP3FileInfo__parse. Acknowledge that this is interesting, then promise to
  never, ever do it in real code.
  Private methods are private for a
  reason, but like many other things in
  Python, their privateness is
  ultimately a matter of convention, not
  force.</p>
</blockquote>
"
121452,"<p>The <a href=""https://docs.python.org/2/library/functions.html#id"">Python manual</a> has this to say about id():</p>

<blockquote>
  <p>Return the ``identity'' of an object.
  This is an integer (or long integer)
  which is guaranteed to be unique and
  constant for this object during its
  lifetime. Two objects with
  non-overlapping lifetimes may have the
  same id() value. (Implementation note:
  this is the address of the object.)</p>
</blockquote>

<p>So in CPython, this will be the address of the object. No such guarantee for any other Python interpreter, though.</p>

<p>Note that if you're writing a C extension, you have full access to the internals of the Python interpreter, including access to the addresses of objects directly.</p>
"
228981,"<p>The <code>Cursor.execute()</code> method expects a sequence as second parameter. You are supplying a string which happens to be 8 characters long.</p>

<p>Use the following form instead:</p>

<pre><code>self.cursor.execute(""SELECT weight FROM Equipment WHERE name = ?"", [item])
</code></pre>

<p>Python library reference 13.13.3: sqlite3 <a href=""http://www.python.org/doc/2.5.2/lib/sqlite3-Cursor-Objects.html"">Cursor Objects</a>.</p>
"
275659,"<p>And I would say the ""pythonic"" way to get lines without trailing newline characters is splitlines().</p>

<pre><code>&gt;&gt;&gt; text = ""line 1\nline 2\r\nline 3\nline 4""
&gt;&gt;&gt; text.splitlines()
['line 1', 'line 2', 'line 3', 'line 4']
</code></pre>
"
227889,"<p>Note that ord() doesn't give you the ASCII value per se; it gives you the numeric value of the character in whatever encoding it's in. Therefore the result of ord('Ã¤') can be 228 if you're using Latin-1, or it can raise a TypeError if you're using UTF-8. It can even return the Unicode codepoint instead if you pass it a unicode:</p>

<pre><code>&gt;&gt;&gt; ord(u'ã')
12354
</code></pre>
"
282238,"<p>For some needs, a <a href=""https://docs.python.org/library/collections.html#collections.deque"">deque</a> may also be useful. You can add and remove items on both ends of a deque at O(1) cost.</p>

<pre><code>from collections import deque
d = deque([1,2,3,4])

print d
for x in d:
    print x
print d.pop(), d
</code></pre>
"
135669,"<p>No, they both have their uses:</p>

<p>Use <code>xrange()</code> when iterating, as it saves memory.  Say:</p>

<pre><code>for x in xrange(1, one_zillion):
</code></pre>

<p>rather than:</p>

<pre><code>for x in range(1, one_zillion):
</code></pre>

<p>On the other hand, use <code>range()</code> if you actually want a list of numbers.</p>

<pre><code>multiples_of_seven = range(7,100,7)
print ""Multiples of seven &lt; 100: "", multiples_of_seven
</code></pre>
"
1871,"<p>Dang -- lbrandy beat me to the punch, but that doesn't mean I can't provide you with the system results for Vista!</p>

<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.name
'nt'
&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.system()
'Windows'
&gt;&gt;&gt; platform.release()
'Vista'
</code></pre>
"
39110,"<p>I guess something like this should do it. It basically writes the content to a new file and replaces the old file with the new file:</p>

<pre><code>from tempfile import mkstemp
from shutil import move
from os import remove, close

def replace(file_path, pattern, subst):
    #Create temp file
    fh, abs_path = mkstemp()
    with open(abs_path,'w') as new_file:
        with open(file_path) as old_file:
            for line in old_file:
                new_file.write(line.replace(pattern, subst))
    close(fh)
    #Remove original file
    remove(file_path)
    #Move new file
    move(abs_path, file_path)
</code></pre>
"
229219,"<p>Don't use os.walk.</p>

<p>Example:</p>

<pre><code>import os

root = ""C:\\""
for item in os.listdir(root):
    if os.path.isfile(os.path.join(root, item)):
        print item
</code></pre>
"
138260,"<p>It's probably best to use the <a href=""http://www.pythonware.com/products/pil/"">Python Image Library</a> to do this which I'm afraid is a separate download.</p>

<p>The easiest way to do what you want is via the <a href=""http://effbot.org/imagingbook/image.htm"">load() method on the Image object</a> which returns a pixel access object which you can manipulate like an array:</p>

<pre><code>from PIL import Image
im = Image.open(""dead_parrot.jpg"") #Can be many different formats.
pix = im.load()
print im.size #Get the width and hight of the image for iterating over
print pix[x,y] #Get the RGBA Value of the a pixel of an image
pix[x,y] = value # Set the RGBA Value of the image (tuple)
</code></pre>

<p>Alternatively, look at <a href=""http://effbot.org/imagingbook/imagedraw.htm"">ImageDraw</a> which gives a much richer API for creating images.</p>
"
301298,"<p>As mentioned the <a href=""http://docs.python.org/library/imp.html"" rel=""nofollow"">imp</a> module provides you loading functions:</p>

<pre><code>imp.load_source(name, path)
imp.load_compiled(name, path)
</code></pre>

<p>I've used these before to perform something similar.  </p>

<p>In my case I defined a specific class with defined methods that were required.
Once I loaded the module I would check if the class was in the module, and then create an instance of that class, something like this:</p>

<pre><code>import imp
import os

def load_from_file(filepath):
    class_inst = None
    expected_class = 'MyClass'

    mod_name,file_ext = os.path.splitext(os.path.split(filepath)[-1])

    if file_ext.lower() == '.py':
        py_mod = imp.load_source(mod_name, filepath)

    elif file_ext.lower() == '.pyc':
        py_mod = imp.load_compiled(mod_name, filepath)

    if hasattr(py_mod, expected_class):
        class_inst = getattr(py_mod, expected_class)()

    return class_inst
</code></pre>
"
27974,"<p><a href=""http://xmlsoft.org/python.html"">libxml2</a> has a number of advantages:</p>

<ol>
<li>Compliance to the <a href=""http://www.w3.org/TR/xpath"">spec</a></li>
<li>Active development and a community participation </li>
<li>Speed. This is really a python wrapper around a C implementation. </li>
<li>Ubiquity. The libxml2 library is pervasive and thus well tested.</li>
</ol>

<p>Downsides include:</p>

<ol>
<li>Compliance to the <a href=""http://www.w3.org/TR/xpath"">spec</a>. It's strict. Things like default namespace handling are easier in other libraries.</li>
<li>Use of native code. This can be a pain depending on your how your application is distributed / deployed. RPMs are available that ease some of this pain.</li>
<li>Manual resource handling. Note in the sample below the calls to freeDoc() and xpathFreeContext(). This is not very Pythonic.</li>
</ol>

<p>If you are doing simple path selection, stick with <a href=""http://effbot.org/zone/element-xpath.htm"">ElementTree</a> ( which is included in Python 2.5 ). If you need full spec compliance or raw speed and can cope with the distribution of native code, go with libxml2.</p>

<p><strong>Sample of libxml2 XPath Use</strong></p>

<hr>

<pre><code>import libxml2

doc = libxml2.parseFile(""tst.xml"")
ctxt = doc.xpathNewContext()
res = ctxt.xpathEval(""//*"")
if len(res) != 2:
    print ""xpath query: wrong node set size""
    sys.exit(1)
if res[0].name != ""doc"" or res[1].name != ""foo"":
    print ""xpath query: wrong node set value""
    sys.exit(1)
doc.freeDoc()
ctxt.xpathFreeContext()
</code></pre>

<p><strong>Sample of ElementTree XPath Use</strong></p>

<hr>

<pre><code>from elementtree.ElementTree import ElementTree
mydoc = ElementTree(file='tst.xml')
for e in mydoc.findall('/foo/bar'):
    print e.get('title').text</code></pre>

<hr>
"
154156,"<p>The <strong>most</strong> Pythonic way to check the type of an object is... not to check it.</p>

<p>Since Python encourages <a href=""http://wikipedia.org/wiki/Duck_typing"">Duck Typing</a>, you should just try to use the object's methods the way you want to use them.  So if your function is looking for a writable file object, <em>don't</em> check that it's a subclass of <code>file</code>, just try to use its <code>.write()</code> method!</p>

<p>Of course, sometimes these nice abstractions break down and <code>isinstance(obj, cls)</code> is what you need.  But use sparingly.</p>
"
38516,"<pre><code>def f(in_str):
    out_str = in_str.upper()
    return True, out_str # Creates tuple automatically

succeeded, b = f(""a"") # Automatic tuple unpacking
</code></pre>
"
22624,"<p>Formatting in Python is done via the <a href=""http://docs.python.org/2/library/stdtypes.html#string-formatting"">string formatting (<code>%</code>) operator</a>:</p>

<pre><code>""%02d:%02d:%02d"" % (hours, minutes, seconds)
</code></pre>

<p>/Edit: There's also <a href=""https://docs.python.org/2/library/time.html#time.strftime"">strftime</a>.</p>
"
309783,"<p>First Option - Online Installation (i.e. remaining connected to the Internet during the entire installation process):</p>

<ol>
<li>Download <a href=""http://pypi.python.org/pypi/setuptools#files"">setuptools-0.6c9.tar.gz</a></li>
<li>Use <a href=""http://www.7-zip.org/"">7-zip</a> to extract it to a folder(directory) outside your Windows Python installation folder</li>
<li>Go the folder (refer step 2) and run ez_setup.py from the corresponding dos (command) prompt</li>
<li>Ensure that your PATH includes the appropriate C:\Python2X\Scripts directory</li>
</ol>

<p>Second Option:</p>

<ol>
<li>Download <a href=""http://pypi.python.org/pypi/setuptools#files"">setuptools-0.6c9.tar.gz</a></li>
<li>Download <a href=""http://pypi.python.org/packages/2.6/s/setuptools/setuptools-0.6c9-py2.6.egg#md5=ca37b1ff16fa2ede6e19383e7b59245a"">setuptools-0.6c9-py2.6.egg</a> to a folder(directory) outside your Windows Python installation folder</li>
<li>Use <a href=""http://www.7-zip.org/"">7-zip</a> to extract ez_setup.py in the same folder as <a href=""http://pypi.python.org/packages/2.6/s/setuptools/setuptools-0.6c9-py2.6.egg#md5=ca37b1ff16fa2ede6e19383e7b59245a"">setuptools-0.6c9-py2.6.egg</a></li>
<li>Go to the corresponding dos prompt and run python ez_setup.py setuptools-0.6c9-py2.6.egg from the command prompt</li>
<li>Ensure that your PATH includes the appropriate C:\Python2X\Scripts directory</li>
</ol>

<p>Third Option (assuming that you have Visual Studio 2005 or MinGW on your machine)</p>

<ol>
<li>Download <a href=""http://pypi.python.org/pypi/setuptools#files"">setuptools-0.6c9.tar.gz</a></li>
<li>Use <a href=""http://www.7-zip.org/"">7-zip</a> to extract it to a folder(directory) outside your Windows Python installation folder</li>
<li>Go the folder (refer step 2) and run python setup.py install from the corresponding dos (command) prompt</li>
</ol>

<p>Please provide feedback.</p>
"
62527,"<p>For a file <code>module.py</code>, the unit test should normally be called <code>test_module.py</code>, following Pythonic naming conventions.</p>

<p>There are several commonly accepted places to put <code>test_module.py</code>:</p>

<ol>
<li>In the same directory as <code>module.py</code>.</li>
<li>In <code>../tests/test_module.py</code> (at the same level as the code directory).</li>
<li>In <code>tests/test_module.py</code> (one level under the code directory).</li>
</ol>

<p>I prefer #1 for its simplicity of finding the tests and importing them. Whatever build system you're using can easily be configured to run files starting with <code>test_</code>. Actually, the <a href=""https://docs.python.org/library/unittest.html#test-discovery"">default <code>unittest</code> pattern used for test discovery is <code>test*.py</code></a>.</p>
"
216980,"<p>It basically means that the object implements the <code>__getitem__()</code> method. In other words, it describes objects that are ""containers"", meaning they contain other objects. This includes lists, tuples, and dictionaries.</p>
"
130665,"<p>Use the <code>datetime.timedelta</code> class:</p>

<pre><code>&gt;&gt;&gt; from datetime import datetime, timedelta
&gt;&gt;&gt; then = datetime.now() - timedelta(hours = 2)
&gt;&gt;&gt; now = datetime.now()
&gt;&gt;&gt; (now - then) &gt; timedelta(days = 1)
False
&gt;&gt;&gt; (now - then) &gt; timedelta(hours = 1)
True
</code></pre>

<p>Your example could be written as:</p>

<pre><code>if (datetime.now() - self.timestamp) &gt; timedelta(seconds = 100)
</code></pre>

<p>or</p>

<pre><code>if (datetime.now() - self.timestamp) &gt; timedelta(minutes = 100)
</code></pre>
"
142601,"<p>If you need a global cross-module variable maybe just simple global module-level variable will suffice. </p>

<p>a.py:</p>

<pre><code>var = 1
</code></pre>

<p>b.py:</p>

<pre><code>import a
print a.var
import c
print a.var
</code></pre>

<p>c.py:</p>

<pre><code>import a
a.var = 2
</code></pre>

<p>Test:</p>

<pre><code>$ python b.py
# -&gt; 1 2
</code></pre>

<p>Real-world example: <a href=""https://github.com/django/django/blob/master/django/conf/global_settings.py"">Django's global_settings.py</a> (though in Django apps settings are used by importing the <em>object</em> <a href=""http://docs.djangoproject.com/en/dev/topics/settings/#using-settings-in-python-code""><code>django.conf.settings</code></a>).</p>
"
317421,"<p>It should just be</p>

<pre><code>name[0].firstChild.nodeValue
</code></pre>
"
207128,"<p>Beyond performance considerations, there is a significant <em>semantic</em> difference.  In the class attribute case, there is just one object referred to.  In the instance-attribute-set-at-instantiation, there can be multiple objects referred to.  For instance</p>

<pre><code>&gt;&gt;&gt; class A: foo = []
&gt;&gt;&gt; a, b = A(), A()
&gt;&gt;&gt; a.foo.append(5)
&gt;&gt;&gt; b.foo
[5]
&gt;&gt;&gt; class A:
...  def __init__(self): self.foo = []
&gt;&gt;&gt; a, b = A(), A()
&gt;&gt;&gt; a.foo.append(5)
&gt;&gt;&gt; b.foo    
[]
</code></pre>
"
275401,"<p>The canonical way to strip end-of-line (EOL) characters is to use the string rstrip() method removing any trailing \r or \n.  Here are examples for Mac, Windows, and Unix EOL characters.</p>

<pre><code>&gt;&gt;&gt; 'Mac EOL\r'.rstrip('\r\n')
'Mac EOL'
&gt;&gt;&gt; 'Windows EOL\r\n'.rstrip('\r\n')
'Windows EOL'
&gt;&gt;&gt; 'Unix EOL\n'.rstrip('\r\n')
'Unix EOL'
</code></pre>

<p>Using '\r\n' as the parameter to rstrip means that it will strip out any trailing combination of '\r' or '\n'.  That's why it works in all three cases above.</p>

<p>This nuance matters in rare cases.  For example, I once had to process a text file which contained an HL7 message.  The HL7 standard requires a trailing '\r' as its EOL character.  The Windows machine on which I was using this message had appended its own '\r\n' EOL character.  Therefore, the end of each line looked like '\r\r\n'.  Using rstrip('\r\n') would have taken off the entire '\r\r\n' which is not what I wanted.  In that case, I simply sliced off the last two characters instead.</p>

<p>Note that unlike Perl's <code>chomp</code> function, this will strip all specified characters at the end of the string, not just one:</p>

<pre><code>&gt;&gt;&gt; ""Hello\n\n\n"".rstrip(""\n"")
""Hello""
</code></pre>
"
191029,"<p>For the <strong>complete</strong> list of attributes, the short answer is: no. The problem is that the attributes are actually defined as the arguments accepted by the <code>getattr</code> built-in function. As the user can reimplement <code>__getattr__</code>, suddenly allowing any kind of attribute, there is no possible generic way to generate that list. The <code>dir</code> function returns the keys in the <code>__dict__</code> attribute, i.e. all the attributes accessible if the <code>__getattr__</code> method is not reimplemented.</p>

<p>For the second question, it does not really make sense. Actually, methods are callable attributes, nothing more. You could though filter callable attributes, and, using the <code>inspect</code> module determine the class methods, methods or functions.</p>
"
125759,"<p>Unfortunately there is no way to insert into the middle of a file without re-writing it. As previous posters have indicated, you can append to a file or overwrite part of it using seek but if you want to add stuff at the beginning or the middle, you'll have to rewrite it.</p>

<p>This is an operating system thing, not a Python thing. It is the same in all languages.</p>

<p>What I usually do is read from the file, make the modifications and write it out to a new file called myfile.txt.tmp or something like that. This is better than reading the whole file into memory because the file may be too large for that. Once the temporary file is completed, I rename it the same as the original file.</p>

<p>This is a good, safe way to do it because if the file write crashes or aborts for any reason, you still have your untouched original file.</p>
"
209529,"<p><code>int(hexString, 16)</code> does the trick, and works with and without the 0x prefix:</p>

<pre><code>&gt;&gt;&gt; int(""a"", 16)
10
&gt;&gt;&gt; int(""0xa"",16)
10
</code></pre>
"
278606,"<p>SQLAlchemy's ORM is meant to be used together with the SQL layer, not hide it. But you do have to keep one or two things in mind when using the ORM and plain SQL in the same transaction. Basically, from one side, ORM data modifications will only hit the database when you flush the changes from your session. From the other side, SQL data manipulation statements don't affect the objects that are in your session.</p>

<p>So if you say</p>

<pre><code>for c in session.query(Stuff).all():
    c.foo = c.foo+1
session.commit()
</code></pre>

<p>it will do what it says, go fetch all the objects from the database, modify all the objects and then when it's time to flush the changes to the database, update the rows one by one.</p>

<p>Instead you should do this:</p>

<pre><code>session.execute(update(stuff_table, values={stuff_table.c.foo: stuff_table.c.foo + 1}))
session.commit()
</code></pre>

<p>This will execute as one query as you would expect, and because atleast the default session configuration expires all data in the session on commit you don't have any stale data issues.</p>

<p>In the almost-released 0.5 series you could also use this method for updating:</p>

<pre><code>session.query(Stuff).update({Stuff.foo: Stuff.foo + 1})
session.commit()
</code></pre>

<p>That will basically run the same SQL statement as the previous snippet, but also select the changed rows and expire any stale data in the session. If you know you aren't using any session data after the update you could also add synchronize_session=False to the update statement and get rid of that select.</p>
"
142535,"<pre><code>os.walk('.').next()[1]
</code></pre>
"
197053,"<p>A little nicer than inspecting the code object directly and working out the variables is to use the inspect module.</p>

<pre><code>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; def func(a,b,c=42, *args, **kwargs): pass
&gt;&gt;&gt; inspect.getargspec(func)
(['a', 'b', 'c'], 'args', 'kwargs', (42,))
</code></pre>

<p>If you want to know if its callable with a particular set of args, you need the args without a default already specified.  These can be got by:</p>

<pre><code>def getRequiredArgs(func):
    args, varargs, varkw, defaults = inspect.getargspec(func)
    if defaults:
        args = args[:-len(defaults)]
    return args   # *args and **kwargs are not required, so ignore them.
</code></pre>

<p>Then a function to tell what you are missing from your particular dict is:</p>

<pre><code>def missingArgs(func, argdict):
    return set(getRequiredArgs(func)).difference(argdict)
</code></pre>

<p>Similarly, to check for invalid args, use:</p>

<pre><code>def invalidArgs(func, argdict):
    args, varargs, varkw, defaults = inspect.getargspec(func)
    if varkw: return set()  # All accepted
    return set(argdict) - set(args)
</code></pre>

<p>And so a full test if it is callable is :</p>

<pre><code>def isCallableWithArgs(func, argdict):
    return not missingArgs(func, argdict) and not invalidArgs(func, argdict)
</code></pre>

<p>(This is good only as far as python's arg parsing.  Any runtime checks for invalid values in kwargs obviously can't be detected.)</p>
"
136368,"<p>This may be quicker than yours.  Makes no assumptions about line length.  Backs through the file one block at a time till it's found the right number of '\n' characters.</p>

<pre><code>def tail( f, lines=20 ):
    total_lines_wanted = lines

    BLOCK_SIZE = 1024
    f.seek(0, 2)
    block_end_byte = f.tell()
    lines_to_go = total_lines_wanted
    block_number = -1
    blocks = [] # blocks of size BLOCK_SIZE, in reverse order starting
                # from the end of the file
    while lines_to_go &gt; 0 and block_end_byte &gt; 0:
        if (block_end_byte - BLOCK_SIZE &gt; 0):
            # read the last block we haven't yet read
            f.seek(block_number*BLOCK_SIZE, 2)
            blocks.append(f.read(BLOCK_SIZE))
        else:
            # file too small, start from begining
            f.seek(0,0)
            # only read what was not read
            blocks.append(f.read(block_end_byte))
        lines_found = blocks[-1].count('\n')
        lines_to_go -= lines_found
        block_end_byte -= BLOCK_SIZE
        block_number -= 1
    all_read_text = ''.join(reversed(blocks))
    return '\n'.join(all_read_text.splitlines()[-total_lines_wanted:])
</code></pre>

<p>I don't like tricky assumptions about line length when -- as a practical matter -- you can never know things like that.</p>

<p>Generally, this will locate the last 20 lines on the first or second pass through the loop.  If your 74 character thing is actually accurate, you make the block size 2048 and you'll tail 20 lines almost immediately.</p>

<p>Also, I don't burn a lot of brain calories trying to finesse alignment with physical OS blocks.  Using these high-level I/O packages, I doubt you'll see any performance consequence of trying to align on OS block boundaries.  If you use lower-level I/O, then you might see a speedup.</p>
"
248854,"<pre><code>def getPermutations(string, prefix=""""):
    if len(string) == 1:
        yield prefix + string
    else:
        for i in xrange(len(string)):
            for perm in getPermutations(string[:i] + string[i+1:], prefix+string[i]):
                yield perm
</code></pre>

<p>Or without an accumulator:</p>

<pre><code>def getPermutations(string):
    if len(string) == 1:
        yield string
    else:
        for i in xrange(len(string)):
            for perm in getPermutations(string[:i] + string[i+1:]):
                yield string[i] + perm
</code></pre>
"
293097,"<p>Essentially, the only thing in Python that introduces a new scope is a function definition.  Classes are a bit of a special case in that anything defined directly in the body is placed in the class's namespace, but they are not directly accessible from within the methods (or nested classes) they contain.</p>

<p>In your example there are only 3 scopes where x will be searched in:</p>

<ul>
<li><p>spam's scope - containing everything defined in code3 and code5 (as well as code4, your loop variable)</p></li>
<li><p>The global scope - containing everything defined in code1, as well as Foo (and whatever changes after it)</p></li>
<li><p>The builtins namespace.  A bit of a special case - this contains the various Python builtin functions and types such as len() and str(). Generally this shouldn't be modified by any user code, so expect it to contain the standard functions and nothing else.</p></li>
</ul>

<p>More scopes only appear when you introduce a nested function (or lambda) into the picture.
These will behave pretty much as you'd expect however.  The nested function can access everything in the local scope, as well as anything in the enclosing function's scope. eg.</p>

<pre><code>def foo():
    x=4
    def bar():
        print x  # Accesses x from foo's scope
    bar()  # Prints 4
    x=5
    bar()  # Prints 5
</code></pre>

<p><strong>Restrictions:</strong></p>

<p>Variables in scopes other than the local function's variables can be accessed, but can't be rebound to new parameters without further syntax.  Instead, assignment will create a new <strong>local</strong> variable instead of affecting the variable in the parent scope.  For example:</p>

<pre><code>global_var1 = []
global_var2 = 1

def func():
    # This is OK: It's just accessing, not rebinding
    global_var1.append(4) 

    # This won't affect global_var2. Instead it creates a new variable
    global_var2 = 2 

    local1 = 4
    def embedded_func():
        # Again, this doen't affect func's local1 variable.  It creates a 
        # new local variable also called local1 instead.
        local1 = 5
        print local1

    embedded_func() # Prints 5
    print local1    # Prints 4
</code></pre>

<p>In order to actually modify the bindings of global variables from within a function scope, you need to specify that the variable is global with the global keyword.  Eg:</p>

<pre><code>global_var = 4
def change_global():
    global global_var
    global_var = global_var + 1
</code></pre>

<p>Currently there is no way to do the same for variables in enclosing <em>function</em> scopes, but Python 3 introduces a new keyword, ""<code>nonlocal</code>"" which will act in a similar way to global, but for nested function scopes.</p>
"
70271,"<p>First, I would suggest you have a look at ""<a href=""http://sites.google.com/site/io/rapid-development-with-python-django-and-google-app-engine"">Rapid Development with Python, Django, and Google App Engine</a>""</p>

<p>GvR describes a general/standard project layout on page 10 of his <a href=""http://sites.google.com/site/io/rapid-development-with-python-django-and-google-app-engine/rapid_development_with_django_gae.pdf?attredirects=0"">slide presentation</a>.  </p>

<p>Here I'll post a slightly modified version of the layout/structure from that page. I pretty much follow this pattern myself. You also mentioned you had trouble with packages. Just make sure each of your sub folders has an __init__.py file. It's ok if its empty.</p>

<h2>Boilerplate files</h2>

<ul>
<li>These hardly vary between projects</li>
<li>app.yaml: direct all non-static requests to main.py </li>
<li>main.py: initialize app and send it all requests </li>
</ul>

<h2>Project lay-out</h2>

<ul>
<li>static/*: static files; served directly by App Engine</li>
<li>myapp/*.py: app-specific python code
<ul>
<li>views.py, models.py, tests.py, __init__.py, and more</li>
</ul></li>
<li>templates/*.html: templates (or myapp/templates/*.html)</li>
</ul>

<p>Here are some code examples that may help as well:</p>

<h2>main.py</h2>

<pre><code>import wsgiref.handlers

from google.appengine.ext import webapp
from myapp.views import *

application = webapp.WSGIApplication([
  ('/', IndexHandler),
  ('/foo', FooHandler)
], debug=True)

def main():
  wsgiref.handlers.CGIHandler().run(application)
</code></pre>

<h2>myapp/views.py</h2>

<pre><code>import os
import datetime
import logging
import time

from google.appengine.api import urlfetch
from google.appengine.ext.webapp import template
from google.appengine.api import users
from google.appengine.ext import webapp
from models import *

class IndexHandler(webapp.RequestHandler):
  def get(self):
    date = ""foo""
    # Do some processing		
    template_values = {'data': data }
    path = os.path.join(os.path.dirname(__file__) + '/../templates/', 'main.html')
    self.response.out.write(template.render(path, template_values))

class FooHandler(webapp.RequestHandler):
  def get(self):
    #logging.debug(""start of handler"")
</code></pre>

<h2>myapp/models.py</h2>

<pre><code>from google.appengine.ext import db

class SampleModel(db.Model):
</code></pre>

<p>I think this layout works great for new and relatively small to medium projects. For larger projects I would suggest breaking up the views and models to have their own sub-folders with something like:</p>

<h2>Project lay-out</h2>

<ul>
<li>static/: static files; served directly by App Engine
<ul>
<li>js/*.js</li>
<li>images/*.gif|png|jpg</li>
<li>css/*.css</li>
</ul></li>
<li>myapp/: app structure
<ul>
<li>models/*.py</li>
<li>views/*.py</li>
<li>tests/*.py</li>
<li>templates/*.html: templates</li>
</ul></li>
</ul>
"
107427,"<p><strong>edit</strong>: This answer works, but nowadays you should just use the <a href=""http://docs.python-requests.org/en/latest/index.html"" rel=""nofollow"">requests</a> library as mentioned by other answers below.</p>

<hr>

<p>Use <a href=""https://docs.python.org/2/library/httplib.html"" rel=""nofollow"">httplib</a>.</p>

<pre><code>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; conn = httplib.HTTPConnection(""www.google.com"")
&gt;&gt;&gt; conn.request(""HEAD"", ""/index.html"")
&gt;&gt;&gt; res = conn.getresponse()
&gt;&gt;&gt; print res.status, res.reason
200 OK
&gt;&gt;&gt; print res.getheaders()
[('content-length', '0'), ('expires', '-1'), ('server', 'gws'), ('cache-control', 'private, max-age=0'), ('date', 'Sat, 20 Sep 2008 06:43:36 GMT'), ('content-type', 'text/html; charset=ISO-8859-1')]
</code></pre>

<p>There's also a <code>getheader(name)</code> to get a specific header.</p>
"
190070,"<p><a href=""http://www.python.org/dev/peps/pep-3136/"">PEP 3136</a> proposes labeled break/continue.  Guido <a href=""http://mail.python.org/pipermail/python-3000/2007-July/008663.html"">rejected it</a> because ""code so complicated to require this feature is very rare"".  The PEP does mention some workarounds, though (such as the exception technique), while Guido feels refactoring to use return will be simpler in most cases.</p>
"
211174,"<p>You should have a look at <a href=""http://www.scipy.org/Tentative_NumPy_Tutorial"">numpy</a> if you do matrix manipulation. This is a module mainly written in C, which will be much faster than programming in pure python. Here is an example of how to invert a matrix, and do other matrix manipulation.</p>

<pre><code>from numpy import matrix
from numpy import linalg
A = matrix( [[1,2,3],[11,12,13],[21,22,23]]) # Creates a matrix.
x = matrix( [[1],[2],[3]] )                  # Creates a matrix (like a column vector).
y = matrix( [[1,2,3]] )                      # Creates a matrix (like a row vector).
print A.T                                    # Transpose of A.
print A*x                                    # Matrix multiplication of A and x.
print A.I                                    # Inverse of A.
print linalg.solve(A, x)     # Solve the linear equation system.
</code></pre>

<p>You can also have a look at the <a href=""http://www.python.org/doc/2.5.2/lib/module-array.html"">array</a> module, which is a much more efficient implementation of lists when you have to deal with only one data type.</p>
"
209880,"<p>Try this:</p>

<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; keys = ('name', 'age', 'food')
&gt;&gt;&gt; values = ('Monty', 42, 'spam')
&gt;&gt;&gt; adict = dict(itertools.izip(keys,values))
&gt;&gt;&gt; adict
{'food': 'spam', 'age': 42, 'name': 'Monty'}
</code></pre>

<p>It was the simplest solution I could come up with.</p>

<p>PS It's also more economical in memory consumption compared to zip.</p>
"
159195,"<p>Python 2.5 includes an uuid implementation which (in at least one version) needs the mac address.  You can import the mac finding function into your own code easily:</p>

<pre><code>from uuid import getnode as get_mac
mac = get_mac()
</code></pre>

<p>The return value is the mac address as 48 bit integer.</p>
"
85533,"<p>As of 3.3, <a href=""https://docs.python.org/3/library/time.html#time.clock""><em>time.clock()</em> is deprecated</a>, and it's suggested to use <strong><a href=""https://docs.python.org/3/library/time.html#time.process_time"">time.process_time()</a></strong> or <strong><a href=""https://docs.python.org/3/library/time.html#time.perf_counter"">time.perf_counter()</a></strong> instead.</p>

<p>Previously in 2.7, according to the <strong><a href=""https://docs.python.org/2.7/library/time.html#time.clock"">time module docs</a></strong>:</p>

<blockquote>
  <p><strong>time.clock()</strong></p>
  
  <p>On Unix, return the current processor time as a floating point number
  expressed in seconds. The precision, and in fact the very definition
  of the meaning of âprocessor timeâ, depends on that of the C function
  of the same name, but in any case, <strong>this is the function to use for
  benchmarking Python or timing algorithms.</strong></p>
  
  <p>On Windows, this function returns wall-clock seconds elapsed since the
  first call to this function, as a floating point number, based on the
  Win32 function QueryPerformanceCounter(). The resolution is typically
  better than one microsecond.</p>
</blockquote>

<p>Additionally, there is the <a href=""https://docs.python.org/2/library/timeit.html"">timeit</a> module for benchmarking code snippets.</p>
"
1879,"<p>For the record here's the results on Mac:</p>

<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.name
'posix'
&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.system()
'Darwin'
&gt;&gt;&gt; platform.release()
'8.11.1'
</code></pre>
"
110414,"<p><strong>The easiest way for your use case is to use CSS</strong>. It's a language meant for defining presentation. Look at the code generated by form, take note of the ids for fields that interest you, and change appearance of these fields through CSS.</p>

<p>Example for <code>long_desc</code> field in your ProductForm (when your form does not have a custom prefix):</p>

<pre><code>#id_long_desc {
    width: 300px;
    height: 200px;
}
</code></pre>

<p><strong>Second approach</strong> is to pass the <code>attrs</code> keyword to your widget constructor.</p>

<pre><code>class ProductForm(ModelForm):
    long_desc = forms.CharField(widget=forms.Textarea(attrs={'cols': 10, 'rows': 20}))
    short_desc = forms.CharField(widget=forms.Textarea)
    class Meta:
        model = Product
</code></pre>

<p>It's <a href=""http://docs.djangoproject.com/en/dev/ref/forms/widgets/#django.forms.Widget.attrs"">described in Django documentation</a>.</p>

<p><strong>Third approach</strong> is to leave the nice declarative interface of newforms for a while and set your widget attributes in custom constructor.</p>

<pre><code>class ProductForm(ModelForm):
    long_desc = forms.CharField(widget=forms.Textarea)
    short_desc = forms.CharField(widget=forms.Textarea)
    class Meta:
        model = Product

    # Edit by bryan
    def __init__(self, *args, **kwargs):
        super(ProductForm, self).__init__(*args, **kwargs) # Call to ModelForm constructor
        self.fields['long_desc'].widget.attrs['cols'] = 10
        self.fields['long_desc'].widget.attrs['rows'] = 20
</code></pre>

<p>This approach has the following advantages:</p>

<ul>
<li>You can define widget attributes for fields that are generated automatically from your model without redefining whole fields.</li>
<li>It doesn't depend on the prefix of your form.</li>
</ul>
"
285326,"<p>What you're looking for in the script is calls to <a href=""https://docs.python.org/2/library/sys.html#sys.exit""><code>sys.exit()</code></a>.  The argument to that method is returned to the environment as the exit code.</p>

<p>It's fairly likely that the script is never calling the exit method, and that 0 is the default exit code.</p>
"
246779,"<p>I may have found a way to do it.</p>

<p>Create a file .pythonrc</p>

<pre><code># ~/.pythonrc
# enable syntax completion
try:
    import readline
except ImportError:
    print(""Module readline not available."")
else:
    import rlcompleter
    readline.parse_and_bind(""tab: complete"")
</code></pre>

<p>then in your .bashrc file, add</p>

<pre><code>export PYTHONSTARTUP=~/.pythonrc
</code></pre>

<p>That seems to work.</p>
"
303228,"<p>From <a href=""http://docs.python.org/library/os.html#os.walk"">the python docs</a> on <code>os.walk()</code>:</p>

<pre><code># Delete everything reachable from the directory named in 'top',
# assuming there are no symbolic links.
# CAUTION:  This is dangerous!  For example, if top == '/', it
# could delete all your disk files.
import os
for root, dirs, files in os.walk(top, topdown=False):
    for name in files:
        os.remove(os.path.join(root, name))
    for name in dirs:
        os.rmdir(os.path.join(root, name))
</code></pre>
"
19152,"<p>First of all the <a href=""https://docs.python.org/3/library/itertools.html"">itertools module</a> is incredibly useful for all sorts of cases in which an iterator would be useful, but here is all you need to create an iterator in python:</p>

<blockquote>
  <p>yield</p>
</blockquote>

<p>Isn't that cool?  Yield can be used to replace a normal <strong>return</strong> in a function.  It returns the object just the same, but instead of destroying state and exiting, it saves state for when you want to execute the next iteration.  Here is an example of it in action pulled directly from the <a href=""http://docs.python.org/lib/itertools-functions.html"">itertools function list</a>:</p>

<pre><code> def count(n=0):
     while True:
         yield n
         n += 1
</code></pre>

<p>As stated in the functions description (it's the <strong>count()</strong> function from the itertools module...) , it produces an iterator that returns consecutive integers starting with n.</p>

<p><a href=""https://docs.python.org/2/reference/expressions.html#generator-expressions"">Generator expressions</a> are a whole other can of worms (awesome worms!).  They may be used in place of a <a href=""http://www.secnetix.de/olli/Python/list_comprehensions.hawk"">List Comprehension</a> to save memory (list comprehensions create a list in memory that is destroyed after use if not assigned to a variable, but generator expressions can create a Generator Object... which is a fancy way of saying Iterator). Here is an example of a generator expression definition:</p>

<pre><code>gen = (n for n in xrange(0,11))
</code></pre>

<p>This is very similar to our iterator definition above except the full range is predetermined to be between 0 and 10.</p>

<p>I just found <strong>xrange()</strong> (suprised I hadn't seen it before...) and added it to the above example.  <strong>xrange()</strong> is an iterable version of <strong>range()</strong> which has the advantage of not prebuilding the list.  It would be  very useful if you had a giant corpus of data to iterate over and only had so much memory to do it in.</p>
"
275246,"<p>Given the Django use case, there are two answers to this.  Here is its <code>django.utils.html.escape</code> function, for reference:</p>

<pre><code>def escape(html):
    """"""Returns the given HTML with ampersands, quotes and carets encoded.""""""
    return mark_safe(force_unicode(html).replace('&amp;', '&amp;amp;').replace('&lt;', '&amp;l
t;').replace('&gt;', '&amp;gt;').replace('""', '&amp;quot;').replace(""'"", '&amp;#39;'))
</code></pre>

<p>To reverse this, the Cheetah function described in Jake's answer should work, but is missing the single-quote.  This version includes an updated tuple, with the order of replacement reversed to avoid symmetric problems:</p>

<pre><code>def html_decode(s):
    """"""
    Returns the ASCII decoded version of the given HTML string. This does
    NOT remove normal HTML tags like &lt;p&gt;.
    """"""
    htmlCodes = (
            (""'"", '&amp;#39;'),
            ('""', '&amp;quot;'),
            ('&gt;', '&amp;gt;'),
            ('&lt;', '&amp;lt;'),
            ('&amp;', '&amp;amp;')
        )
    for code in htmlCodes:
        s = s.replace(code[1], code[0])
    return s

unescaped = html_decode(my_string)
</code></pre>

<p>This, however, is not a general solution; it is only appropriate for strings encoded with <code>django.utils.html.escape</code>.  More generally, it is a good idea to stick with the standard library:</p>

<pre><code># Python 2.x:
import HTMLParser
html_parser = HTMLParser.HTMLParser()
unescaped = html_parser.unescape(my_string)

# Python 3.x:
import html.parser
html_parser = html.parser.HTMLParser()
unescaped = html_parser.unescape(my_string)
</code></pre>

<p>As a suggestion: it may make more sense to store the HTML unescaped in your database.  It'd be worth looking into getting unescaped results back from BeautifulSoup if possible, and avoiding this process altogether.</p>

<p>With Django, escaping only occurs during template rendering; so to prevent escaping you just tell the templating engine not to escape your string.  To do that, use one of these options in your template:</p>

<pre><code>{{ context_var|safe }}
{% autoescape off %}
    {{ context_var }}
{% endautoescape %}
</code></pre>
"
311833,"<pre><code>def doAppend( size=10000 ):
    result = []
    for i in range(size):
        message= ""some unique object %d"" % ( i, )
        result.append(message)
    return result

def doAllocate( size=10000 ):
    result=size*[None]
    for i in range(size):
        message= ""some unique object %d"" % ( i, )
        result[i]= message
    return result
</code></pre>

<p><strong>Results</strong>. (evaluate each function 144 times and average the duration)</p>

<pre><code>simple append 0.0102
pre-allocate  0.0098
</code></pre>

<p><strong>Conclusion</strong>.  It barely matters.  </p>

<p>Premature optimization is the root of all evil.</p>
"
323993,"<p>There is no official API to do that, no.</p>

<p>You need to use platform API to kill the thread, e.g. pthread_kill, or TerminateThread. You can access such API e.g. through pythonwin, or through ctypes.</p>

<p>Notice that this is inherently unsafe. It will likely lead to uncollectable garbage (from local variables of the stack frames that become garbage), and may lead to deadlocks, if the thread being killed has the GIL at the point when it is killed.</p>
"
36911,"<p>The single * means that there can be any number of extra positional arguments. <code>foo()</code> can be invoked like <code>foo(1,2,3,4,5)</code>. In the body of foo() param2 is a sequence containing 2-5.</p>

<p>The double ** means there can be any number of extra named parameters. <code>bar()</code> can be invoked like <code>bar(1, a=2, b=3)</code>. In the body of bar() param2 is a dictionary containing {'a':2, 'b':3 }</p>

<p>With the following code:</p>

<pre><code>def foo(param1, *param2):
    print param1
    print param2

def bar(param1, **param2):
    print param1
    print param2

foo(1,2,3,4,5)
bar(1,a=2,b=3)
</code></pre>

<p>the output is</p>

<pre><code>1
(2, 3, 4, 5)
1
{'a': 2, 'b': 3}
</code></pre>
"
47793,"<p>Iterating over the <em>generator expression</em> or the <em>list comprehension</em> will do the same thing. However, the <em>list comprehension</em> will create the entire list in memory first while the <em>generator expression</em> will create the items on the fly, so you are able to use it for very large (and also infinite!) sequences.</p>
"
252473,"<p>For ease of use, <a href=""http://docs.python.org/library/ctypes.html"">ctypes</a> is the way to go.</p>

<p>The following example of ctypes is from actual code I've written (in Python 2.5).  This has been, by far, the easiest way I've found for doing what you ask.</p>

<pre><code>import ctypes

# Load DLL into memory.

hllDll = ctypes.WinDLL (""c:\\PComm\\ehlapi32.dll"")

# Set up prototype and parameters for the desired function call.
# HLLAPI

hllApiProto = ctypes.WINFUNCTYPE (
    ctypes.c_int,      # Return type.
    ctypes.c_void_p,   # Parameters 1 ...
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p)   # ... thru 4.
hllApiParams = (1, ""p1"", 0), (1, ""p2"", 0), (1, ""p3"",0), (1, ""p4"",0),

# Actually map the call (""HLLAPI(...)"") to a Python name.

hllApi = hllApiProto ((""HLLAPI"", hllDll), hllApiParams)

# This is how you can actually call the DLL function.
# Set up the variables and call the Python name with them.

p1 = ctypes.c_int (1)
p2 = ctypes.c_char_p (sessionVar)
p3 = ctypes.c_int (1)
p4 = ctypes.c_int (0)
hllApi (ctypes.byref (p1), p2, ctypes.byref (p3), ctypes.byref (p4))
</code></pre>

<p>The <code>ctypes</code> stuff has all the C-type data types (<code>int</code>, <code>char</code>, <code>short</code>, <code>void*</code>, and so on) and can pass by value or reference.  It can also return specific data types although my example doesn't do that (the HLL API returns values by modifying a variable passed by reference).</p>

<hr>

<p>In terms of the specific example shown above, IBM's EHLLAPI is a fairly consistent interface.</p>

<p>All calls pass four void pointers (EHLLAPI sends the return code back through the fourth parameter, a pointer to an <code>int</code> so, while I specify <code>int</code> as the return type, I can safely ignore it) as per IBM's documentation <a href=""http://publib.boulder.ibm.com/infocenter/pcomhelp/v5r9/index.jsp?topic=/com.ibm.pcomm.doc/books/html/emulator_programming08.htm"">here</a>. In other words, the C variant of the function would be:</p>

<pre><code>int hllApi (void *p1, void *p2, void *p3, void *p4)
</code></pre>

<p>This makes for a single, simple <code>ctypes</code> function able to do anything the EHLLAPI library provides, but it's likely that other libraries will need a separate <code>ctypes</code> function set up per library function.</p>

<p>The return value from <code>WINFUNCTYPE</code> is a function prototype but you still have to set up more  parameter information (over and above the types). Each tuple in <code>hllApiParams</code> has a parameter ""direction"" (1 = input, 2 = output and so on), a parameter name and a default value - see the <code>ctypes</code> doco for details</p>

<p>Once you have the prototype and parameter information, you can create a Python ""callable"" <code>hllApi</code> with which to call the function. You simply create the needed variable (<code>p1</code> through <code>p4</code> in my case) and call the function with them.</p>
"
68817,"<p>The <a href=""https://docs.python.org/3/library/dis.html""><code>dis</code></a> module disassembles the byte code for a function and is useful to see the difference between tuples and lists.</p>

<p>In this case, you can see that accessing an element generates identical code, but that assigning a tuple is much faster than assigning a list.</p>

<pre><code>&gt;&gt;&gt; def a():
...     x=[1,2,3,4,5]
...     y=x[2]
...
&gt;&gt;&gt; def b():
...     x=(1,2,3,4,5)
...     y=x[2]
...
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(a)
  2           0 LOAD_CONST               1 (1)
              3 LOAD_CONST               2 (2)
              6 LOAD_CONST               3 (3)
              9 LOAD_CONST               4 (4)
             12 LOAD_CONST               5 (5)
             15 BUILD_LIST               5
             18 STORE_FAST               0 (x)

  3          21 LOAD_FAST                0 (x)
             24 LOAD_CONST               2 (2)
             27 BINARY_SUBSCR
             28 STORE_FAST               1 (y)
             31 LOAD_CONST               0 (None)
             34 RETURN_VALUE
&gt;&gt;&gt; dis.dis(b)
  2           0 LOAD_CONST               6 ((1, 2, 3, 4, 5))
              3 STORE_FAST               0 (x)

  3           6 LOAD_FAST                0 (x)
              9 LOAD_CONST               2 (2)
             12 BINARY_SUBSCR
             13 STORE_FAST               1 (y)
             16 LOAD_CONST               0 (None)
             19 RETURN_VALUE
</code></pre>
"
214601,"<p>Here's the general plan for Twisted.  I was originally going to blog this, but then I thought: why blog about it when I could get <em>points</em> for it?</p>

<ol>
<li><p><strong>Wait until somebody cares.</strong></p>

<p>Right now, nobody has Python 3.  We're not going to spend a bunch of effort until at least one actual user has come forth and said ""I need Python 3.0 support"", and has a good reason for it aside from the fact that 3.0 looks shiny.</p></li>
<li><p><strong>Wait until our dependencies have migrated.</strong></p>

<p>A large system like Twisted has a number of dependencies.  For starters, ours include:</p>

<ul>
<li><a href=""http://www.zope.org/Products/%5AopeInterface"">Zope Interface</a></li>
<li><a href=""http://www.dlitz.net/software/pycrypto/"">PyCrypto</a></li>
<li><a href=""https://launchpad.net/pyopenssl/"">PyOpenSSL</a></li>
<li><a href=""http://sourceforge.net/projects/pywin32/"">pywin32</a></li>
<li><a href=""http://www.pygtk.org/"">PyGTK</a> (though this dependency is sadly very light right now, by the time migration rolls around, I hope Twisted will have more GUI tools)</li>
<li><a href=""http://pyasn1.sourceforge.net/"">pyasn1</a></li>
<li><a href=""http://www.pangalactic.org/PyPAM/"">PyPAM</a></li>
<li><a href=""http://gmpy.sourceforge.net/"">gmpy</a></li>
</ul>

<p>Some of these projects have their own array of dependencies so we'll have to wait for those as well.</p></li>
<li><p><strong>Wait until somebody cares enough <em>to help</em>.</strong></p>

<p>There are, charitably, 5 people who work on Twisted - and I say ""charitably"" because that's counting me, and I haven't committed in months.  We have <a href=""http://twistedmatrix.com/trac/report/1"">over 1000 open tickets</a> right now, and it would be nice to actually fix some of those â fix bugs, add features, and generally make Twisted a better product in its own right â before spending time on getting it ported over to a substantially new version of the language.</p>

<p>This potentially includes <a href=""http://twistedmatrix.com/trac/wiki/TwistedSoftwareFoundation"">sponsors</a> caring enough to pay for us to do it, but I hope that there will be an influx of volunteers who care about 3.0 support and want to help move the community forward.</p></li>
<li><p><strong>Follow Guido's advice.</strong></p>

<p>This means <strong><em><a href=""http://www.artima.com/weblogs/viewpost.jsp?thread=227041"">we will not change our API incompatibly</a></em></strong>, and we will follow the <a href=""http://www.artima.com/weblogs/viewpost.jsp?thread=208549"">transitional development guidelines</a> that Guido posted last year.  That starts with having unit tests, and running <a href=""http://docs.python.org/library/2to3.html"">the 2to3 conversion tool</a> over the Twisted codebase.</p></li>
<li><p><strong>Report bugs against, and file patches for, the 2to3 tool</strong>.</p>

<p>When we get to the point where we're actually using it, I anticipate that there will be a lot of problems with running <code>2to3</code> in the future.  Running it over Twisted right now takes an extremely long time and (last I checked, which was quite a while ago) can't parse a few of the files in the Twisted repository, so the resulting output won't import.  I think there will have to be a fair amount of success stories from small projects and a lot of hammering on the tool before it will actually work for us.</p>

<p>However, the Python development team has been very helpful in responding to our bug reports, and early responses to these problems have been encouraging, so I expect that all of these issues will be fixed in time.</p></li>
<li><p><strong>Maintain 2.x compatibility for several years.</strong></p>

<p>Right now, Twisted supports python 2.3 to 2.5.  Currently, we're working on 2.6 support (which we'll obviously have to finish before 3.0!).  Our plan is to we revise our supported versions of Python based on the long-term supported versions of <a href=""http://en.wikipedia.org/wiki/Ubuntu"">Ubuntu</a> - release 8.04, which includes Python 2.5, will be supported until 2013.  According to Guido's advice we will need to drop support for 2.5 in order to support 3.0, but I am hoping we can find a way around that (we are pretty creative with version-compatibility hacks).</p>

<p>So, we are planning to support Python 2.5 until at least 2013.  In two years, Ubuntu will release another long-term supported version of Ubuntu: if they still exist, and stay on schedule, that will be 10.04.  Personally I am guessing that this will ship with Python 2.x, perhaps python 2.8, as <code>/usr/bin/python</code>, because there is a huge amount of Python software packaged with the distribution and it will take a long time to update it all.  So, five years from <em>then</em>, in 2015, we can start looking at dropping 2.x support.</p>

<p>During this period, we will continue to follow Guido's advice about migration: running 2to3 over our 2.x codebase, and modifying the 2.x codebase to keep its tests passing in both versions.</p>

<p>The upshot of this is that Python 3.x will not be a <em>source</em> language for Twisted until well after my 35th birthday â it will be a target runtime (and a set of guidelines and restrictions) for my python 2.x code.  I expect to be writing programs in Python 2.x for the next ten years or so.</p></li>
</ol>

<p>So, that's the plan.  I'm hoping that it ends up looking laughably conservative in a year or so; that the 3.x transition is easy as pie, and everyone rapidly upgrades.  Other things could happen, too: the 2.x and 3.x branches could converge, someone might end up writing a <code>3to2</code>, or another runtime (PyPy comes to mind) might allow for running 2.x and 3.x code in the same process directly, making our conversion process easier.</p>

<p>For the time being, however, we're assuming that, for many years, we will have people with large codebases they're maintaining (or people writing new code who want to use <em>other</em> libraries which have not yet been migrated) who still want new features and bug fixes in Twisted.  Pretty soon I expect we will also have bleeding-edge users that want to use Twisted on python 3.  I'd like to provide all of those people with a positive experience for as long as possible.</p>
"
147756,"<p>Ref: <a href=""http://docs.python.org/howto/unicode"">http://docs.python.org/howto/unicode</a></p>

<p><em>Reading Unicode from a file is therefore simple:</em></p>

<pre><code>import codecs
f = codecs.open('unicode.rst', encoding='utf-8')
for line in f:
    print repr(line)
</code></pre>

<p><em>It's also possible to open files in update mode, allowing both reading and writing:</em></p>

<pre><code>f = codecs.open('test', encoding='utf-8', mode='w+')
f.write(u'\u4500 blah blah blah\n')
f.seek(0)
print repr(f.readline()[:1])
f.close()
</code></pre>

<p><strong>EDIT</strong>: I'm assuming that your intended goal is just to be able to read the file properly into a string in Python. If you're trying to convert to an ASCII string from Unicode, then there's really no direct way to do so, since the Unicode characters won't necessarily exist in ASCII.</p>

<p>If you're trying to convert to an ASCII string, try one of the following: </p>

<ol>
<li><p>Replace the specific unicode chars with ASCII equivalents, if you are only looking to handle a few special cases such as this particular example</p></li>
<li><p>Use the <code>unicodedata</code> module's <code>normalize()</code> and the <code>string.encode()</code> method to convert as best you can to the next closest ASCII equivalent (Ref <a href=""https://web.archive.org/web/20090228203858/http://techxplorer.com/2006/07/18/converting-unicode-to-ascii-using-python"">https://web.archive.org/web/20090228203858/http://techxplorer.com/2006/07/18/converting-unicode-to-ascii-using-python</a>): </p>

<pre><code>&gt;&gt;&gt; teststr
u'I don\xe2\x80\x98t like this'
&gt;&gt;&gt; unicodedata.normalize('NFKD', teststr).encode('ascii', 'ignore')
'I donat like this'
</code></pre></li>
</ol>
"
77612,"<p><code>id()</code> is a fundamental built-in:</p>

<blockquote>
  <p>Help on built-in function <code>id</code> in module
  <code>__builtin__</code>:</p>
  
  <pre class=""lang-none prettyprint-override""><code>id(...)

    id(object) -&gt; integer

    Return the identity of an object.  This is guaranteed to be unique among
    simultaneously existing objects.  (Hint: it's the object's memory
    address.)
</code></pre>
</blockquote>

<p>In general, using variable names that eclipse a keyword or built-in function in any language is a bad idea, even if it is allowed.</p>
"
326279,"<p>Note that rstrip doesn't act exactly like Perl's chomp() because it doesn't modify the string. That is, in Perl:</p>

<pre><code>$x=""a\n"";

chomp $x
</code></pre>

<p>results in <code>$x</code> being <code>""a""</code>.</p>

<p>but in Python:</p>

<pre><code>x=""a\n""

x.rstrip()
</code></pre>

<p>will mean that the value of <code>x</code> is <strong>still</strong> <code>""a\n""</code>. Even <code>x=x.rstrip()</code> doesn't always give the same result, as it strips all whitespace from the end of the string, not just one newline at most.</p>
"
228366,"<p>In a follow-up answer, you asked about the relative performance of these two alternatives:</p>

<pre><code>z1 = dict(x.items() + y.items())
z2 = dict(x, **y)
</code></pre>

<p>On my machine, at least (a fairly ordinary x86_64 running Python 2.5.2), alternative <code>z2</code> is not only shorter and simpler but also significantly faster.  You can verify this for yourself using the <code>timeit</code> module that comes with Python.</p>

<p>Example 1: identical dictionaries mapping 20 consecutive integers to themselves:</p>

<pre><code>% python -m timeit -s 'x=y=dict((i,i) for i in range(20))' 'z1=dict(x.items() + y.items())'
100000 loops, best of 3: 5.67 usec per loop
% python -m timeit -s 'x=y=dict((i,i) for i in range(20))' 'z2=dict(x, **y)' 
100000 loops, best of 3: 1.53 usec per loop
</code></pre>

<p><code>z2</code> wins by a factor of 3.5 or so.  Different dictionaries seem to yield quite different results, but <code>z2</code> always seems to come out ahead.  (If you get inconsistent results for the <em>same</em> test, try passing in <code>-r</code> with a number larger than the default 3.)</p>

<p>Example 2: non-overlapping dictionaries mapping 252 short strings to integers and vice versa:</p>

<pre><code>% python -m timeit -s 'from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z1=dict(x.items() + y.items())'
1000 loops, best of 3: 260 usec per loop
% python -m timeit -s 'from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z2=dict(x, **y)'               
10000 loops, best of 3: 26.9 usec per loop
</code></pre>

<p><code>z2</code> wins by about a factor of 10.  That's a pretty big win in my book!</p>

<p>After comparing those two, I wondered if <code>z1</code>'s poor performance could be attributed to the overhead of constructing the two item lists, which in turn led me to wonder if this variation might work better:</p>

<pre><code>from itertools import chain
z3 = dict(chain(x.iteritems(), y.iteritems()))
</code></pre>

<p>A few quick tests, e.g.</p>

<pre><code>% python -m timeit -s 'from itertools import chain; from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z3=dict(chain(x.iteritems(), y.iteritems()))'
10000 loops, best of 3: 66 usec per loop
</code></pre>

<p>lead me to conclude that <code>z3</code> is somewhat faster than <code>z1</code>, but not nearly as fast as <code>z2</code>.  Definitely not worth all the extra typing.</p>

<p>This discussion is still missing something important, which is a performance comparison of these alternatives with the ""obvious"" way of merging two lists: using the <code>update</code> method.  To try to keep things on an equal footing with the expressions, none of which modify x or y, I'm going to make a copy of x instead of modifying it in-place, as follows:</p>

<pre><code>z0 = dict(x)
z0.update(y)
</code></pre>

<p>A typical result:</p>

<pre><code>% python -m timeit -s 'from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z0=dict(x); z0.update(y)'
10000 loops, best of 3: 26.9 usec per loop
</code></pre>

<p>In other words, <code>z0</code> and <code>z2</code> seem to have essentially identical performance.  Do you think this might be a coincidence?  I don't....</p>

<p>In fact, I'd go so far as to claim that it's impossible for pure Python code to do any better than this.  And if you can do significantly better in a C extension module, I imagine the Python folks might well be interested in incorporating your code (or a variation on your approach) into the Python core.  Python uses <code>dict</code> in lots of places; optimizing its operations is a big deal.</p>

<p>You could also write this as</p>

<pre><code>z0 = x.copy()
z0.update(y)
</code></pre>

<p>as Tony does, but (not surprisingly) the difference in notation turns out not to have any measurable effect on performance.  Use whichever looks right to you.  Of course, he's absolutely correct to point out that the two-statement version is much easier to understand.</p>
"
192184,"<pre><code>def dump(obj):
  for attr in dir(obj):
    print ""obj.%s = %s"" % (attr, getattr(obj, attr))
</code></pre>

<p>There are many 3rd-party functions out there that add things like exception handling, national/special character printing, recursing into nested objects etc. according to their authors' preferences. But they all basically boil down to this.</p>
"
82841,"<pre><code>import os
os.path.exists(filename)
</code></pre>
"
26910,"<p><strong>This answer suggests <code>optparse</code> which is appropriate for older Python versions. For Python 2.7 and above, <code>argparse</code> replaces <code>optparse</code>. See <a href=""http://stackoverflow.com/questions/3217673/why-use-argparse-rather-than-optparse"">this answer</a> for more information.</strong></p>

<p>As other people pointed out, you are better off going with optparse over getopt.  getopt is pretty much a one-to-one mapping of the standard getopt(3) C library functions, and not very easy to use.</p>

<p>optparse, while being a bit more verbose, is much better structured and simpler to extend later on.</p>

<p>Here's a typical line to add an option to your parser:</p>

<pre><code>parser.add_option('-q', '--query',
            action=""store"", dest=""query"",
            help=""query string"", default=""spam"")
</code></pre>

<p>It pretty much speaks for itself; at processing time, it will accept -q or --query as options, store the argument in an attribute called query and has a default value if you don't specify it.  It is also self-documenting in that you declare the help argument (which will be used when run with -h/--help) right there with the option.</p>

<p>Usually you parse your arguments with:</p>

<pre><code>options, args = parser.parse_args()
</code></pre>

<p>This will, by default, parse the standard arguments passed to the script (sys.argv[1:])</p>

<p>options.query will then be set to the value you passed to the script.</p>

<p>You create a parser simply by doing</p>

<pre><code>parser = optparse.OptionParser()
</code></pre>

<p>These are all the basics you need.  Here's a complete Python script that shows this:</p>

<pre><code>import optparse

parser = optparse.OptionParser()

parser.add_option('-q', '--query',
    action=""store"", dest=""query"",
    help=""query string"", default=""spam"")

options, args = parser.parse_args()

print 'Query string:', options.query
</code></pre>

<p>5 lines of python that show you the basics.</p>

<p>Save it in sample.py, and run it once with</p>

<pre><code>python sample.py
</code></pre>

<p>and once with</p>

<pre><code>python sample.py --query myquery
</code></pre>

<p>Beyond that, you will find that optparse is very easy to extend.
In one of my projects, I created a Command class which allows you to nest subcommands in a command tree easily.  It uses optparse heavily to chain commands together.  It's not something I can easily explain in a few lines, but feel free to <a href=""https://thomas.apestaart.org/moap/trac/browser/trunk/moap/extern/command/command.py"">browse around in my repository</a> for the main class, as well as <a href=""https://thomas.apestaart.org/moap/trac/browser/trunk/moap/command/doap.py"">a class that uses it and the option parser</a></p>
"
328122,"<p>Check if the <strong>cross product</strong> of (b-a) and (c-a) is 0, as tells Darius Bacon, tells you if the points a, b and c are aligned.</p>

<p>But, as you want to know if c is between a and b, you also have to check that the <strong>dot product</strong> of (b-a) and (c-a) is <em>positive</em> and is <em>less</em> than the square of the distance between a and b.</p>

<p>In non-optimized pseudocode:</p>

<pre><code>def isBetween(a, b, c):
    crossproduct = (c.y - a.y) * (b.x - a.x) - (c.x - a.x) * (b.y - a.y)
    if abs(crossproduct) &gt; epsilon : return False   # (or != 0 if using integers)

    dotproduct = (c.x - a.x) * (b.x - a.x) + (c.y - a.y)*(b.y - a.y)
    if dotproduct &lt; 0 : return False

    squaredlengthba = (b.x - a.x)*(b.x - a.x) + (b.y - a.y)*(b.y - a.y)
    if dotproduct &gt; squaredlengthba: return False

    return True
</code></pre>
"
295466,"<p>You can look at the <a href=""http://www.djangoproject.com"" rel=""nofollow"">Django framework</a> for how they create a ""slug"" from arbitrary text.  A slug is URL- and filename- friendly.</p>

<p>Their <code>template/defaultfilters.py</code> (at around line 183) defines a function, <code>slugify</code>, that's probably the gold standard for this kind of thing.  Essentially, their code is the following.</p>

<pre><code>def slugify(value):
    """"""
    Normalizes string, converts to lowercase, removes non-alpha characters,
    and converts spaces to hyphens.
    """"""
    import unicodedata
    value = unicodedata.normalize('NFKD', value).encode('ascii', 'ignore')
    value = unicode(re.sub('[^\w\s-]', '', value).strip().lower())
    value = unicode(re.sub('[-\s]+', '-', value))
</code></pre>

<p>There's more, but I left it out, since it doesn't address slugification, but escaping.</p>
"
204150,"<p>There is no such thing as ""multiprocessor"" or ""multicore"" programming.  The distinction between ""multiprocessor"" and ""multicore"" <em>computers</em> is probably not relevant to you as an application programmer; it has to do with subtleties of how the cores share access to memory.</p>

<p>In order to take advantage of a multicore (or multiprocessor) computer, you need a program written in such a way that it can be run in parallel, and a runtime that will allow the program to actually be executed in parallel on multiple cores (and operating system, although any operating system you can run on your PC will do this).  This is really <em>parallel</em> programming, although there are different approaches to parallel programming.  The ones that are relevant to Python are multiprocessing and multithreading.</p>

<p>In languages like C, C++, Java, and C#, you can write parallel programs by executing multiple threads.  The global interpreter lock in the CPython and PyPy runtimes preclude this option; but only for those runtimes.  (In my personal opinion, multithreading is <a href=""http://www.softpanorama.org/People/Ousterhout/Threads/index.shtml"">dangerous and tricky</a> and it is generally a good thing that Python encourages you not to consider it as a way to get a performance advantage.)</p>

<p>If you want to write a parallel program which can run on multiple cores in Python, you have a few different options:</p>

<ul>
<li>Write a multithreaded program using the <a href=""http://www.python.org/doc/2.5.2/lib/module-threading.html""><code>threading</code></a> module and run it in the IronPython or Jython runtime.</li>
<li>Use the <a href=""http://pypi.python.org/pypi/processing""><code>processing</code></a> module, (now included in Python 2.6 as the <a href=""https://docs.python.org/2/library/multiprocessing.html""><code>multiprocessing</code></a> module), to run your code in multiple processes at once.</li>
<li>Use the <a href=""http://www.python.org/doc/2.5.2/lib/module-subprocess.html""><code>subprocess</code></a> module to run multiple python interpreters and communicate between them.</li>
<li>Use <a href=""http://twistedmatrix.com/"">Twisted</a> and <a href=""https://launchpad.net/ampoule/"">Ampoule</a>.  This has the advantage of not just running your code across different processes, but (if you don't share access to things like files) potentially across different computers as well.</li>
</ul>

<p>No matter which of these options you choose, you will need to understand how to split the work that your program is doing up into chunks that make sense to separate.  Since I'm not sure what kind of programs you are thinking of writing, it would be difficult to provide a useful example.</p>
"
61636,"<p>Absolutely (for the example you provided).</p>

<h3>Tuples are first class citizens in Python</h3>

<p>There is a builtin function <a href=""http://docs.python.org/lib/built-in-funcs.html""><code>divmod()</code></a> that does exactly that.</p>

<pre><code>q, r = divmod(x, y) # ((x - x%y)/y, x%y) Invariant: div*y + mod == x
</code></pre>

<p>There are other examples: <code>zip</code>, <code>enumerate</code>, <code>dict.items</code>. </p>

<pre><code>for i, e in enumerate([1, 3, 3]):
    print ""index=%d, element=%s"" % (i, e)

# reverse keys and values in a dictionary
d = dict((v, k) for k, v in adict.items()) # or 
d = dict(zip(adict.values(), adict.keys()))
</code></pre>

<p>BTW, parentheses are not necessary most of the time.
Citation from <a href=""http://docs.python.org/lib/typesseq.html"">Python Library Reference</a>: </p>

<blockquote>
  <p><em>Tuples are constructed by the comma
  operator</em> (not within square brackets),
  with or without enclosing parentheses,
  but an empty tuple must have the
  enclosing parentheses, such as a, b, c
  or (). A single item tuple must have a
  trailing comma, such as (d,).</p>
</blockquote>

<h3>Functions should serve single purpose</h3>

<p>Therefore they should return a single object. In your case this object is a tuple. Consider tuple as an ad-hoc compound data structure. There are languages where almost every single function returns multiple values (list in Lisp).</p>

<p>Sometimes it is sufficient to return <code>(x, y)</code> instead of <code>Point(x, y)</code>.</p>

<h3>Named tuples</h3>

<p>With the introduction of named tuples in Python 2.6 it is preferable in many cases to return named tuples instead of plain tuples.</p>

<pre><code>&gt;&gt;&gt; import collections
&gt;&gt;&gt; Point = collections.namedtuple('Point', 'x y')
&gt;&gt;&gt; x, y = Point(0, 1)
&gt;&gt;&gt; p = Point(x, y)
&gt;&gt;&gt; x, y, p
(0, 1, Point(x=0, y=1))
&gt;&gt;&gt; p.x, p.y, p[0], p[1]
(0, 1, 0, 1)
&gt;&gt;&gt; for i in p:
...   print(i)
...
0
1
</code></pre>
"
224003,"<p>You can't do this, which is by design.  The Django framework authors intended a strict separation of presentation code from data logic.  Filtering models is data logic, and outputting HTML is presentation logic.</p>

<p>So you have several options.  The easiest is to do the filtering, then pass the result to <code>render_to_response</code>.  Or you could write a method in your model so that you can say <code>{% for object in data.filtered_set %}</code>.  Finally, you could write your own template tag, although in this specific case I would advise against that.</p>
"
245208,"<p>In short, it means there are no restrictions on the object's use. It's the same as
any other object.</p>

<p>A first class object is an entity that can be dynamically created, destroyed, passed to a function, returned as a value, and have all the rights as other variables in the programming language have.  </p>

<blockquote>
  <p>Depending on the language, this can
  imply:</p>
  
  <ul>
  <li>being expressible as an anonymous literal value</li>
  <li>being storable in variables</li>
  <li>being storable in data structures</li>
  <li>having an intrinsic identity (independent of any given name)</li>
  <li>being comparable for equality with other entities</li>
  <li>being passable as a parameter to a procedure/function</li>
  <li>being returnable as the result of a procedure/function</li>
  <li>being constructible at runtime</li>
  <li>being printable</li>
  <li>being readable</li>
  <li>being transmissible among distributed processes</li>
  <li>being storable outside running processes</li>
  </ul>
</blockquote>

<p><a href=""http://en.wikipedia.org/wiki/First-class_object"">Source</a>.</p>

<p>In C++ functions themselves are not first class objects, however:</p>

<ul>
<li>You can override the '()' operator making it possible to have an object function, which is first class.</li>
<li>Function pointers are first class. </li>
<li>boost bind, lambda and function do offer first class functions</li>
</ul>

<p>In C++, classes are not first class objects but instances of those classes are.  In Python both the classes <em>and</em> the objects are first class objects.  (See <a href=""http://stackoverflow.com/a/6581949/1612701"">this answer</a> for more details about classes as objects).</p>

<p>Here is an example of Javascript first class functions:</p>

<pre><code>// f: function that takes a number and returns a number
// deltaX: small positive number
// returns a function that is an approximate derivative of f
function makeDerivative( f, deltaX )
{
    var deriv = function(x)
    { 
       return ( f(x + deltaX) - f(x) )/ deltaX;
    }
    return deriv;
}
var cos = makeDerivative( Math.sin, 0.000001);
// cos(0)     ~&gt; 1
// cos(pi/2)  ~&gt; 0
</code></pre>

<p><a href=""http://en.wikipedia.org/wiki/First-class_function"">Source</a>.</p>

<p>Entities that are not first class objects are referred to as second-class objects.  Functions in C++ are second class because they can't be dynamically created. </p>

<p><strong>Regarding the edit:</strong></p>

<blockquote>
  <p>EDIT. When one says ""everything is
  an object"" (like in Python), does he
  indeed mean that ""everything is
  first-class""?</p>
</blockquote>

<p>The term object can be used loosely and doesn't imply being first class.  And it would probably make more sense to call the whole concept 'first class entities'.  But in Python they do aim to make everything first class.  I believe the intent of the person who made your statement meant first class. </p>
"
167200,"<p>Depending on what you are doing, <a href=""http://php.net/manual/en/function.system.php"">system()</a> or <a href=""http://php.net/manual/en/function.popen.php"">popen()</a> may be perfect.  Use system() if the Python script has no output, or if you want the Python script's output to go directly to the browser.  Use popen() if you want to write data to the Python script's standard input, or read data from the Python script's standard output in php.  popen() will only let you read or write, but not both.  If you want both, check out <a href=""http://us.php.net/manual/en/function.proc-open.php"">proc_open()</a>, but with two way communication between programs you need to be careful to avoid deadlocks, where each program is waiting for the other to do something.</p>

<p>If you want to pass user supplied data to the Python script, then the big thing to be careful about is command injection.  If you aren't careful, your user could send you data like ""; evilcommand ;"" and make your program execute arbitrary commands against your will.</p>

<p><a href=""http://www.php.net/manual/en/function.escapeshellarg.php"">escapeshellarg()</a> and <a href=""http://www.php.net/manual/en/function.escapeshellcmd.php"">escapeshellcmd()</a> can help with this, but personally I like to remove everything that isn't a known good character, using something like</p>

<pre><code>preg_replace('/[^a-zA-Z0-9]/', '', $str)
</code></pre>
"
100091,"<p>One use for metaclasses is adding new properties and methods to an instance automatically.</p>

<p>For example, if you look at <a href=""http://docs.djangoproject.com/en/dev/topics/db/models/"">Django models</a>, their definition looks a bit confusing. It looks as if you are only defining class properties:</p>

<pre><code>class Person(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
</code></pre>

<p>However, at runtime the Person objects are filled with all sorts of useful methods. See the <a href=""http://code.djangoproject.com/browser/django/trunk/django/db/models/base.py"">source</a> for some amazing metaclassery.</p>
"
79744,"<p>It sounds like you don't want to compare the two <strong>languages</strong>, but that you want to compare two <strong>web systems</strong>.</p>

<p>This is tricky, because there are many variables involved.</p>

<p>For example, Python web applications can take advantage of <a href=""http://code.google.com/p/modwsgi/"">mod_wsgi</a> to talk to web servers, which is faster than any of the typical ways that PHP talks to web servers (even mod_php ends up being slower if you're using Apache, because Apache can only use the Prefork MPM with mod_php rather than multi-threaded MPM like Worker).</p>

<p>There is also the issue of code compilation. As you know, Python is compiled just-in-time to byte code (.pyc files) when a file is run each time the file changes. Therefore, after the first run of a Python file, the compilation step is skipped and the Python interpreter simply fetches the precompiled .pyc file. Because of this, one could argue that Python has a native advantage over PHP. However, optimizers and caching systems can be installed for PHP websites (my favorite is <a href=""http://eaccelerator.net/"">eAccelerator</a>) to much the same effect.</p>

<p>In general, enough tools exist such that one can pretty much do everything that the other can do. Of course, as others have mentioned, there's more than just speed involved in the business case to switch languages. We have an app written in oCaml at my current employer, which turned out to be a mistake because the original author left the company and nobody else wants to touch it. Similarly, the PHP-web community is much larger than the Python-web community; Website hosting services are more likely to offer PHP support than Python support; etc.</p>

<p>But back to speed. You must recognize that the question of speed here involves many moving parts. Fortunately, many of these parts can be independently optimized, affording you various avenues to seek performance gains.</p>
"
186873,"<p>There's no builtin, but you can accomplish this fairly simply with a generator comprehension:</p>

<pre><code>s= ""Name1=Value1;Name2=Value2;Name3=Value3""
dict(item.split(""="") for item in s.split("";""))
</code></pre>

<p><strong>[Edit]</strong>  From your update you indicate you may need to handle quoting.  This does complicate things, depending on what the exact format you are looking for is (what quote chars are accepted, what escape chars etc).  You may want to look at the csv module to see if it can cover your format.  Here's an example:  (Note that the API is a little clunky for this example, as CSV is designed to iterate through a sequence of records, hence the .next() calls I'm making to just look at the first line.  Adjust to suit your needs):</p>

<pre><code>&gt;&gt;&gt; s = ""Name1='Value=2';Name2=Value2;Name3=Value3""

&gt;&gt;&gt; dict(csv.reader([item], delimiter='=', quotechar=""'"").next() 
         for item in csv.reader([s], delimiter=';', quotechar=""'"").next())

{'Name2': 'Value2', 'Name3': 'Value3', 'Name1': 'Value1=2'}
</code></pre>

<p>Depending on the exact structure of your format, you may need to write your own simple parser however.</p>
"
56850,"<p>Formatting works correctly even without having to round:</p>

<pre><code>""%.1f"" % n
</code></pre>
"
304896,"<p>Just put this in the first line of your script :</p>

<pre><code>#!/usr/bin/env python
</code></pre>

<p>Make the file executable with</p>

<pre><code>chmod +x myfile.py
</code></pre>

<p>Execute with</p>

<pre><code>./myfile.py
</code></pre>
"
237312,"<p>Jim's answer to <a href=""http://stackoverflow.com/questions/83983/why-isnt-the-len-function-inherited-by-dictionaries-and-lists-in-python"">this question</a> may help; I copy it here. Quoting Guido van Rossum:</p>

<blockquote>
  <p>First of all, I chose len(x) over x.len() for HCI reasons (def &#95;&#95;len&#95;&#95;() came much later). There are two intertwined reasons actually, both HCI:</p>
  
  <p>(a) For some operations, prefix notation just reads better than postfix â prefix (and infix!) operations have a long tradition in mathematics which likes notations where the visuals help the mathematician thinking about a problem. Compare the easy with which we rewrite a formula like x*(a+b) into x*a + x*b to the clumsiness of doing the same thing using a raw OO notation.</p>
  
  <p>(b) When I read code that says len(x) I know that it is asking for the length of something. This tells me two things: the result is an integer, and the argument is some kind of container. To the contrary, when I read x.len(), I have to already know that x is some kind of container implementing an interface or inheriting from a class that has a standard len(). Witness the confusion we occasionally have when a class that is not implementing a mapping has a get() or keys() method, or something that isnât a file has a write() method.</p>
  
  <p>Saying the same thing in another way, I see âlenâ as a built-in operation. Iâd hate to lose that. /â¦/</p>
</blockquote>
"
127972,"<p>Note in Python 2.6+ and Py3K, the %f character catches microseconds.</p>

<pre><code>&gt;&gt;&gt; datetime.datetime.strptime(""2008-09-03T20:56:35.450686Z"", ""%Y-%m-%dT%H:%M:%S.%fZ"")
</code></pre>

<p>See issue <a href=""http://bugs.python.org/issue1158"">here</a></p>
"
323905,"<p>According to the docs, your second attempt should work:</p>

<blockquote>
  <p>To refer to models defined in another application, you must instead explicitly specify the application label. For example, if the Manufacturer model above is defined in another application called production, you'd need to use:</p>
</blockquote>

<pre><code>class Car(models.Model):
    manufacturer = models.ForeignKey('production.Manufacturer')
</code></pre>

<p>Have you tried putting it into quotes?</p>
"
88331,"<p><strong>Update:</strong> <a href=""http://django-configurations.readthedocs.org/en/latest/"">django-configurations</a> has been released which is probably a better option for most people than doing it manually.</p>

<p>If you would prefer to do things manually, my earlier answer still applies:</p>

<p>I have multiple settings files.</p>

<ul>
<li><code>settings_local.py</code> - host-specific configuration, such as database name, file paths, etc.</li>
<li><code>settings_development.py</code> - configuration used for development, e.g. <code>DEBUG = True</code>.</li>
<li><code>settings_production.py</code> - configuration used for production, e.g. <code>SERVER_EMAIL</code>.</li>
</ul>

<p>I tie these all together with a <code>settings.py</code> file that firstly imports <code>settings_local.py</code>, and then one of the other two.  It decides which to load by two settings inside <code>settings_local.py</code> - <code>DEVELOPMENT_HOSTS</code> and <code>PRODUCTION_HOSTS</code>.  <code>settings.py</code> calls <code>platform.node()</code> to find the hostname of the machine it is running on, and then looks for that hostname in the lists, and loads the second settings file depending on which list it finds the hostname in.</p>

<p>That way, the only thing you really need to worry about is keeping the <code>settings_local.py</code> file up to date with the host-specific configuration, and everything else is handled automatically.</p>

<p>Check out an example <a href=""http://github.com/JimDabell/lojban-website/tree/master/lojban"">here</a>.</p>
"
117264,"<p>There are three options:</p>

<pre><code>&gt;&gt;&gt; 4 / float(100)
0.04
&gt;&gt;&gt; 4 / 100.0
0.04
</code></pre>

<p>which is the same behavior as the C, C++, Java etc, or </p>

<pre><code>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; 4 / 100
0.04
</code></pre>

<p>You can also activate this behavior by passing the argument <code>-Qnew</code> to the Python interpreter:</p>

<pre><code>$ python -Qnew
&gt;&gt;&gt; 4 / 100
0.04
</code></pre>

<p>The second option will be the default in Python 3.0. If you want to have the old integer division, you have to use the <code>//</code> operator. </p>

<p><strong>Edit</strong>: added section about <code>-Qnew</code>, thanks to <a href=""http://stackoverflow.com/users/6899/"">Î¤ÎÎ©Î¤ÎÎÎÎ¥</a>!</p>
"
74084,"<p>Header injection isn't a factor in how you send the mail, it's a factor in how you construct the mail.  Check the <a href=""https://docs.python.org/2/library/email.html"">email</a> package, construct the mail with that, serialise it, and send it to <code>/usr/sbin/sendmail</code> using the <a href=""https://docs.python.org/2/library/subprocess.html"">subprocess</a> module:</p>

<pre><code>from email.mime.text import MIMEText
from subprocess import Popen, PIPE

msg = MIMEText(""Here is the body of my message"")
msg[""From""] = ""me@example.com""
msg[""To""] = ""you@example.com""
msg[""Subject""] = ""This is the subject.""
p = Popen([""/usr/sbin/sendmail"", ""-t"", ""-oi""], stdin=PIPE)
p.communicate(msg.as_string())
</code></pre>
"
126535,"<p>Yep, that would be the <a href=""http://docs.python.org/library/functions.html#enumerate""><code>enumerate</code></a> function! Or more to the point, you need to do:</p>

<pre><code>list(enumerate([3,7,19]))

[(0, 3), (1, 7), (2, 19)]
</code></pre>
"
109106,"<p>Every object has a <code>__dict__</code> variable containing all the variables and its values in it.</p>

<p>Try this</p>

<pre><code>&gt;&gt;&gt; hi_obj = hi()
&gt;&gt;&gt; hi_obj.__dict__.keys()
</code></pre>
"
295481,"<p>Another simple approach is to have your test override urllib's <code>urlopen()</code> function.  For example, if your module has</p>

<pre><code>import urllib

def some_function_that_uses_urllib():
    ...
    urllib.urlopen()
    ...
</code></pre>

<p>You could define your test like this:</p>

<pre><code>import mymodule

def dummy_urlopen(url):
    ...

mymodule.urllib.urlopen = dummy_urlopen
</code></pre>

<p>Then, when your tests invoke functions in <code>mymodule</code>, <code>dummy_urlopen()</code> will be called instead of the real <code>urlopen()</code>.  Dynamic languages like Python make it super easy to stub out methods and classes for testing.</p>

<p>See my blog posts at <a href=""http://softwarecorner.wordpress.com/"">http://softwarecorner.wordpress.com/</a> for more information about stubbing out dependencies for tests.</p>
"
34467,"<p>You can use the built in <code>dir()</code> function to get a list of all the attributes a module has.  Try this at the command line to see how it works.</p>

<pre><code>&gt;&gt;&gt; import moduleName
&gt;&gt;&gt; dir(moduleName)
</code></pre>

<p>Also, you can use the <code>hasattr(module_name, ""attr_name"")</code> function to find out if a module has a specific attribute.</p>

<p>See the <a href=""http://www.ibm.com/developerworks/library/l-pyint.html"">Guide to Python introspection</a> for more information.</p>
"
231788,"<p>It's returning a generator. I'm not particularly familiar with Python, but I believe it's the same kind of thing as <a href=""http://csharpindepth.com/Articles/Chapter11/StreamingAndIterators.aspx"">C#'s iterator blocks</a> if you're familiar with those.</p>

<p>There's an <a href=""http://www.ibm.com/developerworks/library/l-pycon.html"">IBM article</a> which explains it reasonably well (for Python) as far as I can see.</p>

<p>The key idea is that the compiler/interpreter/whatever does some trickery so that as far as the caller is concerned, they can keep calling next() and it will keep returning values - <em>as if the generator method was paused</em>. Now obviously you can't really ""pause"" a method, so the compiler builds a state machine for you to remember where you currently are and what the local variables etc look like. This is much easier than writing an iterator yourself.</p>
"
196392,"<pre><code>def is_ascii(s):
    return all(ord(c) &lt; 128 for c in s)
</code></pre>
"
295146,"<p>This whitelist approach (ie, allowing only the chars present in valid_chars) will work if there aren't limits on the formatting of the files or combination of valid chars that are illegal (like ""..""), for example, what you say would allow a filename named "" . txt"" which I think is not valid on Windows. As this is the most simple approach I'd try to remove whitespace from the valid_chars and prepend a known valid string in case of error, any other approach will have to know about what is allowed where to cope with <a href=""http://stackoverflow.com/questions/62771/how-check-if-given-string-is-legal-allowed-file-name-under-windows"">Windows file naming limitations</a> and thus be a lot more complex. </p>

<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; valid_chars = ""-_.() %s%s"" % (string.ascii_letters, string.digits)
&gt;&gt;&gt; valid_chars
'-_.() abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
&gt;&gt;&gt; filename = ""This Is a (valid) - filename%$&amp;$ .txt""
&gt;&gt;&gt; ''.join(c for c in filename if c in valid_chars)
'This Is a (valid) - filename .txt'
</code></pre>
"
97530,"<p>Remember, use the timeit module to test which of small snipps of code is faster!</p>

<pre><code>$ python -m timeit 'for i in range(1000000):' ' pass'
10 loops, best of 3: 90.5 msec per loop
$ python -m timeit 'for i in xrange(1000000):' ' pass'
10 loops, best of 3: 51.1 msec per loop
</code></pre>

<p>Personally, I always use range(), unless I were dealing with <em>really</em> huge lists -- as you can see, time-wise, for a list of a million entries, the extra overhead is only 0.04 seconds.  And as Corey points out, in Python 3.0 xrange will go away and range will give you nice iterator behaviour anyway.</p>
"
89919,"<p>A regular expression will do the trick with very little code:</p>

<pre><code>import re

...

if re.match(""^[A-Za-z0-9_-]*$"", my_little_string):
    # do something here
</code></pre>
"
317206,"<p>See this <a href=""https://pypi.python.org/pypi/python-ping/2011.10.17.376a019"">pure Python ping</a> by <a href=""http://www.mondoinfo.com/"">Matthew Dixon Cowles</a> and <a href=""http://www.jensdiemer.de/"">Jens Diemer</a>.  Also, remember that Python requires root to spawn ICMP (i.e. ping) sockets in linux.</p>

<pre><code>import ping, socket
try:
    ping.verbose_ping('www.google.com', count=3)
    delay = ping.Ping('www.wikipedia.org', timeout=2000).do()
except socket.error, e:
    print ""Ping Error:"", e
</code></pre>

<p>The source code itself is easy to read, see the implementations of <code>verbose_ping</code> and of <code>Ping.do</code> for inspiration.</p>
"
69596,"<p>To do this in Python (i.e. not wrapping scp through subprocess.Popen or similar) with the <a href=""http://www.lag.net/paramiko/"">Paramiko</a> library, you would do something like this:</p>

<pre><code>import os
import paramiko

ssh = paramiko.SSHClient() 
ssh.load_host_keys(os.path.expanduser(os.path.join(""~"", "".ssh"", ""known_hosts"")))
ssh.connect(server, username=username, password=password)
sftp = ssh.open_sftp()
sftp.put(localpath, remotepath)
sftp.close()
ssh.close()
</code></pre>

<p>(You would probably want to deal with unknown hosts, errors, creating any directories necessary, and so on).</p>
"
339012,"<p>For numbers:</p>

<pre><code>print ""%05d"" % number
</code></pre>

<p>See also: <a href=""http://docs.python.org/library/string.html#string-formatting"">Python: String formatting</a>.</p>

<p><strong>EDIT</strong>: It's worth noting that as of <strike>yesterday</strike> December 3rd, 2008, this method of formatting is deprecated in favour of the <code>format</code> string method:</p>

<pre><code>print(""{0:05d}"".format(number)) # or
print(format(number, ""05d""))
</code></pre>

<p>See <a href=""http://www.python.org/dev/peps/pep-3101/"">PEP 3101</a> for details.</p>
"
140106,"<p>Once you've <code>import</code>ed the module, you can just do:</p>

<pre><code> help(modulename)
</code></pre>

<p>... To get the docs on all the functions at once, interactively.  Or you can use:</p>

<pre><code> dir(modulename)
</code></pre>

<p>... To simply list the names of all the functions and variables defined in the module.</p>
"
102285,"<p>I used <a href=""http://eyed3.nicfit.net/"">eyeD3</a> the other day with a lot of success.  I found that it could add artwork to the ID3 tag which the other modules I looked at couldn't.  You'll have to download the tar and execute <code>python setup.py install</code> from the source folder.  </p>

<p>Relevant examples from the website are below.</p>

<p>Reading the contents of an mp3 file containing either v1 or v2 tag info:</p>

<pre><code> import eyeD3
 tag = eyeD3.Tag()
 tag.link(""/some/file.mp3"")
 print tag.getArtist()
 print tag.getAlbum()
 print tag.getTitle()
</code></pre>

<p>Read an mp3 file (track length, bitrate, etc.) and access it's tag:</p>

<pre><code>if eyeD3.isMp3File(f):
     audioFile = eyeD3.Mp3AudioFile(f)
     tag = audioFile.getTag()
</code></pre>

<p>Specific tag versions can be selected:</p>

<pre><code> tag.link(""/some/file.mp3"", eyeD3.ID3_V2)
 tag.link(""/some/file.mp3"", eyeD3.ID3_V1)
 tag.link(""/some/file.mp3"", eyeD3.ID3_ANY_VERSION)  # The default.
</code></pre>

<p>Or you can iterate over the raw frames:</p>

<pre><code> tag = eyeD3.Tag()
 tag.link(""/some/file.mp3"")
 for frame in tag.frames:
    print frame
</code></pre>

<p>Once a tag is linked to a file it can be modified and saved:</p>

<pre><code> tag.setArtist(u""Cro-Mags"")
 tag.setAlbum(u""Age of Quarrel"")
 tag.update()
</code></pre>

<p>If the tag linked in was v2 and you'd like to save it as v1:</p>

<pre><code> tag.update(eyeD3.ID3_V1_1)
</code></pre>

<p>Read in a tag and remove it from the file:</p>

<pre><code> tag.link(""/some/file.mp3"")
 tag.remove()
 tag.update()
</code></pre>

<p>Add a new tag:</p>

<pre><code> tag = eyeD3.Tag()
 tag.link('/some/file.mp3')    # no tag in this file, link returned False
 tag.header.setVersion(eyeD3.ID3_V2_3)
 tag.setArtist('Fugazi')
 tag.update()
</code></pre>
"
125713,"<p>Depends on what you want to do.  To append you can open it with ""a"":</p>

<pre><code> with open(""foo.txt"", ""a"") as f:
     f.write(""new line\n"")
</code></pre>

<p>If you want to preprend something you have to read from the file first:</p>

<pre><code>with open(""foo.txt"", ""r+"") as f:
     old = f.read() # read everything in the file
     f.seek(0) # rewind
     f.write(""new line\n"" + old) # write the new line before
</code></pre>
"
142566,"<p>I don't endorse this solution in any way, shape or form.  But if you add a variable to the <code>__builtin__</code> module, it will be accessible as if a global from any other module that includes <code>__builtin__</code> -- which is all of them, by default.</p>

<p>a.py contains</p>

<pre><code>print foo
</code></pre>

<p>b.py contains</p>

<pre><code>import __builtin__
__builtin__.foo = 1
import a
</code></pre>

<p>The result is that ""1"" is printed.</p>

<p><strong>Edit:</strong> The <code>__builtin__</code> module is available as the local symbol <code>__builtins__</code> -- that's the reason for the discrepancy between two of these answers. Also note that <code>__builtin__</code> has been renamed to <code>builtins</code> in python3.</p>
"
21468,"<p>From the <a href=""https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.choices"" rel=""nofollow"">Django documentation</a>:</p>

<pre><code>MAYBECHOICE = (
    ('y', 'Yes'),
    ('n', 'No'),
    ('u', 'Unknown'),
)
</code></pre>

<p>And you define a charfield in your model :</p>

<pre><code>married = models.CharField(max_length=1, choices=MAYBECHOICE)
</code></pre>

<p>You can do the same with integer fields if you don't like to have letters
in your db.</p>

<p>In that case, rewrite your choices:</p>

<pre><code>MAYBECHOICE = (
    (0, 'Yes'),
    (1, 'No'),
    (2, 'Unknown'),
)
</code></pre>
"
32939,"<p>i use something like this:</p>

<pre><code>import unittest

l = [[""foo"", ""a"", ""a"",], [""bar"", ""a"", ""b""], [""lee"", ""b"", ""b""]]

class TestSequense(unittest.TestCase):
    pass

def test_generator(a, b):
    def test(self):
        self.assertEqual(a,b)
    return test

if __name__ == '__main__':
    for t in l:
        test_name = 'test_%s' % t[0]
        test = test_generator(t[1], t[2])
        setattr(TestSequense, test_name, test)
    unittest.main()
</code></pre>

<p>The <a href=""https://github.com/wolever/nose-parameterized""><code>nose-parameterized</code></a> package can be used to automate this process:</p>

<pre><code>from nose_parameterized import parameterized

class TestSequence(unittest.TestCase):
    @parameterized.expand([
        [""foo"", ""a"", ""a"",],
        [""bar"", ""a"", ""b""],
        [""lee"", ""b"", ""b""],
    ])
    def test_sequence(self, name, a, b):
        self.assertEqual(a,b)
</code></pre>

<p>Which will generate the tests:</p>

<pre><code>test_sequence_0_foo (__main__.TestSequence) ... ok
test_sequence_1_bar (__main__.TestSequence) ... FAIL
test_sequence_2_lee (__main__.TestSequence) ... ok

======================================================================
FAIL: test_sequence_1_bar (__main__.TestSequence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/usr/local/lib/python2.7/site-packages/nose_parameterized/parameterized.py"", line 233, in &lt;lambda&gt;
    standalone_func = lambda *a: func(*(a + p.args), **p.kwargs)
  File ""x.py"", line 12, in test_sequence
    self.assertEqual(a,b)
AssertionError: 'a' != 'b'
</code></pre>
"
42597,"<p>Look at the definition of <a href=""http://docs.python.org/library/re.html#re.sub""><code>re.sub</code></a>:</p>

<pre><code>sub(pattern, repl, string[, count])
</code></pre>

<p>The 4th argument is the count, you are using <code>re.MULTILINE</code> (which is 8) as the count, not as a flag.</p>

<p>You have to compile your regex if you wish to use flags.</p>

<pre><code>re.sub(re.compile('^//', re.MULTILINE), '', s)
</code></pre>

<p>A <code>flags</code> argument was added in Python 2.7, so the full definition is now:</p>

<pre><code>re.sub(pattern, repl, string[, count, flags])
</code></pre>

<p>Which means that:</p>

<pre><code>re.sub('^//', '', s, flags=re.MULTILINE)
</code></pre>

<p>works.</p>
"
121671,"<p>The answer was given right there in the PEP [ed: this passage has been edited out in <a href=""https://hg.python.org/peps/rev/fb24c80e9afb#l1.75"">2013</a>]. I quote:</p>

<blockquote>
  <p>The <strong>most popular</strong> way of indenting Python is with spaces only.</p>
</blockquote>

<p>What other underlying reason do you need?</p>

<p>To put it less bluntly: Consider also the scope of the PEP as stated in the very first paragraph:</p>

<blockquote>
  <p>This document gives coding conventions for the Python code comprising the standard library in the main Python distribution.</p>
</blockquote>

<p>The intention is to make <em>all code that goes in the official python distribution</em> consistently formatted (I hope we can agree that this is universally a Good Thingâ¢).</p>

<p>Since the decision between spaces and tabs for an individual programmer is a) really a matter of taste and b) easily dealt with by technical means (editors, conversion scripts, etc.), there is a clear way to end all discussion: chose one.</p>

<p>Guido was the one to choose. He didn't even have to give a reason, but he still did by referring to empirical data.</p>

<p>For all other purposes you can either take this PEP as a recommendation, or you can ignore it -- your choice, or your team's, or your team leaders.</p>

<p>But if I may give you one advice: don't mix'em ;-) [ed: Mixing tabs and spaces is no longer an option.]</p>
"
64890,"<p>The script I use is quite similar; I post it here as an example of how to use the email.* modules to generate MIME messages; so this script can be easily modified to attach pictures, etc.</p>

<p>I rely on my ISP to add the date time header.</p>

<p>My ISP requires me to use a secure smtp connection to send mail, I rely on the ssmtplib module (downloadable at <a href=""http://www1.cs.columbia.edu/~db2501/ssmtplib.py"" rel=""nofollow"">http://www1.cs.columbia.edu/~db2501/ssmtplib.py</a>)</p>

<p>As in your script, the username and password, (given dummy values below), used to authenticate on the SMTP server, are in plain text in the source. This is a security weakness; but the best alternative depends on how careful you need (want?) to be about protecting these.</p>

<p>=======================================</p>

<pre><code>#! /usr/local/bin/python


SMTPserver = 'smtp.att.yahoo.com'
sender =     'me@my_email_domain.net'
destination = ['recipient@her_email_domain.com']

USERNAME = ""USER_NAME_FOR_INTERNET_SERVICE_PROVIDER""
PASSWORD = ""PASSWORD_INTERNET_SERVICE_PROVIDER""

# typical values for text_subtype are plain, html, xml
text_subtype = 'plain'


content=""""""\
Test message
""""""

subject=""Sent from Python""

import sys
import os
import re

from smtplib import SMTP_SSL as SMTP       # this invokes the secure SMTP protocol (port 465, uses SSL)
# from smtplib import SMTP                  # use this for standard SMTP protocol   (port 25, no encryption)

# old version
# from email.MIMEText import MIMEText
from email.mime.text import MIMEText

try:
    msg = MIMEText(content, text_subtype)
    msg['Subject']=       subject
    msg['From']   = sender # some SMTP servers will do this automatically, not all

    conn = SMTP(SMTPserver)
    conn.set_debuglevel(False)
    conn.login(USERNAME, PASSWORD)
    try:
        conn.sendmail(sender, destination, msg.as_string())
    finally:
        conn.quit()

except Exception, exc:
    sys.exit( ""mail failed; %s"" % str(exc) ) # give a error message
</code></pre>
"
238111,"<p>Well, when <code>DEBUG = False</code>, Django will automatically mail a full traceback of any error to each person listed in the <code>ADMINS</code> setting, which gets you notifications pretty much for free. If you'd like more fine-grained control, you can write and add to your settings a middleware class which defines a method named <code>process_exception()</code>, which will have access to the exception that was raised:</p>

<p><a href=""http://docs.djangoproject.com/en/dev/topics/http/middleware/#process-exception"">http://docs.djangoproject.com/en/dev/topics/http/middleware/#process-exception</a></p>

<p>Your <code>process_exception()</code> method can then perform whatever type of logging you'd like: writing to console, writing to a file, etc., etc.</p>

<p>Edit: though it's a bit less useful, you can also listen for the <code>got_request_exception</code> signal, which will be sent whenever an exception is encountered during request processing:</p>

<p><a href=""http://docs.djangoproject.com/en/dev/ref/signals/#got-request-exception"">http://docs.djangoproject.com/en/dev/ref/signals/#got-request-exception</a></p>

<p>This does <em>not</em> give you access to the exception object, however, so the middleware method is much easier to work with.</p>
"
120692,"<pre><code>import os

for filename in os.listdir(""C:\\temp""):
    print  filename
</code></pre>
"
8699,"<p>The <a href=""http://lxml.de/"">lxml package</a> supports xpath.  It seems to work pretty well, although I've had some trouble with the self:: axis.  There's also <a href=""http://pypi.python.org/pypi/Amara/1.1.6"">Amara</a>, but I haven't used it personally.</p>
"
346237,"<p>You can use Python in interactive mode to search for solutions.</p>

<p>if <code>f</code> is your object, you can enter <code>dir(f)</code> to see all methods and attributes. There's one called <code>read</code>. Enter <code>help(f.read)</code> and it tells you that <code>f.read()</code> is the way to retrieve a string from an file object.</p>
"
218625,"<p>In CPython, the number of arguments is</p>

<pre><code>aMethod.func_code.co_argcount
</code></pre>

<p>and their names are in the beginning of</p>

<pre><code>aMethod.func_code.co_varnames
</code></pre>

<p>These are implementation details of CPython, so this probably does not work in other implementations of Python, such as IronPython and Jython.</p>

<p>One portable way to admit ""pass-through"" arguments is to define your function with the signature <code>func(*args, **kwargs)</code>. This is used a lot in e.g. matplotlib, where the outer API layer passes lots of keyword arguments to the lower-level API.</p>
"
111966,"<p>Try to use <code>ftp.nlst(dir)</code>.</p>

<p>However, note that if the folder is empty, it might throw an error:</p>

<pre><code>files = []

try:
    files = ftp.nlst()
except ftplib.error_perm, resp:
    if str(resp) == ""550 No files found"":
        print ""No files in this directory""
    else:
        raise

for f in files:
    print f
</code></pre>
"
38092,"<p>The typesafe enum pattern which was used in Java pre-JDK 5 has a
number of advantages. Much like in Alexandru's answer, you create a
class and class level fields are the enum values; however, the enum
values are instances of the class rather than small integers. This has
the advantage that your enum values don't inadvertently compare equal
to small integers, you can control how they're printed, add arbitrary
methods if that's useful and make assertions using isinstance:</p>

<pre><code>class Animal:
   def __init__(self, name):
       self.name = name

   def __str__(self):
       return self.name

   def __repr__(self):
       return ""&lt;Animal: %s&gt;"" % self

Animal.DOG = Animal(""dog"")
Animal.CAT = Animal(""cat"")

&gt;&gt;&gt; x = Animal.DOG
&gt;&gt;&gt; x
&lt;Animal: dog&gt;
&gt;&gt;&gt; x == 1
False
</code></pre>

<hr>

<p>A recent <a href=""http://mail.python.org/pipermail/python-dev/2010-November/105873.html"">thread on python-dev</a> pointed out there are a couple of enum libraries in the wild, including:</p>

<ul>
<li><a href=""http://packages.python.org/flufl.enum/docs/using.html"">flufl.enum</a></li>
<li><a href=""http://pypi.python.org/pypi/lazr.enum"">lazr.enum</a></li>
<li>... and the imaginatively named <a href=""http://pypi.python.org/pypi/enum/"">enum</a></li>
</ul>
"
112713,"<p><a href=""http://www.pyinstaller.org/"">PyInstaller</a> will create a single .exe file with no dependencies; use the <code>--onefile</code> option. It does this by packing all the needed shared libs into the executable, and unpacking them before it runs, just as you describe (EDIT: py2exe also has this feature, see <a href=""http://stackoverflow.com/questions/112698/py2exe-generate-single-executable-file#113014"">minty's answer</a>)</p>

<p>I use the version of PyInstaller from svn, since the latest release (1.3) is somewhat outdated. It's been working really well for an app which depends on PyQt, PyQwt, numpy, scipy and a few more.</p>
"
252704,"<p><code>append</code> appends a single element. <code>extend</code> appends a list of elements.</p>

<p>Note that if you pass a list to append, it still adds one element:</p>

<pre><code>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; a.append([4, 5, 6])
&gt;&gt;&gt; a
[1, 2, 3, [4, 5, 6]]
</code></pre>
"
78858,"<p>You might want to do this when the ""inner"" class is a one-off, which will never be used outside the <em>definition</em> of the outer class. For example to use a metaclass, it's sometimes handy to do</p>

<pre><code>class Foo(object):
    class __metaclass__(type):
        ....
</code></pre>

<p>instead of defining a metaclass separately, if you're only using it once.</p>

<p>The only other time I've used nested classes like that, I used the outer class only as a namespace to group a bunch of closely related classes together:</p>

<pre><code>class Group(object):
    class cls1(object):
       ...

    class cls2(object):
       ...
</code></pre>

<p>Then from another module, you can import Group and refer to these as Group.cls1, Group.cls2 etc. However one might argue that you can accomplish exactly the same (perhaps in a less confusing way) by using a module.</p>
"
73680,"<p>Another way is:</p>

<pre><code>raise SystemExit
</code></pre>
"
232111,"<p>An example in plain language. I will provide a correspondence between high-level human concepts to low-level python concepts.</p>

<p>I want to operate on a sequence of numbers, but I don't want to bother my self with the creation of that sequence, I want only to focus on the operation I want to do. So, I do the following:</p>

<ul>
<li>I call you and tell you that I want a sequence of numbers which is produced in a specific way, and I let you know what the algorithm is.<br />
<b>This step corresponds to <code>def</code>ining the generator function, i.e. the function containing a <code>yield</code>.</b></li>
<li>Sometime later, I tell you, ""ok, get ready to tell me the sequence of numbers"".<br />
<b>This step corresponds to calling the generator function which returns a generator object.</b> Note that you don't tell me any numbers yet, you just grab your paper and pencil.</li>
<li>I ask you, ""tell me the next number"", and you tell me the first number; after that, you wait for me to ask you for the next number. It's your job to remember where you were, what numbers you have already said, what is the next number. I don't care about the details.<br />
<b>This step corresponds to calling <code>.next()</code> on the generator object.</b></li>
<li>â¦ repeat previous step, untilâ¦</li>
<li>eventually, you might come to an end. You don't tell me a number, you just shout, ""hold your horses! I'm done! No more numbers!""<br />
<b>This step corresponds to the generator object ending its job, and raising a <code>StopIteration</code> exception</b> The generator function does not need to raise the exception, it's raised automatically when the function ends or issues a <code>return</code>.</li>
</ul>

<p>This is what a generator does (a function that contains a <code>yield</code>); it starts executing, pauses whenever it does a <code>yield</code>, and when asked for a <code>.next()</code> value it continues from the point it was last. It fits perfectly by design with the iterator protocol of python, which describes how to sequentially request for values.</p>

<p>The most famous user of the iterator protocol is the <code>for</code> command in python. So, whenever you do a:</p>

<pre><code>for item in sequence:
</code></pre>

<p>it doesn't matter if <code>sequence</code> is a list, a string, a dictionary or a generator <em>object</em> like described above; the result is the same: you read items off a sequence one by one.</p>

<p>Note that <code>def</code>ining a function which contains a <code>yield</code> keyword is not the only way to create a generator; it's just the easiest way to create one.</p>

<p>For more accurate information, read about <a href=""http://docs.python.org/library/stdtypes.html#iterator-types"">iterator types</a>, the <a href=""http://docs.python.org/reference/simple_stmts.html#yield"">yield statement</a> and <a href=""http://docs.python.org/glossary.html#term-generator"">generators</a> in the Python documentation.</p>
"
228850,"<p>The question you've asked (how to iterate through the alphabet) is not the same question as the problem you're trying to solve (how to count the frequency of letters in a string).</p>

<p>You can use string.lowercase, as other posters have suggested:</p>

<pre><code>import string
allTheLetters = string.lowercase
</code></pre>

<p>To do things the way you're ""used to"", treating letters as numbers, you can use the ""ord"" and ""chr"" functions.  There's absolutely no reason to ever do exactly this, but maybe it comes closer to what you're actually trying to figure out:</p>

<pre><code>def getAllTheLetters(begin='a', end='z'):
    beginNum = ord(begin)
    endNum = ord(end)
    for number in xrange(beginNum, endNum+1):
        yield chr(number)
</code></pre>

<p>You can tell it does the right thing because this code prints <code>True</code>:</p>

<pre><code>import string
print ''.join(getAllTheLetters()) == string.lowercase
</code></pre>

<p>But, to solve the problem you're actually trying to solve, you want to use a dictionary and collect the letters as you go:</p>

<pre><code>from collections import defaultdict    
def letterOccurrances(string):
    frequencies = defaultdict(lambda: 0)
    for character in string:
        frequencies[character.lower()] += 1
    return frequencies
</code></pre>

<p>Use like so:</p>

<pre><code>occs = letterOccurrances(""Hello, world!"")
print occs['l']
print occs['h']
</code></pre>

<p>This will print '3' and '1' respectively.</p>

<p>Note that this works for unicode as well:</p>

<pre><code># -*- coding: utf-8 -*-
occs = letterOccurrances(u""hÃ©ÄºÄºÃ³, áºÃ³ÅÄºd!"")
print occs[u'l']
print occs[u'Äº']
</code></pre>

<p>If you were to try the other approach on unicode (incrementing through every character) you'd be waiting a long time; there are millions of unicode characters.</p>

<p>To implement your original function (print the counts of each letter in alphabetical order) in terms of this:</p>

<pre><code>def alphCount(text):
    for character, count in sorted(letterOccurrances(text).iteritems()):
        print ""%s: %s"" % (character, count)

alphCount(""hello, world!"")
</code></pre>
"
45126,"<p>You need to put</p>

<pre><code>from project import Project
</code></pre>

<p>in <code>controllers/__init__.py</code>.</p>

<p>Note that when <a href=""http://www.python.org/dev/peps/pep-0328/"" rel=""nofollow"">Absolute imports</a> become the default (Python 2.7?), you will want to add a dot before the module name (to avoid collisions with a top-level model named <code>project</code>), i.e.,</p>

<pre><code>from .project import Project
</code></pre>
"
102634,"<p>One of the reasons to use generator is to make the solution clearer for some kind of solutions.</p>

<p>The other is to treat results one at a time, avoiding building huge lists of results that you would process separated anyway. </p>

<p>If you have a fibonacci-up-to-n function like this:</p>

<pre><code># function version
def fibon(n):
    a = b = 1
    result = []
    for i in xrange(n):
        result.append(a)
        a, b = b, a + b
    return result
</code></pre>

<p>You can more easily write the function as this:</p>

<pre><code># generator version
def fibon(n):
    a = b = 1
    for i in xrange(n):
        yield a
        a, b = b, a + b
</code></pre>

<p>The function is clearer. And if you use the function like this:</p>

<pre><code>for x in fibon(1000000):
    print x,
</code></pre>

<p>in this example, if using the generator version, the whole 1000000 item list won't be created at all, just one value at a time. That would not be the case when using the list version, where a list would be created first.</p>
"
180816,"<p>You can <a href=""http://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.save_as"">save as</a> by just enabling adding this to your ModelAdmin:</p>

<pre><code>save_as = True
</code></pre>

<p>This replaces the ""Save and add another"" button with a ""Save as"" button.  ""Save as"" means the object will be saved as a new object (with a new ID), rather than the old object.</p>
"
118395,"<p>You'd use it in your own class, since no builtin class makes use of it.</p>

<p>Numpy uses it, as stated in the <a href=""http://wiki.scipy.org/Numpy_Example_List_With_Doc#head-490d781b49b68b300eedaef32369fae7d58627fb"">documentation</a>. Some examples <a href=""http://wiki.scipy.org/Tentative_NumPy_Tutorial#head-864862d3f2bb4c32f04260fac61eb4ef34788c4c"">here</a>.</p>

<p>In your own class, you'd use it like this:</p>

<pre><code>&gt;&gt;&gt; class TestEllipsis(object):
...     def __getitem__(self, item):
...         if item is Ellipsis:
...             return ""Returning all items""
...         else:
...             return ""return %r items"" % item
... 
&gt;&gt;&gt; x = TestEllipsis()
&gt;&gt;&gt; print x[2]
return 2 items
&gt;&gt;&gt; print x[...]
Returning all items
</code></pre>

<p>Of course, there is the <a href=""https://docs.python.org/library/constants.html#Ellipsis"">python documentation</a>, and <a href=""https://docs.python.org/reference/expressions.html#grammar-token-slicing"">language reference</a>. But those aren't very helpful. </p>
"
295150,"<p>What is the reason to use the strings as file names? If human readability is not a factor I would go with base64 module which can produce file system safe strings. It won't be readable but you won't have to deal with collisions and it is reversible.</p>

<pre><code>import base64
file_name_string = base64.urlsafe_b64encode(your_string)
</code></pre>

<p><strong>Update</strong>: Changed based on Matthew comment.</p>
"
189664,"<p>First, ordinary logic is helpful.  </p>

<p>If, for some reason, the terminating conditions can't be worked out, exceptions are a fall-back plan.  </p>

<pre><code>class GetOutOfLoop( Exception ):
    pass

try:
    done= False
    while not done:
        isok= False
        while not (done or isok):
            ok = get_input(""Is this ok? (y/n)"")
            if ok in (""y"", ""Y"") or ok in (""n"", ""N"") : 
                done= True # probably better
                raise GetOutOfLoop
        # other stuff
except GetOutOfLoop:
    pass
</code></pre>

<p>For this specific example, an exception may not be necessary.  </p>

<p>On other other hand, we often have ""Y"", ""N"" and ""Q"" options in character-mode applications.  For the ""Q"" option, we want an immediate exit.  That's more exceptional.</p>
"
35993,"<p>You can use a tuple for a lot of things where you would use a struct in C (something like x,y coordinates or RGB colors for example).</p>

<p>For everything else you can use dictionary, or a utility class like <a href=""http://code.activestate.com/recipes/52308/"">this one</a>:</p>

<pre><code>&gt;&gt;&gt; class Bunch:
...     def __init__(self, **kwds):
...         self.__dict__.update(kwds)
...
&gt;&gt;&gt; mystruct = Bunch(field1=value1, field2=value2)
</code></pre>

<p>I think the ""definitive"" discussion is <a href=""http://books.google.com/books?id=Q0s6Vgb98CQC&amp;lpg=PT212&amp;dq=Python%20Cookbook%20%22Collecting%20a%20Bunch%20of%20Named%20Items%22&amp;hl=en&amp;pg=PT213#v=onepage&amp;q&amp;f=false"">here</a>, in the published version of the Python Cookbook.</p>
"
157975,"<p><a href=""http://docs.python.org/lib/module-base64.html"">Base64 encoding</a> is in the standard library and will do to stop shoulder surfers:</p>

<pre><code>&gt;&gt;&gt; import base64
&gt;&gt;&gt; print base64.b64encode(""password"")
cGFzc3dvcmQ=
&gt;&gt;&gt; print base64.b64decode(""cGFzc3dvcmQ="")
password
</code></pre>
"
328389,"<p><a href=""http://www.aaronsw.com/2002/html2text/"">html2text</a> is a Python program that does a pretty good job at this.</p>
"
139198,"<p>The inspect module. Also see the <a href=""http://docs.python.org/2/library/pydoc.html""><code>pydoc</code></a> module, the <code>help()</code> function in the interactive interpreter and the <code>pydoc</code> command-line tool which generates the documentation you are after. You can just give them the class you wish to see the documentation of. They can also generate, for instance, HTML output and write it to disk.</p>
"
258511,"<p>Here is some code to download all the images from the supplied URL, and save them in the specified output folder. You can modify it to your own needs.</p>

<pre><code>""""""
dumpimages.py
    Downloads all the images on the supplied URL, and saves them to the
    specified output file (""/test/"" by default)

Usage:
    python dumpimages.py http://example.com/ [output]
""""""

from BeautifulSoup import BeautifulSoup as bs
import urlparse
from urllib2 import urlopen
from urllib import urlretrieve
import os
import sys

def main(url, out_folder=""/test/""):
    """"""Downloads all the images at 'url' to /test/""""""
    soup = bs(urlopen(url))
    parsed = list(urlparse.urlparse(url))

    for image in soup.findAll(""img""):
        print ""Image: %(src)s"" % image
        filename = image[""src""].split(""/"")[-1]
        parsed[2] = image[""src""]
        outpath = os.path.join(out_folder, filename)
        if image[""src""].lower().startswith(""http""):
            urlretrieve(image[""src""], outpath)
        else:
            urlretrieve(urlparse.urlunparse(parsed), outpath)

def _usage():
    print ""usage: python dumpimages.py http://example.com [outpath]""

if __name__ == ""__main__"":
    url = sys.argv[-1]
    out_folder = ""/test/""
    if not url.lower().startswith(""http""):
        out_folder = sys.argv[-1]
        url = sys.argv[-2]
        if not url.lower().startswith(""http""):
            _usage()
            sys.exit(-1)
    main(url, out_folder)
</code></pre>

<p><strong>Edit:</strong> You can specify the output folder now.</p>
"
145436,"<p>You should have a look at <a href=""http://www.boost.org/doc/libs/1_49_0/libs/python/doc/"">Boost.Python</a>, here is the short introdution taken from their website:</p>

<blockquote>
  <p>The Boost Python Library is a framework for interfacing Python and
  C++. It allows you to quickly and seamlessly expose C++ classes
  functions and objects to Python, and vice-versa, using no special
  tools -- just your C++ compiler. It is designed to wrap C++ interfaces
  non-intrusively, so that you should not have to change the C++ code at
  all in order to wrap it, making Boost.Python ideal for exposing
  3rd-party libraries to Python. The library's use of advanced
  metaprogramming techniques simplifies its syntax for users, so that
  wrapping code takes on the look of a kind of declarative interface
  definition language (IDL).</p>
</blockquote>
"
73465,"<pre><code>import operator
</code></pre>

<p>To sort the list of dictionaries by key='name':</p>

<pre><code>list_of_dicts.sort(key=operator.itemgetter('name'))
</code></pre>

<p>To sort the list of dictionaries by key='age':</p>

<pre><code>list_of_dicts.sort(key=operator.itemgetter('age'))
</code></pre>
"
68324,"<p>I like to quote Peters' Zen of Python.  ""Explicit is better than implicit.""</p>

<p>In Java and C++, '<code>this.</code>' can be deduced, except when you have variable names that make it impossible to deduce.   So you sometimes need it and sometimes don't.</p>

<p>Python elects to make things like this explicit rather than based on a rule.  </p>

<p>Additionally, since nothing is implied or assumed, parts of the implementation are exposed.  <code>self.__class__</code>, <code>self.__dict__</code> and other ""internal"" structures are available in an obvious way.</p>
"
263465,"<pre><code>[sum(a) for a in zip(*array)]
</code></pre>
"
141451,"<p>Use the <a href=""https://docs.python.org/2/library/stringio.html"" rel=""nofollow"">StringIO</a> module.  For example:</p>

<pre><code>&gt;&gt;&gt; from cStringIO import StringIO
&gt;&gt;&gt; f = StringIO('foo')
&gt;&gt;&gt; f.read()
'foo'
</code></pre>

<p>I use cStringIO (which is faster), but note that it doesn't <a href=""http://docs.python.org/lib/module-cStringIO.html"" rel=""nofollow"">accept Unicode strings that cannot be encoded as plain ASCII strings</a>.  (You can switch to StringIO by changing  ""from cStringIO"" to ""from StringIO"".)</p>
"
35645,"<p><strong>There's no easy way to find out the memory size of a python object</strong>. One of the problems you may find is that Python objects - like lists and dicts - may have references to other python objects (in this case, what would your size be? The size containing the size of each object or not?). There are some pointers overhead and internal structures related to object types and garbage collection. Finally, some python objects have non-obvious behaviors. For instance, lists reserve space for more objects than they have, most of the time; dicts are even more complicated since they can operate in different ways (they have a different implementation for small number of keys and sometimes they over allocate entries).</p>

<p>There is a <a href=""http://code.activestate.com/recipes/544288/"">big chunk of code</a> (and an <a href=""http://code.activestate.com/recipes/546530/"">updated big chunk of code</a>) out there to try to best approximate the size of a python object in memory. There's also some <a href=""https://mail.python.org/pipermail/python-list/2008-January/483475.html"">simpler approximations</a>. But they will always be approximations.</p>

<p>You may also want to check some <a href=""http://mail.python.org/pipermail/python-list/2002-March/135223.html"">old description about PyObject</a> (the internal C struct that represents virtually all python objects).</p>
"
335754,"<p>There is nothing stopping you from packing the list into a delimited string and then unpacking it once you get the string from the config.  If you did it this way your config section would look like:</p>

<pre><code>[Section 3]
barList=item1,item2
</code></pre>

<p>It's not pretty but it's functional for most simple lists.</p>
"
120055,"<p>This is another use for Ellipsis, which has nothing to do with slices: I often use it in intra-thread communication with queues, as a mark that signals ""Done""; it's there, it's an object, it's a singleton, and its name means ""lack of"", and it's not the overused None (which could be put in a queue as part of normal data flow). YMMV.</p>

<p>P.S: I don't mind downvotes, when what I say in an answer is not useful in relation to the question; then I try to improve my answer. But I sure can't understand how one can downvote <em>any</em> of the answers in this questionâ when the question is âhow do <em>you</em> use the Ellipsis in Pythonââ¦ It seems that people think that downvoting means âI disagreeâ or âI don't like thisâ.</p>
"
225106,"<p>You can use wsgiref.handlers.format_date_time from the stdlib which does not rely on locale settings</p>

<pre><code>from wsgiref.handlers import format_date_time
from datetime import datetime
from time import mktime

now = datetime.now()
stamp = mktime(now.timetuple())
print format_date_time(stamp) #--&gt; Wed, 22 Oct 2008 10:52:40 GMT
</code></pre>

<p>You can use email.utils.formatdate from the stdlib which does not rely on locale settings </p>

<pre><code>from email.utils import formatdate
from datetime import datetime
from time import mktime

now = datetime.now()
stamp = mktime(now.timetuple())
print formatdate(
    timeval     = stamp,
    localtime   = False,
    usegmt      = True
) #--&gt; Wed, 22 Oct 2008 10:55:46 GMT
</code></pre>

<p>If you can set the locale process wide then you can do:</p>

<pre><code>import locale, datetime

locale.setlocale(locale.LC_TIME, 'en_US')
datetime.datetime.utcnow().strftime('%a, %d %b %Y %H:%M:%S GMT')
</code></pre>

<p>If you don't want to set the locale process wide you could use <a href=""http://babel.edgewall.org/"">Babel</a> <a href=""http://babel.edgewall.org/wiki/Documentation/dates.html"">date formating</a></p>

<pre><code>from datetime import datetime
from babel.dates import format_datetime

now = datetime.utcnow()
format = 'EEE, dd LLL yyyy hh:mm:ss'
print format_datetime(now, format, locale='en') + ' GMT'
</code></pre>

<p>A manual way to format it which is identical with wsgiref.handlers.format_date_time is:</p>

<pre><code>def httpdate(dt):
    """"""Return a string representation of a date according to RFC 1123
    (HTTP/1.1).

    The supplied date must be in UTC.

    """"""
    weekday = [""Mon"", ""Tue"", ""Wed"", ""Thu"", ""Fri"", ""Sat"", ""Sun""][dt.weekday()]
    month = [""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"",
             ""Oct"", ""Nov"", ""Dec""][dt.month - 1]
    return ""%s, %02d %s %04d %02d:%02d:%02d GMT"" % (weekday, dt.day, month,
        dt.year, dt.hour, dt.minute, dt.second)
</code></pre>
"
56833,"<p>can't help the way it's stored, but at least formatting works correctly: </p>

<pre><code>'%.1f' % round(n, 1) # gives you '5.6'
</code></pre>
"
70736,"<p>The phrase commonly used is ""we're all consenting adults here"".  By prepending a single underscore (don't expose) or double underscore (hide), you're telling the user of your class that you intend the member to be 'private' in some way.  However, you're trusting everyone else to behave responsibly and respect that, unless they have a compelling reason not to (e.g. debuggers, code completion).</p>

<p>If you truly must have something that is private, then you can implement it in an extension (e.g. in C for CPython).  In most cases, however, you simply learn the Pythonic way of doing things.</p>
"
147793,"<p>In terms of the forms library, you would use the <a href=""http://docs.djangoproject.com/en/dev/ref/forms/fields/#multiplechoicefield"">MultipleChoiceField</a> field with a <a href=""http://docs.djangoproject.com/en/dev/ref/forms/widgets/#django.forms.CheckboxSelectMultiple"">CheckboxSelectMultiple</a> widget to do that. You could validate the number of choices which were made by writing a validation method for the field:</p>

<pre><code>class MyForm(forms.Form):
    my_field = forms.MultipleChoiceField(choices=SOME_CHOICES, widget=forms.CheckboxSelectMultiple())

    def clean_my_field(self):
        if len(self.cleaned_data['my_field']) &gt; 3:
            raise forms.ValidationError('Select no more than 3.')
        return self.cleaned_data['my_field']
</code></pre>

<p>To get this in the admin application, you'd need to customise a ModelForm and <a href=""http://docs.djangoproject.com/en/dev/ref/contrib/admin/#adding-custom-validation-to-the-admin"">override the form used in the appropriate ModelAdmin</a>.</p>
"
134638,"<p>If you need to assign the <code>lambda</code> to a name, use a <code>def</code> instead. <code>def</code>s are just syntactic sugar for an assignment, so the result is the same, and they are a lot more flexible and readable.</p>

<p><code>lambda</code>s can be used for <em>use once, throw away</em> functions which won't have a name.</p>

<p>However, this use case is very rare. You rarely need to pass around unnamed function objects.</p>

<p>The builtins <code>map()</code> and <code>filter()</code> need function objects, but <strong>list comprehensions</strong> and <strong>generator expressions</strong> are generally more readable than those functions and can cover all use cases, without the need of lambdas. </p>

<p>For the cases you really need a small function object, you should use the <code>operator</code> module functions, like <code>operator.add</code> instead of <code>lambda x, y: x + y</code></p>

<p>If you still need some <code>lambda</code> not covered, you might consider writing a <code>def</code>, just to be more readable. If the function is more complex than the ones at <code>operator</code> module, a <code>def</code> is probably better. </p>

<p>So, real world good <code>lambda</code> use cases are very rare.</p>
"
53525,"<p>An empty list is itself considered false in true value testing (see <a href=""https://docs.python.org/2/library/stdtypes.html#truth-value-testing"">python documentation</a>):</p>

<pre><code>a = []
if a:
     print ""not empty""
</code></pre>

<p>@Daren Thomas</p>

<blockquote>
  <p>EDIT: Another point against testing
  the empty list as False: What about
  polymorphism? You shouldn't depend on
  a list being a list. It should just
  quack like a duck - how are you going
  to get your duckCollection to quack
  ''False'' when it has no elements?</p>
</blockquote>

<p>Your duckCollection should implement <code>__nonzero__</code> or <code>__len__</code> so the if a: will work without problems.</p>
"
250303,"<pre><code>import re
p = re.compile(""[a-z]"")
for m in p.finditer('a1b2c3d4'):
    print m.start(), m.group()
</code></pre>
"
168424,"<p>I've done this in the past for a Python script to determine the last updated files in a directory: </p>

<pre><code>import glob
import os

search_dir = ""/mydir/""
# remove anything from the list that is not a file (directories, symlinks)
# thanks to J.F. Sebastion for pointing out that the requirement was a list 
# of files (presumably not including directories)  
files = filter(os.path.isfile, glob.glob(search_dir + ""*""))
files.sort(key=lambda x: os.path.getmtime(x))
</code></pre>

<p>That should do what you're looking for based on file mtime.</p>

<p><strong>EDIT</strong>: Note that you can also use os.listdir() in place of glob.glob() if desired - the reason I used glob in my original code was that I was wanting to use glob to only search for files with a particular set of file extensions, which glob() was better suited to. To use listdir here's what it would look like: </p>

<pre><code>import os

search_dir = ""/mydir/""
os.chdir(search_dir)
files = filter(os.path.isfile, os.listdir(search_dir))
files = [os.path.join(search_dir, f) for f in files] # add path to each file
files.sort(key=lambda x: os.path.getmtime(x))
</code></pre>
"
279287,"<p>(This is from memory so someone edit if I make a typo, please.)</p>

<p>If you structure your project this way:</p>

<pre><code>src\
  __init__.py
  main.py
  dirFoo\
    __init__.py
    Foo.py
  dirBar\
    __init__.py
    Bar.py
</code></pre>

<p>Then from Foo.py you should be able to do:</p>

<pre><code>import dirFoo.Foo
</code></pre>

<p>Or:</p>

<pre><code>from dirFoo.Foo import FooObject
</code></pre>

<p><strong>EDIT 1:</strong></p>

<p>Per Tom's comment, this does require that the <code>src</code> folder is accessible either via <code>site_packages</code> or your search path.  Also, as he mentions, <code>__init__.py</code> is implicitly imported when you first import a module in that package/directory.  Typically <code>__init__.py</code> is simply an empty file.</p>
"
227125,"<p>Such renaming is quite easy, for example with <a href=""http://docs.python.org/lib/module-os.html"">os</a> and <a href=""http://docs.python.org/lib/module-glob.html"">glob</a> modules:</p>

<pre><code>import glob, os

def rename(dir, pattern, titlePattern):
    for pathAndFilename in glob.iglob(os.path.join(dir, pattern)):
        title, ext = os.path.splitext(os.path.basename(pathAndFilename))
        os.rename(pathAndFilename, 
                  os.path.join(dir, titlePattern % title + ext))
</code></pre>

<p>You could then use it in your example like this:</p>

<pre><code>rename(r'c:\temp\xx', r'*.doc', r'new(%s)')
</code></pre>

<p>The above example will convert all <code>*.doc</code> files in <code>c:\temp\xx</code> dir to <code>new(%s).doc</code>, where <code>%s</code> is the previous base name of the file (without extension).</p>
"
242514,"<p>You can use <a href=""http://docs.python.org/library/traceback.html#traceback.print_exc"">traceback.print_exc</a> to print the exceptions traceback. Then use <a href=""http://docs.python.org/library/sys#sys.exc_info"">sys.exc_info</a> to extract the traceback and finally call <a href=""http://docs.python.org/library/pdb#pdb.post_mortem"">pdb.post_mortem</a> with that traceback</p>

<pre><code>import pdb, traceback, sys

def bombs():
    a = []
    print a[0]

if __name__ == '__main__':
    try:
        bombs()
    except:
        type, value, tb = sys.exc_info()
        traceback.print_exc()
        pdb.post_mortem(tb)
</code></pre>

<p>If you want to start an interactive command line with <a href=""http://docs.python.org/library/code#code.interact"">code.interact</a> using the locals of the frame where the exception originated you can do</p>

<pre><code>import traceback, sys, code

def bombs():
    a = []
    print a[0]

if __name__ == '__main__':
    try:
        bombs()
    except:
        type, value, tb = sys.exc_info()
        traceback.print_exc()
        last_frame = lambda tb=tb: last_frame(tb.tb_next) if tb.tb_next else tb
        frame = last_frame().tb_frame
        ns = dict(frame.f_globals)
        ns.update(frame.f_locals)
        code.interact(local=ns)
</code></pre>
"
81456,"<p>Twisted contains a <a href=""http://twistedmatrix.com/projects/core/documentation/howto/index.html"">large number of examples</a>.  One in particular, the <a href=""http://twistedmatrix.com/projects/core/documentation/howto/tutorial/intro.html"">""evolution of Finger"" tutorial</a>, contains a thorough explanation of how an asynchronous program grows from a very small kernel up to a complex system with lots of moving parts.  Another one that might be of interest to you is the tutorial about simply <a href=""http://twistedmatrix.com/projects/core/documentation/howto/servers.html"">writing servers</a>.</p>

<p>The key thing to keep in mind about Twisted, or even other asynchronous networking libraries (such as <a href=""http://www.python.org/doc/current/lib/module-asyncore.html"">asyncore</a>, <a href=""http://mina.apache.org/"">MINA</a>, or <a href=""http://www.cs.wustl.edu/~schmidt/ACE-overview.html"">ACE</a>), is that your code only gets invoked when something happens.  The part that I've heard most often sound like ""voodoo"" is the management of callbacks: for example, <code>Deferred</code>.  If you're used to writing code that runs in a straight line, and only calls functions which return immediately with results, the idea of waiting for something to call you back might be confusing.  But there's nothing magical, no ""voodoo"" about callbacks.  At the lowest level, the reactor is just sitting around and waiting for one of a small number of things to happen:</p>

<ol>
<li>Data arrives on a connection (it will call <code>dataReceived</code> on a Protocol)</li>
<li>Time has passed (it will call a function registered with <code>callLater</code>).</li>
<li>A connection has been accepted (it will call <code>buildProtocol</code> on a factory registered with a <code>listenXXX</code> or <code>connectXXX</code> function).</li>
<li>A connection has been dropped (it will call <code>connectionLost</code> on the appropriate Protocol)</li>
</ol>

<p>Every asynchronous program starts by hooking up a few of these events and then kicking off the reactor to wait for them to happen.  Of course, events that happen lead to more events that get hooked up or disconnected, and so your program goes on its merry way.  Beyond that, there's nothing special about asynchronous program structure that are interesting or special; event handlers and callbacks are just objects, and your code is run in the usual way.</p>

<p>Here's a simple ""event-driven engine"" that shows you just how simple this process is.</p>

<pre><code># Engine
import time
class SimplestReactor(object):
    def __init__(self):
        self.events = []
        self.stopped = False

    def do(self, something):
        self.events.append(something)

    def run(self):
        while not self.stopped:
            time.sleep(0.1)
            if self.events:
                thisTurn = self.events.pop(0)
                thisTurn()

    def stop(self):
        self.stopped = True

reactor = SimplestReactor()

# Application    
def thing1():
    print 'Doing thing 1'
    reactor.do(thing2)
    reactor.do(thing3)

def thing2():
    print 'Doing thing 2'

def thing3():
    print 'Doing thing 3: and stopping'
    reactor.stop()

reactor.do(thing1)
print 'Running'
reactor.run()
print 'Done!'
</code></pre>

<p>At the core of libraries like Twisted, the function in the main loop is not <code>sleep</code>, but an operating system call like <code>select()</code> or <code>poll()</code>, as exposed by a module like <a href=""http://docs.python.org/lib/module-select.html"">the Python select module</a>.  I say ""like"" <code>select</code>, because this is an API that varies a lot between platforms, and almost every GUI toolkit has its own version.  Twisted currently provides an abstract interface to 14 different variations on this theme.  The common thing that such an API provides is provide a way to say ""Here are a list of events that I'm waiting for.  Go to sleep until one of them happens, then wake up and tell me which one of them it was.""</p>
"
44512,"<p>I wanted something similar, but with the ability to specify how the values on duplicate keys were merged, so I hacked this out (but did not heavily test it).  Obviously this is not a single expression, but it is a single function call.</p>

<pre><code>def merge(d1, d2, merge_fn=lambda x,y:y):
    """"""
    Merges two dictionaries, non-destructively, combining 
    values on duplicate keys as defined by the optional merge
    function.  The default behavior replaces the values in d1
    with corresponding values in d2.  (There is no other generally
    applicable merge strategy, but often you'll have homogeneous 
    types in your dicts, so specifying a merge technique can be 
    valuable.)

    Examples:

    &gt;&gt;&gt; d1
    {'a': 1, 'c': 3, 'b': 2}
    &gt;&gt;&gt; merge(d1, d1)
    {'a': 1, 'c': 3, 'b': 2}
    &gt;&gt;&gt; merge(d1, d1, lambda x,y: x+y)
    {'a': 2, 'c': 6, 'b': 4}

    """"""
    result = dict(d1)
    for k,v in d2.iteritems():
        if k in result:
            result[k] = merge_fn(result[k], v)
        else:
            result[k] = v
    return result
</code></pre>
"
109173,"<p>Use vars()</p>

<pre><code>class Foo(object):
    def __init__(self):
        self.a = 1
        self.b = 2

vars(Foo()) #==&gt; {'a': 1, 'b': 2}
vars(Foo()).keys() #==&gt; ['a', 'b']
</code></pre>
"
60815,"<p>This is very much a database-specific issue.</p>

<p>I know that PostgreSQL and MySQL have the ability to order by a random function, so you can use this in SQLAlchemy:</p>

<pre><code>from  sqlalchemy.sql.expression import func, select

select.order_by(func.random()) # for PostgreSQL, SQLite

select.order_by(func.rand()) # for MySQL

select.order_by('dbms_random.value') # For Oracle
</code></pre>

<p>Next, you need to limit the query by the number of records you need (for example using <code>.limit()</code>).</p>

<p>Bear in mind that at least in PostgreSQL, selecting random record has severe perfomance issues; <a href=""http://www.depesz.com/index.php/2007/09/16/my-thoughts-on-getting-random-row/"">here</a> is good article about it.</p>
"
89255,"<p>I'd recommend using the subprocess module instead of os.system because it does shell escaping for you and is therefore much safer: <a href=""http://docs.python.org/library/subprocess.html"">http://docs.python.org/library/subprocess.html</a></p>

<pre><code>subprocess.call(['ping', 'localhost'])
</code></pre>
"
120948,"<p>Here's a helper function I use quite often:</p>

<pre><code>import os

def listdir_fullpath(d):
    return [os.path.join(d, f) for f in os.listdir(d)]
</code></pre>
"
119178,"<p>All imports in <code>__init__.py</code> are made available when you import the package (directory) that contains it.</p>

<p>Example:</p>

<p><code>./dir/__init__.py</code>:</p>

<pre><code>import something
</code></pre>

<p><code>./test.py</code>:</p>

<pre><code>import dir
# can now use dir.something
</code></pre>

<p>EDIT: forgot to mention, the code in <code>__init__.py</code> runs the first time you import any module from that directory. So it's normally a good place to put any package-level initialisation code.</p>

<p>EDIT2: dgrant pointed out to a possible confusion in my example. In <code>__init__.py</code> <code>import something</code> can import any module, not necessary from the package. For example, we can replace it with <code>import datetime</code>, then in our top level <code>test.py</code> both of these snippets will work:</p>

<pre><code>import dir
print dir.datetime.datetime.now()
</code></pre>

<p>and</p>

<pre><code>import dir.some_module_in_dir
print dir.datetime.datetime.now()
</code></pre>

<p>The bottom line is: all names assigned in <code>__init__.py</code>, be it imported modules, functions or classes, are automatically available in the package namespace whenever you import the package or a module in the package.</p>
"
166591,"<p>You can use the <a href=""http://pypi.python.org/pypi/netifaces"">netifaces</a> module. Just type:</p>

<pre><code>easy_install netifaces
</code></pre>

<p>in your command shell and it will install itself on default Python installation.</p>

<p>Then you can use it like this:</p>

<pre><code>from netifaces import interfaces, ifaddresses, AF_INET
for ifaceName in interfaces():
    addresses = [i['addr'] for i in ifaddresses(ifaceName).setdefault(AF_INET, [{'addr':'No IP addr'}] )]
    print '%s: %s' % (ifaceName, ', '.join(addresses))
</code></pre>

<p>On my computer it printed:</p>

<pre>{45639BDC-1050-46E0-9BE9-075C30DE1FBC}: 192.168.0.100
{D43A468B-F3AE-4BF9-9391-4863A4500583}: 10.5.9.207</pre>

<p>Author of this module claims it should work on Windows, UNIX and Mac OS X.</p>
"
171784,"<p>Given your factorGenerator function, here is a divisorGen that should work:</p>

<pre><code>def divisorGen(n):
    factors = list(factorGenerator(n))
    nfactors = len(factors)
    f = [0] * nfactors
    while True:
        yield reduce(lambda x, y: x*y, [factors[x][0]**f[x] for x in range(nfactors)], 1)
        i = 0
        while True:
            f[i] += 1
            if f[i] &lt;= factors[i][1]:
                break
            f[i] = 0
            i += 1
            if i &gt;= nfactors:
                return
</code></pre>

<p>The overall efficiency of this algorithm will depend entirely on the efficiency of the factorGenerator.</p>
"
263523,"<p>[sum(value) for value in zip(*array)] is pretty standard.</p>

<p>This might help you understand it:</p>

<pre><code>In [1]: array=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]

In [2]: array
Out[2]: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

In [3]: *array
------------------------------------------------------------
   File ""&lt;ipython console&gt;"", line 1
     *array
     ^
&lt;type 'exceptions.SyntaxError'&gt;: invalid syntax
</code></pre>

<p><em>The unary star is not an operator by itself.  It unwraps array elements into arguments into function calls.</em></p>

<pre><code>In [4]: zip(*array)
Out[4]: [(1, 4, 7), (2, 5, 8), (3, 6, 9)]
</code></pre>

<p><em>zip() is a built-in function</em></p>

<pre><code>In [5]: zip(*array)[0]
Out[5]: (1, 4, 7)
</code></pre>

<p><em>each element for the list returned by zip is a set of numbers you want.</em></p>

<pre><code>In [6]: sum(zip(*array)[0])
Out[6]: 12

In [7]: [sum(values) for values in zip(*array)]
Out[7]: [12, 15, 18]
</code></pre>
"
155172,"<p>Use <a href=""http://labix.org/python-dateutil"">dateutil</a> and its rrule implementation, like so:</p>

<pre><code>from dateutil import rrule
from datetime import datetime, timedelta

now = datetime.now()
hundredDaysLater = now + timedelta(days=100)

for dt in rrule.rrule(rrule.MONTHLY, dtstart=now, until=hundredDaysLater):
    print dt
</code></pre>

<p>Output is</p>

<pre><code>2008-09-30 23:29:54
2008-10-30 23:29:54
2008-11-30 23:29:54
2008-12-30 23:29:54
</code></pre>

<p>Replace MONTHLY with any of YEARLY, MONTHLY, WEEKLY, DAILY, HOURLY, MINUTELY, or SECONDLY.  Replace dtstart and until with whatever datetime object you want.</p>

<p>This recipe has the advantage for working in all cases, including MONTHLY.  Only caveat I could find is that if you pass a day number that doesn't exist for all months, it skips those months.</p>
"
182050,"<p>I've resorted to the following in the degenerate case where it's simply AND's or OR's.</p>

<pre><code>if all( [cond1 == 'val1', cond2 == 'val2', cond3 == 'val3', cond4 == 'val4'] ):

if any( [cond1 == 'val1', cond2 == 'val2', cond3 == 'val3', cond4 == 'val4'] ):
</code></pre>

<p>It shaves a few characters and makes it clear that there's no subtlety to the condition.</p>
"
295152,"<p>You can use list comprehension together with the string methods.</p>

<pre><code>&gt;&gt;&gt; s
'foo-bar#baz?qux@127/\\9]'
&gt;&gt;&gt; """".join(x for x in s if x.isalnum())
'foobarbazqux1279'
</code></pre>
"
237858,"<p>I simply prefer to repeat the <code>property()</code> as well as you will repeat the <code>@classmethod</code> decorator when overriding a class method. </p>

<p>While this seems very verbose, at least for Python standards, you may notice:</p>

<p>1) for read only properties, <code>property</code> can be used as a decorator:</p>

<pre><code>class Foo(object):
    @property
    def age(self):
        return 11

class Bar(Foo):
    @property
    def age(self):
        return 44
</code></pre>

<p>2) in Python 2.6, <a href=""http://docs.python.org/library/functions.html#property"">properties grew a pair of methods</a> <code>setter</code> and <code>deleter</code> which can be used to apply to general properties the shortcut already available for read-only ones:</p>

<pre><code>class C(object):
    @property
    def x(self):
        return self._x

    @x.setter
    def x(self, value):
        self._x = value
</code></pre>
"
141327,"<p>Filter the result using os.path.isdir() (and use os.path.join() to get the real path):</p>

<pre><code>&gt;&gt;&gt; [ name for name in os.listdir(thedir) if os.path.isdir(os.path.join(thedir, name)) ]
['ctypes', 'distutils', 'encodings', 'lib-tk', 'config', 'idlelib', 'xml', 'bsddb', 'hotshot', 'logging', 'doc', 'test', 'compiler', 'curses', 'site-packages', 'email', 'sqlite3', 'lib-dynload', 'wsgiref', 'plat-linux2', 'plat-mac']
</code></pre>
"
121017,"<p>Have a look at this module: <a href=""https://github.com/mitsuhiko/werkzeug/blob/master/werkzeug/urls.py"">werkzeug.utils</a>. (now in <code>werkzeug.urls</code>)</p>

<p>The function you are looking for is called ""url_fix"" and works like this:</p>

<pre><code>&gt;&gt;&gt; url_fix(u'http://de.wikipedia.org/wiki/Elf (BegriffsklÃ¤rung)')
'http://de.wikipedia.org/wiki/Elf%20%28Begriffskl%C3%A4rung%29'
</code></pre>

<p>It's implemented in Werkzeug as follows:</p>

<pre><code>import urllib
import urlparse

def url_fix(s, charset='utf-8'):
    """"""Sometimes you get an URL by a user that just isn't a real
    URL because it contains unsafe characters like ' ' and so on.  This
    function can fix some of the problems in a similar way browsers
    handle data entered by the user:

    &gt;&gt;&gt; url_fix(u'http://de.wikipedia.org/wiki/Elf (BegriffsklÃ¤rung)')
    'http://de.wikipedia.org/wiki/Elf%20%28Begriffskl%C3%A4rung%29'

    :param charset: The target charset for the URL if the url was
                    given as unicode string.
    """"""
    if isinstance(s, unicode):
        s = s.encode(charset, 'ignore')
    scheme, netloc, path, qs, anchor = urlparse.urlsplit(s)
    path = urllib.quote(path, '/%')
    qs = urllib.quote_plus(qs, ':&amp;=')
    return urlparse.urlunsplit((scheme, netloc, path, qs, anchor))
</code></pre>
"
311645,"<p>Use date.strftime. The formatting arguments are <a href=""https://docs.python.org/2/library/time.html#time.strftime"">described in the documentation</a>.</p>

<p>This one is what you wanted:</p>

<pre><code>some_date.strftime('%Y-%m-%d')
</code></pre>

<p>This one takes Locale into account. (do this)</p>

<pre><code>some_date.strftime('%c')
</code></pre>
"
293447,"<p>'self' is only a reference to the object. 'del self' is deleting the 'self' reference from the local namespace of the kill function, instead of the actual object.</p>

<p>To see this for yourself, look at what happens when these two functions are executed:</p>

<pre><code>&gt;&gt;&gt; class A():
...     def kill_a(self):
...         print self
...         del self
...     def kill_b(self):
...         del self
...         print self
... 
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; b = A()
&gt;&gt;&gt; a.kill_a()
&lt;__main__.A instance at 0xb771250c&gt;
&gt;&gt;&gt; b.kill_b()
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
  File ""&lt;stdin&gt;"", line 7, in kill_b
UnboundLocalError: local variable 'self' referenced before assignment
</code></pre>
"
141426,"<p><a href=""http://mrevelle.blogspot.com/2006/10/closure-on-closures.html"">Closure on closures</a></p>

<blockquote>
  <p>Objects are data with methods
  attached, closures are functions with
  data attached.</p>
</blockquote>

<pre><code>def make_counter():
    i = 0
    def counter(): # counter() is a closure
        nonlocal i
        i += 1
        return i
    return counter

c1 = make_counter()
c2 = make_counter()

print (c1(), c1(), c2(), c2())
# -&gt; 1 2 1 2
</code></pre>
"
300533,"<p>%uXXXX is a <a href=""http://en.wikipedia.org/wiki/Percent-encoding#Non-standard_implementations"">non-standard encoding scheme</a> that has been rejected by the w3c, despite the fact that an implementation continues to live on in JavaScript land.</p>

<p>The more common technique seems to be to UTF-8 encode the string and then % escape the resulting bytes using %XX. This scheme is supported by urllib.unquote:</p>

<pre><code>&gt;&gt;&gt; urllib2.unquote(""%0a"")
'\n'
</code></pre>

<p>Unfortunately, if you really <strong>need</strong> to support %uXXXX, you will probably have to roll your own decoder. Otherwise, it is likely to be far more preferable to simply UTF-8 encode your unicode and then % escape the resulting bytes.</p>

<p>A more complete example:</p>

<pre><code>&gt;&gt;&gt; u""TanÄ±m""
u'Tan\u0131m'
&gt;&gt;&gt; url = urllib.quote(u""TanÄ±m"".encode('utf8'))
&gt;&gt;&gt; urllib.unquote(url).decode('utf8')
u'Tan\u0131m'
</code></pre>
"
47792,"<p>Use list comprehensions when the result needs to be iterated over multiple times, or where speed is paramount. Use generator expressions where the range is large or infinite.</p>
"
75186,"<p>Blatant self-promotion:</p>

<p>check out my <a href=""http://atlee.ca/software/poster/"">poster</a> module for python.  It handles the multipart/form-data encoding, as well as supporting streaming uploads (so you don't have to load the entire file into memory before submitting the HTTP POST request).</p>
"
115349,"<p>From Python's sources <a href=""http://svn.python.org/view/python/trunk/Objects/object.c?rev=64962&amp;view=markup"">object.c</a>:</p>

<pre class=""lang-c prettyprint-override""><code>/* Test whether an object can be called */

int
PyCallable_Check(PyObject *x)
{
    if (x == NULL)
        return 0;
    if (PyInstance_Check(x)) {
        PyObject *call = PyObject_GetAttrString(x, ""__call__"");
        if (call == NULL) {
            PyErr_Clear();
            return 0;
        }
        /* Could test recursively but don't, for fear of endless
           recursion if some joker sets self.__call__ = self */
        Py_DECREF(call);
        return 1;
    }
    else {
        return x-&gt;ob_type-&gt;tp_call != NULL;
    }
}
</code></pre>

<p>It says:</p>

<ol>
<li>If an object is an instance of some class then it is callable <em>iff</em> it has <code>__call__</code> attribute.</li>
<li>Else the object <code>x</code> is callable <em>iff</em> <code>x-&gt;ob_type-&gt;tp_call != NULL</code></li>
</ol>

<p>Desciption of <a href=""http://docs.python.org/api/type-structs.html""><code>tp_call</code> field</a>:</p>

<blockquote>
  <p><code>ternaryfunc tp_call</code> An optional
  pointer to a function that implements
  calling the object. This should be
  NULL if the object is not callable.
  The signature is the same as for
  PyObject_Call(). This field is
  inherited by subtypes.</p>
</blockquote>

<p>You can always use built-in <code>callable</code> function to determine whether given object is callable or not; or better yet just call it and catch <code>TypeError</code> later. <code>callable</code> is removed in Python 3.0 and 3.1, use <code>callable = lambda o: hasattr(o, '__call__')</code> or <code>isinstance(o, collections.Callable)</code>.</p>

<p>Example, a simplistic cache implementation:</p>

<pre><code>class Cached:
    def __init__(self, function):
        self.function = function
        self.cache = {}

    def __call__(self, *args):
        try: return self.cache[args]
        except KeyError:
            ret = self.cache[args] = self.function(*args)
            return ret    
</code></pre>

<p>Usage:</p>

<pre><code>@Cached
def ack(x, y):
    return ack(x-1, ack(x, y-1)) if x*y else (x + y + 1) 
</code></pre>

<p>Example from standard library, file <a href=""http://svn.python.org/projects/python/trunk/Lib/site.py""><code>site.py</code></a>, definition of built-in <code>exit()</code> and <code>quit()</code> functions:</p>

<pre><code>class Quitter(object):
    def __init__(self, name):
        self.name = name
    def __repr__(self):
        return 'Use %s() or %s to exit' % (self.name, eof)
    def __call__(self, code=None):
        # Shells like IDLE catch the SystemExit, but listen when their
        # stdin wrapper is closed.
        try:
            sys.stdin.close()
        except:
            pass
        raise SystemExit(code)
__builtin__.quit = Quitter('quit')
__builtin__.exit = Quitter('exit')
</code></pre>
"
305639,"<p>You can fetch the list of tables and schemata by querying the SQLITE_MASTER table:</p>

<pre><code>sqlite&gt; .tab
job         snmptarget  t1          t2          t3        
sqlite&gt; select name from sqlite_master where type = 'table';
job
t1
t2
snmptarget
t3

sqlite&gt; .schema job
CREATE TABLE job (
    id INTEGER PRIMARY KEY,
    data VARCHAR
);
sqlite&gt; select sql from sqlite_master where type = 'table' and name = 'job';
CREATE TABLE job (
    id INTEGER PRIMARY KEY,
    data VARCHAR
)
</code></pre>
"
181654,"<pre><code># reopen stdout file descriptor with write mode
# and 0 as the buffer size (unbuffered)
sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
</code></pre>

<p>Credits: ""Sebastian"", somewhere on the Python mailing list.</p>
"
1484,"<pre><code>&gt;&gt;&gt; print int('01010101111',2)
687
&gt;&gt;&gt; print int('11111111',2)
255
</code></pre>

<p>Another way.</p>
"
136280,"<p>Assumes a unix-like system.</p>

<pre><code>import os
def tail(f, n, offset=0):
  stdin,stdout = os.popen2(""tail -n ""+n+offset+"" ""+f)
  stdin.close()
  lines = stdout.readlines(); stdout.close()
  return lines[:,-offset]
</code></pre>
"
105369,"<p>You will still need locks if you share state between threads. The GIL only protects the interpreter internally. You can still have inconsistent updates in your own code.</p>

<p>For example:</p>

<pre><code>#!/usr/bin/env python
import threading

shared_balance = 0

class Deposit(threading.Thread):
    def run(self):
        for _ in xrange(1000000):
            global shared_balance
            balance = shared_balance
            balance += 100
            shared_balance = balance

class Withdraw(threading.Thread):
    def run(self):
        for _ in xrange(1000000):
            global shared_balance
            balance = shared_balance
            balance -= 100
            shared_balance = balance

threads = [Deposit(), Withdraw()]

for thread in threads:
    thread.start()

for thread in threads:
    thread.join()

print shared_balance
</code></pre>

<p>Here, your code can be interrupted between reading the shared state (<code>balance = shared_balance</code>) and writing the changed result back (<code>shared_balance = balance</code>), causing a lost update. The result is a random value for the shared state.</p>

<p>To make the updates consistent, run methods would need to lock the shared state around the read-modify-write sections (inside the loops) or have <a href=""http://en.wikipedia.org/wiki/Software_transactional_memory"">some way to detect when the shared state had changed since it was read</a>.</p>
"
129177,"<p>You could use the <a href=""http://docs.python.org/whatsnew/pep-343.html""><code>with</code> statement</a> if you have python 2.5</p>

<pre><code>from __future__ import with_statement
import contextlib

@contextlib.contextmanager
def handler():
    try:
        yield
    except Exception, e:
        baz(e)
</code></pre>

<p>Your example now becomes:</p>

<pre><code>with handler():
    foo(a, b)
with handler():
    bar(c, d)
</code></pre>
"
72284,"<p>As the solution is hackish, I think using your own date/time widget with some JavaScript is more feasible.</p>
"
259694,"<p>You'll find that your key problem with this approach isn't a technical one, but a human one - different people write their names in different ways.</p>

<p>In fact, the terminology of ""forename"" and ""surname"" is itself flawed.</p>

<p>While many blended families use a hyphenated family name, such as Smith-Jones, there are some who just use both names separately, ""Smith Jones"" where both names are the family name.</p>

<p>Many european family names have multiple parts, such as ""de Vere"" and ""van den Neiulaar"". Sometimes these extras have important family history - for example, a prefix awarded by a king hundreds of years ago.</p>

<p>Side issue: I've capitalised these correctly for the people I'm referencing - ""de"" and ""van den"" don't get captial letters for some families, but do for others. </p>

<p>Conversely, many Asian cultures put the family name first, because the family is considered more important than the individual.</p>

<p>Last point - some people place great store in being ""Junior"" or ""Senior"" or ""III"" - and your code shouldn't treat those as the family name.</p>

<p>Also noting that there are a fair number of people who use a name that isn't the one bestowed by their parents, I've used the following scheme with some success:</p>

<p>Full Name (as normally written for addressing mail); 
Family Name; 
Known As (the name commonly used in conversation).</p>

<p>e.g:</p>

<p>Full Name: William Gates III; Family Name: Gates; Known As: Bill</p>

<p>Full Name: Soong Li; Family Name: Soong; Known As: Lisa</p>
"
171703,"<p>Save/delete signals are generally favourable in situations where you need to make changes which aren't completely specific to the model in question, or could be applied to models which have something in common, or could be configured for use across models.</p>

<p>One common task in overridden <code>save</code> methods is automated generation of slugs from some text field in a model. That's an example of something which, if you needed to implement it for a number of models, would benefit from using a <code>pre_save</code> signal, where the signal handler could take the name of the slug field and the name of the field to generate the slug from. Once you have something like that in place, any enhanced functionality you put in place will also apply to all models - e.g. looking up the slug you're about to add for the type of model in question, to ensure uniqueness.</p>

<p>Reusable applications often benefit from the use of signals - if the functionality they provide can be applied to any model, they generally (unless it's unavoidable) won't want users to have to directly modify their models in order to benefit from it.</p>

<p>With <a href=""https://github.com/django-mptt/django-mptt/"">django-mptt</a>, for example, I used the <code>pre_save</code> signal to manage a set of fields which describe a tree structure for the model which is about to be created or updated and the <code>pre_delete</code> signal to remove tree structure details for the object being deleted and its entire sub-tree of objects before it and they are deleted. Due to the use of signals, users don't have to add or modify <code>save</code> or <code>delete</code> methods on their models to have this management done for them, they just have to let django-mptt know which models they want it to manage.</p>
"
327011,"<p>As per comments, I've updated the code:</p>

<pre><code>import time
import math

def timeit1():
    s = time.time()
    for i in xrange(750000):
        z=i**.5
    print ""Took %f seconds"" % (time.time() - s)

def timeit2(arg=math.sqrt):
    s = time.time()
    for i in xrange(750000):
        z=arg(i)
    print ""Took %f seconds"" % (time.time() - s)

timeit1()
timeit2()
</code></pre>

<p>Now the <code>math.sqrt</code> function is directly in a local argument, meaning it has the fastest lookup possible. </p>

<p><strong>UPDATE:</strong> The python version seems to matter here. I used to think that <code>timeit1</code> would be faster, since when python parses ""i**.5"" it knows, syntactically, which method to call (<code>__pow__</code> or some variant), so it doesn't have to go through the overhead of lookup that the <code>math.sqrt</code> variant does. But I might be wrong:</p>

<p><strong>Python 2.5:</strong> 0.191000 vs. 0.224000</p>

<p><strong>Python 2.6:</strong> 0.195000 vs. 0.139000</p>

<p>Also psyco seems to deal with <code>math.sqrt</code> better:</p>

<p><strong>Python 2.5 + Psyco 2.0:</strong> 0.109000 vs. 0.043000</p>

<p><strong>Python 2.6 + Psyco 2.0:</strong> 0.128000 vs. 0.067000</p>

<hr>

<pre><code>| Interpreter    |  x**.5, |   sqrt, | sqrt faster, % |
|                | seconds | seconds |                |
|----------------+---------+---------+----------------|
| Python 3.2rc1+ |    0.32 |    0.27 |             19 |
| Python 3.1.2   |   0.136 |   0.088 |             55 |
| Python 3.0.1   |   0.155 |   0.102 |             52 |
| Python 2.7     |   0.132 |   0.079 |             67 |
| Python 2.6.6   |   0.121 |   0.075 |             61 |
| PyPy 1.4.1     |   0.083 |  0.0159 |            422 |
| Jython 2.5.1   |   0.132 |    0.22 |            -40 |
| Python 2.5.5   |   0.129 |   0.125 |              3 |
| Python 2.4.6   |   0.131 |   0.123 |              7 |
#+TBLFM: $4=100*($2-$3)/$3;%.0f
</code></pre>

<p>Table results produced on machine:</p>

<pre><code>$ uname -vms
Linux #42-Ubuntu SMP Thu Dec 2 02:41:37 UTC 2010 x86_64
$ cat /proc/cpuinfo | grep 'model name' | head -1
model name      : Intel(R) Core(TM) i7 CPU         920  @ 2.67GHz
</code></pre>

<p>To reproduce results:</p>

<ul>
<li>get source: <a href=""https://gist.github.com/783011""><code>git clone git://gist.github.com/783011.git gist-783011</code></a></li>
<li>install <a href=""http://codespeak.net/tox/""><code>tox</code></a>: <code>pip install tox</code></li>
<li>run <code>tox</code> from the directory with <code>tox.ini</code> file.</li>
</ul>
"
327548,"<p>Let's look at</p>

<pre><code>d[t].append(c)
</code></pre>

<p>What is the value of <code>d[t]</code>?  Try it.</p>

<pre><code>d = {}
t = 0
d[t]
</code></pre>

<p>What do you get?  Oh.  There's nothing in <code>d</code> that has a key of <code>t</code>.</p>

<p>Now try this.</p>

<pre><code>d[t] = []
d[t]
</code></pre>

<p>Ahh.  Now there's something in <code>d</code> with a key of <code>t</code>.</p>

<p>There are several things you can do.  </p>

<ol>
<li>Use example 2.</li>
<li>Use <code>setdefault</code>.  <code>d.setdefault(t,[]).append(c)</code>.</li>
<li>Use <a href=""http://www.python.org/doc/2.5.2/lib/defaultdict-objects.html"">collections.defaultdict</a>.  You'd use a <code>defaultdict(list)</code> instead of a simple dictionary, <code>{}</code>.</li>
</ol>

<p><hr /></p>

<p><strong>Edit 1.  Optimization</strong></p>

<p>Given input lines from a file in the above form: ts, x, y, the grouping process is needless.  There's no reason to go from a simple list of ( ts, x, y ) to a more complex
list of ( ts, (x,y), (x,y), (x,y), ... ).  The original list can be processed exactly as it arrived.</p>

<pre><code>d= collections.defaultdict(list)
for ts, x, y in someFileOrListOrQueryOrWhatever:
    d[ts].append( (x,y) )
</code></pre>

<p><hr /></p>

<p><strong>Edit 2.  Answer Question</strong></p>

<p>""when initialising a dictionary, you need to tell the dictionary what the key-value data structure will look like?""</p>

<p>I'm not sure what the question means.  Since, all dictionaries <em>are</em> key-value structures, the question's not very clear.  So, I'll review the three alternatives, which may answer the question.</p>

<p><strong>Example 2</strong>.</p>

<p>Initialization</p>

<pre><code>d= {}
</code></pre>

<p>Use</p>

<pre><code>if t not in d:
    d[t] = list()
d[t].append( c )
</code></pre>

<p>Each dictionary value must be initialized to some useful structure.  In this case, we check to see if the key is present; when the key is missing, we create the key and assign an empty list.</p>

<p><strong>Setdefault</strong></p>

<p>Initialization</p>

<pre><code>d= {}
</code></pre>

<p>Use</p>

<pre><code>d.setdefault(t,list()).append( c )
</code></pre>

<p>In this case, we exploit the <code>setdefault</code> method to either fetch a value associated with a key or create a new value associated with a missing key.</p>

<p><strong>default dict</strong></p>

<p>Initialization</p>

<pre><code>import collections
d = collections.defaultdict(list)
</code></pre>

<p>Use</p>

<pre><code>d[t].append( c )
</code></pre>

<p>The <code>defaultdict</code> uses an initializer function for missing keys.  In this case, we provide the <code>list</code> function so that a new, empty list is created for a missing key.</p>
"
181706,"<p>As Guido says in his <a href=""http://www.artima.com/weblogs/viewpost.jsp?thread=98196"">The fate of reduce() in Python 3000</a> post:</p>

<blockquote>
  <p>So now reduce(). This is actually the one I've always hated most, because, apart from a few examples involving + or *, almost every time I see a reduce() call with a non-trivial function argument, I need to grab pen and paper to diagram what's actually being fed into that function before I understand what the reduce() is supposed to do. So in my mind, the applicability of reduce() is pretty much limited to associative operators, and in all other cases it's better to write out the accumulation loop explicitly. </p>
</blockquote>

<p>There is an excellent example of a confusing <code>reduce</code> in the <a href=""http://www.amk.ca/python/writing/functional"">Functional Programming HOWTO</a> article:</p>

<blockquote>
  <p>Quick, what's the following code doing?</p>

<pre><code>total = reduce(lambda a, b: (0, a[1] + b[1]), items)[1]
</code></pre>
  
  <p>You can figure it out, but it takes time to disentangle the expression to figure out 
  what's going on. Using a short nested def statements makes things a little bit better:</p>

<pre><code>def combine (a, b):
    return 0, a[1] + b[1]

total = reduce(combine, items)[1]
</code></pre>
  
  <p>But it would be best of all if I had simply used a for loop:</p>

<pre><code>total = 0
for a, b in items:
    total += b
</code></pre>
  
  <p>Or the sum() built-in and a generator expression:</p>

<pre><code>total = sum(b for a,b in items)
</code></pre>
  
  <p>Many uses of reduce() are clearer when written as for loops.</p>
</blockquote>
"
100059,"<p>I think the ONLamp introduction to metaclass programming is well written and gives a really good introduction to the topic despite being several years old already.</p>

<p><a href=""http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html"">http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html</a></p>

<p>In short: A class is a blueprint for the creation of an instance, a metaclass is a blueprint for the creation of a class. It can be easily seen that in Python classes need to be first-class objects too to enable this behavior.</p>

<p>I've never written one myself, but I think one of the nicest uses of metaclasses can be seen in the <a href=""http://www.djangoproject.com/"">Django framework</a>. The model classes use a metaclass approach to enable a declarative style of writing new models or form classes. While the metaclass is creating the class, all members get the possibility to customize the class itself.</p>

<ul>
<li><a href=""http://docs.djangoproject.com/en/dev/intro/tutorial01/#id3"">Creating a new model</a></li>
<li><a href=""http://code.djangoproject.com/browser/django/trunk/django/db/models/base.py#L25"">The metaclass enabling this</a></li>
</ul>

<p>The thing that's left to say is: If you don't know what metaclasses are, the probability that you <strong>will not need them</strong> is 99%.</p>
"
265795,"<p>In general, for any thread safety problem you will need to protect your internal data structures with locks.
This can be done with various levels of granularity.</p>

<ul>
<li><p>You can use fine-grained locking, where every separate structure has its own lock.</p></li>
<li><p>You can use coarse-grained locking where one lock protects everything (the GIL approach).</p></li>
</ul>

<p>There are various pros and cons of each method.  Fine-grained locking allows greater parallelism - two threads can
execute in parallel when they don't share any resources.  However there is a much larger administrative overhead.  For
every line of code, you may need to acquire and release several locks.</p>

<p>The coarse grained approach is the opposite.  Two threads can't run at the same time, but an individual thread will run faster because its not doing so much bookkeeping.  Ultimately it comes down to a tradeoff between single-threaded speed and parallelism.</p>

<p>There have been a few attempts to remove the GIL in python, but the extra overhead for single threaded machines was generally too large.  Some cases can actually be slower even on multi-processor machines
due to lock contention.  </p>

<blockquote>
  <p>Do other languages that are compiled to bytecode employ a similar mechanism?</p>
</blockquote>

<p>It varies, and it probably shouldn't be considered a language property so much as an implementation property.
For instance, there are Python implementations such as Jython and IronPython which use the threading approach of their underlying VM, rather than a GIL approach. Additionally, the next version of Ruby looks to be moving <a href=""http://www.infoq.com/news/2007/05/ruby-threading-futures"" rel=""nofollow"">towards</a> introducing a GIL.</p>
"
215676,"<p>The colon is there to declare the start of an indented block.</p>

<p>Technically, it's not necessary; you could just indent and de-indent when the block is done. However, based on the <a href=""http://www.python.org/dev/peps/pep-0020/"">Python koan</a> âexplicit is better than implicitâ (EIBTI), I believe that Guido deliberately made the colon obligatory, so <em>any</em> statement that <em>should</em> be followed by indented code ends in a colon. (It also allows one-liners if you continue after the colon, but this style is not in wide use.)</p>

<p>It also makes the work of syntax-aware auto-indenting editors easier, which also counted in the decision.</p>

<hr>

<p>This question turns out to be a <a href=""http://docs.python.org/faq/design.html#why-are-colons-required-for-the-if-while-def-class-statements"">Python FAQ</a>, and I found one of its answers by Guido <a href=""http://markmail.org/message/ve7mwqxhci4pm6lw"">here</a>:</p>

<blockquote>
  <p><strong>Why are colons required for the if/while/def/class statements?</strong></p>
  
  <p>The colon is required primarily to enhance readability (one of the results of the experimental ABC language). Consider this:</p>

<pre><code>if a == b 
    print a
</code></pre>
  
  <p>versus </p>

<pre><code>if a == b: 
    print a
</code></pre>
  
  <p>Notice how the second one is slightly easier to read. Notice further how a colon sets off the example in this FAQ answer; itâs a standard usage in English.</p>
  
  <p>Another minor reason is that the colon makes it easier for editors with syntax highlighting; they can look for colons to decide when indentation needs to be increased instead of having to do a more elaborate parsing of the program text.</p>
</blockquote>
"
312467,"<p>Here is a generator that work on arbitrary iterables:</p>

<pre><code>def split_seq(iterable, size):
    it = iter(iterable)
    item = list(itertools.islice(it, size))
    while item:
        yield item
        item = list(itertools.islice(it, size))
</code></pre>

<p>Example:</p>

<pre><code>&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(list(split_seq(xrange(75), 10)))
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
 [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
 [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
 [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
 [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],
 [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],
 [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],
 [70, 71, 72, 73, 74]]
</code></pre>
"
180615,"<p>You are probably looking for 'chr()':</p>

<pre><code>&gt;&gt;&gt; L = [104, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100]
&gt;&gt;&gt; ''.join(chr(i) for i in L)
'hello, world'
</code></pre>
"
327987,"<p>(<strong>Update</strong>: Full ORM aggregation support is now included in <a href=""http://docs.djangoproject.com/en/dev/releases/1.1/#aggregate-support"">Django 1.1</a>. True to the below warning about using private APIs, the method documented here no longer works in post-1.1 versions of Django.  I haven't dug in to figure out why; if you're on 1.1 or later you should use the real <a href=""http://docs.djangoproject.com/en/dev/topics/db/aggregation/"">aggregation API</a> anyway.)</p>

<p>The core aggregation support was already there in 1.0; it's just undocumented, unsupported, and doesn't have a friendly API on top of it yet.  But here's how you can use it anyway until 1.1 arrives (at your own risk, and in full knowledge that the query.group_by attribute is not part of a public API and could change):</p>

<pre><code>query_set = Item.objects.extra(select={'count': 'count(1)'}, 
                               order_by=['-count']).values('count', 'category')
query_set.query.group_by = ['category_id']
</code></pre>

<p>If you then iterate over query_set, each returned value will be a dictionary with a ""category"" key and a ""count"" key.</p>

<p>You don't have to order by -count here, that's just included to demonstrate how it's done (it has to be done in the .extra() call, not elsewhere in the queryset construction chain).  Also, you could just as well say count(id) instead of count(1), but the latter may be more efficient.</p>

<p>Note also that when setting .query.group_by, the values must be actual DB column names ('category_id') not Django field names ('category').  This is because you're tweaking the query internals at a level where everything's in DB terms, not Django terms.</p>
"
68796,"<p>Opening sockets in python is pretty simple. You really just need something like this:</p>

<pre><code>import socket
sock = socket.socket()
sock.connect((address, port))
</code></pre>

<p>and then you can <code>send()</code> and <code>recv()</code> like any other socket</p>
"
151212,"<p>Using the power of datetime:</p>

<pre><code>from datetime import datetime
date_format = ""%m/%d/%Y""
a = datetime.strptime('8/18/2008', date_format)
b = datetime.strptime('9/26/2008', date_format)
delta = b - a
print delta.days # that's it
</code></pre>
"
277932,"<p><a href=""http://docs.python.org/2/library/functools.html#functools.partial""><code>functools.partial</code></a> returns a callable wrapping a function with some or all of the arguments frozen.</p>

<pre class=""lang-py prettyprint-override""><code>import sys
import functools

print_hello = functools.partial(sys.stdout.write, ""Hello world\n"")

print_hello()
</code></pre>

<pre class=""lang-none prettyprint-override""><code>Hello world
</code></pre>

<p>The above usage is equivalent to the following <code>lambda</code>.</p>

<pre><code>print_hello = lambda *a, **kw: sys.stdout.write(""Hello world\n"", *a, **kw)
</code></pre>
"
325474,"<blockquote>
  <p>subprocess: The <code>subprocess</code> module
  allows you to spawn new processes,
  connect to their input/output/error
  pipes, and obtain their return codes.</p>
</blockquote>

<p><a href=""http://docs.python.org/library/subprocess.html"">http://docs.python.org/library/subprocess.html</a></p>

<p>Usage:</p>

<pre><code>import subprocess
process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)
process.wait()
print process.returncode
</code></pre>
"
58125,"<p>Python has the <a href=""https://docs.python.org/2/library/htmllib.html#module-htmlentitydefs"">htmlentitydefs</a> module, but this doesn't include a function to unescape HTML entities.</p>

<p>Python developer Fredrik Lundh (author of elementtree, among other things) has  such a function <a href=""http://effbot.org/zone/re-sub.htm#unescape-html"">on his website</a>, which works with decimal, hex and named entities:</p>

<pre><code>import re, htmlentitydefs

##
# Removes HTML or XML character references and entities from a text string.
#
# @param text The HTML (or XML) source text.
# @return The plain text, as a Unicode string, if necessary.

def unescape(text):
    def fixup(m):
        text = m.group(0)
        if text[:2] == ""&amp;#"":
            # character reference
            try:
                if text[:3] == ""&amp;#x"":
                    return unichr(int(text[3:-1], 16))
                else:
                    return unichr(int(text[2:-1]))
            except ValueError:
                pass
        else:
            # named entity
            try:
                text = unichr(htmlentitydefs.name2codepoint[text[1:-1]])
            except KeyError:
                pass
        return text # leave as is
    return re.sub(""&amp;#?\w+;"", fixup, text)
</code></pre>
"
192857,"<p>No, you cannot. In Python, all data (classes, methods, functions, etc) defined in C extension modules (including builtins) are immutable. This is because C modules are shared between multiple interpreters in the same process, so monkeypatching them would also affect unrelated interpreters in the same process.</p>

<p>However, classes defined in Python code may be monkeypatched because they are local to that interpreter.</p>
"
234329,"<p>Use the <code>walklevel</code> function.</p>

<pre><code>import os

def walklevel(some_dir, level=1):
    some_dir = some_dir.rstrip(os.path.sep)
    assert os.path.isdir(some_dir)
    num_sep = some_dir.count(os.path.sep)
    for root, dirs, files in os.walk(some_dir):
        yield root, dirs, files
        num_sep_this = root.count(os.path.sep)
        if num_sep + level &lt;= num_sep_this:
            del dirs[:]
</code></pre>

<p>It works just like <code>os.walk</code>, but you can pass it a <code>level</code> parameter that indicates how deep the recursion will go.</p>
"
125810,"<p>Copying a file is a relatively straightforward operation as shown by the examples below, but you should instead use the <a href=""https://docs.python.org/library/shutil.html"">shutil stdlib module</a> for that.</p>

<pre class=""lang-py prettyprint-override""><code>def copyfileobj_example(source, dest, buffer_size=1024*1024):
    """"""      
    Copy a file from source to dest. source and dest
    must be file-like objects, i.e. any object with a read or
    write method, like for example StringIO.
    """"""
    while 1:
        copy_buffer = source.read(buffer_size)
        if not copy_buffer:
            break
        dest.write(copy_buffer)
</code></pre>

<p>If you want to copy by filename you could do something like this:</p>

<pre class=""lang-py prettyprint-override""><code>def copyfile_example(source, dest):
    # Beware, this example does not handle any edge cases!
    with open(source, 'rb') as src, open(dest, 'wb') as dst:
        copyfileobj_example(src, dst)
</code></pre>
"
51550,"<p>Here's a simplified version of <a href=""http://stackoverflow.com/a/51242/4279"">@Vinko Vrsalovic's answer</a>:</p>

<pre><code>import urllib2
from BeautifulSoup import BeautifulSoup

soup = BeautifulSoup(urllib2.urlopen(""https://www.google.com""))
print soup.title.string
</code></pre>

<p>NOTE:</p>

<ul>
<li><p><em>soup.title</em> finds the first <em>title</em> element <strong>anywhere</strong> in the html document</p></li>
<li><p><em>title.string</em> assumes it has only <strong>one</strong> child node, and that child node is a <strong>string</strong></p></li>
</ul>

<p>For <a href=""http://www.crummy.com/software/BeautifulSoup/bs4/doc/"">beautifulsoup 4.x</a>, use different import:</p>

<pre><code>from bs4 import BeautifulSoup
</code></pre>
"
136149,"<p>Basically <code>@classmethod</code> makes a method whose first argument is the class it's called from (rather than the class instance), <code>@staticmethod</code> does not have any implicit arguments.</p>
"
241506,"<p>This handles C++-style comments, C-style comments, strings and simple nesting thereof.</p>

<pre><code>def comment_remover(text):
    def replacer(match):
        s = match.group(0)
        if s.startswith('/'):
            return "" "" # note: a space and not an empty string
        else:
            return s
    pattern = re.compile(
        r'//.*?$|/\*.*?\*/|\'(?:\\.|[^\\\'])*\'|""(?:\\.|[^\\""])*""',
        re.DOTALL | re.MULTILINE
    )
    return re.sub(pattern, replacer, text)
</code></pre>

<p>Strings needs to be included, because comment-markers inside them does not start a comment.</p>

<p><strong>Edit:</strong> re.sub didn't take any flags, so had to compile the pattern first.</p>

<p><strong>Edit2:</strong> Added character literals, since they could contain quotes that would otherwise be recognized as string delimiters.</p>

<p><strong>Edit3:</strong> Fixed the case where a legal expression <code>int/**/x=5;</code> would become <code>intx=5;</code> which would not compile, by replacing the comment with a space rather then an empty string.</p>
"
283719,"<pre><code>$ ls -la chardet-1.0.1.tgz
-rwxr-xr-x 1 vinko vinko 179218 2008-10-20 17:49 chardet-1.0.1.tgz
$ python
Python 2.5.1 (r251:54863, Jul 31 2008, 22:53:39)
[GCC 4.1.2 (Ubuntu 4.1.2-0ubuntu4)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; f = open('chardet-1.0.1.tgz','rb')
&gt;&gt;&gt; f.seek(0,2)
&gt;&gt;&gt; f.tell()
179218L
</code></pre>

<p>Adding ChrisJY's idea to the example</p>

<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.fstat(f.fileno()).st_size
179218L
&gt;&gt;&gt;        
</code></pre>
"
135966,"<p>SWIG generates (rather ugly) C or C++ code. It is straightforward to use for simple functions (things that can be translated directly) and reasonably easy to use for more complex functions (such as functions with output parameters that need an extra translation step to represent in Python.) For more powerful interfacing you often need to write bits of C as part of the interface file. For anything but simple use you will need to know about CPython and how it represents objects -- not hard, but something to keep in mind.</p>

<p>ctypes allows you to directly access C functions, structures and other data, and load arbitrary shared libraries. You do not need to write any C for this, but you do need to understand how C works. It is, you could argue, the flip side of SWIG: it doesn't generate code and it doesn't require a compiler at runtime, but for anything but simple use it does require that you understand how things like C datatypes, casting, memory management and alignment work. You also need to manually or automatically translate C structs, unions and arrays into the equivalent ctypes datastructure, including the right memory layout.</p>

<p>It is likely that in pure execution, SWIG is faster than ctypes -- because the management around the actual work is done in C at compiletime rather than in Python at runtime. However, unless you interface a lot of different C functions but each only a few times, it's unlikely the overhead will be really noticeable.</p>

<p>In development time, ctypes has a much lower startup cost: you don't have to learn about interface files, you don't have to generate .c files and compile them, you don't have to check out and silence warnings. You can just jump in and start using a single C function with minimal effort, then expand it to more. And you get to test and try things out directly in the Python interpreter. Wrapping lots of code is somewhat tedious, although there are attempts to make that simpler (like ctypes-configure.)</p>

<p>SWIG, on the other hand, can be used to generate wrappers for multiple languages (barring language-specific details that need filling in, like the custom C code I mentioned above.) When wrapping lots and lots of code that SWIG can handle with little help, the code generation can also be a lot simpler to set up than the ctypes equivalents.</p>
"
328882,"<p>I see two options in this case:</p>

<h2>Garbage collector</h2>

<pre><code>import gc
for obj in gc.get_objects():
    if isinstance(obj, some_class):
        dome_something(obj)
</code></pre>

<p>This has the disadvantage of being very slow when you have a lot of objects, but works with types over which you have no control.</p>

<h2>Use a mixin and weakrefs</h2>

<pre><code>from collections import defaultdict
import weakref

class KeepRefs(object):
    __refs__ = defaultdict(list)
    def __init__(self):
        self.__refs__[self.__class__].append(weakref.ref(self))

    @classmethod
    def get_instances(cls):
        for inst_ref in cls.__refs__[cls]:
            inst = inst_ref()
            if inst is not None:
                yield inst

class X(KeepRefs):
    def __init__(self, name):
        super(X, self).__init__()
        self.name = name

x = X(""x"")
y = X(""y"")
for r in X.get_instances():
    print r.name
del y
for r in X.get_instances():
    print r.name
</code></pre>

<p>In this case, all the references get stored as a weak reference in a list. If you create and delete a lot of instances frequently, you should clean up the list of weakrefs after iteration, otherwise there's going to be a lot of cruft. </p>

<p>Another problem in this case is that you have to make sure to call the base class constructor. You could also override <code>__new__</code>, but only the <code>__new__</code> method of the first base class is used on instantiation. This also works only on types that are under your control.</p>

<p><strong>Edit</strong>: The method for printing all instances according to a specific format is left as an exercise, but it's basically just a variation on the <code>for</code>-loops.</p>
"
38303,"<p>Factory methods (alternative constructors) are indeed a classic example of class methods.</p>

<p>Basically, class methods are suitable anytime you would like to have a method which naturally fits into the namespace of the class, but is not associated with a particular instance of the class.</p>

<p>As an example, in the excellent <a href=""http://pypi.python.org/pypi/Unipath/0.2.1"">unipath</a> module:</p>

<h2>Current directory</h2>

<ul>
<li><code>Path.cwd()</code>
<ul>
<li>Return the actual current directory; e.g., <code>Path(""/tmp/my_temp_dir"")</code>. This is a class method.</li>
</ul></li>
<li><code>.chdir()</code>
<ul>
<li>Make self the current directory.</li>
</ul></li>
</ul>

<p>As the current directory is process wide, the <code>cwd</code> method has no particular instance with which it should be associated.  However, changing the <code>cwd</code> to the directory of a given <code>Path</code> instance should indeed be an instance method.</p>

<p>Hmmm... as <code>Path.cwd()</code> does indeed return a <code>Path</code> instance, I guess it could be considered to be a factory method...</p>
"
43588,"<p>The <a href=""https://docs.python.org/library/mimetypes.html"">mimetypes module</a> in the standard library will determine/guess the MIME type from a file extension.</p>

<p>If users are uploading files the HTTP post will contain the MIME type of the file alongside the data.  For example, Django makes this data available as an attribute of the <a href=""https://docs.djangoproject.com/en/dev/topics/http/file-uploads/#uploadedfile-objects"">UploadedFile</a> object.</p>
"
34116,"<p>This works for me:  </p>

<pre><code>import urllib2

proxy = urllib2.ProxyHandler({'http': 'http://
username:password@proxyurl:proxyport'})
auth = urllib2.HTTPBasicAuthHandler()
opener = urllib2.build_opener(proxy, auth, urllib2.HTTPHandler)
urllib2.install_opener(opener)

conn = urllib2.urlopen('http://python.org')
return_str = conn.read()
</code></pre>
"
118275,"<p>There's a file called idle.py in your Python installation directory in Lib\idlelib\idle.py</p>

<p>If you run that file with Python, then IDLE should start.</p>

<blockquote>
  <p>c:\Python25\pythonw.exe c:\Python25\Lib\idlelib\idle.py</p>
</blockquote>
"
287934,"<p>You want to learn about ANSI escape sequences. Here's a brief example:</p>

<pre><code>CSI=""\x1B[""
reset=CSI+""m""
print CSI+""31;40m"" + ""Colored Text"" + CSI + ""0m""
</code></pre>

<p>For more info see <a href=""http://en.wikipedia.org/wiki/ANSI_escape_code"">http://en.wikipedia.org/wiki/ANSI_escape_code</a></p>

<p>For a block character, try a unicode character like \u2588:</p>

<pre><code>print u""\u2588""
</code></pre>

<p>Putting it all together:</p>

<pre><code>print CSI+""31;40m"" + u""\u2588"" + CSI + ""0m""
</code></pre>
"
315088,"<p>Here's another example that was tested, and will match search &amp; replace patterns:</p>

<pre><code>import fileinput
import sys

def replaceAll(file,searchExp,replaceExp):
    for line in fileinput.input(file, inplace=1):
        if searchExp in line:
            line = line.replace(searchExp,replaceExp)
        sys.stdout.write(line)
</code></pre>

<p>Example use:</p>

<pre><code>replaceAll(""/fooBar.txt"",""Hello\sWorld!$"",""Goodbye\sWorld."")
</code></pre>
"
783,"<p>Can you show us your code?</p>

<p>The example on the Python docs is quite straightforward:</p>

<pre><code>groups = []
uniquekeys = []
for k, g in groupby(data, keyfunc):
    groups.append(list(g))      # Store group iterator as a list
    uniquekeys.append(k)
</code></pre>

<p>So in your case, data is a list of nodes, keyfunc is where the logic of your criteria function goes and then <code>groupby()</code> groups the data.</p>

<p>You must be careful to <strong>sort the data</strong> by the criteria before you call <code>groupby</code> or it won't work. <code>groupby</code> method actually just iterates through a list and whenever the key changes it creates a new group.</p>
"
301075,"<p>You're being mislead by output -- the second approach you're taking actually does what you want, you just aren't believing it. :)</p>

<pre><code>&gt;&gt;&gt; foo = 'baz ""\\""'
&gt;&gt;&gt; foo
'baz ""\\""'
&gt;&gt;&gt; print foo
baz ""\""
</code></pre>

<p>Incidentally, there's another string form which might be a bit clearer:</p>

<pre><code>&gt;&gt;&gt; print r'baz ""\""'
baz ""\""
</code></pre>
"
267875,"<p>I understand that you want your customers to use the power of python but do not want expose the source code.</p>

<p>Here are my suggestions:</p>

<p>(a) Write the critical pieces of the code as C or C++ libraries and then use <a href=""http://www.riverbankcomputing.co.uk/software/sip/intro"">SIP</a> or <a href=""http://www.swig.org/"">swig</a> to expose the C/C++ APIs to Python namespace.</p>

<p>(b) Use <a href=""http://cython.org/"">cython</a> instead of Python</p>

<p>(c) In both (a) and (b), it should be possible to distribute the libraries as licensed binary with a Python interface.</p>
"
323910,"<p>Expressed as a generator function:</p>

<pre><code>def neighborhood(iterable):
    iterator = iter(iterable)
    prev = None
    item = iterator.next()  # throws StopIteration if empty.
    for next in iterator:
        yield (prev,item,next)
        prev = item
        item = next
    yield (prev,item,None)
</code></pre>

<p>Usage:</p>

<pre><code>for prev,item,next in neighborhood(l):
    print prev, item, next
</code></pre>

<p><strong>Edit:</strong> I thought it would reduce the readability, but this way seem to look better.</p>
"
194248,"<p>ElementTree is much easier to use, because it represents an XML tree (basically) as a structure of lists, and attributes are represented as dictionaries.</p>

<p>ElementTree needs much less memory for XML trees than DOM (and thus is faster), and the parsing overhead via <code>iterparse</code> is comparable to SAX. Additionally, <code>iterparse</code> returns partial structures, and you can keep memory usage constant during parsing by discarding the structures as soon as you process them.</p>

<p>ElementTree, as in Python 2.5, has only a small feature set compared to full-blown XML libraries, but it's enough for many applications. If you need a validating parser or complete XPath support, lxml is the way to go. For a long time, it used to be quite unstable, but I haven't had any problems with it since 2.1.</p>

<p>ElementTree deviates from DOM, where nodes have access to their parent and siblings. Handling actual documents rather than data stores is also a bit cumbersome, because text nodes aren't treated as actual nodes. In the XML snippet</p>

<pre><code>&lt;a&gt;This is &lt;b&gt;a&lt;/b&gt; test&lt;/a&gt;
</code></pre>

<p>The string <code> test</code> will be the so-called <code>tail</code> of element <code>b</code>.</p>

<p>In general, I recommend ElementTree as the default for all XML processing with Python, and DOM or SAX as the solutions for specific problems.</p>
"
118744,"<p>There's a solution to your problem that is distributed with python itself. <code>pindent.py</code>, it's located in the Tools\Scripts directory in a windows install (my path to it is C:\Python25\Tools\Scripts), it looks like you'd have grab it from svn.python.org if you are running on Linux or OSX. </p>

<p>It adds comments when blocks are closed, or can properly indent code if comments are put in. Here's an example of the code outputted by pindent with the command:</p>

<p><code>pindent -c myfile.py</code></p>

<pre><code>def foobar(a, b):
   if a == b:
       a = a+1
   elif a &lt; b:
       b = b-1
       if b &gt; a: a = a-1
       # end if
   else:
       print 'oops!'
   # end if
# end def foobar
</code></pre>

<p>Where the original <code>myfile.py</code> was: </p>

<pre><code>def foobar(a, b):
   if a == b:
       a = a+1
   elif a &lt; b:
       b = b-1
       if b &gt; a: a = a-1
   else:
       print 'oops!'
</code></pre>

<p>You can also use <code>pindent.py -d</code> to insert the correct indentation based on comments (read the header of pindent.py for details), this should allow you to code in python without worrying about indentation.</p>

<p>I'd be interested to learn what solution you end up using, if you require any further assistance, please comment on this post and I'll try to help.</p>
"
245346,"<p>This seems to be the simplest way using module <code>inspect</code>:</p>

<pre><code>import inspect
def somefunc(a,b,c):
    print ""My name is: %s"" % inspect.stack()[0][3]
</code></pre>

<p>You could generalise this with:</p>

<pre><code>def funcname():
    return inspect.stack()[1][3]

def somefunc(a,b,c):
    print ""My name is: %s"" % funcname()
</code></pre>

<p>Credit to <a href=""http://stefaanlippens.net/python_inspect"">Stefaan Lippens</a> which was found via google.</p>
"
193931,"<p>In production code in our company, we try to follow the following rules.</p>

<p>We place imports at the beginning of the file, right after the main file's docstring, e.g.:</p>

<pre><code>""""""
Registry related functionality.
""""""
import wx
# ...
</code></pre>

<p>Now, if we import a class that is one of few in the imported module, we import the name directly, so that in the code we only have to use the last part, e.g.:</p>

<pre><code>from RegistryController import RegistryController
from ui.windows.lists import ListCtrl, DynamicListCtrl
</code></pre>

<p>There are modules, however, that contain dozens of classes, e.g. list of all possible exceptions. Then we import the module itself and reference to it in the code:</p>

<pre><code>from main.core import Exceptions
# ...
raise Exceptions.FileNotFound()
</code></pre>

<p>We use the <code>import X as Y</code> as rarely as possible, because it makes searching for usage of a particular module or class difficult. Sometimes, however, you have to use it if you wish to import two classes that have the same name, but exist in different modules, e.g.:</p>

<pre><code>from Queue import Queue
from main.core.MessageQueue import Queue as MessageQueue
</code></pre>

<p>As a general rule, we don't do imports inside methods -- they simply make code slower and less readable. Some may find this a good way to easily resolve cyclic imports problem, but a better solution is code reorganization.</p>
"
93029,"<p>Iterating over strings is unfortunately rather slow in Python. Regular expressions are over an order of magnitude faster for this kind of thing. You just have to build the character class yourself. The <em>unicodedata</em> module is quite helpful for this, especially the <em>unicodedata.category()</em> function. See <a href=""http://www.unicode.org/reports/tr44/#General_Category_Values"">Unicode Character Database</a> for descriptions of the categories.</p>

<pre><code>import unicodedata, re

all_chars = (unichr(i) for i in xrange(0x110000))
control_chars = ''.join(c for c in all_chars if unicodedata.category(c) == 'Cc')
# or equivalently and much more efficiently
control_chars = ''.join(map(unichr, range(0,32) + range(127,160)))

control_char_re = re.compile('[%s]' % re.escape(control_chars))

def remove_control_chars(s):
    return control_char_re.sub('', s)
</code></pre>
"
212413,"<p>Why not look at the code for bisect_left/right and adapt it to suit your purpose.</p>

<p>like this:</p>

<pre class=""lang-py prettyprint-override""><code>def binary_search(a, x, lo=0, hi=None):
    if hi is None:
        hi = len(a)
    while lo &lt; hi:
        mid = (lo+hi)//2
        midval = a[mid]
        if midval &lt; x:
            lo = mid+1
        elif midval &gt; x: 
            hi = mid
        else:
            return mid
    return -1
</code></pre>
"
211101,"<p>From the python docs on <code>__import__</code>:</p>

<blockquote>
<pre><code>__import__( name[, globals[, locals[, fromlist[, level]]]])
</code></pre>
  
  <p>...</p>
  
  <p>When the name variable is of the form
  package.module, normally, the
  top-level package (the name up till
  the first dot) is returned, not the
  module named by name. However, when a
  non-empty fromlist argument is given,
  the module named by name is returned.
  This is done for compatibility with
  the bytecode generated for the
  different kinds of import statement;
  when using ""import spam.ham.eggs"", the
  top-level package spam  must be placed
  in the importing namespace, but when
  using ""from spam.ham import eggs"", the
  spam.ham subpackage must be used to
  find the eggs variable. As a
  workaround for this behavior, use
  getattr() to extract the desired
  components. For example, you could
  define the following helper:</p>

<pre><code>def my_import(name):
    mod = __import__(name)
    components = name.split('.')
    for comp in components[1:]:
        mod = getattr(mod, comp)
    return mod
</code></pre>
</blockquote>

<p><strong>To paraphrase:</strong></p>

<p>When you ask for <code>somepackage.somemodule</code>, <code>__import__</code> returns <code>somepackage.__init__.py</code>, which is often empty.</p>

<p>It will return <code>somemodule</code> if you provide <code>fromlist</code> (a list of the variable names inside <code>somemodule</code> you want, which are not actually returned)</p>

<p>You can also, as I did, use the function they suggest.</p>

<p>Note: I asked this question fully intending to answer it myself. There was a big bug in my code, and having misdiagnosed it, it took me a long time to figure it out, so I figured I'd help the SO community out and post the gotcha I ran into here.</p>
"
43358,"<p>You can use PyObjC on the iPhone as well, due to the excellent work by Jay Freeman (saurik). See <a href=""http://www.saurik.com/id/5"">iPhone Applications in Python</a>.</p>

<p>Note that this requires a jailbroken iPhone at the moment.</p>
"
119598,"<p>The most ""pythonic"" way is to use 4 spaces per indentation level. The Python interpreter will however recognize spaces or tabs. The only gottcha is you <strong>must never mix spaces and tabs</strong>, pick one or the other. That said, the specification recommends spaces, most developers use spaces, so unless you have a really good reason not to, I'd say go with spaces.</p>
"
111160,"<p>Tkinter supports a mechanism called <a href=""http://effbot.org/tkinterbook/tkinter-events-and-bindings.htm#protocols""><em>protocol handlers</em></a>. Here, the term <em>protocol</em> refers to the interaction between the application and the window manager. The most commonly used protocol is called <code>WM_DELETE_WINDOW</code>, and is used to define what happens when the user explicitly closes a window using the window manager.</p>

<p>You can use the <code>protocol</code> method to <em>install a handler</em> for this protocol (the widget must be a <code>Tk</code> or <code>Toplevel</code> widget):</p>

<p>Here you have a concrete example:</p>

<pre><code>import tkinter as tk
from tkinter import messagebox

root = tk.Tk()

def on_closing():
    if messagebox.askokcancel(""Quit"", ""Do you want to quit?""):
        root.destroy()

root.protocol(""WM_DELETE_WINDOW"", on_closing)
root.mainloop()
</code></pre>
"
284326,"<p>We use the logging module for this.</p>

<p>For example:</p>

<pre><code>import logging
class SomeTest( unittest.TestCase ):
    def testSomething( self ):
        log= logging.getLogger( ""SomeTest.testSomething"" )
        log.debug( ""this= %r"", self.this )
        log.debug( ""that= %r"", self.that )
        # etc.
        self.assertEquals( 3.14, pi )

if __name__ == ""__main__"":
    logging.basicConfig( stream=sys.stderr )
    logging.getLogger( ""SomeTest.testSomething"" ).setLevel( logging.DEBUG )
    unittest.main()
</code></pre>

<p>That allows us to turn on debugging for specific tests which we know are failing and for which we want additional debugging information.</p>

<p>My preferred method, however, isn't to spent a lot of time on debugging, but spend it writing more fine-grained tests to expose the problem.</p>
"
95168,"<p><code>xrange</code> only stores the range params and generates the numbers on demand. However the C implementation of Python currently restricts its args to C longs:</p>

<pre><code>xrange(2**32-1, 2**32+1)  # When long is 32 bits, OverflowError: Python int too large to convert to C long
range(2**32-1, 2**32+1)   # OK --&gt; [4294967295L, 4294967296L]
</code></pre>

<p>Note that in Python 3.0 there is only <code>range</code> and it behaves like the 2.x <code>xrange</code> but without the limitations on minimum and maximum end points.</p>
"
283630,"<p>Here is some list functions based on <a href=""http://stackoverflow.com/questions/280243/python-linked-list#280284"">Martin v. LÃ¶wis's representation</a>:</p>

<pre><code>cons   = lambda el, lst: (el, lst)
mklist = lambda *args: reduce(lambda lst, el: cons(el, lst), reversed(args), None)
car = lambda lst: lst[0] if lst else lst
cdr = lambda lst: lst[1] if lst else lst
nth = lambda n, lst: nth(n-1, cdr(lst)) if n &gt; 0 else car(lst)
length  = lambda lst, count=0: length(cdr(lst), count+1) if lst else count
begin   = lambda *args: args[-1]
display = lambda lst: begin(w(""%s "" % car(lst)), display(cdr(lst))) if lst else w(""nil\n"")
</code></pre>

<p>where <code>w = sys.stdout.write</code></p>

<p>Linked lists have no practical value in Python.
I've <em>never</em> used a linked list in Python for any problem except educational.</p>

<p>Thomas Watnedal <a href=""http://stackoverflow.com/questions/280243/python-linked-list#280280"">suggested</a> a good educational resource <a href=""http://greenteapress.com/thinkpython/html/chap17.html"">How to Think Like a Computer Scientist, Chapter 17: Linked lists</a>:</p>

<p>A linked list is either: </p>

<ul>
<li>the empty list, represented by None, or </li>
<li><p>a node that contains a cargo object and a reference to a linked list.</p>

<pre><code>class Node: 
  def __init__(self, cargo=None, next=None): 
    self.car = cargo 
    self.cdr = next    
  def __str__(self): 
    return str(self.car)


def display(lst):
  if lst:
    w(""%s "" % lst)
    display(lst.cdr)
  else:
    w(""nil\n"")
</code></pre></li>
</ul>
"
283801,"<p>Answers so far have been templating the values into a plain SQL string. That's absolutely fine for integers, but if we wanted to do it for strings we get the escaping issue.</p>

<p>Here's a variant using a parameterised query that would work for both:</p>

<pre><code>placeholder= '?' # For SQLite. See DBAPI paramstyle.
placeholders= ', '.join(placeholder for unused in l)
query= 'SELECT name FROM students WHERE id IN (%s)' % placeholders
cursor.execute(query, l)
</code></pre>
"
79913,"<p>Thanks @rofly, the full conversion from string to string is as follows:</p>

<pre><code>time.strftime(""%Y-%m-%d %H:%M:%S"", 
              time.gmtime(time.mktime(time.strptime(""2008-09-17 14:04:00"", 
                                                    ""%Y-%m-%d %H:%M:%S""))))
</code></pre>

<p>My summary of the <code>time</code>/<code>calendar</code> functions:</p>

<p><code>time.strptime</code><br>
string --> tuple (no timezone applied, so matches string)</p>

<p><code>time.mktime</code><br>
local time tuple --> seconds since epoch (always local time)</p>

<p><code>time.gmtime</code><br>
seconds since epoch --> tuple in UTC</p>

<p>and </p>

<p><code>calendar.timegm</code><br>
tuple in UTC --> seconds since epoch</p>

<p><code>time.localtime</code><br>
seconds since epoch --> tuple in local timezone</p>
"
166098,"<p>With regards to the single and double-leading underscores: both indicate the same concept of 'privateness'. That is to say, people will know the attribute (be it a method or a 'normal' data attribute or anything else) is not part of the public API of the object. People will know that to touch it directly is to invite disaster.</p>

<p>On top of that, the double-leading underscore attributes (but not the single-leading underscore attributes) are <em>name-mangled</em> to make accessing them <em>by accident</em> from subclasses or anywhere else outside the current class less likely. You can still access them, but not as trivially. For example:</p>

<pre><code>&gt;&gt;&gt; class ClassA:
...     def __init__(self):
...         self._single = ""Single""
...         self.__double = ""Double""
...     def getSingle(self):
...         return self._single
...     def getDouble(self):
...         return self.__double
... 
&gt;&gt;&gt; class ClassB(ClassA):
...     def getSingle_B(self):
...         return self._single
...     def getDouble_B(self):
...         return self.__double
... 
&gt;&gt;&gt; a = ClassA()
&gt;&gt;&gt; b = ClassB()
</code></pre>

<p>You can now trivially access <code>a._single</code> and <code>b._single</code> and get the <code>_single</code> attribute created by <code>ClassA</code>:</p>

<pre><code>&gt;&gt;&gt; a._single, b._single
('Single', 'Single')
&gt;&gt;&gt; a.getSingle(), b.getSingle(), b.getSingle_B()
('Single', 'Single', 'Single')
</code></pre>

<p>But trying to access the <code>__double</code> attribute on the <code>a</code> or <code>b</code> instance directly won't work:</p>

<pre><code>&gt;&gt;&gt; a.__double
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
AttributeError: ClassA instance has no attribute '__double'
&gt;&gt;&gt; b.__double
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
AttributeError: ClassB instance has no attribute '__double'
</code></pre>

<p>And though methods defined in <code>ClassA</code> can get at it directly (when called on either instance):</p>

<pre><code>&gt;&gt;&gt; a.getDouble(), b.getDouble()
('Double', 'Double')
</code></pre>

<p>Methods defined on <code>ClassB</code> can not:</p>

<pre><code>&gt;&gt;&gt; b.getDouble_B()
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
  File ""&lt;stdin&gt;"", line 5, in getDouble_B
AttributeError: ClassB instance has no attribute '_ClassB__double'
</code></pre>

<p>And right in that error you get a hint about what's happening. The <code>__double</code> attribute name, when accessed inside a class, is being name-mangled to include the name of the class that it is being accessed <em>in</em>. When <code>ClassA</code> tries to access <code>self.__double</code>, it actually turns -- at compiletime -- into an access of <code>self._ClassA__double</code>, and likewise for <code>ClassB</code>. (If a method in <code>ClassB</code> were to assign to <code>__double</code>, not included in the code for brevity, it would therefor not touch <code>ClassA</code>'s <code>__double</code> but create a new attribute.) There is no other protection of this attribute, so you can still access it directly if you know the right name:</p>

<pre><code>&gt;&gt;&gt; a._ClassA__double, b._ClassA__double
('Double', 'Double')
</code></pre>

<p><strong>So why is this a problem?</strong></p>

<p>Well, it's a problem any time you want to inherit and change the behaviour of any code dealing with this attribute. You either have to reimplement everything that touches this double-underscore attribute directly, or you have to guess at the class name and mangle the name manually. The problem gets worse when this double-underscore attribute is actually a method: overriding the method <em>or calling the method in a subclass</em> means doing the name-mangling manually, or reimplementing all the code that calls the method to not use the double-underscore name. Not to mention accessing the attribute dynamically, with <code>getattr()</code>: you will have to manually mangle there, too.</p>

<p>On the other hand, because the attribute is only trivially rewritten, it offers only superficial 'protection'. Any piece of code can still get at the attribute by manually mangling, although that will make <em>their</em> code dependant on the name of <em>your</em> class, and efforts on your side to refactor your code or rename your class (while still keeping the same user-visible name, a common practice in Python) would needlessly break their code. They can also 'trick' Python into doing the name-mangling for them by naming their class the same as yours: notice how there is no module name included in the mangled attribute name. And lastly, the double-underscore attribute is still visible in all attribute lists and all forms of introspection that don't take care to skip attributes starting with a (<em>single</em>) underscore.</p>

<p>So, <em>if</em> you use double-underscore names, use them exceedingly sparingly, as they can turn out quite inconvenient, and never use them for methods <strong>or anything else a subclass may ever want to reimplement, override or access directly</strong>. And realize that double-leading underscore name-mangling offers <em>no real protection</em>. In the end, using a single leading underscore wins you just as much and gives you less (potential, future) pain. Use a single leading underscore.</p>
"
317494,"<p>Probably something like this if it's the text part you want...</p>

<pre><code>from xml.dom.minidom import parse
dom = parse(""C:\\eve.xml"")
name = dom.getElementsByTagName('name')

print "" "".join(t.nodeValue for t in name[0].childNodes if t.nodeType == t.TEXT_NODE)
</code></pre>

<p>The text part of a node is considered a node in itself placed as a child-node of the one you asked for. Thus you will want to go through all its children and find all child nodes that are text nodes. A node can have several text nodes; eg.</p>

<pre><code>&lt;name&gt;
  blabla
  &lt;somestuff&gt;asdf&lt;/somestuff&gt;
  znylpx
&lt;/name&gt;
</code></pre>

<p>You want both 'blabla' and 'znylpx'; hence the "" "".join(). You might want to replace the space with a newline or so, or perhaps by nothing.</p>
"
147878,"<ol>
<li><p>Install <a href=""http://www.phyast.pitt.edu/~micheles/python/documentation.html#the-solution"">decorator</a> module:</p>

<pre><code>$ pip install decorator
</code></pre></li>
<li><p>Adapt definition of <code>args_as_ints()</code>:</p>

<pre><code>import decorator

@decorator.decorator
def args_as_ints(f, *args, **kwargs):
    args = [int(x) for x in args]
    kwargs = dict((k, int(v)) for k, v in kwargs.items())
    return f(*args, **kwargs)

@args_as_ints
def funny_function(x, y, z=3):
    """"""Computes x*y + 2*z""""""
    return x*y + 2*z

print funny_function(""3"", 4.0, z=""5"")
# 22
help(funny_function)
# Help on function funny_function in module __main__:
# 
# funny_function(x, y, z=3)
#     Computes x*y + 2*z
</code></pre></li>
</ol>

<hr>

<h3>Python 3.4+</h3>

<p><a href=""https://docs.python.org/3/library/functools.html#functools.wraps""><code>functools.wraps()</code> from stdlib</a> preserves signatures since Python 3.4:</p>

<pre><code>import functools


def args_as_ints(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        args = [int(x) for x in args]
        kwargs = dict((k, int(v)) for k, v in kwargs.items())
        return func(*args, **kwargs)
    return wrapper


@args_as_ints
def funny_function(x, y, z=3):
    """"""Computes x*y + 2*z""""""
    return x*y + 2*z


print(funny_function(""3"", 4.0, z=""5""))
# 22
help(funny_function)
# Help on function funny_function in module __main__:
#
# funny_function(x, y, z=3)
#     Computes x*y + 2*z
</code></pre>

<p><code>functools.wraps()</code> is available <a href=""https://docs.python.org/2.5/lib/module-functools.html"">at least since Python 2.5</a> but it does not preserve the signature there:</p>

<pre><code>help(funny_function)
# Help on function funny_function in module __main__:
#
# funny_function(*args, **kwargs)
#    Computes x*y + 2*z
</code></pre>

<p>Notice: <code>*args, **kwargs</code> instead of <code>x, y, z=3</code>.</p>
"
206215,"<p>Here's a different way of doing it.</p>

<p>If you're using windows the following acts like double-clicking the file in Explorer, or giving the file name as an argument to the DOS ""start"" command:  the file is opened with whatever application (if any) its extension is associated.</p>

<pre><code>filepath = 'textfile.txt'
import os
os.startfile(filepath)
</code></pre>

<p>Example:</p>

<pre><code>import os
os.startfile('textfile.txt')
</code></pre>

<p>This will open textfile.txt with notepad if notepad is associted with .txt files.</p>
"
252918,"<p>Good answers, but don't forget, any iterable will do for <code>extend</code> (not just list):</p>

<pre><code>l.extend(xrange(5))
</code></pre>
"
236515,"<h2>Don't use a screw driver as a hammer</h2>

<p>Python is not a statically typed language, so don't try to use it that way.</p>

<p>When you use a specific tool, you use it for what it has been built. For Python, it means:</p>

<ul>
<li><p><strong>Duck typing</strong> : no type checking. Only behavior matters. Therefore your code must be designed to use this feature. A good design means generic signatures, no dependences between components, high abstraction levels.. So if you change anything, you won't have to change the rest of the code. Python will not complain either, that what it has been built for. Types are not an issue.</p></li>
<li><p><strong>Huge standard library</strong>. You do not need to change all your calls in the program if you use standard features you haven't coded yourself. And Python come with batteries included. I keep discovering them everyday. I had no idea of the number of modules I could use when I started and tried to rewrite existing stuff like everybody. It's OK, you can't get it all right from the beginning.</p></li>
</ul>

<p>You don't write Java, C++, Python, PHP, Erlang, whatever, the same way. They are good reasons why there is room for each of so many different languages, they do not do the same things.</p>

<h2>Unit tests are not a substitute</h2>

<p>Unit tests must be performed with any language. The most famous unit test library (<a href=""http://en.wikipedia.org/wiki/JUnit"">JUnit</a>) is from the Java world!</p>

<p>This has nothing to do with types. You check behaviors, again. You avoid trouble with regression. You ensure your customer you are on tracks.</p>

<h2>Python for large scale projects</h2>

<blockquote>
  <p>Languages, libraries and frameworks
  don't scale. Architectures do.</p>
</blockquote>

<p>If you design a solid architecture, if you are able to make it evolves quickly, then it will scale. Unit tests help, automatic code check as well. But they are just safety nets. And small ones.</p>

<p>Python is especially suitable for large projects because it enforces some good practices and has a lot of usual design patterns built-in. But again, do not use it for what it is not designed. E.g : Python is not a technology for CPU intensive tasks.</p>

<p>In a huge project, you will most likely use several different technologies anyway. As a <a href=""http://stackoverflow.com/questions/980813/what-is-sgbd"">SGBD</a> and a templating language, or else. Python is no exception.</p>

<p>You will probably want to use C/C++ for the part of your code you need to be fast. Or Java to fit in a <a href=""http://en.wikipedia.org/wiki/Apache_Tomcat"">Tomcat</a> environment. Don't know, don't care. Python can play well with these.</p>

<h2>As a conclusion</h2>

<p>My answer may feel a bit rude, but don't get me wrong: this is a very good question.</p>

<p>A lot of people come to Python with old habits. I screwed myself trying to code Java like Python. You can, but will never get the best of it.</p>

<p>If you have played / want to play with Python, it's great! It's a wonderful tool. But just a tool, really.</p>
"
271128,"<p>it would be best if you construct your data like {note the '(' and ')' can be exchanged for '[' and ']' repectively, one being for tuples, one for lists}</p>

<pre><code>[ (Product_Type_1, ( product_1, product_2 )),
   (Product_Type_2, ( product_3, product_4 )) ]
</code></pre>

<p>and have the template do this:</p>

<pre><code>{% for product_type, products in product_type_list %}
    {{ product_type }}
    {% for product in products %}
        {{ product }}
    {% endfor %}
{% endfor %}
</code></pre>

<p>the way tuples/lists are unpacked in for loops is based on the item returned by the list iterator.
each iteration only one item was returned. the first time around the loop, Product_Type_1, the second your list of products... </p>
"
294100,"<p>If you are using a <a href=""http://docs.wxwidgets.org/stable/wx_wxstatictext.html#wxstatictextsetlabel"">wx.StaticText()</a> you can just:</p>

<pre><code>def __init__(self, parent, *args, **kwargs): #frame constructor, etc.
    self.some_text = wx.StaticText(panel, wx.ID_ANY, label=""Awaiting MySQL Data"", style=wx.ALIGN_CENTER)

def someFunction(self):
    mysql_data = databasemodel.returnData() #query your database to return a string
    self.some_text.SetLabel(mysql_data)
</code></pre>

<p>As litb mentioned, the wxWidgets docs are often much easier to use than the <a href=""http://wxpython.org/docs/api/wx.StaticText-class.html"">wxPython docs</a>.  In order to see that the SetLabel() function can be applied to a wx.StaticText instance, you have to travel up the namespace hierarchy in the wxPython docs to the <a href=""http://wxpython.org/docs/api/wx.Window-class.html#SetLabel"">wxWindow superclass</a>, from which wx.StaticText is subclassed.  There are a few things different in wxPython from wxWidgets, and it can be challenging to find out what they are.  Fortunately, a lot of the time, the differences are convenience functions that have been added to wxPython and are not found in wxWidgets.</p>
"
35858,"<p>Perhaps you have a specific reason for using <code>os.system()</code>. But if not you should probably be using the <a href=""http://docs.python.org/lib/module-subprocess.html""><code>subprocess</code> module</a>. You can specify the pipes directly and avoid using the shell.</p>

<p>The following is from <a href=""http://www.python.org/dev/peps/pep-0324/"">PEP324</a>:</p>

<blockquote>
<pre><code>Replacing shell pipe line
-------------------------

output=`dmesg | grep hda`
==&gt;
p1 = Popen([""dmesg""], stdout=PIPE)
p2 = Popen([""grep"", ""hda""], stdin=p1.stdout, stdout=PIPE)
output = p2.communicate()[0]
</code></pre>
</blockquote>
"
111355,"<p>It just so happens that the tokens you want split are already Python tokens, so you can use the built-in <code>tokenize</code> module.  It's almost a one-liner:</p>

<pre><code>from cStringIO import StringIO
from tokenize import generate_tokens
STRING = 1
list(token[STRING] for token 
     in generate_tokens(StringIO('2+24*48/32').readline)
     if token[STRING])
['2', '+', '24', '*', '48', '/', '32']
</code></pre>
"
182259,"<p>If polling is good enough for you, I'd just watch if the ""modified time"" file stat changes.  To read it:</p>

<pre><code>os.stat(filename).st_mtime
</code></pre>

<p>(Also note that the Windows native change event solution does not work in all circumstances, e.g. on network drives.)</p>

<pre><code>import os

class Monkey(object):
    def __init__(self):
        self._cached_stamp = 0
        self.filename = '/path/to/file'

    def ook(self):
        stamp = os.stat(self.filename).st_mtime
        if stamp != self._cached_stamp:
            self._cached_stamp = stamp
            # File has changed, so do something...
</code></pre>
"
220709,"<p>The Right Thing is advisory locking using <code>flock(LOCK_EX)</code>; in Python, this is found in the <A HREF=""http://docs.python.org/3/library/fcntl.html""><code>fcntl</code> module</A>.</p>

<p>Unlike pidfiles, these locks are always automatically released when your process dies for any reason, have no race conditions exist relating to file deletion (as the file doesn't <I>need</I> to be deleted to release the lock), and there's no chance of a different process inheriting the PID and thus appearing to validate a stale lock.</p>

<p>If you want unclean shutdown detection, you can write a marker (such as your PID, for traditionalists) into the file after grabbing the lock, and then truncate the file to 0-byte status before a clean shutdown (while the lock is being held); thus, if the lock is not held and the file is non-empty, an unclean shutdown is indicated.</p>
"
250373,"<p>I actually wrote a solution for this on a recent project of mine.  I've compressed the majority of it down to be a little smaller.</p>

<pre><code>def smart_truncate(content, length=100, suffix='...'):
    if len(content) &lt;= length:
        return content
    else:
        return ' '.join(content[:length+1].split(' ')[0:-1]) + suffix
</code></pre>

<p>What happens is the if-statement checks if your content is already less than the cutoff point.  If it's not, it truncates to the desired length, splits on the space, removes the last element (so that you don't cut off a word), and then joins it back together (while tacking on the '...').</p>
"
228837,"<p>The 3rd party <a href=""http://pypi.python.org/pypi/shove"">shove</a> module is also worth taking a look at. It's very similar to shelve in that it is a simple dict-like object, however it can store to various backends (such as file, SVN, and S3), provides optional compression, and is even threadsafe. It's a very handy module</p>

<pre><code>from shove import Shove

mem_store = Shove()
file_store = Shove('file://mystore')

file_store['key'] = value
</code></pre>
"
323698,"<p><code>[:]</code> <a href=""http://en.wikipedia.org/wiki/Deep_copy#Shallow_copy"">Shallow copies</a> the list, making a copy of the list structure containing references to the original list members.  This means that operations on the copy do not affect the structure of the original.  However, if you do something to the list members, both lists still refer to them, so the updates will show up if the members are accessed through the original.  </p>

<p>A <a href=""http://en.wikipedia.org/wiki/Deep_copy#Deep_copy"">Deep Copy</a> would make copies of all the list members as well.</p>

<p>The code snippet below shows a shallow copy in action.</p>

<pre><code># ================================================================
# === ShallowCopy.py =============================================
# ================================================================
#
class Foo:
    def __init__(self, data):
        self._data = data

aa = Foo ('aaa')
bb = Foo ('bbb')

# The initial list has two elements containing 'aaa' and 'bbb'
OldList = [aa,bb]
print OldList[0]._data

# The shallow copy makes a new list pointing to the old elements
NewList = OldList[:]
print NewList[0]._data

# Updating one of the elements through the new list sees the
# change reflected when you access that element through the
# old list.
NewList[0]._data = 'xxx'
print OldList[0]._data

# Updating the new list to point to something new is not reflected
# in the old list.
NewList[0] = Foo ('ccc')
print NewList[0]._data
print OldList[0]._data
</code></pre>

<p>Running it in a python shell gives the following transcript.  We can see the
list being made with copies of the old objects.  One of the objects can have
its state updated by reference through the old list, and the updates can be
seen when the object is accessed through the old list.  Finally, changing a
reference in the new list can be seen to not reflect in the old list, as the
new list is now referring to a different object.</p>

<pre><code>&gt;&gt;&gt; # ================================================================
... # === ShallowCopy.py =============================================
... # ================================================================
... #
... class Foo:
...     def __init__(self, data):
...         self._data = data
...
&gt;&gt;&gt; aa = Foo ('aaa')
&gt;&gt;&gt; bb = Foo ('bbb')
&gt;&gt;&gt;
&gt;&gt;&gt; # The initial list has two elements containing 'aaa' and 'bbb'
... OldList = [aa,bb]
&gt;&gt;&gt; print OldList[0]._data
aaa
&gt;&gt;&gt;
&gt;&gt;&gt; # The shallow copy makes a new list pointing to the old elements
... NewList = OldList[:]
&gt;&gt;&gt; print NewList[0]._data
aaa
&gt;&gt;&gt;
&gt;&gt;&gt; # Updating one of the elements through the new list sees the
... # change reflected when you access that element through the
... # old list.
... NewList[0]._data = 'xxx'
&gt;&gt;&gt; print OldList[0]._data
xxx
&gt;&gt;&gt;
&gt;&gt;&gt; # Updating the new list to point to something new is not reflected
... # in the old list.
... NewList[0] = Foo ('ccc')
&gt;&gt;&gt; print NewList[0]._data
ccc
&gt;&gt;&gt; print OldList[0]._data
xxx
</code></pre>
"
173918,"<p>In fact, this question is answered in the App Egnine documentation. See an example on <a href=""http://code.google.com/appengine/docs/images/usingimages.html#Uploading"">Uploading User Images</a>.</p>

<p>HTML code, inside &lt;form&gt;&lt;/form&gt;:</p>

<pre>&lt;input type=""file"" name=""img""/&gt;</pre>

<p>Python code:</p>

<pre>class Guestbook(webapp.RequestHandler):
  def post(self):
    greeting = Greeting()
    if users.get_current_user():
      greeting.author = users.get_current_user()
    greeting.content = self.request.get(""content"")
    avatar = self.request.get(""img"")
    greeting.avatar = db.Blob(avatar)
    greeting.put()
    self.redirect('/')</pre>
"
273872,"<p>The <code>errno</code> attribute on the error should be the same on all platforms. You will get <code>WindowsError</code> exceptions on Windows, but since this is a subclass of OSError the same ""<code>except OSError:</code>"" block will catch it. Windows does have its own error codes, and these are accessible as <code>.winerror</code>, but the <code>.errno</code> attribute should still be present, and usable in a cross-platform way.</p>

<p>Symbolic names for the various error codes can be found in the <code>errno</code> module.
For example,</p>

<pre><code>import os, errno
try:
    os.mkdir('test')
except OSError, e:
    if e.errno == errno.EEXIST:
        # Do something
</code></pre>

<p>You can also perform the reverse lookup (to find out what code you should be using) with <code>errno.errorcode</code>. That is:</p>

<pre><code>&gt;&gt;&gt; errno.errorcode[17]
'EEXIST'
</code></pre>
"
105025,"<p>In Python, everything is shared, except for function-local variables (because each function call gets its own set of locals, and threads are always separate function calls.) And even then, only the variables themselves (the names that refer to objects) are local to the function; objects themselves are always global, and anything can refer to them.
The <code>Thread</code> object for a particular thread is not a special object in this regard. If you store the <code>Thread</code> object somewhere all threads can access (like a global variable) then all threads can access that one <code>Thread</code> object. If you want to atomically modify <em>anything</em> that you didn't just create in this very same thread, and did not store anywhere another thread can get at it, you have to protect it by a lock. And all threads must of course share this very same lock, or it wouldn't be very effective.</p>

<p>If you want actual thread-local storage, that's where <code>threading.local</code> comes in. Attributes of <code>threading.local</code> are not shared between threads; each thread sees only the attributes it itself placed in there. If you're curious about its implementation, the source is in <code>_threading_local.py</code> in the standard library.</p>
"
120118,"<p>You need to use the <a href=""http://docs.python.org/lib/module-urllib2.html"" rel=""nofollow"">urllib2</a> that superseedes <a href=""http://docs.python.org/lib/module-urllib.html"" rel=""nofollow"">urllib</a> in the <a href=""http://docs.python.org/lib/"" rel=""nofollow"">python std library</a> in order to change the user agent.</p>

<p>Straight from the <a href=""http://web.archive.org/web/20070202031348/http://docs.python.org/lib/urllib2-examples.html"" rel=""nofollow"">examples</a></p>

<pre><code>import urllib2
opener = urllib2.build_opener()
opener.addheaders = [('User-agent', 'Mozilla/5.0')]
infile = opener.open('http://en.wikipedia.org/w/index.php?title=Albert_Einstein&amp;printable=yes')
page = infile.read()
</code></pre>
"
76374,"<p>While you should generally prefer <code>sys.exit</code> because it is more ""friendly"" to other code, all it actually does is raise an exception.</p>

<p>If you are sure that you need to exit a process immediately, and you might be inside of some exception handler which would catch <code>SystemExit</code>, there is another function - <code>os._exit</code> - which terminates immediately at the C level and does not perform any of the normal tear-down of the interpreter; for example, hooks registered with the ""atexit"" module are not executed.</p>
"
164987,"<p>Don't try and obfuscate or encrypt the code - it will never work.</p>

<p>I would suggest selling the Django application ""as a service"" - either host it for them, or sell them the code <em>and support</em>. Write up a contract that forbids them from redistributing it.</p>

<p>That said, if you were determined to obfuscate the code in some way - you can distribute python applications entirely as .pyc (Python compiled byte-code).. It's how Py2App works.</p>

<p>It will still be re-distributable, <em>but</em> it will be very difficult to edit the files - so you could add some basic licensing stuff, and not have it foiled by a few <code>#</code>s..</p>

<p>As I said, I don't think you'll succeed in anti-piracy via encryption or obfuscation etc.. Depending on your clients, a simple contract, and maybe some really basic checks will go a long much further than some complicated decryption system (And make the experience of using your application <em>better</em>, instead of <em>hopefully not any worse</em>)</p>
"
238124,"<p>So far as I know there's no way to make it a one-liner in current Python without introducing another function, e.g.:</p>

<pre><code>split_list = lambda lst: (lst[0], lst[1:])
head, rest = split_list(my_func())
</code></pre>

<p>However, in Python 3.0 the specialized syntax used for variadic argument signatures and argument unpacking will become available for this type of general sequence unpacking as well, so in 3.0 you'll be able to write:</p>

<pre><code>head, *rest = my_func()
</code></pre>

<p>See <a href=""https://www.python.org/dev/peps/pep-3132/"">PEP 3132</a> for details.</p>
"
34094,"<p>The <a href=""https://nose.readthedocs.org/en/latest/"">nose</a> testing framework <a href=""https://nose.readthedocs.org/en/latest/writing_tests.html#test-generators"">supports this</a>. </p>

<p>Example (the code below is the entire contents of the file containing the test):</p>

<pre><code>param_list = [('a', 'a'), ('a', 'b'), ('b', 'b')]

def test_generator():
    for params in param_list:
        yield check_em, params[0], params[1]

def check_em(a, b):
    assert a == b
</code></pre>

<p>The output of the nosetests command:</p>

<pre><code>> nosetests -v
testgen.test_generator('a', 'a') ... ok
testgen.test_generator('a', 'b') ... FAIL
testgen.test_generator('b', 'b') ... ok

======================================================================
FAIL: testgen.test_generator('a', 'b')
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/usr/lib/python2.5/site-packages/nose-0.10.1-py2.5.egg/nose/case.py"", line 203, in runTest
    self.test(*self.arg)
  File ""testgen.py"", line 7, in check_em
    assert a == b
AssertionError

----------------------------------------------------------------------
Ran 3 tests in 0.006s

FAILED (failures=1)
</code></pre>
"
13949,"<p>Have you tried :</p>

<pre><code>import sys
sys.stdout.write('\a')
sys.stdout.flush()
</code></pre>

<p>That works for me here on Mac OS 10.5</p>

<p>Actually, I think your original attempt works also with a little modification:</p>

<pre><code>print('\a')
</code></pre>

<p>(You just need the single quotes around the character sequence).</p>
"
237082,"<p>os.stat <a href=""http://www.python.org/doc/2.5.2/lib/module-stat.html"">http://www.python.org/doc/2.5.2/lib/module-stat.html</a></p>

<p>edit: In newer code you should probably use <a href=""http://docs.python.org/library/os.path.html#os.path.getmtime"">os.path.getmtime()</a> (thanks Christian Oudard)<br>
 but note that it returns a floating point value of time_t with fraction seconds (if your OS supports it)</p>
"
101167,"<p>You can use the module called <a href=""http://docs.activestate.com/activepython/2.5/pywin32/win32clipboard.html"">win32clipboard</a>, which is part of <a href=""http://sourceforge.net/projects/pywin32/"">pywin32</a>.</p>

<p>Here is an example that first sets the clipboard data then gets it:</p>

<pre><code>import win32clipboard

# set clipboard data
win32clipboard.OpenClipboard()
win32clipboard.EmptyClipboard()
win32clipboard.SetClipboardText('testing 123')
win32clipboard.CloseClipboard()

# get clipboard data
win32clipboard.OpenClipboard()
data = win32clipboard.GetClipboardData()
win32clipboard.CloseClipboard()
print data
</code></pre>

<p>An important reminder from the documentation:</p>

<blockquote>
  <p>When the window has finished examining or changing the clipboard,
  close the clipboard by calling CloseClipboard. This enables other
  windows to access the clipboard. Do not place an object on the
  clipboard after calling CloseClipboard.</p>
</blockquote>
"
210740,"<p>You can use <a href=""http://docs.python.org/lib/module-ctypes.html"">ctypes</a> and its <code>c_uint32</code>:</p>

<pre><code>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; m = 0xFFFFFF00
&gt;&gt;&gt; ctypes.c_uint32(~m).value
255L
</code></pre>

<p>So what I did here was casting <code>~m</code> to a C 32-bit unsigned integer and retrieving its value back in Python format.</p>
"
35990,"<p>How about a dictionary?</p>

<p>Something like this:</p>

<pre><code>myStruct = {'field1': 'some val', 'field2': 'some val'}
</code></pre>

<p>Then you can use this to manipulate values:</p>

<pre><code>print myStruct['field1']
myStruct['field2'] = 'some other values'
</code></pre>

<p>And the values don't have to be strings.  They can be pretty much any other object.</p>
"
89238,"<pre><code>import os
cmd = 'ls -al'
os.system(cmd)
</code></pre>

<p>If you want to return the results of the command, you can use <a href=""https://docs.python.org/2/library/os.html#os.popen""><code>os.popen</code></a>. However, this is deprecated since version 2.6 in favor of the <a href=""https://docs.python.org/2/library/subprocess.html#module-subprocess"">subprocess module</a>, which other answers have covered well.</p>
"
26626,"<p>You may want to read this <a href=""http://mail.python.org/pipermail/python-list/2001-November/094920.html"">object identity and equivalence</a>.</p>

<p>The statement 'is' is used for object identity, it checks if objects refer to the same instance (same address in memory).</p>

<p>And the '==' statement refers to equality (same value).</p>
"
187701,"<p>Follow the <a href=""http://docs.python.org/library/cmd.html#cmd.Cmd.cmdloop"">cmd documentation</a> and you'll be fine</p>

<pre><code>import cmd

addresses = [
    'here@blubb.com',
    'foo@bar.com',
    'whatever@wherever.org',
]

class MyCmd(cmd.Cmd):
    def do_send(self, line):
        pass

    def complete_send(self, text, line, start_index, end_index):
        if text:
            return [
                address for address in addresses
                if address.startswith(text)
            ]
        else:
            return addresses


if __name__ == '__main__':
    my_cmd = MyCmd()
    my_cmd.cmdloop()
</code></pre>

<p>Output for tab -> tab -> send -> tab -> tab -> f -> tab</p>

<pre><code>(Cmd)
help  send
(Cmd) send
foo@bar.com            here@blubb.com         whatever@wherever.org
(Cmd) send foo@bar.com
(Cmd)
</code></pre>
"
182247,"<p>Have you already looked at the documentation available on <a href=""http://timgolden.me.uk/python/win32_how_do_i/watch_directory_for_changes.html"">http://timgolden.me.uk/python/win32_how_do_i/watch_directory_for_changes.html</a>? If you only need it to work under Windows the 2nd example seems to be exactly what you want (if you exchange the path of the directory with the one of the file you want to watch). </p>

<p>Otherwise, polling will probably be the only really platform-independent option.</p>

<p><strong>Note:</strong> I haven't tried any of these solutions.</p>
"
142854,"<p>Sure. From a <a href=""http://mindlesstechnology.wordpress.com/2008/03/29/make-python-scripts-droppable-in-windows/"">mindless technology article called ""Make Python Scripts Droppable in Windows""</a>, you can add a drop handler by adding a registry key:</p>

<blockquote>
  <p>Hereâs a registry import file that you can use to do this. Copy the
  following into a .reg file and run it
  (Make sure that your .py extensions
  are mapped to Python.File).</p>

<pre><code>Windows Registry Editor Version 5.00

[HKEY_CLASSES_ROOT\Python.File\shellex\DropHandler]
@=""{60254CA5-953B-11CF-8C96-00AA00B8708C}""
</code></pre>
</blockquote>

<p>This makes Python scripts use the WSH drop handler, which is compatible with long filenames. To use the short filename handler, replace the GUID with <code>86C86720-42A0-1069-A2E8-08002B30309D</code>.</p>

<p>A comment in that post indicates that one can enable dropping on ""no console Python files (<code>.pyw</code>)"" or ""compiled Python files (<code>.pyc</code>)"" by using the <code>Python.NoConFile</code> and <code>Python.CompiledFile</code> classes.</p>
"
297478,"<p>The Meta class is used to dynamically construct the form definition - so by the time you've created the ModelForm instance, the fields not in the exclude have already been added as the new object's attributes.</p>

<p>The normal way to do it would be to just have multiple class definitions for each possible exclude list.  But if you want the form itself to be dynamic, you'll have to create a class definition on the fly.  Something like:</p>

<pre><code>def get_form(exclude_list):
    class MyForm(ModelForm):
        class Meta:
            model = Passenger
            exclude = exclude_list
    return MyForm

form_class = get_form(('field1', 'field2'))
form = form_class()
</code></pre>

<p><strong>UPDATE</strong>:  I just revisited this post and thought I'd post a little more idiomatic way to handle a dynamic class:</p>

<pre><code>def PassengerForm(exclude_list, *args, **kwargs):
    class MyPassengerForm(ModelForm):
        class Meta:
            model = Passenger
            exclude = exclude_list

        def __init__(self):
            super(MyPassengerForm, self).__init__(*args, **kwargs)

    return MyPassengerForm()

form = PassengerForm(('field1', 'field2'))
</code></pre>
"
121508,"<p>You could reimplement the default repr this way:</p>

<pre><code>def __repr__(self):
    return '&lt;%s.%s object at %s&gt;' % (
        self.__class__.__module__,
        self.__class__.__name__,
        hex(id(self))
    )
</code></pre>
"
256614,"<p>The .egg-info directories get only created if --single-version-externally-managed was used to install the egg. ""Normally"", installing an egg would create a single directory (or zip file), containing both the code and the metadata. </p>

<p>pkg_resources (which is the library that reads the metadata) has a function <code>require</code> which can be used to request a specific version of the package. For ""old-style"", regular imports, easy_install hacks a .pth file to get the egg directory onto sys.path. For --single-version-externally-managed, this hacking is not necessary, because there will only be a single version installed (by the system's pacakging infrastructure, e.g. rpm or dpkg). The egg-info is still included, for applications that use <code>require</code> (or any of the other pkg_resources binding mechanisms).</p>

<p>If you want to install a package by hard-linking, I recommend to use ""setup.py develop"". This is a command from setuptools which doesn't actually install the egg, but makes it available site-wide. To do so, it creates an egg-link file so that pkg_resources can find it, and it manipulates a .pth file, so that regular import can find it.</p>
"
129810,"<p>Putting the import statement inside of a function can prevent circular dependencies.</p>
"
61933,"<p>The danger in using a backslash to end a line is that if whitespace is added after the backslash (which, of course, is very hard to see), the backslash is no longer doing what you thought it was.</p>

<p>See Python Idioms and Anti-Idioms (for <a href=""https://docs.python.org/2/howto/doanddont.html#using-backslash-to-continue-statements"">Python 2</a> or <a href=""https://docs.python.org/3.1/howto/doanddont.html#using-backslash-to-continue-statements"">Python 3</a>) for more.</p>
"
127934,"<p>Try the <a href=""https://bitbucket.org/micktwomey/pyiso8601"">iso8601</a> module; it does exactly this.</p>

<p>There are several other options mentioned on the <a href=""http://wiki.python.org/moin/WorkingWithTime"">WorkingWithTime</a> page on the python.org wiki.</p>
"
306377,"<p>It depends on whether you're looking to see if 2 things are equal, or the same object. </p>

<p>""is"" checks to see if they are the same object, not just equal. The small ints are probably pointing to the same memory location for space efficiency </p>

<pre><code>In [29]: a = 3
In [30]: b = 3
In [31]: id(a)
Out[31]: 500729144
In [32]: id(b)
Out[32]: 500729144
</code></pre>

<p>You should use ""=="" to compare equality of arbitrary objects. You can specify the behavior with the <code>__eq__</code>, and <code>__ne__</code> attributes.</p>
"
134942,"<pre><code>x = [1, 10, 100]
for i in x:
    print '%02d' % i
</code></pre>

<p>results:</p>

<pre><code>01
10
100
</code></pre>

<p>Read <a href=""https://pyformat.info/"">more information about string formatting using %</a> in the documentation.</p>
"
61522,"<p>The <code>dir</code> builtin will give you all the object's attributes, including special methods like <code>__str__</code>, <code>__dict__</code> and a whole bunch of others which you probably don't want. But you can do something like:</p>

<pre><code>&gt;&gt;&gt; class Foo(object):
...     bar = 'hello'
...     baz = 'world'
...
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; [name for name in dir(f) if not name.startswith('__')]
[ 'bar', 'baz' ]
&gt;&gt;&gt; dict((name, getattr(f, name)) for name in dir(f) if not name.startswith('__')) 
{ 'bar': 'hello', 'baz': 'world' }
</code></pre>

<p>So can extend this to only return data attributes and not methods, by defining your <code>props</code> function like this:</p>

<pre><code>import inspect

def props(obj):
    pr = {}
    for name in dir(obj):
        value = getattr(obj, name)
        if not name.startswith('__') and not inspect.ismethod(value):
            pr[name] = value
    return pr
</code></pre>
"
168584,"<p>You can use </p>

<pre><code>os.write(tup[0], ""foo\n"")
</code></pre>

<p>to write to the handle.</p>

<p>If you want to open the handle for writing you need to add the <strong>""w""</strong> mode</p>

<pre><code>f = os.fdopen(tup[0], ""w"")
f.write(""foo"")
</code></pre>
"
338519,"<p>O.K., I think I can now answer my own question. Here is an example implementation for calculating the square of a number on the server. Please let me know if there are any improvements or misconceptions.</p>

<p>the python server file:</p>

<pre><code>import threading
import webbrowser
import BaseHTTPServer
import SimpleHTTPServer

FILE = 'frontend.html'
PORT = 8080


class TestHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):
    """"""The test example handler.""""""

    def do_POST(self):
        """"""Handle a post request by returning the square of the number.""""""
        length = int(self.headers.getheader('content-length'))        
        data_string = self.rfile.read(length)
        try:
            result = int(data_string) ** 2
        except:
            result = 'error'
        self.wfile.write(result)


def open_browser():
    """"""Start a browser after waiting for half a second.""""""
    def _open_browser():
        webbrowser.open('http://localhost:%s/%s' % (PORT, FILE))
    thread = threading.Timer(0.5, _open_browser)
    thread.start()

def start_server():
    """"""Start the server.""""""
    server_address = ("""", PORT)
    server = BaseHTTPServer.HTTPServer(server_address, TestHandler)
    server.serve_forever()

if __name__ == ""__main__"":
    open_browser()
    start_server()
</code></pre>

<p>...and the HTML file (I call it 'frontend.html', unfortunately the name has to appear in the JavaScript code as well):</p>

<pre><code>&lt;html&gt;
&lt;head&gt;
&lt;title&gt;AJAX test&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;script type=""text/javascript""&gt;

function xml_http_post(url, data, callback) {
    var req = false;
    try {
        // Firefox, Opera 8.0+, Safari
        req = new XMLHttpRequest();
    }
    catch (e) {
        // Internet Explorer
        try {
            req = new ActiveXObject(""Msxml2.XMLHTTP"");
        }
        catch (e) {
            try {
                req = new ActiveXObject(""Microsoft.XMLHTTP"");
            }
            catch (e) {
                alert(""Your browser does not support AJAX!"");
                return false;
            }
        }
    }
    req.open(""POST"", url, true);
    req.onreadystatechange = function() {
        if (req.readyState == 4) {
            callback(req);
        }
    }
    req.send(data);
}

function test_button() {
    var data = document.test_form.test_text.value;           
    xml_http_post(""frontend.html"", data, test_handle)
}

function test_handle(req) {
    var elem = document.getElementById('test_result')
    elem.innerHTML =  req.responseText
}

&lt;/script&gt;

&lt;form name=test_form&gt;
sqr(
&lt;input type=""text"" name=""test_text"" value=""0"" size=""4""&gt;
) =
&lt;span id=""test_result""&gt;0&lt;/span&gt;
&lt;input type=button onClick=""test_button();"" value=""start"" title=""start""&gt;
&lt;/form&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Of course it would be much more convenient to use <a href=""http://api.jquery.com/jQuery.ajax/"">jQuery</a> for the XML request, but in the interest of simplicity I'll leave it like that.</p>

<p>Finally an alternative implementation using WSGI (unfortunately I didn't see a way to fall back on the standard file-serving handler if the request is not a POST):</p>

<pre><code>import threading
import webbrowser
from wsgiref.simple_server import make_server

FILE = 'frontend.html'
PORT = 8080

def test_app(environ, start_response):
    if environ['REQUEST_METHOD'] == 'POST':
        try:
            request_body_size = int(environ['CONTENT_LENGTH'])
            request_body = environ['wsgi.input'].read(request_body_size)
        except (TypeError, ValueError):
            request_body = ""0""
        try:
            response_body = str(int(request_body) ** 2)
        except:
            response_body = ""error""
        status = '200 OK'
        headers = [('Content-type', 'text/plain')]
        start_response(status, headers)
        return [response_body]
    else:
        response_body = open(FILE).read()
        status = '200 OK'
        headers = [('Content-type', 'text/html'),
                   ('Content-Length', str(len(response_body)))]
        start_response(status, headers)
        return [response_body]

def open_browser():
    """"""Start a browser after waiting for half a second.""""""
    def _open_browser():
        webbrowser.open('http://localhost:%s/%s' % (PORT, FILE))
    thread = threading.Timer(0.5, _open_browser)
    thread.start()

def start_server():
    """"""Start the server.""""""
    httpd = make_server("""", PORT, test_app)
    httpd.serve_forever()

if __name__ == ""__main__"":
    open_browser()
    start_server()
</code></pre>
"
173323,"<p>You can call <a href=""https://docs.python.org/2/library/os.html#os._exit"">os._exit()</a> to directly exit, without throwing an exception:</p>

<pre><code>  import os
  os._exit(1)
</code></pre>

<p>This bypasses all of the python shutdown logic, such as the atexit module, and will not run through the exception handling logic that you're trying to avoid in this situation.  The argument is the exit code that will be returned by the process.</p>
"
12609,"<p>Yes. You can do it. The <a href=""https://docs.python.org/3/library/doctest.html"">doctest module documentation</a> and Wikipedia has an <a href=""http://en.wikipedia.org/wiki/Doctest#Example_2%3a_doctests_embedded_in_a_README.txt_file"">example</a> of it.</p>

<pre><code>   &gt;&gt;&gt; x
   Traceback (most recent call last):
     ...
   NameError: name 'x' is not defined
</code></pre>
"
337706,"<p>I think you have to connect passing <code>cursorclass = MySQLdb.cursors.SSCursor</code>:</p>

<pre><code> MySQLdb.connect(user=""user"", 
                 passwd=""password"",
                 db=""mydb"",
                 cursorclass = MySQLdb.cursors.SSCursor
                )
</code></pre>

<p>The default cursor fetches all the data at once, even if you don't use <code>fetchall</code>.</p>

<p>Edit: <code>SSCursor</code> or any other cursor class that supports server side resultsets - check the module docs on <code>MySQLdb.cursors</code>.</p>
"
79989,"<p>Have a look at the <code>shlex</code> module, particularly <code>shlex.split</code>.</p>

<blockquote>
  <p><code>&gt;&gt;&gt; import shlex</code></p>
  
  <p><code>&gt;&gt;&gt; shlex.split('This is ""a test""')</code></p>
  
  <p><code>['This', 'is', 'a test']</code></p>
</blockquote>
"
51240,"<p>I'll always use <a href=""http://lxml.de/"">lxml</a> for such tasks. You could use <a href=""http://www.crummy.com/software/BeautifulSoup/"">beautifulsoup</a> as well.</p>

<pre><code>import lxml.html
t = lxml.html.parse(url)
print t.find("".//title"").text
</code></pre>
"
180922,"<p>Assuming that you are using the standard socket module, you should be catching the <code>socket.error: (32, 'Broken pipe')</code> exception (not IOError as others have suggested). This will be raised in the case that you've described, i.e. sending/writing to a socket for which the remote side has disconnected.</p>

<pre><code>import socket, errno, time

# setup socket to listen for incoming connections
s = socket.socket()
s.bind(('localhost', 1234))
s.listen(1)
remote, address = s.accept()

print ""Got connection from: "", address

while 1:
    try:
        remote.send(""message to peer\n"")
        time.sleep(1)
    except socket.error, e:
        if isinstance(e.args, tuple):
            print ""errno is %d"" % e[0]
            if e[0] == errno.EPIPE:
               # remote peer disconnected
               print ""Detected remote disconnect""
            else:
               # determine and handle different error
               pass
        else:
            print ""socket error "", e
        remote.close()
        break
    except IOError, e:
        # Hmmm, Can IOError actually be raised by the socket module?
        print ""Got IOError: "", e
        break
</code></pre>

<p>Note that this exception will not always be raised on the first write to a closed socket - more usually the second write (unless the number of bytes written in the first write is larger than the socket's buffer size). You need to keep this in mind in case your application thinks that the remote end received the data from the first write when it may have already disconnected.</p>

<p>You can reduce the incidence (but not entirely eliminate) of this by using <code>select.select()</code> (or <code>poll</code>). Check for data ready to read from the peer before attempting a write. If <code>select</code> reports that there is data available to read from the peer socket, read it using <code>socket.recv()</code>. If this returns an empty string, the remote peer has closed the connection. Because there is still a race condition here, you'll still need to catch and handle the exception.</p>

<p>Twisted is great for this sort of thing, however, it sounds like you've already written a fair bit of code.</p>
"
35857,"<p>This is what I use:</p>

<pre><code>def shellquote(s):
    return ""'"" + s.replace(""'"", ""'\\''"") + ""'""
</code></pre>

<p>The shell will always accept a quoted filename and remove the surrounding quotes before passing it to the program in question. Notably, this avoids problems with filenames that contain spaces or any other kind of nasty shell metacharacter.</p>

<p><strong>Update</strong>: If you are using Python 3.3 or later, use <a href=""http://docs.python.org/dev/library/shlex.html#shlex.quote"">shlex.quote</a> instead of rolling your own.</p>
"
139258,"<pre><code>import types
import yourmodule

print [yourmodule.__dict__.get(a) for a in dir(yourmodule)
  if isinstance(yourmodule.__dict__.get(a), types.FunctionType)]
</code></pre>
"
135051,"<p>I think you're looking for <a href=""https://docs.python.org/3/library/sys.html#sys.path"">sys.path</a></p>

<pre><code>import sys
print (sys.path)
</code></pre>
"
215523,"<p>Make sure you really need to invert the matrix.  This is often unnecessary and can be numerically unstable.  When most people ask how to invert a matrix, they really want to know how to solve Ax = b where A is a matrix and x and b are vectors.  It's more efficient and more accurate to use code that solves the equation Ax = b for x directly than to calculate A inverse then multiply the inverse by B.  Even if you need to solve Ax = b for many b values, it's not a good idea to invert A.  If you have to solve the system for multiple b values, save the Cholesky factorization of A, but don't invert it.</p>

<p>See <a href=""http://www.johndcook.com/blog/2010/01/19/dont-invert-that-matrix/"">Don't invert that matrix</a>.</p>
"
60862,"<p>The standard python <code>dict</code> isn't able to do this.</p>

<p>There is a proposal (<a href=""http://www.python.org/dev/peps/pep-0372/"">PEP 372</a>) to add an ""ordered dictionary"" (that keeps track of the order of insertion) to the <code>collections</code> module in the standard library. It includes links to <a href=""http://babel.edgewall.org/browser/trunk/babel/util.py?rev=374#L178"">various</a>  <a href=""http://www.xs4all.nl/~anthon/Python/ordereddict/"">implementations</a> <a href=""http://code.djangoproject.com/browser/django/trunk/django/utils/datastructures.py?rev=7140#L53"">of</a> <a href=""http://pypi.python.org/pypi/StableDict/0.2"">ordered</a> <a href=""http://codespeak.net/svn/user/arigo/hack/pyfuse/OrderedDict.py"">dictionaries</a> (see also these <a href=""http://code.activestate.com/recipes/107747/"">two</a> <a href=""http://code.activestate.com/recipes/496761/"">recipes</a> in the Python Cookbook).</p>

<p>You might want to stick with the reference implementation in the PEP if you want your code to be compatible with the ""official"" version (if the proposal is eventually accepted).</p>

<p>EDIT: The PEP was accepted and added in python 2.7 and 3.1. See <a href=""http://docs.python.org/library/collections.html#ordereddict-objects"">the docs</a>.</p>
"
215697,"<p>One way to do things like this is to preprocess the source and modify it, translating your added statement to python.  There are various problems this approach will bring, and I wouldn't recommend it for general usage, but for experimentation with language, or specific-purpose metaprogramming, it can occassionally be useful.</p>

<p>For instance, lets say we want to introduce a ""myprint"" statement, that instead of printing to the screen instead logs to a specific file.  ie:</p>

<pre><code>myprint ""This gets logged to file""
</code></pre>

<p>would be equivalent to</p>

<pre><code>print &gt;&gt;open('/tmp/logfile.txt','a'), ""This gets logged to file""
</code></pre>

<p>There are various options as to how to do the replacing, from regex substitution to generating an AST, to writing your own parser depending on how close your syntax matches existing python.  A good intermediate approach is to use the tokenizer module.  This should allow you to add new keywords, control structures etc while interpreting the source similarly to the python interpreter, thus avoiding the breakage crude regex solutions would cause.  For the above ""myprint"", you could write the following transformation code:</p>

<pre><code>import tokenize

LOGFILE = '/tmp/log.txt'
def translate(readline):
    for type, name,_,_,_ in tokenize.generate_tokens(readline):
        if type ==tokenize.NAME and name =='myprint':
            yield tokenize.NAME, 'print'
            yield tokenize.OP, '&gt;&gt;'
            yield tokenize.NAME, ""open""
            yield tokenize.OP, ""(""
            yield tokenize.STRING, repr(LOGFILE)
            yield tokenize.OP, "",""
            yield tokenize.STRING, ""'a'""
            yield tokenize.OP, "")""
            yield tokenize.OP, "",""
        else:
            yield type,name
</code></pre>

<p>(This does make myprint effectively a keyword, so use as a variable elsewhere will likely cause problems)</p>

<p>The problem then is how to use it so that your code is usable from python.  One way would just be to write your own import function, and use it to load code written in your custom language.  ie:</p>

<pre><code>import new
def myimport(filename):
    mod = new.module(filename)
    f=open(filename)
    data = tokenize.untokenize(translate(f.readline))
    exec data in mod.__dict__
    return mod
</code></pre>

<p>This requires you handle your customised code differently from normal python modules however.  ie ""<code>some_mod = myimport(""some_mod.py"")</code>"" rather than ""<code>import some_mod</code>""</p>

<p>Another fairly neat (albeit hacky) solution is to create a custom encoding (See <a href=""http://www.python.org/dev/peps/pep-0263/"">PEP 263</a>) as <a href=""http://code.activestate.com/recipes/546539/"">this</a> recipe demonstrates.  You could implement this as:</p>

<pre><code>import codecs, cStringIO, encodings
from encodings import utf_8

class StreamReader(utf_8.StreamReader):
    def __init__(self, *args, **kwargs):
        codecs.StreamReader.__init__(self, *args, **kwargs)
        data = tokenize.untokenize(translate(self.stream.readline))
        self.stream = cStringIO.StringIO(data)

def search_function(s):
    if s!='mylang': return None
    utf8=encodings.search_function('utf8') # Assume utf8 encoding
    return codecs.CodecInfo(
        name='mylang',
        encode = utf8.encode,
        decode = utf8.decode,
        incrementalencoder=utf8.incrementalencoder,
        incrementaldecoder=utf8.incrementaldecoder,
        streamreader=StreamReader,
        streamwriter=utf8.streamwriter)

codecs.register(search_function)
</code></pre>

<p>Now after this code gets run (eg. you could place it in your .pythonrc or site.py) any code starting with the comment ""# coding: mylang"" will automatically be translated through the above preprocessing step.  eg.</p>

<pre><code># coding: mylang
myprint ""this gets logged to file""
for i in range(10):
    myprint ""so does this : "", i, ""times""
myprint (""works fine"" ""with arbitrary"" + "" syntax"" 
  ""and line continuations"")
</code></pre>

<p>Caveats:</p>

<p>There are problems to the preprocessor approach, as you'll probably be familiar with if you've worked with the C preprocessor.  The main one is debugging.  All python sees is the preprocessed file which means that text printed in the stack trace etc will refer to that.  If you've performed significant translation, this may be very different from your source text.  The example above doesn't change line numbers etc, so won't be too different, but the more you change it, the harder it will be to figure out.</p>
"
323733,"<p>Like NXC said, Python variable names actually point to an object, and not a specific spot in memory.</p>

<p><code>newList = oldList</code> would create two different variables that point to the same object, therefore, changing <code>oldList</code> would also change <code>newList</code>.</p>

<p>However, when you do <code>newList = oldList[:]</code>, it ""slices"" the list, and creates a new list. The default values for <code>[:]</code> are 0 and the end of the list, so it copies everything. Therefore, it creates a new list with all the data contained in the first one, but both can be altered without changing the other.</p>
"
173299,"<p>You actually want to do this:</p>

<pre><code>for i, tag in enumerate(tag):
    tagDict[tag] = i
</code></pre>

<p>The .update() method is used for updating a dictionary using another dictionary, not for changing a single key/value pair.</p>
"
255053,"<pre><code>import time, datetime

d = datetime.datetime.now()
print time.mktime(d.timetuple())
</code></pre>
"
301580,"<p>The other two answers are fine, but if you actually want the date for something else, you can use the <code>datetime</code> module:</p>

<pre><code>from datetime import datetime
d = datetime.strptime('2007-07-18 10:03:19', '%Y-%m-%d %H:%M:%S')
day_string = d.strftime('%Y-%m-%d')
</code></pre>

<p>It might be overkill for now, but it'll come in useful. You can see all of the format specifiers <a href=""http://docs.python.org/library/time.html#time.strftime"">here</a>.</p>
"
42997,"<p>EDIT: See @<a href=""#43663"">Blair Conrad's answer</a> for a cleaner solution</p>

<p><hr /></p>

<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.date (2000, 2, 1) - datetime.timedelta (days = 1)
datetime.date(2000, 1, 31)
&gt;&gt;&gt;
</code></pre>
"
242531,"<p>Use the following module:</p>

<pre><code>import sys

def info(type, value, tb):
    if hasattr(sys, 'ps1') or not sys.stderr.isatty():
    # we are in interactive mode or we don't have a tty-like
    # device, so we call the default hook
        sys.__excepthook__(type, value, tb)
    else:
        import traceback, pdb
        # we are NOT in interactive mode, print the exceptionâ¦
        traceback.print_exception(type, value, tb)
        print
        # â¦then start the debugger in post-mortem mode.
        # pdb.pm() # deprecated
        pdb.post_mortem(tb) # more âmodernâ

sys.excepthook = info
</code></pre>

<p>Name it <code>debug</code> (or whatever you like) and put it somewhere in your python path.</p>

<p>Now, at the start of your script, just add an <code>import debug</code>.</p>
"
285451,"<p>From <a href=""https://docs.python.org/2/library/sys.html#sys.exit"">the documentation for <code>sys.exit</code></a>:</p>

<blockquote>
  <p>The optional argument arg can be an
  integer giving the exit status
  (defaulting to zero), or another type
  of object. If it is an integer, zero
  is considered âsuccessful terminationâ
  and any nonzero value is considered
  âabnormal terminationâ by shells and
  the like. Most systems require it to
  be in the range 0-127, and produce
  undefined results otherwise. Some
  systems have a convention for
  assigning specific meanings to
  specific exit codes, but these are
  generally underdeveloped; Unix
  programs generally use 2 for command
  line syntax errors and 1 for all other
  kind of errors.</p>
</blockquote>

<p>One example where exit codes are used are in shell scripts. In bash you can check the special variable <code>$?</code> for the last exit status:</p>

<pre><code>me@mini:~$ python -c """"; echo $?
0
me@mini:~$ python -c ""import sys; sys.exit(0)""; echo $?
0
me@mini:~$ python -c ""import sys; sys.exit(43)""; echo $?
43
</code></pre>

<p>Personally I try to use the exit codes I find in <code>/usr/include/asm-generic/errno.h</code> (on a Linux system), but I don't know if this is the right thing to do.</p>
"
141554,"<p>for Admin in Django 1.0 and up, you'd need to use</p>

<pre><code>prepopulated_fields = {'slug': ('title',), }
</code></pre>

<p>in your admin.py</p>

<p>Your key in the prepopulated_fields dictionary is the field you want filled, and the value is a tuple of fields you want concatenated.</p>

<p>Outside of admin, you can use the <code>slugify</code> function in your views. In templates, you can use the <code>|slugify</code> filter.</p>

<p>There is also this package which will take care of this automatically: <a href=""https://pypi.python.org/pypi/django-autoslug"">https://pypi.python.org/pypi/django-autoslug</a></p>
"
339842,"<p>The <em>idiomatic</em> way to do this in Python is to use <strong>rstrip('\n')</strong>:</p>

<pre><code>for line in open('myfile.txt'):  # opened in text-mode; all EOLs are converted to '\n'
    line = line.rstrip('\n')
    process(line)
</code></pre>

<p>Each of the other alternatives has a gotcha:</p>

<ul>
<li><strong>file('...').read().splitlines()</strong> has to load the whole file in memory at once.</li>
<li><strong>line = line[:-1]</strong> will fail if the last line has no EOL.</li>
</ul>
"
311783,"<p>Python lists have no built-in pre-allocation. If you really need to make a list, and need to avoid the overhead of appending (and you should verify that you do), you can do this:</p>

<pre><code>l = [None] * 1000 # Make a list of 1000 None's
for i in xrange(1000):
    # baz
    l[i] = bar
    # qux
</code></pre>

<p>Perhaps you could avoid the list by using a generator instead:</p>

<pre><code>def my_things():
    while foo:
        #baz
        yield bar
        #qux

for thing in my_things():
    # do something with thing
</code></pre>

<p>This way, the list isn't every stored all in memory at all, merely generated as needed.</p>
"
44843,"<p>From <a href=""http://effbot.org/pyref/__all__.htm"">(An Unofficial) Python Reference Wiki</a>:</p>

<blockquote>
  <p>The public names defined by a module are determined by checking the module's namespace for a variable named <code>__all__</code>; if defined, it must be a sequence of strings which are names defined or imported by that module. The names given in <code>__all__</code> are all considered public and are required to exist. If <code>__all__</code> is not defined, the set of public names includes all names found in the module's namespace which do not begin with an underscore character (""_""). <code>__all__</code> should contain the entire public API. It is intended to avoid accidentally exporting items that are not part of the API (such as library modules which were imported and used within the module).</p>
</blockquote>
"
34060,"<p>Python threads are good for <strong>concurrent I/O programming</strong>. Threads are swapped out of the CPU as soon as they block waiting for input from file, network, etc. This allows other Python threads to use the CPU while others wait. This would allow you to write a multi-threaded web server or web crawler, for example.</p>

<p>However, Python threads are serialized by the <a href=""http://en.wikipedia.org/wiki/Global_Interpreter_Lock"">GIL</a> when they enter interpreter core. This means that if two threads are crunching numbers, only one can run at any given moment. It also means that you can't take advantage of multi-core or multi-processor architectures.</p>

<p>There are solutions like running multiple Python interpreters concurrently, using a C based threading library. This is not for the faint of heart and the benefits might not be worth the trouble. Let's hope for an all Python solution in a future release.</p>
"
334462,"<p>The first link in Google for <code>'matplotlib figure size'</code> is <a href=""http://www.scipy.org/Cookbook/Matplotlib/AdjustingImageSize"">AdjustingImageSize</a> (<a href=""https://webcache.googleusercontent.com/search?q=cache:5oqjjm8c8UMJ:https://scipy.github.io/old-wiki/pages/Cookbook/Matplotlib/AdjustingImageSize.html+&amp;cd=2&amp;hl=en&amp;ct=clnk&amp;gl=fr"">Google cache of the page</a>).</p>

<p>Here's a test script from the above page. It creates <code>test[1-3].png</code> files of different sizes of the same image:</p>

<pre><code>#!/usr/bin/env python
""""""
This is a small demo file that helps teach how to adjust figure sizes
for matplotlib

""""""

import matplotlib
print ""using MPL version:"", matplotlib.__version__
matplotlib.use(""WXAgg"") # do this before pylab so you don'tget the default back end.

import pylab
import matplotlib.numerix as N

# Generate and plot some simple data:
x = N.arange(0, 2*N.pi, 0.1)
y = N.sin(x)

pylab.plot(x,y)
F = pylab.gcf()

# Now check everything with the defaults:
DPI = F.get_dpi()
print ""DPI:"", DPI
DefaultSize = F.get_size_inches()
print ""Default size in Inches"", DefaultSize
print ""Which should result in a %i x %i Image""%(DPI*DefaultSize[0], DPI*DefaultSize[1])
# the default is 100dpi for savefig:
F.savefig(""test1.png"")
# this gives me a 797 x 566 pixel image, which is about 100 DPI

# Now make the image twice as big, while keeping the fonts and all the
# same size
F.set_size_inches( (DefaultSize[0]*2, DefaultSize[1]*2) )
Size = F.get_size_inches()
print ""Size in Inches"", Size
F.savefig(""test2.png"")
# this results in a 1595x1132 image

# Now make the image twice as big, making all the fonts and lines
# bigger too.

F.set_size_inches( DefaultSize )# resetthe size
Size = F.get_size_inches()
print ""Size in Inches"", Size
F.savefig(""test3.png"", dpi = (200)) # change the dpi
# this also results in a 1595x1132 image, but the fonts are larger.
</code></pre>

<p>Output:</p>

<pre><code>using MPL version: 0.98.1
DPI: 80
Default size in Inches [ 8.  6.]
Which should result in a 640 x 480 Image
Size in Inches [ 16.  12.]
Size in Inches [ 16.  12.]
</code></pre>

<p>Two notes:</p>

<ol>
<li><p>The module comments and the actual output differ.</p></li>
<li><p><a href=""http://stackoverflow.com/questions/335896/how-to-complete-this-python-function-to-save-in-the-same-folder#336001"">This answer</a> allows easily to combine all three images in one image file to see the difference in sizes.</p></li>
</ol>
"
29770,"<p>In the meantime, I've tried it two tools that have some sort of integration with vim.</p>

<p>The first is <a href=""http://rope.sourceforge.net/"">Rope</a>, a python refactoring library that comes with a Vim (and emacs) plug-in.  I tried it for a few renames, and that definitely worked as expected.  It allowed me to preview the refactoring as a diff, which is nice.  It is a bit text-driven, but that's alright for me, just takes longer to learn.</p>

<p>The second is <a href=""http://bicyclerepair.sourceforge.net/"">Bicycle Repair Man</a> which I guess wins points on name.  Also plugs into vim and emacs.  Haven't played much with it yet, but I remember trying it a long time ago.</p>

<p>Haven't played with both enough yet, or tried more types of refactoring, but I will do some more hacking with them.</p>
"
65924,"<p>In terms of speed, the best cross-platform IPC mechanism will be pipes.  That assumes, however, that you want cross-platform IPC on the same machine.  If you want to be able to talk to processes on remote machines, you'll want to look at using sockets instead.  Luckily, if you're talking about TCP at least, sockets and pipes behave pretty much the same behavior.  While the APIs for setting them up and connecting them are different, they both just act like streams of data.</p>

<p>The difficult part, however, is not the communication channel, but the messages you pass over it.  You really want to look at something that will perform verification and parsing for you.  I recommend looking at Google's <a href=""http://code.google.com/apis/protocolbuffers/docs/overview.html"">Protocol Buffers</a>. You basically create a spec file that describes the object you want to pass between processes, and there is a compiler that generates code in a number of different languages for reading and writing objects that match the spec.  It's much easier (and less bug prone) than trying to come up with a messaging protocol and parser yourself.</p>
"
65122,"<p>I use this on my macbook:</p>

<pre><code>"" configure expanding of tabs for various file types
au BufRead,BufNewFile *.py set expandtab
au BufRead,BufNewFile *.c set noexpandtab
au BufRead,BufNewFile *.h set noexpandtab
au BufRead,BufNewFile Makefile* set noexpandtab

"" --------------------------------------------------------------------------------
"" configure editor with tabs and nice stuff...
"" --------------------------------------------------------------------------------
set expandtab           "" enter spaces when tab is pressed
set textwidth=120       "" break lines when line length increases
set tabstop=4           "" use 4 spaces to represent tab
set softtabstop=4
set shiftwidth=4        "" number of spaces to use for auto indent
set autoindent          "" copy indent from current line when starting a new line

"" make backspaces more powerfull
set backspace=indent,eol,start

set ruler                           "" show line and column number
syntax on   			"" syntax highlighting
set showcmd 			"" show (partial) command in status line
</code></pre>

<p>(edited to only show stuff related to indent / tabs)</p>
"
37000,"<p>Python doesn't have a built-in equivalent to <code>enum</code>, and other answers have ideas for implementing your own (you may also be interested in the <a href=""http://code.activestate.com/recipes/67107/"">over the top version</a> in the Python cookbook).</p>

<p>However, in situations where an <code>enum</code> would be called for in C, I usually end up <strong><em>just using simple strings</em></strong>: because of the way objects/attributes are implemented, (C)Python is optimized to work very fast with short strings anyway, so there wouldn't really be any performance benefit to using integers. To guard against typos / invalid values you can insert checks in selected places.</p>

<pre><code>ANIMALS = ['cat', 'dog', 'python']

def take_for_a_walk(animal):
    assert animal in ANIMALS
    ...
</code></pre>

<p>(One disadvantage compared to using a class is that you lose the benefit of autocomplete)</p>
"
44788,"<p>Why the map/lambda magic? Doesn't this work?</p>

<pre><code>&gt;&gt;&gt;foo = [ 'a', 'b', 'c' ]
&gt;&gt;&gt;print "","".join(foo)
a,b,c
&gt;&gt;&gt;print "","".join([])

&gt;&gt;&gt;print "","".join(['a'])
a
</code></pre>

<p>Edit: @mark-biek points out the case for numbers.
Perhaps the list comprehension:</p>

<pre><code>&gt;&gt;&gt;','.join([str(x) for x in foo])
</code></pre>

<p>is more ""pythonic"".</p>

<p>Edit2:
Thanks for the suggestions. I'll use the generator rather than the list comprehension in the future.</p>

<pre><code>&gt;&gt;&gt;','.join(str(x) for x in foo)
</code></pre>
"
299635,"<p>I am assuming you mean using XSD files. Surprisingly there aren't many python XML libraries that support this. lxml does however. Check <a href=""http://lxml.de/validation.html"">Validation with lxml</a>. The page also lists how to use lxml to validate with other schema types.</p>
"
296060,"<p>Note: do <strong>not</strong> use eval in any case where you are getting the name to look up from user entered input. For example, if this comes from a web page, there is nothing preventing anyone from entering:</p>

<pre><code>__import__(""os"").system(""Some nasty command like rm -rf /*"")
</code></pre>

<p>as the argument. Better is to limit to well-defined lookup locations such as a dictionary or instance using <a href=""https://docs.python.org/2/library/functions.html#getattr"">getattr()</a>. For example, to find the ""post"" value on self, use:</p>

<pre><code>varname = ""post""
value = getattr(self, varname)  # Gets self.post
</code></pre>

<p>Similarly to set it, use setattr():</p>

<pre><code>value = setattr(self, varname, new_value)
</code></pre>

<p>To handle <a href=""https://en.wikipedia.org/wiki/Fully_qualified_name"">fully qualified names</a>, like ""post.id"", you could use something like the below functions in place of getattr() / <a href=""https://docs.python.org/2/library/functions.html#setattr"">setattr()</a>.</p>

<pre><code>def getattr_qualified(obj, name):
    for attr in name.split("".""):
        obj = getattr(obj, attr)
    return obj

def setattr_qualified(obj, name, value):
    parts = name.split(""."")
    for attr in parts[:-1]:
        obj = getattr(obj, attr)
    setattr(obj, parts[-1], value)
</code></pre>
"
176043,"<p>For almost all cases the normal list is the right choice. The arrays module is more like a thin wrapper over C arrays, which give you kind of strongly typed containers (see <a href=""http://docs.python.org/library/array.html#module-array"">docs</a>), with access to more C-like types such as signed/unsigned short or double, which are not part of the built-in types. I'd say use the arrays module only if you really need it, in all other cases stick with lists.</p>
"
347840,"<p>Quick answer: no, the AKS test is not the fastest way to test primality. There are much <em>much</em> faster primality tests that either assume the (generalized) Riemann hypothesis and/or are randomized. (E.g. <a href=""http://en.wikipedia.org/wiki/Miller-Rabin_primality_test"">Miller-Rabin</a> is fast and simple to implement.) The real breakthrough of the paper was theoretical, proving that a <em>deterministic</em> polynomial-time algorithm exists for testing primality, without assuming the GRH or other unproved conjectures.</p>

<p>That said, if you want to understand and implement it, <a href=""http://www.scottaaronson.com/writings/prime.pdf"">Scott Aaronson's short article</a> might help. It doesn't go into all the details, but you can start at page 10 of 12, and it gives enough. :-)
There is also a <a href=""http://fatphil.org/maths/AKS/#Implementations"">list of implementations</a> (mostly in C++) here.</p>

<p>Also, for optimization and improvements (by several orders of magnitude), you might want to look at <a href=""http://www.southerington.com/souther/projects/aks/RP-3_report.pdf"">this report</a>, or (older) <a href=""http://developer.apple.com/hardware/ve/pdf/aks3.pdf"">Crandall and Papadopoulos's report</a>, or (older still) <a href=""http://cr.yp.to/papers/aks.pdf"">Daniel J Bernstein's report</a>. All of them have fairly detailed pseudo-code that lends itself well to implementation.</p>
"
282778,"<p>The easiest method is to use sys.path.append().</p>

<p>However, you may be also interested in the <a href=""http://docs.python.org/library/imp.html?highlight=imp#module-imp"">imp</a> module.
It provides access to internal import functions.</p>

<pre><code># mod_name is the filename without the .py/.pyc extention
py_mod = imp.load_source(mod_name,filename_path) # Loads .py file
py_mod = imp.load_compiled(mod_name,filename_path) # Loads .pyc file
</code></pre>

<p>This can be used to load modules dynamically when you don't know a module's name.</p>

<p>I've used this in the past to create a plugin type interface to an application, where the user would write a script with application specific functions, and just drop thier script in a specific directory.</p>

<p>Also, these functions may be useful:</p>

<pre><code>imp.find_module(name[, path])
imp.load_module(name, file, pathname, description)
</code></pre>
"
189960,"<p><strong>A simple solution:</strong></p>

<p>Encode the image as a <strong>jpeg</strong> and look for a substantial change in <strong>filesize</strong>.</p>

<p>I've implemented something similar with video thumbnails, and had a lot of success and scalability.</p>
"
200045,"<p>Just for the record, ipython takes this one step further and you can access every result with _ and its numeric value</p>

<pre><code>In [1]: 10
Out[1]: 10

In [2]: 32
Out[2]: 32

In [3]: _
Out[3]: 32

In [4]: _1
Out[4]: 10

In [5]: _2
Out[5]: 32

In [6]: _1 + _2
Out[6]: 42

In [7]: _6
Out[7]: 42
</code></pre>

<p>And it is possible to edit ranges of lines with the %ed macro too:</p>

<pre><code>In [1]: def foo():
   ...:     print ""bar""
   ...:     
   ...:     

In [2]: foo()
bar

In [3]: %ed 1-2
</code></pre>
"
223586,"<p>Assuming that some_module has a class named ""class_name"":</p>

<pre><code>import some_module
klass = getattr(some_module, ""class_name"")
some_object = klass()
</code></pre>

<p>I should note that you should be careful here:  turning strings into code can be dangerous if the string came from the user, so you should keep security in mind in this situation.  :)</p>

<p>One other method (assuming that we still are using ""class_name""):</p>

<pre><code>class_lookup = { 'class_name' : class_name }
some_object = class_lookup['class_name']()  #call the object once we've pulled it out of the dict
</code></pre>

<p>The latter method is probably the most secure way of doing this, so it's probably what you should use if at all possible.</p>
"
31398,"<p>Yes, because of the Global Interpreter Lock (GIL) there can only run one thread at a time. Here are some links with some insights about this:</p>

<ul>
<li><a href=""http://www.artima.com/weblogs/viewpost.jsp?thread=214235"">http://www.artima.com/weblogs/viewpost.jsp?thread=214235</a></li>
<li><a href=""http://smoothspan.wordpress.com/2007/09/14/guido-is-right-to-leave-the-gil-in-python-not-for-multicore-but-for-utility-computing/"">http://smoothspan.wordpress.com/2007/09/14/guido-is-right-to-leave-the-gil-in-python-not-for-multicore-but-for-utility-computing/</a></li>
</ul>

<p>From the last link an interesting quote:</p>

<blockquote>
  <p>Let me explain what all that means. 
  Threads run inside the same virtual
  machine, and hence run on the same
  physical machine.  Processes can run
  on the same physical machine or in
  another physical machine.  If you
  architect your application around
  threads, youâve done nothing to access
  multiple machines.  So, you can scale
  to as many cores are on the single
  machine (which will be quite a few
  over time), but to really reach web
  scales, youâll need to solve the
  multiple machine problem anyway.</p>
</blockquote>

<p>If you want to use multi core, <a href=""http://www.python.org/dev/peps/pep-0371/"">pyprocessing</a> defines an process based API to do real parallelization. The <a href=""http://en.wikipedia.org/wiki/Python_Enhancement_Proposal#Development"">PEP</a> also includes some interesting benchmarks.</p>
"
175270,"<p>You can convert the file easily enough just using the <code>unicode</code> function, but you'll run into problems with Unicode characters without a straight ASCII equivalent.</p>

<p><a href=""http://www.peterbe.com/plog/unicode-to-ascii"">This blog</a> recommends the <code><a href=""http://www.python.org/doc/2.5.2/lib/module-unicodedata.html"">unicodedata </a></code> module, which seems to take care of roughly converting characters without direct corresponding ASCII values, e.g.</p>

<pre><code>&gt;&gt;&gt; title = u""KlÃ¼ft skrÃ¤ms infÃ¶r pÃ¥ fÃ©dÃ©ral Ã©lectoral groÃe""
</code></pre>

<p>is typically converted to </p>

<pre><code>Klft skrms infr p fdral lectoral groe
</code></pre>

<p>which is pretty wrong. However, using the <code>unicodedata</code> module, the result can be much closer to the original text:</p>

<pre><code>&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; unicodedata.normalize('NFKD', title).encode('ascii','ignore')
'Kluft skrams infor pa federal electoral groe'
</code></pre>
"
138585,"<p>As @Greg Hewgill says it, there are good reasons why this is not always possible. However, certain kinds of code (like very algorithmic code) can be turned into ""real"" machine code. </p>

<p>There are several options:</p>

<ul>
<li>Use <a href=""http://psyco.sourceforge.net/"">Psyco</a>, which emits machine code dynamically. You should choose carefully which methods/functions to convert, though.</li>
<li>Use <a href=""http://cython.org/"">Cython</a>, which is a Python-<em>like</em> language that is compiled into a Python C extension</li>
<li>Use <a href=""http://pypy.org"">PyPy</a>, which has a translator from RPython (a <em>restricted subset</em> of Python that does not support some of the most ""dynamic"" features of Python) to C or LLVM. 
<ul>
<li>PyPy is still highly experimental</li>
<li>not all extensions will be present</li>
</ul></li>
</ul>

<p>After that, you can use one of the existing packages (freeze, Py2exe, PyInstaller) to put everything into one binary.</p>

<p>All in all: there is no general answer for your question. If you have Python code that is performance-critical, try to use as much builtin functionality as possible (or ask a ""How do I make my Python code faster"" question). If that doesn't help, try to identify the code and port it to C (or Cython) and use the extension.</p>
"
191403,"<p>You can use the <a href=""https://docs.python.org/2/library/codecs.html"" rel=""nofollow"">codecs module</a>, like this:</p>

<pre><code>import codecs
BLOCKSIZE = 1048576 # or some other, desired size in bytes
with codecs.open(sourceFileName, ""r"", ""your-source-encoding"") as sourceFile:
    with codecs.open(targetFileName, ""w"", ""utf-8"") as targetFile:
        while True:
            contents = sourceFile.read(BLOCKSIZE)
            if not contents:
                break
            targetFile.write(contents)
</code></pre>

<p><strong>EDIT</strong>: added <code>BLOCKSIZE</code> parameter to control file chunk size.</p>
"
49953,"<ol>
<li><p>List comprehensions.  I often find myself filtering/mapping lists, and being able to say <code>[line.replace(""spam"",""eggs"") for line in open(""somefile.txt"") if line.startswith(""nee"")]</code> is really nice.</p></li>
<li><p>Functions are first class objects.  They can be passed as parameters to other functions, defined inside other function, and have lexical scope.  This makes it really easy to say things like <code>people.sort(key=lambda p: p.age)</code> and thus sort a bunch of people on their age without having to define a custom comparator class or something equally verbose.</p></li>
<li><p>Everything is an object.  Java has basic types which aren't objects, which is why many classes in the standard library define 9 different versions of functions (for boolean, byte, char, double, float, int, long, Object, short).  <code>Array.sort</code> is a good example.  Autoboxing helps, although it makes things awkward when something turns out to be null.</p></li>
<li><p>Properties.  Python lets you create classes with read-only fields, lazily-generated fields, as well as fields which are checked upon assignment to make sure they're never 0 or null or whatever you want to guard against, etc.'</p></li>
<li><p>Default and keyword arguments.  In Java if you want a constructor that can take up to 5 optional arguments, you must define 6 different versions of that constructor.  And there's no way at all to say <code>Student(name=""Eli"", age=25)</code></p></li>
<li><p>Functions can only return 1 thing.  In Python you have tuple assignment, so you can say <code>spam, eggs = nee()</code> but in Java you'd need to either resort to mutable out parameters or have a custom class with 2 fields and then have two additional lines of code to extract those fields.</p></li>
<li><p>Built-in syntax for lists and dictionaries.</p></li>
<li><p>Operator Overloading.</p></li>
<li><p>Generally better designed libraries.  For example, to parse an XML document in Java, you say<br />
<code>Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(""test.xml"");</code><br />
and in Python you say<br />
<code>doc = parse(""test.xml"")</code></p></li>
</ol>

<p>Anyway, I could go on and on with further examples, but Python is just overall a much more flexible and expressive language.  It's also dynamically typed, which I really like, but which comes with some disadvantages.</p>

<p>Java has much better performance than Python and has way better tool support.  Sometimes those things matter a lot and Java is the better language than Python for a task; I continue to use Java for some new projects despite liking Python a lot more.  But as a language I think Python is superior for most things I find myself needing to accomplish.</p>
"
135273,"<p>You can also make additions to this path with the PYTHONPATH environment variable at runtime, in addition to:</p>

<pre><code>import sys
sys.path.append('/home/user/python-libs')
</code></pre>
"
21964,"<p>There are drawbacks of using reference counting. One of the most mentioned is circular references: Suppose A references B, B references C and C references B. If A were to drop its reference to B, both B and C will still have a reference count of 1 and won't be deleted with traditional reference counting. CPython (reference counting is not part of python itself, but part of the C implementation thereof) catches circular references with a separate garbage collection routine that it runs periodically...</p>

<p>Another drawback: Reference counting can make execution slower. Each time an object is referenced and dereferenced, the interpreter/VM must check to see if the count has gone down to 0 (and then deallocate if it did). Garbage Collection does not need to do this.</p>

<p>Also, Garbage Collection can be done in a separate thread (though it can be a bit tricky). On machines with lots of RAM and for processes that use memory only slowly, you might not want to be doing GC at all! Reference counting would be a bit of a drawback there in terms of performance...</p>
"
254357,"<p>The low level way:</p>

<pre><code>from __future__ import with_statement
with open(filename1) as f1:
   with open(filename2) as f2:
      if f1.read() == f2.read():
         ...
</code></pre>

<p>The high level way:</p>

<pre><code>import filecmp
if filecmp.cmp(filename1, filename2, shallow=False):
   ...
</code></pre>
"
113555,"<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.split(r""(\s+)"", ""This is the string I want to split"")
['This', ' ', 'is', ' ', 'the', ' ', 'string', ' ', 'I', ' ', 'want', ' ', 'to', ' ', 'split']
</code></pre>

<p>Using the capturing parentheses in re.split() causes the function to return the separators as well.</p>
"
256236,"<p>I would inherit from <code>ValueError</code></p>

<pre><code>class IllegalArgumentError(ValueError):
    pass
</code></pre>

<p>It is sometimes better to create your own exceptions, but inherit from a built-in one, which is as close to what you want as possible.</p>

<p>If you need to catch that specific error, it is helpful to have a name.</p>
"
256069,"<p>As a <a href=""http://en.wikipedia.org/wiki/Python_%28programming_language%29"">Python</a> lover and Android programmer, I am sad to say this is not really a good way to go. There are two problems.</p>

<p>One problem is that there is a lot more than just a programming language to the Android development tools. A lot of the Android graphics involve XML files to configure the display, similar to HTML. The built-in java objects are really integrated with this XML layout, and it's a lot easier than writing your own code to go from logic to bitmap.</p>

<p>The other problem is that the G1 (and probably other Android devices for the near future) are really not that fast. 200 MHz processors, and RAM is very limited. Even in Java you have to do a decent amount of rewriting-to-avoid-more-object-creation if you want to make your app perfectly smooth. Python is going to be too slow for a while still on mobile devices.</p>
"
273208,"<p>Check out <a href=""https://docs.python.org/3/library/os.html#os.makedirs"">os.makedirs</a>:  (It makes sure the complete path exists.)  To handle the fact the directory might exist, catch OSError.</p>

<pre><code>import os
try:
    os.makedirs('./path/to/somewhere')
except OSError:
    pass
</code></pre>
"
112025,"<p>It all depends on what you plan to do with the array. If all you're doing is creating arrays of simple data types and doing I/O, the <a href=""http://docs.python.org/lib/module-array.html"">array</a> module will do just fine.</p>

<p>If, on the other hand, you want to do any kind of numerical calculations, the array module doesn't provide any help with that. <a href=""http://numpy.scipy.org/array_interface.shtml"">NumPy</a> (and <a href=""http://scipy.org"">SciPy</a>) give you a wide variety of operations between arrays and special functions that are useful not only for scientific work but for things like advanced image manipulation or in general anything where you need to perform efficient calculations with large amounts of data.</p>

<p>Numpy is also much more flexible, e.g. it supports arrays of any type of Python objects, and is also able to interact ""natively"" with your own objects if they conform to the <a href=""http://numpy.scipy.org/"">array interface</a>.</p>
"
196882,"<p>You can compare two images using functions from <a href=""http://www.pythonware.com/products/pil/"">PIL</a>. </p>

<pre><code>import Image
import ImageChops

im1 = Image.open(""splash.png"")
im2 = Image.open(""splash2.png"")

diff = ImageChops.difference(im2, im1)
</code></pre>

<p>The diff object is an image in which every pixel is the result of the subtraction of the color values of that pixel in the second image from the first image. Using the diff image you can do several things. The simplest one is the <code>diff.getbbox()</code> function. It will tell you the minimal rectangle that contains all the changes between your two images.</p>

<p>You can probably implement approximations of the other stuff mentioned here using functions from PIL as well.</p>
"
172784,"<p>Regarding ""Secondly: When writing a program from scratch in python, what are some good ways to greatly improve performance?""</p>

<p>Remember the Jackson rules of optimization: </p>

<ul>
<li>Rule 1: Don't do it.</li>
<li>Rule 2 (for experts only): Don't do it yet.</li>
</ul>

<p>And the Knuth rule:</p>

<ul>
<li>""Premature optimization is the root of all evil.""</li>
</ul>

<p>The more useful rules are in the <a href=""http://www.cs.cmu.edu/~jch/java/rules.html"">General Rules for Optimization</a>.</p>

<ol>
<li><p>Don't optimize as you go.  First get it right.  Then get it fast.  Optimizing a wrong program is still wrong.</p></li>
<li><p>Remember the 80/20 rule.</p></li>
<li><p>Always run ""before"" and ""after"" benchmarks.  Otherwise, you won't know if you've found the 80%.</p></li>
<li><p>Use the right algorithms and data structures.  This rule should be first.  Nothing matters as much as algorithm and data structure.</p></li>
</ol>

<p><strong>Bottom Line</strong></p>

<p>You can't prevent or avoid the ""optimize this program"" effort.  It's part of the job.  You have to plan for it and do it carefully, just like the design, code and test activities.</p>
"
348215,"<p>You demonstrate a fundamental misunderstanding.</p>

<p>You never created an instance of SimpleClass at all, because you didn't call it.</p>

<pre><code>for count in xrange(4):
    x = SimpleClass()
    x.attr = count
    simplelist.append(x)
</code></pre>

<p>Or, if you let the class take parameters, instead, you can use a list comprehension.</p>

<pre><code>simplelist = [SimpleClass(count) for count in xrange(4)]
</code></pre>
"
84154,"<p>Guido's explanation is <a href=""http://mail.python.org/pipermail/python-3000/2006-November/004643.html"">here</a>:</p>

<blockquote>
  <p>First of all, I chose len(x) over x.len() for HCI reasons (def __len__() came much later). There are two intertwined reasons actually, both HCI:</p>
  
  <p>(a) For some operations, prefix notation just reads better than postfix â prefix (and infix!) operations have a long tradition in mathematics which likes notations where the visuals help the mathematician thinking about a problem. Compare the easy with which we rewrite a formula like x*(a+b) into x*a + x*b to the clumsiness of doing the same thing using a raw OO notation.</p>
  
  <p>(b) When I read code that says len(x) I know that it is asking for the length of something. This tells me two things: the result is an integer, and the argument is some kind of container. To the contrary, when I read x.len(), I have to already know that x is some kind of container implementing an interface or inheriting from a class that has a standard len(). Witness the confusion we occasionally have when a class that is not implementing a mapping has a get() or keys() method, or something that isnât a file has a write() method.</p>
  
  <p>Saying the same thing in another way, I see âlenâ as a built-in operation. Iâd hate to lose that. /â¦/</p>
</blockquote>
"
200148,"<p>Python has the lovely 'platform' module to help you out.</p>

<pre><code>&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.win32_ver()
('XP', '5.1.2600', 'SP2', 'Multiprocessor Free')
&gt;&gt;&gt; platform.system()
'Windows'
&gt;&gt;&gt; platform.version()
'5.1.2600'
&gt;&gt;&gt; platform.release()
'XP'
</code></pre>

<p>NOTE: As mentioned in the comments proper values may not be returned when using older versions of python.</p>
"
118162,"<p>It depends how complicated you want to get... do you want to allow more than one type of quoting.  How about escaped quotes?</p>

<p>Your syntax looks very much like the common CSV file format, which is supported by the Python standard library:</p>

<pre><code>import csv
reader = csv.reader(['''foo, bar, ""one, two"", three four'''], skipinitialspace=True)
for r in reader:
  print r
</code></pre>

<p>Outputs:</p>

<pre><code>['foo', 'bar', 'one, two', 'three four']
</code></pre>

<p>HTH!</p>
"
325495,"<p>You can use <a href=""http://docs.python.org/library/subprocess.html""><code>subprocess.Popen</code></a>.  There's a few ways to do it:</p>

<pre><code>import subprocess
cmd = ['/run/myscript', '--arg', 'value']
p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
for line in p.stdout:
    print line
p.wait()
print p.returncode
</code></pre>

<p>Or, if you don't care what the external program actually does:</p>

<pre><code>cmd = ['/run/myscript', '--arg', 'value']
subprocess.Popen(cmd).wait()
</code></pre>
"
31859,"<p>Another system (not mentioned in the accepted answer yet) is PyInstaller, which worked for a PyQt project of mine when py2exe would not. I found it easier to use.</p>

<p><a href=""http://www.pyinstaller.org/"">http://www.pyinstaller.org/</a></p>

<p>Pyinstaller is based on Gordon McMillan's Python Installer. Which is no longer available.</p>
"
141710,"<p>The most important limitation, currently, is that you cannot assign to an outer-scope variable. In other words, closures are read-only:</p>

<pre><code>&gt;&gt;&gt; def outer(x): 
...     def inner_reads():
...         # Will return outer's 'x'.
...         return x
...     def inner_writes(y):
...         # Will assign to a local 'x', not the outer 'x'
...         x = y
...     def inner_error(y):
...         # Will produce an error: 'x' is local because of the assignment,
...         # but we use it before it is assigned to.
...         tmp = x
...         x = y
...         return tmp
...     return inner_reads, inner_writes, inner_error
... 
&gt;&gt;&gt; inner_reads, inner_writes, inner_error = outer(5)
&gt;&gt;&gt; inner_reads()
5
&gt;&gt;&gt; inner_writes(10)
&gt;&gt;&gt; inner_reads()
5
&gt;&gt;&gt; inner_error(10)
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
  File ""&lt;stdin&gt;"", line 11, in inner_error
UnboundLocalError: local variable 'x' referenced before assignment
</code></pre>

<p>A name that gets assigned to in a local scope (a function) is always local, unless declared otherwise. While there is the 'global' declaration to declare a variable global even when it is assigned to, there is no such declaration for enclosed variables -- yet. In Python 3.0, there is (will be) the 'nonlocal' declaration that does just that.</p>

<p>You can work around this limitation in the mean time by using a mutable container type:</p>

<pre><code>&gt;&gt;&gt; def outer(x):
...     x = [x]
...     def inner_reads():
...         # Will return outer's x's first (and only) element.
...         return x[0]
...     def inner_writes(y):
...         # Will look up outer's x, then mutate it.      
...         x[0] = y
...     def inner_error(y):
...         # Will now work, because 'x' is not assigned to, just referenced.
...         tmp = x[0]
...         x[0] = y
...         return tmp
...     return inner_reads, inner_writes, inner_error
... 
&gt;&gt;&gt; inner_reads, inner_writes, inner_error = outer(5)
&gt;&gt;&gt; inner_reads()
5
&gt;&gt;&gt; inner_writes(10)
&gt;&gt;&gt; inner_reads()
10
&gt;&gt;&gt; inner_error(15)
10
&gt;&gt;&gt; inner_reads()
15
</code></pre>
"
100903,"<p>These are actually both poor practices.  Once upon a time, it was considered OK to casually treat None and False as similar.   However, since Python 2.2 this is not the best policy.</p>

<p>First, when you do an <code>if x</code> or <code>if not x</code> kind of test, Python has to implicitly convert <code>x</code> to boolean.  The rules for the <code>bool</code> function describe a raft of things which are False; everything else is True.  If the value of x wasn't properly boolean to begin with, this implicit conversion isn't really the clearest way to say things.  </p>

<p>Before Python 2.2, there was no bool function, so it was even less clear.</p>

<p>Second, you shouldn't really test with <code>== None</code>.  You should use <code>is None</code> and <code>is not None</code>.</p>

<p>See PEP 8, <a href=""http://www.python.org/dev/peps/pep-0008/"">Style Guide for Python Code</a>.  </p>

<blockquote>
<pre><code>- Comparisons to singletons like None should always be done with
  'is' or 'is not', never the equality operators.

  Also, beware of writing ""if x"" when you really mean ""if x is not None""
  -- e.g. when testing whether a variable or argument that defaults to
  None was set to some other value.  The other value might have a type
  (such as a container) that could be false in a boolean context!
</code></pre>
</blockquote>

<p>How many singletons are there?  Five: <code>None</code>, <code>True</code>, <code>False</code>, <code>NotImplemented</code> and <code>Ellipsis</code>.  Since you're really unlikely to use <code>NotImplemented</code> or <code>Ellipsis</code>, and you would never say <code>if x is True</code> (because simply <code>if x</code> is a lot clearer), you'll only ever test <code>None</code>.</p>
"
35823,"<p><code>B.name</code> is a class attribute, not an instance attribute.  It shows up in <code>B.__dict__</code>, but not in <code>b = B(); b.__dict__</code>.</p>

<p>The distinction is obscured somewhat because when you access an attribute on an instance, the class dict is a fallback.  So in the above example, <code>b.name</code> will give you the value of <code>B.name</code>.</p>
"
92488,"<p>As far as I know, the most pythonic/efficient method would be:</p>

<pre><code>import string

filtered_string = filter(lambda x: x in string.printable, myStr)
</code></pre>
"
308045,"<p>I suggest that one should read <a href=""http://neopythonic.blogspot.com/"" rel=""nofollow"">Guido van Rossum's blog</a> on this topic - <a href=""http://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html"" rel=""nofollow"">Why explicit self has to stay</a>.</p>

<blockquote>
  <p>When a method definition is decorated, we don't know whether to automatically give it a 'self' parameter or not: the decorator could turn the function into a static method (which has no 'self'), or a class method (which has a funny kind of self that refers to a class instead of an instance), or it could do something completely different (it's trivial to write a decorator that implements '@classmethod' or '@staticmethod' in pure Python). There's no way without knowing what the decorator does whether to endow the method being defined with an implicit 'self' argument or not.</p>
  
  <p>I reject hacks like special-casing '@classmethod' and '@staticmethod'.</p>
</blockquote>
"
187660,"<p>Use Python's <code>readline</code> bindings.  For example,</p>

<pre><code>import readline

def completer(text, state):
    options = [i for i in commands if i.startswith(text)]
    if state &lt; len(options):
        return options[state]
    else:
        return None

readline.parse_and_bind(""tab: complete"")
readline.set_completer(completer)
</code></pre>

<p>The official <a href=""http://docs.python.org/lib/module-readline.html"">module docs</a> aren't much more detailed, see the <a href=""http://tiswww.case.edu/php/chet/readline/readline.html#SEC44"">readline docs</a> for more info.</p>
"
290440,"<p>You can use the filter method:</p>

<pre><code>
>>> lst = [1, 2, 3, 4, 5]
>>> filter(lambda x: x % 2 == 0, lst)
[2, 4]
</code></pre>

<p>or a list comprehension:</p>

<pre><code>
>>> lst = [1, 2, 3, 4, 5]
>>> [x for x in lst if x %2 == 0]
[2, 4]
</code></pre>

<p>EDIT: for find (single element), you could try:</p>

<pre><code>
>>> (x for x in lst if x % 2 == 0).next()
2
</code></pre>

<p>Though that would throw an exception if nothing matches, so you'd probably want to wrap it in a try/catch.  The () brackets make this a generator expression rather than a list comprehension.</p>

<p>Personally though I'd just use the regular filter/comprehension and take the first element (if there is one).</p>

<p>These raise an exception if nothing is found</p>

<pre><code>filter(lambda x: x % 2 == 0, lst)[0]
[x for x in lst if x %2 == 0][0]
</code></pre>

<p>These return empty lists</p>

<pre><code>filter(lambda x: x % 2 == 0, lst)[:1]
[x for x in lst if x %2 == 0][:1]
</code></pre>
"
79198,"<p><code>id</code> is a built-in function that gives the memory address of an object. If you name one of your functions <code>id</code>, you will have to say <code>__builtins__.id</code> to get the original. Renaming <code>id</code> globally is confusing in anything but a small script. </p>

<p>However, reusing built-in names as variables isn't all that bad as long as the use is local. Python has a <em>lot</em> of built-in functions that (1) have common names and (2) you will not use much anyway. Using these as local variables or as members of an object is OK because it's obvious from context what you're doing:</p>

<p>Example:</p>

<pre><code>def numbered(filename):
  file = open(filename)
  for i,input in enumerate(file):
    print ""%s:\t%s"" % (i,input)
  file.close()
</code></pre>

<p>Some built-ins with tempting names: </p>

<ul>
<li><code>id</code></li>
<li><code>file</code></li>
<li><code>list</code></li>
<li><code>map</code></li>
<li><code>all</code>, <code>any</code></li>
<li><code>complex</code></li>
<li><code>dir</code></li>
<li><code>input</code></li>
<li><code>slice</code></li>
<li><code>buffer</code></li>
</ul>
"
328068,"<p>It's a lot easier than that:</p>

<pre><code>List = open(""filename.txt"").readlines()
</code></pre>

<p>This returns a list of each line in the file.</p>
"
98214,"<p><a href=""http://jinja.pocoo.org/2/"">Jinja2</a> <a href=""http://jinja.pocoo.org/2/documentation/templates"">syntax</a> is pretty much the same as Django's with very few differences, and you get a much more powerfull template engine, which also compiles your template to bytecode (FAST!).</p>

<p>I use it for templating, including in Django itself, and it is very good. You can also easily write extensions if some feature you want is missing.</p>

<p>Here is some demonstration of the code generation:</p>

<pre><code>&gt;&gt;&gt; import jinja2
&gt;&gt;&gt; print jinja2.Environment().compile('{% for row in data %}{{ row.name | upper }}{% endfor %}', raw=True) 
from __future__ import division
from jinja2.runtime import LoopContext, Context, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join
name = None

def root(context, environment=environment):
    l_data = context.resolve('data')
    t_1 = environment.filters['upper']
    if 0: yield None
    for l_row in l_data:
        if 0: yield None
        yield unicode(t_1(environment.getattr(l_row, 'name')))

blocks = {}
debug_info = '1=9'
</code></pre>
"
37512,"<p>Use <a href=""http://codespeak.net/lxml/lxmlhtml.html"">lxml</a> which is the best xml/html library for python.</p>

<pre><code>import lxml.html
t = lxml.html.fromstring(""..."")
t.text_content()
</code></pre>

<p>And if you just want to sanitize the html look at the lxml.html.clean <a href=""http://codespeak.net/lxml/lxmlhtml.html#cleaning-up-html"">module</a></p>
"
102509,"<p>appcfg.py, the tool that uploads data to App Engine has to do exactly this to authenticate itself with the App Engine server. The relevant functionality is abstracted into appengine_rpc.py. In a nutshell, the solution is:</p>

<ol>
<li>Use the <a href=""http://code.google.com/apis/accounts/docs/AuthForInstalledApps.html"">Google ClientLogin API</a> to obtain an authentication token. appengine_rpc.py does this in <a href=""http://code.google.com/p/googleappengine/source/browse/trunk/python/google/appengine/tools/appengine%5Frpc.py#180"">_GetAuthToken</a></li>
<li>Send the auth token to a special URL on your App Engine app. That page then returns a cookie and a 302 redirect. Ignore the redirect and store the cookie. appcfg.py does this in <a href=""http://code.google.com/p/googleappengine/source/browse/trunk/python/google/appengine/tools/appengine%5Frpc.py#228"">_GetAuthCookie</a></li>
<li>Use the returned cookie in all future requests.</li>
</ol>

<p>You may also want to look at <a href=""http://code.google.com/p/googleappengine/source/browse/trunk/python/google/appengine/tools/appengine%5Frpc.py#253"">_Authenticate</a>, to see how appcfg handles the various return codes from ClientLogin, and <a href=""http://code.google.com/p/googleappengine/source/browse/trunk/python/google/appengine/tools/appengine%5Frpc.py#397"">_GetOpener</a>, to see how appcfg creates a urllib2 OpenerDirector that doesn't follow HTTP redirects. Or you could, in fact, just use the AbstractRpcServer and HttpRpcServer classes wholesale, since they do pretty much everything you need.</p>
"
311604,"<p>It depends on how long they are. I tend to structure them like so:</p>

<pre><code>[x.id for x
 in self.db.query(schema.allPostsUuid).execute(timeout=20)
 if x.type == 'post' 
    and x.deleted is not False
    and ...
    and ...]
</code></pre>

<p>That way every expression has its own line.</p>

<p>If any line becomes too big I like to extract it out in a lambda or expression:</p>

<pre><code>transform = lambda x: x.id
results = self.db.query(schema.allPostsUuid).execute(timeout=20)
condition = lambda x: x.deleted is not False and ... and ...
[transform(x) for x in results if condition(x)]
</code></pre>

<p>And then if a lambda becomes too long it gets promoted to a function.</p>
"
13875,"<p>It's simple: A function that references variables from a containing scope, potentially after flow-of-control has left that scope. That last bit is very useful:</p>

<pre><code>&gt;&gt;&gt; def makeConstantAdder(x):
...     constant = x
...     def adder(y):
...         return y + constant
...     return adder
... 
&gt;&gt;&gt; f = makeConstantAdder(12)
&gt;&gt;&gt; f(3)
15
&gt;&gt;&gt; g = makeConstantAdder(4)
&gt;&gt;&gt; g(3)
7
</code></pre>

<p>Note that 12 and 4 have ""disappeared"" inside f and g, respectively, this feature is what make f and g proper closures.</p>
"
173694,"<p>You can always use a lambda or another function to wrap up your method and pass another argument, not WX specific.</p>

<pre><code>b = wx.Button(self, 10, ""Default Button"", (20, 20))
        self.Bind(wx.EVT_BUTTON, lambda event: self.OnClick(event, 'somevalue'), b)
def OnClick(self, event, somearg):
        self.log.write(""Click! (%d)\n"" % event.GetId())
</code></pre>

<p>If you're out to reduce the amount of code to type, you might also try a little automatism like:</p>

<pre><code>class foo(whateverwxobject):
    def better_bind(self, type, instance, handler, *args, **kwargs):
        self.Bind(type, lambda event: handler(event, *args, **kwargs), instance)

    def __init__(self):
        self.better_bind(wx.EVT_BUTTON, b, self.OnClick, 'somevalue')
</code></pre>
"
181028,"<p><code>re.search</code> <strong>search</strong>es for the pattern <strong>throughout the string</strong>, whereas <code>re.match</code> does <em>not search</em> the pattern; if it does not, it has no other choice than to <strong>match</strong> it at start of the string.</p>
"
68320,"<p>It's to minimize the difference between methods and functions. It allows you to easily generate methods in metaclasses, or add methods at runtime to pre-existing classes.</p>

<p>e.g.</p>

<pre><code>&gt;&gt;&gt; class C(object):
...     def foo(self):
...         print ""Hi!""
...
&gt;&gt;&gt;
&gt;&gt;&gt; def bar(self):
...     print ""Bork bork bork!""
...
&gt;&gt;&gt;
&gt;&gt;&gt; c = C()
&gt;&gt;&gt; C.bar = bar
&gt;&gt;&gt; c.bar()
Bork bork bork!
&gt;&gt;&gt; c.foo()
Hi!
&gt;&gt;&gt;
</code></pre>

<p>It also (as far as I know) makes the implementation of the python runtime easier.</p>
"
163095,"<p>Did you mean <a href=""http://www.python.org/doc/2.5.2/lib/module-urllib2.html#l2h-3928"">urllib2.urlopen</a>?</p>

<p>You could potentially lift the <em>intended</em> filename <em>if</em> the server was sending a Content-Disposition header by checking <code>remotefile.info()['Content-Disposition']</code>, but as it is I think you'll just have to parse the url.</p>

<p>You could use <code>urlparse.urlsplit</code>, but if you have any URLs like at the second example, you'll end up having to pull the file name out yourself anyway:</p>

<pre><code>&gt;&gt;&gt; urlparse.urlsplit('http://example.com/somefile.zip')
('http', 'example.com', '/somefile.zip', '', '')
&gt;&gt;&gt; urlparse.urlsplit('http://example.com/somedir/somefile.zip')
('http', 'example.com', '/somedir/somefile.zip', '', '')
</code></pre>

<p>Might as well just do this:</p>

<pre><code>&gt;&gt;&gt; 'http://example.com/somefile.zip'.split('/')[-1]
'somefile.zip'
&gt;&gt;&gt; 'http://example.com/somedir/somefile.zip'.split('/')[-1]
'somefile.zip'
</code></pre>
"
60233,"<p>Least code would be:</p>

<pre><code>&gt;&gt;&gt; s = set([1, 2, 3])
&gt;&gt;&gt; list(s)[0]
1
</code></pre>

<p>Obviously this would create a new list which contains each member of the set, so not great if your set is very large.</p>
"
140495,"<p>I was missing </p>

<pre><code>l.set_option(ldap.OPT_REFERRALS, 0)
</code></pre>

<p>From the init.</p>
"
317172,"<p>You may find <a href=""http://noahgift.com/"">Noah Gift's</a> presentation  <a href=""http://www.slideshare.net/noahgift/pycon2008-cli-noahgift"">Creating Agile Commandline Tools With Python</a>. In it he combines subprocess, Queue and threading to develop solution that is capable of pinging hosts concurrently and speeding up the process. Below is a basic version before he adds command line parsing and some other features. The code to this version and others can be found <a href=""http://code.noahgift.com/pycon2008/pycon2008_cli_noahgift.zip"">here</a></p>

<pre><code>#!/usr/bin/env python2.5
from threading import Thread
import subprocess
from Queue import Queue

num_threads = 4
queue = Queue()
ips = [""10.0.1.1"", ""10.0.1.3"", ""10.0.1.11"", ""10.0.1.51""]
#wraps system ping command
def pinger(i, q):
    """"""Pings subnet""""""
    while True:
        ip = q.get()
        print ""Thread %s: Pinging %s"" % (i, ip)
        ret = subprocess.call(""ping -c 1 %s"" % ip,
            shell=True,
            stdout=open('/dev/null', 'w'),
            stderr=subprocess.STDOUT)
        if ret == 0:
            print ""%s: is alive"" % ip
        else:
            print ""%s: did not respond"" % ip
        q.task_done()
#Spawn thread pool
for i in range(num_threads):

    worker = Thread(target=pinger, args=(i, queue))
    worker.setDaemon(True)
    worker.start()
#Place work in queue
for ip in ips:
    queue.put(ip)
#Wait until worker threads are done to exit    
queue.join()
</code></pre>

<p>He is also author of: <a href=""http://rads.stackoverflow.com/amzn/click/0596515820"">Python for Unix and Linux System Administration</a></p>

<p><a href=""http://rads.stackoverflow.com/amzn/click/0596515820""><img src=""http://ecx.images-amazon.com/images/I/515qmR%2B4sjL._SL500_AA240_.jpg"" alt=""""></a></p>
"
326541,"<p>I looks to me as if you do not need any DOM capabilities from your program. I would second the use of the (c)ElementTree library. If you use the iterparse function of the cElementTree module, you can work your way through the xml and deal with the events as they occur. </p>

<p>Note however, Fredriks advice on using cElementTree <a href=""http://effbot.org/zone/element-iterparse.htm"" rel=""nofollow"">iterparse function</a>:</p>

<blockquote>
  <p>to parse large files, you can get rid of elements as soon as youâve processed them:</p>
</blockquote>

<pre><code>for event, elem in iterparse(source):
    if elem.tag == ""record"":
        ... process record elements ...
        elem.clear()
</code></pre>

<blockquote>
  <p>The above pattern has one drawback; it does not clear the root element, so you will end up with a single element with lots of empty child elements. If your files are huge, rather than just large, this might be a problem. To work around this, you need to get your hands on the root element. The easiest way to do this is to enable start events, and save a reference to the first element in a variable:</p>
</blockquote>

<pre><code># get an iterable
context = iterparse(source, events=(""start"", ""end""))

# turn it into an iterator
context = iter(context)

# get the root element
event, root = context.next()

for event, elem in context:
    if event == ""end"" and elem.tag == ""record"":
        ... process record elements ...
        root.clear()
</code></pre>

<p>The <a href=""http://codespeak.net/lxml/FAQ.html#why-can-t-i-just-delete-parents-or-clear-the-root-node-in-iterparse"" rel=""nofollow"">lxml.iterparse()</a> does not allow this.</p>
"
72180,"<p>The solution is as follows.</p>

<p>Use Python module <a href=""http://docs.python.org/lib/module-zipfile.html"">zipfile</a> to create zip archive, but as the file specify <a href=""http://docs.python.org/lib/module-StringIO.html"">StringIO</a> object (ZipFile constructor requires file-like object). Add files you want to compress. Then in your Django application return the content of StringIO object in <code>HttpResponse</code> with mimetype set to <code>application/x-zip-compressed</code> (or at least <code>application/octet-stream</code>). If you want, you can set <code>content-disposition</code> header, but this should not be really required.</p>

<p>But beware, creating zip archives on each request is bad idea and this may kill your server (not counting timeouts if the archives are large). Performance-wise approach is to cache generated output somewhere in filesystem and regenerate it only if source files have changed. Even better idea is to prepare archives in advance (eg. by cron job) and have your web server serving them as usual statics.</p>
"
178213,"<p>This sounds like the PHP array using named indices is very similar to a python dict:</p>

<pre><code>shows = [
  {""id"": 1, ""name"": ""Sesaeme Street""},
  {""id"": 2, ""name"": ""Dora The Explorer""},
]
</code></pre>

<p>See <a href=""http://docs.python.org/tutorial/datastructures.html#dictionaries"">http://docs.python.org/tutorial/datastructures.html#dictionaries</a> for more on this.</p>
"
33957,"<p>I've created and used my own generic view classes, defining <strong><code>__call__</code></strong> so an instance of the class is callable.  I really like it; while Django's generic views allow some customization through keyword arguments, OO generic views (if their behavior is split into a number of separate methods) can have much more fine-grained customization via subclassing, which lets me repeat myself a lot less.  (I get tired of rewriting the same create/update view logic anytime I need to tweak something Django's generic views don't quite allow).</p>

<p>I've posted some code at <a href=""http://www.djangosnippets.org/snippets/1009/"">djangosnippets.org</a>.</p>

<p>The only real downside I see is the proliferation of internal method calls, which may impact performance somewhat. I don't think this is much of a concern; it's rare that Python code execution would be your performance bottleneck in a web app.</p>

<p><strong>UPDATE</strong>: Django's own <a href=""http://docs.djangoproject.com/en/dev/topics/class-based-views/"">generic views</a> are now class-based.</p>

<p><strong>UPDATE</strong>: FWIW, I've changed my opinion on class-based views since this answer was written. After having used them extensively on a couple of projects, I feel they tend to lead to code that is satisfyingly DRY to write, but very hard to read and maintain later, because functionality is spread across so many different places, and subclasses are so dependent on every implementation detail of the superclasses and mixins. I now feel that <a href=""https://docs.djangoproject.com/en/dev/ref/template-response/"">TemplateResponse</a> and view decorators is a better answer for decomposing view code.</p>
"
61169,"<p>A common practice is to put the tests directory in the same parent directory as your module/package. So if your module was called foo.py your directory layout would look like:</p>

<pre><code>parent_dir/
  foo.py
  tests/
</code></pre>

<p>Of course there is no one way of doing it. You could also make a tests subdirectory and import the module using <a href=""http://www.python.org/dev/peps/pep-0328/"">absolute import</a>.</p>

<p>Wherever you put your tests, I would recommend you use <a href=""http://nose.readthedocs.org/en/latest/"">nose</a> to run them. <a href=""http://nose.readthedocs.org/en/latest/"">Nose</a> searches through your directories for tests. This way, you can put tests wherever they make the most sense organizationally.</p>
"
302847,"<p>I myself use Django for its object/db mapping without using its urlconfigs.  Simply create a file called <code>djangosettings.py</code> and insert the necessary configuration, for example:</p>

<pre><code>DATABASE_ENGINE   = 'oracle'
DATABASE_HOST     = 'localhost'
DATABASE_NAME     = 'ORCL'
DATABASE_USER     = 'scott' 
DATABASE_PASSWORD = 'tiger'
</code></pre>

<p>Then in your regular Python code, do</p>

<pre><code>import os
os.environ[""DJANGO_SETTINGS_MODULE""] = ""djangosettings""
</code></pre>

<p>before you import any Django modules.  This will let you use Django's object/db mappings without actually having a Django project, so you can use it for standalone scripts or other web applications or whatever you want.</p>

<p>As for caching, if you don't want to use Django then you should probably decide what you are using and go from there.  I recommend using CherryPy, which doesn't use Django-style regular expression URL mapping, but instead automatically maps URLs to functions based on the function names.  There's an example right at the top of the CherryPy home page: <a href=""http://cherrypy.org/"">http://cherrypy.org/</a></p>

<p>CherryPy has its own caching system, so you can accomplish exactly the same thing as what Django does but without needing to use Django's urlconfig system.</p>
"
187045,"<p>I sometimes just write a python module (i.e. file) called <code>config.py</code> or something with following contents:</p>

<pre><code>config = {
    'name': 'hello',
    'see?': 'world'
}
</code></pre>

<p>this can then be 'read' like so:</p>

<pre><code>from config import config
config['name']
config['see?']
</code></pre>

<p>easy.</p>
"
306277,"<p>Claudiu's answer is correct, but you can also cheat by getting the class name off of the <code>self</code> argument.  This will give misleading log statements in cases of inheritance, but will tell you the class of the object whose method is being called.  For example:</p>

<pre><code>from functools import wraps  # use this to preserve function signatures and docstrings
def logger(func):
    @wraps(func)
    def with_logging(*args, **kwargs):
        print ""Entering %s.%s"" % (args[0].__class__.__name__, func.__name__)
        return func(*args, **kwargs)
    return with_logging

class C(object):
    @logger
    def f(self):
        pass

C().f()
</code></pre>

<p>As I said, this won't work properly in cases where you've inherited a function from a parent class; in this case you might say</p>

<pre><code>class B(C):
    pass

b = B()
b.f()
</code></pre>

<p>and get the message <code>Entering B.f</code> where you actually want to get the message <code>Entering C.f</code> since that's the correct class.  On the other hand, this might be acceptable, in which case I'd recommend this approach over Claudiu's suggestion.</p>
"
68702,"<pre><code>from __future__ import braces
</code></pre>
"
266731,"<p>If you need more than looking at extension, one way would be to read the JPEG header, and check that it matches valid data.  The format for this is:</p>

<pre><code>Start Marker  | JFIF Marker | Header Length | Identifier
0xff, 0xd8    | 0xff, 0xe0  |    2-bytes    | ""JFIF\0""
</code></pre>

<p>so a quick recogniser would be:</p>

<pre><code>def is_jpg(filename):
    data = open(filename,'rb').read(11)
    if data[:4] != '\xff\xd8\xff\xe0': return False
    if data[6:] != 'JFIF\0': return False
    return True
</code></pre>

<p>However this won't catch any bad data in the body.  If you want a more robust check, you could try loading it with <a href=""http://www.pythonware.com/products/pil/"">PIL</a>.  eg:</p>

<pre><code>from PIL import Image
def is_jpg(filename):
    try:
        i=Image.open(filename)
        return i.format =='JPEG'
    except IOError:
        return False
</code></pre>
"
25815,"<p><code>C.__bases__</code> is an array of the super classes, so you could implement your hypothetical function like so:</p>

<pre><code>def magicGetSuperClasses(cls):
  return cls.__bases__
</code></pre>

<p>But I imagine it would be easier to just reference <code>cls.__bases__</code> directly in most cases.</p>
"
147736,"<p>Bitwise operations on Python ints work much like in C. The &amp;, | and ^ operators in Python work just like in C. The ~ operator works as for a signed integer in C; that is, ~x computes -x-1.</p>

<p>You have to be somewhat careful with left shifts, since Python integers aren't fixed-width. Use bit masks to obtain the low order bits. For example, to do the equivalent of shift of a 32-bit integer do (x &lt;&lt; 5) &amp; 0xffffffff.</p>
"
293454,"<p>You don't need to use del to delete instances in the first place.  Once the last reference to an object is gone, the object will be garbage collected.  Maybe you should tell us more about the full problem.</p>
"
120113,"<p>It is not a solution to the specific problem. But it might be intersting for you to use the mwclient library (<a href=""http://botwiki.sno.cc/wiki/Python:Mwclient"">http://botwiki.sno.cc/wiki/Python:Mwclient</a>) instead. That would be so much easier. Especially since you will directly get the article contents which removes the need for you to parse the html.</p>

<p>I have used it myself for two projects, and it works very well.</p>
"
316559,"<p>You would probably want to do this in the Factory for the connections. The Factory is not automatically notified of every time a connection is made and lost, so you can notify it from the Protocol.</p>

<p>Here is a complete example of how to use twisted.internet.task.LoopingCall in conjunction with a customised basic Factory and Protocol to announce that '10 seconds has passed' to every connection every 10 seconds.</p>

<pre><code>from twisted.internet import reactor, protocol, task

class MyProtocol(protocol.Protocol):
    def connectionMade(self):
        self.factory.clientConnectionMade(self)
    def connectionLost(self, reason):
        self.factory.clientConnectionLost(self)

class MyFactory(protocol.Factory):
    protocol = MyProtocol
    def __init__(self):
        self.clients = []
        self.lc = task.LoopingCall(self.announce)
        self.lc.start(10)

    def announce(self):
        for client in self.clients:
            client.transport.write(""10 seconds has passed\n"")

    def clientConnectionMade(self, client):
        self.clients.append(client)

    def clientConnectionLost(self, client):
        self.clients.remove(client)

myfactory = MyFactory()
reactor.listenTCP(9000, myfactory)
reactor.run()
</code></pre>
"
267475,"<p>It took me a while to figure this one out, but <a href=""http://www.egenix.com/www2002/python/unicode-proposal.txt"">this page</a> had the best answer:</p>

<pre><code>&gt;&gt;&gt; s = '\u003cfoo/\u003e'
&gt;&gt;&gt; s.decode( 'unicode-escape' )
u'&lt;foo/&gt;'
&gt;&gt;&gt; s.decode( 'unicode-escape' ).encode( 'ascii' )
'&lt;foo/&gt;'
</code></pre>

<p>There's also a 'raw-unicode-escape' codec to handle the other way to specify Unicode strings -- check the ""Unicode Constructors"" section of the linked page for more details (since I'm not that Unicode-saavy).</p>

<p>EDIT: See also <a href=""http://www.python.org/doc/2.5.2/lib/standard-encodings.html"">Python Standard Encodings</a>.</p>
"
117615,"<p>I recommend <code>babel</code> and <code>pytz</code> when working with timezones.  Keep your internal datetime objects naive and in UTC and convert to your timezone for formatting only.  The reason why you probably want naive objects (objects without timezone information) is that many libraries and database adapters have no idea about timezones.</p>

<ul>
<li><a href=""http://babel.pocoo.org/"">Babel</a></li>
<li><a href=""http://pytz.sourceforge.net/"">pytz</a></li>
</ul>
"
250406,"<p>Here's a slightly better version of the last line in Adam's solution:</p>

<pre><code>return content[:length].rsplit(' ', 1)[0]+suffix
</code></pre>

<p>(This is slightly more efficient, and returns a more sensible result in the case there are no spaces in the front of the string.)</p>
"
312727,"<p>I'm going to assume you're coming from a Java-ish background, so there are a few key differences to point out.</p>

<pre><code>class Computer(object):
    """"""Docstrings are used kind of like Javadoc to document classes and
    members.  They are the first thing inside a class or method.

    You probably want to extend object, to make it a ""new-style"" class.
    There are reasons for this that are a bit complex to explain.""""""

    # everything down here is a static variable, unlike in Java or C# where
    # declarations here are for what members a class has.  All instance
    # variables in Python are dynamic, unless you specifically tell Python
    # otherwise.
    defaultName = ""belinda""
    defaultRes = (1024, 768)
    defaultIP = ""192.168.5.307""

    def __init__(self, name=defaultName, resolution=defaultRes, ip=defaultIP):
        """"""Constructors in Python are called __init__.  Methods with names
        like __something__ often have special significance to the Python
        interpreter.

        The first argument to any class method is a reference to the current
        object, called ""self"" by convention.

        You can use default function arguments instead of function
        overloading.""""""
        self.name = name
        self.resolution = resolution
        self.ip = ip
        # and so on

    def printStats(self):
        """"""You could instead use a __str__(self, ...) function to return this
        string.  Then you could simply do ""print(str(computer))"" if you wanted
        to.""""""
        print ""Computer Statistics: --------------------------------""
        print ""Name:"" + self.name
        print ""IP:"" + self.ip
        print ""ScreenSize:"" , self.resolution //cannot concatenate 'str' and 'tuple' objects
        print ""-----------------------------------------------------""
</code></pre>
"
336189,"<p>I think when you start a literal number with a 0, it interprets it as an octal number and you can't have an '8' in an octal number.</p>
"
53523,"<p>I have seen the below as preferred, as it will catch the null list as well:</p>

<pre><code>if not a:
    print ""The list is empty or null""
</code></pre>
"
88663,"<p>You can use <code>split</code> from the <code>re</code> module.  </p>

<p><a href=""http://docs.python.org/library/re.html#re.split"" rel=""nofollow"">re.split(pattern, string, maxsplit=0, flags=0)</a></p>

<blockquote>
  <p>Split string by the occurrences of pattern. If capturing parentheses
  are used in pattern, then the text of all groups in the pattern are
  also returned as part of the resulting list.</p>
</blockquote>

<p>Example code:</p>

<pre><code>import re
data = re.split(r'(\D)', '2+24*48/32')
</code></pre>

<hr>

<p>\D</p>

<blockquote>
  <p>When the UNICODE flag is not specified, \D matches any non-digit
  character; this is equivalent to the set [^0-9].</p>
</blockquote>
"
187628,"<p>You have two decent options:</p>

<ol>
<li>Python standard config file format
using <a href=""http://docs.python.org/lib/module-ConfigParser.html"">ConfigParser</a></li>
<li><a href=""http://www.yaml.org/"">YAML</a> using a library like <a href=""http://pyyaml.org/"">PyYAML</a></li>
</ol>

<p>The standard Python configuration files look like INI files with <code>[sections]</code> and <code>key : value</code> or <code>key = value</code> pairs. The advantages to this format are:</p>

<ul>
<li>No third-party libraries necessary</li>
<li>Simple, familiar file format.</li>
</ul>

<p>YAML is different in that it is designed to be a human friendly data serialization format rather than specifically designed for configuration. It is very readable and gives you a couple different ways to represent the same data. For your problem, you could create a YAML file that looks like this:</p>

<pre><code>file .* does not exist : file not found
user .* not found : authorization error
</code></pre>

<p>Or like this:</p>

<pre><code>{ file .* does not exist: file not found,
  user .* not found: authorization error }
</code></pre>

<p>Using PyYAML couldn't be simpler:</p>

<pre><code>import yaml

errors = yaml.load(open('my.yaml'))
</code></pre>

<p>At this point <code>errors</code> is a Python dictionary with the expected format. YAML is capable of representing more than dictionaries: if you prefer a list of pairs, use this format:</p>

<pre><code>-
  - file .* does not exist 
  - file not found
-
  - user .* not found
  - authorization error
</code></pre>

<p>Or</p>

<pre><code>[ [file .* does not exist, file not found],
  [user .* not found, authorization error]]
</code></pre>

<p>Which will produce a list of lists when <code>yaml.load</code> is called.</p>

<p>One advantage of YAML is that you could use it to export your existing, hard-coded data out to a file to create the initial version, rather than cut/paste plus a bunch of find/replace to get the data into the right format.</p>

<p>The YAML format will take a little more time to get familiar with, but using PyYAML is even simpler than using ConfigParser with the advantage is that you have more options regarding how your data is represented using YAML.</p>

<p>Either one sounds like it will fit your current needs, ConfigParser will be easier to start with while YAML gives you more flexibilty in the future, if your needs expand.</p>

<p>Best of luck!</p>
"
191679,"<p>That is why the new <code>__dir__()</code> method has been added in python 2.6</p>

<p>see:</p>

<ul>
<li><a href=""http://docs.python.org/whatsnew/2.6.html#other-language-changes"">http://docs.python.org/whatsnew/2.6.html#other-language-changes</a> (scroll down a little bit)</li>
<li><a href=""http://bugs.python.org/issue1591665"">http://bugs.python.org/issue1591665</a></li>
</ul>
"
127872,"<pre>
import re,datetime
s=""2008-09-03T20:56:35.450686Z""
d=datetime.datetime(*map(int, re.split('[^\d]', s)[:-1]))
</pre>
"
316974,"<p>Depending on what you want to achive, you are probably easiest calling the system ping command..</p>

<p>Using the subprocess module is the best way of doing this, although you have to remember the ping command is different on different operating systems!</p>

<pre><code>import subprocess

host = ""www.google.com""

ping = subprocess.Popen(
    [""ping"", ""-c"", ""4"", host],
    stdout = subprocess.PIPE,
    stderr = subprocess.PIPE
)

out, error = ping.communicate()
print out
</code></pre>

<p>You don't need to worry about shell-escape characters. For example..</p>

<pre><code>host = ""google.com; `echo test`
</code></pre>

<p>..will <strong>not</strong> execute the echo command.</p>

<p>Now, to actually get the ping results, you could parse the <code>out</code> variable. Example output:</p>

<pre><code>round-trip min/avg/max/stddev = 248.139/249.474/250.530/0.896 ms
</code></pre>

<p>Example regex:</p>

<pre><code>import re
matcher = re.compile(""round-trip min/avg/max/stddev = (\d+.\d+)/(\d+.\d+)/(\d+.\d+)/(\d+.\d+)"")
print matcher.search(out).groups()

# ('248.139', '249.474', '250.530', '0.896')
</code></pre>

<p>Again, remember the output will vary depending on operating system (and even the version of <code>ping</code>). This isn't ideal, but it will work fine in many situations (where you know the machines the script will be running on)</p>
"
280286,"<p>I wrote this up the other day</p>

<pre><code>#! /usr/bin/env python

class node:
    def __init__(self):
        self.data = None # contains the data
        self.next = None # contains the reference to the next node


class linked_list:
    def __init__(self):
        self.cur_node = None

    def add_node(self, data):
        new_node = node() # create a new node
        new_node.data = data
        new_node.next = self.cur_node # link the new node to the 'previous' node.
        self.cur_node = new_node #  set the current node to the new one.

    def list_print(self):
        node = self.cur_node # cant point to ll!
        while node:
            print node.data
            node = node.next



ll = linked_list()
ll.add_node(1)
ll.add_node(2)
ll.add_node(3)

ll.list_print()
</code></pre>
"
237149,"<p>There is a <code>len</code> method:</p>

<pre><code>&gt;&gt;&gt; a = 'a string of some length'
&gt;&gt;&gt; a.__len__()
23
&gt;&gt;&gt; a.__len__
&lt;method-wrapper '__len__' of str object at 0x02005650&gt;
</code></pre>
"
191617,"<p>There is no ""one-to-one"" mapping between XML and JSON, so converting one to the other necessarily requires some understanding of what you want to <em>do</em> with the results.</p>

<p>That being said, Python's standard library has <a href=""http://docs.python.org/2/library/xml.html"">several modules for parsing XML</a> (including DOM, SAX, and ElementTree).  As of Python 2.6, support for converting Python data structures to and from JSON is included in the <a href=""http://docs.python.org/2/library/json.html""><code>json</code> module</a>.</p>

<p>So the infrastructure is there.</p>
"
325456,"<p>I've discovered that py2exe works just fine if I comment out the part of my program that uses wxPython. Also, when I use py2exe on the 'simple' sample that comes with its download (i.e. in Python26\Lib\site-packages\py2exe\samples\simple), I get this error message:</p>

<pre><code>*** finding dlls needed ***
error: MSVCP90.dll: No such file or directory
</code></pre>

<p>So something about wxPython makes py2exe think I need a Visual Studio 2008 DLL. I don't have VS2008, and yet my program works perfectly well as a directory of Python modules. I  found a copy of MSVCP90.DLL on the web, installed it in Python26/DLLs, and py2exe now works fine.  </p>

<p>I still don't understand where this dependency has come from, since I can run my code perfectly okay without py2exe. It's also annoying that py2exe didn't give me an error message like it did with the test_wx.py sample.</p>

<p>Further update: When I tried to run the output from py2exe on another PC, I discovered that it needed to have MSVCR90.DLL installed; so if your target PC hasn't got Visual C++ 2008 already installed, I recommend you download and install the <a href=""http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;id=29"">Microsoft Visual C++ 2008 Redistributable Package</a>.</p>
"
103410,"<p>thanks to Arachnid for the answer - it worked as suggested</p>

<p>here is a simplified copy of the code, in case it is helpful to the next person to try! </p>

<pre><code>import os
import urllib
import urllib2
import cookielib

users_email_address = ""billy.bob@gmail.com""
users_password      = ""billybobspassword""

target_authenticated_google_app_engine_uri = 'http://mylovelyapp.appspot.com/mylovelypage'
my_app_name = ""yay-1.0""



# we use a cookie to authenticate with Google App Engine
#  by registering a cookie handler here, this will automatically store the 
#  cookie returned when we use urllib2 to open http://currentcost.appspot.com/_ah/login
cookiejar = cookielib.LWPCookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookiejar))
urllib2.install_opener(opener)

#
# get an AuthToken from Google accounts
#
auth_uri = 'https://www.google.com/accounts/ClientLogin'
authreq_data = urllib.urlencode({ ""Email"":   users_email_address,
                                  ""Passwd"":  users_password,
                                  ""service"": ""ah"",
                                  ""source"":  my_app_name,
                                  ""accountType"": ""HOSTED_OR_GOOGLE"" })
auth_req = urllib2.Request(auth_uri, data=authreq_data)
auth_resp = urllib2.urlopen(auth_req)
auth_resp_body = auth_resp.read()
# auth response includes several fields - we're interested in 
#  the bit after Auth= 
auth_resp_dict = dict(x.split(""="")
                      for x in auth_resp_body.split(""\n"") if x)
authtoken = auth_resp_dict[""Auth""]

#
# get a cookie
# 
#  the call to request a cookie will also automatically redirect us to the page
#   that we want to go to
#  the cookie jar will automatically provide the cookie when we reach the 
#   redirected location

# this is where I actually want to go to
serv_uri = target_authenticated_google_app_engine_uri

serv_args = {}
serv_args['continue'] = serv_uri
serv_args['auth']     = authtoken

full_serv_uri = ""http://mylovelyapp.appspot.com/_ah/login?%s"" % (urllib.urlencode(serv_args))

serv_req = urllib2.Request(full_serv_uri)
serv_resp = urllib2.urlopen(serv_req)
serv_resp_body = serv_resp.read()

# serv_resp_body should contain the contents of the 
#  target_authenticated_google_app_engine_uri page - as we will have been 
#  redirected to that page automatically 
#
# to prove this, I'm just gonna print it out
print serv_resp_body
</code></pre>
"
227466,"<p>You are looking for:</p>

<pre><code>ord()
</code></pre>
"
102612,"<p>See the ""Motivation"" section in <a href=""http://www.python.org/dev/peps/pep-0255/"">PEP 255</a>.</p>

<p>A non-obvious use of generators is creating interruptible functions, which lets you do things like update UI or run several jobs ""simultaneously"" (interleaved, actually) while not using threads.</p>
"
101947,"<p>As others here have stated, you can just use full datetime objects throughout:</p>

<pre><code>sometime = get_some_time() # the time to which you want to add 3 seconds
later = (datetime.combine(date.today(), sometime) + timedelta(seconds=3)).time()
</code></pre>

<p>However, I think it's worth explaining why full datetime objects are required.  Consider what would happen if I added 2 hours to 11pm.  What's the correct behavior?  An exception, because you can't have a time larger than 11:59pm?  Should it wrap back around?</p>

<p>Different programmers will expect different things, so whichever result they picked would surprise a lot of people.  Worse yet, programmers would write code that worked just fine when they tested it initially, and then have it break later by doing something unexpected.  This is very bad, which is why you're not allowed to add timedelta objects to time objects.</p>
"
135074,"<p>You should favour <code>range()</code> over <code>xrange()</code> only when you need an actual list. For instance, when you want to modify the list returned by <code>range()</code>, or when you wish to slice it. For iteration or even just normal indexing, <code>xrange()</code> will work fine (and usually much more efficiently). There is a point where <code>range()</code> is a bit faster than <code>xrange()</code> for very small lists, but depending on your hardware and various other details, the break-even can be at a result of length 1 or 2; not something to worry about. Prefer <code>xrange()</code>.</p>
"
332815,"<p>Prior to python 2.2 there were essentially two different types of class: Those defined by C extensions and C coded builtins (types) and those defined by python class statements (classes).  This led to problems when you wanted to mix python-types and builtin types.  The most common reason for this is subclassing.  If you wanted to subclass the list type in python code, you were out of luck, and so various workarounds were used instead, such as subclassing the pure python implementation of lists (in the UserList module) instead.</p>

<p>This was a fairly ugly, so in 2.2 there was a <a href=""http://www.python.org/dev/peps/pep-0252/"">move</a> to unify python and builtin types, including the ability to <a href=""http://www.python.org/dev/peps/pep-0253/"">inherit</a> from them. The result is ""new style classes"".  These do have some incompatible differences to old-style classes however, so for backward compatability the bare class syntax creates an old-style class, while the new behaviour is obtained by inheriting from object.  The most visible behaviour differences are:</p>

<ul>
<li><p>The method resolution order (MRO).  There is a difference in behaviour in diamond-shaped inheritance hierarchies (where A inherits from both B and C, which both inherit from a common base class D.  Previously, methods were looked up left-to right, depth first (ie A B D C D)  However if C overloads a member of D, it won't be used by A (as it finds D's implementation first) This is bad for various styles of programming (eg. using mixin classes).  New style classes will treat this situation as A B C D, (look at the <code>__mro__</code> attribute of a class to see the order it will search)</p></li>
<li><p>The <code>__new__</code> constructor is added, which allows the class to act as a factory method, rather than return a new instance of the class.  Useful for returning particular subclasses, or reusing immutable objects rather than creating new ones without having to change the creation interface.</p></li>
<li><p><a href=""https://docs.python.org/2/reference/datamodel.html#implementing-descriptors"">Descriptors</a>.  These are the feature behind such things as properties, classmethods, staticmethods etc.  Essentially, they provide a way to control what happens when you access or set a particular attribute on a (new style) class.</p></li>
</ul>
"
92986,"<p>It will just sleep the thread except in the case where your application has only a single thread, in which case it will sleep the thread and effectively the process as well.</p>

<p>The python documentation on sleep doesn't specify this however, so I can certainly understand the confusion!</p>

<p><a href=""http://docs.python.org/2/library/time.html"">http://docs.python.org/2/library/time.html</a></p>
"
325295,"<p>You must make sure that django is in your PYTHONPATH.</p>

<p>To test, just do a <code>import django</code> from a python shell. There should be no output:</p>

<pre><code>ActivePython 2.5.1.1 (ActiveState Software Inc.) based on
Python 2.5.1 (r251:54863, May  1 2007, 17:47:05) [MSC v.1310 32 bit (Intel)] on win32
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; import django
&gt;&gt;&gt;
</code></pre>

<p>If you installed django via <code>setuptools</code> (<code>easy_install</code>, or with the <code>setup.py</code> included with django), then check in your <code>site-packages</code> if the <code>.pth</code> file (<code>easy-install.pth</code>, <code>django.pth</code>, ...) point to the correct folder.</p>

<p>HIH.</p>
"
75427,"<p>You probably have a file named random.py or random.pyc in your working directory.  That's shadowing the built-in random module.  You need to rename random.py to something like my_random.py and/or remove the random.pyc file.</p>

<p>To tell for sure what's going on, do this:</p>

<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; print random.__file__
</code></pre>

<p>That will show you exactly which file is being imported.</p>
"
110547,"<p><a href=""http://www.diveintopython.net/http_web_services/redirects.html"">Dive Into Python</a> has a good chapter on handling redirects with urllib2. Another solution is <a href=""http://docs.python.org/library/httplib.html"">httplib</a>.</p>

<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; conn = httplib.HTTPConnection(""www.bogosoft.com"")
&gt;&gt;&gt; conn.request(""GET"", """")
&gt;&gt;&gt; r1 = conn.getresponse()
&gt;&gt;&gt; print r1.status, r1.reason
301 Moved Permanently
&gt;&gt;&gt; print r1.getheader('Location')
http://www.bogosoft.com/new/location
</code></pre>
"
189840,"<p>The benefit of a generator expression is that it uses less memory since it doesn't build the whole list at once.  Generator expressions are best used when the list is an intermediary, such as summing the results, or creating a dict out of the results.</p>

<p>For example:</p>

<pre><code>sum(x*2 for x in xrange(256))

dict( ((k, some_func(k) for k in some_list_of_keys) )
</code></pre>

<p>The advantage there is that the list isn't completely generated, and thus little memory is used (and should also be faster)</p>

<p>You should, though, use list comprehensions when the desired final product is a list.  You are not going to save any memeory using generator expressions, since you want the generated list.  You also get the benefit of being able to use any of the list functions like sorted or reversed.</p>

<p>For example:</p>

<pre><code>reversed( [x*2 for x in xrange(256)] )
</code></pre>
"
237092,"<p>There are two methods to get the mod time, os.path.getmtime() or os.stat(), but the ctime is not reliable cross-platform (see below).</p>

<h3><a href=""http://www.python.org/doc/2.5.2/lib/module-os.path.html"">os.path.getmtime()</a></h3>

<p><strong>getmtime</strong>(<em>path</em>)<br />
*Return the time of last modification of path. The return value is a number giving the 
number of seconds since the epoch (see the time module). Raise os.error if the file does 
not exist or is inaccessible. New in version 1.5.2. Changed in version 2.3: If 
os.stat_float_times() returns True, the result is a floating point number.*</p>

<h3><a href=""http://www.python.org/doc/2.5.2/lib/os-file-dir.html"">os.stat()</a></h3>

<p><strong>stat</strong>(<em>path</em>)<br />
*Perform a stat() system call on the given path. The return value is an object whose 
attributes correspond to the members of the stat structure, namely: st_mode (protection 
bits), st_ino (inode number), st_dev (device), st_nlink (number of hard links), st_uid 
(user ID of owner), st_gid (group ID of owner), st_size (size of file, in bytes), 
st_atime (time of most recent access), <strong>st_mtime</strong> (time of most recent content 
modification), <strong>st_ctime</strong> (platform dependent; time of most recent metadata change on Unix, or the time of creation on Windows)*:</p>

<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; statinfo = os.stat('somefile.txt')
&gt;&gt;&gt; statinfo
(33188, 422511L, 769L, 1, 1032, 100, 926L, 1105022698,1105022732, 1105022732)
&gt;&gt;&gt; statinfo.st_size
926L
&gt;&gt;&gt;
</code></pre>

<p>In the above example you would use statinfo.st_mtime or statinfo.st_ctime to get the mtime and ctime, respectively.</p>
"
296062,"<p>Python modules could be considered as singletons... no matter how many times you import them they get initialized only once, so it's better to do:</p>

<pre><code>import MyLib
import ReallyBigLib
</code></pre>

<p>Relevant documentation on the import statement:</p>

<p><a href=""https://docs.python.org/2/reference/simple_stmts.html#the-import-statement"">https://docs.python.org/2/reference/simple_stmts.html#the-import-statement</a></p>

<blockquote>
  <p>Once the name of the module is known (unless otherwise specified, the term âmoduleâ will refer to both packages and modules), searching for the module or package can begin. The first place checked is sys.modules, the cache of all modules that have been imported previously. If the module is found there then it is used in step (2) of import.</p>
</blockquote>

<p>The imported modules are cached in <a href=""https://docs.python.org/2/library/sys.html#sys.modules"">sys.modules</a>:</p>

<blockquote>
  <p>This is a dictionary that maps module names to modules which have already been loaded. This can be manipulated to force reloading of modules and other tricks. Note that removing a module from this dictionary is not the same as calling reload() on the corresponding module object.</p>
</blockquote>
"
153667,"<p>I don't think there is a method in Python library, but you can easily create one yourself using <a href=""http://docs.python.org/lib/module-datetime.html"">datetime</a> module:</p>

<pre><code>from datetime import date, datetime, timedelta

def datespan(startDate, endDate, delta=timedelta(days=1)):
    currentDate = startDate
    while currentDate &lt; endDate:
        yield currentDate
        currentDate += delta
</code></pre>

<p>Then you could use it like this:</p>

<pre><code>&gt;&gt;&gt; for day in datespan(date(2007, 3, 30), date(2007, 4, 3), 
&gt;&gt;&gt;                     delta=timedelta(days=1)):
&gt;&gt;&gt;     print day
2007-03-30
2007-03-31
2007-04-01
2007-04-02
</code></pre>

<p>Or, if you wish to make your delta smaller:</p>

<pre><code>&gt;&gt;&gt; for timestamp in datespan(datetime(2007, 3, 30, 15, 30), 
&gt;&gt;&gt;                           datetime(2007, 3, 30, 18, 35), 
&gt;&gt;&gt;                           delta=timedelta(hours=1)):
&gt;&gt;&gt;     print timestamp
2007-03-30 15:30:00
2007-03-30 16:30:00
2007-03-30 17:30:00
2007-03-30 18:30:00
</code></pre>
"
63094,"<p>No.  Indentation-as-grammar is an integral part of the Python language, for better and worse.</p>
"
245816,"<p>In general, don't use a generator when you need list operations, like len(), reversed(), and so on.</p>

<p>There may also be times when you don't want lazy evaluation (e.g. to do all the calculation up front so you can release a resource). In that case, a list expression might be better.</p>
"
158248,"<p>Douglas F Shearer's is the generally approved solution in Unix when you need to specify a password for a remote login.<br />
You add a <strong>--password-from-file</strong> option to specify the path and read plaintext from a file.<br />
The file can then be in the user's own area protected by the operating system.
It also allows different users to automatically pick up their own own file.</p>

<p>For passwords that the user of the script isn't allowed to know - you can run the script with elavated permission and have the password file owned by that root/admin user.</p>
"
281911,"<p>From <a href=""http://support.microsoft.com/kb/314853"">Explorer.exe Command-Line Options for Windows XP</a></p>

<pre><code>import subprocess
subprocess.Popen(r'explorer /select,""C:\path\of\folder\file""')
</code></pre>
"
280463,"<p>You can use <a href=""http://docs.python.org/library/re.html#re.escape"">re.escape()</a>: </p>

<blockquote>
  <p>re.escape(string)
      Return string with all non-alphanumerics backslashed; this is useful if you want to match an arbitrary literal string that may have regular expression metacharacters in it.</p>
</blockquote>

<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.escape('^a.*$')
'\\^a\\.\\*\\$'
</code></pre>
"
323522,"<pre><code>Python 2.5.1 (r251:54863, Jul 31 2008, 22:53:39)
[GCC 4.1.2 (Ubuntu 4.1.2-0ubuntu4)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; f = open('generic.png','r')
&gt;&gt;&gt; f.name
'generic.png'
</code></pre>
"
170856,"<p>I was asking myself this same question and after struggling to follow advice here and elsewhere to get IronPython and BeautifulSoup to play nicely with my existing code I decided to go looking for an alternative native .NET solution.  BeautifulSoup is a wonderful bit of code and at first it didn't look like there was anything comparable available for .NET, but then I found the <a href=""http://www.codeplex.com/htmlagilitypack"">HTML Agility Pack</a> and if anything I think I've actually gained some maintainability over BeautifulSoup.  It takes clean or crufty HTML and produces a elegant XML DOM from it that can be queried via XPath.  With a couple lines of code you can even get back a raw XDocument and then <a href=""http://vijay.screamingpens.com/archive/2008/05/26/linq-amp-lambda-part-3-html-agility-pack-to-linq.aspx"">craft your queries in LINQ to XML</a>.  Honestly, if web scraping is your goal, this is about the cleanest solution you are likely to find.</p>

<p><b>Edit</b></p>

<p>Here is a simple (read: not robust at all) example that parses out the US House of Representatives holiday schedule:</p>

<pre><code>using System;
using System.Collections.Generic;
using HtmlAgilityPack;

namespace GovParsingTest
{
    class Program
    {
        static void Main(string[] args)
        {
            HtmlWeb hw = new HtmlWeb();
            string url = @""http://www.house.gov/house/House_Calendar.shtml"";
            HtmlDocument doc = hw.Load(url);

            HtmlNode docNode = doc.DocumentNode;
            HtmlNode div = docNode.SelectSingleNode(""//div[@id='primary']"");
            HtmlNodeCollection tableRows = div.SelectNodes("".//tr"");

            foreach (HtmlNode row in tableRows)
            {
                HtmlNodeCollection cells = row.SelectNodes("".//td"");
                HtmlNode dateNode = cells[0];
                HtmlNode eventNode = cells[1];

                while (eventNode.HasChildNodes)
                {
                    eventNode = eventNode.FirstChild;
                }

                Console.WriteLine(dateNode.InnerText);
                Console.WriteLine(eventNode.InnerText);
                Console.WriteLine();
            }

            //Console.WriteLine(div.InnerHtml);
            Console.ReadKey();
        }
    }
}
</code></pre>
"
75467,"<pre><code>In [1]: class test(object):
   ...:     pass
   ...: 

In [2]: test.__name__
Out[2]: 'test'
</code></pre>
"
189935,"<p>You need to register a catch-all script handler. Append this at the end of your app.yaml:</p>

<pre><code>- url: /.*
  script: main.py
</code></pre>

<p>In main.py you will need to put this code:</p>

<pre><code>from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app

class NotFoundPageHandler(webapp.RequestHandler):
    def get(self):
        self.error(404)
        self.response.out.write('&lt;Your 404 error html page&gt;')

application = webapp.WSGIApplication([('/.*', NotFoundPageHandler)],
                                     debug=True)

def main():
    run_wsgi_app(application)

if __name__ == ""__main__"":
    main()
</code></pre>

<p>Replace <code>&lt;Your 404 error html page&gt;</code> with something meaningful. Or better use a template, you can read how to do that <a href=""http://code.google.com/appengine/docs/gettingstarted/templates.html"">here</a>.</p>

<p>Please let me know if you have problems setting this up.</p>
"
85511,"<p>The short answer is: most of the time time.clock() will be better.
However, if you're timing some hardware (for example some algorithm you put in the GPU), then time.clock() will get rid of this time and time.time() is the only solution left.</p>

<p>Note: whatever the method used, the timing will depend on factors you cannot control (when will the process switch, how often, ...), this is worse with time.time() but exists also with time.clock(), so you should never run one timing test only, but always run a series of test and look at mean/variance of the times.</p>
"
252900,"<p>Lua is a cool language, light-weight and extremely fast!</p>

<p>But the point is: <strong>Is performance so important for those
tasks you mentioned?</strong></p>

<ul>
<li>Renaming a bunch of files</li>
<li>Download some files from the web</li>
<li>Webscraping</li>
</ul>

<p>You write those programs once, and run them once, too maybe.
Why do you care about performance so much for a run-once program?</p>

<p>For example:</p>

<ol>
<li>Cost 3 hours to write a C/C++ program, to handle data once, the program will take 1 hour to run.</li>
<li>Cost 30 Minute to write a Python program to handle data once, the program will take 10 hours to run.</li>
</ol>

<p>If you choose the first, you save the time to run the program,
but you cost your time to develop the program.</p>

<p>On the other hand, if you choose the second, you waste time to run
the program, but you can do other things when the program is
running. <strong>How about play World of Warcraft, kill monsters
with your warlock? Eat my D.O.T</strong>! :P</p>

<p>That's it! Although Lua is not so difficult to write, everything about Lua is designed to be efficient.And what's more, there are little modules for Lua, but there are so many modules for Python. You don't want to port a C library for Lua just for a run-once program, do you? Instead, choose Python and use those module to achieve your task easily might be a better idea.</p>

<p>FYI: Actually, I have tried to use Lua to do webscraping,
but finally, I realized I do not have to care so much about language performance. <strong>The bottleneck of webscraping is
not on the performance of the language</strong>. The bottleneck is on
network I/O, HTML parsing and multitasking. All I have to do
is make sure the program works and find the bottleneck.
Finally, I chose Python rather than Lua. There is so
many excellent Python modules; I have no reason to build my
own.</p>

<p>According to my experience about webscraping, I chose
Twisted for network I/O and lxml for html parsing as the backend
of my webscraping program. I have wrote an article for an introduction to this technology.</p>

<p><a href=""http://blog.ez2learn.com/2009/09/26/the-best-choice-to-grab-data-from-websites-python-twisted-lxml/"">The best choice to grab data from websites: Python + Twisted + lxml</a></p>

<p>Hope this is helpful.</p>
"
192703,"<p>What exactly do you mean by Monkey Patch here?  There are <a href=""http://wikipedia.org/wiki/Monkey_patch"">several slightly different definitions</a>.</p>

<p>If you mean, ""can you change a class's methods at runtime?"", then the answer is emphatically yes:</p>

<pre><code>class Foo:
  pass # dummy class

Foo.bar = lambda self: 42

x = Foo()
print x.bar()
</code></pre>

<p>If you mean, ""can you change a class's methods at runtime and <strong>make all of the instances of that class change after-the-fact</strong>?"" then the answer is yes as well.  Just change the order slightly:</p>

<pre><code>class Foo:
  pass # dummy class

x = Foo()

Foo.bar = lambda self: 42

print x.bar()
</code></pre>

<p>But you can't do this for certain built-in classes, like <code>int</code> or <code>float</code>.  These classes' methods are implemented in C and there are certain abstractions sacrificed in order to make the implementation easier and more efficient.</p>

<p>I'm not really clear on <strong>why</strong> you would want to alter the behavior of the built-in numeric classes anyway.  If you need to alter their behavior, subclass them!!</p>
"
255199,"<p>Greg is right-- you can use sys.stdout.write</p>

<p>Perhaps, though, you should consider refactoring your algorithm to accumulate a list of &lt;whatevers&gt; and then</p>

<pre><code>lst = ['h', 'm']
print  """".join(lst)
</code></pre>
"
338858,"<p>Does</p>

<pre><code>(local directory)/site-packages/toolkit
</code></pre>

<p>have a <code>__init__.py</code>?</p>

<p>To make import <em>walk</em> through your directories every directory must have a <code>__init__.py</code> file.</p>
"
44095,"<p>For the packages, you can document it in <code>__init__.py</code>.
For the modules, you can add a docstring simply in the module file.</p>

<p>All the information is here: <a href=""http://www.python.org/dev/peps/pep-0257/"">http://www.python.org/dev/peps/pep-0257/</a></p>
"
17933,"<p>Try the <code>entry_points.console_scripts</code> parameter in the setup() call. As described in the <a href=""http://peak.telecommunity.com/DevCenter/setuptools#automatic-script-creation"">setuptools docs</a>, this should do what I think you want.</p>

<p>To reproduce here:</p>

<pre><code>from setuptools import setup

setup(
    # other arguments here...
    entry_points = {
        'console_scripts': [
            'foo = package.module:func',
            'bar = othermodule:somefunc',
        ],
    }
)
</code></pre>
"
189497,"<p>If anyone is interested in performance of the above solutions, here they are for 4000x4000 grids, from fastest to slowest:</p>

<ul>
<li><a href=""http://stackoverflow.com/questions/189087/how-can-i-in-python-iterate-over-multiple-2d-lists-at-once-cleanly#189111"">Brian</a>: 1.08s (modified, with <code>izip</code> instead of <code>zip</code>)</li>
<li><a href=""http://stackoverflow.com/questions/189087/how-can-i-in-python-iterate-over-multiple-2d-lists-at-once-cleanly#189270"">John</a>: 2.33s</li>
<li><a href=""http://stackoverflow.com/questions/189087/how-can-i-in-python-iterate-over-multiple-2d-lists-at-once-cleanly#189234"">DzinX</a>: 2.36s</li>
<li><a href=""http://stackoverflow.com/questions/189087/how-can-i-in-python-iterate-over-multiple-2d-lists-at-once-cleanly#189348"">Î¤ÎÎ©Î¤ÎÎÎÎ¥</a>: 2.41s (but object initialization took 62s)</li>
<li><a href=""http://stackoverflow.com/questions/189087/how-can-i-in-python-iterate-over-multiple-2d-lists-at-once-cleanly"">Eugene</a>: 3.17s</li>
<li><a href=""http://stackoverflow.com/questions/189087/how-can-i-in-python-iterate-over-multiple-2d-lists-at-once-cleanly#189165"">Robert</a>: 4.56s</li>
<li><a href=""http://stackoverflow.com/questions/189087/how-can-i-in-python-iterate-over-multiple-2d-lists-at-once-cleanly#189111"">Brian</a>: 27.24s (original, with <code>zip</code>)</li>
</ul>

<p><strong>EDIT</strong>: Added Brian's scores with <code>izip</code> modification and it won by a large amount!</p>

<p>John's solution is also very fast, although it uses indices (I was really surprised to see this!), whereas Robert's and Brian's (with <code>zip</code>) are slower than the question creator's initial solution.</p>

<p>So let's present <a href=""http://stackoverflow.com/questions/189087/how-can-i-in-python-iterate-over-multiple-2d-lists-at-once-cleanly#189111"">Brian</a>'s winning function, as it is not shown in proper form anywhere in this thread:</p>

<pre><code>from itertools import izip
for a_row,b_row in izip(alist, blist):
    for a_item, b_item in izip(a_row,b_row):
        if a_item.isWhatever:
            b_item.doSomething()
</code></pre>
"
328451,"<blockquote>
  <p>I would like to call python script files from my c++ program.</p>
</blockquote>

<p>This means that you want to embed Python in your C++ application. As mentioned in <a href=""http://docs.python.org/extending/embedding.html"">Embedding Python in Another Application</a>:</p>

<blockquote>
  <p>Embedding Python is similar to
  extending it, but not quite. The
  difference is that when you extend
  Python, the main program of the
  application is still the Python
  interpreter, while if you embed
  Python, the main program may have
  nothing to do with Python â instead,
  some parts of the application
  occasionally call the Python
  interpreter to run some Python code.</p>
</blockquote>

<p>I suggest that you first go through <a href=""http://docs.python.org/extending/embedding.html"">Embedding Python in Another Application</a>. Then refer the following examples</p>

<ol>
<li><p><a href=""http://www.codeproject.com/KB/cpp/embedpython_1.aspx"">Embedding Python in C/C++: Part I</a></p></li>
<li><p><a href=""http://www.codeproject.com/KB/cpp/embedpython_2.aspx"">Embedding Python in C/C++: Part II</a></p></li>
<li><p><a href=""http://www.linuxjournal.com/article/3641"">Embedding Python in Multi-Threaded C/C++ Applications</a></p></li>
</ol>

<p>If you like <a href=""http://www.boost.org/doc/libs/release/libs/python/doc/tutorial/doc/html/python/embedding.html"">Boost.Python</a>, you may visit the following links:</p>

<ol>
<li><a href=""http://members.gamedev.net/sicrane/articles/EmbeddingPythonPart1.html"">Embedding Python with Boost.Python Part 1</a></li>
</ol>
"
43088,"<p>EDIT: see my other answer. It has a better implementation than this one, which I leave here just in case someone's interested in seeing how one might ""roll your own"" calculator.</p>

<p>@<a href=""#42997"">John Millikin</a> gives a good answer, with the added complication of calculating the first day of the next month.</p>

<p>The following isn't particularly elegant, but to figure out the last day of the month that any given date lives in, you could try:</p>

<pre><code>def last_day_of_month(date):
    if date.month == 12:
        return date.replace(day=31)
    return date.replace(month=date.month+1, day=1) - datetime.timedelta(days=1)

&gt;&gt;&gt; last_day_of_month(datetime.date(2002, 1, 17))
datetime.date(2002, 1, 31)
&gt;&gt;&gt; last_day_of_month(datetime.date(2002, 12, 9))
datetime.date(2002, 12, 31)
&gt;&gt;&gt; last_day_of_month(datetime.date(2008, 2, 14))
datetime.date(2008, 2, 29)
</code></pre>
"
43312,"<p>If you need to use something similar to the <code>{% url %}</code> template tag in your code, Django provides the <code>django.core.urlresolvers.reverse()</code>. The <code>reverse</code> function has the following signature:</p>

<pre><code>reverse(viewname, urlconf=None, args=None, kwargs=None)
</code></pre>

<p><a href=""https://docs.djangoproject.com/en/dev/ref/urlresolvers/"">https://docs.djangoproject.com/en/dev/ref/urlresolvers/</a></p>
"
212971,"<p>This is a little off-topic (since Moe's answer seems complete to the OP's question), but it might be worth looking at the complexity for your whole procedure from end to end.  If you're storing thing in a sorted lists (which is where a binary search would help), and then just checking for existence, you're incurring (worst-case, unless specified):</p>

<p><strong>Sorted Lists</strong></p>

<ul>
<li>O( n log n) to initially create the list (if it's unsorted data.  O(n), if it's sorted )</li>
<li>O( log n) lookups (this is the binary search part)</li>
<li>O( n ) insert / delete  (might be O(1) or O(log n) average case, depending on your pattern)</li>
</ul>

<p>Whereas with a <a href=""http://docs.python.org/library/stdtypes.html#set""><code>set()</code></a>, you're incurring</p>

<ul>
<li>O(n) to create</li>
<li>O(1) lookup</li>
<li>O(1) insert / delete</li>
</ul>

<p>The thing a sorted list really gets you are ""next"", ""previous"", and ""ranges"" (including inserting or deleting ranges), which are O(1) or O(|range|), given a starting index.  If you aren't using those sorts of operations often, then storing as sets, and sorting for display might be a better deal overall.  <a href=""http://docs.python.org/library/stdtypes.html#set""><code>set()</code></a> incurs very little additional overhead in python.  </p>
"
110929,"<p>We can use:</p>

<pre><code>def quit():
    root.quit()
</code></pre>

<p>or</p>

<pre><code>def quit():
    root.destroy()
</code></pre>
"
251469,"<pre><code>my_function.func_name
</code></pre>

<p>There are also other fun properties of functions. Type <code>dir(func_name)</code> to list them. <code>func_name.func_code.co_code</code> is the compiled function, stored as a string.</p>

<pre><code>import dis
dis.dis(my_function)
</code></pre>

<p>will display the code in <em>almost</em> human readable format. :)</p>
"
193153,"<p>From The <a href=""http://docs.python.org/library/logging.html#logging.Logger.debug"">logging documentation</a>:</p>

<blockquote>
  <p>There are two keyword arguments in
  kwargs which are inspected: exc_info
  which, if it does not evaluate as
  false, causes exception information to
  be added to the logging message. If an
  exception tuple (in the format
  returned by sys.exc_info()) is
  provided, it is used; otherwise,
  sys.exc_info() is called to get the
  exception information.</p>
</blockquote>

<p>So do:</p>

<pre><code>logger.warning(""something raised an exception: "" + excep,exc_info=True)
</code></pre>
"
243902,"<p>A generator will solve your problem nicely.</p>

<pre><code>def imerge(a, b):
    for i, j in itertools.izip(a,b):
        yield i
        yield j
</code></pre>
"
209530,"<p>For any given string s:</p>

<pre><code>int(s, 16)
</code></pre>
"
42048,"<ul>
<li>Tuples are used whenever you want to return multiple results from a function.</li>
<li>Since they're immutable, they can be used as keys for a dictionary (lists can't).</li>
</ul>
"
330924,"<pre><code>import csv

input = ['abc,""a string, with a comma"",""another, one""']
parser = csv.reader(input)

for fields in parser:
  for i,f in enumerate(fields):
    print i,f    # in Python 3 and up, print is a function; use: print(i,f)
</code></pre>

<p>Result:</p>

<pre>
0 abc
1 a string, with a comma
2 another, one
</pre>
"
210747,"<p>You can mask everything by <code>0xFFFFFFFF</code>:</p>

<pre><code>&gt;&gt;&gt; m = 0xFFFFFF00
&gt;&gt;&gt; allf = 0xFFFFFFFF
&gt;&gt;&gt; ~m &amp; allf
255L
</code></pre>
"
279389,"<p>This is the relevant PEP:</p>

<p><a href=""http://www.python.org/dev/peps/pep-0328/"">http://www.python.org/dev/peps/pep-0328/</a></p>

<p>In particular, presuming dirFoo is a directory up from dirBar...</p>

<p>In dirFoo\Foo.py:</p>

<pre><code>from ..dirBar import Bar
</code></pre>
"
51415,"<p>Put the asterisks before the kwargs variable. This makes Python pass the variable (which is assumed to be a dictionary) as keyword arguments.</p>

<pre><code>methodB(""argvalue"", **kwargs)
</code></pre>
"
51539,"<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.abspath('mydir/myfile.txt')
'C:\\example\\cwd\\mydir\\myfile.txt'
&gt;&gt;&gt;
</code></pre>
"
226540,"<p>You could give the URL configuration which you're using to handle the home page a name and use that:</p>

<p>urls.py:</p>

<pre><code>from django.conf.urls.defaults import *

urlpatterns = patterns('myproject.views',
    url(r'^$', 'index', name='index'),
)
</code></pre>

<p>Templates:</p>

<pre><code>&lt;a href=""{% url index %}""&gt;...
</code></pre>

<p>This note in the Django Book has some tips about deploying your applications to a subdirectory:</p>

<p><a href=""http://www.djangobook.com/en/1.0/chapter20/#cn43"">http://www.djangobook.com/en/1.0/chapter20/#cn43</a></p>
"
31372,"<p>Python's a fairly easy language to thread in, but there are caveats.  The biggest thing you need to know about is the Global Interpreter Lock.  This allows only one thread to access the interpreter.  This means two things:  1)  you rarely ever find yourself using a lock statement in python and 2) if you want to take advantage of multi-processor systems, you have to use separate processes.  EDIT:  I should also point out that you can put some of the code in C/C++ if you want to get around the GIL as well.</p>

<p>Thus, you need to re-consider why you want to use threads.  If you want to parallelize your app to take advantage of dual-core architecture, you need to consider breaking your app up into multiple processes.</p>

<p>If you want to improve responsiveness, you should CONSIDER using threads.  There are other alternatives though, namely <a href=""http://en.wikipedia.org/wiki/Microthread"" rel=""nofollow"">microthreading</a>.  There are also some frameworks that you should look into:</p>

<ul>
<li><a href=""http://www.stackless.com/"" rel=""nofollow"">stackless python</a></li>
<li><a href=""http://greenlet.readthedocs.org/en/latest/"" rel=""nofollow"">greenlets</a></li>
<li><a href=""http://www.gevent.org/"" rel=""nofollow"">gevent</a></li>
<li><a href=""https://github.com/saucelabs/monocle"" rel=""nofollow"">monocle</a></li>
</ul>
"
222473,"<p>The syntax you're trying to use is new in <strong><a href=""http://effbot.org/zone/element-xpath.htm"">ElementTree 1.3</a></strong>.</p>

<p>Such version is shipped with <strong>Python 2.7</strong> or higher.
If you have Python 2.6 or less you still have ElementTree 1.2.6 or less.</p>
"
121422,"<p>Just use </p>

<pre><code>id(object)
</code></pre>
"
43331,"<p>Not currently, currently the only languages available to access the iPhone SDK are C/C++, Objective C and Swift.</p>

<p>There is no technical reason why this could not change in the future but I wouldn't hold your breath for this happening in the short term.</p>

<p>That said, Objective-C and Swift really are not too scary...</p>

<blockquote>
  <h1>2016 edit</h1>
  
  <p>Javascript with NativeScript framework is available to use now.</p>
</blockquote>
"
73281,"<pre><code>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.pack('f', 3.141592654)
b'\xdb\x0fI@'
&gt;&gt;&gt; struct.unpack('f', b'\xdb\x0fI@')
(3.1415927410125732,)
&gt;&gt;&gt; struct.pack('4f', 1.0, 2.0, 3.0, 4.0)
'\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@'
</code></pre>
"
60243,"<p>There's a pattern that I learned from Twisted Python code.</p>

<pre><code>class SMTP:
    def lookupMethod(self, command):
        return getattr(self, 'do_' + command.upper(), None)
    def do_HELO(self, rest):
        return 'Howdy ' + rest
    def do_QUIT(self, rest):
        return 'Bye'

SMTP().lookupMethod('HELO')('foo.bar.com') # =&gt; 'Howdy foo.bar.com'
SMTP().lookupMethod('QUIT')('') # =&gt; 'Bye'
</code></pre>

<p>You can use it any time you need to dispatch on a token and execute extended piece of code. In a state machine you would have <code> state_ </code> methods, and dispatch on <code>self.state</code>. This switch can be cleanly extended by inheriting from base class and defining your own <code> do_ </code> methods. Often times you won't even have <code> do_ </code> methods in the base class.</p>

<p><em>Edit: how exactly is that used</em></p>

<p>In case of SMTP you will receive <code>HELO</code> from the wire. The relevant code (from <code>twisted/mail/smtp.py</code>, modified for our case) looks like this</p>

<pre><code>class SMTP:
    # ...

    def do_UNKNOWN(self, rest):
        raise NotImplementedError, 'received unknown command'

    def state_COMMAND(self, line):
        line = line.strip()
        parts = line.split(None, 1)
        if parts:
            method = self.lookupMethod(parts[0]) or self.do_UNKNOWN
            if len(parts) == 2:
                return method(parts[1])
            else:
                return method('')
        else:
            raise SyntaxError, 'bad syntax'

SMTP().state_COMMAND('   HELO   foo.bar.com  ') # =&gt; Howdy foo.bar.com
</code></pre>

<p>You'll receive <code>'  HELO   foo.bar.com '</code> (or you might get <code>'QUIT'</code> or <code>'RCPT TO: foo'</code>). This is tokenized into <code>parts</code> as <code>['HELO', 'foo.bar.com']</code>. The actual method lookup name is taken from <code>parts[0]</code>.</p>

<p>(The original method is also called <code>state_COMMAND</code>, because it uses the same pattern to implement a state machine, i.e. <code>getattr(self, 'state_' + self.mode)</code>)</p>
"
302099,"<p>Focus on <code>urllib2</code> for this, it works quite well.  Don't mess with <code>httplib</code>, it's not the top-level API.</p>

<p>What you're noting is that <code>urllib2</code> doesn't follow the redirect.</p>

<p>You need to fold in an instance of <code>HTTPRedirectHandler</code> that will catch and follow the redirects.</p>

<p>Further, you may want to subclass the default <code>HTTPRedirectHandler</code> to capture information that you'll then check as part of your unit testing.</p>

<pre><code>cookie_handler= urllib2.HTTPCookieProcessor( self.cookies )
redirect_handler= HTTPRedirectHandler()
opener = urllib2.build_opener(redirect_handler,cookie_handler)
</code></pre>

<p>You can then use this <code>opener</code> object to POST and GET, handling redirects and cookies properly.</p>

<p>You may want to add your own subclass of <code>HTTPHandler</code> to capture and log various error codes, also.</p>
"
269249,"<p>@Ryan: Documentation about preprocessors is a bit small</p>

<p>@Staale: Adding user to the Context every time one is calling the template in view, DRY</p>

<p>Solution is very simple</p>

<p><strong>A</strong>: In your settings add</p>

<pre><code>TEMPLATE_CONTEXT_PROCESSORS = (
    'myapp.processor_file_name.user',
)
</code></pre>

<p><strong>B</strong>: In myapp/processor_file_name.py insert</p>

<pre><code>def user(request):
    if hasattr(request, 'user'):
        return {'user':request.user }
    return {}
</code></pre>

<p>From now on you're able to use user object functionalities in your templates.</p>

<pre><code>{{ user.get_full_name }}
</code></pre>
"
288989,"<p>Perl uses <code>(?&lt;NAME&gt;pattern)</code> to specify names captures. You have to use the <code>%+</code> hash to retrieve them.</p>

<pre><code>$variable =~ /(?&lt;count&gt;\d+)/;
print ""Count is $+{count}"";
</code></pre>

<p>This is only supported on Perl 5.10 and higher though.</p>
"
344083,"<p>I ended up finding java code from IBM that solved it: <a href=""http://www.ibm.com/developerworks/java/library/j-coordconvert/index.html"">http://www.ibm.com/developerworks/java/library/j-coordconvert/index.html</a></p>

<p>Just for reference, here is my python implementation of the method I needed:</p>

<pre><code>import math

def utmToLatLng(zone, easting, northing, northernHemisphere=True):
    if not northernHemisphere:
        northing = 10000000 - northing

    a = 6378137
    e = 0.081819191
    e1sq = 0.006739497
    k0 = 0.9996

    arc = northing / k0
    mu = arc / (a * (1 - math.pow(e, 2) / 4.0 - 3 * math.pow(e, 4) / 64.0 - 5 * math.pow(e, 6) / 256.0))

    ei = (1 - math.pow((1 - e * e), (1 / 2.0))) / (1 + math.pow((1 - e * e), (1 / 2.0)))

    ca = 3 * ei / 2 - 27 * math.pow(ei, 3) / 32.0

    cb = 21 * math.pow(ei, 2) / 16 - 55 * math.pow(ei, 4) / 32
    cc = 151 * math.pow(ei, 3) / 96
    cd = 1097 * math.pow(ei, 4) / 512
    phi1 = mu + ca * math.sin(2 * mu) + cb * math.sin(4 * mu) + cc * math.sin(6 * mu) + cd * math.sin(8 * mu)

    n0 = a / math.pow((1 - math.pow((e * math.sin(phi1)), 2)), (1 / 2.0))

    r0 = a * (1 - e * e) / math.pow((1 - math.pow((e * math.sin(phi1)), 2)), (3 / 2.0))
    fact1 = n0 * math.tan(phi1) / r0

    _a1 = 500000 - easting
    dd0 = _a1 / (n0 * k0)
    fact2 = dd0 * dd0 / 2

    t0 = math.pow(math.tan(phi1), 2)
    Q0 = e1sq * math.pow(math.cos(phi1), 2)
    fact3 = (5 + 3 * t0 + 10 * Q0 - 4 * Q0 * Q0 - 9 * e1sq) * math.pow(dd0, 4) / 24

    fact4 = (61 + 90 * t0 + 298 * Q0 + 45 * t0 * t0 - 252 * e1sq - 3 * Q0 * Q0) * math.pow(dd0, 6) / 720

    lof1 = _a1 / (n0 * k0)
    lof2 = (1 + 2 * t0 + Q0) * math.pow(dd0, 3) / 6.0
    lof3 = (5 - 2 * Q0 + 28 * t0 - 3 * math.pow(Q0, 2) + 8 * e1sq + 24 * math.pow(t0, 2)) * math.pow(dd0, 5) / 120
    _a2 = (lof1 - lof2 + lof3) / math.cos(phi1)
    _a3 = _a2 * 180 / math.pi

    latitude = 180 * (phi1 - fact1 * (fact2 + fact3 + fact4)) / math.pi

    if not northernHemisphere:
        latitude = -latitude

    longitude = ((zone &gt; 0) and (6 * zone - 183.0) or 3.0) - _a3

    return (latitude, longitude)
</code></pre>

<p>And here I thought it was something simple like easting*x+zone*y or something.</p>
"
157423,"<p>In the <code>time</code> module, there are two timing functions: <code>time</code> and <code>clock</code>. <code>time</code> gives you ""wall"" time, if this is what you care about.</p>

<p>However, the python <a href=""http://docs.python.org/lib/module-time.html"">docs</a> say that <code>clock</code> should be used for benchmarking. Note that <code>clock</code> behaves different in separate systems:</p>

<ul>
<li>on MS Windows, it uses the Win32 function QueryPerformanceCounter(), with ""resolution typically better than a microsecond"". It has no special meaning, it's just a number (it starts counting the first time you call <code>clock</code> in your process).</li>
</ul>

<pre>
    # ms windows
    t0= time.clock()
    do_something()
    t= time.clock() - t0 # t is wall seconds elapsed (floating point)
</pre>

<ul>
<li>on *nix, <code>clock</code> reports CPU time. Now, this is different, and most probably the value you want, since your program hardly ever is the only process requesting CPU time (even if you have no other processes, the kernel uses CPU time now and then). So, this number, which typically is smallerÂ¹ than the wall time (i.e. time.time() - t0), is more meaningful when benchmarking code:</li>
</ul>

<pre>
    # linux
    t0= time.clock()
    do_something()
    t= time.clock() - t0 # t is CPU seconds elapsed (floating point)
</pre>

<p>Apart from all that, the <a href=""http://docs.python.org/lib/module-timeit.html"">timeit</a> module has the <code>Timer</code> class that is supposed to use what's best for benchmarking from the available functionality.</p>

<p>Â¹ unless threading gets in the wayâ¦</p>

<p>Â² Python â¥3.3: there are <a href=""http://www.python.org/dev/peps/pep-0418/#id18""><code>time.perf_counter()</code> and <code>time.process_time()</code></a>. <code>perf_counter</code> is being used by the <code>timeit</code> module.</p>
"
236445,"<p>I had some experience with modifying ""Frets On Fire"", an open source python ""Guitar Hero"" clone.</p>

<p>as I see it, python is not really suitable for a really large scale project.</p>

<p>I found myself spending a large part of the development time debugging issues related to assignment of incompatible types, things that static typed laguages will reveal effortlessly at compile-time.
also, since types are determined on run-time, trying to understand existing code becomes harder, because you have no idea what's the type of that parameter you are currently looking at.</p>

<p>in addition to that, calling functions using their name string with the <code>__getattr__</code> built in function is generally more common in Python than in other programming languages, thus getting the call graph to a certain function somewhat hard (although you can call functions with their name in some statically typed languages as well).</p>

<p>I think that Python really shines in small scale software, rapid prototype development, and gluing existing programs together, but I would not use it for large scale software projects, since in those types of programs maintainability becomes the real issue, and in my opinion python is relatively weak there.</p>
"
128859,"<p>I have adopted the practice of putting all imports in the functions that use them, rather than at the top of the module.</p>

<p>The benefit I get is the ability to refactor more reliably. When I move a function from one module to another, I know that the function will continue to work with all of its legacy of testing intact. If I have my imports at the top of the module, when I move a function, I find that I end up spending a lot of time getting the new module's imports complete and minimal. A refactoring IDE might make this irrelevant.</p>

<p>There is a speed penalty as mentioned elsewhere. I have measured this in my application and found it to be insignificant for my purposes. </p>

<p>It is also nice to be able to see all module dependencies up front without resorting to search (e.g. grep). However, the reason I care about module dependencies is generally because I'm installing, refactoring, or moving an entire system comprising multiple files, not just a single module. In that case, I'm going to perform a global search anyway to make sure I have the system-level dependencies. So I have not found global imports to aid my understanding of a system in practice.</p>

<p>I usually put the import of <code>sys</code> inside the <code>if __name__=='__main__'</code> check and then pass arguments (like <code>sys.argv[1:]</code>) to a <code>main()</code> function. This allows me to use <code>main</code> in a context where <code>sys</code> has not been imported.</p>
"
132123,"<pre><code>&gt;&gt;&gt; import traceback
&gt;&gt;&gt; def x():
&gt;&gt;&gt;    print traceback.extract_stack()

&gt;&gt;&gt; x()
[('&lt;stdin&gt;', 1, '&lt;module&gt;', None), ('&lt;stdin&gt;', 2, 'x', None)]
</code></pre>

<p>You can also nicely format the stack trace, see the <a href=""http://docs.python.org/lib/module-traceback.html"">docs</a>.</p>

<p><strong>Edit</strong>: To simulate Java's behavior, as suggested by @<a href=""#132260"">Douglas Leeder</a>, add this:</p>

<pre><code>import signal
import traceback

signal.signal(signal.SIGUSR1, lambda sig, stack: traceback.print_stack(stack))
</code></pre>

<p>to the startup code in your application. Then you can print the stack by sending <code>SIGUSR1</code> to the running Python process.</p>
"
194422,"<p>Let me just paste a part of conversation on django-dev mailing list started by Guido van Rossum:</p>

<blockquote>
  <p>[...]
  For example, it's part of the Google Python style guides[1] that all
  imports must import a module, not a class or function from that
  module. There are way more classes and functions than there are
  modules, so recalling where a particular thing comes from is much
  easier if it is prefixed with a module name. Often multiple modules
  happen to define things with the same name -- so a reader of the code
  doesn't have to go back to the top of the file to see from which
  module a given name is imported. </p>
</blockquote>

<p><strong>Source:</strong> <a href=""http://groups.google.com/group/django-developers/browse_thread/thread/78975372cdfb7d1a"">http://groups.google.com/group/django-developers/browse_thread/thread/78975372cdfb7d1a</a></p>

<p>1: <a href=""http://code.google.com/p/soc/wiki/PythonStyleGuide#Module_and_package_imports"">http://code.google.com/p/soc/wiki/PythonStyleGuide#Module_and_package_imports</a></p>
"
274644,"<p>Use the <a href=""http://alastairs-place.net/netifaces/""><code>netifaces</code></a> module.  Because networking is complex, using netifaces can be a little tricky, but here's how to do what you want:</p>

<pre><code>&gt;&gt;&gt; import netifaces
&gt;&gt;&gt; netifaces.interfaces()
['lo', 'eth0']
&gt;&gt;&gt; netifaces.ifaddresses('eth0')
{17: [{'broadcast': 'ff:ff:ff:ff:ff:ff', 'addr': '00:11:2f:32:63:45'}], 2: [{'broadcast': '10.0.0.255', 'netmask': '255.255.255.0', 'addr': '10.0.0.2'}], 10: [{'netmask': 'ffff:ffff:ffff:ffff::', 'addr': 'fe80::211:2fff:fe32:6345%eth0'}]}
&gt;&gt;&gt; for interface in netifaces.interfaces():
...   print netifaces.ifaddresses(interface)[netifaces.AF_INET]
...
[{'peer': '127.0.0.1', 'netmask': '255.0.0.0', 'addr': '127.0.0.1'}]
[{'broadcast': '10.0.0.255', 'netmask': '255.255.255.0', 'addr': '10.0.0.2'}]
&gt;&gt;&gt; for interface in netifaces.interfaces():
...   for link in netifaces.ifaddresses(interface)[netifaces.AF_INET]:
...     print link['addr']
...
127.0.0.1
10.0.0.2
</code></pre>

<p>This can be made a little more readable like this:</p>

<pre><code>from netifaces import interfaces, ifaddresses, AF_INET

def ip4_addresses():
    ip_list = []
    for interface in interfaces():
        for link in ifaddresses(interface)[AF_INET]:
            ip_list.append(link['addr'])
    return ip_list
</code></pre>

<p>If you want IPv6 addresses, use <code>AF_INET6</code> instead of <code>AF_INET</code>.  If you're wondering why <code>netifaces</code> uses lists and dictionaries all over the place, it's because a single computer can have multiple NICs, and each NIC can have multiple addresses, and each address has its own set of options.</p>
"
145659,"<p>I can recommend to take a look at Neil Fraser's code and articles:</p>

<p><a href=""http://code.google.com/p/google-diff-match-patch/"">google-diff-match-patch</a></p>

<blockquote>
  <p>Currently available in Java,
  JavaScript, C++ and Python. Regardless
  of language, each library features the
  same API and the same functionality.
  All versions also have comprehensive
  test harnesses.</p>
</blockquote>

<p><a href=""http://neil.fraser.name/writing/diff/"">Neil Fraser: Diff Strategies</a> - for theory and implementation notes</p>
"
264592,"<p>Yes, I think the answers here show your problem.
Just to try and clarify a little bit.</p>

<p>You're referencing a list, so when the list changes any reference to that list will reflect that change.  To demonstrate:</p>

<pre><code>&gt;&gt;&gt; x_present = [4,5,6]
&gt;&gt;&gt;
&gt;&gt;&gt; x_past = x_present
&gt;&gt;&gt;
&gt;&gt;&gt; x_past
[4, 5, 6]
&gt;&gt;&gt;
&gt;&gt;&gt; x_present.append(7)
&gt;&gt;&gt;
&gt;&gt;&gt; x_past
[4, 5, 6, 7]
&gt;&gt;&gt;
</code></pre>

<p>If you want a copy of the list you have to do do this, <strong>listcopy = mylist[:]</strong>.</p>

<pre><code>&gt;&gt;&gt; x_past = x_present[:]
&gt;&gt;&gt; x_past
[4, 5, 6, 7]
&gt;&gt;&gt;
&gt;&gt;&gt; x_present.append(8)
&gt;&gt;&gt;
&gt;&gt;&gt; x_past
[4, 5, 6, 7]
</code></pre>
"
28426,"<p>You can also use sys.platform if you already have imported sys and you don't want to import another module</p>

<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.platform
'linux2'
</code></pre>
"
261719,"<p>Is your employer aware that he can ""steal"" back any ideas that other people get from your code? I mean, if they can read your work, so can you theirs. Maybe looking at how you can benefit from the situation would yield a better return of your investment than fearing how much you could lose.</p>

<p>[EDIT] Answer to Nick's comment:</p>

<p>Nothing gained and nothing lost. The customer has what he wants (and paid for it since he did the change himself). Since he doesn't release the change, it's as if it didn't happen for everyone else.</p>

<p>Now if the customer sells the software, they have to change the copyright notice (which is illegal, so you can sue and will win -> simple case).</p>

<p>If they don't change the copyright notice, the 2nd level customers will notice that the software comes from you original and wonder what is going on. Chances are that they will contact you and so you will learn about the reselling of your work.</p>

<p>Again we have two cases: The original customer sold only a few copies. That means they didn't make much money anyway, so why bother. Or they sold in volume. That means better chances for you to learn about what they do and do something about it.</p>

<p>But in the end, most companies try to comply to the law (once their reputation is ruined, it's much harder to do business). So they will not steal your work but work with you to improve it. So if you include the source (with a license that protects you from simple reselling), chances are that they will simply push back changes they made since that will make sure the change is in the next version and they don't have to maintain it. That's win-win: You get changes and they can make the change themselves if they really, desperately need it even if you're unwilling to include it in the official release.</p>
"
337714,"<p>Yes, It does. Use <code>**kwargs</code> in a function definition.</p>

<p>Example:</p>

<pre><code>def f(**kwargs):
    print kwargs.keys()


f(a=2, b=""b"")     # -&gt; ['a', 'b']
f(**{'d'+'e': 1}) # -&gt; ['de']
</code></pre>

<p>But why do you need that?</p>
"
119346,"<p>It's just personal preference really, and has to do with the layout of your python modules.</p>

<p>Let's say you have a module called <code>erikutils</code>. There are two ways that it can be a module, either you have a file called <em>erikutils.py</em> on your <code>sys.path</code> or you have a directory called <em>erikutils</em> on your <code>sys.path</code> with an empty <em><code>__init__.py</code></em> file inside it. Then let's say you have a bunch of modules called <code>fileutils</code>, <code>procutils</code>, <code>parseutils</code> and you want those to be sub-modules under <code>erikutils</code>. So you make some .py files called <em>fileutils.py</em>, <em>procutils.py</em>, and <em>parseutils.py</em>:</p>

<pre><code>erikutils
  __init__.py
  fileutils.py
  procutils.py
  parseutils.py
</code></pre>

<p>Maybe you have a few functions that just don't belong in the <code>fileutils</code>, <code>procutils</code>, or <code>parseutils</code> modules. And let's say you don't feel like creating a new module called <code>miscutils</code>. AND, you'd like to be able to call the function like so:</p>

<pre><code>erikutils.foo()
erikutils.bar()
</code></pre>

<p>rather than doing</p>

<pre><code>erikutils.miscutils.foo()
erikutils.miscutils.bar()
</code></pre>

<p>So because the <code>erikutils</code> module is a directory, not a file, we have to define it's functions inside the <em><code>__init__.py</code></em> file.</p>

<p>In django, the best example I can think of is <code>django.db.models.fields</code>. ALL the django *Field classes are defined in the <em><code>__init__.py</code></em> file in the <em>django/db/models/fields</em> directory. I guess they did this because they didn't want to cram everything into a hypothetical <em>django/db/models/fields.py</em> model, so they split it out into a few submodules (<em>related.py</em>, <em>files.py</em>, for example) and they stuck the made *Field definitions in the fields module itself (hence, <em><code>__init__.py</code></em>).</p>
"
58701,"<p>This is <a href=""http://www.stack.nl/~dimitri/doxygen/docblocks.html#pythonblocks"">documented on the doxygen website</a>, but to summarize here:</p>

<p>You can use doxygen to document your Python code. You can either use the Python documentation string syntax:</p>

<pre><code>""""""@package docstring
Documentation for this module.

More details.
""""""

def func():
    """"""Documentation for a function.

    More details.
    """"""
    pass
</code></pre>

<p>In which case the comments will be extracted by doxygen, but you won't be able to use any of the <a href=""http://www.stack.nl/~dimitri/doxygen/commands.html#cmd_intro"">special doxygen commands</a>.</p>

<p><strong>Or</strong> you can (similar to C-style languages under doxygen) double up the comment marker (<code>#</code>) on the first line before the member:</p>

<pre><code>## @package pyexample
#  Documentation for this module.
#
#  More details.

## Documentation for a function.
#
#  More details.
def func():
    pass
</code></pre>

<p>In that case, you can use the special doxygen commands. There's no particular Python output mode, but you can apparently improve the results by setting <code>OPTMIZE_OUTPUT_JAVA</code> to <code>YES</code>.</p>

<p>Honestly, I'm a little surprised at the difference - it seems like once doxygen can detect the comments in ## blocks or """""" blocks, most of the work would be done and you'd be able to use the special commands in either case. Maybe they expect people using """""" to adhere to more Pythonic documentation practices and that would interfere with the special doxygen commands?</p>
"
180152,"<p>Read up on the try: statement.</p>

<pre><code>try:
    # do something
except socket.error, e:
    # A socket error
except IOError, e:
    if e.errno == errno.EPIPE:
        # EPIPE error
    else:
        # Other error
</code></pre>
"
116217,"<p>More exactly, a .docx document is a Zip archive in OpenXML format: you have first to uncompress it.<br />
I downloaded a sample (Google: <em>some search term filetype:docx</em>) and after unzipping I found some folders. The <em>word</em> folder contains the document itself, in file <em>document.xml</em>.</p>
"
120256,"<p>Nope.  But you can use short integers in arrays:</p>

<pre><code>from array import array
a = array(""h"") # h = signed short, H = unsigned short
</code></pre>

<p>As long as the value stays in that array it will be a short integer.</p>

<ul>
<li>documentation for the <a href=""http://docs.python.org/dev/library/array"">array module</a></li>
</ul>
"
77925,"<p>I might say something unpopular here: <code>id()</code> is a rather specialized built-in function that is rarely used in business logic. Therefore I don't see a problem in using it as a variable name in a tight and well-written function, where it's clear that id doesn't mean the built-in function.</p>
"
246774,"<p>I think django does something like <a href=""https://docs.python.org/library/rlcompleter.html"">https://docs.python.org/library/rlcompleter.html</a></p>

<p>If you want to have a really good interactive interpreter have a look at 
<a href=""http://ipython.scipy.org/"">http://ipython.scipy.org/</a>.</p>
"
50425,"<p>I found a ""nicer""/""better"" solution for getting variables inside
Its not the nicest way, but it works.</p>

<p>You install a custom filter into django which gets the key of your dict as a parameter</p>

<p>To make it work in google app-engine you need to add a file to your main directory,
I called mine *django_hack.py* which contains this little piece of code</p>

<pre><code>from google.appengine.ext import webapp

register = webapp.template.create_template_register()

def hash(h,key):
    if key in h:
        return h[key]
    else:
        return None

register.filter(hash)
</code></pre>

<p>Now that we have this file, all we need to do is tell the app-engine to use it...
we do that by adding this little line to your main file</p>

<pre><code>webapp.template.register_template_library('django_hack')
</code></pre>

<p>and in your template view add this template instead of the usual code</p>

<pre><code>{{ user|hash:item }}
</code></pre>

<p>And its should work perfectly =)</p>
"
100764,"<p>Because <code>None</code> is not the only thing that is considered false.</p>

<pre><code>if not False:
    print ""False is false.""
if not 0:
    print ""0 is false.""
if not []:
    print ""An empty list is false.""
if not ():
    print ""An empty tuple is false.""
if not {}:
    print ""An empty dict is false.""
if not """":
    print ""An empty string is false.""
</code></pre>

<p><code>False</code>, <code>0</code>, <code>()</code>, <code>[]</code>, <code>{}</code> and <code>""""</code> are all different from <code>None</code>, so your two code snippets are <em>not</em> equivalent.</p>

<p>Moreover, consider the following:</p>

<pre><code>&gt;&gt;&gt; False == 0
True
&gt;&gt;&gt; False == ()
False
</code></pre>

<p><code>if object:</code> is <em>not</em> an equality check. <code>0</code>, <code>()</code>, <code>[]</code>, <code>None</code>, <code>{}</code>, etc. <em>are</em> all different from each other, but they all <em>evaluate</em> to False.</p>

<p>This is the ""magic"" behind short circuiting expressions like:</p>

<pre><code>foo = bar and spam or eggs
</code></pre>

<p>which is shorthand for:</p>

<pre><code>if bar:
    foo = spam
else:
    foo = eggs
</code></pre>

<p>although you really should write:</p>

<pre><code>foo = spam if bar else egg
</code></pre>
"
118824,"<p>Don't. Apple ships various system utilities that rely on the system Python (and particularly the Python ""framework"" build); removing it will cause you problems.</p>

<p>Instead, modify your PATH environ variable in your <code>~/.bash_profile</code> to put <code>/opt/local/bin</code> first.</p>
"
189666,"<p>First, you may also consider making the process of getting and validating the input a function; within that function, you can just return the value if its correct, and keep spinning in the <em>while</em> loop if not.  This essentially obviates the problem you solved, and can usually be applied in the more general case (breaking out of multiple loops).  If you absolutely must keep this structure in your code, and really don't want to deal with bookkeeping booleans...</p>

<p>You may also use <em>goto</em> in the following way (using an April Fools module from <a href=""http://entrian.com/goto/"">here</a>):</p>

<pre><code>#import the stuff
from goto import goto, label

while True:
    #snip: print out current state
    while True:
        ok = get_input(""Is this ok? (y/n)"")
        if ok == ""y"" or ok == ""Y"": goto .breakall
        if ok == ""n"" or ok == ""N"": break
    #do more processing with menus and stuff
label .breakall
</code></pre>

<p>I know, I know, ""thou shalt not use goto"" and all that, but it works well in strange cases like this.</p>
"
156335,"<p>What you need is <code>time()</code> function from <code>time</code> module:</p>

<pre><code>import time
start = time.time()
do_long_code()
print ""it took"", time.time() - start, ""seconds.""
</code></pre>

<p>You can use <a href=""http://docs.python.org/lib/module-timeit.html"">timeit</a> module for more options though.</p>
"
340875,"<p>This feature is documented here:</p>

<p><a href=""http://pydev.org/manual_adv_debug_console.html"">http://pydev.org/manual_adv_debug_console.html</a></p>
"
348508,"<p>It's hard to answer your question without any background information. Is the complexity justified if you just want a blog? No. Is the complexity justified if you're building a company intranet for 400+ people? Yes. Is it a good investment if you're looking to be a consultant? Absolutely! There's a lot of Plone work out there, and it pays much better than the average PHP job.</p>

<p>I'd encourage you to clarify what you're trying to build, and ask the Plone forums for advice. Plone has a very mature and friendly community â and will absolutely let you know if what you're trying to do is a poor fit for Plone. You can of course do whatever you want with Plone, but there are some areas where it's the best solution available, other areas where it'll be a lot of work to change it to do something else.</p>

<p>Some background:</p>

<p>The reason for the complexity of Plone at this point in time is that it's moving to a more modern architecture. It's bridging both the old and the new approach right now, which adds some complexity until the transition is mostly complete.</p>

<p>Plone is doing this to avoid leaving their customers behind by breaking backwards compatibility, which they take very seriously â unlike other systems I could mention (but won't ;). </p>

<p>You care about your data, the Plone community cares about their data â and we'd like you to be able to upgrade to the new and better versions even when we're transitioning to a new architecture. This is one of the Plone community's strengths, but there is of course a penalty to pay for modifying the plane while it's flying, and that's a bit of temporary, extra complexity.</p>

<p>Furthermore, Plone as a community has a strong focus on security (compare it to any other system on the vulnerabilities reported), and a very professional culture that values good architecture, testing and reusability.</p>

<p>As an example, consider the current version of Plone being developed (what will become 4.0):</p>

<ul>
<li>It starts up 3-4 times faster than the current version.</li>
<li>It uses about 20% less memory than the current version.</li>
<li>There's a much, much easier types system in the works (Dexterity), which will reduce the complexity and speed up the system a lot, while keeping the same level of functionality</li>
<li>The code base is already 20% smaller than the current shipping version, and getting even smaller.</li>
<li>Early benchmarks of the new types system show a 5&times; speedup for content editing, and we haven't really started optimizing this part yet.</li>
</ul>

<p>â Alexander Limi, Plone co-founder (and slightly biased ;)</p>
"
57833,"<p>Using a list comprehension would build a temporary list, which could eat all your memory if the sequence being searched is large. Even if the sequence is not large, building the list means iterating over the whole of the sequence before <code>in</code> could start its search.</p>

<p>The temporary list can be avoiding by using a generator expression:</p>

<pre><code>foo = 12
foo in (obj.id for obj in bar)
</code></pre>

<p>Now, as long as <code>obj.id == 12</code> near the start of <code>bar</code>, the search will be fast, even if <code>bar</code> is infinitely long.</p>

<p>As @Matt suggested, it's a good idea to use <code>hasattr</code> if any of the objects in <code>bar</code> can be missing an <code>id</code> attribute:</p>

<pre><code>foo = 12
foo in (obj.id for obj in bar if hasattr(obj, 'id'))
</code></pre>
"
36395,"<p>It is also worth noting the <code>sorted()</code> function:</p>

<pre><code>for x in sorted(list):
    print x
</code></pre>

<p>This returns a new, sorted version of a list without changing the original list.</p>
"
105473,"<p>For measuring cyclomatic complexity, there's a nice tool available at <a href=""http://www.traceback.org/2008/03/31/measuring-cyclomatic-complexity-of-python-code/"">traceback.org</a>.  The page also gives a good overview of how to interpret the results.</p>

<p>+1 for <a href=""http://www.logilab.org/project/pylint"">pylint</a>.  It is great at verifying adherence to coding standards (be it <a href=""http://www.python.org/dev/peps/pep-0008/"">PEP8</a> or your own organization's variant), which can in the end help to reduce cyclomatic complexity.</p>
"
306603,"<p>As you can check in <a href=""http://svn.python.org/projects/python/trunk/Objects/intobject.c"">source file <em>intobject.c</em></a>, Python caches small integers for efficiency. Every time you create a reference to a small integer, you are referring the cached small integer, not a new object. 257 is not an small integer, so it is calculated as a different object.</p>

<p>It is better to use ""=="" for that purpose.</p>
"
47956,"<p>From the <a href=""http://peak.telecommunity.com/DevCenter/PythonEggs"">Python Enterprise Application Kit community</a>:</p>

<blockquote>
  <p><em>""Eggs are to Pythons as Jars are to Java...""</em></p>
  
  <p>Python eggs are a way of bundling
  additional information with a Python
  project, that allows the project's
  dependencies to be checked and
  satisfied at runtime, as well as
  allowing projects to provide plugins
  for other projects. There are several
  binary formats that embody eggs, but
  the most common is '.egg' zipfile
  format, because it's a convenient one
  for distributing projects. All of the
  formats support including
  package-specific data, project-wide
  metadata, C extensions, and Python
  code.</p>
  
  <p>The primary benefits of Python Eggs
  are:</p>
  
  <ul>
  <li><p>They enable tools like the ""Easy Install"" Python package manager</p></li>
  <li><p>.egg files are a ""zero installation"" format for a Python
  package; no build or install step is
  required, just put them on PYTHONPATH
  or sys.path and use them (may require
  the runtime installed if C extensions
  or data files are used)</p></li>
  <li><p>They can include package metadata, such as the other eggs they depend on</p></li>
  <li><p>They allow ""namespace packages"" (packages that just contain other
  packages) to be split into separate
  distributions (e.g. zope.<em>, twisted.</em>,
  peak.* packages can be distributed as
  separate eggs, unlike normal packages
  which must always be placed under the
  same parent directory. This allows
  what are now huge monolithic packages
  to be distributed as separate
  components.)</p></li>
  <li><p>They allow applications or libraries to specify the needed
  version of a library, so that you can
  e.g. require(""Twisted-Internet>=2.0"")
  before doing an import
  twisted.internet.</p></li>
  <li><p>They're a great format for distributing extensions or plugins to
  extensible applications and frameworks
  (such as Trac, which uses eggs for
  plugins as of 0.9b1), because the egg
  runtime provides simple APIs to locate
  eggs and find their advertised entry
  points (similar to Eclipse's
  ""extension point"" concept).</p></li>
  <li><p>There are also other benefits that may come from having a standardized
  format, similar to the benefits of
  Java's ""jar"" format.</p></li>
  </ul>
</blockquote>


"
260433,"<p>Here's an answer like MizardX's, but without its apparent problem of taking quadratic time in the worst case from rescanning the working string repeatedly for newlines as chunks are added.</p>

<p>Compared to the activestate solution (which also seems to be quadratic), this doesn't blow up given an empty file, and does one seek per block read instead of two.</p>

<p>Compared to spawning 'tail', this is self-contained. (But 'tail' is best if you have it.)</p>

<p>Compared to grabbing a few kB off the end and hoping it's enough, this works for any line length.</p>

<pre><code>import os

def reversed_lines(file):
    ""Generate the lines of file in reverse order.""
    part = ''
    for block in reversed_blocks(file):
        for c in reversed(block):
            if c == '\n' and part:
                yield part[::-1]
                part = ''
            part += c
    if part: yield part[::-1]

def reversed_blocks(file, blocksize=4096):
    ""Generate blocks of file's contents in reverse order.""
    file.seek(0, os.SEEK_END)
    here = file.tell()
    while 0 &lt; here:
        delta = min(blocksize, here)
        here -= delta
        file.seek(here, os.SEEK_SET)
        yield file.read(delta)
</code></pre>

<p>To use it as requested:</p>

<pre><code>from itertools import islice

def check_last_10_lines(file, key):
    for line in islice(reversed_lines(file), 10):
        if line.rstrip('\n') == key:
            print 'FOUND'
            break
</code></pre>

<p><strong>Edit:</strong> changed map() to itertools.imap() in head(). <strong>Edit 2:</strong> simplified reversed_blocks(). <strong>Edit 3:</strong> avoid rescanning tail for newlines. <strong>Edit 4:</strong> rewrote reversed_lines() because str.splitlines() ignores a final '\n', as BrianB noticed (thanks).</p>

<p>Note that in very old Python versions the string concatenation in a loop here will take quadratic time. CPython from at least the last few years avoids this problem automatically.</p>
"
226568,"<p>You process each form as you normally would, ensuring that you create instances which have the same prefixes as those used to generate the form initially.</p>

<p>Here's a slightly awkward example using the form you've given, as I don't know what the exact use case is:</p>

<pre><code>def some_view(request):
    if request.method == 'POST':
        form1 = GeneralForm(request.POST, prefix='form1')
        form2 = GeneralForm(request.POST, prefix='form2')
        if all([form1.is_valid(), form2.is_valid()]):
            pass # Do stuff with the forms
    else:
        form1 = GeneralForm(prefix='form1')
        form2 = GeneralForm(prefix='form2')
    return render_to_response('some_template.html', {
        'form1': form1,
        'form2': form2,
    })
</code></pre>

<p>Here's some real-world sample code which demonstrates processing forms using the prefix:</p>

<p><a href=""http://collingrady.wordpress.com/2008/02/18/editing-multiple-objects-in-django-with-newforms/"">http://collingrady.wordpress.com/2008/02/18/editing-multiple-objects-in-django-with-newforms/</a></p>
"
152012,"<pre><code>server.socket_host: '0.0.0.0'
</code></pre>

<p>...would also work. That's IPv4 INADDR_ANY, which means, ""listen on all interfaces"".</p>

<p>In a config file, the syntax is:</p>

<pre><code>[global]
server.socket_host: '0.0.0.0'
</code></pre>

<p>In code:</p>

<pre><code>cherrypy.server.socket_host = '0.0.0.0'
</code></pre>
"
296722,"<p>Adapted version of <a href=""http://mail.python.org/pipermail/python-list/2006-May/384142.html"">the script</a> is:</p>

<pre><code>#!/usr/bin/env python
from __future__ import with_statement
from contextlib import closing
from zipfile import ZipFile, ZIP_DEFLATED
import os

def zipdir(basedir, archivename):
    assert os.path.isdir(basedir)
    with closing(ZipFile(archivename, ""w"", ZIP_DEFLATED)) as z:
        for root, dirs, files in os.walk(basedir):
            #NOTE: ignore empty directories
            for fn in files:
                absfn = os.path.join(root, fn)
                zfn = absfn[len(basedir)+len(os.sep):] #XXX: relative path
                z.write(absfn, zfn)

if __name__ == '__main__':
    import sys
    basedir = sys.argv[1]
    archivename = sys.argv[2]
    zipdir(basedir, archivename)
</code></pre>

<p>Example:</p>

<pre><code>C:\zipdir&gt; python -mzipdir c:\tmp\test test.zip
</code></pre>

<p>It creates <code>'C:\zipdir\test.zip'</code> archive with the contents of the <code>'c:\tmp\test'</code> directory.</p>
"
320712,"<p>You can use <a href=""http://docs.python.org/library/atexit.html"" rel=""nofollow""><strong>atexit</strong></a> for this, and register any clean up tasks to be run when your program exits. </p>

<p><strong>atexit.register(func[, *args[, **kargs]])</strong></p>

<p>In your cleanup process, you can also implement your own wait, and kill it when a your desired timeout occurs.</p>

<pre><code>&gt;&gt;&gt; import atexit
&gt;&gt;&gt; import sys
&gt;&gt;&gt; import time
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt;
&gt;&gt;&gt; def cleanup():
...     timeout_sec = 5
...     for p in all_processes: # list of your processes
...         p_sec = 0
...         for second in range(timeout_sec):
...             if p.poll() == None:
...                 time.sleep(1)
...                 p_sec += 1
...         if p_sec &gt;= timeout_sec:
...             p.kill() # supported from python 2.6
...     print 'cleaned up!'
...
&gt;&gt;&gt;
&gt;&gt;&gt; atexit.register(cleanup)
&gt;&gt;&gt;
&gt;&gt;&gt; sys.exit()
cleaned up!
</code></pre>

<p><strong>Note</strong> -- Registered functions won't be run if this process (parent process) is killed.</p>

<p><strong>The following windows method is no longer needed for python >= 2.6</strong></p>

<p>Here's a way to kill a process in windows. Your Popen object has a pid attribute, so you can just call it by <strong>success = win_kill(p.pid)</strong> (Needs <a href=""http://sourceforge.net/projects/pywin32/"" rel=""nofollow"">pywin32</a> installed):</p>

<pre><code>    def win_kill(pid):
        '''kill a process by specified PID in windows'''
        import win32api
        import win32con

        hProc = None
        try:
            hProc = win32api.OpenProcess(win32con.PROCESS_TERMINATE, 0, pid)
            win32api.TerminateProcess(hProc, 0)
        except Exception:
            return False
        finally:
            if hProc != None:
                hProc.Close()

        return True
</code></pre>
"
75456,"<p>It's not a method, it's a field.  The field is called <code>__name__</code>.  <code>class.__name__</code> will give the name of the class as a string.  <code>object.__class__.__name__</code> will give the name of the class of an object.</p>
"
345669,"<p>Allow me to answer my own question.  The underlying problem here is that settings.py gets imported twice, or maybe even more (See <a href=""http://www.mail-archive.com/django-users@googlegroups.com/msg39059.html"">here</a>).  (I still don't understand why this is.  Maybe some Django expert could explain that to me.)  This seems to be true of some other modules as well.  At this point I don't think it's wise to make assumptions about how many times settings.py will be imported.  For that matter, such assumptions aren't safe in general.  I've had this code in places other than settings.py, and the results are similar.</p>

<p>You have to code around this.  That is, you have to check your logger for existing handlers before adding additional handlers to it.  This is a bit ugly because it's perfectly reasonable to have multiple handlers -- even of the same type -- attached to one logger.  There are a few solutions to dealing with this.  One is check the handlers property of your logger object.  If you only want one handler and your length > 0, then don't add it.  Personally I don't love this solution, because it gets messy with more handlers.</p>

<p>I prefer something like this (thanks to Thomas Guettler):</p>

<pre><code># file logconfig.py
if not hasattr(logging, ""set_up_done""):
    logging.set_up_done=False

def set_up(myhome):
    if logging.set_up_done:
        return
    # set up your logging here
    # ...
    logging.set_up_done=True
</code></pre>

<p>I must say, I wish the fact that Django imports settings.py multiple times were better documented.  And I would imagine that my configuration is somehow cause this multiple import, but I'm having trouble finding out what is causing the problem and why.  Maybe I just couldn't find that in their documents, but I would think that's the sort of thing you need to warn your users about.</p>
"
177312,"<p>what about this:</p>

<pre><code>import win32api

win32api.MessageBox(0, 'hello', 'title')
</code></pre>

<p>Additionally:</p>

<pre><code>win32api.MessageBox(0, 'hello', 'title', 0x00001000) 
</code></pre>

<p>will make the box appear on top of other windows, for urgent messages. See <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms645505%28v=vs.85%29.aspx"">MessageBox function</a> for other options.</p>
"
249101,"<p>""Can you guys help me think of something to finally convince my boss to really learn Python and start using it on projects?""</p>

<p>Nope. </p>

<p>Nothing succeeds like success.  Use Python.  Be successful.  Make people jealous.  </p>

<p>When asked why you're successful, you can talk about Python.  Not before.</p>

<p>Choose projects wisely: things where a dynamic language has significant advantages. Things where the requirements are <strong>not</strong> nailed down in detail.  Things like data transformations, log-file scraping, and super-sophisticated replacements for BAT files.</p>

<p>Use Python to get started doing something useful while everyone else is standing around trying to get enough business and domain information to launch a project to develop a complicated MVC design.</p>

<p><hr /></p>

<p>Edit: Some Python to the Rescue stories.</p>

<ul>
<li><a href=""http://homepage.mac.com/s_lott/iblog/architecture/C551260341/E20081005191603/index.html"">Exploratory Programming</a></li>
<li><a href=""http://homepage.mac.com/s_lott/iblog/architecture/C20071019092637/E20080830091128/index.html"">Tooling to build test cases</a></li>
<li><a href=""http://homepage.mac.com/s_lott/iblog/architecture/C465799452/E20080712112540/index.html"">What's Central Here?</a></li>
<li><a href=""http://homepage.mac.com/s_lott/iblog/architecture/C588245363/E20060206184914/index.html"">Control-Break Reporting</a></li>
<li><a href=""http://homepage.mac.com/s_lott/iblog/architecture/C588245363/E20051022112554/index.html"">One More Cool Thing About Python Is...</a></li>
<li><a href=""http://homepage.mac.com/s_lott/iblog/architecture/C465799452/E20080603055001/index.html"">In Praise of Serialization</a></li>
</ul>

<p>And that's just me.</p>

<p><hr /></p>

<p>Edit: ""boss prompted ME to investigate"", ""figure out how we can use it"" changes everything.</p>

<p>The ""finally convince my boss to really learn Python"" is misleading.  You aren't swimming upstream.  See <a href=""http://stackoverflow.com/questions/202337/how-do-i-make-the-business-case-for-python"">How Do I Make the Business Case for Python</a> for the ""convince my boss"" problem.  The edit says you're past this phase.</p>

<p>Dynamic languages offer flexibility.  Exploit that.  My two sets of examples above are two areas where flexibility  matters.</p>

<ul>
<li><p>Requirements aren't totally nailed down.  With a dynamic language, you can get started.  Rework won't be a deal-breaker.  With Java (and C++ and C#) you are reluctant to tackle devastating design changes because it's hard to break everything and get it to compile and work again.  In Python, devastating changes aren't as expensive.</p></li>
<li><p>Design is in flux because you can't pick components.  You can write Wrappers and Facades  very easily in Python.  It's a scripting language.  And, Python modules compose into larger aggregates very simply.</p></li>
<li><p>Coding is in flux because requirements and design keep changing.  It's scripted -- not compiled.  You just make a change to the code and you're off and running.  Testing is easier because the work cycle is shorter.  It isn't code-compile-build-test it's code-test.</p></li>
<li><p>Testing is in flux because the requirements keep changing.  Same as above.  The work cycle is shorter and faster.</p></li>
</ul>
"
131092,"<p>It seems there's no way to elevate the application privileges for a while for you to perform a particular task. Windows needs to know at the start of the program whether the application requires certain privileges, and will ask the user to confirm when the application performs any tasks that <em>need</em> those privileges. There are two ways to do this:</p>

<ol>
<li>Write a manifest file that tells Windows the application might require some privileges</li>
<li>Run the application with elevated privileges from inside another program</li>
</ol>

<p>This <a href=""http://www.codeproject.com/KB/vista-security/UAC__The_Definitive_Guide.aspx"">two</a> <a href=""http://msdn.microsoft.com/en-gb/magazine/cc163486.aspx"">articles</a> explain in much more detail how this works.</p>

<p>What I'd do, if you don't want to write a nasty ctypes wrapper for the CreateElevatedProcess API, is use the ShellExecuteEx trick explained in the Code Project article (Pywin32 comes with a wrapper for ShellExecute). How? Something like this:</p>

<p>When your program starts, it checks if it has Administrator privileges, if it doesn't it runs itself using the ShellExecute trick and exits immediately, if it does, it performs the task at hand.</p>

<p>As you describe your program as a ""script"", I suppose that's enough for your needs.</p>

<p>Cheers.</p>
"
341218,"<p>You can have both installed.</p>

<p>You should write in front of your script :</p>

<pre><code>#!/bin/env python2.6
</code></pre>

<p>or eventually..</p>

<pre><code>#!/bin/env python3.0
</code></pre>

<h2>Update</h2>

<p>My solution work perfectly with Unix, after a quick search on <a href=""http://news.softpedia.com/news/Your-First-Python-Script-on-Windows-81974.shtml"">Google</a>, here is the Windows solution:</p>

<pre><code>#!c:/Python/python3_0.exe -u
</code></pre>

<p>Same thing... in front of your script</p>
"
126389,"<p>Rewriting a file in place is often done by saving the old copy with a modified name.  Unix folks add a <code>~</code> to mark the old one.  Windows folks do all kinds of things -- add .bak or .old -- or rename the file entirely or put the ~ on the front of the name.</p>

<pre><code>import shutil
shutil.move( afile, afile+""~"" )

destination= open( aFile, ""w"" )
source= open( aFile+""~"", ""r"" )
for line in source:
    destination.write( line )
    if &lt;some condition&gt;:
        destination.write( &gt;some additional line&gt; + ""\n"" )
source.close()
destination.close()
</code></pre>

<p>Instead of <code>shutil</code>, you can use the following.</p>

<pre><code>import os
os.rename( aFile, aFile+""~"" )
</code></pre>
"
15931,"<p>Another good option is <a href=""http://lxml.de/validation.html"" rel=""nofollow"">lxml's validation</a> which I find quite pleasant to use.</p>

<p>A simple example taken from the lxml site:</p>

<pre><code>from StringIO import StringIO

from lxml import etree

dtd = etree.DTD(StringIO(""""""&lt;!ELEMENT foo EMPTY&gt;""""""))
root = etree.XML(""&lt;foo/&gt;"")
print(dtd.validate(root))
# True

root = etree.XML(""&lt;foo&gt;bar&lt;/foo&gt;"")
print(dtd.validate(root))
# False
print(dtd.error_log.filter_from_errors())
# &lt;string&gt;:1:0:ERROR:VALID:DTD_NOT_EMPTY: Element foo was declared EMPTY this one has content
</code></pre>
"
121481,"<p>The reason for spaces is that tabs are optional.  Spaces are the actual lowest-common denominator in punctuation.</p>

<p>Every decent text editor has a ""replace tabs with spaces"" and many people use this.  But not always.</p>

<p>While some text editors might replace a run of spaces with a tab, this is really rare.</p>

<p><strong>Bottom Line</strong>.  You can't go wrong with spaces.  You <em>might</em> go wrong with tabs.  So don't use tabs and reduce the risk of mistakes.</p>
"
279592,"<p>Other answers have demonstrated the way you should do this. Here's a way you shouldn't:</p>

<pre><code>&gt;&gt;&gt; def foo(counter=[0]):
...   counter[0] += 1
...   print(""Counter is %i."" % counter[0]);
... 
&gt;&gt;&gt; foo()
Counter is 1.
&gt;&gt;&gt; foo()
Counter is 2.
&gt;&gt;&gt; 
</code></pre>

<p>Default values are initialized only when the function is first evaluated, not each time it is executed, so you can use a list or any other mutable object to store static values.</p>
"
112989,"<p>Two reasons: The python philosophy of ""There ought to be one way to do it"" and <code>file</code> is going away.</p>

<p><code>file</code> is the actual type (using e.g. <code>file('myfile.txt')</code> is calling its constructor). <code>open</code> is a factory function that will return a file object.</p>

<p>In python 3.0 <code>file</code> is going to move from being a built-in to being implemented by multiple classes in the <code>io</code> library (somewhat similar to Java with buffered readers, etc.)</p>
"
211660,"<p>Don't make this more complex than it needs to be.  The big, independent databases have complex setup and configuration requirements.  SQLite is just a file you access with SQL, it's much simpler.</p>

<p>Do the following.</p>

<ol>
<li><p>Add a table to your database for ""Components"" or ""Versions"" or ""Configuration"" or ""Release"" or something administrative like that.  </p>

<p>CREATE TABLE REVISION(
    RELEASE_NUMBER CHAR(20)
);</p></li>
<li><p>In your application, connect to your database normally.</p></li>
<li>Execute a simple query against the revision table.  Here's what can happen.
<ul>
<li>The query fails to execute: your database doesn't exist, so execute a series of CREATE statements to build it.</li>
<li>The query succeeds but returns no rows or the release number is lower than expected: your database exists, but is out of date.  You need to migrate from that release to the current release.  Hopefully, you have a sequence of DROP, CREATE and ALTER statements to do this.</li>
<li>The query succeeds, and the release number is the expected value.  Do nothing more, your database is configured correctly.</li>
</ul></li>
</ol>
"
238170,"<p>First of all, please note that the ""pattern matching"" of functional languages and the assignment to tuples you mention are not really that similar. In functional languages the patterns are used to give partial definitions of a function. So <code>f (x : s) = e</code> does not mean take the head and tail of the argument of <code>f</code> and return <code>e</code> using them, but it means that <em>if</em> the argument of <code>f</code> is of the form <code>x : s</code> (for some <code>x</code> and <code>s</code>), <em>then</em> <code>f (x : s)</code> is equal to <code>e</code>.</p>

<p>The assignment of python is more like a multiple assignment (I suspect that was its original intention). So you write, for example, <code>x, y = y, x</code> to swap the values in <code>x</code> and <code>y</code> without needing a temporary variable (as you would with a simple assignment statement). This has little to do with pattern matching as it is basically a shorthand for the ""simultaneous"" execution of <code>x = y</code> and <code>y = x</code>. Although python allows arbitrary sequences instead of comma-separated lists, I would not suggest calling this pattern matching. With pattern matching you check whether or not something matches a pattern; in the python assignment you should ensure that the sequences on both sides are the same.</p>

<p>To do what you seem to want you would usually (also in functional languages) use either a auxiliary function (as mentioned by others) or something similar to <code>let</code> or <code>where</code> constructs (which you can regard as using anonymous functions). For example:</p>

<pre><code>(head, tail) = (x[0], x[1:]) where x = my_func()
</code></pre>

<p>Or, in actual python:</p>

<pre><code>(head, tail) = (lambda x: (x[0], x[1:]))(my_func())
</code></pre>

<p>Note that this is essentially the same as the solutions given by others with an auxiliary function except that this is the one-liner you wanted. It is, however, not necessarily better than a separate function.</p>

<p>(Sorry if my answer is a bit over the top. I just think it's important to make the distinction clear.)</p>
"
259591,"<p>We've used IronPython to build our flagship spreadsheet application (40kloc production code - and it's Python, which IMO means loc per feature is low) at <a href=""http://www.resolversystems.com/"">Resolver Systems</a>, so I'd definitely say it's ready for production use of complex apps.</p>

<p>There are two ways in which this might not be a useful answer to you :-)</p>

<ol>
<li>We're using IronPython, not the more usual CPython.  This gives us the huge advantage of being able to use .NET class libraries.  I may be setting myself up for flaming here, but I would say that I've never really seen a CPython application that looked ""professional"" - so having access to the WinForms widget set was a huge win for us.  IronPython also gives us the advantage of being able to easily drop into C# if we need a performance boost.  (Though to be honest we have <em>never</em> needed to do that.  All of our performance problems to date have been because we chose dumb algorithms rather than because the language was slow.)  Using C# from IP is much easier than writing a C Extension for CPython.  </li>
<li>We're an Extreme Programming shop, so we write tests before we write code.  I would not write production code in a dynamic language without writing the tests first; the lack of a compile step needs to be covered by something, and as other people have pointed out, refactoring without it can be tough.  (Greg Hewgill's answer suggests he's had the same problem.  On the other hand, I don't think I would write - or especially refactor - production code in <em>any</em> language these days without writing the tests first - but YMMV.)</li>
</ol>

<p>Re: the IDE - we've been pretty much fine with each person using their favourite text editor; if you prefer something a bit more heavyweight then <a href=""http://www.wingware.com/products"">WingIDE</a> is pretty well-regarded.</p>
"
209670,"<ul>
<li>If you want to use Python as a shell, why not have a look at <a href=""http://ipython.org/"">IPython</a> ? It is also good to learn interactively the language.</li>
<li>If you do a lot of text manipulation, and if you use Vim as a text editor, you can also directly write plugins for Vim in python. just type "":help python"" in Vim and follow the instructions or have a look at this <a href=""http://www.tummy.com/Community/Presentations/vimpython-20070225/vim.html"">presentation</a>. It is so easy and powerfull to write functions that you will use directly in your editor!</li>
</ul>
"
61918,"<p><a href=""http://books.google.com/books?id=vpTAq4dnmuAC&amp;pg=RA1-PA479&amp;lpg=RA1-PA479&amp;dq=Python+len+big+O&amp;source=web&amp;ots=AOM6A1K9Fy&amp;sig=iQo8mV6Xf9KdzuNSa-Jkr8wDEuw&amp;hl=en&amp;sa=X&amp;oi=book_result&amp;resnum=4&amp;ct=result""><code>len()</code> is an O(1) operation</a> for Python lists, strings, dicts, and sets. Python internally keeps track of the number of elements in these containers.</p>

<p>JavaScript <a href=""http://www.isolani.co.uk/blog/javascript/TruthyFalsyAndTypeCasting"">has a similar notion of truthy/falsy</a>.</p>
"
342740,"<p>Honestly, no.  The Windows API is an 800 pound monster covered with hair.  <a href=""http://www.charlespetzold.com/faq.html"" rel=""nofollow"">Charlie Petzold's 15 pound book</a> was the canonical reference once upon a time.</p>

<p>That said, the <a href=""http://python.net/crew/mhammond/win32/"" rel=""nofollow"">Python for Windows</a> folks have some good material.  Microsoft has the <a href=""http://msdn.microsoft.com/en-us/library/aa383749(VS.85).aspx"" rel=""nofollow"">whole API online</a>, including some sample code and such.  And the <a href=""http://en.wikipedia.org/wiki/Win32"" rel=""nofollow"">Wikipedia article</a> is a good overview.</p>
"
56269,"<p>Another way is using the <a href=""http://codespeak.net/lxml/tutorial.html#the-e-factory"" rel=""nofollow"">E Factory</a> builder from lxml (available in <a href=""http://effbot.org/zone/element-builder.htm"" rel=""nofollow"">Elementtree</a> too)</p>

<pre><code>&gt;&gt;&gt; from lxml import etree

&gt;&gt;&gt; from lxml.builder import E

&gt;&gt;&gt; def CLASS(*args): # class is a reserved word in Python
...     return {""class"":' '.join(args)}

&gt;&gt;&gt; html = page = (
...   E.html(       # create an Element called ""html""
...     E.head(
...       E.title(""This is a sample document"")
...     ),
...     E.body(
...       E.h1(""Hello!"", CLASS(""title"")),
...       E.p(""This is a paragraph with "", E.b(""bold""), "" text in it!""),
...       E.p(""This is another paragraph, with a"", ""\n      "",
...         E.a(""link"", href=""http://www.python.org""), "".""),
...       E.p(""Here are some reserved characters: &lt;spam&amp;egg&gt;.""),
...       etree.XML(""&lt;p&gt;And finally an embedded XHTML fragment.&lt;/p&gt;""),
...     )
...   )
... )

&gt;&gt;&gt; print(etree.tostring(page, pretty_print=True))
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;This is a sample document&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1 class=""title""&gt;Hello!&lt;/h1&gt;
    &lt;p&gt;This is a paragraph with &lt;b&gt;bold&lt;/b&gt; text in it!&lt;/p&gt;
    &lt;p&gt;This is another paragraph, with a
      &lt;a href=""http://www.python.org""&gt;link&lt;/a&gt;.&lt;/p&gt;
    &lt;p&gt;Here are some reservered characters: &amp;lt;spam&amp;amp;egg&amp;gt;.&lt;/p&gt;
    &lt;p&gt;And finally an embedded XHTML fragment.&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
"
221380,"<p>The copyright symbol in ASCII is spelled <code>(c)</code>  or ""<code>Copyright</code>"".</p>

<p>See circular 61, <a href=""http://www.copyright.gov/circs/circ61.pdf"">Copyright Registration for Computer Programs</a>. </p>

<p>While it's true that the legal formalism (see Circular 1, <a href=""http://www.copyright.gov/circs/circ01.pdf"">Copyright Basics</a>) is </p>

<blockquote>
  <p>The symbol Â© (the letter C in a
  circle), or the word âCopyright,â or
  the abbreviation âCopr.â; and...</p>
</blockquote>

<p>And it's also true that</p>

<blockquote>
  <p>To guarantee protection for a
  copyrighted work in all UCC member
  countries, the notice must consist of
  the symbol Â© (the word âCopyrightâ or
  the abbreviation is not acceptable)</p>
</blockquote>

<p>You can dig through circular <a href=""http://www.copyright.gov/circs/circ03.html"">3</a> and <a href=""http://www.copyright.gov/circs/circ38a.html"">38a</a>.</p>

<p>This has, however, already been tested in court.  It isn't an interesting issue.  If you do a search for ""(c) acceptable for c-in-a-circle"", you'll find that lawyers all agree that (c) is an acceptable substitute.  See Perle and Williams.  See Scott on Information Technology Law.</p>
"
261665,"<pre><code>l = [
('a', 1),
('a', 2),
('a', 3),
('b', 1),
('b', 2),
('c', 1),
]

d = {}
for x, y in l:
    d.setdefault(x, []).append(y)
print d
</code></pre>

<p>produces:</p>

<pre><code>{'a': [1, 2, 3], 'c': [1], 'b': [1, 2]}
</code></pre>
"
295206,"<p>Just to further complicate things, you are not guaranteed to get a valid filename just by removing invalid characters.  Since allowed characters differ on different filenames, a conservative approach could end up turning a valid name into an invalid one.  You may want to add special handling for the cases where:</p>

<ul>
<li><p>The string is all invalid characters (leaving you with an empty string)</p></li>
<li><p>You end up with a string with a special meaning, eg ""."" or ""..""</p></li>
<li><p>On windows, <a href=""http://msdn.microsoft.com/en-us/library/aa365247.aspx"">certain device names</a> are reserved.  For instance, you can't create a file named ""nul"", ""nul.txt"" (or nul.anything in fact)  The reserved names are:</p>

<p>CON, PRN, AUX, NUL, COM1, COM2, COM3, COM4, COM5, COM6, COM7, COM8, COM9, LPT1, LPT2,  LPT3, LPT4, LPT5, LPT6, LPT7, LPT8, and LPT9</p></li>
</ul>

<p>You can probably work around these issues by prepending some string to the filenames that can never result in one of these cases, and stripping invalid characters.</p>
"
285086,"<p>Usually, we define classes for this.</p>

<pre><code>class XClass( object ):
   def __init__( self ):
       self.myAttr= None

x= XClass()
x.myAttr= 'magic'
x.myAttr
</code></pre>

<p>However, you can, to an extent, do this with the <code>setattr</code> and <code>getattr</code> built-in functions.  However, they don't work on instances of <code>object</code> directly.  </p>

<pre><code>&gt;&gt;&gt; a= object()
&gt;&gt;&gt; setattr( a, 'hi', 'mom' )
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
AttributeError: 'object' object has no attribute 'hi'
</code></pre>

<p>They do, however, work on all kinds of simple classes.</p>

<pre><code>class YClass( object ):
    pass

y= YClass()
setattr( y, 'myAttr', 'magic' )
y.myAttr
</code></pre>
"
265731,"<p>The following is from the <a href=""http://www.python.org/doc/2.5.2/api/threads.html"">official Python/C API Reference Manual</a>:</p>

<blockquote>
  <p>The Python interpreter is not fully
  thread safe. In order to support
  multi-threaded Python programs,
  there's a global lock that must be
  held by the current thread before it
  can safely access Python objects.
  Without the lock, even the simplest
  operations could cause problems in a
  multi-threaded program: for example,
  when two threads simultaneously
  increment the reference count of the
  same object, the reference count could
  end up being incremented only once
  instead of twice. </p>
  
  <p>Therefore, the rule exists that only
  the thread that has acquired the
  global interpreter lock may operate on
  Python objects or call Python/C API
  functions. In order to support
  multi-threaded Python programs, the
  interpreter regularly releases and
  reacquires the lock -- by default,
  every 100 bytecode instructions (this
  can be changed with
  sys.setcheckinterval()). The lock is
  also released and reacquired around
  potentially blocking I/O operations
  like reading or writing a file, so
  that other threads can run while the
  thread that requests the I/O is
  waiting for the I/O operation to
  complete.</p>
</blockquote>

<p>I think it sums up the issue pretty well.</p>
"
295564,"<p>You'd be a little happier with the following.</p>

<pre><code>import subprocess

awk_sort = subprocess.Popen( ""awk -f script.awk | sort &gt; outfile.txt"",
    stdin=subprocess.PIPE, shell=True )
awk_sort.communicate( b""input data\n"" )
</code></pre>

<p>Delegate part of the work to the shell.  Let it connect two processes with a pipeline.</p>

<p>You'd be a lot happier rewriting 'script.awk' into Python, eliminating awk and the pipeline.</p>

<p><strong>Edit</strong>.  Some of the reasons for suggesting that awk isn't helping.</p>

<p>[There are too many reasons to respond via comments.]</p>

<ol>
<li><p>Awk is adding a step of no significant value.  There's nothing unique about awk's processing that Python doesn't handle.</p></li>
<li><p>The pipelining from awk to sort, for large sets of data, may improve elapsed processing time.  For short sets of data, it has no significant benefit.  A quick measurement of <code>awk &gt;file ; sort file</code> and <code>awk | sort</code> will reveal of concurrency helps.  With sort, it rarely helps because sort is not a once-through filter.</p></li>
<li><p>The simplicity of ""Python to sort"" processing (instead of ""Python to awk to sort"") prevents the exact kind of questions being asked here.</p></li>
<li><p>Python -- while wordier than awk -- is also explicit where awk has certain implicit rules that are opaque to newbies, and confusing to non-specialists.</p></li>
<li><p>Awk (like the shell script itself) adds Yet Another Programming language.  If all of this can be done in one language (Python), eliminating the shell and the awk programming eliminates two programming languages, allowing someone to focus on the value-producing parts of the task.</p></li>
</ol>

<p>Bottom line: awk can't add significant value.  In this case, awk is a net cost; it added enough complexity that it was necessary to ask this question.  Removing awk will be a net gain.</p>

<p><strong>Sidebar</strong> Why building a pipeline (<code>a | b</code>) is so hard.</p>

<p>When the shell is confronted with <code>a | b</code> it has to do the following.</p>

<ol>
<li><p>Fork a child process of the original shell.  This will eventually become b.</p></li>
<li><p>Build an os pipe.  (not a Python subprocess.PIPE) but call <code>os.pipe()</code> which returns two new file descriptors that are connected via  common buffer.  At this point the process has stdin, stdout, stderr from its parent, plus a file that will be ""a's stdout"" and ""b's stdin"".  </p></li>
<li><p>Fork a child.  The child replaces its stdout with the new a's stdout.  Exec the <code>a</code> process.</p></li>
<li><p>The b child closes replaces its stdin with the new b's stdin.  Exec the <code>b</code> process.</p></li>
<li><p>The b child waits for a to complete.  </p></li>
<li><p>The parent is waiting for b to complete.</p></li>
</ol>

<p>I think that the above can be used recursively to spawn <code>a | b | c</code>, but you have to implicitly parenthesize long pipelines, treating them as if they're <code>a | (b | c)</code>.</p>

<p>Since Python has <code>os.pipe()</code>, <code>os.exec()</code> and <code>os.fork()</code>, and you can replace <code>sys.stdin</code> and <code>sys.stdout</code>, there's a way to do the above in pure Python.  Indeed, you may be able to work out some shortcuts using <code>os.pipe()</code> and <code>subprocess.Popen</code>.</p>

<p>However, it's easier to delegate that operation to the shell.</p>
"
244654,"<p>Try <code>destination.__dict__.update(source.__dict__)</code>.</p>
"
89237,"<pre><code>import os
os.system(""your command"")
</code></pre>

<p>Note that this is dangerous, since the command isn't cleaned. I leave it up to you to google for the relevant docs on the 'os' and 'sys' modules. There are a bunch of functions (exec* , spawn*) that will do similar things.</p>
"
250306,"<p>Taken from </p>

<p><a href=""http://docs.python.org/3.3/howto/regex.html""><em>Regular Expression HOWTO</em></a></p>

<blockquote>
  <p>span() returns both start and end indexes in a single tuple. Since the
  match method only checks if the RE matches at the start of a string,
  start() will always be zero. However, the search method of RegexObject
  instances scans through the string, so the match may not start at zero
  in that case.</p>
</blockquote>

<pre><code>&gt;&gt;&gt; p = re.compile('[a-z]+')
&gt;&gt;&gt; print p.match('::: message')
None
&gt;&gt;&gt; m = p.search('::: message') ; print m
&lt;re.MatchObject instance at 80c9650&gt;
&gt;&gt;&gt; m.group()
'message'
&gt;&gt;&gt; m.span()
(4, 11)
</code></pre>

<p>Combine that with:</p>

<p>In Python 2.2, the finditer() method is also available, returning a sequence of MatchObject instances as an iterator.</p>

<pre><code>&gt;&gt;&gt; p = re.compile( ... )
&gt;&gt;&gt; iterator = p.finditer('12 drummers drumming, 11 ... 10 ...')
&gt;&gt;&gt; iterator
&lt;callable-iterator object at 0x401833ac&gt;
&gt;&gt;&gt; for match in iterator:
...     print match.span()
...
(0, 2)
(22, 24)
(29, 31)
</code></pre>

<p>you should be able to do something on the order of</p>

<pre><code>for match in re.finditer(r'[a-z]', 'a1b2c3d4'):
   print match.span()
</code></pre>
"
260352,"<pre><code># Tail
from __future__ import with_statement

find_str = ""FIREFOX""                    # String to find
fname = ""g:/autoIt/ActiveWin.log_2""     # File to check

with open(fname, ""r"") as f:
    f.seek (0, 2)           # Seek @ EOF
    fsize = f.tell()        # Get Size
    f.seek (max (fsize-1024, 0), 0) # Set pos @ last n chars
    lines = f.readlines()       # Read to end

lines = lines[-10:]    # Get last 10 lines

# This returns True if any line is exactly find_str + ""\n""
print find_str + ""\n"" in lines

# If you're searching for a substring
for line in lines:
    if find_str in line:
        print True
        break
</code></pre>
"
55424,"<p>For this particular case, BeautifulSoup is harder to write than a regex, but it is much more robust... I'm just contributing with the BeautifulSoup example, given that you already know which regexp to use :-)</p>

<pre><code>from BeautifulSoup import BeautifulSoup

#Or retrieve it from the web, etc. 
html_data = open('/yourwebsite/page.html','r').read()

#Create the soup object from the HTML data
soup = BeautifulSoup(html_data)
fooId = soup.find('input',name='fooId',type='hidden') #Find the proper tag
value = fooId.attrs[2][1] #The value of the third attribute of the desired tag 
                          #or index it directly via fooId['value']
</code></pre>
"
53322,"<pre><code>def isbound(method):
    return method.im_self is not None

def instance(bounded_method):
    return bounded_method.im_self
</code></pre>

<p><a href=""http://docs.python.org/ref/types.html"">User-defined methods:</a></p>

<blockquote>
  <p>When a user-defined method object is
  created by retrieving a user-defined
  function object from a class, its
  <code>im_self</code> attribute is <code>None</code> and the
  method object is said to be unbound.
  When one is created by retrieving a
  user-defined function object from a
  class via one of its instances, its
  <code>im_self</code> attribute is the instance, and
  the method object is said to be bound.
  In either case, the new method's
  <code>im_class</code> attribute is the class from
  which the retrieval takes place, and
  its <code>im_func</code> attribute is the original
  function object.</p>
</blockquote>

<p>In Python <a href=""http://docs.python.org/dev/whatsnew/2.6.html"">2.6 and 3.0</a>:</p>

<blockquote>
  <p>Instance method objects have new
  attributes for the object and function
  comprising the method; the new synonym
  for <code>im_self</code> is <code>__self__</code>, and <code>im_func</code>
  is also available as <code>__func__</code>. The old
  names are still supported in Python
  2.6, but are gone in 3.0.</p>
</blockquote>
"
77297,"<p>There's no point in attempting to convince your employer to port from PHP to Python, especially not for an existing system, which is what I think you implied in your question.</p>

<p>The reason for this is that you already have a (presumably) working system, with an existing investment of time and effort (and experience). To discard this in favour of a trivial performance gain (not that I'm claiming there would be one) would be foolish, and no manager worth his salt ought to endorse it.</p>

<p>It may also create a problem with maintainability, depending on who else has to work with the system, and their experience with Python.</p>
"
223566,"<p>In Python,</p>

<pre><code>className = MyClass
newObject = className()
</code></pre>

<p>The first line makes the variable <code>className</code> refer to the same thing as <code>MyClass</code>. Then the next line calls the <code>MyClass</code> constructor through the <code>className</code> variable.</p>

<p>As a concrete example:</p>

<pre><code>&gt;&gt;&gt; className = list
&gt;&gt;&gt; newObject = className()
&gt;&gt;&gt; newObject
[]
</code></pre>

<p>(In Python, <code>list</code> is the constructor for the <code>list</code> class.)</p>

<p>The difference is that in PHP, you represent the name of the class you want to refer to as a string, while in Python you can reference the same class directly. If you <em>must</em> use a string (for example if the name of the class is created dynamically), then you will need to use other techniques.</p>
"
169112,"<p>The answer for a decorator has been given; it works at the function definition stage as requested.</p>

<p>With Python 2.5+, you also have an option to do that at the function <em>call</em> stage using a context manager:</p>

<pre><code>from __future__ import with_statement # needed for 2.5 â¤ Python &lt; 2.6
import contextlib, os

@contextlib.contextmanager
def remember_cwd():
    curdir= os.getcwd()
    try: yield
    finally: os.chdir(curdir)
</code></pre>

<p>which can be used if needed at the function call time as:</p>

<pre><code>print ""getcwd before:"", os.getcwd()
with remember_cwd():
    walk_around_the_filesystem()
print ""getcwd after:"", os.getcwd()
</code></pre>

<p>It's a nice option to have.</p>

<p>EDIT: I added error handling as suggested by codeape. Since my answer has been voted up, it's fair to offer a complete answer, all other issues aside.</p>
"
183206,"<p><em>Someone</em> has to champion use of vertical whitespace here! :)</p>

<pre><code>if (     cond1 == val1
     and cond2 == val2
     and cond3 == val3
   ):
    do_stuff()
</code></pre>

<p>This makes each condition clearly visible. It also allows cleaner expression of more complex conditions:</p>

<pre><code>if (    cond1 == val1
     or 
        (     cond2_1 == val2_1
          and cond2_2 &gt;= val2_2
          and cond2_3 != bad2_3
        )
   ):
    do_more_stuff()
</code></pre>

<p>Yes, we're trading off a bit of vertical real estate for clarity. Well worth it IMO.</p>
"
342484,"<p>Always the second way - you never know what different Python installations will have installed. <code>Template</code> is a specific case where it matters less, but when you test for the capability instead of the versioning you're always more robust.</p>

<p>That's how I make <a href=""http://www.testoob.org"">Testoob</a> support Python 2.2 - 2.6: I try to import a module in different ways until it works. It's also relevant to 3rd-party libraries.</p>

<p>Here's an extreme case - supporting different options for ElementTree to appear:</p>

<pre><code>try: import elementtree.ElementTree as ET
except ImportError:
    try: import cElementTree as ET
    except ImportError:
        try: import lxml.etree as ET
        except ImportError:
            import xml.etree.ElementTree as ET # Python 2.5 and up
</code></pre>
"
60753,"<p>Sure; just start two different servers on two different ports in two different threads that each use the same handler.  Here's a complete, working example that I just wrote and tested.  If you run this code then you'll be able to get a Hello World webpage at both <a href=""http://localhost:1111/"">http://localhost:1111/</a> and <a href=""http://localhost:2222/"">http://localhost:2222/</a></p>

<pre><code>from threading import Thread
from SocketServer import ThreadingMixIn
from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler

class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header(""Content-type"", ""text/plain"")
        self.end_headers()
        self.wfile.write(""Hello World!"")

class ThreadingHTTPServer(ThreadingMixIn, HTTPServer):
    pass

def serve_on_port(port):
    server = ThreadingHTTPServer((""localhost"",port), Handler)
    server.serve_forever()

Thread(target=serve_on_port, args=[1111]).start()
serve_on_port(2222)
</code></pre>
"
38524,"<p>Why not throw an exception if the operation wasn't successful?  Personally, I tend to be of the opinion that if you need to return more than one value from a function, you should reconsider if you're doing things the right way or use an object.</p>

<p>But more directly to the point, if you throw an exception, you're forcing them to deal with the problem.  If you try to return a value that indicates failure, it's very well possible somebody could not check the value and end up with some potentially hard to debug errors.</p>
"
239882,"<p>Obviously James is correct, but if you wanted to log exceptions in a datastore there are a few opensource solutions already available:</p>

<p>1) CrashLog is a good choice: <a href=""http://code.google.com/p/django-crashlog/"">http://code.google.com/p/django-crashlog/</a></p>

<p>2) Db-Log is a good choice as well: <a href=""http://code.google.com/p/django-db-log/"">http://code.google.com/p/django-db-log/</a></p>

<p>What is the difference between the two? Almost nothing that I can see, so either one will suffice.</p>

<p>I've used both and the work well.</p>
"
311675,"<p>Where I work, our coding guidelines would have us do something like this:</p>

<pre><code>all_posts_uuid_query = self.db.query(schema.allPostsUuid)
all_posts_uuid_list = all_posts_uuid_query.execute(timeout=20)
all_uuid_list = [
    x.id 
    for x in all_posts_uuid_list 
    if (
        x.type == ""post"" 
        and 
        not x.deleted  # &lt;-- if you don't care about NULLs / None
    )
]
</code></pre>
"
161385,"<p>There is actually an inverse function, but for some bizarre reason, it's in the <a href=""https://docs.python.org/2/library/calendar.html"" rel=""nofollow"">calendar</a> module: calendar.timegm().  I listed the functions in this <a href=""http://stackoverflow.com/questions/79797/how-do-i-convert-local-time-to-utc-in-python#79913"">answer</a>.</p>
"
225177,"<p>You can use the formatdate() function from the Python standard email module:</p>

<pre><code>from email.utils import formatdate
print formatdate(timeval=None, localtime=False, usegmt=True)
</code></pre>

<p>Gives the current time in the desired format:</p>

<pre><code>Wed, 22 Oct 2008 10:32:33 GMT
</code></pre>

<p>In fact, this function does it ""by hand"" without using strftime()</p>
"
231216,"<p>Using the <code>-u</code> command-line switch works, but it is a little bit clumsy. It would mean that the program would potentially behave incorrectly if the user invoked the script without the <code>-u</code> option.  I usually use a custom <code>stdout</code>, like this:</p>

<pre><code>class flushfile(file):
  def __init__(self, f):
    self.f = f

  def write(self, x):
    self.f.write(x)
    self.f.flush()

import sys
sys.stdout = flushfile(sys.stdout)
</code></pre>

<p>... Now all your <code>print</code> calls (which use <code>sys.stdout</code> implicitly), will be automatically <code>flush</code>ed.</p>
"
117047,"<p>Try this:</p>

<pre><code>import os;
print os.environ.get( ""USERNAME"" )
</code></pre>

<p>That should do the job.</p>
"
321240,"<p>You can use a metaclass:</p>

<pre><code>class NonOverridable(type):
    def __new__(self, name, bases, dct):
        if bases and ""roo"" in dct:
            raise SyntaxError, ""Overriding roo is not allowed""
        return type.__new__(self, name, bases, dct)

class foo:
    __metaclass__=NonOverridable
    ...
</code></pre>

<p>The metatype's <strong>new</strong> is called whenever a subclass is created; this will cause an error in the case you present. It will accept a definition of roo only if there are no base classes.</p>

<p>You can make the approach more fancy by using annotations to declare which methods are final; you then need to inspect all bases and compute all final methods, to see whether any of them is overridden.</p>

<p>This still doesn't prevent somebody monkey-patching a method into a class after it is defined; you can try to catch these by using a custom dictionary as the classes' dictionary (which might not work in all Python versions, as classes might require the class dictionary to be of the exact dict type).</p>
"
141336,"<p>Filter the list using os.path.isdir to detect directories.</p>

<pre><code>filter(os.path.isdir, os.listdir(os.getcwd()))
</code></pre>
"
102674,"<p>Buffering. When it is efficient to fetch data in large chunks, but process it in small chunks, then a generator might help:</p>

<pre><code>def bufferedFetch():
  while True:
     buffer = getBigChunkOfData()
     # insert some code to break on 'end of data'
     for i in buffer:    
          yield i
</code></pre>

<p>The above lets you easily separate buffering from processing. The consumer function can now just get the values one by one without worrying about buffering.</p>
"
173055,"<p>Rather than just punting to C, I'd suggest:</p>

<p>Make your code count. Do more with fewer executions of lines:</p>

<ul>
<li>Change the algorithm to a faster one. It doesn't need to be fancy to be faster in many cases.</li>
<li>Use python primitives that happens to be written in C. Some things will force an interpreter dispatch where some wont. The latter is preferable</li>
<li>Beware of code that first constructs a big data structure followed by its consumation. Think the difference between range and xrange. In general it is often worth thinking about memory usage of the program. Using generators can sometimes bring O(n) memory use down to O(1).</li>
<li>Python is generally non-optimizing. Hoist invariant code out of loops, eliminate common subexpressions where possible in tight loops.</li>
<li>If something is expensive, then precompute or memoize it. Regular expressions can be compiled for instance.</li>
<li>Need to crunch numbers? You might want to check <code>numpy</code> out.</li>
<li>Many python programs are slow because they are bound by disk I/O or database access. Make sure you have something worthwhile to do while you wait on the data to arrive rather than just blocking. A weapon could be something like the <code>Twisted</code> framework.</li>
<li>Note that many crucial data-processing libraries have C-versions, be it XML, JSON or whatnot. They are often considerably faster than the Python interpreter.</li>
</ul>

<p>If all of the above fails for profiled and measured code, then begin thinking about the C-rewrite path.</p>
"
295503,"<p>Did you give <a href=""https://pypi.python.org/pypi/mox"" rel=""nofollow"">Mox</a> a look? It should do everything you need. Here is a simple interactive session illustrating the solution you need:</p>

<pre><code>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; # check that it works
&gt;&gt;&gt; urllib.urlopen('http://www.google.com/')
&lt;addinfourl at 3082723820L ...&gt;
&gt;&gt;&gt; # check what happens when it doesn't
&gt;&gt;&gt; urllib.urlopen('http://hopefully.doesnotexist.com/')
#-- snip --
IOError: [Errno socket error] (-2, 'Name or service not known')

&gt;&gt;&gt; # OK, let's mock it up
&gt;&gt;&gt; import mox
&gt;&gt;&gt; m = mox.Mox()
&gt;&gt;&gt; m.StubOutWithMock(urllib, 'urlopen')
&gt;&gt;&gt; # We can be verbose if we want to :)
&gt;&gt;&gt; urllib.urlopen(mox.IgnoreArg()).AndRaise(
...   IOError('socket error', (-2, 'Name or service not known')))

&gt;&gt;&gt; # Let's check if it works
&gt;&gt;&gt; m.ReplayAll()
&gt;&gt;&gt; urllib.urlopen('http://www.google.com/')
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
  File ""/usr/lib/python2.5/site-packages/mox.py"", line 568, in __call__
    raise expected_method._exception
IOError: [Errno socket error] (-2, 'Name or service not known')

&gt;&gt;&gt; # yay! now unset everything
&gt;&gt;&gt; m.UnsetStubs()
&gt;&gt;&gt; m.VerifyAll()
&gt;&gt;&gt; # and check that it still works
&gt;&gt;&gt; urllib.urlopen('http://www.google.com/')
&lt;addinfourl at 3076773548L ...&gt;
</code></pre>
"
147541,"<p>Please reconsider. The only thing worse than <code>import *</code> is <em>magic</em> <code>import *</code>.</p>

<p>If you really want to:</p>

<pre><code>m = __import__ (S)
try:
    attrlist = m.__all__
except AttributeError:
    attrlist = dir (m)
for attr in attrlist:
    globals()[attr] = getattr (m, attr)
</code></pre>
"
297243,"<p>The problem is the namespaces.  When parsed as XML, the img tag is in the <a href=""http://www.w3.org/1999/xhtml"">http://www.w3.org/1999/xhtml</a> namespace since that is the default namespace for the  element.  You are asking for the img tag in no namespace.</p>

<p>Try this:</p>

<pre><code>&gt;&gt;&gt; tree.getroot().xpath(
...     ""//xhtml:img"", 
...     namespaces={'xhtml':'http://www.w3.org/1999/xhtml'}
...     )
[&lt;Element {http://www.w3.org/1999/xhtml}img at 11a29e0&gt;]
</code></pre>
"
159778,"<p>There is <a href=""http://www.python.org/dev/peps/pep-0008/"">PEP 8</a>, as other answers show, but PEP 8 is only the styleguide for the standard library, and it's only taken as gospel therein. One of the most frequent deviations of PEP 8 for other pieces of code is the variable naming, specifically for methods. There is no single predominate style, although considering the volume of code that uses mixedCase, if one were to make a strict census one would probably end up with a version of PEP 8 with mixedCase. There is little other deviation from PEP 8 that is quite as common.</p>
"
107973,"<pre><code>def M_add_class_attribs(attribs):
    def foo(name, bases, dict_):
        for v, k in attribs:
            dict_[k] = v
        return type(name, bases, dict_)
    return foo

def enum(*names):
    class Foo(object):
        __metaclass__ = M_add_class_attribs(enumerate(names))
        def __setattr__(self, name, value):  # this makes it read-only
            raise NotImplementedError
    return Foo()
</code></pre>

<p>Use it like this:  </p>

<pre><code>Animal = enum('DOG', 'CAT')
Animal.DOG # returns 0
Animal.CAT # returns 1
Animal.DOG = 2 # raises NotImplementedError
</code></pre>

<p>if you just want unique symbols and don't care about the values, replace this line:  </p>

<pre><code>__metaclass__ = M_add_class_attribs(enumerate(names))
</code></pre>

<p>with this:</p>

<pre><code>__metaclass__ = M_add_class_attribs((object(), name) for name in names)
</code></pre>
"
192207,"<p><em>dir</em> has been mentioned, but that'll only give you the attributes' names.  If you want their values as well try __dict__.</p>

<pre><code>class O:
   def __init__ (self):
      self.value = 3

o = O()
</code></pre>

<p>>>> o.__dict__</p>

<p>{'value': 3}</p>
"
212130,"<p>Excellent question. I've tackled this problem as well, and while I agree that ""factories"" (class-method constructors) are a good method, I would like to suggest another, which I've also found very useful:</p>

<p>Here's a sample (this is a <code>read</code> method and not a constructor, but the idea is the same):</p>

<pre><code>def read(self, str=None, filename=None, addr=0):
    """""" Read binary data and return a store object. The data
        store is also saved in the interal 'data' attribute.

        The data can either be taken from a string (str 
        argument) or a file (provide a filename, which will 
        be read in binary mode). If both are provided, the str 
        will be used. If neither is provided, an ArgumentError 
        is raised.
    """"""
    if str is None:
        if filename is None:
            raise ArgumentError('Please supply a string or a filename')

        file = open(filename, 'rb')
        str = file.read()
        file.close()
    ...
    ... # rest of code
</code></pre>

<p>The key idea is here is using Python's excellent support for named arguments to implement this. Now, if I want to read the data from a file, I say:</p>

<pre><code>obj.read(filename=""blob.txt"")
</code></pre>

<p>And to read it from a string, I say:</p>

<pre><code>obj.read(str=""\x34\x55"")
</code></pre>

<p>This way the user has just a single method to call. Handling it inside, as you saw, is not overly complex</p>
"
70968,"<p>Tuples, being immutable, are more memory efficient; lists, for efficiency, overallocate memory in order to allow appends without constant <code>realloc</code>s. So, if you want to iterate through a constant sequence of values in your code (eg <code>for direction in 'up', 'right', 'down', 'left':</code>), tuples are preferred, since such tuples are pre-calculated in compile time.</p>

<p>Access speeds should be the same (they are both stored as contiguous arrays in the memory).</p>

<p>But, <code>alist.append(item)</code> is much preferred to <code>atuple+= (item,)</code> when you deal with mutable data. Remember, tuples are intended to be treated as records without field names.</p>
"
243981,"<p>If you just plan on doing Python dev, I'd just go with <a href=""http://download.eclipse.org/eclipse/downloads/"" rel=""nofollow"">Platform Runtime Binary</a>.</p>

<p>After that, I'd follow the instructions <a href=""http://pydev.org/download.html"" rel=""nofollow"">http://pydev.org/download.html</a> and <a href=""http://pydev.org/manual_101_root.html"" rel=""nofollow"">http://pydev.org/manual_101_root.html</a> to install PyDev.</p>

<p>I use the same setup for Python development.  I also have the RadRails plugin for Ruby on Rails development.</p>
"
327295,"<p>Some measurements. I took 10MB of free e-book text and computed trigram frequencies, producing a 24MB file. Storing it in different simple Python data structures took this much space in kB, measured as RSS from running ps, where d is a dict, keys and freqs are lists, and a,b,c,freq are the fields of a trigram record:</p>

<pre><code>295760     S. Lott's answer
237984     S. Lott's with keys interned before passing in
203172 [*] d[(a,b,c)] = int(freq)
203156     d[a][b][c] = int(freq)
189132     keys.append((a,b,c)); freqs.append(int(freq))
146132     d[intern(a),intern(b)][intern(c)] = int(freq)
145408     d[intern(a)][intern(b)][intern(c)] = int(freq)
 83888 [*] d[a+' '+b+' '+c] = int(freq)
 82776 [*] d[(intern(a),intern(b),intern(c))] = int(freq)
 68756     keys.append((intern(a),intern(b),intern(c))); freqs.append(int(freq))
 60320     keys.append(a+' '+b+' '+c); freqs.append(int(freq))
 50556     pair array
 48320     squeezed pair array
 33024     squeezed single array
</code></pre>

<p>The entries marked [*] have no efficient way to look up a pair (a,b); they're listed only because others have suggested them (or variants of them). (I was sort of irked into making this because the top-voted answers were not helpful, as the table shows.)</p>

<p>'Pair array' is the scheme below in my original answer (""I'd start with the array with keys
being the first two words...""), where the value table for each pair is
represented as a single string. 'Squeezed pair array' is the same,
leaving out the frequency values that are equal to 1 (the most common
case). 'Squeezed single array' is like squeezed pair array, but gloms key and value together as one string (with a separator character). The squeezed single array code:</p>

<pre><code>import collections

def build(file):
    pairs = collections.defaultdict(list)
    for line in file:  # N.B. file assumed to be already sorted
        a, b, c, freq = line.split()
        key = ' '.join((a, b))
        pairs[key].append(c + ':' + freq if freq != '1' else c)
    out = open('squeezedsinglearrayfile', 'w')
    for key in sorted(pairs.keys()):
        out.write('%s|%s\n' % (key, ' '.join(pairs[key])))

def load():
    return open('squeezedsinglearrayfile').readlines()

if __name__ == '__main__':
    build(open('freqs'))
</code></pre>

<p>I haven't written the code to look up values from this structure (use bisect, as mentioned below), or implemented the fancier compressed structures also described below.</p>

<p><strong>Original answer:</strong> A simple sorted array of strings, each string being a space-separated concatenation of words, searched using the bisect module, should be worth trying for a start. This saves space on pointers, etc. It still wastes space due to the repetition of words; there's a standard trick to strip out common prefixes, with another level of index to get them back, but that's rather more complex and slower. (The idea is to store successive chunks of the array in a compressed form that must be scanned sequentially, along with a random-access index to each chunk. Chunks are big enough to compress, but small enough for reasonable access time. The particular compression scheme applicable here: if successive entries are 'hello george' and 'hello world', make the second entry be '6world' instead. (6 being the length of the prefix in common.) Or maybe you could get away with using <a href=""http://www.python.org/doc/2.5.2/lib/module-zlib.html"">zlib</a>? Anyway, you can find out more in this vein by looking up dictionary structures used in full-text search.) So specifically, I'd start with the array with keys being the first two words, with a parallel array whose entries list the possible third words and their frequencies. It might still suck, though -- I think you may be out of luck as far as batteries-included memory-efficient options.</p>

<p>Also, binary tree structures are <em>not</em> recommended for memory efficiency here. E.g., <a href=""http://www.cdf.toronto.edu/~csc148h/fall/assignment3/bursttries.pdf"">this paper</a> tests a variety of data structures on a similar problem (unigrams instead of trigrams though) and finds a hashtable to beat all of the tree structures by that measure.</p>

<p>I should have mentioned, as someone else did, that the sorted array could be used just for the wordlist, not bigrams or trigrams; then for your 'real' data structure, whatever it is, you use integer keys instead of strings -- indices into the wordlist. (But this keeps you from exploiting common prefixes except in the wordlist itself. Maybe I shouldn't suggest this after all.)</p>
"
242506,"<p>This isn't the debugger, but probably just as useful(?)</p>

<p>I know I heard Guido mention this in a speech somewhere.</p>

<p>I just checked python -?, and if you use the -i command you can interact where your script stopped.</p>

<p>So given this script:</p>

<pre><code>testlist = [1,2,3,4,5, 0]

prev_i = None
for i in testlist:
    if not prev_i:
    	prev_i = i
    else:
    	result = prev_i/i
</code></pre>

<p>You can get this output!</p>

<pre><code>PS D:\&gt; python -i debugtest.py
Traceback (most recent call last):
  File ""debugtest.py"", line 10, in &lt;module&gt;
    result = prev_i/i
ZeroDivisionError: integer division or modulo by zero
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; prev_i
1
&gt;&gt;&gt; i
0
&gt;&gt;&gt;
</code></pre>

<p>To be honest I haven't used this, but I should be, seems very useful.</p>
"
240215,"<p>Actually, this is exactly what you would expect. Let's decompose what is happening here:</p>

<p>You write</p>

<pre><code>lst = [[1] * 4] * 3
</code></pre>

<p>This is equivalent to:</p>

<pre><code>lst1 = [1]*4
lst = [lst1]*3
</code></pre>

<p>This means <code>lst</code> is a list with 3 elements all pointing to <code>lst1</code>. This means the two following lines are equivalent:</p>

<pre><code>lst[0][0] = 5
lst1[0] = 5
</code></pre>

<p>As <code>lst[0]</code> is nothing but <code>lst1</code>.</p>

<p>To obtain the desired behavior, you can use list comprehension:</p>

<pre><code>lst = [ [1]*4 for n in xrange(3) ]
</code></pre>

<p>In this case, the expression is re-evaluated for each n, leading to a different list.</p>
"
166441,"<p>You are looking for:</p>

<pre><code>del L[:]
</code></pre>
"
150376,"<pre><code>import pdb; pdb.set_trace()
</code></pre>

<p>See <a href=""http://jjinux.blogspot.com/2007/08/python-coding-in-debugger-for-beginners.html"">Python: Coding in the Debugger for Beginners</a> for this and more helpful hints.</p>
"
33932,"<p>Using the <code>choices</code> parameter won't use the ENUM db type; it will just create a VARCHAR or INTEGER, depending on whether you use <code>choices</code> with a CharField or IntegerField.  Generally, this is just fine.  If it's important to you that the ENUM type is used at the database level, you have three options:</p>

<ol>
<li>Use ""./manage.py sql appname"" to see the SQL Django generates, manually modify it to use the ENUM type, and run it yourself.  If you create the table manually first, ""./manage.py syncdb"" won't mess with it.</li>
<li>If you don't want to do this manually every time you generate your DB, put some custom SQL in appname/sql/modelname.sql to perform the appropriate ALTER TABLE command.</li>
<li>Create a <a href=""http://docs.djangoproject.com/en/dev/howto/custom-model-fields/#howto-custom-model-fields"" rel=""nofollow"">custom field type</a> and define the db_type method appropriately.</li>
</ol>

<p>With any of these options, it would be your responsibility to deal with the implications for cross-database portability.  In option 2, you could use <a href=""http://www.djangoproject.com/documentation/model-api/#database-backend-specific-sql-data"" rel=""nofollow"">database-backend-specific custom SQL</a> to ensure your ALTER TABLE is only run on MySQL.  In option 3, your db_type method would need to check the database engine and set the db column type to a type that actually exists in that database.</p>

<p><strong>UPDATE</strong>: Since the migrations framework was added in Django 1.7, options 1 and 2 above are entirely obsolete. Option 3 was always the best option anyway. The new version of options 1/2 would involve a complex custom migration using <code>SeparateDatabaseAndState</code> -- but really you want option 3.</p>
"
328193,"<p>Here's how I'd do it:</p>

<pre><code>def distance(a,b):
    return sqrt((a.x - b.x)**2 + (a.y - b.y)**2)

def is_between(a,c,b):
    return distance(a,c) + distance(c,b) == distance(a,b)
</code></pre>
"
279970,"<p>As Tony said, this is really going to depend on your goals.  If you're ""tinkering"" to try to learn about OpenGL or 3D rendering in general that I would dispense with all pleasantries and start working with PyOpenGL, which is as close are you're going to get to ""raw"" 3D programming using Python.</p>

<p>On the other hand, if you're ""tinkering"" by way of mocking up a game or multimedia application, or trying to learn about programming practices in general than Pyglet will save you lots of up-front development time by providing hooks for input events, sounds, text/billboarding, etc. Often, this up-front investment is what prevents people from completing their projects, so having it done for you is not something to be ignored.  (It is also very Pythonic to avoid reinventing the wheel.)</p>

<p>If you are looking to do any sort of heavy-duty lifting (which normally falls outside my definition of ""tinkering"", but maybe not if you're tinkering with 3D engine design) then you might want to take a look at <a href=""http://www.python-ogre.org/"">Python-Ogre</a>, which wraps the <em>very</em> full-featured and robust <a href=""http://www.ogre3d.org/"">OGRE 3D</a> graphics engine.</p>
"
2277,"<p>From the <a href=""http://www.python.org/doc/faq/general/#why-are-there-separate-tuple-and-list-data-types"">Python FAQ</a>:</p>

<blockquote>
  <p>Lists and tuples, while similar in many respects, are generally used in fundamentally different ways. Tuples can be thought of as being similar to Pascal records or C structs; they're small collections of related data which may be of different types which are operated on as a group. For example, a Cartesian coordinate is appropriately represented as a tuple of two or three numbers.</p>
  
  <p>Lists, on the other hand, are more like arrays in other languages. They tend to hold a varying number of objects all of which have the same type and which are operated on one-by-one.</p>
</blockquote>

<p>Generally by convention you wouldn't choose a list or a tuple just based on its (im)mutability.  You would choose a tuple for small collections of completely different pieces of data in which a full-blown class would be too heavyweight, and a list for collections of any reasonable size where you have a homogeneous set of data.</p>"
101222,"<p>Update: It is built-in in C# 4 as <a href=""https://msdn.microsoft.com/en-us/library/vstudio/dd267698(v=vs.110).aspx"" rel=""nofollow"">System.Linq.Enumerable.Zip Method</a></p>

<p>Here is a C# 3 version:</p>

<pre><code>IEnumerable&lt;TResult&gt; Zip&lt;TResult,T1,T2&gt;
    (IEnumerable&lt;T1&gt; a,
     IEnumerable&lt;T2&gt; b,
     Func&lt;T1,T2,TResult&gt; combine)
{
    using (var f = a.GetEnumerator())
    using (var s = b.GetEnumerator())
    {
        while (f.MoveNext() &amp;&amp; s.MoveNext())
            yield return combine(f.Current, s.Current);
    }
}
</code></pre>

<p>Dropped the C# 2 version as it was showing its age.</p>
"
94957,"<p>xrange returns an iterator and only keeps one number in memory at a time.  range keeps the entire list of numbers in memory.</p>
"
38989,"<pre><code>x = {'a':1, 'b': 2}
y = {'b':10, 'c': 11}
z = dict(x.items() + y.items())
print z
</code></pre>

<p>For items with keys in both dictionaries ('b'), you can control which one ends up in the output by putting that one last.</p>
"
7090,"<p>ImageMagick delegates the PDF->bitmap conversion to GhostScript anyway, so here's a command you can use (it's based on the actual command listed by the <code>ps:alpha</code> delegate in ImageMagick, just adjusted to use JPEG as output):</p>

<pre><code>gs -q -dQUIET -dPARANOIDSAFER -dBATCH -dNOPAUSE -dNOPROMPT \
-dMaxBitmap=500000000 -dLastPage=1 -dAlignToPixels=0 -dGridFitTT=0 \
-sDEVICE=jpeg -dTextAlphaBits=4 -dGraphicsAlphaBits=4 -r72x72 \
-sOutputFile=$OUTPUT -f$INPUT
</code></pre>

<p>where <code>$OUTPUT</code> and <code>$INPUT</code> are the output and input filenames. Adjust the <code>72x72</code> to whatever resolution you need. (Obviously, strip out the backslashes if you're writing out the whole command as one line.)</p>

<p>This is good for two reasons:</p>

<ol>
<li>You don't need to have ImageMagick installed anymore. Not that I have anything against ImageMagick (I love it to bits), but I believe in simple solutions.</li>
<li>ImageMagick does a two-step conversion. First PDF->PPM, then PPM->JPEG. This way, the conversion is one-step.</li>
</ol>

<p>Other things to consider: with the files I've tested, PNG compresses better than JPEG. If you want to use PNG, change the <code>-sDEVICE=jpeg</code> to <code>-sDEVICE=png16m</code>.</p>
"
89823,"<p>Personally, I use a single settings.py for the project, I just have it look up the hostname it's on (my development machines have hostnames that start with ""gabriel"" so I just have this:</p>

<pre><code>import socket
if socket.gethostname().startswith('gabriel'):
    LIVEHOST = False
else: 
    LIVEHOST = True
</code></pre>

<p>then in other parts I have things like:</p>

<pre><code>if LIVEHOST:
    DEBUG = False
    PREPEND_WWW = True
    MEDIA_URL = 'http://static1.grsites.com/'
else:
    DEBUG = True
    PREPEND_WWW = False
    MEDIA_URL = 'http://localhost:8000/static/'
</code></pre>

<p>and so on. A little bit less readable, but it works fine and saves having to juggle multiple settings files.</p>
"
10845,"<p>I've used <a href=""https://bitbucket.org/lazka/mutagen"">mutagen</a> to edit tags in media files before.  The nice thing about mutagen is that it can handle other formats, such as mp4, FLAC etc.  I've written several scripts with a lot of success using this API.</p>
"
196978,"<p>This will print names of all passable arguments, keyword and non-keyword ones:</p>

<pre><code>def func(one, two=""value""):
    y = one, two
    return y
print func.func_code.co_varnames[:func.func_code.co_argcount]
</code></pre>

<p>This is because first <code>co_varnames</code> are always parameters (next are local variables, like <code>y</code> in the example above).</p>

<p>So now you could have a function:</p>

<pre><code>def getValidArgs(func, argsDict):
    '''Return dictionary without invalid function arguments.'''
    validArgs = func.func_code.co_varnames[:func.func_code.co_argcount]
    return dict((key, value) for key, value in argsDict.iteritems() 
                if key in validArgs)
</code></pre>

<p>Which you then could use like this:</p>

<pre><code>&gt;&gt;&gt; func(**getValidArgs(func, args))
</code></pre>

<p><hr></p>

<p><strong>EDIT</strong>: A small addition: if you <strong>really need only keyword arguments</strong> of a function, you can use the <code>func_defaults</code> attribute to extract them:</p>

<pre><code>def getValidKwargs(func, argsDict):
    validArgs = func.func_code.co_varnames[:func.func_code.co_argcount]
    kwargsLen = len(func.func_defaults) # number of keyword arguments
    validKwargs = validArgs[-kwargsLen:] # because kwargs are last
    return dict((key, value) for key, value in argsDict.iteritems() 
                if key in validKwargs)
</code></pre>

<p>You could now call your function with known args, but extracted kwargs, e.g.:</p>

<pre><code>func(param1, param2, **getValidKwargs(func, kwargsDict))
</code></pre>

<p>This assumes that <code>func</code> uses no <code>*args</code> or <code>**kwargs</code> magic in its signature.</p>
"
336992,"<p>As @<a href=""#336975"">Guillaume</a> says, it's used for generating help. If you want to have an option that takes an argument, such as a filename, you can add the <code>metavar</code> parameter to the <code>add_option</code> call so your preferred argument name/descriptor is output in the help message. From <a href=""http://docs.python.org/library/optparse.html#generating-help"">the current module documentation</a>:</p>

<pre><code>usage = ""usage: %prog [options] arg1 arg2""
parser = OptionParser(usage=usage)
parser.add_option(""-f"", ""--filename"",
                  metavar=""FILE"", help=""write output to FILE""),
</code></pre>

<p>would produce help like this:</p>

<pre><code>usage: &lt;yourscript&gt; [options] arg1 arg2

options:
  -f FILE, --filename=FILE
</code></pre>

<p>The ""FILE"" after the ""-f"" and the ""--filename"" comes from the metavar.</p>
"
146957,"<p>In Python, there is <a href=""http://docs.python.org/lib/module-difflib.html"">difflib</a>, as also others have suggested.</p>

<p><code>difflib</code> offers the <a href=""http://docs.python.org/lib/sequence-matcher.html"">SequenceMatcher</a> class, which can be used to give you a similarity ratio. Example function:</p>

<pre><code>def text_compare(text1, text2, isjunk=None):
    return difflib.SequenceMatcher(isjunk, text1, text2).ratio()
</code></pre>
"
140818,"<p>Yes, there is. The Python way is even better.</p>

<p>There are three possibilities:</p>

<p><strong>1)  Like File.listFiles():</strong></p>

<p>Python has the function os.listdir(path). It works like the Java method.</p>

<p><strong>2) pathname pattern expansion with glob:</strong></p>

<p>The module glob contains functions to list files on the file system using Unix shell like pattern, e.g.
<code><pre>
files = glob.glob('/usr/joe/*.gif')
</pre></code></p>

<p><strong>3)  File Traversal with walk:</strong></p>

<p>Really nice is the os.walk function of Python.</p>

<p>The walk method returns a generation function that recursively list all directories and files below a given starting path.</p>

<p>An Example:
 <code><pre>
import os
from os.path import join
for root, dirs, files in os.walk('/usr'):
   print ""Current directory"", root
   print ""Sub directories"", dirs
   print ""Files"", files
</pre></code>
You can even on the fly remove directories from ""dirs"" to avoid walking to that dir: if ""joe"" in dirs: dirs.remove(""joe"") to avoid walking into directories called ""joe"".</p>

<p>listdir and walk are documented <a href=""http://docs.python.org/lib/os-file-dir.html"">here</a>.
glob is documented <a href=""http://docs.python.org/lib/module-glob.html"">here</a>.</p>
"
316253,"<h3>Python &lt;2.7</h3>

<pre><code>""%.15g"" % f
</code></pre>

<p>Or in Python 3.0:</p>

<pre><code>format(f, "".15g"")
</code></pre>

<h3>Python 2.7+, 3.2+</h3>

<p>Just pass the float to <code>Decimal</code> constructor directly.</p>
"
269803,"<p>The <code>sys.path</code> list contains the list of directories which will be searched for modules at runtime:</p>

<pre><code>python -v
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path
['', '/usr/local/lib/python25.zip', '/usr/local/lib/python2.5', ... ]
</code></pre>
"
269810,"<p><code>datetime</code> is a builtin module, so there is no (Python) source file.</p>

<p>For modules coming from <code>.py</code> (or <code>.pyc</code>) files, you can use <code>mymodule.__file__</code>, e.g.</p>

<pre><code>&gt; import random
&gt; random.__file__
'C:\\Python25\\lib\\random.pyc'
</code></pre>
"
311907,"<p>I recently went down this path as well; though it sounds like my application was slightly different. I was interested in approximating set operations on a large number of strings. </p>

<p>You do make the key observation that a <strong>fast</strong> bit vector is required. Depending on what you want to put in your bloom filter, you may also need to give some thought to the speed of the hashing algorithm(s) used. You might find this <a href=""http://www.partow.net/programming/hashfunctions/index.html"">library</a> useful. You may also want to tinker with the random number technique used below that only hashes your key a single time.</p>

<p>In terms of non-Java bit array implementations:</p>

<ul>
<li>Boost has <a href=""http://www.boost.org/doc/libs/1_37_0/libs/dynamic_bitset/dynamic_bitset.html"">dynamic_bitset</a></li>
<li>Java has the built in <a href=""http://java.sun.com/javase/6/docs/api/java/util/BitSet.html"">BitSet</a></li>
</ul>

<p>I built my bloom filter using <a href=""http://cobweb.ecn.purdue.edu/~kak/dist/"">BitVector</a>. I spent some time profiling and optimizing the library and contributing back my patches to Avi. Go to that BitVector link and scroll down to acknowledgments in v1.5 to see details. In the end, I realized that performance was not a goal of this project and decided against using it. </p>

<p>Here's some code I had lying around. I may put this up on google code at python-bloom. Suggestions welcome.</p>

<pre><code>from BitVector import BitVector
from random import Random
# get hashes from http://www.partow.net/programming/hashfunctions/index.html
from hashes import RSHash, JSHash, PJWHash, ELFHash, DJBHash


#
# ryan.a.cox@gmail.com / www.asciiarmor.com
#
# copyright (c) 2008, ryan cox
# all rights reserved 
# BSD license: http://www.opensource.org/licenses/bsd-license.php
#

class BloomFilter(object):
    def __init__(self, n=None, m=None, k=None, p=None, bits=None ):
        self.m = m
        if k &gt; 4 or k &lt; 1:
            raise Exception('Must specify value of k between 1 and 4')
        self.k = k
        if bits:
            self.bits = bits
        else:
            self.bits = BitVector( size=m )
        self.rand = Random()
        self.hashes = []
        self.hashes.append(RSHash)
        self.hashes.append(JSHash)
        self.hashes.append(PJWHash)
        self.hashes.append(DJBHash)

        # switch between hashing techniques
        self._indexes = self._rand_indexes
        #self._indexes = self._hash_indexes

    def __contains__(self, key):
        for i in self._indexes(key): 
            if not self.bits[i]:
                return False    
        return True 

    def add(self, key):
        dupe = True 
        bits = []
        for i in self._indexes(key): 
            if dupe and not self.bits[i]:
                dupe = False
            self.bits[i] = 1
            bits.append(i)
        return dupe

    def __and__(self, filter):
        if (self.k != filter.k) or (self.m != filter.m): 
            raise Exception('Must use bloom filters created with equal k / m paramters for bitwise AND')
        return BloomFilter(m=self.m,k=self.k,bits=(self.bits &amp; filter.bits))

    def __or__(self, filter):
        if (self.k != filter.k) or (self.m != filter.m): 
            raise Exception('Must use bloom filters created with equal k / m paramters for bitwise OR')
        return BloomFilter(m=self.m,k=self.k,bits=(self.bits | filter.bits))

    def _hash_indexes(self,key):
        ret = []
        for i in range(self.k):
            ret.append(self.hashes[i](key) % self.m)
        return ret

    def _rand_indexes(self,key):
        self.rand.seed(hash(key))
        ret = []
        for i in range(self.k):
            ret.append(self.rand.randint(0,self.m-1))
        return ret

if __name__ == '__main__':
    e = BloomFilter(m=100, k=4)
    e.add('one')
    e.add('two')
    e.add('three')
    e.add('four')
    e.add('five')        

    f = BloomFilter(m=100, k=4)
    f.add('three')
    f.add('four')
    f.add('five')
    f.add('six')
    f.add('seven')
    f.add('eight')
    f.add('nine')
    f.add(""ten"")        

    # test check for dupe on add
    assert not f.add('eleven') 
    assert f.add('eleven') 

    # test membership operations
    assert 'ten' in f 
    assert 'one' in e 
    assert 'ten' not in e 
    assert 'one' not in f         

    # test set based operations
    union = f | e
    intersection = f &amp; e

    assert 'ten' in union
    assert 'one' in union 
    assert 'three' in intersection
    assert 'ten' not in intersection
    assert 'one' not in intersection
</code></pre>

<p>Also, in my case I found it useful to have a faster count_bits function for BitVector. Drop this code into BitVector 1.5 and it should give you a more performant bit counting method:</p>

<pre><code>def fast_count_bits( self, v ):
    bits = (
            0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4,
            1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
            1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
            2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
            1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
            2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
            2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
            3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
            1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
            2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
            2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
            3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
            2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
            3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
            3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8 )

    return bits[v &amp; 0xff] + bits[(v &gt;&gt; 8) &amp; 0xff] + bits[(v &gt;&gt; 16) &amp; 0xff] + bits[v &gt;&gt; 24]
</code></pre>
"
114853,"<p>If you're interested in the technical details, one article in <a href=""http://oreilly.com/catalog/9780596510046/"">Beautiful Code</a> deals with the internals of Python's <code>dict</code> implementation.</p>
"
120956,"<p>The problem with tabs is that they are invisible, and people can never agree on the width of tabs. When you mix tabs and spaces, and you set tabstops at something other than Python (which uses tabstops every 8 spaces) you will be seeing the code in a different layout than Python sees it. And because the layout determines blocks, you will be seeing different logic. It leads to subtle bugs.</p>

<p>If you insist on defying PEP 8 and using tabs -- or worse, mixing tabs and spaces -- at least always run python with the '-tt' argument, which makes <em>inconsistent</em> indentation (sometimes a tab, sometimes a space for the same indentation level) an error. Also, if possible, set your editor to display tabs differently. But really, the best approach is not to use tabs, period.</p>
"
123226,"<p>Use the <a href=""https://docs.python.org/3/library/shutil.html"">shutil module</a>.</p>

<pre><code>copyfile(src, dst)
</code></pre>

<p>Copy the contents of the file named src to a file named dst. The destination location must be writable; otherwise, an IOError exception will be raised. If dst already exists, it will be replaced. Special files such as character or block devices and pipes cannot be copied with this function. src and dst are path names given as strings.</p>

<p>Take a look at <a href=""https://docs.python.org/3/library/filesys.html"">filesys</a> for all the file and directory handling functions available in standard Python modules.</p>
"
230416,"<p>Actually an easier way using fileinput is to use the inplace parameter:</p>

<pre><code>import fileinput
for line in fileinput.input (filenameToProcess, inplace=1):
    process (line)
</code></pre>

<p>If you use the inplace parameter it will redirect stdout to your file, so that if you do a print it will write back to your file.</p>

<p>This example adds line numbers to your file:</p>

<pre><code>import fileinput

for line in fileinput.input (""b.txt"",inplace=1):
    print ""%d: %s"" % (fileinput.lineno(),line),
</code></pre>
"
50668,"<p>The filesystem backend is only worth looking at if you're not going to use a database for any other part of your system. If you are using a database then the filesystem backend has nothing to recommend it.</p>

<p>The memcache backend is much quicker than the database backend, but you run the risk of a session being purged and some of your session data being lost.</p>

<p>If you're a really, really high traffic website and code carefully so you can cope with losing a session then use memcache. If you're not using a database use the file system cache, but the default database backend is the best, safest and simplest option in almost all cases.</p>
"
595,"<p>The canonical way is to use the built-in cursor iterator.</p>

<pre><code>curs.execute('select * from people')
for row in curs:
    print row
</code></pre>

<hr>

<p>You can use <code>fetchall()</code> to get all rows at once.</p>

<pre><code>for row in curs.fetchall():
    print row
</code></pre>

<p>It can be convenient to use this to create a Python list containing the values returned:</p>

<pre><code>curs.execute('select first_name from people')
names = [row[0] for row in curs.fetchall()]
</code></pre>

<p>This can be useful for smaller result sets, but can have bad side effects if the result set is large.</p>

<ul>
<li><p>You have to wait for the entire result set to be returned to
your client process.</p></li>
<li><p>You may eat up a lot of memory in your client to hold
the built-up list.</p></li>
<li><p>It may take a while for Python to construct and deconstruct the
list which you are going to immediately discard anyways.</p></li>
</ul>

<hr>

<p>If you know there's a single row being returned in the result set you can call <code>fetchone()</code> to get the single row.</p>

<pre><code>curs.execute('select max(x) from t')
maxValue = curs.fetchone()[0]
</code></pre>

<hr>

<p>Finally, you can loop over the result set fetching one row at a time.  In general, there's no particular advantage in doing this over using the iterator.</p>

<pre><code>row = curs.fetchone()
while row:
    print row
    row = curs.fetchone()
</code></pre>
"
323981,"<p>You should never forcibly kill a thread without cooperating with it.</p>

<p>Killing a thread removes any guarantees that try/finally blocks set up so you might leave locks locked, files open, etc.</p>

<p>The only time you can argue that forcibly killing threads is a good idea is to kill a program fast, but never single threads.</p>
"
109245,"<p>A true <code>switch/case</code> in Python is going to be more difficult than a dictionary method or <code>if/elif/else</code> methods because the simple versions do not support fall through.</p>

<p>Another downfall of the <code>if/elif/else</code> method is the need for repeated comparisons. </p>

<p>The C implementation of a <code>switch/case</code> has a performance benefit over <code>if/else</code> <code>if/else</code> in that only a single comparison is needed. The result of that comparison is used as an offset into a jump table (in the underlying <code>asm</code> generated). </p>

<p>Mimicking the true functionality in Python would be a pain. Does any one have an implementation that would allow for fall through while only using a single comparison?</p>
"
136215,"<pre><code>def num_groups(regex):
    return re.compile(regex).groups
</code></pre>
"
64492,"<p>James Bennett has a wonderful <a href=""http://www.b-list.org/weblog/2008/mar/15/slides/"" rel=""nofollow"">set of slides</a> on how to organize reusable apps in Django.</p>
"
209855,"<pre><code>&gt;&gt;&gt; keys = ('name', 'age', 'food')
&gt;&gt;&gt; values = ('Monty', 42, 'spam')
&gt;&gt;&gt; dict(zip(keys, values))
{'food': 'spam', 'age': 42, 'name': 'Monty'}
</code></pre>
"
106730,"<p>Kind of a dup of this question about <a href=""http://stackoverflow.com/questions/2933/an-executable-python-app""> how to make a python into an executable</a>. </p>

<p>It boils down to: </p>

<p><a href=""http://www.py2exe.org/"">py2exe</a> on windows, <a href=""http://wiki.python.org/moin/Freeze"">Freeze</a> on Linux, and
<a href=""http://svn.pythonmac.org/py2app/py2app/trunk/doc/index.html"">py2app</a> on Mac.</p>
"
268350,"<p>Here is another one:</p>

<pre><code>stats = {'a':1000, 'b':3000, 'c': 100}
max(stats.iterkeys(), key=lambda k: stats[k])
</code></pre>

<p>The function <code>key</code> simply returns the value that should be used for ranking and <code>max()</code> returns the demanded element right away.</p>
"
293558,"<p>using BeautifulSoup:</p>

<pre><code>from BeautifulSoup import BeautifulSoup
html = ""&lt;p&gt;&lt;ul&gt;&lt;li&gt;Foo""
soup = BeautifulSoup(html)
print soup.prettify()
</code></pre>

<p>gets you</p>

<pre><code>&lt;p&gt;
 &lt;ul&gt;
  &lt;li&gt;
   Foo
  &lt;/li&gt;
 &lt;/ul&gt;
&lt;/p&gt;
</code></pre>

<p>As far as I know, you can't control putting the &lt;li&gt;&lt;/li&gt; tags on separate lines from Foo.</p>

<p>using Tidy:</p>

<pre><code>import tidy
html = ""&lt;p&gt;&lt;ul&gt;&lt;li&gt;Foo""
print tidy.parseString(html, show_body_only=True)
</code></pre>

<p>gets you</p>

<pre><code>&lt;ul&gt;
&lt;li&gt;Foo&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>Unfortunately, I know of no way to keep the &lt;p&gt; tag in the example.  Tidy interprets it as an empty paragraph rather than an unclosed one, so doing</p>

<pre><code>print tidy.parseString(html, show_body_only=True, drop_empty_paras=False)
</code></pre>

<p>comes out as</p>

<pre><code>&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Foo&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>Ultimately, of course, the &lt;p&gt; tag in your example is redundant, so you might be fine with losing it.</p>

<p>Finally, Tidy can also do indenting:</p>

<pre><code>print tidy.parseString(html, show_body_only=True, indent=True)
</code></pre>

<p>becomes</p>

<pre><code>&lt;ul&gt;
  &lt;li&gt;Foo
  &lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>All of these have their ups and downs, but hopefully one of them is close enough.</p>
"
347749,"<ol>
<li><p>You forgot parentheses around <code>4*t</code>:</p>

<pre><code>pi = (a+b)**2 / (4*t)
</code></pre></li>
<li><p>You can use <code>decimal</code> to perform calculation with higher precision.</p>

<pre><code>#!/usr/bin/env python
from __future__ import with_statement
import decimal


def pi_gauss_legendre():
    D = decimal.Decimal
    with decimal.localcontext() as ctx:
        ctx.prec += 2                
        a, b, t, p = 1, 1/D(2).sqrt(), 1/D(4), 1                
        pi = None
        while 1:
            an    = (a + b) / 2
            b     = (a * b).sqrt()
            t    -= p * (a - an) * (a - an)
            a, p  = an, 2*p
            piold = pi
            pi    = (a + b) * (a + b) / (4 * t)
            if pi == piold:  # equal within given precision
                break
    return +pi


decimal.getcontext().prec = 100
print pi_gauss_legendre()
</code></pre></li>
</ol>

<p>Output:</p>

<pre><code>3.141592653589793238462643383279502884197169399375105820974944592307816406286208\
    998628034825342117068
</code></pre>
"
25180,"<p>As long as you don't try to put any unicode data into your <code>StringIO</code> and you are careful NOT to use <code>cStringIO</code> you should be fine.</p>

<p>According to the <a href=""https://docs.python.org/library/stringio.html"" rel=""nofollow"">StringIO</a> documentation, as long as you keep to either unicode or 8-bits everything works as expected. Presumably, <code>StringIO</code> does something special when someone does a <code>f.write(u""asdf"")</code> (which ZipFile does not do, to my knowledge). Anyway;</p>

<pre><code>import zipfile
import StringIO

s = StringIO.StringIO()
z = zipfile.ZipFile(s, ""w"")
z.write(""test.txt"")
z.close()
f = file(""x.zip"", ""w"")
f.write(s.getvalue())
s.close()
f.close()
</code></pre>

<p>works just as expected, and there's no difference between the file in the resulting archive and the original file.</p>

<p>If you know of a particular case where this approach does not work, I'd be most interested to hear about it :)</p>
"
181646,"<p><code>reduce()</code> is not being removed -- it's simply being moved into the <code>functools</code> module. Guido's reasoning is that except for trivial cases like summation, code written using <code>reduce()</code> is usually clearer when written as an accumulation loop.</p>
"
118738,"<p>Python supports braces for defining code blocks, and it also supports using 'begin' and 'end' tags.</p>

<p>Please see these code examples:</p>

<pre><code>class MyClass(object): #{
    def myfunction(self, arg1, arg2): #{
        for i in range(arg1): #{ 
            print i
        #}
    #}
#}
</code></pre>

<p>And an example with bash style:</p>

<pre><code>fi = endclass = enddef = endclass = done = None
class MyClass(object):
    def myfunction(self, arg1, arg2):
        for i in range(arg1): #do
            if i &gt; 5: #then
                print i
            fi
        done
    enddef
endclass
</code></pre>

<p>The best thing about this is is that you can forget to put a close bracket in, and it's still valid python!</p>

<pre><code>class MyClass(object): #{
    def myfunction(self, arg1, arg2): #{
        for i in range(arg1): #{ 
            print i
        # whoops, forgot to close that bracket!
    #}
#}
</code></pre>

<p><a href=""http://www.python.org/doc/humor/#python-block-delimited-notation-parsing-explained"" rel=""nofollow"">original gag</a></p>

<p>My real advice is to get a Braille display if you can afford one/source one - blind python programmers of my acquaintance really found a Braille display indispensable for writing python programs, it makes the indentation thing much less painful. A 40 cell display is well worth it.</p>
"
106464,"<p>I'm one of the authors of the Dabo framework. One of our users pointed out to me the extremely negative answer you received, and so I thought I had better chime in and clear up some of the incorrect assumptions in the first reply.</p>

<p>Dabo is indeed well-known in the Python community. I have presented it at 3 of the last 4 US PyCons, and we have several hundred users who subscribe to our email lists. Our website (<a href=""http://dabodev.com"">http://dabodev.com</a>) has not had any service interruptions; I don't know why the first responder claimed to have trouble. Support is through our email lists, and we pride ourselves on helping people quickly and efficiently. Many of the newbie questions help us to identify places where our docs are lacking, so we strongly encourage newcomers to ask questions!</p>

<p>Dabo has been around for 4 years. The fact that it is still a few days away from a 0.9 release is more of a reflection of the rather conservative version numbering of my partner, Paul McNett, than any instabilities in the framework. I know of Dabo apps that have been in production since 2006; I have used it for my own projects since 2004. Whatever importance you attach to release numbers, we are at revision 4522, with consistent work being done to add more and more stuff to the framework; refactor and streamline some of the older code, and yes, clean up some bugs.</p>

<p>Please sign up for our free email support list:</p>

<p><a href=""http://leafe.com/mailman/listinfo/dabo-users"">http://leafe.com/mailman/listinfo/dabo-users</a></p>

<p>...and ask any questions you may have about Dabo there. Not many people have discovered Stack Overflow yet, so I wouldn't expect very informed answers here yet. There are several regular contributors there who use Dabo on a daily basis, and are usually more than happy to offer their opinions and their help.</p>
"
107720,"<p>Yes, it is.</p>

<p>You can disable it on the commandline with the ""-u"" switch.</p>

<p>Alternatively, you could call .flush() on sys.stdout on every write (or wrap it with an object that does this automatically)</p>
"
328110,"<p>Check if the cross product of <code>b-a</code> and <code>c-a</code> is<code>0</code>: that means all the points are collinear. If they are, check if <code>c</code>'s coordinates are between <code>a</code>'s and <code>b</code>'s. Use either the x or the y coordinates, as long as <code>a</code> and <code>b</code> are separate on that axis (or they're the same on both).</p>

<pre><code>def is_on(a, b, c):
    ""Return true iff point c intersects the line segment from a to b.""
    # (or the degenerate case that all 3 points are coincident)
    return (collinear(a, b, c)
            and (within(a.x, c.x, b.x) if a.x != b.x else 
                 within(a.y, c.y, b.y)))

def collinear(a, b, c):
    ""Return true iff a, b, and c all lie on the same line.""
    return (b.x - a.x) * (c.y - a.y) == (c.x - a.x) * (b.y - a.y)

def within(p, q, r):
    ""Return true iff q is between p and r (inclusive).""
    return p &lt;= q &lt;= r or r &lt;= q &lt;= p
</code></pre>

<p>This answer used to be a mess of three updates. The worthwhile info from them: Brian Hayes's <a href=""http://bit-player.org/bph-publications/BeautifulCode-2007-Hayes.pdf"" rel=""nofollow"">chapter</a> in <em>Beautiful Code</em> covers the design space for a collinearity-test function -- useful background. <a href=""http://stackoverflow.com/questions/328107/how-can-you-determine-a-point-is-between-two-other-points-on-a-line-segment#328337"">Vincent's answer</a> helped to improve this one. And it was Hayes who suggested testing only one of the x or the y coordinates; originally the code had <code>and</code> in place of <code>if a.x != b.x else</code>.</p>
"
115903,"<p>Why not let MySQL do the hard work?</p>

<p>select unix_timestamp(fieldname) from tablename;</p>
"
73844,"<p>This is a simple python function that uses the unix sendmail to deliver a mail.</p>

<pre><code>def sendMail():
    sendmail_location = ""/usr/sbin/sendmail"" # sendmail location
    p = os.popen(""%s -t"" % sendmail_location, ""w"")
    p.write(""From: %s\n"" % ""from@somewhere.com"")
    p.write(""To: %s\n"" % ""to@somewhereelse.com"")
    p.write(""Subject: thesubject\n"")
    p.write(""\n"") # blank line separating headers from body
    p.write(""body of the mail"")
    status = p.close()
    if status != 0:
           print ""Sendmail exit status"", status
</code></pre>
"
204482,"<p><a href=""http://springpython.webfactional.com"">Spring Python</a> is an offshoot of the Java-based Spring Framework and Spring Security, targeted for Python. This project currently contains the following features:</p>

<ul>
<li><a href=""http://martinfowler.com/articles/injection.html"">Inversion Of Control (dependency injection)</a> - use either classic XML, or the python @Object decorator (similar to the Spring JavaConfig subproject) to wire things together. While the @Object format isn't identical to the Guice style (centralized wiring vs. wiring information in each class), it is a valuable way to wire your python app.</li>
<li><a href=""http://en.wikipedia.org/wiki/Aspect-oriented_programming"">Aspect-oriented Programming</a> - apply interceptors in a horizontal programming paradigm (instead of vertical OOP inheritance) for things like transactions, security, and caching.</li>
<li>DatabaseTemplate - Reading from the database requires a monotonous cycle of opening cursors, reading rows, and closing cursors, along with exception handlers. With this template class, all you need is the SQL query and row-handling function. Spring Python does the rest.</li>
<li>Database Transactions - Wrapping multiple database calls with transactions can make your code hard to read. This module provides multiple ways to define transactions without making things complicated.</li>
<li>Security - Plugin security interceptors to lock down access to your methods, utilizing both authentication and domain authorization.</li>
<li>Remoting - It is easy to convert your local application into a distributed one. If you have already built your client and server pieces using the IoC container, then going from local to distributed is just a configuration change.</li>
<li>Samples - to help demonstrate various features of Spring Python, some sample applications have been created:
<ul>
<li>PetClinic - Spring Framework's sample web app has been rebuilt from the ground up using python web containers including: <a href=""http://cherrypy.org/"">CherryPy</a>. Go check it out for an example of how to use this framework. (NOTE: Other python web frameworks will be added to this list in the future).</li>
<li>Spring Wiki - Wikis are powerful ways to store and manage content, so we created a simple one as a demo!</li>
<li>Spring Bot - Use Spring Python to build a tiny bot to manage the IRC channel of your open source project.</li>
</ul></li>
</ul>
"
215313,"<p>The easiest way is to use <a href=""http://labix.org/python-dateutil"">dateutil</a>.parser.parse() to parse the date string into a timezone aware datetime object, then use strftime() to get the format you want.</p>

<pre><code>import datetime, dateutil.parser

d = dateutil.parser.parse('2008-09-26T01:51:42.000Z')
print d.strftime('%m/%d/%Y') #==&gt; '09/26/2008'
</code></pre>
"
70562,"<p>It's not like you absolutly can't get around privateness of members in any language (pointer arithmetics in C++, Reflections in .NET/Java).</p>

<p>The point is that you get an error if you try to call the private method by accident. But if you want to shoot yourself in the foot, go ahead and do it.</p>

<p>Edit: You don't try to secure your stuff by OO-encapsulation, do you?</p>
"
61629,"<p>Firstly, note that Python allows for the following (no need for the parenthesis):</p>

<pre><code>q, r = divide(22, 7)
</code></pre>

<p>Regarding your question, there's no hard and fast rule either way. For simple (and usually contrived) examples, it may seem that it's always possible for a given function to have a single purpose, resulting in a single value. However, when using Python for real-world applications, you quickly run into many cases where returning multiple values is necessary, and results in cleaner code.</p>

<p>So, I'd say do whatever makes sense, and don't try to conform to an artificial convention. Python supports multiple return values, so use it when appropriate.</p>
"
37252,"<p>A neato trick with groupby is to run length encoding in one line:</p>

<pre><code>[(c,len(list(cgen))) for c,cgen in groupby(some_string)]
</code></pre>

<p>will give you a list of 2-tuples where the first element is the char and the 2nd is the number of repetitions.</p>
"
126499,"<p>Using the <code>__init__.py</code> file allows you to make the internal package structure invisible from the outside. If the internal structure changes (e.g. because you split one fat module into two) you only have to adjust the <code>__init__.py</code> file, but not the code that depends on the package. You can also make parts of your package invisible, e.g. if they are not ready for general usage.</p>

<p>Note that you can use the <code>del</code> command, so a typical <code>__init__.py</code> may look like this:</p>

<pre><code>from somemodule import some_function1, some_function2, SomeObject

del somemodule
</code></pre>

<p>Now if you decide to split <code>somemodule</code> the new <code>__init__.py</code> might be:</p>

<pre><code>from somemodule1 import some_function1, some_function2
from somemodule2 import SomeObject

del somemodule1
del somemodule2
</code></pre>

<p>From the outside the package still looks exactly as before.</p>
"
252199,"<p>This avoids the <code>len(string)</code>-deep recursion, and is in general a nice way to handle generators-inside-generators:</p>

<pre><code>from types import GeneratorType

def flatten(*stack):
    stack = list(stack)
    while stack:
        try: x = stack[0].next()
        except StopIteration:
            stack.pop(0)
            continue
        if isinstance(x, GeneratorType): stack.insert(0, x)
        else: yield x

def _getPermutations(string, prefix=""""):
    if len(string) == 1: yield prefix + string
    else: yield (_getPermutations(string[:i]+string[i+1:], prefix+string[i])
            for i in range(len(string)))

def getPermutations(string): return flatten(_getPermutations(string))

for permutation in getPermutations(""abcd""): print permutation
</code></pre>

<p><code>flatten</code> allows us to continue progress in another generator by simply <code>yield</code>ing it, instead of iterating through it and <code>yield</code>ing each item manually.</p>

<hr>

<p>Python 3.3 will add <a href=""http://docs.python.org/dev/whatsnew/3.3.html#pep-380-syntax-for-delegating-to-a-subgenerator""><code>yield from</code></a> to the syntax, which allows for natural delegation to a sub-generator:</p>

<pre><code>def getPermutations(string, prefix=""""):
    if len(string) == 1:
        yield prefix + string
    else:
        for i in range(len(string)):
            yield from getPermutations(string[:i]+string[i+1:], prefix+string[i])
</code></pre>
"
132114,"<p>The <a href=""http://www.python.org/doc/2.5.2/lib/module-traceback.html""><strong>traceback</strong></a> module has some nice functions, among them: print_stack:</p>

<pre><code>import traceback

traceback.print_stack()
</code></pre>
"
91818,"<pre><code>from pprint import pprint
a = [0, 1, ['a', 'b', 'c'], 2, 3, 4]
pprint(a)
</code></pre>

<p>Note that for a short list like my example, pprint will in fact print it all on one line. However, for more complex structures it does a pretty good job of pretty printing data.</p>
"
182417,"<p>If you want to manipulate Windows paths on linux you should use the ntpath module (this is the module that is imported as os.path on windows - posixpath is imported as os.path on linux)</p>

<pre><code>&gt;&gt;&gt; import ntpath
&gt;&gt;&gt; filepath = r""c:\ttemp\FILEPA~1.EXE""
&gt;&gt;&gt; print ntpath.basename(filepath)
FILEPA~1.EXE
&gt;&gt;&gt; print ntpath.splitdrive(filepath)
('c:', '\\ttemp\\FILEPA~1.EXE')
</code></pre>
"
5430,"<p><strong>Note:</strong> This answer is sort of outdated (from 2008). Please use the solution below with care!!</p>

<hr>

<p>Here is a page that details the problem and a solution (search the page for the text <em>Wrapping sys.stdout into an instance</em>):</p>

<p><a href=""http://wiki.python.org/moin/PrintFails"">PrintFails - Python Wiki</a></p>

<p>Here's a code excerpt from that page:</p>

<pre><code>$ python -c 'import sys, codecs, locale; print sys.stdout.encoding; \
    sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout); \
    line = u""\u0411\n""; print type(line), len(line); \
    sys.stdout.write(line); print line'
  UTF-8
  &lt;type 'unicode'&gt; 2
  Ð
  Ð

  $ python -c 'import sys, codecs, locale; print sys.stdout.encoding; \
    sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout); \
    line = u""\u0411\n""; print type(line), len(line); \
    sys.stdout.write(line); print line' | cat
  None
  &lt;type 'unicode'&gt; 2
  Ð
  Ð
</code></pre>

<p>There's some more information on that page, well worth a read.</p>
"
188867,"<p><code>len</code> is a built-in function that calls the given container object's <code>__len__</code> member function to get the number of elements in the object.  </p>

<p>Functions encased with double underscores are usually ""special methods"" implementing one of the standard interfaces in Python (container, number, etc).  Special methods are used via syntactic sugar (object creation, container indexing and slicing, attribute access, built-in functions, etc.).</p>

<p>Using <code>obj.__len__()</code> wouldn't be the correct way of using the special method, but I don't see why the others were modded down so much.</p>
"
295064,"<p>As referenced in Stack&nbsp;Overflow question <em><a href=""http://stackoverflow.com/questions/295028/"">Inplace substitution from ConfigParser</a></em>, you're looking for <code>eval()</code>:</p>

<pre><code>print eval('self.post.id') # Prints the value of self.post.id
</code></pre>
"
185397,"<p>For a regular expression, you would use:</p>

<pre><code>re.match(r'Run.*\.py$')
</code></pre>

<p>A quick explanation:</p>

<ul>
<li>. means match any character.</li>
<li>* means match any repetition of the previous character (hence .* means any sequence of chars)</li>
<li>\ is an escape to escape the explicit dot</li>
<li>$ indicates ""end of the string"", so we don't match ""Run_foo.py.txt""</li>
</ul>

<p>However, for this task, you're probably better off using simple string methods. ie.</p>

<pre><code>filename.startswith(""Run"") and filename.endswith("".py"")
</code></pre>

<p>Note: if you want case insensitivity (ie. matching ""run.PY"" as well as ""Run.py"", use the re.I option to the regular expression, or convert to a specific case (eg filename.lower()) before using string methods.</p>
"
68382,"<p>You'd probably use the <a href=""http://docs.python.org/lib/module-subprocess.html"" rel=""nofollow"">subprocess module</a>. Something like this:</p>

<pre><code>import subprocess
p = subprocess.Popen([""scp"", myfile, destination])
sts = os.waitpid(p.pid, 0)
</code></pre>

<p>Where <code>destination</code> is probably of the form <code>user@remotehost:remotepath</code>. Thanks to
@Charles Duffy for pointing out the weakness in my original answer, which used a single string argument to specify the scp operation <code>shell=True</code> - that wouldn't handle whitespace in paths.</p>

<p>The module documentation has <a href=""http://docs.python.org/lib/node536.html"" rel=""nofollow"">examples of error checking that you may want to perform in conjunction with this operation.</a></p>

<p>Ensure that you've set up proper credentials so that you can perform an <a href=""http://www.debian.org/devel/passwordlessssh"" rel=""nofollow"">unattended, passwordless scp between the machines</a>. There is a <a href=""http://stackoverflow.com/questions/7260/how-do-i-setup-public-key-authentication"">stackoverflow question for this already</a>.</p>
"
90138,"<p>This question has been asked in several forms over the last few days, so I'm going to say this very clearly.</p>

<h1>Q: How do I parse HTML with Regular Expressions?</h1>

<h1>A: Please Don't.</h1>

<p>Use <a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">BeautifulSoup</a>, <a href=""http://code.google.com/p/html5lib/"" rel=""nofollow"">html5lib</a> or <a href=""http://codespeak.net/lxml/lxmlhtml.html"" rel=""nofollow"">lxml.html</a>. Please.</p>
"
36143,"<pre><code>list.sort()
</code></pre>

<p>It really is that simple :)</p>
"
107187,"<p>I'm a happy user of <a href=""http://www.dabeaz.com/ply/"">PLY</a>. It is a pure-Python implementation of Lex &amp; Yacc, with lots of small niceties that make it quite Pythonic and easy to use. Since Lex &amp; Yacc are the most popular lexing &amp; parsing tools and are used for the most projects, PLY has the advantage of standing on giants' shoulders. A lot of knowledge exists online on Lex &amp; Yacc, and you can freely apply it to PLY.</p>

<p>PLY also has a good <a href=""http://www.dabeaz.com/ply/ply.html"">documentation page</a> with some simple examples to get you started. </p>

<p>For a listing of lots of Python parsing tools, see <a href=""http://nedbatchelder.com/text/python-parsers.html"">this</a>.</p>
"
124785,"<p>I found an explanation <a href=""http://www.enfoldsystems.com/software/proxy/docs/4.0/configuringmanually.html#the-default-section"">here</a> by googling for ""windows ini"" ""default section"".  Summary: whatever you put in the [DEFAULT] section gets propagated to every other section.  Using the example from the linked website, let's say I have a config file called test1.ini:</p>

<pre><code>[host 1]
lh_server=192.168.0.1
vh_hosts = PloneSite1:8080
lh_root = PloneSite1

[host 2]
lh_server=192.168.0.1
vh_hosts = PloneSite2:8080
lh_root = PloneSite2
</code></pre>

<p>I can read this using ConfigParser:</p>

<pre><code>&gt;&gt;&gt; cp = ConfigParser.ConfigParser()
&gt;&gt;&gt; cp.read('test1.ini')
['test1.ini']
&gt;&gt;&gt; cp.get('host 1', 'lh_server')
'192.168.0.1'
</code></pre>

<p>But I notice that lh_server is the same in both sections; and, indeed, I realise that it will be the same for most hosts I might add.  So I can do this, as test2.ini:</p>

<pre><code>[DEFAULT]
lh_server=192.168.0.1

[host 1]
vh_root = PloneSite1
lh_root = PloneSite1

[host 2]
vh_root = PloneSite2
lh_root = PloneSite2
</code></pre>

<p>Despite the sections not having lh_server keys, I can still access them:</p>

<pre><code>&gt;&gt;&gt; cp.read('test2.ini')
['test2.ini']
&gt;&gt;&gt; cp.get('host 1', 'lh_server')
'192.168.0.1'
</code></pre>

<p>Read the linked page for a further example of using variable substitution in the DEFAULT section to simplify the INI file even more.</p>
"
276295,"<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.times()
(1.296875, 0.765625, 0.0, 0.0, 0.0)
&gt;&gt;&gt; print os.times.__doc__
times() -&gt; (utime, stime, cutime, cstime, elapsed_time)

Return a tuple of floating point numbers indicating process times.
</code></pre>

<p>From the (2.5) manual:</p>

<blockquote>
  <p>times( ) </p>
  
  <p>Return a 5-tuple of floating point numbers indicating accumulated (processor or other)  times, in seconds. The items are: user time, system time, children's user time, children's system time, and elapsed real time since a fixed point in the past, in that order. See the Unix manual page times(2) or the corresponding Windows Platform API documentation. Availability: Macintosh, Unix, Windows. </p>
</blockquote>
"
261677,"<p>Slightly simpler...</p>

<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; fq= defaultdict( list )
&gt;&gt;&gt; for n,v in myList:
        fq[n].append(v)

&gt;&gt;&gt; fq
defaultdict(&lt;type 'list'&gt;, {'a': [1, 2, 3], 'c': [1], 'b': [1, 2]})
</code></pre>
"
224020,"<p>Doesn't all of this assume that the base class is inherited from <code>object</code>?</p>

<pre><code>class A:
    def __init__(self):
        print ""A.__init__()""

class B(A):
    def __init__(self):
        print ""B.__init__()""
        super(B, self).__init__()
</code></pre>

<p>Will not work. <code>class A</code> must be derived from <code>object</code>, i.e: <code>class A(object)</code></p>
"
195839,"<p>Yes, it is O(1) to pop the last element of a Python list, and O(N) to pop an arbitrary element (since the whole rest of the list has to be shifted).</p>

<p>Here's a great article on how Python lists are stored and manipulated: <a href=""http://effbot.org/zone/python-list.htm"">http://effbot.org/zone/python-list.htm</a></p>
"
301746,"<p>Everyone else seems to have the cPython -> SQL Server side covered. If you want to use IronPython, you can use the standard ADO.NET API to talk to the database:</p>

<pre><code>import clr
clr.AddReference('System.Data')
from System.Data.SqlClient import SqlConnection, SqlParameter

conn_string = 'data source=&lt;machine&gt;; initial catalog=&lt;database&gt;; trusted_connection=True'
connection = SqlConnection(conn_string)
connection.Open()
command = connection.CreateCommand()
command.CommandText = 'select id, name from people where group_id = @group_id'
command.Parameters.Add(SqlParameter('group_id', 23))

reader = command.ExecuteReader()
while reader.Read():
    print reader['id'], reader['name']

connection.Close()
</code></pre>

<p>If you've already got IronPython, you don't need to install anything else.</p>

<p>Lots of docs available <a href=""http://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlconnection.aspx"">here</a> and <a href=""http://www.ironpython.info/index.php/Contents#Databases"">here</a>.</p>
"
135718,"<p>""It depends.""  Python allocates space for lists in such a way as to achieve <a href=""http://effbot.org/zone/python-list.htm"">amortized constant time</a> for appending elements to the list.</p>

<p>In practice, what this means with the current implementation is... the list always has space allocated for a power-of-two number of elements.  So range(1000000) will actually allocate a list big enough to hold 2^20 elements (~ 1.045 million).</p>

<p>This is only the space required to store the list structure itself (which is an array of pointers to the Python objects for each element).  A 32-bit system will require 4 bytes per element, a 64-bit system will use 8 bytes per element.</p>

<p>Furthermore, you need space to store the actual elements.  This varies widely.  For small integers (-5 to 256 currently), no additional space is needed, but for larger numbers Python allocates a new object for each integer, which takes 10-100 bytes and tends to fragment memory.</p>

<p>Bottom line: <b>it's complicated</b> and Python lists are <b>not</b> a good way to store large homogeneous data structures.  For that, use the <code>array</code> module or, if you need to do vectorized math, use NumPy.</p>

<p>PS- Tuples, unlike lists, are <i>not designed</i> to have elements progressively appended to them.  I don't know how the allocator works, but don't even think about using it for large data structures :-)</p>
"
145283,"<p>The quickest way to do this is using <a href=""http://www.swig.org/"">SWIG</a>.</p>

<p>Example from SWIG <a href=""http://www.swig.org/tutorial.html"">tutorial</a>:</p>

<pre><code>/* File : example.c */
int fact(int n) {
    if (n &lt;= 1) return 1;
    else return n*fact(n-1);
}
</code></pre>

<p>Interface file:</p>

<pre><code>/* example.i */
%module example
%{
/* Put header files here or function declarations like below */
extern int fact(int n);
%}

extern int fact(int n);
</code></pre>

<p>Building a Python module on Unix:</p>

<pre><code>swig -python example.i
gcc -fPIC -c example.c example_wrap.c -I/usr/local/include/python2.7
gcc -shared example.o example_wrap.o -o _example.so
</code></pre>

<p>Usage:</p>

<pre><code>&gt;&gt;&gt; import example
&gt;&gt;&gt; example.fact(5)
120
</code></pre>

<p>Note that you have to have python-dev. Also in some systems python header files will be in /usr/include/python2.7 based on the way you have installed it.</p>

<p>From the tutorial:</p>

<blockquote>
  <p>SWIG is a fairly complete C++ compiler with support for nearly every language feature. This includes preprocessing, pointers, classes, inheritance, and even C++ templates. SWIG can also be used to package structures and classes into proxy classes in the target language â exposing the underlying functionality in a very natural manner.</p>
</blockquote>
"
145609,"<p>Look at <a href=""http://docs.python.org/lib/module-difflib.html"" rel=""nofollow"">difflib</a>. (Python)</p>

<p>That will calculate the diffs in various formats. You could then use the size of the context diff as a measure of how different two documents are?</p>
"
119418,"<p>You can use <a href=""http://spacepants.org/src/pymad/"">pymad</a>.  It's an external library, but don't fall for the Not Invented Here trap.  Any particular reason you don't want any external libraries?</p>

<pre><code>import mad

mf = mad.MadFile(""foo.mp3"")
track_length_in_milliseconds = mf.total_time()
</code></pre>

<p>Spotted <a href=""http://simonwillison.net/2003/Dec/4/mp3lengths/"">here</a>.</p>

<p>--</p>

<p>If you really don't want to use an external library, have a look <a href=""http://ibofobi.dk/stuff/mp3/"">here</a> and check out how he's done it.  Warning: it's complicated.</p>
"
177411,"<p>It seems that you catch not the exception you wanna catch out there :)</p>

<p>if the <code>s</code> is a <code>socket.socket()</code> object, then the right way to call <code>.connect</code> would be:</p>

<pre><code>import socket
s = socket.socket()
address = '127.0.0.1'
port = 80  # port number is a number, not string
try:
    s.connect((address, port)) 
    # originally, it was 
    # except Exception, e: 
    # but this syntax is not supported anymore. 
except Exception as e: 
    print(""something's wrong with %s:%d. Exception is %s"" % (address, port, e))
finally:
    s.close()
</code></pre>

<p>Always try to see what kind of exception is what you're catching in a try-except loop.  </p>

<p>You can check what types of exceptions in a socket module represent what kind of errors (timeout, unable to resolve address, etc) and make separate <code>except</code> statement for each one of them - this way you'll be able to react differently for different kind of problems.</p>
"
25136,"<p>Here is a snippet that will remove all tags not on the white list, and all tag attributes not on the attribues whitelist (so you can't use <code>onclick</code>).</p>

<p>It is a modified version of <a href=""http://www.djangosnippets.org/snippets/205/"">http://www.djangosnippets.org/snippets/205/</a>, with the regex on the attribute values to prevent people from using <code>href=""javascript:...""</code>, and other cases described at <a href=""http://ha.ckers.org/xss.html"">http://ha.ckers.org/xss.html</a>.<br>
(e.g. <code>&lt;a href=""ja&amp;#x09;vascript:alert('hi')""&gt;</code> or <code>&lt;a href=""ja  vascript:alert('hi')""&gt;</code>, etc.)</p>

<p>As you can see, it uses the (awesome) <a href=""http://www.crummy.com/software/BeautifulSoup/"">BeautifulSoup</a> library.</p>

<pre><code>import re
from urlparse import urljoin
from BeautifulSoup import BeautifulSoup, Comment

def sanitizeHtml(value, base_url=None):
    rjs = r'[\s]*(&amp;#x.{1,7})?'.join(list('javascript:'))
    rvb = r'[\s]*(&amp;#x.{1,7})?'.join(list('vbscript:'))
    re_scripts = re.compile('(%s)|(%s)' % (rjs, rvb), re.IGNORECASE)
    validTags = 'p i strong b u a h1 h2 h3 pre br img'.split()
    validAttrs = 'href src width height'.split()
    urlAttrs = 'href src'.split() # Attributes which should have a URL
    soup = BeautifulSoup(value)
    for comment in soup.findAll(text=lambda text: isinstance(text, Comment)):
        # Get rid of comments
        comment.extract()
    for tag in soup.findAll(True):
        if tag.name not in validTags:
            tag.hidden = True
        attrs = tag.attrs
        tag.attrs = []
        for attr, val in attrs:
            if attr in validAttrs:
                val = re_scripts.sub('', val) # Remove scripts (vbs &amp; js)
                if attr in urlAttrs:
                    val = urljoin(base_url, val) # Calculate the absolute url
                tag.attrs.append((attr, val))

    return soup.renderContents().decode('utf8')
</code></pre>

<p>As the other posters have said, pretty much all Python db libraries take care of SQL injection, so this should pretty much cover you.</p>
"
538,"<p>One possibility is Hudson.  It's written in Java, but there's integration with Python projects:</p>

<blockquote>
  <p><a href=""http://redsolo.blogspot.com/2007/11/hudson-embraces-python.html"" rel=""nofollow"">Hudson embraces Python</a></p>
</blockquote>

<p>I've never tried it myself, however.</p>

<p>(<strong>Update</strong>, Sept. 2011: After a trademark dispute Hudson has been renamed to <a href=""http://jenkins-ci.org/"" rel=""nofollow"">Jenkins</a>.)</p>
"
296184,"<pre><code>import glob, os, shutil

files = glob.iglob(os.path.join(source_dir, ""*.ext""))
for file in files:
    if os.path.isfile(file):
        shutil.copy2(file, dest_dir)
</code></pre>

<p>Read the <a href=""http://www.python.org/doc/2.5.2/lib/module-shutil.html"">documentation</a> of the shutil module to choose the function that fits your needs (shutil.copy(), shutil.copy2() or shutil.copyfile()).</p>
"
148048,"<pre><code>if job in (""mechanic"", ""tech""):
    print ""awesome""
elif job in (""tool"", ""rock""):
    print ""dolt""
</code></pre>

<p>The values in parentheses are a tuple. The <code>in</code> operator checks to see whether the left hand side item occurs somewhere inside the right handle tuple.</p>

<p>Note that when Python searches a tuple or list using the <code>in</code> operator, it does a linear search. If you have a large number of items on the right hand side, this could be a performance bottleneck. A larger-scale way of doing this would be to use a <a href=""http://docs.python.org/lib/types-set.html""><code>frozenset</code></a>:</p>

<pre><code>AwesomeJobs = frozenset([""mechanic"", ""tech"", ... lots of others ])
def func():
    if job in AwesomeJobs:
        print ""awesome""
</code></pre>

<p>The use of <code>frozenset</code> over <code>set</code> is preferred if the list of awesome jobs does not need to be changed during the operation of your program.</p>
"
203943,"<p>As mentioned in another post Python 2.6 has the <a href=""http://docs.python.org/library/multiprocessing.html"">multiprocessing</a> module, which can take advantage of multiple cores/processors (it gets around GIL by starting multiple processes transparently). It offers some primitives similar to the threading module. You'll find some (simple) examples of usage in the documentation pages.</p>
"
32125,"<p>I think the canonical answer is: ""Don't"".</p>

<p>What you should probably do instead is unravel the thing in your <em>view</em> code, so it's just a matter of iterating over (in|de)dents in the template. I think I'd do it by appending indents and dedents to a list while recursing through the tree and then sending that ""travelogue"" list to the template. (the template would then insert <code>&lt;li&gt;</code> and <code>&lt;/li&gt;</code> from that list, creating the recursive structure with ""understanding"" it.)</p>

<p>I'm also pretty sure recursively including template files is really a <em>wrong</em> way to do it...</p>
"
168996,"<p>The only way to detect mouse events outside your program is to install a Windows hook using <a href=""http://msdn.microsoft.com/en-us/library/ms644990(VS.85).aspx"">SetWindowsHookEx</a>. The <a href=""http://www.cs.unc.edu/Research/assist/developer.shtml"">pyHook</a> module encapsulates the nitty-gritty details. Here's a sample that will print the location of every mouse click:</p>

<pre><code>import pyHook
import pythoncom

def onclick(event):
    print event.Position
    return True

hm = pyHook.HookManager()
hm.SubscribeMouseAllButtonsDown(onclick)
hm.HookMouse()
pythoncom.PumpMessages()
hm.UnhookMouse()
</code></pre>

<p>You can check the <strong>example.py</strong> script that is installed with the module for more info about the <strong>event</strong> parameter.</p>

<p>pyHook might be tricky to use in a pure Python script, because it requires an active message pump. From the <a href=""http://mindtrove.info/articles/monitoring-global-input-with-pyhook/"">tutorial</a>:</p>

<blockquote>
  <p>Any application that wishes to receive
  notifications of global input events
  must have a Windows message pump. The
  easiest way to get one of these is to
  use the PumpMessages method in the
  Win32 Extensions package for Python.
  [...] When run, this program just sits
  idle and waits for Windows events. If
  you are using a GUI toolkit (e.g. 
  wxPython), this loop is unnecessary
  since the toolkit provides its own.</p>
</blockquote>
"
264226,"<p>As mentioned, PEP 8 says to use <code>lower_case_with_underscores</code> for variables, methods and functions.</p>

<p>I prefer using <code>lower_case_with_underscores</code> for variables and <code>mixedCase</code> for methods and functions makes the code more explicit and readable.  Thus following the <a href=""http://www.python.org/dev/peps/pep-0020/"">Zen of Python's</a> ""explicit is better than implicit"" and ""Readability counts""</p>
"
52090,"<p>Part of learning a new programming language is learning to read code in that language.  A crutch like this may make it easier to read your own code, but it's going to impede the process of learning how to read anyone else's Python code.  I really think you'd be better off getting rid of the end of block comments and getting used to normal Python.</p>
"
224876,"<p>Your DictObj example is actually quite common. Object-style dot-notation access can be a win if you are dealing with âthings that resemble objectsâ, ie. they have fixed property names containing only characters valid in Python identifiers. Stuff like database rows or form submissions can be usefully stored in this kind of object, making code a little more readable without the excess of ['item access'].</p>

<p>The implementation is a bit limited - you don't get the nice constructor syntax of dict, len(), comparisons, 'in', iteration or nice reprs. You can of course implement those things yourself, but in the new-style-classes world you can get them for free by simply subclassing dict:</p>

<pre><code>class AttrDict(dict):
    __getattr__ = dict.__getitem__
    __setattr__ = dict.__setitem__
    __delattr__ = dict.__delitem__
</code></pre>

<p>To get the default-to-None behaviour, simply subclass Python 2.5's collections.defaultdict class instead of dict.</p>
"
171294,"<ul>
<li><a href=""http://www.gnu.org/software/emacs/manual/html_node/eshell/index.html"" rel=""nofollow"">Eshell</a> is a Bash-like shell in Emacs Lisp.</li>
<li>IPython can be <a href=""http://ipython.org/ipython-doc/stable/interactive/shell.html"" rel=""nofollow"">used as a system shell</a>, though the syntax is a bit weird (supporting all of Python plus basic sh constructs).</li>
<li><a href=""http://fishshell.com/"" rel=""nofollow"">fish</a> has a core written in C, but much of its functionality is implemented in itself. Unlike many rare shells, it can be used as your login shell.</li>
<li><a href=""https://code.google.com/p/hotwire-shell/"" rel=""nofollow"">Hotwire</a> deserves another mention. Its basic design appears to be ""PowerShell in Python,"" but it also does some clever things with UI. The last release was in 2008.</li>
<li><a href=""http://www.pardus.nl/projects/zoidberg/"" rel=""nofollow"">Zoidberg</a> is written in Perl and uses Perl syntax. A nice-looking project, shame it seems to have stalled.</li>
<li><a href=""http://www.scsh.net/"" rel=""nofollow"">Scsh</a> would be a pain to use as a login shell (an example command from the docs: <code>(run/strings (find ""."" -name *.c -print))</code>), but it looks like a good ""Perl in Scheme.""</li>
</ul>
"
38254,"<p>Alternative constructors are the classic example.</p>
"
127825,"<p>What is the exact error you get? Is it like the following:</p>

<pre><code>&gt;&gt;&gt; datetime.datetime.strptime(""2008-08-12T12:20:30.656234Z"", ""%Y-%m-%dT%H:%M:%S.Z"")
ValueError: time data did not match format:  data=2008-08-12T12:20:30.656234Z  fmt=%Y-%m-%dT%H:%M:%S.Z
</code></pre>

<p>If yes, you can split your input string on ""."", and then add the microseconds to the datetime you got.</p>

<p>Try this:</p>

<pre><code>&gt;&gt;&gt; def gt(dt_str):
        dt, _, us= dt_str.partition(""."")
        dt= datetime.datetime.strptime(dt, ""%Y-%m-%dT%H:%M:%S"")
        us= int(us.rstrip(""Z""), 10)
        return dt + datetime.timedelta(microseconds=us)

&gt;&gt;&gt; gt(""2008-08-12T12:20:30.656234Z"")
datetime.datetime(2008, 8, 12, 12, 20, 30, 656234)
&gt;&gt;&gt; 
</code></pre>
"
312423,"<p>Ok, so I was curious and went and looked at the source of psycopg2. Turns out I didn't have to go further than the examples folder :)</p>

<p>And yes, this is psycopg2-specific. Basically, if you just want to quote a string you'd do this:</p>

<pre><code>from psycopg2.extensions import adapt

print adapt(""Hello World'; DROP DATABASE World;"")
</code></pre>

<p>But what you probably want to do is to write and register your own adapter;</p>

<p>In the examples folder of psycopg2 you find the file <a href=""http://sourcecodebrowser.com/psycopg2/2.4.5/myfirstrecipe_8py_source.html"">'myfirstrecipe.py'</a> there is an example of how to cast and quote a specific type in a special way.</p>

<p>If you have objects for the stuff you want to do, you can just create an adapter that conforms to the 'IPsycopgSQLQuote' protocol (see pydocs for the myfirstrecipe.py-example...actually that's the only reference I can find to that name) that quotes your object and then registering it like so:</p>

<pre><code>from psycopg2.extensions import register_adapter

register_adapter(mytype, myadapter)
</code></pre>

<p>Also, the other examples are interesting; esp. <a href=""http://sourcecodebrowser.com/psycopg2/2.4.5/dialtone_8py_source.html"">'dialtone.py'</a> and <a href=""http://sourcecodebrowser.com/psycopg2/2.4.5/simple_8py_source.html"">'simple.py'</a>.</p>
"
35664,"<p>You may get both added and removed lines with git log, like:</p>

<pre><code>git log --shortstat --reverse --pretty=oneline
</code></pre>

<p>From this, you can write a similar script to the one you did using this info. In python:</p>

<pre><code>#!/usr/bin/python

""""""
Display the per-commit size of the current git branch.
""""""

import subprocess
import re
import sys

def main(argv):
  git = subprocess.Popen([""git"", ""log"", ""--shortstat"", ""--reverse"",
                        ""--pretty=oneline""], stdout=subprocess.PIPE)
  out, err = git.communicate()
  total_files, total_insertions, total_deletions = 0, 0, 0
  for line in out.split('\n'):
    if not line: continue
    if line[0] != ' ': 
      # This is a description line
      hash, desc = line.split("" "", 1)
    else:
      # This is a stat line
      data = re.findall(
        ' (\d+) files changed, (\d+) insertions\(\+\), (\d+) deletions\(-\)', 
        line)
      files, insertions, deletions = ( int(x) for x in data[0] )
      total_files += files
      total_insertions += insertions
      total_deletions += deletions
      print ""%s: %d files, %d lines"" % (hash, total_files,
                                        total_insertions - total_deletions)


if __name__ == '__main__':
  sys.exit(main(sys.argv))
</code></pre>
"
70818,"<p>The best way to process command line arguments is the <a href=""https://docs.python.org/library/argparse.html"" rel=""nofollow""><code>argparse</code> module.</a></p>

<p>Use <code>raw_input()</code> to get user input.  If you import the <a href=""https://docs.python.org/library/readline.html"" rel=""nofollow""><code>readline module</code></a> your users will have line editing and history.</p>
"
152592,"<p><code>isinstance(o, str)</code> will return <code>true</code> if <code>o</code> is an <code>str</code> or is of a type that inherits from <code>str</code>.</p>

<p><code>type(o) == str</code> will return <code>true</code> if and only if <code>o</code> is a str. It will return <code>false</code> if <code>o</code> is of a type that inherits from <code>str</code>.</p>
"
206765,"<p>You are right, <code>somedata</code> is shared between all instances of the class and it's subclasses, because it is created at class <em>definition</em> time. The lines </p>

<pre><code>somedata = {}
somedata['was_false_in_base'] = False
</code></pre>

<p>are executed when the class is defined, i.e. when the interpreter encounters the <code>class</code> statement - <strong>not</strong> when the instance is created (think static initializer blocks in Java). If an attribute does not exist in a class instance, the class object is checked for the attribute.</p>

<p>At class definition time, you can run arbritrary code, like this:</p>

<pre><code> import sys
 class Test(object):
     if sys.platform == ""linux2"":
         def hello(self):
              print ""Hello Linux""
     else:
         def hello(self):
              print ""Hello ~Linux""
</code></pre>

<p>On a Linux system, <code>Test().hello()</code> will print <code>Hello Linux</code>, on all other systems the other string will be printed.</p>

<p>In constrast, objects in <code>__init__</code> are created at <em>instantiation</em> time and belong to the instance only (when they are assigned to <code>self</code>):</p>

<pre><code>class Test(object):
    def __init__(self):
        self.inst_var = [1, 2, 3]
</code></pre>

<p>Objects defined on a class object rather than instance can be useful in many cases. For instance, you might want to cache instances of your class, so that instances with the same member values can be shared (assuming they are supposed to be immutable):</p>

<pre><code>class SomeClass(object):
    __instances__ = {}

    def __new__(cls, v1, v2, v3):
        try:
            return cls.__insts__[(v1, v2, v3)]
        except KeyError:
            return cls.__insts__.setdefault(
               (v1, v2, v3), 
               object.__new__(cls, v1, v2, v3))
</code></pre>

<p>Mostly, I use data in class bodies in conjunction with metaclasses or generic factory methods.</p>
"
207759,"<p>The difference is that the attribute on the class is shared by all instances. The attribute on an instance is unique to that instance.</p>

<p>If coming from C++, attributes on the class are more like static member variables.</p>
"
33663,"<p>Your two <code>xint</code> examples don't work for two different reasons.</p>

<p>The first doesn't work because <code>self += value</code> is equivalent to <code>self = self + value</code> which just reassigns the local variable <code>self</code> to a different object (an integer) but doesn't change the original object. You can't really get this </p>

<pre><code>&gt;&gt;&gt; x = xint(10)
&gt;&gt;&gt; x.add(2)
</code></pre>

<p>to work with a subclass of <code>int</code> since integers are <a href=""http://docs.python.org/ref/objects.html"">immutable</a>.</p>

<p>To get the second one to work you can define an <a href=""http://docs.python.org/ref/numeric-types.html""><code>__add__</code> method</a>, like so:</p>

<pre><code>class xint(int):
    def __add__(self, value):
        return xint(int.__add__(self, value))

&gt;&gt;&gt; x = xint(10)
&gt;&gt;&gt; type(x)
&lt;class '__main__.xint'&gt;
&gt;&gt;&gt; x += 3
&gt;&gt;&gt; x
13
&gt;&gt;&gt; type(x)
&lt;class '__main__.xint'&gt;
</code></pre>
"
154812,"<p>The algorithm is pretty generic, but the benefits are rather Python-specific. Unlike most sorting routines, what Python's list.sort (which is what uses timsort) cares about is avoiding unnecessary comparisons, because generally comparisons are a <em>lot</em> more expensive than swapping items (which is always just a set of pointer copies) or even allocating some extra memory (because it's always just an array of pointers, and the overhead is small compared to the average overhead in any Python operation.)</p>

<p>If you're under similar constraints, then it may be suitable. I've yet to see any other case where comparisons are really that expensive, though :-)</p>
"
71174,"<p>You probably really want <a href=""http://stackoverflow.com/questions/55391/python-regular-expression-for-html-parsing-beautifulsoup#55424"">BeautifulSoup</a>, check the link for an example. </p>

<p>But in any case</p>

<pre><code>&gt;&gt;&gt; import HTMLParser
&gt;&gt;&gt; h = HTMLParser.HTMLParser()
&gt;&gt;&gt; h.feed('&lt;html&gt;&lt;/html&gt;')
&gt;&gt;&gt; h.get_starttag_text()
'&lt;html&gt;'
&gt;&gt;&gt; h.close()
</code></pre>
"
245892,"<p>Draw text into a temporary blank image, rotate that, then paste that onto the original image.  You could wrap up the steps in a function.    Good luck figuring out the exact coordinates to use - my cold-fogged brain isn't up to it right now.   </p>

<p>This demo writes yellow text on a slant over an image:</p>

<pre><code># Demo to add rotated text to an image using PIL

import Image
import ImageFont, ImageDraw, ImageOps

im=Image.open(""stormy100.jpg"")

f = ImageFont.load_default()
txt=Image.new('L', (500,50))
d = ImageDraw.Draw(txt)
d.text( (0, 0), ""Someplace Near Boulder"",  font=f, fill=255)
w=txt.rotate(17.5,  expand=1)

im.paste( ImageOps.colorize(w, (0,0,0), (255,255,84)), (242,60),  w)
</code></pre>
"
287640,"<p>See S.Lott's link about Python decorators for some great examples, and see the <a href=""http://www.python.org/dev/peps/pep-0318/"">defining PEP for decorators</a>.</p>

<p>Python had AOP since the beginning, it just didn't have an impressive name.
In Python 2.4 the decorator syntax was added, which makes applying decorators very nice syntactically.</p>

<p>Maybe if you want to apply decorators based on rules you would need a library, but if you're willing to mark the relevant functions/methods when you declare them you probably don't.</p>

<p>Here's an example for a simple caching decorator (I wrote it for <a href=""http://stackoverflow.com/questions/287085/what-does-args-and-kwargs-mean#287616"">this question</a>):</p>

<pre><code>import pickle, functools
def cache(f):
  _cache = {}
  def wrapper(*args, **kwargs):
    key = pickle.dumps((args, kwargs))
    if key not in _cache:
      _cache[key] = f(*args, **kwargs) # call the wrapped function, save in cache
    return _cache[key] # read value from cache
  functools.update_wrapper(wrapper, f) # update wrapper's metadata
  return wrapper

import time
@cache
def foo(n):
  time.sleep(2)
  return n*2

foo(10) # first call with parameter 10, sleeps
foo(10) # returns immediately
</code></pre>
"
143221,"<p><a href=""http://pypi.python.org/pypi/bitarray/"">Bitarray</a> was the best answer I found, when I recently had a similar need.  It's a C extension (so much faster than BitVector, which is pure python) and stores its data in an actual bitfield (so it's eight times more memory efficient than a numpy boolean array, which appears to use a byte per element.)</p>
"
199120,"<p>If there are consecutive capitals, then Gregs result could
not be what you look for, since the \w consumes the caracter
in front of the captial letter to be replaced.</p>

<pre><code>&gt;&gt;&gt; re.sub(r""(\w)([A-Z])"", r""\1 \2"", ""WordWordWWWWWWWord"")
'Word Word WW WW WW Word'
</code></pre>

<p>A look-behind would solve this:</p>

<pre><code>&gt;&gt;&gt; re.sub(r""(?&lt;=\w)([A-Z])"", r"" \1"", ""WordWordWWWWWWWord"")
'Word Word W W W W W W Word'
</code></pre>
"
135318,"<p>In Python 2.5, there is</p>

<pre><code>A if C else B
</code></pre>

<p>which behaves a lot like ?: in C. However, it's frowned upon for two reasons: readability, and the fact that there's usually a simpler way to approach the problem. For instance, in your case:</p>

<pre><code>stringValue = otherString or defaultString
</code></pre>
"
183582,"<p>One issue is that there is a race condition in your above code, since there is a gap between testing for existance, and creating the file.  There may be security implications to this (think about someone maliciously inserting a symlink to a sensitive file which they wouldn't be able to overwrite, but your program running with a higher privilege could)  Attacks like these are why things like os.tempnam() are deprecated.</p>

<p>To get around it, the best approach is to actually try create the file in such a way that you'll get an exception if it fails, and on success, return the actually opened file object.  This can be done with the lower level os.open functions, by passing both the os.O_CREAT and os.O_EXCL flags.  Once opened, return the actual file (and optionally filename) you create.  Eg, here's your code modified to use this approach (returning a (file, filename) tuple):</p>

<pre><code>def unique_file(file_name):
    counter = 1
    file_name_parts = os.path.splitext(file_name) # returns ('/path/file', '.ext')
    while 1:
        try:
            fd = os.open(file_name, os.O_CREAT | os.O_EXCL | os.O_RDRW)
            return os.fdopen(fd), file_name
        except OSError:
            pass
        file_name = file_name_parts[0] + '_' + str(counter) + file_name_parts[1]
        counter += 1
</code></pre>

<p><strong>[Edit]</strong>  Actually, a better way, which will handle the above issues for you, is probably to use the tempfile module, though you may lose some control over the naming.  Here's an example of using it (keeping a similar interface):</p>

<pre><code>def unique_file(file_name):
    dirname, filename = os.path.split(file_name)
    prefix, suffix = os.path.splitext(filename)

    fd, filename = tempfile.mkstemp(suffix, prefix+""_"", dirname)
    return os.fdopen(fd), filename

&gt;&gt;&gt; f, filename=unique_file('/home/some_dir/foo.txt')
&gt;&gt;&gt; print filename
/home/some_dir/foo_z8f_2Z.txt
</code></pre>

<p>The only downside with this approach is that you will always get a filename with some random characters in it, as there's no attempt to create an unmodified file (/home/some_dir/foo.txt) first.
You may also want to look at tempfile.TemporaryFile and NamedTemporaryFile, which will do the above and also automatically delete from disk when closed.</p>
"
141729,"<p>If you are open to using pywin32, you can use Win32 calls from Python. This is what we do in our CherryPy web server:</p>

<pre><code>import win32security
token = win32security.LogonUser(
    username,
    domain,
    password,
    win32security.LOGON32_LOGON_NETWORK,
    win32security.LOGON32_PROVIDER_DEFAULT)
authenticated = bool(token)
</code></pre>
"
172744,"<p>The usual suspects -- profile it, find the most expensive line, figure out what it's doing, fix it. If you haven't done much profiling before, there could be some big fat quadratic loops or string duplication hiding behind otherwise innocuous-looking expressions.</p>

<p>In Python, two of the most common causes I've found for non-obvious slowdown are string concatenation and generators. Since Python's strings are immutable, doing something like this:</p>

<pre><code>result = u""""
for item in my_list:
    result += unicode (item)
</code></pre>

<p>will copy the <em>entire</em> string twice per iteration. This has been well-covered, and the solution is to use <code>"""".join</code>:</p>

<pre><code>result = """".join (unicode (item) for item in my_list)
</code></pre>

<p>Generators are another culprit. They're very easy to use and can simplify some tasks enormously, but a poorly-applied generator will be much slower than simply appending items to a list and returning the list.</p>

<p>Finally, <strong>don't be afraid to rewrite bits in C!</strong> Python, as a dynamic high-level language, is simply not capable of matching C's speed. If there's one function that you can't optimize any more in Python, consider extracting it to an extension module.</p>

<p>My favorite technique for this is to maintain both Python and C versions of a module. The Python version is written to be as clear and obvious as possible -- any bugs should be easy to diagnose and fix. Write your tests against this module. Then write the C version, and test it. Its behavior should in all cases equal that of the Python implementation -- if they differ, it should be very easy to figure out which is wrong and correct the problem.</p>
"
118820,"<p>I have both installed:</p>

<pre><code>$ which python
/usr/bin/python
$ which python2.5
/opt/local/bin/python2.5
</code></pre>

<p>I also added the following line to my <code>.profile</code>:</p>

<pre><code>export PATH=/opt/local/bin:/opt/local/sbin:$PATH
</code></pre>
"
196806,"<p>Is your problem convex?  Linear? Non-linear?  I agree that SciPy.optimize will probably do the job, but fmincon is a sort of bazooka for solving optimization problems, and you'll be better off if you can confine it to one of the categories below (in increasing level of difficulty to solve efficiently)</p>

<p>Linear Program (LP)
Quadratic Program (QP)
Convex Quadratically-Constrained Quadratic Program (QCQP)
Second Order Cone Program (SOCP)
Semidefinite Program (SDP)
Non-Linear Convex Problem 
Non-Convex Problem</p>

<p>There are also combinatoric problems such as Mixed-Integer Linear Programs (MILP), but you didn't mention any sort of integrality constraints, suffice to say that they fall into a different class of problems.</p>

<p>The CVXOpt package will be of great use to you if your problem is convex.  </p>

<p>If your problem is not convex, you need to choose between finding a local solution or the global solution.  Many convex solvers 'sort of' work in a non-convex domain.  Finding a good approximation to the global solution would require some form Simulated Annealing or Genetic Algorithm.  Finding the global solution will require an enumeration of all local solutions or a combinatorial strategy such as Branch and Bound.</p>
"
196487,"<p>Actually reference counting and the strategies used by the Sun JVM are all different types of garbage collection algorithms.</p>

<p>There are two broad approaches for tracking down dead objects: tracing and reference counting. In tracing the GC starts from the ""roots"" - things like stack references, and traces all reachable (live) objects. Anything that can't be reached is considered dead. In reference counting each time a reference is modified the object's involved have their count updated. Any object whose reference count gets set to zero is considered dead.</p>

<p>With basically all GC implementations there are trade offs but tracing is usually good for high through put (i.e. fast) operation but has longer pause times (larger gaps where the UI or program may freeze up). Reference counting can operate in smaller chunks but will be slower overall. It may mean less freezes but poorer performance overall.</p>

<p>Additionally a reference counting GC requires a cycle detector to clean up any objects in a cycle that won't be caught by their reference count alone. Perl 5 didn't have a cycle detector in its GC implementation and could leak memory that was cyclic.</p>

<p>Research has also been done to get the best of both worlds (low pause times, high throughput):
<a href=""http://cs.anu.edu.au/~Steve.Blackburn/pubs/papers/urc-oopsla-2003.pdf"">http://cs.anu.edu.au/~Steve.Blackburn/pubs/papers/urc-oopsla-2003.pdf</a></p>
"
138625,"<p>Practically speaking, to me there are two differences:</p>

<p>The first is about what they do and what they return:</p>

<ul>
<li><p>def is a keyword that doesn't return anything and creates a 'name' in the local namespace.</p></li>
<li><p>lambda is a keyword that returns a function object and does not create a 'name' in the local namespace.</p></li>
</ul>

<p>Hence, if you need to call a function that takes a function object, the only way to do that in one line of python code is with a lambda.  There's no equivalent with def.</p>

<p>In some frameworks this is actually quite common; for example, I use <a href=""http://twistedmatrix.com/"">Twisted</a> a lot, and so doing something like</p>

<pre><code>d.addCallback(lambda result: setattr(self, _someVariable, result))
</code></pre>

<p>is quite common, and more concise with lambdas.</p>

<p>The second difference is about what the actual function is allowed to do.</p>

<ul>
<li>A function defined with 'def' can contain any python code</li>
<li>A function defined with 'lambda' has to evaluate to an expression, and can thus not contain statements like print, import, raise, ... </li>
</ul>

<p>For example,</p>

<pre><code>def p(x): print x
</code></pre>

<p>works as expected, while</p>

<pre><code>lambda x: print x
</code></pre>

<p>is a SyntaxError.</p>

<p>Of course, there are workarounds - substitute <code>print</code> with <code>sys.stdout.write</code>, or <code>import</code> with <code>__import__</code>.  But usually you're better off going with a function in that case.</p>
"
103895,"<p>Like so:</p>

<pre><code>[ item for innerlist in outerlist for item in innerlist ]
</code></pre>

<p>Turning that directly into a string with separators:</p>

<pre><code>','.join(str(item) for innerlist in outerlist for item in innerlist)
</code></pre>

<p>Yes, the order of 'for innerlist in outerlist' and 'for item in innerlist' is correct. Even though the ""body"" of the loop is at the start of the listcomp, the order of nested loops (and 'if' clauses) is still the same as when you would write the loop out:</p>

<pre><code>for innerlist in outerlist:
    for item in innerlist:
        ...
</code></pre>
"
219124,"<p>You can <a href=""http://www.python.org/dev/peps/pep-0333/#the-server-gateway-side"">run WSGI over CGI as Pep333 demonstrates</a> as an example. However every time there is a request a new Python interpreter is started and the whole context (database connections, etc.) needs to be build which all take time.</p>

<p>The best if you want to run WSGI would be if your host would install <a href=""http://code.google.com/p/modwsgi/"">mod_wsgi</a> and made an appropriate configuration to defer control to an application of yours.</p>

<p><a href=""http://trac.saddi.com/flup"">Flup</a> is another way to run with WSGI for any webserver that can speak <a href=""http://www.fastcgi.com/drupal/"">FCGI</a>, <a href=""http://www.mems-exchange.org/software/scgi/"">SCGI</a> or AJP. From my experience only FCGI really works, and it can be used in Apache either via <a href=""http://www.fastcgi.com/mod_fastcgi/docs/mod_fastcgi.html"">mod_fastcgi</a> or if you can run a separate Python daemon with <a href=""http://mproxyfcgi.sourceforge.net/"">mod_proxy_fcgi</a>.</p>

<p><a href=""http://wsgi.org"">WSGI</a> is a protocol much like CGI, which defines a set of rules how webserver and Python code can interact, it is defined as <a href=""http://www.python.org/dev/peps/pep-0333"">Pep333</a>. It makes it possible that many different webservers can use many different frameworks and applications using the same application protocol. This is very beneficial and makes it so useful.</p>
"
245581,"<p>The answers involving introspection via <code>inspect</code> and the like are reasonable.  But there may be another option, depending on your situation:</p>

<p>If your integration test is written with the <a href=""http://docs.python.org/library/unittest.html"">unittest</a> module, then you could use <code>self.id()</code> within your TestCase.</p>
"
245660,"<p>I've done both, and Apache/mod_python tended to be easier to work with and more stable. But these days I've jumped over to Apache/mod_wsgi, which is everything I've ever wanted and more:</p>

<ul>
<li>Easy management of daemon processes.</li>
<li>As a result, <strong>much</strong> better process isolation (running multiple sites in the same Apache config with mod_python almost always ends in trouble -- environment variables and C extensions leak across sites when you do that).</li>
<li>Easy code reloads (set it up right and you can just touch the <code>.wsgi</code> file to reload instead of restarting Apache).</li>
<li>More predictable resource usage. With mod_python, a given Apache child process' memory use can jump around a lot. With mod_wsgi it's pretty stable: once everything's loaded, you know that's how much memory it'll use.</li>
</ul>
"
163556,"<p>I figured out this workaround:</p>

<pre><code>&gt;&gt;&gt; p = subprocess.Popen(['grep','f'],stdout=subprocess.PIPE,stdin=subprocess.PIPE)
&gt;&gt;&gt; p.stdin.write('one\ntwo\nthree\nfour\nfive\nsix\n')
&gt;&gt;&gt; p.communicate()[0]
'four\nfive\n'
&gt;&gt;&gt; p.stdin.close()
</code></pre>

<p>Is there a better one?</p>
"
243239,"<p><code>.bashrc</code> only gets read when a shell starts; it won't affect Carbon Emacs. Instead, use <code>setenv</code> in your <code>.emacs</code>:</p>

<pre><code>(setenv ""PYTHONPATH"" ""PATH_STRING_HERE"")
</code></pre>

<p>You can set <code>PYTHONPATH</code> for the entire Mac OS session, by adding it to <code>~/.MacOSX/environment.plist</code> (more <a href=""http://developer.apple.com/documentation/MacOSX/Conceptual/BPRuntimeConfig/Articles/EnvironmentVars.html#//apple_ref/doc/uid/20002093-113982"">here</a>). You probably don't want to do this unless you have XCode (and its property list editor) installed.</p>

<p>(<a href=""http://procrastiblog.com/2007/07/09/changing-your-path-in-emacs-compilation-mode/"">Via Procrastiblog</a>)</p>
"
193963,"<p>Create a deb (for everything Debian-derived) and an rpm (for Fedora/SuSE). Add the right dependencies to the packaging and you can be reasonably sure that it will work.</p>
"
222762,"<pre><code>from operator import itemgetter

MY_SORTED_TUPLE = tuple(sorted(MY_TUPLE, key=itemgetter(1)))
</code></pre>

<p>or without <code>itemgetter</code>:</p>

<pre><code>MY_SORTED_TUPLE = tuple(sorted(MY_TUPLE, key=lambda item: item[1]))
</code></pre>
"
316308,"<p>You said in your question: </p>

<blockquote>
  <p>Can someone suggest a good way to
  convert from float to Decimal
  <strong>preserving value as the user has
  entered</strong></p>
</blockquote>

<p>But every time the user enters a value, it is entered as a string, not as a float. You are converting it to a float somewhere. Convert it to a Decimal directly instead and no precision will be lost.</p>
"
236537,"<p>Since nobody pointed out pychecker, pylint and similar tools, I will: pychecker and pylint are tools that can help you find incorrect assumptions (about function signatures, object attributes, etc.) They won't find everything that a compiler might find in a statically typed language -- but they can find problems that such compilers for such languages can't find, too.</p>

<p>Python (and any dynamically typed language) is fundamentally different in terms of the errors you're likely to cause and how you would detect and fix them. It has definite downsides as well as upsides, but many (including me) would argue that in Python's case, the ease of writing code (and the ease of making it structurally sound) and of modifying code <em>without</em> breaking API compatibility (adding new optional arguments, providing different objects that have the same set of methods and attributes) make it suitable just fine for large codebases.</p>
"
118187,"<p>The shlex module solution allows escaped quotes, one quote escape another, and all fancy stuff shell supports.</p>

<pre><code>&gt;&gt;&gt; import shlex
&gt;&gt;&gt; my_splitter = shlex.shlex('''foo, bar, ""one, two"", three four''', posix=True)
&gt;&gt;&gt; my_splitter.whitespace += ','
&gt;&gt;&gt; my_splitter.whitespace_split = True
&gt;&gt;&gt; print list(my_splitter)
['foo', 'bar', 'one, two', 'three', 'four']
</code></pre>

<p>escaped quotes example:</p>

<pre><code>&gt;&gt;&gt; my_splitter = shlex.shlex('''""test, a"",'foo,bar"",baz',bar \xc3\xa4 baz''',
                              posix=True) 
&gt;&gt;&gt; my_splitter.whitespace = ',' ; my_splitter.whitespace_split = True 
&gt;&gt;&gt; print list(my_splitter)
['test, a', 'foo,bar"",baz', 'bar \xc3\xa4 baz']
</code></pre>
"
284110,"<p>You can use simple print statements, or any other way of writing to stdout.  You can also invoke the Python debugger anywhere in your tests.</p>

<p>If you use <a href=""https://web.archive.org/web/20081120065052/http://www.somethingaboutorange.com/mrl/projects/nose"" rel=""nofollow"">nose</a> to run your tests (which I recommend), it will collect the stdout for each test and only show it to you if the test failed, so you don't have to live with the cluttered output when the tests pass.</p>

<p>nose also has switches to automatically show variables mentioned in asserts, or to invoke the debugger on failed tests.</p>
"
190975,"<p>You can get it back with</p>

<pre><code>x.pattern
</code></pre>

<p>from the Python <a href=""https://docs.python.org/3/library/re.html#re.regex.pattern"">documentation on Regular Expression Objects</a></p>
"
322317,"<p>On *nix's, maybe using process groups can help you out - you can catch subprocesses spawned by your subprocesses as well.</p>

<pre><code>if __name__ == ""__main__"":
  os.setpgrp() # create new process group, become its leader
  try:
    # some code
  finally:
    os.killpg(0, signal.SIGKILL) # kill all processes in my group
</code></pre>

<p>Another consideration is to escalate the signals: from SIGTERM (default signal for <code>kill</code>) to SIGKILL (a.k.a <code>kill -9</code>). Wait a short while between the signals to give the process a chance to exit cleanly before you <code>kill -9</code> it.</p>
"
282399,"<p>With:</p>

<pre><code>decorator(original_function)()
</code></pre>

<p>Without:</p>

<pre><code>original_function()
</code></pre>

<p>A decorator is just a function which takes a function as an argument and returns another one. The @ syntax is totally optional. Perhaps a sift through some <a href=""https://wiki.python.org/moin/PythonDecorators"" rel=""nofollow"">documentation</a> might help clarify things.</p>
"
246481,"<p>Profile, Profile, Profile.</p>

<p>Profiling your code is the only way to know if what you're doing has any effect at all.</p>

<p>Most usages of xrange, generators, etc are over static size, small datasets. It's only when you get to large datasets that it really makes a difference. range() vs. xrange() is mostly just a matter of making the code look a tiny little bit more ugly, and not losing anything, and maybe gaining something.</p>

<p>Profile, Profile, Profile.</p>
"
117682,"<p>Other answers suggest how to get a floating-point value.  While this wlil be close to what you want, it won't be exact:</p>

<pre><code>&gt;&gt;&gt; 0.4/100.
0.0040000000000000001
</code></pre>

<p>If you actually want a <em>decimal</em> value, do this:</p>

<pre><code>&gt;&gt;&gt; import decimal
&gt;&gt;&gt; decimal.Decimal('4') / decimal.Decimal('100')
Decimal(""0.04"")
</code></pre>

<p>That will give you an object that properly knows that 4 / 100 in <em>base 10</em> is ""0.04"".  Floating-point numbers are actually in base 2, i.e. binary, not decimal.</p>
"
263652,"<p>Ruby has a zip function:</p>

<pre><code>[1,2].zip([3,4]) =&gt; [[1,3],[2,4]]
</code></pre>

<p>so your code example is actually:</p>

<pre><code>a.zip(b).all? {|pair| pair[0] === pair[1]}
</code></pre>

<p>or perhaps more succinctly:</p>

<pre><code>a.zip(b).all? {|a,b| a === b }
</code></pre>
"
175101,"<p>After a bit of work, I found the answer myself. Looking at the ElementTree.py source code, I found there was special handling of XML comments and preprocessing instructions. What they do is create a factory function for the special element type that uses a special (non-string) tag value to differentiate it from regular elements.</p>

<pre><code>def Comment(text=None):
    element = Element(Comment)
    element.text = text
    return element
</code></pre>

<p>Then in the <code>_write</code> function of ElementTree that actually outputs the XML, there's a special case handling for comments:</p>

<pre><code>if tag is Comment:
    file.write(""&lt;!-- %s --&gt;"" % _escape_cdata(node.text, encoding))
</code></pre>

<p>In order to support CDATA sections, I create a factory function called <code>CDATA</code>, extended the ElementTree class and changed the <code>_write</code> function to handle the CDATA elements.</p>

<p>This still doesn't help if you want to parse an XML with CDATA sections and then output it again with the CDATA sections, but it at least allows you to create XMLs with CDATA sections programmatically, which is what I needed to do.</p>

<p>The implementation seems to work with both ElementTree and cElementTree.</p>

<pre><code>import elementtree.ElementTree as etree
#~ import cElementTree as etree

def CDATA(text=None):
    element = etree.Element(CDATA)
    element.text = text
    return element

class ElementTreeCDATA(etree.ElementTree):
    def _write(self, file, node, encoding, namespaces):
        if node.tag is CDATA:
            text = node.text.encode(encoding)
            file.write(""\n&lt;![CDATA[%s]]&gt;\n"" % text)
        else:
            etree.ElementTree._write(self, file, node, encoding, namespaces)

if __name__ == ""__main__"":
    import sys

    text = """"""
    &lt;?xml version='1.0' encoding='utf-8'?&gt;
    &lt;text&gt;
    This is just some sample text.
    &lt;/text&gt;
    """"""

    e = etree.Element(""data"")
    cdata = CDATA(text)
    e.append(cdata)
    et = ElementTreeCDATA(e)
    et.write(sys.stdout, ""utf-8"")
</code></pre>
"
28067,"<p>A word of caution: </p>

<pre><code>if foo:
  # do something
</code></pre>

<p>Is <strong>not</strong> exactly the same as:</p>

<pre><code>if x is not None:
  # do something
</code></pre>

<p>The former is a boolean value test and can evaluate to false in different contexts. There are a number of things that represent false in a boolean value tests for example empty containers, boolean values. None also evaluates to false in this situation but other things do too.</p>
"
228708,"<p>This will do the trick:</p>

<pre><code>&gt;&gt;&gt; print hex (-1 &amp; 0xffffffff)
0xffffffffL
</code></pre>

<p>or, in function form (and stripping off the trailing ""L""):</p>

<pre><code>&gt;&gt;&gt; def hex2(n):
...     return hex (n &amp; 0xffffffff)[:-1]
...
&gt;&gt;&gt; print hex2(-1)
0xffffffff
&gt;&gt;&gt; print hex2(17)
0x11
</code></pre>

<p>or, a variant that always returns fixed size (there may well be a better way to do this):</p>

<pre><code>&gt;&gt;&gt; def hex3(n):
...     return ""0x%s""%(""00000000%s""%(hex(n&amp;0xffffffff)[2:-1]))[-8:]
...
&gt;&gt;&gt; print hex3(-1)
0xffffffff
&gt;&gt;&gt; print hex3(17)
0x00000011
</code></pre>

<p>Or, avoiding the hex() altogether, thanks to Ignacio and bobince:</p>

<pre><code>def hex2(n):
    return ""0x%x""%(n&amp;0xffffffff)

def hex3(n):
    return ""0x%s""%(""00000000%x""%(n&amp;0xffffffff))[-8:]
</code></pre>
"
247513,"<p>For the record, this is covered in the tutorial: <a href=""http://docs.python.org/tutorial/interactive.html"">http://docs.python.org/tutorial/interactive.html</a></p>
"
257642,"<p>SCGI is a language-neutral means of connecting a front-end web server and a web application. WSGI is a Python-specific interface standard for web applications.</p>

<p>Though they both have roots in CGI, they're rather different in scope and you could indeed quite reasonably use both at once, for example having a mod_scgi on the webserver talk to a WSGI app run as an SCGI server. There are multiple library implementations that will run WSGI applications as SCGI servers for you (eg. wsgitools, cherrypy).</p>

<p>They are both 'reliable', in as much as you can consider a specification reliable as opposed to a particular implementation. These days you would probably write your application as a WSGI callable, and consider the question of deployment separately.</p>

<p>Maybe an Apache+mod_wsgi (embedded) interface might be a <em>bit</em> faster than an Apache+mod_scgi+(SCGI wrapper lib), but in all likelihood it's not going to be <em>hugely</em> different. More valuable is the ability to run the application on a variety of servers, platforms and connection standards.</p>
"
220542,"<p>There are several common techniques including using semaphores.  The one I see used most often is to create a ""pid lock file"" on startup that contains the pid of the running process.  If the file already exists when the program starts up, open it up and grab the pid inside, check to see if a process with that pid is running, if it is check the cmdline value in /proc/<em>pid</em> to see if it is an instance of your program, if it is then quit, otherwise overwrite the file with your pid.  The usual name for the pid file is *application_name*<code>.pid</code>.</p>
"
344909,"<p>You have to change <a href=""http://docs.djangoproject.com/en/dev/ref/contrib/sites/#ref-contrib-sites"">default site</a> domain value.</p>
"
119594,"<p>I recently came across an article titled <a href=""http://www.secnetix.de/olli/Python/block_indentation.hawk"">Python: Myths about Indentation</a> which discusses this and related questions. The article has good reasons for recommending the use of spaces when writing Python code, but there is certainly room for disagreement.</p>

<p>I believe it's true that most Python programmers use spaces only.</p>
"
288556,"<p>On Windows you can use module 'win32console' (available in some Python distributions) or module 'ctypes' (Python 2.5 and up) to access the Win32 API.</p>

<p>To see complete code that supports both ways, see the <a href=""http://code.google.com/p/testoob/source/browse/trunk/src/testoob/reporting/colored.py"">color console reporting code</a> from <a href=""http://www.testoob.org"">Testoob</a>.</p>

<p>ctypes example:</p>

<pre><code>import ctypes

# Constants from the Windows API
STD_OUTPUT_HANDLE = -11
FOREGROUND_RED    = 0x0004 # text color contains red.

def get_csbi_attributes(handle):
    # Based on IPython's winconsole.py, written by Alexander Belchenko
    import struct
    csbi = ctypes.create_string_buffer(22)
    res = ctypes.windll.kernel32.GetConsoleScreenBufferInfo(handle, csbi)
    assert res

    (bufx, bufy, curx, cury, wattr,
    left, top, right, bottom, maxx, maxy) = struct.unpack(""hhhhHhhhhhh"", csbi.raw)
    return wattr


handle = ctypes.windll.kernel32.GetStdHandle(STD_OUTPUT_HANDLE)
reset = get_csbi_attributes(handle)

ctypes.windll.kernel32.SetConsoleTextAttribute(handle, FOREGROUND_RED)
print ""Cherry on top""
ctypes.windll.kernel32.SetConsoleTextAttribute(handle, reset)
</code></pre>
"
128532,"<p>Most of the time this would be useful for clarity and sensible to do but it's not always the case.  Below are a couple of examples of circumstances where module imports might live elsewhere.</p>

<p>Firstly, you could have a module with a unit test of the form:</p>

<pre><code>if __name__ == '__main__':
    import foo
    aa = foo.xyz()         # initiate something for the test
</code></pre>

<p>Secondly, you might have a requirement to conditionally import some different module at runtime.</p>

<pre><code>if [condition]:
    import foo as plugin_api
else:
    import bar as plugin_api
xx = plugin_api.Plugin()
[...]
</code></pre>

<p>There are probably other situations where you might place imports in other parts in the code.</p>
"
210534,"<p>If you don't want to use the xmlrpclib's Binary class, you can just use the .encode() method of strings:</p>

<pre><code>a = open(""pdf_reference.pdf"", ""rb"").read().encode(""base64"")
</code></pre>
"
68365,"<p>If you want the simple approach, this should work.</p>

<p>You'll want to "".close()"" the file first so you know it's flushed to disk from Python.</p>

<pre><code>import os
os.system(""scp FILE USER@SERVER:PATH"")
#e.g. os.system(""scp foo.bar joe@srvr.net:/path/to/foo.bar"")
</code></pre>

<p>You need to generate (on the source machine) and install (on the destination machine) an ssh key beforehand so that the scp automatically gets authenticated with your public ssh key (in other words, so your script doesn't ask for a password).  </p>

<p><a href=""http://www.modwest.com/help/kb20-90.html"">ssh-keygen example</a></p>
"
127375,"<p>Here's another using the <code>zip</code> function.</p>

<pre><code>&gt;&gt;&gt; a = [3, 7, 19]
&gt;&gt;&gt; zip(range(len(a)), a)
[(0, 3), (1, 7), (2, 19)]
</code></pre>
"
134659,"<p>Note that this is why <code>if foo is None:</code> is the preferred null comparison for python. All null objects are really pointers to the same value, which python sets aside to mean ""None""</p>

<p><code>if x is True:</code> and <code>if x is False:</code> also work in a similar manner. False and True are two special objects, all true boolean values are True and all false boolean values are False </p>
"
348551,"<p>Here is a very simple example:</p>

<pre><code>import smtplib

server = 'mail.server.com'
user = ''
password = ''

recipients = ['user@mail.com', 'other@mail.com']
sender = 'you@mail.com'
message = 'Hello World'

session = smtplib.SMTP(server)
# if your SMTP server doesn't need authentications,
# you don't need the following line:
session.login(user, password)
session.sendmail(sender, recipients, message)
</code></pre>

<p>For more options, error handling, etc, look at the <a href=""http://www.python.org/doc/2.5.2/lib/module-smtplib.html"">smtplib module documentation</a>.</p>
"
99565,"<p>In MySQL?</p>

<p>I'd say don't bother with the connection pooling.  They're often a source of trouble and with MySQL they're not going to bring you the performance advantage you're hoping for.  This road may be a lot of effort to follow--politically--because there's so much best practices hand waving and textbook verbiage in this space about the advantages of connection pooling.</p>

<p>Connection pools are simply a bridge between the post-web era of stateless applications (e.g. HTTP protocol) and the pre-web era of stateful long-lived batch processing applications.  Since connections were very expensive in pre-web databases (since no one used to care too much about how long a connection took to establish), post-web applications devised this connection pool scheme so that every hit didn't incur this huge processing overhead on the RDBMS.</p>

<p>Since MySQL is more of a web-era RDBMS, connections are extremely lightweight and fast.  I have written many high volume web applications that don't use a connection pool at all for MySQL.</p>

<p>This is a complication you may benefit from doing without, so long as there isn't a political obstacle to overcome.</p>
"
91608,"<p>At the end of settings.py I have the following:</p>

<pre><code>try:
    from settings_local import *
except ImportError:
    pass
</code></pre>

<p>This way if I want to override default settings I need to just put settings_local.py right next to settings.py.</p>
"
291470,"<p>That's certainly possible. After the script is loaded/imported, the Python interpreter won't access it anymore, except when printing source line in a exception stack trace. Any pyc file will be  regenerated the next time as the source file is newer than the pyc.</p>
"
204523,"<p>These are two different methodologies: â1 is LBYL (look before you leap) and â2 is EAFP (easier to ask forgiveness than permission).</p>

<p>Pythonistas typically suggest that EAFP is better, with arguments in style of ""what if a process creates the file between the time you test for it and the time you try to create it yourself?"". This argument does not apply here, but it's the general idea. Exceptions should not be treated as <em>too</em> exceptional.</p>

<p>Performance-wise in your case âsince setting up exception managers (the <code>try</code> keyword) is very cheap in CPython while creating an exception (the <code>raise</code> keyword and internal exception creation) is what is relatively expensiveâ using method â2 the exception would be raised only once; afterwards, you just use the property.</p>
"
258415,"<p>Here's another alternative to Graeme's, using the newer list comprehension syntax:</p>

<pre><code>list2= [line for line in file if 'CONTENT_ITEM_ID' in line]
</code></pre>

<p>Which you prefer is a matter of taste!</p>
"
271720,"<p>The header value tells you this:</p>

<pre>
=?gb2312?B?uLGxvmhlbrixsb5nLnhscw==?=

""=?""     introduces an encoded value
""gb2312"" denotes the character encoding of the original value
""B""      denotes that B-encoding (equal to Base64) was used (the alternative 
         is ""Q"", which refers to something close to quoted-printable)
""?""      functions as a separator
""uLG..."" is the actual value, encoded using the encoding specified before
""?=""     ends the encoded value
</pre>

<p>So splitting on ""?"" actually gets you this (JSON notation)</p>

<pre>
[""="", ""gb2312"", ""B"", ""uLGxvmhlbrixsb5nLnhscw=="", ""=""]
</pre>

<p>In the resulting array, if ""B"" is on position 2, you face a base-64 encoded string on position 3. Once you decoded it, be sure to pay attention to the encoding on position 1, probably it would be best to convert the whole thing to UTF-8 using that info.</p>
"
253755,"<p>Lua has fewer libraries than Python. But be sure to have a look at <a href=""http://luaforge.net/"">LuaForge</a>. It has a lot of interesting libs, like <a href=""http://luaforge.net/projects/luacurl/"">LuaCURL</a>, <a href=""http://wxlua.sourceforge.net/"">wxLua</a> or <a href=""http://luaforge.net/projects/getopt/"">getopt</a>.</p>

<p>Then, visit <a href=""http://luarocks.org/"">LuaRocks</a>, the package management system for Lua. With it, you can search and install most mature Lua modules with dependencies. It feels like <a href=""http://en.wikipedia.org/wiki/RubyGems"">RubyGems</a> or <a href=""http://en.wikipedia.org/wiki/Aptitude%5F%28software%29"">aptitude</a>.</p>

<p>The site <a href=""http://lua-users.org/"">lua-users.org</a> has a lot of interesting resources too, like tutorials or the <a href=""http://lua-users.org/wiki"">Lua Wiki</a>.</p>

<p>What I like about Lua is not its speed, it's its minimal core language, flexibility and extensibility.</p>

<p>That said, I would probably use Python for the tasks you mentionned because of the larger community doing such things in Python.</p>
"
276069,"<p>To answer your specific question of ""How do you invoke a TkInter event from a separate object"", use the <code>event_generate</code> command. It allows you to inject events into the event queue of the root window. Combined with Tk's powerful virtual event mechanism it becomes a handy message passing mechanism. </p>

<p>For example:</p>

<pre><code>from tkinter import *

def doFoo(*args):
    print(""Hello, world"")

root = Tk()
root.bind(""&lt;&lt;Foo&gt;&gt;"", doFoo)

# some time later, inject the ""&lt;&lt;Foo&gt;&gt;"" virtual event at the
# tail of the event queue
root.event_generate(""&lt;&lt;Foo&gt;&gt;"", when=""tail"")
</code></pre>

<p>Note that the <code>event_generate</code> call will return immediately. It's not clear if that's what you want or not. Generally speaking you don't want an event based program to block waiting for a response to a specific event because it will <em>freeze the GUI</em>. </p>

<p>I'm not sure if this solves your problem though; without seeing your code I'm not sure what your real problem is. I can, for example, access methods of root in the constructor of an object where the root is passed in without the app locking up. This tells me there's something else going on in your code.</p>

<p>Here's an example of successfully accessing methods on a root window from some other object:</p>

<pre><code>from tkinter import *

class myClass:
    def __init__(self, root):
        print(""root background is %s"" % root.cget(""background""))

root = Tk()
newObj = myClass(root)
</code></pre>
"
82739,"<p>EDIT: Original link went dead so here's an updated link with extracts of the list sorted with the most recently updated source at the top.</p>

<p><a href=""http://blog.montylounge.com/2010/02/10/eleven-django-blog-engines-you-should-know/"">Eleven Django blog engines you should know</a></p>

<p>by Monty Lounge Industries</p>

<blockquote>
  <ul>
  <li><a href=""http://github.com/eldarion/biblion"">Biblion</a></li>
  <li><a href=""http://bitbucket.org/codekoala/django-articles/"">Django-article</a></li>
  <li><a href=""http://github.com/flother/flother"">Flother</a></li>
  <li><a href=""http://github.com/nathanborror/django-basic-apps"">Basic-Blog</a></li>
  <li><a href=""http://github.com/gregnewman/hello-newman"">Hello-Newman</a></li>
  <li><a href=""http://getbanjo.com/download/"">Banjo</a></li>
  <li><a href=""http://code.google.com/p/djangotechblog/"">djangotechblog</a></li>
  <li><a href=""http://github.com/f4nt/django-yaba/"">Django-YABA</a></li>
  <li><a href=""http://github.com/paltman/shiftingbits/"">Shifting Bits</a> (this is now just a <a href=""http://github.com/eldarion/biblion"">biblion</a> blog)</li>
  <li><a href=""http://github.com/mightylemon/mightylemon"">Mighty Lemon</a></li>
  <li><a href=""http://code.google.com/p/coltrane-blog/"">Coltrane</a></li>
  </ul>
</blockquote>
"
165911,"<p>The generally accepted way of doing things is just using simple attributes, like so</p>

<pre><code>>>> class MyClass:
...     myAttribute = 0
... 
>>> c = MyClass()
>>> c.myAttribute 
0
>>> c.myAttribute = 1
>>> c.myAttribute
1
</code></pre>

<p>If you do find yourself needing to be able to write getters and setters, then what you want to look for is ""python class properties"" and <a href=""http://tomayko.com/writings/getters-setters-fuxors"">Ryan Tomayko's article on
Getters/Setters/Fuxors</a> is a great place to start (albeit a little long)</p>
"
34472,"<p>To check if it has a particular method:</p>

<pre><code>hasattr(object,""method"")
</code></pre>
"
217081,"<p>Off the top of my head, the following are the only built-ins that are subscriptable:</p>

<pre><code>string:  ""foobar""[3] == ""b""
tuple:   (1,2,3,4)[3] == 4
list:    [1,2,3,4][3] == 4
dict:    {""a"":1, ""b"":2, ""c"":3}[""c""] == 3
</code></pre>

<p>But mipadi's answer is correct; any class that implements __getitem__ is subscriptable</p>
"
92000,"<p>[Edit]  There's another solution not mentioned yet, and it seems to outperform the others given so far in most cases.</p>

<p>Use string.translate to replace all valid characters in the string, and see if we have any invalid ones left over.  This is pretty fast as it uses the underlying C function to do the work, with very little python bytecode involved.</p>

<p>Obviously performance isn't everything - going for the most readable solutions is probably the best approach when not in a performance critical codepath, but just to see how the solutions stack up, here's a performance comparison of all the methods proposed so far.  check_trans is the one using the string.translate method.</p>

<p>Test code:</p>

<pre><code>import string, re, timeit

pat = re.compile('[\w-]*$')
pat_inv = re.compile ('[^\w-]')
allowed_chars=string.ascii_letters + string.digits + '_-'
allowed_set = set(allowed_chars)
trans_table = string.maketrans('','')

def check_set_diff(s):
    return not set(s) - allowed_set

def check_set_all(s):
    return all(x in allowed_set for x in s)

def check_set_subset(s):
    return set(s).issubset(allowed_set)

def check_re_match(s):
    return pat.match(s)

def check_re_inverse(s): # Search for non-matching character.
    return not pat_inv.search(s)

def check_trans(s):
    return not s.translate(trans_table,allowed_chars)

test_long_almost_valid='a_very_long_string_that_is_mostly_valid_except_for_last_char'*99 + '!'
test_long_valid='a_very_long_string_that_is_completely_valid_' * 99
test_short_valid='short_valid_string'
test_short_invalid='/$%$%&amp;'
test_long_invalid='/$%$%&amp;' * 99
test_empty=''

def main():
    funcs = sorted(f for f in globals() if f.startswith('check_'))
    tests = sorted(f for f in globals() if f.startswith('test_'))
    for test in tests:
        print ""Test %-15s (length = %d):"" % (test, len(globals()[test]))
        for func in funcs:
            print ""  %-20s : %.3f"" % (func, 
                   timeit.Timer('%s(%s)' % (func, test), 'from __main__ import pat,allowed_set,%s' % ','.join(funcs+tests)).timeit(10000))
        print

if __name__=='__main__': main()
</code></pre>

<p>The results on my system are:</p>

<pre><code>Test test_empty      (length = 0):
  check_re_inverse     : 0.042
  check_re_match       : 0.030
  check_set_all        : 0.027
  check_set_diff       : 0.029
  check_set_subset     : 0.029
  check_trans          : 0.014

Test test_long_almost_valid (length = 5941):
  check_re_inverse     : 2.690
  check_re_match       : 3.037
  check_set_all        : 18.860
  check_set_diff       : 2.905
  check_set_subset     : 2.903
  check_trans          : 0.182

Test test_long_invalid (length = 594):
  check_re_inverse     : 0.017
  check_re_match       : 0.015
  check_set_all        : 0.044
  check_set_diff       : 0.311
  check_set_subset     : 0.308
  check_trans          : 0.034

Test test_long_valid (length = 4356):
  check_re_inverse     : 1.890
  check_re_match       : 1.010
  check_set_all        : 14.411
  check_set_diff       : 2.101
  check_set_subset     : 2.333
  check_trans          : 0.140

Test test_short_invalid (length = 6):
  check_re_inverse     : 0.017
  check_re_match       : 0.019
  check_set_all        : 0.044
  check_set_diff       : 0.032
  check_set_subset     : 0.037
  check_trans          : 0.015

Test test_short_valid (length = 18):
  check_re_inverse     : 0.125
  check_re_match       : 0.066
  check_set_all        : 0.104
  check_set_diff       : 0.051
  check_set_subset     : 0.046
  check_trans          : 0.017
</code></pre>

<p>The translate approach seems best in most cases, dramatically so with long valid strings, but is beaten out by regexes in test_long_invalid (Presumably because the regex can bail out immediately, but translate always has to scan the whole string).  The set approaches are usually worst, beating regexes only for the empty string case.</p>

<p>Using all(x in allowed_set for x in s) performs well if it bails out early, but can be bad if it has to iterate through every character.  isSubSet and set difference are comparable, and are consistently proportional to the length of the string regardless of the data.</p>

<p>There's a similar difference between the regex methods matching all valid characters and searching for invalid characters.  Matching performs a little better when checking for a long, but fully valid string, but worse for invalid characters near the end of the string.</p>
"
252087,"<p>I just came across <a href=""http://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey.limit_choices_to"">ForeignKey.limit_choices_to</a> in the Django docs.
Not sure yet how this works, but it might just be the right think here.</p>

<p><strong>Update:</strong> ForeignKey.limit_choices_to allows to specify either a constant, a callable or a Q object to restrict the allowable choices for the key. A constant obviously is no use here, since it knows nothing about the objects involved.</p>

<p>Using a callable (function or class method or any callable object) seem more promising. The problem remains how to access the necessary information form the HttpRequest object. Using <a href=""http://stackoverflow.com/questions/160009/django-model-limitchoicestouser-user"">thread local storage</a> may be a solution.</p>

<p><strong>2. Update:</strong> Here is what hast worked for me:</p>

<p>I created a middle ware as described in the link above. It extracts one or more arguments from the request's GET part, such as ""product=1"" and stores this information in the thread locals.</p>

<p>Next there is a class method in the model that reads the thread local variable and returns a list of ids to limit the choice of a foreign key field.</p>

<pre><code>@classmethod
def _product_list(cls):
    """"""
    return a list containing the one product_id contained in the request URL,
    or a query containing all valid product_ids if not id present in URL

    used to limit the choice of foreign key object to those related to the current product
    """"""
    id = threadlocals.get_current_product()
    if id is not None:
        return [id]
    else:
        return Product.objects.all().values('pk').query
</code></pre>

<p>It is important to return a query containing all possible ids if none was selected so the normal admin pages work ok.</p>

<p>The foreign key field is then declared as:</p>

<pre><code>product = models.ForeignKey(Product, limit_choices_to=dict(id__in=BaseModel._product_list))
</code></pre>

<p>The catch is that you have to provide the information to restrict the choices via the request. I don't see a way to access ""self"" here.</p>
"
142501,"<p>This will do the trick:</p>

<pre><code>dir(module) 
</code></pre>

<p>However, if you find it annoying to read the returned list, just use the following loop to get one name per line.</p>

<pre><code>for i in dir(module): print i
</code></pre>
"
324141,"<p>You can get what you want platform independently by using <a href=""http://docs.python.org/library/os.path.html#os.path.basename"" rel=""nofollow"">os.path.basename</a> to get the last part of a path and then use <a href=""http://docs.python.org/library/os.path.html#os.path.splitext"" rel=""nofollow"">os.path.splitext</a> to get the filename without extension.</p>

<pre><code>from os.path import basename, splitext

pathname = ""/adda/adas/sdas/hello.txt""
name, extension = splitext(basename(pathname))
print name # --&gt; ""hello""
</code></pre>

<p>Using <a href=""http://docs.python.org/library/os.path.html#os.path.basename"" rel=""nofollow"">os.path.basename</a> and <a href=""http://docs.python.org/library/os.path.html#os.path.splitext"" rel=""nofollow"">os.path.splitext</a> instead of str.split, or re.split is more proper (and therefore received more points then any other answer) because it does not break down on other <a href=""http://en.wikipedia.org/wiki/Path_(computing)#Representations_of_paths_by_operating_system_and_shell"" rel=""nofollow"">platforms that use different path separators (you would be surprised how varried this can be)</a>.</p>

<p>It also carries most points because it answers your question for ""one line"" precisely and is aesthetically more pleasing then your example (even though that is debatable as are all questions of taste) </p>
"
244116,"<p>If your class does not modify <code>__getitem__</code> or <code>__setitem__</code> for special attribute access all your attributes are stored in <code>__dict__</code> so you can do:</p>

<pre><code> nobj.__dict__ = oobj.__dict__.copy()    # just a shallow copy
</code></pre>

<p>If you use python properties you should look at <code>inspect.getmembers()</code> and filter out the ones you want to copy.</p>
"
254373,"<p>If you're going for even basic efficiency, you probably want to check the file size first:</p>

<pre><code>if os.path.getsize(filename1) == os.path.getsize(filename2):
  if open('filename1','r').read() == open('filename2','r').read():
    # Files are the same.
</code></pre>

<p>This saves you reading every line of two files that aren't even the same size, and thus can't be the same.</p>

<p>(Even further than that, you could call out to a fast MD5sum of each file and compare those, but that's not ""in Python"", so I'll stop here.)</p>
"
154640,"<p>There actually IS a way to do it in Python 2.3+, but it's a bit esoteric.  I don't know if you realize this, but you can do the following:</p>

<pre><code>$ unzip -l /tmp/example.zip
 Archive:  /tmp/example.zip
   Length     Date   Time    Name
 --------    ----   ----    ----
     8467  11-26-02 22:30   jwzthreading.py
 --------                   -------
     8467                   1 file
$ ./python
Python 2.3 (#1, Aug 1 2003, 19:54:32) 
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path.insert(0, '/tmp/example.zip')  # Add .zip file to front of path
&gt;&gt;&gt; import jwzthreading
&gt;&gt;&gt; jwzthreading.__file__
'/tmp/example.zip/jwzthreading.py'
</code></pre>

<p>According to the <a href=""http://docs.python.org/lib/module-zipimport.html"">zipimport</a> library:</p>

<blockquote>
  <p>Any files may be present in the ZIP archive, but only files .py and .py[co] are available for import. ZIP import of dynamic modules (.pyd, .so) is disallowed. Note that if an archive only contains .py files, Python will not attempt to modify the archive by adding the corresponding .pyc or .pyo file, meaning that if a ZIP archive doesn't contain .pyc files, importing may be rather slow.</p>
</blockquote>

<p>Thus, all you have to do is zip the files up, add the zipfile to your sys.path and then import them.</p>

<p>If you're building this for UNIX, you might also consider packaging your script using this recipe:  <a href=""http://code.activestate.com/recipes/497000/"">unix zip executable</a>, but note that you might have to tweak this if you plan on using stdin or reading anything from sys.args (it CAN be done without too much trouble).</p>

<p>In my experience performance doesn't suffer too much because of this, but you should think twice before importing any very large modules this way.</p>
"
85536,"<p><a href=""http://stackoverflow.com/questions/85451#85511"">Others</a> have answered re: time.time() vs. time.clock(). </p>

<p>However, if you're timing the execution of a block of code for benchmarking/profiling purposes, you should take a look at the <a href=""https://docs.python.org/library/timeit.html"" rel=""nofollow""><code>timeit</code> module</a>.</p>
"
105145,"<p>No - the GIL just protects python internals from multiple threads altering their state.  This is a very low-level of locking, sufficient only to keep python's own structures in a consistent state.  It doesn't cover the <em>application</em> level locking you'll need to do to cover thread safety in your own code.</p>

<p>The essence of locking is to ensure that a particular <em>block</em> of code is only executed by one thread.  The GIL enforces this for blocks the size of a single bytecode, but usually you want the lock to span a larger block of code than this.</p>
"
275463,"<p>Use daniel's solution if the set of encoded characters is relatively restricted.
Otherwise, use one of the numerous HTML-parsing libraries.</p>

<p>I like BeautifulSoup because it can handle malformed XML/HTML :</p>

<p><a href=""http://www.crummy.com/software/BeautifulSoup/"">http://www.crummy.com/software/BeautifulSoup/</a></p>

<p>for your question, there's an example in their <a href=""http://www.crummy.com/software/BeautifulSoup/documentation.html"">documentation</a> </p>

<pre><code>from BeautifulSoup import BeautifulStoneSoup
BeautifulStoneSoup(""Sacr&amp;eacute; bl&amp;#101;u!"", 
                   convertEntities=BeautifulStoneSoup.HTML_ENTITIES).contents[0]
# u'Sacr\xe9 bleu!'
</code></pre>
"
101787,"<p>Not at the moment and you would be lucky to get Jython to work soon. If you're planning to start your development now you would be better off with just sticking to Java for now on.</p>
"
280843,"<p><code>scipy</code> has what you want</p>

<pre><code>&gt;&gt;&gt; scipy.stats.distributions
&lt;module 'scipy.stats.distributions' from '/home/coventry/lib/python2.5/site-packages/scipy/stats/distributions.pyc'&gt;
&gt;&gt;&gt; scipy.stats.distributions.poisson.pmf(6, 2.6)
array(0.031867055625524499)
</code></pre>

<p>It's worth noting that it's pretty easy to calculate by hand, <a href=""http://www.scipy.org/doc/api_docs/SciPy.stats.distributions.html#poisson"">too</a>.</p>
"
328067,"<p>This should do it:</p>

<pre><code>image = pygame.Surface([640,480], pygame.SRCALPHA, 32)
image = image.convert_alpha()
</code></pre>

<p>Make sure that the color depth (32) stays explicitly set else this will not work.</p>
"
333727,"<p>Interestingly, the docstrings for the two are not completely the same in Python 2.5.1:</p>

<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; help(string.split)
Help on function split in module string:

split(s, sep=None, maxsplit=-1)
    split(s [,sep [,maxsplit]]) -&gt; list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string.  If maxsplit is given, splits at no more than
    maxsplit places (resulting in at most maxsplit+1 words).  If sep
    is not specified or is None, any whitespace string is a separator.

    (split and splitfields are synonymous)

&gt;&gt;&gt; help("""".split)
Help on built-in function split:

split(...)
    S.split([sep [,maxsplit]]) -&gt; list of strings

    Return a list of the words in the string S, using sep as the
    delimiter string.  If maxsplit is given, at most maxsplit
    splits are done. If sep is not specified or is None, any
    whitespace string is a separator.
</code></pre>

<p>Digging deeper, you'll see that the two forms are completely equivalent, as <a href=""http://svn.python.org/view/python/tags/r251/Lib/string.py?rev=54864&amp;view=markup"">string.split(s)</a> actually calls <a href=""http://svn.python.org/view/python/tags/r251/Objects/unicodeobject.c?rev=54864&amp;view=markup"">s.split()</a> (search for the <em>split</em>-functions).</p>
"
309563,"<p>Both <code>Exception</code> and <code>dict</code> are implemented in C.</p>

<p>I think you can test this the follwing way:</p>

<pre><code>&gt;&gt;&gt; class C(object): pass
...
&gt;&gt;&gt; '__module__' in C.__dict__
True
&gt;&gt;&gt; '__module__' in dict.__dict__
False
&gt;&gt;&gt; '__module__' in Exception.__dict__
False
</code></pre>

<p>Since <code>Exception</code> and <code>dict</code> have different ideas of how to store their data internally, they are not compatible and thus you cannot inherit from both at the same time.</p>

<p>In later versions of Python you should get an Exception the moment you try to define the class:</p>

<pre><code>&gt;&gt;&gt; class foo(dict, Exception):
...     pass
... 
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: Error when calling the metaclass bases
    multiple bases have instance lay-out conflict
</code></pre>
"
294480,"<p>You might want to have a look at the <a href=""http://docs.python.org/library/pwd.html"">pwd</a> module in the python stdlib, for example:</p>

<pre><code>import pwd
pw = pwd.getpwnam(""nobody"")
uid = pw.pw_uid
</code></pre>

<p>it uses /etc/passwd (well, technically it uses the posix C API, so I suppose it might work on an OS if it didn't use /etc/passwd but exposed the needed functions) but is cleaner than parsing it manually</p>
"
47266,"<p>There shouldn't be any need to use FastCGI. There exists a <a href=""https://github.com/hexdump42/isapi-wsgi"">ISAPI extension for WSGI</a>.</p>
"
541,"<p>We run <a href=""http://buildbot.net/trac"">Buildbot - Trac</a> at work, I haven't used it too much since my code base isn't part of the release cycle yet. But we run the tests on different environments (OSX/Linux/Win) and it sends emails --and it's written in python.</p>"
266000,"<p>I usually use something like this:</p>

<pre><code>&gt;&gt;&gt; s = ""string. With. Punctuation?"" # Sample string
&gt;&gt;&gt; import string
&gt;&gt;&gt; for c in string.punctuation:
...     s= s.replace(c,"""")
...
&gt;&gt;&gt; s
'string With Punctuation'
</code></pre>
"
294325,"<p>You can use <a href=""http://www.php.net/call_user_func_array""><code>call_user_func_array()</code></a> to achieve that:</p>

<p><code>call_user_func_array(""range"", $args);</code> to use your example.</p>
"
139070,"<p><strong>PyPNG - lightweight PNG decoder/encoder</strong></p>

<p>Although the question hints at JPG, I hope my answer will be useful to some people.</p>

<p>Here's how to read and write PNG pixels using <a href=""https://pypi.python.org/pypi/pypng/0.0.18"" rel=""nofollow"">PyPNG module</a>:</p>

<pre><code>import png, array

point = (2, 10) # coordinates of pixel to be painted red

reader = png.Reader(filename='image.png')
w, h, pixels, metadata = reader.read_flat()
pixel_byte_width = 4 if metadata['alpha'] else 3
pixel_position = point[0] + point[1] * w
new_pixel_value = (255, 0, 0, 0) if metadata['alpha'] else (255, 0, 0)
pixels[
  pixel_position * pixel_byte_width :
  (pixel_position + 1) * pixel_byte_width] = array.array('B', new_pixel_value)

output = open('image-with-red-dot.png', 'wb')
writer = png.Writer(w, h, **metadata)
writer.write_array(output, pixels)
output.close()
</code></pre>

<p>PyPNG is a single pure Python module less than 4000 lines long, including tests and comments.</p>

<p><a href=""http://www.pythonware.com/products/pil/"" rel=""nofollow"">PIL</a> is a more comprehensive imaging library, but it's also significantly heavier.</p>
"
157074,"<p>If you are using GNU Emacs 21 or before, or XEmacs, use python-mode.el. The GNU Emacs 22 python.el won't work on them. On GNU Emacs 22, python.el does work, and ties in better with GNU Emacs's own symbol parsing and completion, ElDoc, etc. I use XEmacs myself, so I don't use it, and I have heard people complain that it didn't work very nicely in the past, but there are updates available that fix some of the issues (for instance, on the emacswiki page you link), and you would hope some were integrated upstream by now. If I were the GNU Emacs kind, I would use python.el until I found specific reasons not to.</p>

<p>The python-mode.el's single biggest problem as far as I've seen is that it doesn't quite understand triple-quoted strings. It treats them as single-quoted, meaning that a single quote inside a triple-quoted string will throw off the syntax highlighting: it'll think the string has ended there. You may also need to change your auto-mode-alist to turn on python-mode for .py files; I don't remember if that's still the case but my init.el has been setting auto-mode-alist for many years now.</p>

<p>As for other addons, nothing I would consider 'essential'. XEmacs's func-menu is sometimes useful, it gives you a little function/class browser menu for the current file. I don't remember if GNU Emacs has anything similar. I have a rst-mode for reStructuredText editing, as that's used in some projects. Tying into whatever VC you use, if any, may be useful to you, but there is builtin support for most and easily downloaded .el files for the others.</p>
"
203514,"<p>Check out <a href=""http://www.pyinstaller.org/"">pyinstaller</a>, it makes standalone executables (as in one .EXE file, and that's it).</p>
"
221159,"<p>Complete locking solution using the <code>fcntl</code> module:</p>

<pre><code>import fcntl
pid_file = 'program.pid'
fp = open(pid_file, 'w')
try:
    fcntl.lockf(fp, fcntl.LOCK_EX | fcntl.LOCK_NB)
except IOError:
    # another instance is running
    sys.exit(1)
</code></pre>
"
116035,"<p>See <a href=""http://www.kohala.com/start/"">Stevens</a> and also this <a href=""http://code.activestate.com/recipes/278731/"">lengthy thread on activestate</a> which I found personally to be both mostly incorrect and much to verbose, and I came up with this:</p>

<pre><code>from os import fork, setsid, umask, dup2
from sys import stdin, stdout, stderr

if fork(): exit(0)
umask(0) 
setsid() 
if fork(): exit(0)

stdout.flush()
stderr.flush()
si = file('/dev/null', 'r')
so = file('/dev/null', 'a+')
se = file('/dev/null', 'a+', 0)
dup2(si.fileno(), stdin.fileno())
dup2(so.fileno(), stdout.fileno())
dup2(se.fileno(), stderr.fileno())
</code></pre>

<p>If you need to stop that process again, it is required to know the pid, the usual solution to this is pidfiles. Do this if you need one</p>

<pre><code>from os import getpid
outfile = open(pid_file, 'w')
outfile.write('%i' % getpid())
outfile.close()
</code></pre>

<p>For security reasons you might consider any of these after demonizing</p>

<pre><code>from os import setuid, setgid, chdir
from pwd import getpwnam
from grp import getgrnam
setuid(getpwnam('someuser').pw_uid)
setgid(getgrnam('somegroup').gr_gid)
chdir('/')
</code></pre>

<p>You could also use <a href=""http://en.wikipedia.org/wiki/Nohup"">nohup</a> but that does not work well with <a href=""http://docs.python.org/lib/module-subprocess.html"">python's subprocess module</a></p>
"
277933,"<p>I'm not overly familiar with boost::bind, but the <code>partial</code> function from <code>functools</code> may be a good start:</p>

<pre><code>&gt;&gt;&gt; from functools import partial

&gt;&gt;&gt; def f(a, b):
...     return a+b

&gt;&gt;&gt; p = partial(f, 1, 2)
&gt;&gt;&gt; p()
3

&gt;&gt;&gt; p2 = partial(f, 1)
&gt;&gt;&gt; p2(7)
8
</code></pre>
"
191455,"<p>This worked for me in a small test:</p>

<pre><code>sourceEncoding = ""iso-8859-1""
targetEncoding = ""utf-8""
source = open(""source"")
target = open(""target"", ""w"")

target.write(unicode(source.read(), sourceEncoding).encode(targetEncoding))
</code></pre>
"
79808,"<pre><code>def local_to_utc(t):
    secs = time.mktime(t)
    return time.gmtime(secs)

def utc_to_local(t):
    secs = calendar.timegm(t)
    return time.localtime(secs)
</code></pre>

<p>Source: <a href=""http://feihonghsu.blogspot.com/2008/02/converting-from-local-time-to-utc.html"">http://feihonghsu.blogspot.com/2008/02/converting-from-local-time-to-utc.html</a></p>

<p>Example usage from <a href=""http://stackoverflow.com/users/8171/bd808"">bd808</a>: If your source is a <code>datetime.datetime</code> object <code>t</code>, call as:</p>

<pre><code>local_to_utc(t.timetuple())
</code></pre>
"
184344,"<p>Perforce has Python wrappers around their C/C++ tools, available in binary form for Windows, and source for other platforms:</p>

<p><a href=""http://www.perforce.com/perforce/loadsupp.html#api"">http://www.perforce.com/perforce/loadsupp.html#api</a></p>

<p>You will find their documentation of the scripting API to be helpful:</p>

<p><a href=""http://www.perforce.com/perforce/doc.current/manuals/p4script/p4script.pdf"">http://www.perforce.com/perforce/doc.current/manuals/p4script/p4script.pdf</a></p>

<p>Use of the Python API is quite similar to the command-line client:</p>

<pre><code>PythonWin 2.5.1 (r251:54863, May  1 2007, 17:47:05) [MSC v.1310 32 bit (Intel)] on win32.
Portions Copyright 1994-2006 Mark Hammond - see 'Help/About PythonWin' for further copyright information.
&gt;&gt;&gt; import P4
&gt;&gt;&gt; p4 = P4.P4()
&gt;&gt;&gt; p4.connect() # connect to the default server, with the default clientspec
&gt;&gt;&gt; desc = {""Description"": ""My new changelist description"",
...         ""Change"": ""new""
...         }
&gt;&gt;&gt; p4.input = desc
&gt;&gt;&gt; p4.run(""changelist"", ""-i"")
['Change 2579505 created.']
&gt;&gt;&gt;
</code></pre>

<p>I'll verify it from the command line:</p>

<pre><code>P:\&gt;p4 changelist -o 2579505
# A Perforce Change Specification.
#
#  Change:      The change number. 'new' on a new changelist.
#  Date:        The date this specification was last modified.
#  Client:      The client on which the changelist was created.  Read-only.
#  User:        The user who created the changelist.
#  Status:      Either 'pending' or 'submitted'. Read-only.
#  Description: Comments about the changelist.  Required.
#  Jobs:        What opened jobs are to be closed by this changelist.
#               You may delete jobs from this list.  (New changelists only.)
#  Files:       What opened files from the default changelist are to be added
#               to this changelist.  You may delete files from this list.
#               (New changelists only.)

Change: 2579505

Date:   2008/10/08 13:57:02

Client: MYCOMPUTER-DT

User:   myusername

Status: pending

Description:
        My new changelist description
</code></pre>
"
241329,"<p>C (and C++) comments cannot be nested. Regular expressions work well:</p>

<pre><code>//.*?\n|/\*.*?\*/
</code></pre>

<p>This requires the âSingle lineâ flag (<code>Re.S</code>) because a C comment can span multiple lines.</p>

<pre><code>def stripcomments(text):
    return re.sub('//.*?\n|/\*.*?\*/', '', text, re.S)
</code></pre>

<p>This code should work.</p>

<p>/EDIT: Notice that my above code actually makes an assumption about line endings! This code won't work on a Mac text file. However, this can be amended relatively easily:</p>

<pre><code>//.*?(\r\n?|\n)|/\*.*?\*/
</code></pre>

<p>This regular expression should work on all text files, regardless of their line endings (covers Windows, Unix and Mac line endings).</p>

<p>/EDIT: MizardX and Brian (in the comments) made a valid remark about the handling of strings. I completely forgot about that because the above regex is plucked from a parsing module that has additional handling for strings. MizardX's solution should work very well but it only handles double-quoted strings.</p>
"
269105,"<p>You may be interested in <a href=""http://pypi.python.org/pypi/chardet"">Universal Encoding Detector</a>.</p>
"
341389,"<p>I believe python decorators are just syntactic sugar.</p>

<pre><code>@foo
def bar ():
    pass
</code></pre>

<p>is the same thing as</p>

<pre><code>def bar ():
    pass
bar = foo(bar)
</code></pre>

<p>As you can see, <em>foo</em> is being called even though <em>bar</em> has not been called. This is why you see the output from your decorator function. Your output should contain a single line for every function you applied your decorator to.</p>
"
138709,"<p>vim supports scripting in python (and in perl as well, I think).</p>

<p>You just have to make sure that the vim distribution you are using has been compiled with python support.</p>

<p>If you are using a Linux system, you can download the source and then compile it with</p>

<pre><code>./configure --enable-pythoninterp 
make
sudo make install
</code></pre>

<p>Inside vim, you can type</p>

<pre><code>:version
</code></pre>

<p>to list the available features; if it has python support, you should see a '+python' somewhere (a '-python' otherwise).</p>

<p>Then, to check the usage of the python module, you can type</p>

<pre><code>:help python
</code></pre>

<p>P.S: if you're going to compile the vim sources, make sure to check the available configure options, you might need to specify --with-python-config-dir as well.</p>

<p>P.P.S: to create a ""custom command in command mode"" (if I understand correctly what you mean), you can create a function ""MyFunction"" in a vim script (using python or the vim scripting language) and then invoke it with </p>

<pre><code>:Call MyFunction()
</code></pre>

<p>Check </p>

<pre><code>:help user-functions
</code></pre>

<p>for details</p>
"
301165,"<p>Use the <a href=""http://docs.python.org/library/imp.html#imp.load_module"">imp module</a>, or the more direct <a href=""http://docs.python.org/library/functions.html#__import__""><code>__import__()</code></a> function.</p>
"
344002,"<p>Well, in theory there is nothing you can do with Pygame that you can't with wxPython. The point is not what but how. In my opinion, it's easier to write a game with PyGame becasue:</p>

<ul>
<li><p>It's faster. Pygame is based on SDL which is a C library specifically designed for games, it has been developed with speed in mind. When you develop games, you need speed.</p></li>
<li><p>Is a game library, not a general purpose canvas, It has classes and functions useful for sprites, transformations, input handling, drawing, collision detection. It also implements algorithms and techniques often used in games like dirty rectangles, page flipping, etc. </p></li>
<li><p>There are <a href=""http://pygame.org/tags/"">thousands of games</a> and examples made with it. It will be easier for you to discover how to do any trick.</p></li>
<li><p>There are a lot of <a href=""http://pygame.org/tags/libraries"">libraries</a> with effects and utilities you could reuse. You want an isometric game, there is a library, you want a physics engine, there is a library, you what some cool visual effect, there is a library.</p></li>
<li><p><a href=""http://www.pyweek.org/"">PyWeek</a>. :) This is to make the development of your game even funnier!</p></li>
</ul>

<p>For some very simple games like Tetris, the difference won't be too much, but if you want to develop a fairly complex game, believe me, you will want something like PyGame.</p>
"
129528,"<p>Your code should follow this pattern (this is a unittest module style test):</p>

<pre><code>def test_afunction_throws_exception(self):
    try:
        afunction()
    except ExpectedException:
        pass
    except Exception as e:
       self.fail('Unexpected exception raised:', e)
    else:
       self.fail('ExpectedException not raised')
</code></pre>

<p>On Python &lt; 2.7 this construct is useful for checking for specific values in the expected exception. The unittest function <code>assertRaises</code> only checks if an exception was raised.</p>
"
197158,"<p>Since you say ""NOT interpreter"" in your question, I guess you don't want answers involving python readline and suchlike. (<strong><em>edit</strong>: in hindsight, that's obviously not the case. Ho hum. I think this info is interesting anyway, so I'll leave it here.</em>)</p>

<p>I think you might be after <a href=""http://www.debian-administration.org/articles/317"">this</a>.</p>

<p>It's about adding shell-level completion to arbitrary commands, extending bash's own tab-completion.</p>

<p>In a nutshell, you'll create a file containing a shell-function that will generate possible completions, save it into <code>/etc/bash_completion.d/</code> and register it with the command <code>complete</code>. Here's a snippet from the linked page:</p>

<pre><code>_foo() 
{
    local cur prev opts
    COMPREPLY=()
    cur=""${COMP_WORDS[COMP_CWORD]}""
    prev=""${COMP_WORDS[COMP_CWORD-1]}""
    opts=""--help --verbose --version""

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W ""${opts}"" -- ${cur}) )
        return 0
    fi
}
complete -F _foo foo
</code></pre>

<p>In this case, the typing <code>foo --[TAB]</code> will give you the values in the variable <code>opts</code>, i.e. <code>--help</code>, <code>--verbose</code> and <code>--version</code>. For your purposes, you'll essentially want to customise the values that are put into <code>opts</code>.</p>

<p>Do have a look at the example on the linked page, it's all pretty straightforward. </p>
"
295676,"<p>A <a href=""http://msdn.microsoft.com/en-us/library/wa80x488.aspx"">partial type</a> (it doesn't have to be a class; structs and interfaces can be partial too) is basically a single type which has its code spread across multiple files.</p>

<p>The main use for this is to allow a code generator (e.g. a Visual Studio designer) to ""own"" one file, while hand-written code is put in another.</p>

<p>I've no idea whether Python/Perl have the same capabilities, I'm afraid.</p>
"
335626,"<p>In python, this is called ""unpacking"", and you can find a bit about it in the <a href=""https://docs.python.org/2/tutorial/controlflow.html#unpacking-argument-lists"">tutorial</a>. The documentation of it sucks, I agree, especially because of how fantasically useful it is.</p>
"
1987,"<p>The list [1,2,3] is dynamic and flexible but that flexibility comes at a speed cost.</p>

<p>The tuple (1,2,3) is fixed (immutable) and therefore faster.</p>
"
81002,"<p>You can also add class variables to classes on the fly</p>

<pre><code>&gt;&gt;&gt; class X:
...     pass
... 
&gt;&gt;&gt; X.bar = 0
&gt;&gt;&gt; x = X()
&gt;&gt;&gt; x.bar
0
&gt;&gt;&gt; x.foo
Traceback (most recent call last):
  File ""&lt;interactive input&gt;"", line 1, in &lt;module&gt;
AttributeError: X instance has no attribute 'foo'
&gt;&gt;&gt; X.foo = 1
&gt;&gt;&gt; x.foo
1
</code></pre>

<p>And class instances can change class variables</p>

<pre><code>class X:
  l = []
  def __init__(self):
    self.l.append(1)

print X().l
print X().l

&gt;python test.py
[1]
[1, 1]
</code></pre>
"
5985,"<p>I have reproduced what you are seeing:</p>

<pre><code>import urllib, os<br>link = ""http://python.org""<br>print ""opening url:"", link<br>site = urllib.urlopen(link)<br>meta = site.info()<br>print ""Content-Length:"", meta.getheaders(""Content-Length"")[0]<br><br>f = open(""out.txt"", ""r"")<br>print ""File on disk:"",len(f.read())<br>f.close()<br><br><br>f = open(""out.txt"", ""w"")<br>f.write(site.read())<br>site.close()<br>f.close()<br><br>f = open(""out.txt"", ""r"")<br>print ""File on disk after download:"",len(f.read())<br>f.close()<br><br>print ""os.stat().st_size returns:"", os.stat(""out.txt"").st_size<br></code></pre>

<p>Outputs this:</p>

<pre><code>opening url: http://python.org<br>Content-Length: 16535<br>File on disk: 16535<br>File on disk after download: 16535<br>os.stat().st_size returns: 16861<br></code></pre>

<p>What am I doing wrong here? Is os.stat().st_size not returning the correct size?</p>

<hr>

<p>Edit:
OK, I figured out what the problem was:</p>

<pre><code>import urllib, os<br>link = ""http://python.org""<br>print ""opening url:"", link<br>site = urllib.urlopen(link)<br>meta = site.info()<br>print ""Content-Length:"", meta.getheaders(""Content-Length"")[0]<br><br>f = open(""out.txt"", ""rb"")<br>print ""File on disk:"",len(f.read())<br>f.close()<br><br><br>f = open(""out.txt"", ""wb"")<br>f.write(site.read())<br>site.close()<br>f.close()<br><br>f = open(""out.txt"", ""rb"")<br>print ""File on disk after download:"",len(f.read())<br>f.close()<br><br>print ""os.stat().st_size returns:"", os.stat(""out.txt"").st_size<br></code></pre>

<p>this outputs:</p>

<pre><code>$ python test.py<br>opening url: http://python.org<br>Content-Length: 16535<br>File on disk: 16535<br>File on disk after download: 16535<br>os.stat().st_size returns: 16535<br></code></pre>

<p>Make sure you are opening both files for binary read/write.</p>

<pre><code>// open for binary write<br>open(filename, ""wb"")<br>// open for binary read<br>open(filename, ""rb"")<br></code></pre>"
308982,"<p>Rich,</p>

<p>Lists and dicts are beasts suitable for different needs. Make sure you don't use lists for linear searches where dicts hashes are perfect, because it's way slower. Also, if you just need a list of elements to traverse, don't use dicts because it will take much more space than lists.</p>

<p>That may sound obvious, but picking the correct data structures algorithmically has much higher performance gains that micro-optimization due to more efficient compiled code layouts, etc. If you search in a list in O(n) instead of in a dict in O(1), micro-optimizations won't save you.</p>
"
262937,"<p>Do not rely on obfuscation. As You have correctly concluded, it offers very limited protection.
UPDATE: Here is a <a href=""https://www.usenix.org/system/files/conference/woot13/woot13-kholia.pdf"">link to paper</a> which reverse engineered obfuscated python code in Dropbox. The approach - opcode remapping is a good barrier, but clearly it can be defeated.</p>

<p>Instead, as many posters have mentioned make it:</p>

<ul>
<li>Not worth reverse engineering time (Your software is so good, it makes sense to pay)</li>
<li>Make them sign a contract and do a license audit if feasible. </li>
</ul>

<p>Alternatively, as the kick-ass Python IDE WingIDE does: <strong>Give away the code</strong>. That's right, give the code away and have people come back for upgrades and support.</p>
"
248857,"<p>The interior call to getPermutations -- it's a generator, too.</p>

<pre><code>def getPermutations(string, prefix=""""):
   if len(string) == 1:
      yield prefix + string            
   else:
      for i in range(len(string)):
         getPermutations(string[:i]+string[i+1:], prefix+string[i])  # &lt;-----
</code></pre>

<p>You need to iterate through that with a for-loop (see @MizardX posting, which edged me out by seconds!)</p>
"
287215,"<p>If your program is usable as a library but you also have a main program (e.g. to test the library), that construct lets others import the file as a library and not run your main program. If your program is named foo.py and you do ""import foo"" from another python file, <code>__name__</code> evaluates to <code>'foo'</code>, but if you run ""python foo.py"" from the command line, <code>__name__</code> evaluates to <code>'__main__'</code>.</p>

<p>Note that you do need to insert a space between if and _, and indent the main program:</p>

<pre><code>if __name__ == '__main__':
    main program here
</code></pre>
"
144096,"<p>The main problems with indentation occur when you mix tabs and spaces.  Obviously this doesn't tell you which you should choose, but it is a good reason to to recommend one, even if you pick it by flipping a coin.</p>

<p>However, IMHO there are a few minor reasons to favour spaces over tabs:</p>

<ul>
<li><p>Different tools.  Sometimes code gets displayed outside of a programmer's editor.  Eg. posted to a newsgroup or forum.  Spaces generally do better than tabs here - everywhere spaces would get mangled, tabs do as well, but not vice-versa.</p></li>
<li><p>Programmers see the source differently.  This is deeply subjective - its either the main benefit of tabs, or a reason to avoid them depending on which side you're on.  On the plus side, developers can view the source with their preferred indentation, so a developer preferring 2-space indent can work with an 8-space developer on the same source and still see it as they like.  The downside is that there are repercussions to this - some people like 8-space because it gives very visible feedback that they're too deeply nested - they may see code checked in by the 2-indenter constantly wrapping in their editor.  Having every developer see the code the same way leads to more consistency wrt line lengths, and other matters too.</p></li>
<li><p>Continued line indentation.  Sometimes you want to indent a line to indicate it is carried from the previous one.  eg.</p>

<pre><code>def foo():
    x = some_function_with_lots_of_args(foo, bar, baz,
                                        xyzzy, blah)
</code></pre>

<p>If using tabs, theres no way to align this for people using different tabstops in their editor without mixing spaces and tabs.  This effectively kills the above benefit.</p></li>
</ul>

<p>Obviously though, this is a deeply religious issue, which programming is plagued with.  The most important issue is that we should choose one - even if thats not the one you favour.  Sometimes I think that the biggest advantage of significant indentation is that at least we're spared brace placement flamewars.</p>

<p>Also worth reading is <a href=""http://www.jwz.org/doc/tabs-vs-spaces.html"">this</a> article by Jamie Zawinski on the issue.</p>
"
61551,"<p>I've settled with a combination of both answers:</p>

<pre><code>dict((key, value) for key, value in f.__dict__.iteritems() 
    if not callable(value) and not key.startswith('__'))
</code></pre>
"
178590,"<p>The array module is kind of one of those things that you probably don't have a need for if you don't know why you would use it (and take note that I'm not trying to say that in a condescending manner!).  Most of the time, the array module is used to interface with C code.  To give you a more direct answer to your question about performance:</p>

<p>Arrays are more efficient than lists for some uses.  If you need to allocate an array that you KNOW will not change, then arrays can be faster and use less memory.  GvR has an <a href=""http://www.python.org/doc/essays/list2str/"">optimization anecdote</a> in which the array module comes out to be the winner (long read, but worth it).</p>

<p>On the other hand, part of the reason why lists eat up more memory than arrays is because python will allocate a few extra elements when all allocated elements get used.  This means that appending items to lists is faster.  So if you plan on adding items, a list is the way to go.</p>

<p>TL;DR I'd only use an array if you had an exceptional optimization need or you need to interface with C code (and can't use <a href=""http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/"">pyrex</a>).</p>
"
51511,"<p>I'm no Django expert, so this answer is about session stores generally. Downvote if I'm wrong.</p>

<h2>Performance and Scalability</h2>

<p>Choice of session store has an effect on performance and scalability. This should only be a big problem if you have a very popular application.</p>

<p>Both database and filesystem session stores are (usually) backed by disks so you can have a lot of sessions cheaply (because disks are cheap), but requests will often have to wait for the data to be read (because disks are slow). Memcached sessions use RAM, so will cost more to support the same number of concurrent sessions (because RAM is expensive), but may be faster (because RAM is fast).</p>

<p>Filesystem sessions are tied to the box where your application is running, so you can't load balance between multiple application servers if your site gets huge. Database and memcached sessions let you have multiple application servers talking to a shared session store.</p>

<h2>Simplicity</h2>

<p>Choice of session store will also impact how easy it is to deploy your site. Changing away from the default will cost some complexity. Memcached and RDBMSs both have their own complexities, but your application is probably going to be using an RDBMS anyway.</p>

<p>Unless you have a very popular application, simplicity should be the larger concern.</p>

<h2>Bonus</h2>

<p>Another approach is to store <a href=""https://docs.djangoproject.com/en/1.8/topics/http/sessions/#using-cookie-based-sessions"" rel=""nofollow"">session data in cookies</a> (all of it, not just an ID). This has the advantage that the session store automatically scales with the number of users, but it has disadvantages too. You (or your framework) need to be careful to stop users forging session data. You also need to keep each session small because the whole thing will be sent with every request.</p>
"
178224,"<p>PHP arrays are actually maps, which is equivalent to dicts in Python.</p>

<p>Thus, this is the Python equivalent:</p>

<p><code>showlist = [{'id':1, 'name':'Sesaeme Street'}, {'id':2, 'name':'Dora the Explorer'}]</code></p>

<p>Sorting example:</p>

<pre><code>from operator import attrgetter

showlist.sort(key=attrgetter('id'))
</code></pre>

<p>BUT!  With the example you provided, a simpler datastructure would be better:</p>

<pre><code>shows = {1: 'Sesaeme Street', 2:'Dora the Explorer'}
</code></pre>
"
154790,"<p><a href=""https://github.com/pediapress/mwlib"" rel=""nofollow"">mwlib</a> provides ways of converting MediaWiki formatted text into HTML, PDF, DocBook and OpenOffice formats.</p>
"
35777,"<p>You'll find mostly two answers to that &ndash; the religous one (Yes! Of course! It's the best language ever!) and the other religious one (you gotta be kidding me! Python? No... it's not mature enough). I will maybe skip the last religion (Python?! Use Ruby!). The truth, as always, is far from obvious. </p>

<p><strong>Pros</strong>: it's easy, readable, batteries included, has lots of good libraries for pretty much everything. It's expressive and dynamic typing makes it more concise in many cases.</p>

<p><strong>Cons</strong>: as a dynamic language, has way worse IDE support (proper syntax completion <strong>requires</strong> static typing, whether explicit in Java or inferred in SML), its object system is far from perfect (interfaces, anyone?) and it is easy to end up with messy code that has methods returning either int or boolean or object or some sort under unknown circumstances.</p>

<p>My take &ndash; I love Python for scripting, automation, tiny webapps and other simple well defined tasks. In my opinion it is by far <strong>the best</strong> dynamic language on the planet. That said, I would <strong>never</strong> use it <strong>any</strong> dynamically typed language to develop an application of substantial size.</p>

<p>Say &ndash; it would be fine to use it for Stack Overflow, which has three developers and I guess no more than 30k lines of code. For bigger things &ndash; first your development would be super fast, and then once team and codebase grow things are slowing down more than they would with Java or C#. You need to offset lack of compilation time checks by writing more unittests, refactorings get harder cause you never know what your refacoring broke until you run all tests or even the whole big app, etc.</p>

<p>Now &ndash; decide on how big your team is going to be and how big the app is supposed to be once it is done. If you have 5 or less people and the target size is roughly Stack Overflow, go ahead, write in Python. You will finish in no time and be happy with good codebase. But if you want to write second Google or Yahoo, you will be much better with C# or Java.</p>

<p>Side-note on C/C++ you have mentioned: if you are not writing performance critical software (say massive parallel raytracer that will run for three months rendering a film) or a very mission critical system (say Mars lander that will fly three years straight and has only one chance to land right or you lose $400mln) do not use it. For web apps, most desktop apps, most apps in general it is not a good choice. You will die debugging pointers and memory allocation in complex business logic.</p>
"
122377,"<p>As others have noted, <code>distutils.sysconfig</code> has the relevant settings:</p>

<pre><code>import distutils.sysconfig
print distutils.sysconfig.get_python_lib()
</code></pre>

<p>...though the default <code>site.py</code> does something a bit more crude, paraphrased below:</p>

<pre><code>import sys, os
print os.sep.join([sys.prefix, 'lib', 'python' + sys.version[:3], 'site-packages'])
</code></pre>

<p>(it also adds <code>${sys.prefix}/lib/site-python</code> and adds both paths for <code>sys.exec_prefix</code> as well, should that constant be different).</p>

<p>That said, what's the context? You shouldn't be messing with your <code>site-packages</code> directly; setuptools/distutils will work for installation, and your program may be running in a virtualenv where your pythonpath is completely user-local, so it shouldn't assume use of the system site-packages directly either.</p>
"
72470,"<p>In Python, there's a distinction between ""match"" and ""search""; match only looks for the pattern at the start of the string, and search looks for the pattern starting at any location within the string.</p>

<p><a href=""http://docs.python.org/lib/module-re.html"" rel=""nofollow"">Python regex docs</a><br />
<a href=""http://docs.python.org/lib/matching-searching.html"" rel=""nofollow"">Matching vs searching</a></p>
"
337735,"<p>If I understand what you're asking correctly,</p>

<pre><code>qset.filter(**{
    'min_price_' + selected_currency + '_range' :
    (min_price, max_price)})
</code></pre>

<p>does what you need.</p>
"
142251,"<p>In Python 3.0:</p>

<pre><code>import io

with io.StringIO() as f:
    f.write('abcdef')
    print('gh', file=f)
    f.seek(0)
    print(f.read())
</code></pre>
"
280083,"<p>If reading the whole file is acceptable then use a deque.</p>

<pre><code>from collections import deque
deque(f, maxlen=n)
</code></pre>

<p>Prior to 2.6, deques didn't have a maxlen option, but it's easy enough to implement.</p>

<pre><code>import itertools
def maxque(items, size):
    items = iter(items)
    q = deque(itertools.islice(items, size))
    for item in items:
    	del q[0]
    	q.append(item)
    return q
</code></pre>

<p>If it's a requirement to read the file from the end, then use a gallop (a.k.a exponential) search.</p>

<pre><code>def tail(f, n):
    assert n &gt;= 0
    pos, lines = n+1, []
    while len(lines) &lt;= n:
    	try:
    		f.seek(-pos, 2)
    	except IOError:
    		f.seek(0)
    		break
    	finally:
    		lines = list(f)
    	pos *= 2
    return lines[-n:]
</code></pre>
"
163968,"<p>According to the documentation, you can only display the <code>__unicode__</code> representation of a ForeignKey:</p>

<p><a href=""http://docs.djangoproject.com/en/dev/ref/contrib/admin/#list-display"">http://docs.djangoproject.com/en/dev/ref/contrib/admin/#list-display</a></p>

<p>Seems odd that it doesn't support the <code>'book__author'</code> style format which is used everywhere else in the DB API.</p>

<p>Turns out there's <a href=""http://code.djangoproject.com/ticket/5863"">a ticket for this feature</a>, which is marked as Won't Fix.</p>
"
48734,"<p>I would say that it depends: if you find that using Glade you can build the apps you want or need to make than that's absolutely fine. If however you actually want to learn how GTK works or you have some non-standard UI requirements you will <strong>have</strong> to dig into GTK internals (which are not that complicated).</p>

<p>Personally I'm usually about 5 minutes into a rich client when I need some feature or customization that is simply impossible through a designer such as Glade or <a href=""http://www.mono-project.com/Stetic"">Stetic</a>. Perhaps it's just me. Nevertheless it is still useful for me to bootstrap window design using a graphical tool.</p>

<p>My recommendation: if making rich clients using GTK is going to be a significant part of your job/hobby then learn GTK as well since you <strong>will</strong> need to write that code someday.</p>

<p>P.S. I personally find <a href=""http://www.mono-project.com/Stetic"">Stetic</a> to be superior to Glade for design work, if a little bit more unstable.</p>
"
171779,"<p>To expand on what Shimi has said, you should only be running your loop from 1 to the square root of n. Then to find the pair, do <code>n / i</code>, and this will cover the whole problem space.</p>

<p>As was also noted, this is a NP, or 'difficult' problem. Exhaustive search, the way you are doing it, is about as good as it gets for guaranteed answers. This fact is used by encryption algorithms and the like to help secure them. If someone were to solve this problem, most if not all of our current 'secure' communication would be rendered insecure.</p>

<p>Python code:</p>

<pre><code>import math

def divisorGenerator(n):
    large_divisors = []
    for i in xrange(1, int(math.sqrt(n) + 1)):
        if n % i == 0:
            yield i
            if i*i != n:
                large_divisors.append(n / i)
    for divisor in reversed(large_divisors):
        yield divisor

print list(divisorGenerator(100))
</code></pre>

<p>Which should output a list like:</p>

<pre>
[1, 2, 4, 5, 10, 20, 25, 50, 100]
</pre>
"
255344,"<p>You could use the finditer() function.  This will give you a sequence of match objects, so you can get the groupdict for each with:</p>

<pre><code>[m.groupdict() for m in regex.finditer(search_string)]
</code></pre>
"
244104,"<p>There is no idiom that I know of, but here is a fairly natural definition using an infix operator:</p>

<pre><code># let (--) i j = 
    let rec aux n acc =
      if n &lt; i then acc else aux (n-1) (n :: acc)
    in aux j [] ;;
      val ( -- ) : int -&gt; int -&gt; int list = &lt;fun&gt;
# 1--2;;
- : int list = [1; 2]
# 1--5;;
- : int list = [1; 2; 3; 4; 5]
# 5--10;;
- : int list = [5; 6; 7; 8; 9; 10]
</code></pre>

<p>Alternatively, the <a href=""http://dutherenverseauborddelatable.wordpress.com/downloads/comprehension-for-ocaml/"">comprehensions syntax extension</a> (which gives the syntax <code>[i .. j]</code> for the above) is likely to be included in a future release of the <a href=""http://forge.ocamlcore.org/projects/batteries/"">""community version"" of OCaml</a>, so that may become idiomatic. I don't recommend you start playing with syntax extensions if you are new to the language, though.</p>
"
240202,"<pre><code> [[1] * 4] * 3
</code></pre>

<p>or even</p>

<pre><code> [[1, 1, 1, 1]] * 3
</code></pre>

<p>Creates a list that references the internal <code>[1,1,1,1]</code> 3 times - not three copies of the inner list, so any time you modify the list (in any position), you'll see the change three times.</p>

<p>It's the same as this example:</p>

<pre><code>&gt;&gt;&gt; inner = [1,1,1,1]
&gt;&gt;&gt; outer = [inner]*3
&gt;&gt;&gt; outer
[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]
&gt;&gt;&gt; inner[0] = 5
&gt;&gt;&gt; outer
[[5, 1, 1, 1], [5, 1, 1, 1], [5, 1, 1, 1]]
</code></pre>

<p>where it's probably a little less surprising.</p>
"
277306,"<p>I've used both (for the same project): Boost is better integrated with the STL, and especially C++ exceptions.  Also, its memory management mechanism (which tries to bridge C++ memory management and Python GC) is way more flexible than SWIG's.  However, SWIG has <em>much</em> better documentation, no external dependencies, and if you get the library wrapped in SWIG for Python you're more than half-way there to getting a Java/Perl/Ruby wrapper as well.</p>

<p>I don't think there's a clear-cut choice: for smaller projects, I'd go with Boost.Python again, for larger long-lived projects, the extra investment in SWIG is worth it.</p>
"
108404,"<p>You could use Q objects for #1:</p>

<pre><code># Blogs who have either hockey or django tags.
from django.db.models import Q
Blog.objects.filter(
    Q(tags__name__iexact='hockey') | Q(tags__name__iexact='django')
)
</code></pre>

<p>Unions and intersections, I believe, are a bit outside the scope of the Django ORM, but its possible to to these.  The following examples are from a Django application called called <a href=""http://code.google.com/p/django-tagging/"">django-tagging</a> that provides the functionality. <a href=""http://code.google.com/p/django-tagging/source/browse/trunk/tagging/models.py#346"">Line 346 of models.py</a>: </p>

<p>For part two, you're looking for a union of two queries, basically</p>

<pre><code>def get_union_by_model(self, queryset_or_model, tags):
    """"""
    Create a ``QuerySet`` containing instances of the specified
    model associated with *any* of the given list of tags.
    """"""
    tags = get_tag_list(tags)
    tag_count = len(tags)
    queryset, model = get_queryset_and_model(queryset_or_model)

    if not tag_count:
        return model._default_manager.none()

    model_table = qn(model._meta.db_table)
    # This query selects the ids of all objects which have any of
    # the given tags.
    query = """"""
    SELECT %(model_pk)s
    FROM %(model)s, %(tagged_item)s
    WHERE %(tagged_item)s.content_type_id = %(content_type_id)s
      AND %(tagged_item)s.tag_id IN (%(tag_id_placeholders)s)
      AND %(model_pk)s = %(tagged_item)s.object_id
    GROUP BY %(model_pk)s"""""" % {
        'model_pk': '%s.%s' % (model_table, qn(model._meta.pk.column)),
        'model': model_table,
        'tagged_item': qn(self.model._meta.db_table),
        'content_type_id': ContentType.objects.get_for_model(model).pk,
        'tag_id_placeholders': ','.join(['%s'] * tag_count),
    }

    cursor = connection.cursor()
    cursor.execute(query, [tag.pk for tag in tags])
    object_ids = [row[0] for row in cursor.fetchall()]
    if len(object_ids) &gt; 0:
        return queryset.filter(pk__in=object_ids)
    else:
        return model._default_manager.none()
</code></pre>

<p>For part #3 I believe you're looking for an intersection. See <a href=""http://code.google.com/p/django-tagging/source/browse/trunk/tagging/models.py#307"">line 307 of models.py</a> </p>

<pre><code>def get_intersection_by_model(self, queryset_or_model, tags):
    """"""
    Create a ``QuerySet`` containing instances of the specified
    model associated with *all* of the given list of tags.
    """"""
    tags = get_tag_list(tags)
    tag_count = len(tags)
    queryset, model = get_queryset_and_model(queryset_or_model)

    if not tag_count:
        return model._default_manager.none()

    model_table = qn(model._meta.db_table)
    # This query selects the ids of all objects which have all the
    # given tags.
    query = """"""
    SELECT %(model_pk)s
    FROM %(model)s, %(tagged_item)s
    WHERE %(tagged_item)s.content_type_id = %(content_type_id)s
      AND %(tagged_item)s.tag_id IN (%(tag_id_placeholders)s)
      AND %(model_pk)s = %(tagged_item)s.object_id
    GROUP BY %(model_pk)s
    HAVING COUNT(%(model_pk)s) = %(tag_count)s"""""" % {
        'model_pk': '%s.%s' % (model_table, qn(model._meta.pk.column)),
        'model': model_table,
        'tagged_item': qn(self.model._meta.db_table),
        'content_type_id': ContentType.objects.get_for_model(model).pk,
        'tag_id_placeholders': ','.join(['%s'] * tag_count),
        'tag_count': tag_count,
    }

    cursor = connection.cursor()
    cursor.execute(query, [tag.pk for tag in tags])
    object_ids = [row[0] for row in cursor.fetchall()]
    if len(object_ids) &gt; 0:
        return queryset.filter(pk__in=object_ids)
    else:
        return model._default_manager.none()
</code></pre>
"
292770,"<p>The standard approach is to use the <a href=""https://docs.python.org/2/library/select.html"" rel=""nofollow"">select</a> module.</p>

<p>However, this doesn't work on Windows.  For that, you can use the <a href=""https://docs.python.org/2/library/msvcrt.html#console-i-o"" rel=""nofollow"">msvcrt</a> module's keyboard polling.</p>

<p>Often, this is done with multiple threads -- one per device being ""watched"" plus the background processes that might need to be interrupted by the device.</p>
"
139469,"<p>A callable is an object allows you to use round parenthesis ( ) and eventually pass some parameters, just like functions.</p>

<p>Every time you define a function python creates a callable object. 
In example, you could define the function <strong>func</strong> in these ways (it's the same):</p>

<pre><code>class a(object):
    def __call__(self, *args):
        print 'Hello'

func = a()

# or ... 
def func(*args):
    print 'Hello'
</code></pre>

<p>You could use this method instead of methods like <strong>doit</strong> or <strong>run</strong>, I think it's just more clear to see obj() than obj.doit()</p>
"
260901,"<p>Your best bet is probably to use <a href=""http://www.pygame.org"" rel=""nofollow"">pygame/SDL</a>. It's an external library, but it has great support across platforms.</p>

<pre><code>pygame.mixer.init()
pygame.mixer.music.load(""file.mp3"")
pygame.mixer.music.play()
</code></pre>

<p>You can find more specific documentation about the audio mixer support in the <a href=""http://www.pygame.org/docs/ref/music.html"" rel=""nofollow"">pygame.mixer.music documentation</a></p>
"
330087,"<p>There's an <a href=""http://pypi.python.org/pypi/django-tinymce/"">add-on Django application</a> to provide <a href=""http://tinymce.moxiecode.com/"">TinyMCE</a> support for Django admin forms without having to muck around with admin templates or Django newform internals.</p>
"
275124,"<p>Also if you want to do smtp auth with TLS as opposed to SSL then you just have to change the port (use 587) and do smtp.starttls().  This worked for me:</p>

<pre><code>...
smtp.connect('YOUR.MAIL.SERVER', 587)
smtp.ehlo()
smtp.starttls()
smtp.ehlo()
smtp.login('USERNAME@DOMAIN', 'PASSWORD')
...
</code></pre>
"
306347,"<p>I think your hypotheses is correct. Experiment with id (identity of object)..</p>

<pre><code>In [1]: id(255)
Out[1]: 146349024

In [2]: id(255)
Out[2]: 146349024

In [3]: id(257)
Out[3]: 146802752

In [4]: id(257)
Out[4]: 148993740

In [5]: a=255

In [6]: b=255

In [7]: c=257

In [8]: d=257

In [9]: id(a), id(b), id(c), id(d)
Out[9]: (146349024, 146349024, 146783024, 146804020)
</code></pre>

<p>It appears that numbers &lt;= 255 are treated as literals and anything above is treated differently!</p>
"
307263,"<p>Functions only become methods at runtime.  That is, when you get <code>C.f</code> you get a bound function (and <code>C.f.im_class is C</code>).  At the time your function is defined it is just a plain function, it is not bound to any class.  This unbound and disassociated function is what is decorated by logger.</p>

<p><code>self.__class__.__name__</code> will give you the name of the class, but you can also use descriptors to accomplish this in a somewhat more general way.  This pattern is described <a href=""http://blog.ianbicking.org/2008/10/24/decorators-and-descriptors/"">in a blog post on Decorators and Descriptors</a>, and an implementation of your logger decorator in particular would look like:</p>

<pre><code>class logger(object):
    def __init__(self, func):
        self.func = func
    def __get__(self, obj, type=None):
        return self.__class__(self.func.__get__(obj, type))
    def __call__(self, *args, **kw):
        print 'Entering %s' % self.func
        return self.func(*args, **kw)

class C(object):
    @logger
    def f(self, x, y):
        return x+y

C().f(1, 2)
# =&gt; Entering &lt;bound method C.f of &lt;__main__.C object at 0x...&gt;&gt;
</code></pre>

<p>Obviously the output can be improved (by using, for example, <code>getattr(self.func, 'im_class', None)</code>), but this general pattern will work for both methods and functions.  However it will <em>not</em> work for old-style classes (but just don't use those ;)</p>
"
106212,"<p>Start with <a href=""http://www.djangosnippets.org/snippets/136/"">this Django snippet</a>, but modify it to check <code>request.session['has_beta_access']</code>. If they don't have it, then have it return a redirect to a ""enter beta code"" page that, when posted to with the right code, sets that session variable to <code>True</code>.</p>

<p>Making it a public beta then just consists of removing that middleware from your <code>MIDDLEWARE_CLASSES</code> setting.</p>
"
332225,"<p>I've found Armin's idea very useful. Here is my variation;</p>

<pre><code>class DirtyFieldsMixin(object):
    def __init__(self, *args, **kwargs):
        super(DirtyFieldsMixin, self).__init__(*args, **kwargs)
        self._original_state = self._as_dict()

    def _as_dict(self):
        return dict([(f.name, getattr(self, f.name)) for f in self._meta.local_fields if not f.rel])

    def get_dirty_fields(self):
        new_state = self._as_dict()
        return dict([(key, value) for key, value in self._original_state.iteritems() if value != new_state[key]])
</code></pre>

<p>Edit: I've tested this BTW.</p>

<p>Sorry about the long lines. The difference is (aside from the names) it only caches local non-relation fields. In other words it doesn't cache a parent model's fields if present.</p>

<p>And there's one more thing; you need to reset _original_state dict after saving. But I didn't want to overwrite save() method since most of the times we discard model instances after saving.</p>

<pre><code>def save(self, *args, **kwargs):
    super(Klass, self).save(*args, **kwargs)
    self._original_state = self._as_dict()
</code></pre>
"
68502,"<p>Yes. You'd use the <code>urllib2</code> module, and encode using the <code>multipart/form-data</code> content type. Here is some sample code to get you started -- it's a bit more than just file uploading, but you should be able to read through it and see how it works:</p>

<pre><code>user_agent = ""image uploader""
default_message = ""Image $current of $total""

import logging
import os
from os.path import abspath, isabs, isdir, isfile, join
import random
import string
import sys
import mimetypes
import urllib2
import httplib
import time
import re

def random_string (length):
    return ''.join (random.choice (string.letters) for ii in range (length + 1))

def encode_multipart_data (data, files):
    boundary = random_string (30)

    def get_content_type (filename):
    	return mimetypes.guess_type (filename)[0] or 'application/octet-stream'

    def encode_field (field_name):
    	return ('--' + boundary,
    	        'Content-Disposition: form-data; name=""%s""' % field_name,
    	        '', str (data [field_name]))

    def encode_file (field_name):
    	filename = files [field_name]
    	return ('--' + boundary,
    	        'Content-Disposition: form-data; name=""%s""; filename=""%s""' % (field_name, filename),
    	        'Content-Type: %s' % get_content_type(filename),
    	        '', open (filename, 'rb').read ())

    lines = []
    for name in data:
    	lines.extend (encode_field (name))
    for name in files:
    	lines.extend (encode_file (name))
    lines.extend (('--%s--' % boundary, ''))
    body = '\r\n'.join (lines)

    headers = {'content-type': 'multipart/form-data; boundary=' + boundary,
               'content-length': str (len (body))}

    return body, headers

def send_post (url, data, files):
    req = urllib2.Request (url)
    connection = httplib.HTTPConnection (req.get_host ())
    connection.request ('POST', req.get_selector (),
                        *encode_multipart_data (data, files))
    response = connection.getresponse ()
    logging.debug ('response = %s', response.read ())
    logging.debug ('Code: %s %s', response.status, response.reason)

def make_upload_file (server, thread, delay = 15, message = None,
                      username = None, email = None, password = None):

    delay = max (int (delay or '0'), 15)

    def upload_file (path, current, total):
    	assert isabs (path)
    	assert isfile (path)

    	logging.debug ('Uploading %r to %r', path, server)
    	message_template = string.Template (message or default_message)

    	data = {'MAX_FILE_SIZE': '3145728',
    	        'sub': '',
    	        'mode': 'regist',
    	        'com': message_template.safe_substitute (current = current, total = total),
    	        'resto': thread,
    	        'name': username or '',
    	        'email': email or '',
    	        'pwd': password or random_string (20),}
    	files = {'upfile': path}

    	send_post (server, data, files)

    	logging.info ('Uploaded %r', path)
    	rand_delay = random.randint (delay, delay + 5)
    	logging.debug ('Sleeping for %.2f seconds------------------------------\n\n', rand_delay)
    	time.sleep (rand_delay)

    return upload_file

def upload_directory (path, upload_file):
    assert isabs (path)
    assert isdir (path)

    matching_filenames = []
    file_matcher = re.compile (r'\.(?:jpe?g|gif|png)$', re.IGNORECASE)

    for dirpath, dirnames, filenames in os.walk (path):
    	for name in filenames:
    		file_path = join (dirpath, name)
    		logging.debug ('Testing file_path %r', file_path)
    		if file_matcher.search (file_path):
    			matching_filenames.append (file_path)
    		else:
    			logging.info ('Ignoring non-image file %r', path)

    total_count = len (matching_filenames)
    for index, file_path in enumerate (matching_filenames):
    	upload_file (file_path, index + 1, total_count)

def run_upload (options, paths):
    upload_file = make_upload_file (**options)

    for arg in paths:
    	path = abspath (arg)
    	if isdir (path):
    		upload_directory (path, upload_file)
    	elif isfile (path):
    		upload_file (path)
    	else:
    		logging.error ('No such path: %r' % path)

    logging.info ('Done!')
</code></pre>
"
41558,"<p>In a more general sense of not having to explicitly set variables in each view, it sounds like you want to look at writing your own <a href=""http://docs.djangoproject.com/en/dev/ref/templates/api/#writing-your-own-context-processors"">context processor</a>.</p>

<p>From the docs:</p>

<blockquote>
  <p>A context processor has a very simple interface: It's just a Python function that takes one argument, an HttpRequest object, and returns a dictionary that gets added to the template context. Each context processor must return a dictionary.</p>
</blockquote>
"
80425,"<p>Designing a bigtable schema is an open process, and basically requires you to think about:</p>

<ul>
<li>The access patterns you will be using and how often each will be used</li>
<li>The relationships between your types</li>
<li>What indices you are going to need</li>
<li>The write patterns you will be using (in order to effectively spread load)</li>
</ul>

<p>GAE's datastore automatically denormalizes your data. That is, each index contains a (mostly) complete copy of the data, and thus every index adds significantly to time taken to perform a write, and the storage space used.</p>

<p>If this were not the case, designing a Datastore schema would be a lot more work: You would have to think carefully about the primary key for each type, and consider the effect of your decision on the locality of data. For example, when rendering a blog post you would probably need to display the comments to go along with it, so each comment's key would probably begin with the associated post's key.</p>

<p>With Datastore, this is not such a big deal: The query you use will look something like ""Select * FROM Comment WHERE post_id = N."" (If you want to page the comments, you would also have a limit clause, and a possible suffix of "" AND comment_id > last_comment_id"".) Once you add such a query, Datastore will build the index for you, and your reads will be magically fast.</p>

<p>Something to keep in mind is that each additional index creates some additional cost: it is best if you can use as few access patterns as possible, since it will reduce the number of indices GAE will construct, and thus the total storage required by your data.</p>

<p>Reading over this answer, I find it a little vague. Maybe a hands-on design question would help to scope this down? :-)</p>
"
248933,"<p><strong>Edit</strong>: <a href=""https://github.com/jsocol/bleach"">bleach</a> is a wrapper around html5lib which makes it even easier to use as a whitelist-based sanitiser.</p>

<p><a href=""http://code.google.com/p/html5lib/""><code>html5lib</code></a> comes with a whitelist-based HTML sanitiser - it's easy to subclass it to restrict the tags and attributes users are allowed to use on your site, and it even attempts to sanitise CSS if you're allowing use of the <code>style</code> attribute.</p>

<p>Here's now I'm using it in my Stack Overflow clone's <code>sanitize_html</code> utility function:</p>

<p><a href=""http://code.google.com/p/soclone/source/browse/trunk/soclone/utils/html.py"">http://code.google.com/p/soclone/source/browse/trunk/soclone/utils/html.py</a></p>

<p>I've thrown all the attacks listed in <a href=""http://ha.ckers.org/xss.html"">ha.ckers.org's XSS Cheatsheet</a> (which are handily <a href=""http://ha.ckers.org/xssAttacks.xml"">available in XML format</a> at it after performing Markdown to HTML conversion using <a href=""http://code.google.com/p/python-markdown2/"">python-markdown2</a> and it seems to have held up ok.</p>

<p>The WMD editor component which Stackoverflow currently uses is a problem, though - I actually had to disable JavaScript in order to test the XSS Cheatsheet attacks, as pasting them all into WMD ended up giving me alert boxes and blanking out the page.</p>
"
88783,"<p>This looks like a parsing problem, and thus I am compelled to present a solution based on parsing techniques.</p>

<p>While it may seem that you want to 'split' this string, I think what you actually want to do is 'tokenize' it. Tokenization or lexxing is the compilation step before parsing. I have amended my original example in an edit to implement a proper recursive decent parser here. This is the easiest way to implement a parser by hand.</p>

<pre><code>import re

patterns = [
    ('number', re.compile('\d+')),
    ('*', re.compile(r'\*')),
    ('/', re.compile(r'\/')),
    ('+', re.compile(r'\+')),
    ('-', re.compile(r'\-')),
]
whitespace = re.compile('\W+')

def tokenize(string):
    while string:

        # strip off whitespace
        m = whitespace.match(string)
        if m:
            string = string[m.end():]

        for tokentype, pattern in patterns:
            m = pattern.match(string)
            if m:
                yield tokentype, m.group(0)
                string = string[m.end():]

def parseNumber(tokens):
    tokentype, literal = tokens.pop(0)
    assert tokentype == 'number'
    return int(literal)

def parseMultiplication(tokens):
    product = parseNumber(tokens)
    while tokens and tokens[0][0] in ('*', '/'):
        tokentype, literal = tokens.pop(0)
        if tokentype == '*':
            product *= parseNumber(tokens)
        elif tokentype == '/':
            product /= parseNumber(tokens)
        else:
            raise ValueError(""Parse Error, unexpected %s %s"" % (tokentype, literal))

    return product

def parseAddition(tokens):
    total = parseMultiplication(tokens)
    while tokens and tokens[0][0] in ('+', '-'):
        tokentype, literal = tokens.pop(0)
        if tokentype == '+':
            total += parseMultiplication(tokens)
        elif tokentype == '-':
            total -= parseMultiplication(tokens)
        else:
            raise ValueError(""Parse Error, unexpected %s %s"" % (tokentype, literal))

    return total

def parse(tokens):
    tokenlist = list(tokens)
    returnvalue = parseAddition(tokenlist)
    if tokenlist:
        print 'Unconsumed data', tokenlist
    return returnvalue

def main():
    string = '2+24*48/32'
    for tokentype, literal in tokenize(string):
        print tokentype, literal

    print parse(tokenize(string))

if __name__ == '__main__':
    main()
</code></pre>

<p>Implementation of handling of brackets is left as an exercise for the reader. This example will correctly do multiplication before addition.</p>
"
64983,"<p>I agree with Vinko <a href=""http://www.crummy.com/software/BeautifulSoup/"">BeautifulSoup</a> is the way to go. However I suggest using <code>fooId['value']</code> to <a href=""http://www.crummy.com/software/BeautifulSoup/documentation.html#The%20attributes%20of%20Tags"">get the attribute</a> rather than relying on value being the third attribute.</p>

<pre><code>from BeautifulSoup import BeautifulSoup
#Or retrieve it from the web, etc.
html_data = open('/yourwebsite/page.html','r').read()
#Create the soup object from the HTML data
soup = BeautifulSoup(html_data)
fooId = soup.find('input',name='fooId',type='hidden') #Find the proper tag
value = fooId['value'] #The value attribute
</code></pre>
"
26957,"<p>A common Python saying is that it's easier to ask forgiveness than permission.  While I'm not a fan of this statement in real life, it does apply in a lot of cases.  Usually you want to avoid code that chains two system calls on the same file, because you never know what will happen to the file in between your two calls in your code.</p>

<p><strong>A typical mistake is to write something like</strong>:</p>

<pre><code>if os.path.exists(path):
    os.unlink(path)
</code></pre>

<p>The second call (os.unlink) may fail if something else deleted it after your if test, raise an Exception, and stop the rest of your function from executing.  (You might think this doesn't happen in real life, but we just fished another bug like that out of our codebase last week - and it was the kind of bug that left a few programmers scratching their head and claiming 'Heisenbug' for the last few months)</p>

<p>So, in your particular case, I would probably do:</p>

<pre><code>try:
    os.stat(path)
except OSError, e:
    if e.errno == errno.ENOENT:
        print 'path %s does not exist or is a broken symlink' % path
    else:
        raise e
</code></pre>

<p>The annoyance here is that stat returns the same error code for a symlink that just isn't there and a broken symlink.</p>

<p>So, I guess you have no choice than to break the atomicity, and do something like</p>

<pre><code>if not os.path.exists(os.readlink(path)):
    print 'path %s is a broken symlink' % path
</code></pre>
"
94971,"<p>Do spend some time with the <a href=""http://docs.python.org/lib/typesseq-xrange.html"">Library Reference</a>. The more familiar you are with it, the faster you can find answers to questions like this. Especially important are the first few chapters about builtin objects and types.</p>

<blockquote>
  <p>The advantage of the xrange type is that an xrange object will always 
  take the same amount of memory, no matter the size of the range it represents. 
  There are no consistent performance advantages.</p>
</blockquote>

<p>Another way to find quick information about a Python construct is the docstring and the help-function:</p>

<pre><code>print xrange.__doc__ # def doc(x): print x.__doc__ is super useful
help(xrange)
</code></pre>
"
103610,"<p>I also tend to put my unit tests in the file itself, as Jeremy Cantrell above notes, although I tend to not put the test function in the main body, but rather put everything in an</p>

<pre><code>if __name__ == '__main__':
   do tests...
</code></pre>

<p>block.  This ends up adding documentation to the file as 'example code' for how to use the python file you are testing.</p>

<p>I should add, I tend to write very tight modules/classes.  If your modules require very large numbers of tests, you can put them in another, but even then, I'd still add:</p>

<pre><code>if __name__ == '__main__':
   import tests.thisModule
   tests.thisModule.runtests
</code></pre>

<p>This lets anybody reading your source code know where to look for the test code.</p>
"
83012,"<p>Additionally, <code>os.access()</code>:</p>

<pre><code>if os.access(""myfile"", os.R_OK):
    with open(""myfile"") as fp:
        return fp.read()
</code></pre>

<p>Being <code>R_OK</code>, <code>W_OK</code>, and <code>X_OK</code> the flags to test for permissions (<a href=""https://docs.python.org/3/library/os.html#os.access"">doc</a>).</p>
"
261084,"<p>If you restrict yourself to the Python standard library, then a list of lists is the closest construct:</p>

<pre><code>arr = [[1,2],[3,4]]
</code></pre>

<p>gives a 2d-like array. The rows can be accessed as <code>arr[i]</code> for <code>i</code> in <code>{0,..,len(arr}</code>, but column access is difficult.</p>

<p>If you are willing to add a library dependency, the <a href=""http://numpy.scipy.org"" rel=""nofollow"">NumPy</a> package is what you really want. You can create a fixed-length array from a list of lists using:</p>

<pre><code>import numpy
arr = numpy.array([[1,2],[3,4]])
</code></pre>

<p>Column access is the same as for the list-of-lists, but column access is easy: <code>arr[:,i]</code> for <code>i</code> in <code>{0,..,arr.shape[1]}</code> (the number of columns).</p>

<p>In fact NumPy arrays can be n-dimensional.</p>

<p>Empty arrays can be created with</p>

<pre><code>numpy.empty(shape)
</code></pre>

<p>where <code>shape</code> is a tuple of size in each dimension; <code>shape=(1,3,2)</code> gives a 3-d array with size 1 in the first dimension, size 3 in the second dimension and 2 in the 3rd dimension.</p>

<p>If you want to store objects in a NumPy array, you can do that as well:</p>

<pre><code> arr = numpy.empty((1,), dtype=numpy.object)
 arr[0] = 'abc'
</code></pre>

<p>For more info on the NumPy project, check out the <a href=""http://numpy.scipy.org"" rel=""nofollow"">NumPy homepage</a>.</p>
"
169406,"<p>You can use the <a href=""http://docs.python.org/dev/library/zipfile.html"">zipfile</a> module to compress the file using the zip standard, the <a href=""http://docs.python.org/dev/library/email.html"">email</a> module to create the email with the attachment, and the <a href=""http://docs.python.org/dev/library/smtplib.html"">smtplib</a> module to send it - all using only the standard library.</p>

<h1>Python - Batteries Included</h1>

<p>If you don't feel like programming and would rather ask a question on stackoverflow.org instead, or (as suggested in the comments) left off the <code>homework</code> tag, well, here it is:</p>

<pre><code>import smtplib
import zipfile
import tempfile
from email import encoders
from email.message import Message
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart    

def send_file_zipped(the_file, recipients, sender='you@you.com'):
    zf = tempfile.TemporaryFile(prefix='mail', suffix='.zip')
    zip = zipfile.ZipFile(zf, 'w')
    zip.write(the_file)
    zip.close()
    zf.seek(0)

    # Create the message
    themsg = MIMEMultipart()
    themsg['Subject'] = 'File %s' % the_file
    themsg['To'] = ', '.join(recipients)
    themsg['From'] = sender
    themsg.preamble = 'I am not using a MIME-aware mail reader.\n'
    msg = MIMEBase('application', 'zip')
    msg.set_payload(zf.read())
    encoders.encode_base64(msg)
    msg.add_header('Content-Disposition', 'attachment', 
                   filename=the_file + '.zip')
    themsg.attach(msg)
    themsg = themsg.as_string()

    # send the message
    smtp = smtplib.SMTP()
    smtp.connect()
    smtp.sendmail(sender, recipients, themsg)
    smtp.close()
</code></pre>

<p>With this function, you can just do:</p>

<pre><code>send_file_zipped('result.txt', ['me@me.org'])
</code></pre>

<p>You're welcome.</p>
"
319943,"<p>You will have to provide the enctype attribute to the FORM element (I've been bitten by this before). For example, your FORM tag should look like: </p>

<pre><code>&lt;form action=""/submitpicture/"" method=""POST"" enctype=""multipart/form-data"" &gt;
</code></pre>

<p>Without the enctype, you will find yourself with an empty request.FILES.</p>
"
293350,"<p><code>wx.TextCtrl</code> has a style called <code>wx.TE_READONLY</code> . Use that to make it read-only.</p>

<p>As a sidenode, you can use the <a href=""http://docs.wxwidgets.org/stable/wx_contents.html"">C++ wxWidgets Manual</a> for wxPython aswell. Where special handling for wxPython or other ports is required, the manual often points out the difference.</p>
"
59955,"<p>Sphinx is mainly a tool for formatting docs written independently from the source code, as I understand it.</p>

<p>For generating API docs from Python docstrings, the leading tools are <a href=""https://github.com/BurntSushi/pdoc"" rel=""nofollow"">pdoc</a> and <a href=""https://launchpad.net/pydoctor"" rel=""nofollow"">pydoctor</a>. Here's pydoctor's generated API docs for <a href=""http://twistedmatrix.com/documents/current/api"" rel=""nofollow"">Twisted</a> and <a href=""http://starship.python.net/crew/mwh/bzrlibapi/"" rel=""nofollow"">Bazaar</a>.</p>

<p>Of course, if you just want to have a look at the docstrings while you're working on stuff, there's the ""<a href=""https://docs.python.org/2/library/pydoc.html"" rel=""nofollow"">pydoc</a>"" command line tool and as well as the <code>help()</code> function available in the interactive interpreter.</p>
"
288689,"<p>I've used <a href=""http://code.google.com/p/robin/"">Robin</a> with great success. </p>

<p><strong>Great</strong> integration with C++ types, and creates a single .cpp file to compile and include in your shared object.</p>
"
31358,"<p>Below is a basic threading sample. It will spawn 20 threads; each thread will output its thread number. Run it and observe the order in which they print.</p>

<pre><code>import threading
class Foo (threading.Thread):
    def __init__(self,x):
        self.__x = x
        threading.Thread.__init__(self)
    def run (self):
          print str(self.__x)

for x in xrange(20):
    Foo(x).start()
</code></pre>

<p>As you have hinted at Python threads are implemented through time-slicing. This is how they get the ""parallel"" effect. </p>

<p>In my example my Foo class extends thread, I then implement the <code>run</code> method, which is where the code that you would like to run in a thread goes. To start the thread you call <code>start()</code> on the thread object, which will automatically invoke the <code>run</code> method...</p>

<p>Of course, this is just the very basics. You will eventually want to learn about semaphores, mutexes, and locks for thread synchronization and message passing.</p>
"
226796,"<p>Hash-on-disk is generally addressed with Berkeley DB or something similar - several options are listed in the <a href=""http://docs.python.org/library/persistence.html"">Python Data Persistence documentation</a>. You can front it with an in-memory cache, but I'd test against native performance first; with operating system caching in place it might come out about the same.</p>
"
57877,"<p>Use the builtin <code>unichr</code> -- BeautifulSoup isn't necessary:</p>

<pre><code>&gt;&gt;&gt; entity = '&amp;#x01ce'
&gt;&gt;&gt; unichr(int(entity[3:],16))
u'\u01ce'
</code></pre>
"
32857,"<p>this might be way more than you need, but there is a django module called 'mptt' - this stores a hierarchical tree structure in an sql database, and includes templates for display in the view code.  you might be able to find something useful there.</p>

<p>here's the link : <a href=""https://github.com/django-mptt/django-mptt/"" rel=""nofollow"">django-mptt</a></p>
"
120971,"<p>use <code>urllib.quote</code> or <code>urllib.quote_plus</code></p>

<p>From the <a href=""http://docs.python.org/lib/module-urllib.html"">urllib documentation</a>:</p>

<blockquote>
  <p><strong>quote(string[, safe])</strong></p>
  
  <p>Replace special characters in string
  using the ""%xx"" escape. Letters,
  digits, and the characters ""_.-"" are
  never quoted. The optional safe
  parameter specifies additional
  characters that should not be quoted
  -- its default value is '/'.</p>
  
  <p>Example: <code>quote('/~connolly/')</code> yields <code>'/%7econnolly/'</code>. </p>
  
  <p><strong>quote_plus(string[, safe])</strong></p>
  
  <p>Like quote(), but also replaces spaces
  by plus signs, as required for quoting
  HTML form values. Plus signs in the
  original string are escaped unless
  they are included in safe. It also
  does not have safe default to '/'.</p>
</blockquote>

<p>EDIT: Using urllib.quote or urllib.quote_plus on the whole URL will mangle it, as @<a href=""#120959"">Î¤ÎÎ©Î¤ÎÎÎÎ¥</a> points out:</p>

<pre><code>&gt;&gt;&gt; quoted_url = urllib.quote('http://www.example.com/foo goo/bar.html')
&gt;&gt;&gt; quoted_url
'http%3A//www.example.com/foo%20goo/bar.html'
&gt;&gt;&gt; urllib2.urlopen(quoted_url)
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
  File ""c:\python25\lib\urllib2.py"", line 124, in urlopen
    return _opener.open(url, data)
  File ""c:\python25\lib\urllib2.py"", line 373, in open
    protocol = req.get_type()
  File ""c:\python25\lib\urllib2.py"", line 244, in get_type
    raise ValueError, ""unknown url type: %s"" % self.__original
ValueError: unknown url type: http%3A//www.example.com/foo%20goo/bar.html
</code></pre>

<p>@<a href=""#120959"">Î¤ÎÎ©Î¤ÎÎÎÎ¥</a> provides a function that uses <a href=""http://docs.python.org/lib/module-urlparse.html"">urlparse.urlparse and urlparse.urlunparse</a> to parse the url and only encode the path. This may be more useful for you, although if you're building the URL from a known protocol and host but with a suspect path, you could probably do just as well to avoid urlparse and just quote the suspect part of the URL, concatenating with known safe parts.</p>
"
272269,"<pre><code>key, value = max(stats.iteritems(), key=lambda x:x[1])
</code></pre>

<p>If you don't care about value (I'd be surprised, but) you can do:</p>

<pre><code>key, _ = max(stats.iteritems(), key=lambda x:x[1])
</code></pre>

<p>I like the tuple unpacking better than a [0] subscript at the end of the expression.
I never like the readability of lambda expressions very much, but find this one better than the operator.itemgetter(1) IMHO.</p>
"
255306,"<pre><code>Python 2.5.2 (r252:60911, Sep 27 2008, 07:03:14)
[GCC 4.3.1] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; print ""hello"",; print ""there""
hello there
&gt;&gt;&gt; print ""hello"",; sys.stdout.softspace=False; print ""there""
hellothere
</code></pre>

<p>But really, you should use <code>sys.stdout.write</code> directly.</p>
"
348546,"<p>We do a lot of component caching and not all of them are updated at the same time. So we set host and timestamp values in a universally included context processor. At the top of each template fragment we stick in:</p>

<pre><code>&lt;!-- component_name {{host}} {{timestamp}} --&gt;
</code></pre>

<p>The component_name just makes it easy to do a View Source and search for that string.</p>

<p>All of our views that are object-detail pages define a context variable ""page_object"" and we have this at the top of the base.html template master:</p>

<pre><code>&lt;!-- {{page_object.class_id}} @ {{timestamp}} --&gt;
</code></pre>

<p>class_id() is a method from a super class used by all of our primary content classes. It is just:</p>

<pre><code>def class_id(self):
    ""%s.%s.%s"" % (self.__class__._meta.app_label,
                    self.__class__.__name__, self.id)
</code></pre>

<p>If you load a page and any of the timestamps are more than few seconds old, it's a pretty good bet that the component was cached.</p>
"
164507,"<p>Rather than changing the template directories dynamically you could modify the request and add a value that lets your view know if the user is on an iphone or not. Then wrap render_to_response (or whatever you are using for creating HttpResponse objects) to grab the iphone version of the template instead of the standard html version if they are using an iphone. </p>
"
306222,"<p>As of 2.6, use <a href=""http://docs.python.org/library/abc.html#module-abc"">abstract base classes</a>.</p>

<pre class=""lang-none prettyprint-override""><code>&gt;&gt;&gt; import collections
&gt;&gt;&gt; isinstance([], collections.Sequence)
True
&gt;&gt;&gt; isinstance(0, collections.Sequence)
False
</code></pre>

<p>Furthermore ABC's can be customized to account for exceptions, such as not considering strings to be sequences.  Here an example:</p>

<pre><code>import abc
import collections

class Atomic(object):
    __metaclass__ = abc.ABCMeta
    @classmethod
    def __subclasshook__(cls, other):
        return not issubclass(other, collections.Sequence) or NotImplemented

Atomic.register(basestring)
</code></pre>

<p>After registration the <strong>Atomic</strong> class can be used with <strong>isinstance</strong> and <strong>issubclass</strong>:</p>

<pre><code>assert isinstance(""hello"", Atomic) == True
</code></pre>

<p>This is still much better than a hard-coded list, because you only need to register the exceptions to the rule, and external users of the code can register their own.</p>

<p>Note that in <strong>Python 3</strong> the syntax for specifying metaclasses changed and the <code>basestring</code> abstract superclass was removed, which requires something like the following to be used instead:</p>

<pre><code>class Atomic(metaclass=abc.ABCMeta):
    @classmethod
    def __subclasshook__(cls, other):
        return not issubclass(other, collections.Sequence) or NotImplemented

Atomic.register(str)
</code></pre>

<p>If desired, it's possible to write code which is compatible both both Python 2.6+ <em>and</em> 3.x, but doing so requires using a slightly more complicated technique which dynamically creates the needed abstract base class, thereby avoiding syntax errors due to the metaclass syntax difference. This is essentially the same as what Benjamin Peterson's <a href=""http://pythonhosted.org/six/"">six</a> module's<a href=""http://pythonhosted.org/six/#six.with_metaclass""><code>with_metaclass()</code></a>function does.</p>

<pre><code>class _AtomicBase(object):
    @classmethod
    def __subclasshook__(cls, other):
        return not issubclass(other, collections.Sequence) or NotImplemented

class Atomic(abc.ABCMeta(""NewMeta"", (_AtomicBase,), {})):
    pass

try:
    unicode = unicode
except NameError:  # 'unicode' is undefined, assume Python &gt;= 3
    Atomic.register(str)  # str includes unicode in Py3, make both Atomic
    Atomic.register(bytes)  # bytes will also be considered Atomic (optional)
else:
    # basestring is the abstract superclass of both str and unicode types
    Atomic.register(basestring)  # make both types of strings Atomic
</code></pre>

<p>In versions before 2.6, there are type checkers in the<code>operator</code>module.</p>

<pre class=""lang-none prettyprint-override""><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; operator.isSequenceType([])
True
&gt;&gt;&gt; operator.isSequenceType(0)
False
</code></pre>
"
88346,"<p>'Error' in this example could be any exception object. I think perhaps you have read a code example that used it as a metasyntatic placeholder to mean, ""The Appropriate Exception Class"".</p>

<p>The baseclass of all exceptions is called 'Exception', and most of its subclasses are descriptive names of the type of error involved, such as 'OSError', 'ValueError', 'NameError', 'TypeError'.</p>

<p>In this case, the appropriate error is 'ValueError' (the value of foo was wrong, therefore a ValueError). I would recommend replacing 'Error' with 'ValueError' in your script.</p>

<p>Here is a complete version of the code you are trying to write, I'm duplicating everything because you have a weird keyword argument in your original example that you seem to be conflating with an assignment, and I'm using the 'failUnless' function name because that's the non-aliased name of the function:</p>

<pre><code>class MyClass:
    def __init__(self, foo):
        if foo != 1:
            raise ValueError(""foo is not equal to 1!"")

import unittest
class TestFoo(unittest.TestCase):
    def testInsufficientArgs(self):
        foo = 0
        self.failUnlessRaises(ValueError, MyClass, foo)

if __name__ == '__main__':
    unittest.main()
</code></pre>

<p>The output is:</p>

<pre><code>.
----------------------------------------------------------------------
Ran 1 test in 0.007s

OK
</code></pre>

<p>There is a flaw in the unit testing library 'unittest' that other unit testing frameworks fix. You'll note that it is impossible to gain access to the exception object from the calling context. If you want to fix this, you'll have to redefine that method in a subclass of UnitTest:</p>

<p>This is an example of it in use:</p>

<pre><code>class TestFoo(unittest.TestCase):
    def failUnlessRaises(self, excClass, callableObj, *args, **kwargs):
        try:
            callableObj(*args, **kwargs)
        except excClass, excObj:
            return excObj # Actually return the exception object
        else:
            if hasattr(excClass,'__name__'): excName = excClass.__name__
            else: excName = str(excClass)
            raise self.failureException, ""%s not raised"" % excName

    def testInsufficientArgs(self):
        foo = 0
        excObj = self.failUnlessRaises(ValueError, MyClass, foo)
        self.failUnlessEqual(excObj[0], 'foo is not equal to 1!')
</code></pre>

<p>I have copied the failUnlessRaises function from unittest.py from python2.5 and modified it slightly.</p>
"
287237,"<p>A better pattern is this:</p>

<pre><code>def main():
   ...

if __name__ == '__main__':
   main()
</code></pre>

<p>This allows your code to be invoked by someone who imported it, while also making programs such as <A HREF=""http://pychecker.sourceforge.net/"">pychecker</A> and <A HREF=""http://www.logilab.org/projects/pylint"">pylint</A> work.</p>
"
144212,"<p><a href=""http://www.sontek.net/python-with-a-modular-ide-vim"" rel=""nofollow"">Here you can find some info</a> about this.</p>

<p>It covers code completion, having a list of classes and functions in open files. I haven't got around to do a full configuration for vim, since I don't use Python primarily, but I have the same interests in transforming vim in a better Python IDE.</p>

<p><strong>Edit:</strong> The original site is down, so found it <a href=""https://web.archive.org/web/20110106042207/http://sontek.net/python-with-a-modular-ide-vim"" rel=""nofollow"">saved on the web archive</a>.</p>
"
345773,"<p>The ""a and b or c"" idiom was the canonical way to express the ternary arithmetic if in Python, before <a href=""http://www.python.org/dev/peps/pep-0308/"" rel=""nofollow"">PEP 308</a> was written and implemented. This idiom fails the ""b"" answer is false itself; to support the general case, you could write</p>

<pre><code> return (a and [b] or [c])[0]
</code></pre>

<p>An alternative way of spelling it was</p>

<pre><code> return (b,c)[not a]
</code></pre>

<p>which, with the introduction of the bool type, could be rewritten as</p>

<pre><code> return (c,b)[bool(a)]
</code></pre>

<p>(in case it isn't clear: the conversion to bool, and the not operator, is necessary if a is not known to be bool already)</p>

<p>Today, the conditional expression syntax should be used if the thing must be an expression; else I recommend to use the if statement.</p>
"
142581,"<p>Define a module ( call it ""globalbaz"" ) and have the variables defined inside it. All the modules using this ""pseudoglobal"" should import the ""globalbaz"" module, and refer to it using ""globalbaz.var_name""</p>

<p>This works regardless of the place of the change, you can change the variable before or after the import. The imported module will use the latest value. (I tested this in a toy example)</p>

<p>For clarification, globalbaz.py looks just like this:</p>

<pre><code>var_name = ""my_useful_string""
</code></pre>
"
25193,"<p>You could also do</p>

<pre><code>result = ([ a for a,b in original ], [ b for a,b in original ])
</code></pre>

<p>It <em>should</em> scale better. Especially if Python makes good on not expanding the list comprehensions unless needed.</p>

<p>(Incidentally, it makes a 2-tuple (pair) of lists, rather than a list of tuples, like <code>zip</code> does.)</p>

<p>If generators instead of actual lists are ok, this would do that:</p>

<pre><code>result = (( a for a,b in original ), ( b for a,b in original ))
</code></pre>

<p>The generators don't munch through the list until you ask for each element, but on the other hand, they do keep references to the original list.</p>
"
228653,"<p>And I've answered my own question!  It's the ""debug"" command in pydb:</p>

<pre><code>~&gt; cat -n /tmp/test_python.py
     1  #!/usr/local/bin/python
     2
     3  def foo():
     4      print ""hi""
     5      print ""bye""
     6
     7  exit(0)
     8

~&gt; pydb /tmp/test_python.py
(/tmp/test_python.py:7):  &lt;module&gt;
7 exit(0)


(Pydb) debug foo()
ENTERING RECURSIVE DEBUGGER
------------------------Call level 11
(/tmp/test_python.py:3):  foo
3 def foo():

((Pydb)) s
(/tmp/test_python.py:4):  foo
4     print ""hi""

((Pydb)) s
hi
(/tmp/test_python.py:5):  foo
5     print ""bye""


((Pydb)) s
bye
------------------------Return from level 11 (&lt;type 'NoneType'&gt;)
----------------------Return from level 10 (&lt;type 'NoneType'&gt;)
LEAVING RECURSIVE DEBUGGER
(/tmp/test_python.py:7):  &lt;module&gt;
</code></pre>
"
327210,"<pre><code>for k in sorted(somedictionary.keys()):
    doSomething(k)
</code></pre>

<p>Note that you can also get all of the keys and values sorted by keys like this:</p>

<pre><code>for k, v in sorted(somedictionary.iteritems()):
   doSomething(k, v)
</code></pre>
"
301076,"<p>Use a raw string:</p>

<pre><code>&gt;&gt;&gt; foo = r'baz ""\""'
&gt;&gt;&gt; foo
'baz ""\\""'
</code></pre>

<p>Note that although it looks wrong, it's actually right.  There is only one backslash in the string <code>foo</code>.</p>

<p>This happens because when you just type <code>foo</code> at the prompt, python displays the result of <code>__repr__()</code> on the string.  This leads to the following (notice only one backslash and no quotes around the <code>print</code>ed string):</p>

<pre><code>&gt;&gt;&gt; foo = r'baz ""\""'
&gt;&gt;&gt; foo
'baz ""\\""'
&gt;&gt;&gt; print foo
baz ""\""
</code></pre>

<p>And let's keep going because there's more backslash tricks.  If you want to have a backslash at the end of the string and use the method above you'll come across a problem:</p>

<pre><code>&gt;&gt;&gt; foo = r'baz \'
  File ""&lt;stdin&gt;"", line 1
    foo = r'baz \'
                 ^  
SyntaxError: EOL while scanning single-quoted string
</code></pre>

<p>Raw strings don't work properly when you do that.  You have to use a regular string and escape your backslashes:</p>

<pre><code>&gt;&gt;&gt; foo = 'baz \\'
&gt;&gt;&gt; print foo
baz \
</code></pre>

<p>However, if you're working with Windows file names, you're in for some pain.  What you want to do is use forward slashes and the <code>os.path.normpath()</code> function:</p>

<pre><code>myfile = os.path.normpath('c:/folder/subfolder/file.txt')
open(myfile)
</code></pre>

<p>This will save a lot of escaping and hair-tearing.  <a href=""http://pythonconquerstheuniverse.blogspot.com/2008/06/python-gotcha-raw-strings-and.html"">This page</a> was handy when going through this a while ago.</p>
"
331776,"<p>For the conditional statement, I would probably go with:</p>

<pre><code>if filecmp.cmp(local, config_file):
    shutil.copyfile(remote, config_file)
else:
    shutil.copyfile(local, config_file)
</code></pre>

<p>There's little need to use the inline <code>y if x else z</code> in this case, since the surrounding code is simple enough.</p>
"
339579,"<p>Simple. Use <strong>splitlines()</strong></p>

<pre><code>L = open(""myFile.txt"", ""r"").read().splitlines();
for line in L: 
    process(line) # this 'line' will not have '\n' character at the end
</code></pre>
"
339333,"<p>I solved my own problem, I will write a summary of the things that were wrong and the solution:</p>

<p>The file needs to be called exactly <code>__init__.py</code>, if the extension is different such as my case <code>.py.bin</code> then python cannot move through the directories and then it cannot find the modules. To edit the files you need to use a Linux editor, such as vi or nano, if you use a windows editor this will write some hidden characters. </p>

<p>Another problem that was affecting was that I had another python version installed by the root, so if someone is working with a local installation of python, be sure that the python that is running the programs is the local python, to check this just do <code>which python</code>, and see if the executable is the one that is in your local directory. If not change the path but be sure that the local python directory is before than the other python.</p>
"
125140,"<p>My preferred way is the cursor iterator, but setting first the arraysize property of the cursor. </p>

<pre><code>curs.execute('select * from people')
curs.arraysize = 256
for row in curs:
    print row
</code></pre>

<p>In this example, cx_Oracle will fetch rows from Oracle 256 rows at a time, reducing the number of network round trips that need to be performed</p>
"
160821,"<p>One other thing that you should note is that <code>uuid.getnode()</code> can fake the MAC addr by returning a random 48-bit number which may not be what you are expecting. Also, there's no explicit indication that the MAC address has been faked, but you could detect it by calling <code>getnode()</code> twice and seeing if the result varies. If the same value is returned by both calls, you have the MAC address, otherwise you are getting a faked address.</p>

<pre><code>&gt;&gt;&gt; print uuid.getnode.__doc__
Get the hardware address as a 48-bit positive integer.

    The first time this runs, it may launch a separate program, which could
    be quite slow.  If all attempts to obtain the hardware address fail, we
    choose a random 48-bit number with its eighth bit set to 1 as recommended
    in RFC 4122.
</code></pre>
"
290547,"<p>Python is a good choice.  </p>

<p>I would avoid the CGI model though - you'll pay a large penalty for the interpreter launch on each request.  Most Python web frameworks support <a href=""http://www.wsgi.org/wsgi/"" rel=""nofollow"">the WSGI standard</a> and can be hooked up to servers in a myriad of ways, but most live in some sort of long-running process that the web server communicates with (via proxying, FastCGI, SCGI, etc).</p>

<p>Speaking of frameworks, the Python landscape is ripe with them.  This is both good and bad.  There are many fine options but it can be daunting to a newcomer.</p>

<p>If you are looking for something that comes prepackaged with web/DB/templating integration I'd suggest looking at <a href=""http://www.djangoproject.com"" rel=""nofollow"">Django</a>, <a href=""http://www.turbogears.org"" rel=""nofollow"">TurboGears</a> or <a href=""http://www.pylonshq.com"" rel=""nofollow"">Pylons</a>.  If you want to have more control over the individual components, look at <a href=""http://www.cherrypy.org"" rel=""nofollow"">CherryPy</a>, <a href=""http://wsgiarea.pocoo.org/colubrid/"" rel=""nofollow"">Colubrid</a> or <a href=""http://www.webpy.org"" rel=""nofollow"">web.py</a>.</p>

<p>As for whether or not it is as ""easy as PHP"", that is subjective.  Usually it is encouraged to keep your templates and application logic separate in the Python web programming world, which can make your <em>life</em> easier.  On the other hand, being able to write all of the code for a page in a PHP file is another definition of ""easy"".</p>

<p>Good luck.</p>
"
125386,"<p>You could make a subprocess call to <a href=""http://en.wikipedia.org/wiki/Antiword"">antiword</a>.  Antiword is a linux commandline utility for dumping text out of a word doc.  Works pretty well for simple documents (obviously it loses formatting).  It's available through apt, and probably as RPM, or you could compile it yourself.</p>
"
192525,"<p>What you want to look into is <a href=""http://docs.djangoproject.com/en/dev/ref/signals/"">Django's signals</a> (check out <a href=""http://docs.djangoproject.com/en/dev/topics/signals/"">this page</a> too), specifically the model signals--more specifically, the <strong>post_save</strong> signal. Signals are Django's version of a plugin/hook system. The post_save signal gets sent every time a model is saved, whether it's updated or created (and it'll let you know if it was created). This is how you'd use signals to get notified when an Activity has a Cancellation</p>

<pre><code>from django.db.models.signals import post_save

class Activity(models.Model):
    name = models.CharField(max_length=50, help_text='Some help.')
    entity = models.ForeignKey(CancellationEntity)

    @classmethod
    def cancellation_occurred (sender, instance, created, raw):
        # grab the current instance of Activity
        self = instance.activity_set.all()[0]
        # do something
    ...


class Cancellation(models.Model):
    activity = models.ForeignKey(Activity)
    date = models.DateField(default=datetime.now().date())
    description = models.CharField(max_length=250)
    ...

post_save.connect(Activity.cancellation_occurred, sender=Cancellation)</code></pre>
"
36034,"<blockquote>
  <p>dF: that's pretty cool... I didn't
  know that I could access the fields in
  a class using dict.</p>
  
  <p>Mark: the situations that I wish I had
  this are precisely when I want a tuple
  but nothing as ""heavy"" as a
  dictionary.</p>
</blockquote>

<p>You can access the fields of a class using a dictionary because the fields of a class, its methods and all its properties are stored internally using dicts (at least in CPython).</p>

<p>...Which leads us to your second comment. Believing that Python dicts are ""heavy"" is an extremely non-pythonistic concept. And reading such comments kills my Python Zen. That's not good.</p>

<p>You see, when you declare a class you are actually creating a pretty complex wrapper around a dictionary - so, if anything, you are adding more overhead than by using a simple dictionary. An overhead which, by the way, is meaningless in any case. If you are working on performance critical applications, use C or something.</p>
"
312270,"<p>You could create a dictionary where the keys are the input and the value is a function that handles the keypress:</p>

<pre><code>def handle_quit():
  quit()

def handle_left():
    curpiece.shift(-1, 0)
    shadowpiece = curpiece.clone(); setupshadow(shadowpiece)

def handle_right():
    curpiece.shift(1, 0)
    shadowpiece = curpiece.clone(); setupshadow(shadowpiece)

def handle_pause():
    if not paused:
        paused = True

branch = {
  K_q: handle_quit
  K_e: handle_pause
  K_LEFT: handle_left
  K_RIGHT: handle_right
}

for event in pygame.event.get():
    if event.type == KEYDOWN:
        branch[event.key]()
</code></pre>

<p>Then changing the keys is a matter of modifying keys of the dictionary.</p>
"
36940,"<p>Hmmm... I suppose the closest thing to an enum would be a dictionary, defined either like this:</p>

<pre><code>months = {
    'January': 1,
    'February': 2,
    ...
}
</code></pre>

<p>or</p>

<pre><code>months = dict(
    January=1,
    February=2,
    ...
)
</code></pre>

<p>Then, you can use the symbolic name for the constants like this:</p>

<pre><code>mymonth = months['January']
</code></pre>

<p>There are other options, like a list of tuples, or a tuple of tuples, but the dictionary is the only one that provides you with a ""symbolic"" (constant string) way to access the 
value.</p>

<p>Edit: I like Alexandru's answer too!</p>
"
157445,"<p>You can't sort dictionaries.  You have to sort the list of items.</p>

<p>Previous versions were wrong.  When you have a numeric value, it's easy to sort in reverse order.   These will do that.  But this isn't general.  This only works because the value is numeric.</p>

<pre><code>a = { 'key':1, 'another':2, 'key2':1 }

b= a.items()
b.sort( key=lambda a:(-a[1],a[0]) )
print b
</code></pre>

<p>Here's an alternative, using an explicit function instead of a lambda and the cmp instead of the key option.</p>

<pre><code>def valueKeyCmp( a, b ):
    return cmp( (-a[1], a[0]), (-b[1], b[0] ) )

b.sort( cmp= valueKeyCmp )
print b
</code></pre>

<p>The more general solution is actually two separate sorts</p>

<pre><code>b.sort( key=lambda a:a[1], reverse=True )
b.sort( key=lambda a:a[0] )
print b
</code></pre>
"
292907,"<p>The scoping rules for Python 2.x have been outlined already in other answers. The only thing I would add is that in Python 3.0, there is also the concept of a non-local scope (indicated by the 'nonlocal' keyword). This allows you to access outer scopes directly, and opens up the ability to do some neat tricks, including lexical closures (without ugly hacks involving mutable objects).</p>

<p>EDIT: Here's the <a href=""http://www.python.org/dev/peps/pep-3104/"">PEP</a> with more information on this.</p>
"
130276,"<p>Came up with my own answer after a minute of thought.  It can be done with nested comprehensions:</p>

<pre><code>result = [y for y in (expensive(x) for x in mylist) if y]
</code></pre>

<p>I guess that works, though I find nested comprehensions are only marginally readable </p>
"
136780,"<p>Install the <a href=""http://sourceforge.net/projects/pywin32/"" rel=""nofollow"">pywin32</a> extensions. Then you can do the following:</p>

<pre><code>import win32com.client as comclt
wsh= comclt.Dispatch(""WScript.Shell"")
wsh.AppActivate(""Notepad"") # select another application
wsh.SendKeys(""a"") # send the keys you want
</code></pre>

<p>Search for documentation of the WScript.Shell object (I believe installed by default in all Windows XP installations). You can start <a href=""http://www.microsoft.com/technet/scriptcenter/guide/sas_wsh_pkoy.mspx?mfr=true"" rel=""nofollow"">here</a>, perhaps.</p>

<p><strong>EDIT:</strong> Sending F11 </p>

<pre><code>import win32com.client as comctl
wsh = comctl.Dispatch(""WScript.Shell"")

# Google Chrome window title
wsh.AppActivate(""icanhazip.com"")
wsh.SendKeys(""{F11}"")
</code></pre>
"
166992,"<p>If you don't want to use external packages and don't want to rely on outside Internet servers, this might help. It's a code sample that I found on <a href=""http://www.google.com/codesearch?hl=en&amp;lr=&amp;q=getMACAddrWin&amp;sbtn=Search"">Google Code Search</a> and modified to return required information:</p>

<pre><code>def getIPAddresses():
    from ctypes import Structure, windll, sizeof
    from ctypes import POINTER, byref
    from ctypes import c_ulong, c_uint, c_ubyte, c_char
    MAX_ADAPTER_DESCRIPTION_LENGTH = 128
    MAX_ADAPTER_NAME_LENGTH = 256
    MAX_ADAPTER_ADDRESS_LENGTH = 8
    class IP_ADDR_STRING(Structure):
        pass
    LP_IP_ADDR_STRING = POINTER(IP_ADDR_STRING)
    IP_ADDR_STRING._fields_ = [
        (""next"", LP_IP_ADDR_STRING),
        (""ipAddress"", c_char * 16),
        (""ipMask"", c_char * 16),
        (""context"", c_ulong)]
    class IP_ADAPTER_INFO (Structure):
        pass
    LP_IP_ADAPTER_INFO = POINTER(IP_ADAPTER_INFO)
    IP_ADAPTER_INFO._fields_ = [
        (""next"", LP_IP_ADAPTER_INFO),
        (""comboIndex"", c_ulong),
        (""adapterName"", c_char * (MAX_ADAPTER_NAME_LENGTH + 4)),
        (""description"", c_char * (MAX_ADAPTER_DESCRIPTION_LENGTH + 4)),
        (""addressLength"", c_uint),
        (""address"", c_ubyte * MAX_ADAPTER_ADDRESS_LENGTH),
        (""index"", c_ulong),
        (""type"", c_uint),
        (""dhcpEnabled"", c_uint),
        (""currentIpAddress"", LP_IP_ADDR_STRING),
        (""ipAddressList"", IP_ADDR_STRING),
        (""gatewayList"", IP_ADDR_STRING),
        (""dhcpServer"", IP_ADDR_STRING),
        (""haveWins"", c_uint),
        (""primaryWinsServer"", IP_ADDR_STRING),
        (""secondaryWinsServer"", IP_ADDR_STRING),
        (""leaseObtained"", c_ulong),
        (""leaseExpires"", c_ulong)]
    GetAdaptersInfo = windll.iphlpapi.GetAdaptersInfo
    GetAdaptersInfo.restype = c_ulong
    GetAdaptersInfo.argtypes = [LP_IP_ADAPTER_INFO, POINTER(c_ulong)]
    adapterList = (IP_ADAPTER_INFO * 10)()
    buflen = c_ulong(sizeof(adapterList))
    rc = GetAdaptersInfo(byref(adapterList[0]), byref(buflen))
    if rc == 0:
        for a in adapterList:
            adNode = a.ipAddressList
            while True:
                ipAddr = adNode.ipAddress
                if ipAddr:
                    yield ipAddr
                adNode = adNode.next
                if not adNode:
                    break
</code></pre>

<p>Usage:</p>

<pre><code>&gt;&gt;&gt; for addr in getIPAddresses():
&gt;&gt;&gt;    print addr
192.168.0.100
10.5.9.207
</code></pre>

<p>As it relies on <code>windll</code>, this will work only on Windows.</p>
"
311191,"<p>Say you have a model Employee. To edit an entry with primary key emp_id you do:</p>

<pre><code>emp = Employee.objects.get(pk = emp_id)
emp.name = 'Somename'
emp.save()
</code></pre>

<p>to delete it just do:</p>

<pre><code>emp.delete()
</code></pre>

<p>so a full view would be:</p>

<pre><code>def update(request, id):
   emp = Employee.objects.get(pk = id)
   #you can do this for as many fields as you like
   #here I asume you had a form with input like &lt;input type=""text"" name=""name""/&gt;
   #so it's basically like that for all form fields
   emp.name = request.POST.get('name')
   emp.save()
   return HttpResponse('updated')

def delete(request, id):
   emp = Employee.objects.get(pk = id)
   emp.delete()
   return HttpResponse('deleted')
</code></pre>

<p>In urls.py you'd need two entries like this:</p>

<pre><code>(r'^delete/(\d+)/$','myproject.myapp.views.delete'),
(r'^update/(\d+)/$','myproject.myapp.views.update'),
</code></pre>

<p>I suggest you take a look at the <a href=""http://docs.djangoproject.com/en/dev/ref/models/instances/?from=olddocs"">docs</a></p>
"
195962,"<p>Just to clarify: the code in the body of a module is <em>not</em> executed every time the module is imported - it is run only once, after which future imports find the already created module, rather than recreating it.  Take a look at sys.modules to see the list of cached modules.</p>

<p>However, if your problem is the time it takes for the first import after the program is run, you'll probably need to use some other method than a python dict.  Probably best would be to use an on-disk form, for instance a sqlite database, one of the dbm modules.</p>

<p>For a minimal change in your interface, the shelve module may be your best option - this puts a pretty transparent interface between the dbm modules that makes them act like an arbitrary python dict, allowing any picklable value to be stored. Here's an example:</p>

<pre><code># Create dict with a million items:
import shelve
d = shelve.open('path/to/my_persistant_dict')
d.update(('key%d' % x, x) for x in xrange(1000000))
d.close()
</code></pre>

<p>Then in the next process, use it.  There should be no large delay, as lookups are only performed for the key requested on the on-disk form, so everything doesn't have to get loaded into memory:</p>

<pre><code>&gt;&gt;&gt; d = shelve.open('path/to/my_persistant_dict')
&gt;&gt;&gt; print d['key99999']
99999
</code></pre>

<p>It's a bit slower than a real dict, and it <strong>will</strong> still take a long time to load if you do something that requires all the keys (eg. try to print it), but may solve your problem.</p>
"
301630,"<p>A dynamic language rules for this.  Why?  The mappings are easy to code and change.  You don't have to recompile and rebuild.</p>

<p>Indeed, with a little cleverness, you can have your ""XML XPATH to a Tag -> DB table-field"" mappings as disjoint blocks of Python code that your main application imports.</p>

<p>The block of Python code <strong>is</strong> your configuration file.  It's not an <code>.ini</code> file or a <code>.properties</code> file that describes a configuration.  It <strong>is</strong> the configuration.</p>

<p>We use Python, xml.etree and the SQLAlchemy (to separate the SQL out of your programs) for this because we're up and running with very little effort and a great deal of flexibility.</p>

<p><hr /></p>

<p><strong>source.py</strong></p>

<pre><code>""""""A particular XML parser.  Formats change, so sometimes this changes, too.""""""

import xml.etree.ElementTree as xml

class SSXML_Source( object ):
    ns0= ""urn:schemas-microsoft-com:office:spreadsheet""
    ns1= ""urn:schemas-microsoft-com:office:excel""
    def __init__( self, aFileName, *sheets ):
        """"""Initialize a XML source.
        XXX - Create better sheet filtering here, in the constructor.
        @param aFileName: the file name.
        """"""
        super( SSXML_Source, self ).__init__( aFileName )
        self.log= logging.getLogger( ""source.PCIX_XLS"" )
        self.dom= etree.parse( aFileName ).getroot()
    def sheets( self ):
        for wb in self.dom.getiterator(""{%s}Workbook"" % ( self.ns0, ) ):
            for ws in wb.getiterator( ""{%s}Worksheet"" % ( self.ns0, ) ):
                yield ws
    def rows( self ):
        for s in self.sheets():
            print s.attrib[""{%s}Name"" % ( self.ns0, ) ]
            for t in s.getiterator( ""{%s}Table"" % ( self.ns0, ) ):
                for r in t.getiterator( ""{%s}Row"" % ( self.ns0, ) ):
                    # The XML may not be really useful.
                    # In some cases, you may have to convert to something useful
                    yield r
</code></pre>

<p><strong>model.py</strong></p>

<pre><code>""""""This is your target object.  
It's part of the problem domain; it rarely changes.
""""""
class MyTargetObject( object ):
    def __init__( self ):
        self.someAttr= """"
        self.anotherAttr= """"
        self.this= 0
        self.that= 3.14159
    def aMethod( self ):
        """"""etc.""""""
        pass
</code></pre>

<p><strong>builder_today.py</strong> One of many mapping configurations</p>

<pre><code>""""""One of many builders.  This changes all the time to fit
specific needs and situations.  The goal is to keep this
short and to-the-point so that it has the mapping and nothing
but the mapping.
""""""

import model

class MyTargetBuilder( object ):
    def makeFromXML( self, element ):
        result= model.MyTargetObject()
        result.someAttr= element.findtext( ""Some"" )
        result.anotherAttr= element.findtext( ""Another"" )
        result.this= int( element.findtext( ""This"" ) )
        result.that= float( element.findtext( ""that"" ) )
        return result
</code></pre>

<p><strong>loader.py</strong></p>

<pre><code>""""""An application that maps from XML to the domain object
using a configurable ""builder"".
""""""
import model
import source
import builder_1
import builder_2
import builder_today

# Configure this:  pick a builder is appropriate for the data:
b= builder_today.MyTargetBuilder()

s= source.SSXML_Source( sys.argv[1] )
for r in s.rows():
    data= b.makeFromXML( r )
    # ... persist data with a DB save or file write
</code></pre>

<p><hr /></p>

<p>To make changes, you can correct a builder or create a new builder.  You adjust the loader source to identify which builder will be used.  You can, without too much trouble, make the selection of builder a command-line parameter.  Dynamic imports in dynamic languages seem like overkill to me, but they are handy.</p>
"
273679,"<p>I have put the following down. It's not totally foolproof though.</p>

<pre><code>import os

dirname = 'create/me'

try:
    os.makedirs(dirname)
except OSError:
    if os.path.exists(dirname):
        # We are nearly safe
        pass
    else:
        # There was an error on creation, so make sure we know about it
        raise
</code></pre>

<p>Now as I say, this is not really foolproof, because we have the possiblity of failing to create the directory, and another process creating it during that period.</p>
"
130309,"<p>If the calculations are already nicely bundled into functions, how about using <code>filter</code> and <code>map</code>?</p>

<pre><code>result = filter (None, map (expensive, mylist))
</code></pre>

<p>You can use <code>itertools.imap</code> if the list is very large.</p>
"
43773,"<p>CGI is great for low-traffic websites, but it has some performance problems for anything else.  This is because every time a request comes in, the server starts the CGI application in its own process.  This is bad for two reasons:  1)  Starting and stopping a process can take time and 2) you can't cache anything in memory.  You can go with FastCGI, but I would argue that you'd be better off just writing a straight <a href=""http://www.python.org/dev/peps/pep-0333/"">WSGI</a> app if you're going to go that route (the way WSGI works really isn't a whole heck of a lot different from CGI).</p>

<p>Other than that, your choices are for the most part how much you want the framework to do.  You can go with an all singing, all dancing framework like Django or Pylons.  Or you can go with a mix-and-match approach (use something like CherryPy for the HTTP stuff, SQLAlchemy for the database stuff, paste for deployment, etc).  I should also point out that most frameworks will also let you switch different components out for others, so these two approaches aren't necessarily mutually exclusive.</p>

<p>Personally, I dislike frameworks that do too much magic for me and prefer the mix-and-match technique, but I've been told that I'm also completely insane.  :)</p>

<p>How much web programming experience do you have?  If you're a beginner, I say go with Django.  If you're more experienced, I say to play around with the different approaches and techniques until you find the right one.</p>
"
102682,"<p>The simple explanation:
Consider a <code>for</code> statement</p>

<pre><code>for item in iterable:
   do_stuff()
</code></pre>

<p>A lot of the time, all the items in <code>iterable</code> doesn't need to be there from the start, but can be generated on the fly as they're required. This can be a lot more efficient in both </p>

<ul>
<li>space (you never need to store all the items simultaneously) and </li>
<li>time  (the iteration may finish before all the items are needed).</li>
</ul>

<p>Other times, you don't even know all the items ahead of time. For example:</p>

<pre><code>for command in user_input():
   do_stuff_with(command)
</code></pre>

<p>You have no way of knowing all the user's commands beforehand, but you can use a nice loop like this if you have a generator handing you commands:</p>

<pre><code>def user_input():
    while True:
        wait_for_command()
        cmd = get_command()
        yield cmd
</code></pre>

<p>With generators you can also have iteration over infinite sequences, which is of course not possible when iterating over containers.</p>
"
89534,"<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'\d+|\D+', '2+24*48/32=10')

['2', '+', '24', '*', '48', '/', '32', '=', '10']
</code></pre>

<p>Matches consecutive digits or consecutive non-digits.</p>

<p>Each match is returned as a new element in the list.</p>

<p>Depending on the usage, you may need to alter the regular expression. Such as if you need to match numbers with a decimal point.</p>

<pre><code>&gt;&gt;&gt; re.findall(r'[0-9\.]+|[^0-9\.]+', '2+24*48/32=10.1')

['2', '+', '24', '*', '48', '/', '32', '=', '10.1']
</code></pre>
"
284607,"<p>This isn't emacs specific, but you can use the Python debugger by adding the following to a Django view function:</p>

<p><code>import pdb; pdb.set_trace()</code></p>

<p>Now when you run the development server and view the page, your browser will appear to hang or load very slowly - switch over to your console, and you have access to the full debugger.  You can inspect AND modify state of your application via an interactive shell - check out the Python documentation for the debugger, or this link for some <a href=""http://www.onlamp.com/pub/a/python/2005/09/01/debugger.html"">Python debugging examples</a></p>

<p><hr /></p>

<p>If all you need is logging, add the following to your <code>settings.py</code>:</p>

<pre><code>logging.basicConfig(
    level = logging.DEBUG,
    format = '%(asctime)s %(levelname)s %(message)s',
    filename = '/tmp/mylog.log',
    filemode = 'w'
)
</code></pre>

<p>Now you can log messages to <code>/tmp/mylog.log</code> by adding the following to any view function:</p>

<pre><code>import logging
logging.debug(""Something happened"")
</code></pre>
"
213810,"<p>Python is well suited for these tasks, and I would guess much easier to develop in and debug than Windows batch files.</p>

<p>The question is, I think, how easy and painless it is to ensure that all the computers that you have to run these scripts on, have Python installed.</p>
"
311613,"<p>You should create a new processess using the <a href=""http://www.python.org/doc/2.5.2/lib/module-subprocess.html"">subprocess module</a>.</p>

<p>I'm not fluent in windows processes but its Popen function is cross-platform, and should be preffered to OS specific solutions.</p>

<p>EDIT: I maintain that you should prefer the Subprocess module to os.* OS specific functions, it is cross-platform and more pythonic (just google it). You can wait for the result easily, and <em>cleanly</em>:</p>

<pre><code>import os
import subprocess
unison = os.path.join(os.path.curdir, ""unison"")
p = subprocess.Popen(unison)
p.wait()
</code></pre>
"
173369,"<p>If you want to be clever:</p>

<pre><code>tagDict.update(map(reversed, enumerate(tag)))
</code></pre>

<p>Thanks to Brian for the update. This is apparently ~5% faster than the iterative version.</p>

<p>(EDIT: Thanks saverio for pointing out my answer was incorrect (now fixed). Probably the most efficient/Pythonic way would be Torsten Marek's answer, slightly modified:</p>

<pre><code>tagDict.update((t, i) for (i,t) in enumerate(tag))
</code></pre>

<p>)</p>
"
264334,"<p>Every time this comes up as a limitation, I always wonder ""<em>why</em> do you need more than 1,000 results?""  Did you know that Google themselves doesn't serve up more than 1,000 results?  Try this search:  <a href=""http://www.google.ca/search?hl=en&amp;client=firefox-a&amp;rls=org.mozilla:en-US:official&amp;hs=qhu&amp;q=1000+results&amp;start=1000&amp;sa=N"" rel=""nofollow"">http://www.google.ca/search?hl=en&amp;client=firefox-a&amp;rls=org.mozilla:en-US:official&amp;hs=qhu&amp;q=1000+results&amp;start=1000&amp;sa=N</a>  I didn't know that until recently, because I'd never taken the time to click into the 100th page of search results on a query.</p>

<p>If you're actually returning more than 1,000 results back to the user, then I think there's a bigger problem at hand than the fact that the data store won't let you do it.</p>

<p>One possible (legitimate) reason to need that many results is if you were doing a large operation on the data and presenting a summary (for example, what is the average of all this data).  The solution to this problem (which is talked about in the Google I/O talk) is to calculate the summary data on-the-fly, as it comes in, and save it.</p>
"
100394,"<p>For static analysis there is <a href=""http://www.logilab.org/857"">pylint</a> and <a href=""http://pychecker.sourceforge.net/"">pychecker</a>. Personally I use pylint as it seems to be more comprehensive than pychecker. </p>

<p>For cyclomatic complexity you can try <a href=""http://www.journyx.com/curt/complexity.html"">this perl program</a>, or this <a href=""http://www.traceback.org/2008/03/31/measuring-cyclomatic-complexity-of-python-code/"">article</a> which introduces a python program to do the same</p>
"
1619,"<p>MySQLdb is what I have used before.</p>

<p>If you host is using Python version 2.5 or higher, support for sqlite3 databases is built in (sqlite allows you to have a relational database that is simply a file in your filesystem).  But buyer beware, sqlite is not suited for production, so it may depend what you are trying to do with it.</p>

<p>Another option may be to call your host and complain, or change hosts.  Honestly these days, any self respecting web host that supports python and mysql ought to have MySQLdb pre installed.</p>"
5935,"<p>Using the returned-urllib-object method <code>info()</code>, you can get various information on the retrived document. Example of grabbing the current Google logo:</p>

<pre><code>&gt;&gt;&gt; import urllib<br>&gt;&gt;&gt; d = urllib.urlopen(""http://www.google.co.uk/logos/olympics08_opening.gif"")<br>&gt;&gt;&gt; print d.info()<br><br>Content-Type: image/gif<br>Last-Modified: Thu, 07 Aug 2008 16:20:19 GMT  <br>Expires: Sun, 17 Jan 2038 19:14:07 GMT <br>Cache-Control: public <br>Date: Fri, 08 Aug 2008 13:40:41 GMT <br>Server: gws <br>Content-Length: 20172 <br>Connection: Close<br></code></pre>

<p>It's a dict, so to get the size of the file, you do <code>urllibobject.info()['Content-Length']</code></p>

<pre><code>print f.info()['Content-Length']<br></code></pre>

<p>And to get the size of the local file (for comparison), you can use the os.stat() command:</p>

<pre><code>os.stat(""/the/local/file.zip"").st_size<br></code></pre>"
172726,"<p>First thing that comes to mind: <a href=""http://psyco.sourceforge.net/"" rel=""nofollow"">psyco</a>. It runs only on x86, for the time being.</p>

<p>Then, <a href=""http://code.activestate.com/recipes/277940/"" rel=""nofollow"">constant binding</a>. That is, make all global references (and <em>global.attr</em>, <em>global.attr.attr</em>â¦) be local names inside of functions and methods. This isn't always successful, but in general it works. It can be done by hand, but obviously is tedious.</p>

<p>You said apart from in-code optimization, so I won't delve into this, but keep your mind open for typical mistakes (<code>for i in range(10000000)</code> comes to mind) that people do.</p>
"
265995,"<p>Not necessarily simpler, but a different way, if you are more familiar with the re family. </p>

<pre><code>import re, string
s = ""string. With. Punctuation?"" # Sample string 
out = re.sub('[%s]' % re.escape(string.punctuation), '', s)
</code></pre>
"
337922,"<p>The limit/offset solution runs in quadratic time because mysql has to rescan the rows to find the offset.  As you suspected, the default cursor stores the entire result set on the client, which may consume a lot of memory.</p>

<p>Instead you can use a server side cursor, which keeps the query running and fetches results as necessary.  The cursor class can be customized by supplying a default to the connection call itself, or by supplying a class to the cursor method each time.</p>

<pre><code>from MySQLdb import cursors
cursor = conn.cursor(cursors.SSCursor)
</code></pre>

<p>But that's not the whole story.  In addition to storing the mysql result, the default client-side cursor actually fetches every row regardless.  This behavior is undocumented, and very unfortunate.  It means full python objects are created for all rows, which consumes far more memory than the original mysql result.</p>

<p>In most cases, a result stored on the client wrapped as an iterator would yield the best speed with reasonable memory usage.  But you'll have to roll your own if you want that.</p>
"
199075,"<p>You could try:</p>

<pre><code>&gt;&gt;&gt; re.sub(r""(\w)([A-Z])"", r""\1 \2"", ""WordWordWord"")
'Word Word Word'
</code></pre>
"
265733,"<p>The global interpreter lock is a big mutex-type lock that protects reference counters from getting hosed.  If you are writing pure python code, this all happens behind the scenes, but if you embedding Python into C, then you might have to explicitly take/release the lock.</p>

<p>This mechanism is not related to Python being compiled to bytecode.  It's not needed for Java.  In fact, it's not even needed for <a href=""http://www.jython.org/"">Jython</a> (python compiled to jvm).</p>

<p>see also <a href=""http://stackoverflow.com/questions/105095/are-locks-unnecessary-in-multi-threaded-python-code-because-of-the-gil"">this question</a></p>
"
201737,"<p>Sounds like you have proxy settings defined that urllib2 is picking up on. When it tries to proxy ""127.0.0.01/"", the proxy gives up and returns a 504 error.</p>

<p>From <a href=""http://kember.net/articles/obscure-python-urllib2-proxy-gotcha"" rel=""nofollow"">Obscure python urllib2 proxy gotcha</a>:</p>

<pre><code>proxy_support = urllib2.ProxyHandler({})
opener = urllib2.build_opener(proxy_support)
print opener.open(""http://127.0.0.1"").read()

# Optional - makes this opener default for urlopen etc.
urllib2.install_opener(opener)
print urllib2.urlopen(""http://127.0.0.1"").read()
</code></pre>
"
170174,"<p>The given answers fail to take into account that the wrapped function may raise an exception. In that case, the directory will never be restored. The code below adds exception handling to the previous answers.</p>

<p>as a decorator:</p>

<pre><code>def preserve_cwd(function):
    @functools.wraps(function)
    def decorator(*args, **kwargs):
        cwd = os.getcwd()
        try:
            return function(*args, **kwargs)
        finally:
            os.chdir(cwd)
    return decorator
</code></pre>

<p>and as a context manager:</p>

<pre><code>@contextlib.contextmanager
def remember_cwd():
    curdir = os.getcwd()
    try:
        yield
    finally:
        os.chdir(curdir)
</code></pre>
"
173306,"<p>The Office 2007 file formats are open and <a href=""http://msdn.microsoft.com/en-us/library/aa338205.aspx"">well documented</a>. Roughly speaking, all of the new file formats ending in ""x"" are zip compressed XML documents. For example:</p>

<blockquote>
  <p>To open a Word 2007 XML file Create a
  temporary folder in which to store the
  file and its parts.</p>
  
  <p>Save a Word 2007 document, containing
  text, pictures, and other elements, as
  a .docx file.</p>
  
  <p>Add a .zip extension to the end of the
  file name.</p>
  
  <p>Double-click the file. It will open in
  the ZIP application. You can see the
  parts that comprise the file.</p>
  
  <p>Extract the parts to the folder that
  you created previously.</p>
</blockquote>

<p>The other file formats are roughly similar. I don't know of any open source libraries for interacting with them as yet - but depending on your exact requirements, it doesn't look too difficult to read and write simple documents. Certainly it should be a lot easier than with the older formats.</p>

<p>If you need to read the older formats, OpenOffice has an API and can read and write Office 2003 and older documents with more or less success.</p>
"
200267,"<p>Your question is incorrect; the error you see is not a result of how you built python, but of a confusion between byte strings and unicode strings.</p>

<p>Byte strings (e.g. ""foo"", or 'bar', in python syntax) are sequences of octets; numbers from 0-255.  Unicode strings (e.g. u""foo"" or u'bar') are sequences of unicode code points; numbers from 0-1112064.  But you appear to be interested in the character Ã©, which (in your terminal) is a multi-byte sequence that represents a single character.</p>

<p>Instead of <code>ord(u'Ã©')</code>, try this:</p>

<pre><code>&gt;&gt;&gt; [ord(x) for x in u'Ã©']
</code></pre>

<p>That tells you which sequence of code points ""Ã©"" represents.  It may give you [233], or it may give you [101, 770].</p>

<p>Instead of <code>chr()</code> to reverse this, there is <code>unichr()</code>:</p>

<pre><code>&gt;&gt;&gt; unichr(233)
u'\xe9'
</code></pre>

<p>This character may actually be represented either a single or multiple unicode ""code points"", which themselves represent either graphemes or characters.  It's either ""e with an acute accent (i.e., code point 233)"", or ""e"" (code point 101), followed by ""an acute accent on the previous character"" (code point 770).  So this exact same character may be presented as the Python data structure <code>u'e\u0301'</code> or <code>u'\u00e9'</code>.</p>

<p>Most of the time you shouldn't have to care about this, but it can become an issue if you are iterating over a unicode string, as iteration works by code point, not by decomposable character.  In other words, <code>len(u'e\u0301') == 2</code> and <code>len(u'\u00e9') == 1</code>.  If this matters to you, you can convert between composed and decomposed forms by using <a href=""http://docs.python.org/library/unicodedata.html#unicodedata.normalize""><code>unicodedata.normalize</code></a>.</p>

<p><a href=""http://unicode.org/glossary/"">The Unicode Glossary</a> can be a helpful guide to understanding some of these issues, by pointing how how each specific term refers to a different part of the representation of text, which is far more complicated than many programmers realize.</p>
"
213563,"<p><a href=""http://cherrypy.org/"">CherryPy</a>. Features, as listed from the website:</p>

<ul>
<li>A fast, HTTP/1.1-compliant, WSGI thread-pooled webserver. Typically, CherryPy itself takes only 1-2ms per page!</li>
<li>Support for any other WSGI-enabled webserver or adapter, including Apache, IIS, lighttpd, mod_python, FastCGI, SCGI, and mod_wsgi</li>
<li>Easy to run multiple HTTP servers (e.g. on multiple ports) at once</li>
<li>A powerful configuration system for developers and deployers alike</li>
<li>A flexible plugin system</li>
<li>Built-in tools for caching, encoding, sessions, authorization, static content, and many more</li>
<li>A native mod_python adapter</li>
<li>A complete test suite</li>
<li>Swappable and customizable...everything.</li>
<li>Built-in profiling, coverage, and testing support. </li>
</ul>
"
273571,"<p>The only language I can think of to attempt such a mid-stream change would be Perl. Of course, Python is beating Perl to that particular finish line by releasing first. It should be noted, however, that Perl's changes are much more extensive than Python's and likely will be harder to detangle.</p>

<p>(There's a price for Perl's ""There's More Than One Way To Do It"" philosophy.)</p>

<p>There are examples like the changes from version to version of .NET-based languages (ironic, considering the whole point of .NET was supposed to be API stability and cross-platform compatibility). However, I would hardly call those languages ""mature""; it's always been more of a design-on-the-go, build-the-plane-as-we-fly approach to things.</p>

<p>Or, as I tend to think of it, most languages come from either ""organic growth"" or  ""engineered construction."" Perl is the perfect example of organic growth; it started as a fancy text processing tool ala awk/sed and grew into a full language.</p>

<p>Python, on the other hand, is much more engineered. Spend a bit of time wandering around the extensive whitepapers on their website to see the extensive debate that goes into every even minor change to the language's syntax and implementation.</p>

<p>The idea of making these sorts of far-reaching changes is somewhat new to programming languages because programming languages themselves have changed in nature. It used to be that programming methodologies changed only when a new processor came out that had a new instruction set. The early languages tended to either be so low-level and married to assembly language (e.g. C) or so utterly dynamic in nature (Forth, Lisp) that such a mid-stream change wouldn't even come up as a consideration.</p>

<p>As to whether or not the changes are good ones, I'm not sure. I tend to have faith in the people guiding Python's development, however; the changes in the language thus far have been largely for the better.</p>

<p>I think in the days to come the Global Interpreter Lock will prove more central than syntax changes. Though the new multiprocessor library might alleviate most of that.</p>
"
329510,"<p>Firstly, the <a href=""http://www.python.org/doc/2.5.2/lib/lib.html"">python libary reference</a> gives a blow by blow of what's actually included.  And the <a href=""http://docs.python.org/modindex.html"">global module index</a> contains a neat, alphabetized summary of those same modules.  If you have dependencies on a library, you can trivially test for the presence with a construct like:</p>

<pre><code>try:
    import foobar
except:
    print 'No foobar module'
</code></pre>

<p>If you do this on startup for modules not necessarily present in the distribution you can bail with a sensible diagnostic.</p>

<p>The <a href=""http://pypi.python.org/pypi"">Python Package Index</a> plays a role similar to that of CPAN in the perl world and has a list of many third party modules of one sort or another.  Browsing and searching this should give you a feel for what's about.  There are also utilities such as <a href=""http://pypi.python.org/pypi/yolk"">Yolk</a> which allow you to query the Python Package Index and the installed packages on Python.</p>

<p>Other good online Python resources are:</p>

<ul>
<li><p><a href=""http://www.python.org"">www.python.org</a></p></li>
<li><p>The <a href=""http://groups.google.com/group/comp.lang.python"">comp.lang.python</a> newsgroup - this is still very active.</p></li>
<li><p>Various of the <a href=""http://www.python.org/links/"">items linked off</a> the Python home page.</p></li>
<li><p>Various home pages and blogs by python luminaries such as <a href=""http://www.pythonware.com/daily/"">The Daily Python URL</a>, <a href=""http://www.effbot.org/"">effbot.org</a>, <a href=""http://code.activestate.com/recipes/langs/python/"">The Python Cookbook</a>, <a href=""http://blog.ianbicking.org/"">Ian Bicking's blog</a> (the guy responsible for SQLObject), and the <a href=""http://planet.python.org/"">Many blogs and sites off planet.python.org.</a></p></li>
</ul>
"
307538,"<p>Did you try it? What you wrote works exactly as written. Functions are first-class objects in Python.</p>
"
37917,"<p>I prefer <a href=""http://sourceforge.net/projects/dbfpy/"">dbfpy</a>. It supports both reading and writing of <code>.DBF</code> files and can cope with most variations of the format. It's the only implementation I have found that could both read and write the legacy DBF files of some older systems I have worked with.</p>
"
290009,"<p>I use <a href=""http://www.sqlalchemy.org/"">SQL Alchemy</a> with cPython (I don't know if it'll work with IronPython though).  It'll be pretty familiar to you if you've used Hibernate/nHibernate.  If that's a bit too verbose for you, you can use <a href=""http://elixir.ematia.de/trac/wiki"">Elixir</a>, which is a thin layer on top of SQL Alchemy.  To use either one of those, you'll need <a href=""http://pyodbc.sourceforge.net/"">pyodbc</a>, but that's a pretty simple install.</p>

<p>Of course, if you want to write straight SQL and not use an ORM, you just need pyodbc.</p>
"
122294,"<p>Using named groups and a dispatch table:</p>

<pre><code>r = re.compile(r'(?P&lt;cmd&gt;foo|bar|baz)(?P&lt;data&gt;.+)')

def do_foo(data):
    ...

def do_bar(data):
    ...

def do_baz(data):
    ...

dispatch = {
    'foo': do_foo,
    'bar': do_bar,
    'baz': do_baz,
}


m = r.match(var)
if m:
    dispatch[m.group('cmd')](m.group('data'))
</code></pre>

<p>With a little bit of introspection you can auto-generate the regexp and the dispatch table.</p>
"
289149,"<p>As of Perl 5.10, Perl regexes support <a href=""http://perldoc.perl.org/perlre.html#PCRE%2fPython-Support"">some Python features</a>, making them <em>Python</em> compatible regexes, I guess. The Python versions have the ""P"" in them, but all of these work in Perl 5.10. See the <a href=""http://perldoc.perl.org/perlre.html"">perlre</a> documentation for the details:</p>

<p>Define a named capture buffer. Equivalent to <code>(?&lt;NAME&gt;pattern)</code>.</p>

<pre><code>(?P&lt;NAME&gt;pattern)
</code></pre>

<p>Backreference to a named capture buffer. Equivalent to <code>\g{NAME}</code>.</p>

<pre><code>(?P=NAME)
</code></pre>

<p>Subroutine call to a named capture buffer. Equivalent to <code>(?&amp;NAME)</code>.</p>

<pre><code>(?P&gt;NAME)
</code></pre>

<p>Although I didn't add the Python-compatibility to the latest edition of <a href=""http://oreilly.com/catalog/9780596520106/"">Learning Perl</a>, we do cover the new Perl 5.10 features, including named captures.</p>
"
339506,"<p>Here's an outline of decompression of large files.</p>

<pre><code>import zipfile
import zlib
import os

src = open( doc, ""rb"" )
zf = zipfile.ZipFile( src )
for m in  zf.infolist():

    # Examine the header
    print m.filename, m.header_offset, m.compress_size, repr(m.extra), repr(m.comment)
    src.seek( m.header_offset )
    src.read( 30 ) # Good to use struct to unpack this.
    nm= src.read( len(m.filename) )
    if len(m.extra) &gt; 0: ex= src.read( len(m.extra) )
    if len(m.comment) &gt; 0: cm= src.read( len(m.comment) ) 

    # Build a decompression object
    decomp= zlib.decompressobj(-15)

    # This can be done with a loop reading blocks
    out= open( m.filename, ""wb"" )
    result= decomp.decompress( src.read( m.compress_size ) )
    out.write( result )
    result = decomp.flush()
    out.write( result )
    # end of the loop
    out.close()

zf.close()
src.close()
</code></pre>
"
331924,"<p>ImageMagick has <a href=""http://www.imagemagick.org/download/python/"">Python bindings</a>.</p>
"
166290,"<p>If you have Python installed, or don't mind installing it (it has other uses too :), just create the following <strong>sleep.py</strong> script and add it somewhere in your PATH:</p>

<pre class=""lang-py prettyprint-override""><code>import time, sys

time.sleep(float(sys.argv[1]))
</code></pre>

<p>It will allow sub-second pauses (e.g. 1.5 sec, 0.1 etc), should you have such a need. If you want to call it as <code>sleep</code> rather than <code>sleep.py</code>, then you can add the <code>.PY</code> extension to your PATHEXT environment variable. In XP, you can edit it in:</p>

<p>My Computer â Properties (menu) â Advanced (tab) â Environment Variables (button) â System variables (frame)</p>
"
73695,"<pre><code>from sys import exit
exit()
</code></pre>

<p>As a parameter you can pass an exit code, which will be returned to OS. Default is 0.</p>
"
210290,"<p>In the beginning there was sh, sed, and awk (and find, and grep, and...). It was good. But awk can be an odd little beast and hard to remember if you don't use it often. Then the great camel created Perl. Perl was a system administrator's dream. It was like shell scripting on steroids. Text processing, including regular expressions were just part of the language. Then it got ugly...  People tried to make big applications with Perl. Now, don't get me wrong, Perl can be an application, but it can (can!) look like a mess if you're not really careful. Then there is all this flat data business. It's enough to drive a programmer nuts.</p>

<p>Enter Python, Ruby, et al. These are really very good general purpose languages. They support text processing, and do it well (though perhaps not as tightly entwined in the basic core of the language). But they also scale up very well, and still have nice looking code at the end of the day. They also have developed pretty hefty communities with plenty of libraries for most anything.</p>

<p>Now, much of the negativeness towards Perl is a matter of opinion, and certainly some people can write very clean Perl, but with this many people complaining about it being too easy to create obfuscated code, you know some grain of truth is there. The question really becomes then, are you ever going to use this language for more than simple bash script replacements. If not, learn some more Perl.. it is absolutely fantastic for that. If, on the other hand, you want a language that will grow with you as you want to do more, may I suggest Python or Ruby.</p>

<p>Either way, good luck!</p>
"
35757,"<p>In my opinion python is more than ready for developing complex applications. I see pythons strength more on the server side than writing graphical clients. But have a look at <a href=""http://www.resolversystems.com/"" rel=""nofollow"">http://www.resolversystems.com/</a>. They develop a whole spreadsheet in python using the .net ironpython port.</p>

<p>If you are familiar with eclipse have a look at <a href=""http://pydev.sourceforge.net/"" rel=""nofollow"">pydev</a> which provides auto-completion and debugging support for python with all the other eclipse goodies like svn support. The guy developing it has just been bought by <a href=""http://aptana.com/blog/pcolton/pydev_news"" rel=""nofollow"">aptana</a>, so this will be solid choice for the future.</p>

<p>@Marcin</p>

<blockquote>
  <p>Cons: as a dynamic language, has way
  worse IDE support (proper syntax
  completion requires static typing,
  whether explicit in Java or inferred
  in SML),</p>
</blockquote>

<p>You are right, that static analysis may not provide full syntax completion for dynamic languages, but I thing pydev gets the job done very well. Further more I have a different development style when programming python. I have always an ipython session open and with one F5 I do not only get the perfect completion from ipython, but object introspection and manipulation as well.</p>

<blockquote>
  <p>But if you want to write second Google
  or Yahoo, you will be much better with
  C# or Java.</p>
</blockquote>

<p><a href=""http://www.jaiku.com/blog/2008/08/18/from-the-dev-corner-an-under-the-hood-preview-of-our-new-engine/"" rel=""nofollow"">Google just rewrote jaiku</a> to work on top of App Engine, all in python. And as far as I know they use a lot of python inside google too.</p>
"
113050,"<p><code>file()</code> is a type, like an int or a list. <code>open()</code> is a function for opening files, and will return a <code>file</code> object.</p>

<p>This is an example of when you should use open:</p>

<pre><code>f = open(filename, 'r')
for line in f:
    process(line)
f.close()
</code></pre>

<p>This is an example of when you should use file:</p>

<pre><code>class LoggingFile(file):
    def write(self, data):
        sys.stderr.write(""Wrote %d bytes\n"" % len(data))
        super(LoggingFile, self).write(data)
</code></pre>

<p>As you can see, there's a good reason for both to exist, and a clear use-case for both.</p>
"
55194,"<p>Or shorter,</p>

<pre><code>for key, value in sorted(d.items()):
    print value
</code></pre>
"
55193,"<p>Do you mean that you need the values sorted by the value of the key?
In that case, this should do it:</p>

<pre><code>for key in sorted(d):
    print d[key]
</code></pre>

<p><strong>EDIT:</strong> changed to use sorted(d) instead of sorted(d.keys()), thanks <a href=""http://stackoverflow.com/users/1694/eli-courtwright"" rel=""nofollow"">Eli</a>!</p>
"
286444,"<p>There is an <a href=""http://docs.python.org/library/errno.html""><code>errno</code></a> module that defines standard exit codes:</p>

<p>For example, <strong>Permission denied</strong> is error code <strong>13</strong>:</p>

<pre><code>import errno, sys

if can_access_resource():
    do_something()
else:
    sys.exit(errno.EACCES)
</code></pre>
"
61031,"<p>The other answers are correct; it's not possible, but you could write this yourself.  However, in case you're unsure how to actually implement something like this, here's a complete and working implementation that subclasses dict which I've just written and tested. (Note that the order of values passed to the constructor is undefined but will come before values passed later, and you could always just not allow ordered dicts to be initialized with values.)</p>

<pre><code>class ordered_dict(dict):
    def __init__(self, *args, **kwargs):
        dict.__init__(self, *args, **kwargs)
        self._order = self.keys()

    def __setitem__(self, key, value):
        dict.__setitem__(self, key, value)
        if key in self._order:
            self._order.remove(key)
        self._order.append(key)

    def __delitem__(self, key):
        dict.__delitem__(self, key)
        self._order.remove(key)

    def order(self):
        return self._order[:]

    def ordered_items(self):
        return [(key,self[key]) for key in self._order]


od = ordered_dict()
od[""hello""] = ""world""
od[""goodbye""] = ""cruel world""
print od.order()            # prints ['hello', 'goodbye']

del od[""hello""]
od[""monty""] = ""python""
print od.order()            # prints ['goodbye', 'monty']

od[""hello""] = ""kitty""
print od.order()            # prints ['goodbye', 'monty', 'hello']

print od.ordered_items()
# prints [('goodbye','cruel world'), ('monty','python'), ('hello','kitty')]
</code></pre>
"
315684,"<p>try:</p>

<pre><code>"","".join( map(str, record_ids) )
</code></pre>

<p><code> "","".join( list_of_strings ) </code> joins a list of string by separating them with commas</p>

<p>if you have a list of numbers, <code>map( str, list )</code> will convert it to a list of strings</p>
"
245275,"<p>What's wrong with <a href=""http://pypi.python.org/pypi/xlwt"">xlwt</a>?</p>
"
150309,"<p><a href=""https://docs.python.org/2/library/pickle.html#pickling-and-unpickling-extension-types"" rel=""nofollow"">The docs</a> say that </p>

<blockquote>
  <p>If provided, at pickling time
  <code>__reduce__()</code> will be called with no
  arguments, and it must return either a
  string or a tuple.</p>
</blockquote>

<p>On the other hand, </p>

<blockquote>
  <p>It is sometimes useful to know the
  protocol version when implementing
  <code>__reduce__</code>. This can be done by
  implementing a method named
  <code>__reduce_ex__</code> instead of
  <code>__reduce__</code>. <code>__reduce_ex__</code>, when it
  exists, is called in preference over
  <code>__reduce__</code> (you may still provide
  <code>__reduce__</code> for backwards
  compatibility). The <code>__reduce_ex__</code>
  method will be called with a single
  integer argument, the protocol
  version.</p>
</blockquote>

<p>On the gripping hand, <a href=""http://mail.python.org/pipermail/python-3000/2008-February/012094.html"" rel=""nofollow"">Guido says</a> that this is an area that could be cleaned up.</p>
"
150584,"<p>If you have a string, with 2 bytes that you wish to interpret as a 16 bit integer, you can do so by:</p>

<pre><code>&gt;&gt;&gt; s = '\0\x02'
&gt;&gt;&gt; struct.unpack('&gt;H', s)
(2,)
</code></pre>

<p>Note that the > is for big-endian (the largest part of the integer comes first).  This is the format id3 tags use.</p>

<p>For other sizes of integer, you use different format codes.  eg. ""i"" for a signed 32 bit integer.  See help(struct) for details.</p>

<p>You can also unpack several elements at once.  eg for 2 unsigned shorts, followed by a signed 32 bit value:</p>

<pre><code>&gt;&gt;&gt; a,b,c = struct.unpack('&gt;HHi', some_string)
</code></pre>

<p>Going by your code, you are looking for (in order):</p>

<ul>
<li>a 3 char string</li>
<li>2 single byte values (major and minor version)</li>
<li>a 1 byte flags variable</li>
<li>a 32 bit length quantity</li>
</ul>

<p>The format string for this would be:</p>

<pre><code>ident, major, minor, flags, len = struct.unpack('&gt;3sBBBI', ten_byte_string)
</code></pre>
"
245797,"<p>You should never favor <a href=""http://docs.python.org/2/library/functions.html#zip"" rel=""nofollow""><code>zip</code></a> over <a href=""http://docs.python.org/2/library/itertools.html#itertools.izip"" rel=""nofollow""><code>izip</code></a>, <code>range</code> over <code>xrange</code>, or list comprehensions over generator comprehensions. In Python 3.0 <code>range</code> has <code>xrange</code>-like semantics and <code>zip</code> has <code>izip</code>-like semantics.</p>

<p>List comprehensions are actually clearer like <code>list(frob(x) for x in foo)</code> for those times you need an actual list.</p>
"
110882,"<p>You can break lines in between parenthesises and braces. Additionally, you can append the backslash character <code>\</code> to a line to explicitly break it:</p>

<pre><code>x = (tuples_first_value,
     second_value)
y = 1 + \
    2
</code></pre>
"
246894,"<p>You may also want to consider using <a href=""http://www.pyglet.org/"">Pyglet</a> instead of PyOpenGL. It's a ctypes-wrapper around the native OpenGL libs on the local platform, along with windowing support (should handle most of the stuff you want to use GLUT for.) The <a href=""http://groups.google.com/group/pyglet-users"">pyglet-users</a> list is pretty active and very helpful.</p>
"
247349,"<p>I got the job done with <a href=""http://people.csail.mit.edu/hubert/pyaudio/"">pyaudio</a></p>

<p>It comes with a binary installer for windows and there's even an example on how to record through the microphone and save to a wave file. Nice! I used it on Windows XP, not sure how it will do on Vista though, sorry.</p>
"
158403,"<p><strong>No need to import CRoom</strong></p>

<p>You don't use <code>CRoom</code> in <code>person.py</code>, so don't import it. Due to dynamic binding, Python doesn't need to ""see all class definitions at compile time"".</p>

<p>If you actually <em>do</em> use <code>CRoom</code> in <code>person.py</code>, then change <code>from room import CRoom</code> to <code>import room</code> and use module-qualified form <code>room.CRoom</code>. See <a href=""http://effbot.org/zone/import-confusion.htm#circular-imports"">Effbot's Circular Imports</a> for details.</p>

<p><em>Sidenote:</em> you probably have an error in <code>Self.NextId += 1</code> line. It increments <code>NextId</code> of instance, not <code>NextId</code> of class. To increment class's counter use <code>CRoom.NextId += 1</code> or <code>Self.__class__.NextId += 1</code>.</p>
"
237193,"<p>First: your four colour palette (black, green, red, yellow) has <em>no</em> blue component. So, you have to accept that your output image will hardly approximate the input image, unless there is no blue component to start with.</p>

<p>Try this code:</p>

<pre><code>import Image

def estimate_color(c, bit, c_error):
    c_new= c -  c_error
    if c_new &gt; 127:
        c_bit= bit
        c_error= 255 - c_new
    else:
        c_bit= 0
        c_error= -c_new
    return c_bit, c_error

def image2cga(im):
    ""Produce a sequence of CGA pixels from image im""
    im_width= im.size[0]
    for index, (r, g, b) in enumerate(im.getdata()):
        if index % im_width == 0: # start of a line
            r_error= g_error= 0
        r_bit, r_error= estimate_color(r, 1, r_error)
        g_bit, g_error= estimate_color(g, 2, g_error)
        yield r_bit|g_bit

def cvt2cga(imgfn):
    ""Convert an RGB image to (K, R, G, Y) CGA image""
    inp_im= Image.open(imgfn) # assume it's RGB
    out_im= Image.new(""P"", inp_im.size, None)
    out_im.putpalette( (
        0, 0, 0,
        255, 0, 0,
        0, 255, 0,
        255, 255, 0,
    ) )
    out_im.putdata(list(image2cga(inp_im)))
    return out_im

if __name__ == ""__main__"":
    import sys, os

    for imgfn in sys.argv[1:]:
        im= cvt2cga(imgfn)
        dirname, filename= os.path.split(imgfn)
        name, ext= os.path.splitext(filename)
        newpathname= os.path.join(dirname, ""cga-%s.png"" % name)
        im.save(newpathname)
</code></pre>

<p>This creates a PNG palette image with only the first four palette entries set to your colours. This sample image:</p>

<p><a href=""http://tzotzioy.googlepages.com/new_pic_baby2.jpg""><img src=""http://tzotzioy.googlepages.com/new_pic_baby2.jpg"" width=""320""></a></p>

<p>becomes</p>

<p><a href=""http://tzotzioy.googlepages.com/cga-new_pic_baby2.png""><img src=""http://tzotzioy.googlepages.com/cga-new_pic_baby2.png"" width=""320""></a></p>

<p>It's trivial to take the output of <code>image2cga</code> (yields a sequence of 0-3 values) and pack every four values to a byte.</p>

<p>If you need help about what the code does, please ask and I will explain.</p>

<h3>EDIT1: Do not reinvent the wheel</h3>

<p>Of course, turns out I was too enthusiastic and âas Thomas discoveredâ the Image.quantize method can take a palette image as argument and do the quantization with far better results than my ad-hoc method above:</p>

<pre><code>def cga_quantize(image):
    pal_image= Image.new(""P"", (1,1))
    pal_image.putpalette( (0,0,0, 0,255,0, 255,0,0, 255,255,0) + (0,0,0)*252)
    return image.convert(""RGB"").quantize(palette=pal_image)
</code></pre>

<h3>EDIT1, cont: Pack the pixels into bytes</h3>

<p>For ""added value"", here follows code to produce the packed string (4 pixels per byte):</p>

<pre><code>import itertools as it

# setup: create a map with tuples [(0,0,0,0)â¥(3,3,3,3)] as keys
# and values [chr(0)â¥chr(255)], because PIL does not yet support
# 4 colour palette images

TUPLE2CHAR= {}

# Assume (b7, b6) are pixel0, (b5, b4) are pixel1â¦
# Call it ""big endian""

KEY_BUILDER= [
    (0, 64, 128, 192), # pixel0 value used as index
    (0, 16, 32, 48), # pixel1
    (0, 4, 8, 12), # pixel2
    (0, 1, 2, 3), # pixel3
]
# For ""little endian"", uncomment the following line
## KEY_BUILDER.reverse()

# python2.6 has itertools.product, but for compatibility purposes
# let's do it verbosely:
for ix0, px0 in enumerate(KEY_BUILDER[0]):
    for ix1, px1 in enumerate(KEY_BUILDER[1]):
        for ix2, px2 in enumerate(KEY_BUILDER[2]):
            for ix3, px3 in enumerate(KEY_BUILDER[3]):
                TUPLE2CHAR[ix0,ix1,ix2,ix3]= chr(px0+px1+px2+px3)

# Another helper function, copied almost verbatim from itertools docs
def grouper(n, iterable, padvalue=None):
    ""grouper(3, 'abcdefg', 'x') --&gt; ('a','b','c'), ('d','e','f'), ('g','x','x')""
    return it.izip(*[it.chain(iterable, it.repeat(padvalue, n-1))]*n)

# now the functions
def seq2str(seq):
    """"""Takes a sequence of [0..3] values and packs them into bytes
    using two bits per value""""""
    return ''.join(
        TUPLE2CHAR[four_pixel]
        for four_pixel in grouper(4, seq, 0))

# and the image related function
# Note that the following function is correct,
# but is not useful for Windows 16 colour bitmaps,
# which start at the *bottom* rowâ¦
def image2str(img):
    return seq2str(img.getdata())
</code></pre>
"
94339,"<p>The file you create with <code>TemporaryFile</code> or <code>NamedTemporaryFile</code> is automatically removed when it's closed, which is why you get an error. If you don't want this, you can use <code>mkstemp</code> instead (see the docs for <a href=""http://docs.python.org/lib/module-tempfile.html"">tempfile</a>).</p>

<pre><code>&gt;&gt;&gt; import tempfile, shutil, os
&gt;&gt;&gt; fd, path = tempfile.mkstemp()
&gt;&gt;&gt; os.write(fd, 'foo')
&gt;&gt;&gt; os.close(fd)
&gt;&gt;&gt; shutil.copy(path, 'bar.txt')
&gt;&gt;&gt; os.remove(path)
</code></pre>
"
346195,"<p>You can create the list of all first days of the last year (say) with</p>

<pre><code>select distinct date_trunc('month', (current_date - offs)) as date 
from generate_series(0,365,28) as offs;
          date
------------------------
 2007-12-01 00:00:00+01
 2008-01-01 00:00:00+01
 2008-02-01 00:00:00+01
 2008-03-01 00:00:00+01
 2008-04-01 00:00:00+02
 2008-05-01 00:00:00+02
 2008-06-01 00:00:00+02
 2008-07-01 00:00:00+02
 2008-08-01 00:00:00+02
 2008-09-01 00:00:00+02
 2008-10-01 00:00:00+02
 2008-11-01 00:00:00+01
 2008-12-01 00:00:00+01
</code></pre>

<p>Then you can join with that series.</p>
"
323039,"<p>If you are using C# 3.0 (VS2008) then LINQ to Objects can do very similar things:</p>

<pre><code>List&lt;Foo&gt; fooList = new List&lt;Foo&gt;();
IEnumerable&lt;Foo&gt; extract = from foo in fooList where foo.Bar &gt; 10 select Foo.Name.ToUpper();
</code></pre>
"
279598,"<p>Python doesn't have static variables but you can fake it by defining a callable class object and then using it as a function. <a href=""http://stackoverflow.com/a/593046/4561887"">Also see this answer</a>.</p>

<pre><code>class Foo(object):
  # Class variable, shared by all instances of this class
  counter = 0

  def __call__(self):
    Foo.counter += 1
    print Foo.counter

# Create an object instance of class ""Foo,"" called ""foo""
foo = Foo()

# Make calls to the ""__call__"" method, via the object's name itself
foo() #prints 1
foo() #prints 2
foo() #prints 3
</code></pre>

<p>Note that <code>__call__</code> makes an instance of a class (object) callable by its own name. That's why calling <code>foo()</code> above calls the class' <code>__call__</code> method. <a href=""https://docs.python.org/3/reference/datamodel.html"" rel=""nofollow"">From the documentation</a>:</p>

<blockquote>
  <p>Instances of arbitrary classes can be made callable by defining a <code>__call__()</code> method in their class.</p>
</blockquote>
"
46201,"<p>Checkout the <a href=""http://wiki.python.org/moin/TimeComplexity"">TimeComplexity</a> page on the py dot org wiki. It covers set/dicts/lists/etc at least as far as time complexity goes.</p>
"
231871,"<p>There really aren't any true ""private"" attributes or methods in Python.  One thing you can do is simply override the method you don't want in the subclass, and raise an exception:</p>

<pre><code>&gt;&gt;&gt; class Foo( object ):
...     def foo( self ):
...     	print 'FOO!'
...     	
&gt;&gt;&gt; class Bar( Foo ):
...     def foo( self ):
...     	raise AttributeError( ""'Bar' object has no attribute 'foo'"" )
...     
&gt;&gt;&gt; b = Bar()
&gt;&gt;&gt; b.foo()
Traceback (most recent call last):
  File ""&lt;interactive input&gt;"", line 1, in &lt;module&gt;
  File ""&lt;interactive input&gt;"", line 3, in foo
AttributeError: 'Bar' object has no attribute 'foo'
</code></pre>
"
145384,"<p>Check out <a href=""http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/"">pyrex</a> or <a href=""http://cython.org/"">cython</a>.  They're python-like languages for interfacing between C/C++ and python.</p>
"
51042,"<p>Also a little silly, but you could try picking an arbitrary day and embedding each time in it, using <code>datetime.datetime.combine</code>, then subtracting:</p>

<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; t1 = datetime.time(2,3,4)
&gt;&gt;&gt; t2 = datetime.time(18,20,59)
&gt;&gt;&gt; dummydate = datetime.date(2000,1,1)
&gt;&gt;&gt; datetime.datetime.combine(dummydate,t2) - datetime.datetime.combine(dummydate,t1)
datetime.timedelta(0, 58675)
</code></pre>
"
51239,"<p>There's a text progress bar library for python at  <a href=""http://pypi.python.org/pypi/progressbar/2.2"">http://pypi.python.org/pypi/progressbar/2.2</a> that you might find useful: </p>

<blockquote>
  <p>This library provides a text mode progressbar. This is tipically used to display the progress of a long running operation, providing a visual clue that processing is underway.</p>
  
  <p>The ProgressBar class manages the progress, and the format of the line is given by a number of widgets. A widget is an object that may display diferently depending on the state of the progress. There are three types of widget: - a string, which always shows itself; - a ProgressBarWidget, which may return a diferent value every time it's update method is called; and - a ProgressBarWidgetHFill, which is like ProgressBarWidget, except it expands to fill the remaining width of the line.</p>
  
  <p>The progressbar module is very easy to use, yet very powerful. And automatically supports features like auto-resizing when available.</p>
</blockquote>
"
184282,"<p><strong>Django!</strong></p>

<p>Look up the DjangoCon talks on Google/Youtube - Especially ""Reusable Apps"" (www.youtube.com/watch?v=A-S0tqpPga4)</p>

<p>I've been using Django for some time, after starting with Ruby/Rails. I found the Django Community easier to get into (nicer), the language documented with <em>excellent</em> examples, and it's modularity is awesome, especially if you're wanting to throw custom components into the mix, and not be forced to use certain things here and there.</p>

<p>I'm sure there are probably ways to be just as flexible with Rails or some such, but I highly encourage you to take a long look at the Django introductions, etc, at <a href=""http://www.djangoproject.com/"" rel=""nofollow"">http://www.djangoproject.com/</a></p>

<p>Eugene mentioned it's now at 1.0 - and therefore will remain a stable and backward-compatible codebase well through January 2009. </p>

<p>Also, the automatic admin interfaces it builds are <em>production ready</em>, and extremely flexible.  </p>
"
186464,"<p>I don't think there is a fully crossplatform way.  On unix, the fcntl module will do this for you.  However on windows (which I assume you are by the paths), you'll need to use the win32file module.</p>

<p>Fortunately, there is a portable implementation (<a href=""https://github.com/WoLpH/portalocker"" rel=""nofollow"">portalocker</a>) using the platform appropriate method at the python cookbook.</p>

<p>To use it, open the file, and then call:</p>

<pre><code>portalocker.lock(file, flags)
</code></pre>

<p>where flags are portalocker.LOCK_EX for exclusive write access, or LOCK_SH for shared, read access.</p>
"
216187,"<p>There are several differences:</p>

<ul>
<li>All entities with the same ancestor are in the same entity group. Transactions can only affect entities inside a single entity group.</li>
<li>All writes to a single entity group are serialized, so throughput is limited.</li>
<li>The parent entity is set on creation and is fixed. References can be changed at any time.</li>
<li>With reference properties, you can only query for direct relationships, but with parent properties you can use the .ancestor() filter to find everything (directly or indirectly) descended from a given ancestor.</li>
<li>Each entity has only a single parent, but can have multiple reference properties.</li>
</ul>
"
108500,"<p>I've tested these out with Django 1.0:</p>

<p>The ""or"" queries:</p>

<pre><code>Blog.objects.filter(tags__name__in=['tag1', 'tag2']).distinct()
</code></pre>

<p>or you could use the Q class:</p>

<pre><code>Blog.objects.filter(Q(tags__name='tag1') | Q(tags__name='tag2')).distinct()
</code></pre>

<p>The ""and"" query:</p>

<pre><code>Blog.objects.filter(tags__name='tag1').filter(tags__name='tag2')
</code></pre>

<p>I'm not sure about the third one, you'll probably need to drop to SQL to do it.</p>
"
216795,"<p>Yes, to some extent it is possible. There is a <a href=""http://entrian.com/goto/"">module</a> out there that uses <code>sys.settrace()</code> to implement <code>goto</code> and <code>comefrom</code> ""keywords"":</p>

<pre><code>from goto import goto, label
for i in range(1, 10):
  for j in range(1, 20):
    print i, j
    if j == 3:
      goto .end # breaking out from nested loop
label .end
print ""Finished""
</code></pre>
"
259643,"<p>The problem with trying to split the names from a single input is that you won't get the full surname for people with spaces in their surname, and I don't believe you'll be able to write code to manage that completely.</p>

<p>I would recommend that you ask for the names separately if it is at all possible.</p>
"
289046,"<p>You've probably missed a very important part of those <a href=""http://docs.python.org/library/socket.html#example"">examples</a> - the lines that follow the ""recv()"" call:</p>

<pre><code>while 1:
    data = conn.recv(1024)
    if not data: break
    conn.send(data)
conn.close()
</code></pre>
"
37506,"<p>Use <a href=""http://www.crummy.com/software/BeautifulSoup/"">BeautifulSoup</a>! It's perfect for this, where you have incoming markup of dubious virtue and need to get something reasonable out of it. Just pass in the original text, extract all the string tags, and join them.</p>
"
338566,"<p>""How can i change how it alters the filename?""</p>

<p>Since it isn't documented, I elected to read the source.  This is what I concluded from reading the source of <code>logging/handlers.py</code></p>

<pre><code>handler = logging.handlers.TimedRotatingFileHandler(""C:\\isis_ops\\logs\\Rotate_Test"",'midnight',1)
handler.suffix = ""%Y-%m-%d"" # or anything else that strftime will allow
root_logger.addHandler(handler)
</code></pre>

<p>The suffix is the formatting string.</p>
"
49828,"<p>I think this pair of articles by Philip J. Eby does a great job discussing the differences between the two languages (mostly about philosophy/mentality rather than specific language features). </p>

<ul>
<li><a href=""http://dirtsimple.org/2004/12/python-is-not-java.html"">Python is Not Java</a></li>
<li><a href=""http://dirtsimple.org/2004/12/java-is-not-python-either.html"">Java is Not Python, either</a></li>
</ul>
"
51551,"<p>I like to put blank lines around blocks to make control flow more obvious. For example:</p>

<pre><code>if foo:
   bar = baz

   while bar not biz:
      bar = i_am_going_to_find_you_biz_i_swear_on_my_life()

did_i_not_warn_you_biz()
my_father_is_avenged()
</code></pre>
"
187563,"<p>If you're on Windows, you might accidentally be doing CRLF conversions, corrupting the binary data.  Try opening <code>target</code> in binary mode:</p>

<pre><code>target = open(target_path, ""wb"")
</code></pre>
"
144462,"<p>psycopg2 seems to be the most popular.  I've never had any trouble with it.  There's actually a pure Python interface for PostgreSQL too, called <a href=""http://barryp.org/software/bpgsql/"">bpgsql</a>.  I wouldn't recommend it over psycopg2, but it's recently become capable enough to support Django and is useful if you can't compile C modules.</p>
"
151214,"<p>Days until Christmas:</p>

<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; today = datetime.date.today()
&gt;&gt;&gt; someday = datetime.date(2008, 12, 25)
&gt;&gt;&gt; diff = someday - today
&gt;&gt;&gt; diff.days
86
</code></pre>

<p>More arithmetic <a href=""https://web.archive.org/web/20061007015511/http://www.daniweb.com/code/snippet236.html"">here</a>.</p>
"
43794,"<p>By the way: most programming languages would disagree with Python and give the result <code>-2</code>. Depending on the interpretation of modulus this is correct. However, the most agreed-upon mathematical definition states that the modulus of <em>a</em> and <em>b</em> is the (strictly positive) rest <em>r</em> of the division of <em>a</em> / <em>b</em>. More precisely, 0 &lt;= <em>r</em> &lt; <em>b</em> by definition.</p>
"
148979,"<p>Threads. They're what I always go for because you can do it in every framework you need. </p>

<p>And once you're used to multi-threading and parallel processing in one language/framework, you're good on all frameworks.</p>
"
235657,"<p>kurosch's method of solving the problem isn't quite correct, because you can still use <code>b.foo</code> without getting an <code>AttributeError</code>. If you don't invoke the function, no error occurs. Here are two ways that I can think to do this:</p>

<pre><code>import doctest

class Foo(object):
    """"""
    &gt;&gt;&gt; Foo().foo()
    foo
    """"""
    def foo(self): print 'foo'
    def fu(self): print 'fu'

class Bar(object):
    """"""
    &gt;&gt;&gt; b = Bar()
    &gt;&gt;&gt; b.foo()
    Traceback (most recent call last):
    ...
    AttributeError
    &gt;&gt;&gt; hasattr(b, 'foo')
    False
    &gt;&gt;&gt; hasattr(b, 'fu')
    True
    """"""
    def __init__(self): self._wrapped = Foo()

    def __getattr__(self, attr_name):
        if attr_name == 'foo': raise AttributeError
        return getattr(self._wrapped, attr_name)

class Baz(Foo):
    """"""
    &gt;&gt;&gt; b = Baz()
    &gt;&gt;&gt; b.foo() # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    AttributeError...
    &gt;&gt;&gt; hasattr(b, 'foo')
    False
    &gt;&gt;&gt; hasattr(b, 'fu')
    True
    """"""
    foo = property()

if __name__ == '__main__':
    doctest.testmod()
</code></pre>

<p>Bar uses the ""wrap"" pattern to restrict access to the wrapped object. <a href=""http://www.aleax.it/gdd_pydp.pdf"">Martelli has a good talk</a> dealing with this. Baz uses <a href=""http://docs.python.org/library/functions.html?highlight=property#property"">the property built-in</a> to implement the descriptor protocol for the attribute to override.</p>
"
49148,"<p>Boost has a python interface library which could help you.</p>

<p><a href=""http://www.boost.org/doc/libs/release/libs/python/doc/index.html"" rel=""nofollow"">Boost.Python</a></p>
"
237243,"<p>To turn it off for a single variable, use <code>mark_safe</code>:</p>

<pre><code>from django.utils.safestring import mark_safe

t = loader.get_template(""sometemplate"")
c = Context({
   'foo': 'bar',
   'url': mark_safe('http://127.0.0.1/test?a=1&amp;b=2'),
})
print t.render(c)
</code></pre>

<p>Alternatively, to totally turn autoescaping off from your Python code, <a href=""http://docs.djangoproject.com/en/dev/howto/custom-template-tags/#auto-escaping-considerations"">use the <code>autoescape</code> argument when initialising a <code>Context</code></a>:</p>

<pre><code>c = Context({
   'foo': 'bar',
   'url': 'http://127.0.0.1/test?a=1&amp;b=2',
}, autoescape=False)
</code></pre>

<p>The <a href=""http://docs.djangoproject.com/en/dev/topics/templates/#how-to-turn-it-off"">How to turn [Automatic HTML escaping] off</a> section of the documentation covers some of the in-template options if you'd rather do it there.</p>
"
138553,"<p>Try <a href=""http://shed-skin.blogspot.com/"">ShedSkin</a> Python-to-C++ compiler, but it is far from perfect. Also there is Psyco - Python JIT if only speedup is needed. But IMHO this is not worth the effort. For speed-critical parts of code best solution would be to write them as C/C++ extensions. </p>
"
104426,"<p>This solution implements a generator, to avoid holding all the permutations on memory:</p>

<pre><code>def permutations (orig_list):
    if not isinstance(orig_list, list):
        orig_list = list(orig_list)

    yield orig_list

    if len(orig_list) == 1:
        return

    for n in sorted(orig_list):
        new_list = orig_list[:]
        pos = new_list.index(n)
        del(new_list[pos])
        new_list.insert(0, n)
        for resto in permutations(new_list[1:]):
            if new_list[:1] + resto &lt;&gt; orig_list:
                yield new_list[:1] + resto
</code></pre>
"
57704,"<p><code>round(5.59, 1)</code> is working fine. The problem is that 5.6 cannot be represented exactly in binary floating point.</p>

<pre><code>&gt;&gt;&gt; 5.6
5.5999999999999996
&gt;&gt;&gt;
</code></pre>

<p>As Vinko says, you can use string formatting to do rounding for display.</p>

<p>Python has a <a href=""http://docs.python.org/lib/module-decimal.html"">module for decimal arithmetic</a> if you need that.</p>
"
158387,"<p>The best solution, assuming the username and password can't be given at runtime by the user, is probably a separate source file containing only variable initialization for the username and password that is imported into your main code. This file would only need editing when the credentials change. Otherwise, if you're only worried about shoulder surfers with average memories, base 64 encoding is probably the easiest solution. ROT13 is just too easy to decode manually, isn't case sensitive and retains too much meaning in it's encrypted state. Encode your password and user id outside the python script. Have he script decode at runtime for use.</p>

<p>Giving scripts credentials for automated tasks is always a risky proposal. Your script should have its own credentials and the account it uses should have no access other than exactly what is necessary. At least the password should be long and rather random.</p>
"
287896,"<p>For Windows you cannot print to console with colors unless you're using the win32api.</p>

<p>For Linux it's as simple as using print, with the escape sequences outlined here:</p>

<p><a href=""http://www.linuxhowtos.org/Tips%20and%20Tricks/ansi_escape_sequences.htm"">Colors</a></p>

<p>For the character to print like a box, it really depends on what font you are using for the console window. The pound symbol works well, but it depends on the font:</p>

<pre><code>#
</code></pre>
"
327488,"<pre><code>data.fn = staticmethod(myFunction)
</code></pre>

<p>should do the trick.</p>
"
245333,"<p>This decorator makes the name of the method available inside the function by passing it as a keyword argument.</p>

<pre><code>from functools import wraps
def pass_func_name(func):
    ""Name of decorated function will be passed as keyword arg _func_name""
    @wraps(func)
    def _pass_name(*args, **kwds):
        kwds['_func_name'] = func.func_name
        return func(*args, **kwds)
    return _pass_name
</code></pre>

<p>You would use it this way:</p>

<pre><code>@pass_func_name
def sum(a, b, _func_name):
    print ""running function %s"" % _func_name
    return a + b

print sum(2, 4)
</code></pre>

<p>But maybe you'd want to write what you want directly inside the decorator itself. Then the code is an example of a way to get the function name in a decorator. If you give more details about what you want to do in the function, that requires the name, maybe I can suggest something else.</p>
"
142770,"<p>With the warning that I think it's a tremendously bad idea to replace the default Python with an unreleased beta version:</p>

<p>First, install 2.6rc2. You can download the source from the <a href=""http://www.python.org/download/releases/2.6/"">Python website</a>. Standard <code>./configure &amp;&amp; make &amp;&amp; sudo make install</code> installation style.</p>

<p>Next, remove the <code>/usr/bin/python</code> symlink. Do <em>not</em> remove <code>/usr/bin/python2.5</code>. Add a symlink to 2.6 with <code>ln -s /usr/local/bin/python2.6 /usr/bin/python</code>.</p>

<p>Once again, I think this is a terrible idea. There is almost certainly a better way to do whatever you're trying to accomplish.</p>

<p><hr /></p>

<p>Migrating installed libraries is a much longer process. Look in the <code> /usr/lib/python2.5/site-packages/</code> and <code> /usr/local/lib/python2.5/site-packages/</code> directories. Any libraries installed to them will need to be re-installed with 2.6. Since you're not using a packaged Python version, you cannot use Ubuntu's packages -- you'll have to manually upgrade all the libraries yourself. Most of them can probably be installed with <code>sudo easy_install &lt;name&gt;</code>, but some like PyGTK+ are not so easy. You'll have to follow custom installation procedures for each such library.</p>
"
260580,"<p>I emailed the Website Optimizer Team, and they said ""There's no secret code, unless you find one. :)""</p>
"
168678,"<p>There's also a PHP extension: <a href=""http://www.csh.rit.edu/~jon/projects/pip/"">Pip - Python in PHP</a>, which I've never tried but had it bookmarked for just such an occasion</p>
"
119232,"<p>Yes, you should learn Python, but it has nothing to do with Python or C# being better.  It is really about making you a better programmer.</p>

<p>Learning Python will give you a whole new perspective on programmer and how problems can be solved.  It's like lifting weights, except you're building up the developer muscles in your mind.  </p>

<p>For example, if you've only ever programmed using a statically typed language then it is hard to imagine any other way.  Learning Python will teach you that there is an alternative in the form of dynamic typing.</p>

<p>For a summary of Pythons benefits:
<a href=""http://www.cmswire.com/cms/enterprise-20/2007s-programming-language-of-the-year-is-002221.php"">http://www.cmswire.com/cms/enterprise-20/2007s-programming-language-of-the-year-is-002221.php</a></p>
"
116025,"<p>Because of how pylint works (it examines the source itself, without letting Python actually execute it) it's very hard for pylint to figure out how metaclasses and complex baseclasses actually affect a class and its instances. The 'pychecker' tool is a bit better in this regard, because it <em>does</em> actually let Python execute the code; it imports the modules and examines the resulting objects. However, that approach has other problems, because it does actually let Python execute the code :-)</p>

<p>You could extend pylint to teach it about the magic Django uses, or to make it understand metaclasses or complex baseclasses better, or to just ignore such cases after detecting one or more features it doesn't quite understand. I don't think it would be particularly easy. You can also just tell pylint to not warn about these things, through special comments in the source, command-line options or a .pylintrc file.</p>
"
92953,"<p>Just the thread.</p>
"
239041,"<p>One way to call C libraries from Python is to use <a href=""https://docs.python.org/library/ctypes.html"" rel=""nofollow"">ctypes</a>:</p>

<pre><code>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; windll.user32.MessageBoxA(None, ""Hello world"", ""ctypes"", 0);
</code></pre>
"
137207,"<p>For medium-complex grammars, <a href=""http://pyparsing.wikispaces.com/"">PyParsing</a> is brilliant. You can define grammars directly within Python code, no need for code generation:</p>

<pre><code>&gt;&gt;&gt; from pyparsing import Word, alphas
&gt;&gt;&gt; greet = Word( alphas ) + "","" + Word( alphas ) + ""!"" # &lt;-- grammar defined here
&gt;&gt;&gt; hello = ""Hello, World!""
&gt;&gt;&gt;&gt; print hello, ""-&gt;"", greet.parseString( hello )
Hello, World! -&gt; ['Hello', ',', 'World', '!']
</code></pre>

<p>(Example taken from the PyParsing home page).</p>

<p>With parse actions (functions that are invoked when a certain grammar rule is triggered), you can convert parses directly into abstract syntax trees, or any other representation.</p>

<p>There are many helper functions that encapsulate recurring patterns, like operator hierarchies, quoted strings, nesting or C-style comments.</p>
"
60027,"<p>Since you want a random element, this will also work:</p>

<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; s = set([1,2,3])
&gt;&gt;&gt; random.sample(s, 1)
[2]
</code></pre>

<p>The documentation doesn't seem to mention performance of <code>random.sample</code>. From a really quick empirical test with a huge list and a huge set, it seems to be constant time for a list but not for the set. Also, iteration over a set isn't random; the order is undefined but predictable:</p>

<pre><code>&gt;&gt;&gt; list(set(range(10))) == range(10)
True
</code></pre>

<p>If randomness is important and you need a bunch of elements in constant time (large sets), I'd use <code>random.sample</code> and convert to a list first:</p>

<pre><code>&gt;&gt;&gt; lst = list(s) # once, O(len(s))?
...
&gt;&gt;&gt; e = random.sample(lst, 1)[0] # constant time
</code></pre>
"
193808,"<p>To print the current state of the object you might: </p>

<pre><code>&gt;&gt;&gt; obj # in an interpreter
</code></pre>

<p>or </p>

<pre><code>print repr(obj) # in a script
</code></pre>

<p>or</p>

<pre><code>print obj
</code></pre>

<p>For your classes define <code>__str__</code> or <code>__repr__</code> methods. From the <a href=""http://www.python.org/doc/2.5.2/ref/customization.html"">Python documentation</a>:</p>

<blockquote>
  <p><code>__repr__(self)</code> Called by the <code>repr()</code> built-in function and by string
  conversions (reverse quotes) to
  compute the ""official"" string
  representation of an object. If at all
  possible, this should look like a
  valid Python expression that could be
  used to recreate an object with the
  same value (given an appropriate
  environment). If this is not possible,
  a string of the form ""&lt;...some useful
  description...>"" should be returned.
  The return value must be a string
  object. If a class defines <strong>repr</strong>()
  but not <code>__str__()</code>, then <code>__repr__()</code> is
  also used when an ""informal"" string
  representation of instances of that
  class is required. This is typically
  used for debugging, so it is important
  that the representation is
  information-rich and unambiguous.</p>
  
  <p><code>__str__(self)</code> Called by the <code>str()</code> built-in function and by the print
  statement to compute the ""informal""
  string representation of an object.
  This differs from <code>__repr__()</code> in that
  it does not have to be a valid Python
  expression: a more convenient or
  concise representation may be used
  instead. The return value must be a
  string object.</p>
</blockquote>
"
191069,"<p>There are more to it ofcourse.</p>

<p>Here's a comprehensive list and details!</p>

<p><a href=""http://wiki.python.org/moin/WebFrameworks""><strong>Web Frameworks for Python</strong></a></p>

<p>Extract from above link:</p>

<blockquote>
  <p><H2>Popular Full-Stack Frameworks</H2></p>
  
  <p>A web application may use a
  combination of a base HTTP application
  server, a storage mechanism such as a
  database, a template engine, a request
  dispatcher, an authentication module
  and an AJAX toolkit. These can be
  individual components or be provided
  together in a high-level framework.</p>
  
  <p>These are the most popular high-level
  frameworks. Many of them include
  components listed on the WebComponents
  page.</p>
  
  <p><a href=""http://wiki.python.org/moin/Django""><strong>Django</strong></a> (1.0 Released 2008-09-03) a
  high-level Python Web framework that
  encourages rapid development and
  clean, pragmatic design</p>
  
  <p><a href=""http://pylonshq.com/""><strong>Pylons</strong></a> (0.9.6.2 Released 2008-05-28) a
  lightweight Web framework emphasizing
  flexibility and rapid development. It
  combines the very best ideas from the
  worlds of Ruby, Python and Perl,
  providing a structured but extremely
  flexible Python Web framework. It's
  also one of the first projects to
  leverage the emerging WSGI standard,
  which allows extensive re-use and
  flexibility but only if you need it.
  Out of the box, Pylons aims to make
  Web development fast, flexible and
  easy. Pylons is built on top of Paste
  (see below).</p>
  
  <p><a href=""http://www.turbogears.org/""><strong>TurboGears</strong></a> (1.0.4.4 Released
  2008-03-07) the rapid Web development
  megaframework you've been looking for.
  Combines <a href=""http://wiki.python.org/moin/CherryPy""><strong>CherryPy</strong></a>, Kid, SQLObject and
  <a href=""http://wiki.python.org/moin/MochiKit""><strong>MochiKit</strong></a>. After reviewing the website
  check out: <a href=""http://lucasmanual.com/mywiki/TurboGears""><strong>QuickStart Manual</strong></a></p>
  
  <p><a href=""http://mdp.cti.depaul.edu/""><strong>web2py</strong></a> (currently version 1.43)
  Everything in one package with no
  dependencies. Development, deployment,
  debugging, testing, database
  administration and maintenance of
  applications can be done via the
  provided web interface. web2py has no
  configuration files, requires no
  installation, can run off a USB drive.
  web2py uses Python for the Model, the
  Views and the Controllers, has a
  built-in ticketing system to manage
  errors, an internationalization
  engine, works with MySQL, PostgreSQL,
  SQLite , Oracle, MSSQL and the Google
  App Engine via an ORM abstraction
  layer. web2py includes libraries to
  handle HTML/XML, RSS, ATOM, CSV, RTF,
  JSON, AJAX, XMLRPC, WIKI markup.
  Production ready, capable of
  upload/download of very large files,
  and always backward compatible.</p>
  
  <p><a href=""http://grok.zope.org/""><strong>Grok</strong></a> (0.13 Released 2008-06-23) is
  built on the existing Zope 3
  libraries, but aims to provide an
  easier learning curve and a more agile
  development experience. It does this
  by placing an emphasis on convention
  over configuration and DRY (Don't
  Repeat Yourself).</p>
  
  <p><a href=""http://www.zope.org/""><strong>Zope</strong></a> (2.10.4 Released 2007-07-04,
  3.3.1 Released 2007-01-14, Zope 3.4.0c1 Released 2008-01-31) Being the grandaddy of Python web frameworks,
  Zope has grown into a family of
  frameworks over the years. Zope 1 was
  released in 1999. Zope 2 is both a web
  framework and a general purpose
  application server, today it is
  primarily used by
  ContentManagementSystems. Zope 3 is
  both a standalone framework and a
  collection of related libraries, which
  are also included with newer releases
  of Zope 2. All of the Zope frameworks
  include the ZODB, an object database
  for Python.</p>
</blockquote>
"
243543,"<p>There are currently two forms of inheritance in Django - MTI (model table inheritance) and ABC (abstract base classes).</p>

<p>I wrote a <a href=""http://web.archive.org/web/20090227074910/http://thisweekindjango.com/articles/2008/jun/17/abstract-base-classes-vs-model-tab/"" rel=""nofollow"">tutorial</a> on what's going on under the hood.</p>

<p>You can also reference the official docs on <a href=""http://docs.djangoproject.com/en/dev/topics/db/models/#model-inheritance"" rel=""nofollow"">model inheritance</a>.</p>
"
325066,"<p>The ticket you linked to is for bulk creation - if you're not relying on an overridden <code>save</code> method or pre/post save signals to do bits of work on save, <a href=""http://docs.djangoproject.com/en/dev/topics/db/queries/#updating-multiple-objects-at-once""><code>QuerySet</code> has an <code>update</code> method</a> which you can use to perform an <code>UPDATE</code> on the filtered rows:</p>

<pre><code>Something.objects.filter(x__in=['a', 'b', 'c']).update(a='something')
</code></pre>
"
47304,"<p>You can use <code>get_absolute_url</code>, but that will only work for a particular object.  Since your object hasn't been created yet, it won't work in this case.</p>

<p>You want to use <a href=""https://docs.djangoproject.com/en/1.2/topics/http/urls/#naming-url-patterns"" rel=""nofollow"">named URL patterns</a>.  Here's a quick intro:</p>

<p>Change the line in your urls.py to:</p>

<pre><code>(r'^manage/products/add/$', create_object, {'model': Product, 'post_save_redirect': ''}, ""create-product""),
</code></pre>

<p>Then, in your template you use this to display the URL:</p>

<pre><code>{% url create-product %}
</code></pre>

<p>If you're using Django 1.5 or higher you need this:</p>

<pre><code>{% url 'create-product' %}
</code></pre>

<p>You can do some more powerful things with named URL patterns, they're very handy.  Note that they are only in the development version (and also 1.0).</p>
"
324653,"<p>You want to use:</p>

<pre><code>from collections import defaultdict
myIndex = defaultdict(list)
myIndex[someId].append(someVal)
</code></pre>

<p>Standard Library <a href=""http://docs.python.org/library/collections.html#id3"" rel=""nofollow""><code>defaultdict</code> objects</a>.</p>

<p>Example usage from the Python documentation:</p>

<pre><code>&gt;&gt;&gt; s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for k, v in s:
        d[k].append(v)

&gt;&gt;&gt; d.items()
[('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]
</code></pre>
"
268660,"<p>I should start by saying that ""I probably wouldn't do this myself, but I have in the past"". The serve_forever (from SocketServer.py) method looks like this:</p>

<pre><code>def serve_forever(self):
    """"""Handle one request at a time until doomsday.""""""
    while 1:
        self.handle_request()
</code></pre>

<p>You could replace (in subclass) <code>while 1</code> with <code>while self.should_be_running</code>, and modify that value from a different thread. Something like:</p>

<pre><code>def stop_serving_forever(self):
    """"""Stop handling requests""""""
    self.should_be_running = 0
    # Make a fake request to the server, to really force it to stop.
    # Otherwise it will just stop on the next request.
    # (Exercise for the reader.)
    self.make_a_fake_request_to_myself()
</code></pre>

<p>Edit: I dug up the actual code I used at the time:</p>

<pre><code>class StoppableRPCServer(SimpleXMLRPCServer.SimpleXMLRPCServer):

    stopped = False
    allow_reuse_address = True

    def __init__(self, *args, **kw):
        SimpleXMLRPCServer.SimpleXMLRPCServer.__init__(self, *args, **kw)
        self.register_function(lambda: 'OK', 'ping')

    def serve_forever(self):
        while not self.stopped:
            self.handle_request()

    def force_stop(self):
        self.server_close()
        self.stopped = True
        self.create_dummy_request()

    def create_dummy_request(self):
        server = xmlrpclib.Server('http://%s:%s' % self.server_address)
        server.ping()
</code></pre>
"
86173,"<p><strong>Jython</strong> and <strong>IronPython</strong> are useful if you have an overriding need to interface with existing libraries written in a different platform, like if you have 100,000 lines of Java and you just want to write a 20-line Python script. Not particularly useful for anything else, in my opinion, because they are perpetually a few versions behind CPython due to community inertia.</p>

<p><strong>Stackless</strong> is interesting because it has support for green threads, continuations, etc. Sort of an Erlang-lite.</p>

<p><strong>PyPy</strong> is an experimental interpreter/compiler that may one day supplant CPython, but for now is more of a testbed for new ideas.</p>
"
269276,"<p>+1 for the <a href=""http://web.archive.org/web/20110709171259/http://chardet.feedparser.org/docs/faq.html"">chardet</a> module (suggested by <a href=""http://stackoverflow.com/questions/269060/is-there-a-python-library-function-which-attempts-to-guess-the-character-encoding/269105#269105""><code>@insin</code></a>).</p>

<p>It is not in the standard library, but you can easily install it with the following command:</p>

<pre><code>$ pip install chardet
</code></pre>

<p><a href=""http://web.archive.org/web/20111003070626/http://chardet.feedparser.org/"">Example</a>:</p>

<pre><code>&gt;&gt;&gt; import chardet
&gt;&gt;&gt; import urllib
&gt;&gt;&gt; detect = lambda url: chardet.detect(urllib.urlopen(url).read())
&gt;&gt;&gt; detect('http://stackoverflow.com')
{'confidence': 0.85663169917190185, 'encoding': 'ISO-8859-2'}    
&gt;&gt;&gt; detect('http://stackoverflow.com/questions/269060/is-there-a-python-lib')
{'confidence': 0.98999999999999999, 'encoding': 'utf-8'}
</code></pre>

<p>See <a href=""http://guide.python-distribute.org/installation.html#installing-pip"">Installing Pip</a> if you don't have one.</p>
"
268686,"<p>In my python 2.6 installation, I can call it on the underlying TCPServer - it still there inside your <code>HTTPServer</code>:</p>

<pre><code>TCPServer.shutdown


&gt;&gt;&gt; import BaseHTTPServer
&gt;&gt;&gt; h=BaseHTTPServer.HTTPServer(('',5555), BaseHTTPServer.BaseHTTPRequestHandler)
&gt;&gt;&gt; h.shutdown
&lt;bound method HTTPServer.shutdown of &lt;BaseHTTPServer.HTTPServer instance at 0x0100D800&gt;&gt;
&gt;&gt;&gt;
</code></pre>
"
168435,"<p>Here's a one-liner:</p>

<pre><code>import os
import time
from pprint import pprint

pprint([(x[0], time.ctime(x[1].st_ctime)) for x in sorted([(fn, os.stat(fn)) for fn in os.listdir(""."")], key = lambda x: x[1].st_ctime)])
</code></pre>

<p>This calls os.listdir() to get a list of the filenames, then calls os.stat() for each one to get the creation time, then sorts against the creation time.</p>

<p>Note that this method only calls os.stat() once for each file, which will be more efficient than calling it for each comparison in a sort.</p>
"
337912,"<p>Have you tried using the Popen.Poll() method. You could just do this:</p>

<pre><code>p = subprocess.Popen(""subprocess"", 
                   stdout=subprocess.PIPE, 
                   stderr=subprocess.PIPE, 
                   stdin=subprocess.PIPE)

time.sleep(SECONDS_TO_WAIT)
retcode = p.poll()
if retcode is not None:
   # process has terminated
</code></pre>

<p>This will cause you to always wait 10 seconds, but if the failure case is rare this would be amortized over all the success cases.</p>

<hr>

<p>Edit:</p>

<p>How about:</p>

<pre><code>t_nought = time.time()
seconds_passed = 0

while(p.poll() is not None and seconds_passed &lt; 10):
    seconds_passed = time.time() - t_nought

if seconds_passed &gt;= 10:
   #TIMED OUT
</code></pre>

<p>This has the ugliness of being a busy wait, but I think it accomplishes what you want.</p>

<p>Additionally looking at the select call documentation again I think you may want to change it as follows:</p>

<pre><code>SECONDS_TO_WAIT = 10
  select.select([p.stderr], 
                [], 
                [p.stdout, p.stderr],
                SECONDS_TO_WAIT)
</code></pre>

<p>Since you would typically want to read from stderr, you want to know when it has something available to read (ie the failure case).</p>

<p>I hope this helps.</p>
"
280865,"<p>A slight simplification and generalization to the answers provided so far, using a recent addition to python's syntax:</p>

<pre><code>&gt;&gt;&gt; l = [[[[[39]]]], [1, 2, 3], [4, [5, 3], 1], [[[[8, 9], 10], 11], 12]]
&gt;&gt;&gt; def asum(t): return sum(map(asum, t)) if hasattr(t, '__iter__') else t
...
&gt;&gt;&gt; sorted(l, key=asum)
[[1, 2, 3], [4, [5, 3], 1], [[[[39]]]], [[[[8, 9], 10], 11], 12]]
</code></pre>
"
288807,"<p>In this case I would use <em>delegation</em> rather than <em>inheritance</em>. It means that your class should contain the file object as an attribute and invoke a <code>readline</code> method on it. You could pass a file object in the constructor of the logger class.</p>

<p>There are at least two reasons for this:</p>

<ol>
<li>Delegation reduces coupling, for example in place of file objects you can use any other object that implements a <code>readline</code> method (<em>duck typing</em> comes handy here).</li>
<li>When inheriting from file the public interface of your class becomes unnecessarily broad. It includes all the methods defined on file even if these methods don't make sense in case of Apache log.</li>
</ol>
"
39659,"<p>Try using pkg_resources, which is part of setuptools (and available on all of the pythons I have access to right now):</p>

<pre><code>&gt;&gt;&gt; import pkg_resources
&gt;&gt;&gt; pkg_resources.resource_ filename(__name__, ""foo.config"")
'foo.config'
&gt;&gt;&gt; pkg_resources.resource_filename('tempfile', ""foo.config"")
'/usr/lib/python2.4/foo.config'
</code></pre>

<p>There's more discussion about using pkg_resources to get resources on the <a href=""http://peak.telecommunity.com/DevCenter/PythonEggs#accessing-package-resources"">eggs</a> page and the <a href=""http://peak.telecommunity.com/DevCenter/PkgResources"">pkg_resources</a> page.</p>

<p>Also note, where possible it's probably advisable to use pkg_resources.resource_stream or pkg_resources.resource_string because if the package is part of an egg, resource_filename will copy the file to a temporary directory.</p>
"
271642,"<p><a href=""http://www.boost.org/doc/libs/1_36_0/libs/python/doc/tutorial/doc/html/index.html"">Boost.Python</a> provides an easy way to turn C++ code into Python modules. It's rather mature and works well in my experience. </p>

<p>For example, the inevitable Hello World...</p>

<pre><code>char const* greet()
{
  return ""hello, world"";
}
</code></pre>

<p>can be exposed to Python by writing a Boost.Python wrapper:</p>

<pre><code>#include &lt;boost/python.hpp&gt;

BOOST_PYTHON_MODULE(hello_ext)
{
  using namespace boost::python;
  def(""greet"", greet);
}
</code></pre>

<p>That's it. We're done. We can now build this as a shared library. The resulting DLL is now visible to Python. Here's a sample Python session:</p>

<pre><code>&gt;&gt;&gt; import hello_ext
&gt;&gt;&gt; print hello.greet()
hello, world
</code></pre>

<p>(example taken from boost.org)</p>
"
340338,"<p>You need to take some parts into mind here,</p>

<ol>
<li>What will you gain from re-writing</li>
<li>Is it an economically wise decision</li>
<li>Will the code be easier to handle for new programmers</li>
<li>Performance-wise, will this be a good option?</li>
</ol>

<p>These four points is something that is important, will the work be more efficient after you re-write the code? Probably. But will it be worth the cost of re-development?</p>

<p>One important step to follow, if you decide to re-write, make 3 documents, first Analyze the project, what needs to be done? How should everything work? Then put up a document with Requirements, what specificly do we need and how should this be done? Last but not least, the design document, where you put all your final class diagrams, the system operations and how the design and flow of the page should work.</p>

<p>This will help a new developer, and old ones, to actually think about ""do we really need to re-write?"".</p>
"
211774,"<p>The <a href=""http://docs.python.org/library/collections.html"" rel=""nofollow"">collections module</a> has grown a <em>namedtuple</em> function in 2.6:</p>

<pre><code>import collections
opt=collections.namedtuple('options','VERBOSE IGNORE_WARNINGS')
myoptions=opt(True, False)

&gt;&gt;&gt; myoptions
options(VERBOSE=True, IGNORE_WARNINGS=False)
&gt;&gt;&gt; myoptions.VERBOSE
True
</code></pre>

<p>A <em>namedtuple</em> is immutable, so you can only assign field values when you create it.</p>

<p>In earlier <em>Python</em> versions, you can create an empty class:</p>

<pre><code>class options(object):
    pass

myoptions=options()
myoptions.VERBOSE=True
myoptions.IGNORE_WARNINGS=False
&gt;&gt;&gt; myoptions.IGNORE_WARNINGS,myoptions.VERBOSE
(False, True)
</code></pre>
"
111199,"<p>You're talking about testing too much at once.  If you start trying to attack a testing problem by saying ""Let's verify that it modifies its environment correctly"", you're doomed to failure.  Environments have dozens, maybe even millions of potential variations.</p>

<p>Instead, look at the pieces (""units"") of your program.  For example, are you going to have a function that determines where the files are that have to be written?  What are the inputs to that function?  Perhaps an environment variable, perhaps some values read from a config file?  Test that function, and don't actually do anything that modifies the filesystem.  Don't pass it ""realistic"" values, pass it values that are easy to verify against.  Make a temporary directory, populate it with files in your test's <code>setUp</code> method.</p>

<p>Then test the code that writes the files.  Just make sure it's writing the right contents file contents.  Don't even write to a real filesystem!  You don't need to make ""fake"" file objects for this, just use Python's handy <code>StringIO</code> modules; they're ""real"" implementations of the ""file"" interface, they're just not the ones that your program is actually going to be writing to.</p>

<p>Ultimately you will have to test the final, everything-is-actually-hooked-up-for-real top-level function that passes the real environment variable and the real config file and puts everything together.  But don't worry about that to get started.  For one thing, you will start picking up tricks as you write individual tests for smaller functions and creating test mocks, fakes, and stubs will become second nature to you.  For another: even if you can't quite figure out how to test that one function call, you will have a very high level of confidence that everything which it is calling works perfectly.  Also, you'll notice that test-driven development forces you to make your APIs clearer and more flexible.  For example: it's much easier to test something that calls an <code>open()</code> method on an object that came from somewhere abstract, than to test something that calls <code>os.open</code> on a string that you pass it.  The <code>open</code> method is flexible; it can be faked, it can be implemented differently, but a string is a string and <code>os.open</code> doesn't give you any leeway to catch what methods are called on it.</p>

<p>You can also build testing tools to make repetitive tasks easy.  For example, twisted provides facilities for creating temporary files for testing <a href=""http://twistedmatrix.com/documents/8.1.0/api/twisted.trial.unittest.TestCase.html#mktemp"">built right into its testing tool</a>.  It's not uncommon for testing tools or larger projects with their own test libraries to have functionality like this.</p>
"
2316,"<p>Do you need to open the locfile in binary using <code>rb</code>?</p>

<pre><code>f = open (locfile, ""rb"")
</code></pre>
"
225382,"<p>Parsing of dates is a pain with RSS feeds in-the-wild, and that's where <code>feedparser</code> can be a big help.</p>

<p>If you use the <code>*_parsed</code> properties (like <code>updated_parsed</code>), <code>feedparser</code> will have done the work and will return a 9-tuple Python date in UTC.</p>

<p>See <a href=""http://packages.python.org/feedparser/date-parsing.html"" rel=""nofollow"">http://packages.python.org/feedparser/date-parsing.html</a> for more gory details.</p>
"
279809,"<p>Some digging in the source code revealed:</p>

<p>django/db/models/options.py:</p>

<pre><code>def get_all_related_objects(self, local_only=False):

def get_all_related_many_to_many_objects(self, local_only=False)
</code></pre>

<p>And, using these functions on the models from above, you hypothetically get:</p>

<pre><code>&gt;&gt;&gt; Food._meta.get_all_related_objects()
[&lt;RelatedObject: app_label:cow related to food&gt;,
    &lt;RelatedObject: app_label:cat related to food&gt;,]

&gt;&gt;&gt; Food._meta.get_all_related_many_to_many_objects()
[&lt;RelatedObject: app_label:human related to food&gt;,]

# and, per django/db/models/related.py
# you can retrieve the model with
&gt;&gt;&gt; Food._meta.get_all_related_objects()[0].model
&lt;class 'app_label.models.Cow'&gt;
</code></pre>

<p><em>Note</em>: I hear Model._meta is 'unstable', and perhaps ought not to be relied upon in the post Django-1.0 world.</p>

<p>Thanks for reading. :)</p>
"
227855,"<p>As other answers have suggested, you can provide your function with a copy of the list.</p>

<p>As an alternative, your function could take a copy of the argument:</p>

<pre><code>def burninate(b):
    c = []
    b = list(b)
    for i in range(3):
        c.append(b.pop())
    return c
</code></pre>

<p>Basically, you need to be clear in your mind (and in your documentation) whether your function will change its arguments.  In my opinion, functions that return computed values should not change their arguments, and functions that change their arguments should not return anything.  See python's [].sort(), [].extend(), {}.update(), etc. for examples.  Obviously there are exceptions (like .pop()).</p>

<p>Also, depending on your particular case, you could rewrite the function to avoid using pop() or other functions that modify the argument.  e.g.</p>

<pre><code>def burninante(b):
    return b[:-4:-1]   # return the last three elements in reverse order
</code></pre>
"
284192,"<p>I don't think this is quite what your looking for, there's no way to display variable values that don't fail, but this may help you get closer to outputting the results the way you want.</p>

<p>You can use the <strong><a href=""http://docs.python.org/library/unittest.html#id3"">TestResult object</a></strong> returned by the <strong>TestRunner.run()</strong> for results analysis and processing.  Particularly, TestResult.errors and TestResult.failures</p>

<p>About the TestResults Object:</p>

<p><a href=""http://docs.python.org/library/unittest.html#id3"">http://docs.python.org/library/unittest.html#id3</a></p>

<p>And some code to point you in the right direction:</p>

<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; import unittest
&gt;&gt;&gt;
&gt;&gt;&gt; class TestSequenceFunctions(unittest.TestCase):
...     def setUp(self):
...         self.seq = range(5)
...     def testshuffle(self):
...         # make sure the shuffled sequence does not lose any elements
...         random.shuffle(self.seq)
...         self.seq.sort()
...         self.assertEqual(self.seq, range(10))
...     def testchoice(self):
...         element = random.choice(self.seq)
...         error_test = 1/0
...         self.assert_(element in self.seq)
...     def testsample(self):
...         self.assertRaises(ValueError, random.sample, self.seq, 20)
...         for element in random.sample(self.seq, 5):
...             self.assert_(element in self.seq)
...
&gt;&gt;&gt; suite = unittest.TestLoader().loadTestsFromTestCase(TestSequenceFunctions)
&gt;&gt;&gt; testResult = unittest.TextTestRunner(verbosity=2).run(suite)
testchoice (__main__.TestSequenceFunctions) ... ERROR
testsample (__main__.TestSequenceFunctions) ... ok
testshuffle (__main__.TestSequenceFunctions) ... FAIL

======================================================================
ERROR: testchoice (__main__.TestSequenceFunctions)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 11, in testchoice
ZeroDivisionError: integer division or modulo by zero

======================================================================
FAIL: testshuffle (__main__.TestSequenceFunctions)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 8, in testshuffle
AssertionError: [0, 1, 2, 3, 4] != [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

----------------------------------------------------------------------
Ran 3 tests in 0.031s

FAILED (failures=1, errors=1)
&gt;&gt;&gt;
&gt;&gt;&gt; testResult.errors
[(&lt;__main__.TestSequenceFunctions testMethod=testchoice&gt;, 'Traceback (most recent call last):\n  File ""&lt;stdin&gt;""
, line 11, in testchoice\nZeroDivisionError: integer division or modulo by zero\n')]
&gt;&gt;&gt;
&gt;&gt;&gt; testResult.failures
[(&lt;__main__.TestSequenceFunctions testMethod=testshuffle&gt;, 'Traceback (most recent call last):\n  File ""&lt;stdin&gt;
"", line 8, in testshuffle\nAssertionError: [0, 1, 2, 3, 4] != [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n')]
&gt;&gt;&gt;
</code></pre>
"
229380,"<p>You can interactively debug a function with pdb as well, provided the script you want to debug does not exit() at the end:</p>

<pre><code>$ cat test.py
#!/usr/bin/python

def foo(f, g):
        h = f+g
        print h
        return 2*f
</code></pre>

<p>To debug, start an interactive python session and import pdb:</p>

<pre><code>$ python
Python 2.5.1 (r251:54869, Apr 18 2007, 22:08:04) 
[GCC 4.0.1 (Apple Computer, Inc. build 5367)] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; import pdb
&gt;&gt;&gt; import test
&gt;&gt;&gt; pdb.runcall(test.foo, 1, 2)
&gt; /Users/simon/Desktop/test.py(4)foo()
-&gt; h = f+g
(Pdb) n
&gt; /Users/simon/Desktop/test.py(5)foo()
-&gt; print h
(Pdb)
</code></pre>

<p>The pdb module comes with python and is documented in the modules docs at <a href=""http://docs.python.org/modindex.html"">http://docs.python.org/modindex.html</a></p>
"
190033,"<p>Let's say you're making some kind of dashboard widget.  As part of this, you want it to display the unread message count in your email box.  So you make a little thread that will:</p>

<ol>
<li>Connect to the mail server and ask how many unread messages you have.</li>
<li>Signal the GUI with the updated count.</li>
<li>Sleep for a little while.</li>
</ol>

<p>When your widget starts up, it would create this thread, designate it a daemon, and start it.  Because it's a daemon, you don't have to think about it; when your widget exits, the thread will stop automatically.</p>
"
231368,"<p>Forget filtering <code>locals()</code>! The dictionary you give to the formatting string is allowed to contain unused keys:</p>

<pre><code>&gt;&gt;&gt; name = 'foo'
&gt;&gt;&gt; zip = 123
&gt;&gt;&gt; unused = 'whoops!'
&gt;&gt;&gt; locals()
{'name': 'foo', 'zip': 123, ... 'unused': 'whoops!', ...}
&gt;&gt;&gt; '%(name)s %(zip)i' % locals()
'foo 123'
</code></pre>
"
225801,"<p>The problem is that with <code>return self.display</code> you return a <em>reference</em> to this list (not a copy). So what you end up with is a list where each element is a reference to self.display. To illustrate, look at the following:</p>

<pre><code>&gt;&gt;&gt; a = [1,2]
&gt;&gt;&gt; b = [a,a]
&gt;&gt;&gt; b
[[1, 2], [1, 2]]
&gt;&gt;&gt; a.append(3)
&gt;&gt;&gt; b
[[1, 2, 3], [1, 2, 3]]
</code></pre>

<p>You probably want to use something like <code>return self.display[:]</code>.</p>
"
236421,"<p>my 0.10 EUR:</p>

<p>i have several python application in 'production'-state. our company use java, c++ and python. we develop with the eclipse ide (pydev for python)</p>

<p><strong>unittests are the key-solution for the problem.</strong> (also for c++ and java)</p>

<p>the less secure world of ""dynamic-typing"" will make you less careless about your code quality</p>

<p><strong>BY THE WAY</strong>:</p>

<p>large scale development doesn't mean, that you use one single language!</p>

<p>large scale development often uses <strong>a handful of languages specific to the problem</strong>.</p>

<p>so i agree to <em>the-hammer-problem</em> :-)</p>

<p><hr /></p>

<p>PS: <a href=""http://www.xoltar.org/old_site/misc/static_typing_eckel.html"">static-typing &amp; python</a></p>
"
238602,"<p>You could try the <a href=""http://www.python.org/doc/2.5.2/lib/module-fnmatch.html""><code>fnmatch</code></a> module, it's got a shell-like wildcard syntax.</p>
"
277972,"<p>To avoid specifying the tag and handler in the dict, you could just use a handler class with methods named to match the type.  Eg</p>

<pre><code>class  MyHandler(object):
    def handle_extractTitle(self, dom):
        # do something

    def handle_extractMetaTags(self, dom):
        # do something

    def handle(self, type, dom):
        func = getattr(self, 'handle_%s' % type, None)
        if func is None:
            raise Exception(""No handler for type %r"" % type)
        return func(dom)
</code></pre>

<p>Usage:</p>

<pre><code> handler = MyHandler()
 handler.handle('extractTitle', dom)
</code></pre>

<p><strong>Update:</strong> </p>

<p>When you have multiple arguments, just change the handle function to take those arguments and pass them through to the function.  If you want to make it more generic (so you don't have to change both the handler functions and the handle method when you change the argument signature), you can use the *args and **kwargs syntax to pass through all received arguments.  The handle method then becomes:</p>

<pre><code>def handle(self, type, *args, **kwargs):
    func = getattr(self, 'handle_%s' % type, None)
    if func is None:
        raise Exception(""No handler for type %r"" % type)
    return func(*args, **kwargs)
</code></pre>
"
190061,"<p>Two popular and relatively simple methods are: (a) the Euclidean distance already suggested, or (b) normalized cross-correlation.  Normalized cross-correlation tends to be noticeably more robust to lighting changes than simple cross-correlation.  Wikipedia gives a formula for the <a href=""http://en.wikipedia.org/wiki/Cross-correlation#Normalized_cross-correlation"">normalized cross-correlation</a>.  More sophisticated methods exist too, but they require quite a bit more work.</p>

<p>Using numpy-like syntax,</p>

<pre>
dist_euclidean = sqrt(sum((i1 - i2)^2)) / i1.size

dist_manhattan = sum(abs(i1 - i2)) / i1.size

dist_ncc = sum( (i1 - mean(i1)) * (i2 - mean(i2)) ) / (
  (i1.size - 1) * stdev(i1) * stdev(i2) )
</pre>

<p>assuming that <code>i1</code> and <code>i2</code> are 2D grayscale image arrays.  </p>
"
286068,"<p>IEEE floating point is binary, not decimal. There is no fixed length binary fraction that is exactly 0.1, or any multiple thereof. It is a repeating fraction, like 1/3 in decimal.</p>

<p>Please read <a href=""http://docs.sun.com/source/806-3568/ncg_goldberg.html"" rel=""nofollow"">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a></p>

<p>Other options besides a Decimal class are </p>

<ul>
<li><p>using Common Lisp or <a href=""http://docs.python.org/whatsnew/2.6.html#the-fractions-module"" rel=""nofollow"">Python 2.6</a> or another language with exact rationals</p></li>
<li><p>converting the doubles to close rationals using, e.g., <a href=""http://www.ics.uci.edu/~eppstein/numth/frap.c"" rel=""nofollow"">frap</a></p></li>
</ul>
"
277687,"<pre><code>%template(IntVector) vector&lt;int&gt;;
</code></pre>
"
53549,"<p>If you <em>do</em> find you need to write unique code for an environment, use pythons </p>

<pre><code>import mymodule_jython as mymodule

import mymodule_cpython as mymodule
</code></pre>

<p>have this stuff in a simple module (''module_importer''?) and write your code like this:</p>

<pre><code>from module_importer import mymodule
</code></pre>

<p>This way, all you need to do is alter <code>module_importer.py</code> per platform.</p>
"
42052,"<p>Tuples make good dictionary keys when you need to combine more than one piece of data into your key and don't feel like making a class for it.</p>

<pre><code>a = {}
a[(1,2,""bob"")] = ""hello!""
a[(""Hello"",""en-US"")] = ""Hi There!""
</code></pre>

<p>I've used this feature primarily to create a dictionary with keys that are coordinates of the vertices of a mesh.  However, in my particular case, the exact comparison of the floats involved worked fine which might not always be true for your purposes [in which case I'd probably convert your incoming floats to some kind of fixed-point integer]</p>
"
14391,"<p>Use a subrange of [\u0000-\uFFFF] for what you want.</p>

<p>You can also use the re.UNICODE compile flag. <a href=""http://docs.python.org/lib/re-syntax.html"">The docs</a> say that if UNICODE is set, \w will match the characters [0-9_] plus whatever is classified as alphanumeric in the Unicode character properties database. </p>

<p>See also <a href=""http://coding.derkeiler.com/Archive/Python/comp.lang.python/2004-05/2560.html"">http://coding.derkeiler.com/Archive/Python/comp.lang.python/2004-05/2560.html</a>.</p>
"
327229,"<p>wokkel is the future of twisted words.  <a href=""http://metajack.im/"">metajack</a> wrote a really nice <a href=""http://metajack.im/2008/09/25/an-xmpp-echo-bot-with-twisted-and-wokkel/"">blog post</a> on getting started.</p>

<p>If you want a nice, functional sample project to start with, check out my <a href=""http://github.com/dustin/whatsup"">whatsup</a> bot.</p>
"
311778,"<p>splitting should do the trick. Here's a good way to extract the data, as well:</p>

<pre><code>&gt;&gt;&gt; line = ""$GPRMC,199304.973,3248.7780,N,11355.7832,W,1,06,02.2,25722.5,M,,,*00""
&gt;&gt;&gt; line = line.split("","")
&gt;&gt;&gt; neededData = (float(line[2]), line[3], float(line[4]), line[5], float(line[9]))
&gt;&gt;&gt; print neededData
(3248.7779999999998, 'N', 11355.7832, 'W', 25722.5)
</code></pre>
"
287548,"<p>Guido Van Rossum <a href=""http://www.artima.com/weblogs/viewpost.jsp?thread=4829"">suggests</a>:</p>

<pre><code>def main(argv=None):
  if argv is None:
    argv = sys.argv
  ...

if __name__ == ""__main__"":
    sys.exit(main())
</code></pre>

<p>This way you can run <code>main()</code> from somewhere else (supplying the arguments), and if you want to exit with an error code just <code>return 1</code> from <code>main()</code>, and it won't make an interactive interpreter exit by mistake.</p>
"
38514,"<p>Return a tuple.</p>

<pre><code>def f(x):
    # do stuff
    return (True, modified_string)

success, modified_string = f(something)
</code></pre>
"
166058,"<p><code>SLEEP.exe</code> is included in most Resource Kits e.g. <a href=""http://www.microsoft.com/downloads/details.aspx?familyid=9d467a69-57ff-4ae7-96ee-b18c4790cffd&amp;displaylang=en"" rel=""nofollow"">The Windows Server 2003 Resource Kit</a> which can be installed on Windows XP too.</p>

<pre><code>Usage:  sleep      time-to-sleep-in-seconds
        sleep [-m] time-to-sleep-in-milliseconds
        sleep [-c] commited-memory ratio (1%-100%)
</code></pre>
"
92318,"<p>Well, there are great ressources for advanced Python programming :</p>

<ul>
<li>Dive Into Python (<a href=""http://www.diveintopython.net/"">read it for free</a>)</li>
<li>Online python cookbooks (e.g. <a href=""http://code.activestate.com/recipes/langs/python/"">here</a> and <a href=""http://the.taoofmac.com/space/Python/Grimoire"">there</a>)</li>
<li>O'Reilly's Python Cookbook (see amazon)</li>
<li>A funny riddle game : <a href=""http://www.pythonchallenge.com/"">Python Challenge</a> </li>
</ul>

<p>Here is a list of subjects you must master if you want to write ""Python"" on your resume :</p>

<ul>
<li><a href=""http://docs.python.org/tutorial/datastructures.html#list-comprehensions"">list comprehensions</a></li>
<li><a href=""http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained/231855#231855"">iterators and generators</a></li>
<li><a href=""http://stackoverflow.com/questions/739654/understanding-python-decorators/1594484#1594484"">decorators</a></li>
</ul>

<p>They are what make Python such a cool language (with the standard library of course, that I keep discovering everyday).</p>
"
153862,"<p>My usual layout looks something like this:</p>

<ul>
<li>app.yaml</li>
<li>index.yaml</li>
<li>request.py - contains the basic WSGI app</li>
<li>lib
<ul>
<li><code>__init__.py</code> - common functionality, including a request handler base class</li>
</ul></li>
<li>controllers - contains all the handlers. request.yaml imports these.</li>
<li>templates
<ul>
<li>all the django templates, used by the controllers</li>
</ul></li>
<li>model
<ul>
<li>all the datastore model classes</li>
</ul></li>
<li>static
<ul>
<li>static files (css, images, etc). Mapped to /static by app.yaml</li>
</ul></li>
</ul>

<p>I can provide examples of what my app.yaml, request.py, lib/<strong>init</strong>.py, and sample controllers look like, if this isn't clear.</p>
"
245209,"<p>âFirst classâ means you can operate on them in the usual manner. Most of the times, this just means you can pass these first-class citizens as arguments to functions, or return them from functions.</p>

<p>This is self-evident for objects but not always so evident for functions, or even classes:</p>

<pre><code>void f(int n) { return n * 2; }

void g(Action&lt;int&gt; a, int n) { return a(n); }

// Now call g and pass f:

g(f, 10); // = 20
</code></pre>

<p>This is an example in C# where functions actually <em>aren't</em> first-class objects. The above code therefore uses a small workaround (namely a generic delegate called <code>Action&lt;&gt;</code>) to pass a function as an argument. Other languages, such as Ruby, allow treating even classes and code blocks as normal variables (or in the case of Ruby, constants).</p>
"
275817,"<p>I would recommend to use the <code>subprocess</code> module which has all the features that these functions have and more.</p>
"
274497,"<p>Two things:</p>

<ul>
<li>I would make the default block size a <em>lot</em> larger than 512. I would start with 16384 and perhaps more.</li>
<li>For modularity, it might be better to have the <code>copy_with_prog</code> function not output the progress bar itself, but call a callback function so the caller can decide how to display the progress.</li>
</ul>

<p>Perhaps something like this:</p>

<pre><code>def copy_with_prog(src, dest, callback = None):
    while True:
        # copy loop stuff
        if callback:
            callback(pos, total)

prog = ProgressBar(...)
copy_with_prog(src, dest, lambda pos, total: prog.update(pos, total))
</code></pre>
"
287521,"<p>As <a href=""http://stackoverflow.com/questions/287379/parsing-c-preprocessor-if-statements#287405"">KeithB said</a>, you could just let the preprocessor do this for you. </p>

<p>But if you're not trying to hide things (ie., there may be stuff in the conditionally compiled code that you don't want or aren't permitted to give to some one else) a much simpler option would be to just put the proper <code>#define</code> directives in a header that's globally included.</p>

<ul>
<li>your clients don't need to worry about <code>-D</code> options</li>
<li>you don't have to have some custom step in your build process</li>
<li>the code you give your clients isn't potentially semi-obfuscated</li>
<li>you don't introduce bugs because the tool does things subtly different from the C preprocessor</li>
<li>you don't have to maintain some custom tool</li>
</ul>
"
157141,"<p>Having to iterate over the list multiple times isn't elegant IMHO.</p>

<p>I'd probably create a function that allows doing:</p>

<pre><code>twos, threes = countmatching(xrange(1,10),
                             lambda a: a % 2 == 0,
                             lambda a: a % 3 == 0)
</code></pre>

<p>A starting point would be something like this:</p>

<pre><code>def countmatching(iterable, *predicates):
    v = [0] * len(predicates)
    for e in iterable:
        for i,p in enumerate(predicates):
            if p(e):
                v[i] += 1
    return tuple(v)
</code></pre>

<p>Btw, ""itertools recipes"" has a recipe for doing much like your alt4.</p>

<pre><code>def quantify(seq, pred=None):
    ""Count how many times the predicate is true in the sequence""
    return sum(imap(pred, seq))
</code></pre>
"
214786,"<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; timestamp = ""2008-09-26T01:51:42.000Z""
&gt;&gt;&gt; ts = time.strptime(timestamp[:19], ""%Y-%m-%dT%H:%M:%S"")
&gt;&gt;&gt; time.strftime(""%m/%d/%Y"", ts)
'09/26/2008'
</code></pre>

<p>See the documentation of the Python <a href=""http://python.org/doc/2.5/lib/module-time.html""><code>time</code></a> module for more information.</p>
"
214868,"<p>If you're talking about Python module DLLs, then simply modifying <code>sys.path</code> should be fine.  However, if you're talking about DLLs <em>linked</em> against those DLLs; i.e. a <code>libfoo.dll</code> which a <code>foo.pyd</code> depends on, then you need to modify your PATH environment variable.  I wrote about <a href=""http://glyf.livejournal.com/7878.html"">doing this for PyGTK a while ago</a>, but in your case I think it should be as simple as:</p>

<pre><code>import os
os.environ['PATH'] = 'my-app-dir' + ';' + os.environ['PATH']
</code></pre>

<p>That will insert <code>my-app-dir</code> at the head of your Windows path, which I believe also controls the load-order for DLLs.</p>

<p>Keep in mind that you will need to do this before loading the DLL in question, i.e., before importing anything interesting.</p>

<p>sqlite3 may be a bit of a special case, though, since it is distributed with Python; it's obviously kind of tricky to test this quickly, so I haven't checked <code>sqlite3.dll</code> specifically.</p>
"
297155,"<p>Although calling c++ libs from python is more normal - you can call a python module from c++ by bascially calling the python intepreter and have it execute the python source. 
This is called <a href=""https://docs.python.org/2.7/extending/embedding.html"" rel=""nofollow"">embedding</a>   </p>

<p>Alternatively the <a href=""http://www.boost.org/doc/libs/1_37_0/libs/python/doc/index.html"" rel=""nofollow"">boost.python</a> library makes it very easy.</p>
"
297448,"<p>I'm in the process of writing some code in an <a href=""http://code.google.com/p/thrift-protobuf-compare/"">open source project named thrift-protobuf-compare</a> comparing between protobuf and thrift. For now it covers few serialization aspects, but I intend to cover more. The results (for <a href=""http://eishay.blogspot.com/search/label/Thrift"">Thrift</a> and <a href=""http://eishay.blogspot.com/search/label/protobuf"">Protobuf</a>) are discussed in my blog, I'll add more when I'll get to it.
You may look at the code to compare API, description language and generated code. I'll be happy to have contributions to achieve a more rounded comparison. </p>
"
78868,"<p>I don't know Python, but your question seems very general. Ignore me if it's specific to Python.</p>

<p>Class nesting is all about scope. If you think that one class will only make sense in the context of another one, then the former is probably a good candidate to become a nested class.</p>

<p>It is a common pattern make helper classes as private, nested classes.</p>
"
259159,"<p>Use the <a href=""http://docs.python.org/2/library/urlparse.html#urlparse.urlsplit"" rel=""nofollow"">urlparse</a> module. Check this function:</p>

<pre><code>import urlparse

def process_url(url, keep_params=('CONTENT_ITEM_ID=',)):
    parsed= urlparse.urlsplit(url)
    filtered_query= '&amp;'.join(
        qry_item
        for qry_item in parsed.query.split('&amp;')
        if qry_item.startswith(keep_params))
    return urlparse.urlunsplit(parsed[:3] + (filtered_query,) + parsed[4:])
</code></pre>

<p>In your example:</p>

<pre><code>&gt;&gt;&gt; process_url(a)
'http://www.domainname.com/page?CONTENT_ITEM_ID=1234'
</code></pre>

<p>This function has the added bonus that it's easier to use if you decide that you also want some more query parameters, or if the order of the parameters is not fixed, as in:</p>

<pre><code>&gt;&gt;&gt; url='http://www.domainname.com/page?other_value=xx&amp;param3&amp;CONTENT_ITEM_ID=1234&amp;param1'
&gt;&gt;&gt; process_url(url, ('CONTENT_ITEM_ID', 'other_value'))
'http://www.domainname.com/page?other_value=xx&amp;CONTENT_ITEM_ID=1234'
</code></pre>
"
166093,"<p>I faced a similar problem, but I just knocked up a very short C++ console application to do the same thing. Just run <em>MySleep.exe 1000</em> - perhaps easier than downloading/installing the whole resource kit.</p>

<pre class=""lang-c prettyprint-override""><code>#include &lt;tchar.h&gt;
#include &lt;stdio.h&gt;
#include ""Windows.h""

int _tmain(int argc, _TCHAR* argv[])
{
    if (argc == 2)
    {
        _tprintf(_T(""Sleeping for %s ms\n""), argv[1]);
        Sleep(_tstoi(argv[1]));
    }
    else
    {
        _tprintf(_T(""Wrong number of arguments.\n""));
    }
    return 0;
}
</code></pre>
"
114848,"<p>Yes.  Internally it is implemented as open hashing based on a primitive polynomial over Z/2 (<a href=""http://mail.python.org/pipermail/python-list/2000-February/023645.html"">source</a>).</p>
"
205096,"<ul>
<li>There's <a href=""http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/"" rel=""nofollow"">pyrex</a> that compiles python like source to python extension modules </li>
<li><a href=""http://codespeak.net/pypy/dist/pypy/doc/coding-guide.html#our-runtime-interpreter-is-restricted-python"" rel=""nofollow"">rpython</a> which allows you to compile python with some restrictions to various backends like C, LLVM, .Net etc. </li>
<li>There's also <a href=""http://shed-skin.blogspot.com/"" rel=""nofollow"">shed-skin</a> which translates python to C++, but I can't say if it's any good. </li>
<li><a href=""http://codespeak.net/pypy/dist/pypy/doc/home.html"" rel=""nofollow"">PyPy</a> implements a JIT compiler which attempts to optimize runtime by translating pieces of what's running at runtime to machine code, if you write for the PyPy interpreter that might be a feasible path. </li>
<li>The same author that is working on JIT in PyPy wrote <a href=""http://psyco.sourceforge.net/"" rel=""nofollow"">psyco</a> previously which optimizes python in the CPython interpreter.</li>
</ul>
"
121474,"<p>Automatically log your 500s, that way:</p>

<ul>
<li>You know when they occur.</li>
<li>You don't need to rely on users sending you stacktraces.</li>
</ul>

<p>Joel recommends even going so far as automatically creating tickets in your bug tracker when your application experiences a failure. Personally, I create a (private) RSS feed with the stacktraces, urls, etc. that the developers can subscribe to.</p>

<p>Showing stack traces  to your users on the other hand could possibly leak information that malicious users could use to attack your site. Overly detailed error messages are one of the classic stepping stones to SQL injection attacks.</p>

<p><em>Edit</em> (added code sample to capture traceback):</p>

<p>You can get the exception information from the sys.exc_info call. While formatting the traceback for display comes from the traceback module:</p>

<pre><code>import traceback
import sys

try:
	raise Exception(""Message"")
except:
	type, value, tb = sys.exc_info()
	print &gt;&gt; sys.stderr,  type.__name__, "":"", value
	print &gt;&gt; sys.stderr, '\n'.join(traceback.format_tb(tb))
</code></pre>

<p>Prints:</p>

<pre><code>Exception : Message
  File ""exception.py"", line 5, in &lt;module&gt;
    raise Exception(""Message"")
</code></pre>
"
20069,"<p>Pretty much everybody is using <a href=""http://python.active-venture.com/lib/module-getopt.html"" rel=""nofollow"">getopt</a></p>

<p>Here is the example code for the doc :</p>

<pre><code>import getopt, sys

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], ""ho:v"", [""help"", ""output=""])
    except getopt.GetoptError:
        # print help information and exit:
        usage()
        sys.exit(2)
    output = None
    verbose = False
    for o, a in opts:
        if o == ""-v"":
            verbose = True
        if o in (""-h"", ""--help""):
            usage()
            sys.exit()
        if o in (""-o"", ""--output""):
            output = a
</code></pre>

<p>So in a word, here is how it works.</p>

<p>You've got two types of options. Those who are receiving arguments, and those who are
just like switches.</p>

<p><code>sys.argv</code> is pretty much your <code>char** argv</code> in C. Like in C you skip the first element which is the name of your program and parse only the arguments : <code>sys.argv[1:]</code></p>

<p><code>Getopt.getopt</code> will parse it according to the rule you give in argument.</p>

<p><code>""ho:v""</code> here describes the short arguments : <code>-ONELETTER</code>. The <code>:</code> means that <code>-o</code> accepts one argument.</p>

<p>Finally <code>[""help"", ""output=""]</code> describes long arguments ( <code>--MORETHANONELETTER</code> ).
The <code>=</code> after output once again means that output accepts one arguments.</p>

<p>The result is a list of couple (option,argument)</p>

<p>If an option doesn't accept any argument (like <code>--help</code> here) the <code>arg</code> part is an empty string.
You then usually want to loop on this list and test the option name as in the example.</p>

<p>I hope this helped you.</p>
"
304679,"<p>Quite simply, the solution is that f does not need to be a member of the class. I am assuming that your thought-process has gone through a Javaish language filter causing the mental block. It goes a little something like this:</p>

<pre><code>def f(n):
    return '&lt;' + str(num) + '&gt;'

class C(object):

    v = f(9)
    w = f(42)
</code></pre>

<p>Then when you want to use f again, just use it</p>

<pre><code>&gt;&gt;&gt; f(4)
'&lt;4&gt;'
</code></pre>

<p>I think the moral of the tale is ""In Python, you don't <em>have</em> to force everything into a class"". </p>
"
329904,"<p>Are you asking about this?</p>

<pre><code>[ (i,j) for i in range(1,3) for j in range(1,5) ]
</code></pre>
"
660,"<p>Second the Buildbot - Trac integration. You can find more information about the integration on the <a href=""http://buildbot.net/trac/wiki/BuildbotAndTrac"">Buildbot website</a>. At my previous job, we wrote and used the plugin they mention (tracbb).
What the plugin does is rewriting all of the Buildbot urls so you can use Buildbot from within Trac. (http://example.com/tracbb).</p>

<p>The really nice thing about Buildbot is that the configuration is written in Python. You can integrate your own Python code directly to the configuration. It's also very easy to write your own BuildSteps to execute specific tasks.</p>

<p>We used BuildSteps to get the source from SVN, pull the dependencies, publish test results to WebDAV, etcetera.</p>

<p>I wrote an X10 interface so we could send signals with build results. When the build failed, we switched on a red lava lamp. When the build succeeded, a green lava lamp switched on. Good times :-)</p>"
189165,"<p>I'd start by writing a generator method:</p>

<pre><code>def grid_objects(alist, blist):
    for i in range(len(alist)):
        for j in range(len(alist[i])):
            yield(alist[i][j], blist[i][j])
</code></pre>

<p>Then whenever you need to iterate over the lists your code looks like this:</p>

<pre><code>for (a, b) in grid_objects(alist, blist):
    if a.is_whatever():
        b.do_something()
</code></pre>
"
228762,"<blockquote>
  <p>the question is how to make
  allTheLetters equal to said letters
  without something like allTheLetters =
  ""abcdefg...xyz""</p>
</blockquote>

<p>That's actually provided by the string module, it's not like you have to manually type it yourself ;)</p>

<pre><code>import string

allTheLetters = string.ascii_lowercase

def alphCount(text):
  lowerText = text.lower()
  for letter in allTheLetters:  
    print letter + "":"", lowertext.count(letter)
</code></pre>
"
982,"<p>In Python monkey patching generally works by overwriting a class or functions signature with your own. Below is an example from the <a href=""http://wiki.zope.org/zope2/MonkeyPatch"">Zope Wiki</a>:</p>

<pre><code>from SomeOtherProduct.SomeModule import SomeClass<br>def speak(self):<br>   return ""ook ook eee eee eee!""<br>SomeClass.speak = speak<br></code></pre>

<p>That code will overwrite/create a method called speak on the class. In Jeff Atwood's <a href=""http://www.codinghorror.com/blog/archives/001151.html"">recent post on monkey patching</a>. He shows an example in C# 3.0 which is the current language I use for work.</p>"
264171,"<p><strong>You can't.</strong></p>

<p>Part of the FAQ states that there is no way you can access beyond row 1000 of a query, increasing the ""OFFSET"" will just result in a shorter result set, </p>

<p>ie: OFFSET 999 --> 1 result comes back. </p>

<p>From Wikipedia: </p>

<blockquote>
  <p>App Engine limits the maximum rows
  returned from an entity get to 1000
  rows per Datastore call. Most web
  database applications use paging and
  caching, and hence do not require this
  much data at once, so this is a
  non-issue in most scenarios.[citation
  needed] If an application needs more
  than 1,000 records per operation, it
  can use its own client-side software
  or an Ajax page to perform an
  operation on an unlimited number of
  rows.</p>
</blockquote>

<p>From <a href=""http://code.google.com/appengine/docs/whatisgoogleappengine.html"" rel=""nofollow"">http://code.google.com/appengine/docs/whatisgoogleappengine.html</a></p>

<blockquote>
  <p>Another example of a service limit is
  the number of results returned by a
  query. A query can return at most
  1,000 results. Queries that would
  return more results only return the
  maximum. In this case, a request that
  performs such a query isn't likely to
  return a request before the timeout,
  but the limit is in place to conserve
  resources on the datastore.</p>
</blockquote>

<p>From <a href=""http://code.google.com/appengine/docs/datastore/gqlreference.html"" rel=""nofollow"">http://code.google.com/appengine/docs/datastore/gqlreference.html</a></p>

<blockquote>
  <p>Note: A LIMIT clause has a maximum of
  1000. If a limit larger than the maximum is specified, the maximum is
  used. This same maximum applies to the
  fetch() method of the GqlQuery class.</p>
  
  <p>Note: Like the offset parameter for
  the fetch() method, an OFFSET in a GQL
  query string does not reduce the
  number of entities fetched from the
  datastore. It only affects which
  results are returned by the fetch()
  method. A query with an offset has
  performance characteristics that
  correspond linearly with the offset
  size.</p>
</blockquote>

<p>From <a href=""http://code.google.com/appengine/docs/datastore/queryclass.html"" rel=""nofollow"">http://code.google.com/appengine/docs/datastore/queryclass.html</a></p>

<blockquote>
  <p>The limit and offset arguments control
  how many results are fetched from the
  datastore, and how many are returned
  by the fetch() method:</p>
  
  <ul>
  <li><p>The datastore fetches offset + limit results to the application. The first offset results are <strong>not</strong> skipped by the datastore itself.</p></li>
  <li><p>The fetch() method skips the first offset results, then returns the rest (limit results).</p></li>
  <li><p>The query has performance characteristics that correspond
  linearly with the offset amount plus the limit.</p></li>
  </ul>
</blockquote>

<h2>What this means is </h2>

<p>If you have a singular query, there is no way to request anything outside the range 0-1000. </p>

<p>Increasing offset will just raise the 0, so</p>

<pre><code>LIMIT 1000  OFFSET 0
</code></pre>

<p>Will return 1000 rows, </p>

<p>and </p>

<pre><code>LIMIT 1000 OFFSET 1000
</code></pre>

<p>Will return <strong>0 rows</strong>, thus, making it impossible to, with a single query syntax, fetch 2000 results either manually or using the API. </p>

<h2>The only plausible exception</h2>

<p>Is to create a numeric index on the table, ie: </p>

<pre><code> SELECT * FROM Foo  WHERE ID &gt; 0 AND ID &lt; 1000 

 SELECT * FROM Foo WHERE ID &gt;= 1000 AND ID &lt; 2000
</code></pre>

<p>If your data or query can't have this 'ID' hardcoded identifier, then you are <strong>out of luck</strong></p>
"
118175,"<p>In this example, ""Course Outline.docx"" is a Word 2007 document, which does contain the word ""Windows"", and does not contain the phrase ""random other string"".</p>

<pre><code>&gt;&gt;&gt; import zipfile
&gt;&gt;&gt; z = zipfile.ZipFile(""Course Outline.docx"")
&gt;&gt;&gt; ""Windows"" in z.read(""word/document.xml"")
True
&gt;&gt;&gt; ""random other string"" in z.read(""word/document.xml"")
False
&gt;&gt;&gt; z.close()
</code></pre>

<p>Basically, you just open the docx file (which is a zip archive) using <a href=""http://docs.python.org/lib/module-zipfile.html"">zipfile</a>, and find the content in the 'document.xml' file in the 'word' folder.  If you wanted to be more sophisticated, you could then <a href=""http://docs.python.org/lib/module-xml.etree.ElementTree.html"">parse the XML</a>, but if you're just looking for a phrase (which you know won't be a tag), then you can just look in the XML for the string.</p>
"
117824,"<p>Okay.  I found it now.  It's called <a href=""http://glyphobet.net/pottymouth/"">PottyMouth</a>.</p>
"
197499,"<p>To my knowledge, it is not possible to assign docstrings to module data members.</p>

<p><a href=""http://www.python.org/dev/peps/pep-0224/"">PEP 224</a> suggests this feature, but the PEP was rejected.</p>

<p>I suggest you document the data members of a module in the module's docstring:</p>

<pre><code># module.py:
""""""About the module.

module.data: contains the word ""spam""

""""""

data = ""spam""
</code></pre>
"
264450,"<p>Though there's no perfect solution, the following can be done:</p>

<ol>
<li>Move some critical piece of startup code into a native library.</li>
<li>Enforce the license check in the native library.</li>
</ol>

<p>If the call to the native code were to be removed, the program wouldn't start anyway. If it's not removed then the license will be enforced.</p>

<p>Though this is not a cross-platform or a pure-Python solution, it will work.</p>
"
265495,"<p>An alternative way:</p>

<pre><code>map(sum, zip(*array))
</code></pre>
"
115826,"<p>That depends on how you are running the cherrypy init.</p>

<p>If using cherrypy 3.1 syntax, that wold do it:</p>

<pre><code>cherrypy.server.socket_host = 'www.machinename.com'
cherrypy.engine.start()
cherrypy.engine.block()
</code></pre>

<p>Of course you can have something more fancy, like subclassing the server class, or using config files. Those uses are covered in <a href=""http://www.cherrypy.org/wiki/ServerAPI"">the documentation</a>.</p>

<p>But that should be enough. If not just tell us what you are doing and cherrypy version, and I will edit this answer.</p>
"
175273,"<p>The libraries at <a href=""http://openidenabled.com/"" rel=""nofollow"">OpenID Enabled</a> ship with examples that are sufficient to run a local test provider.  Look in the examples/djopenid/ directory of the python-openid source distribution.  Running that will give you an instance of <a href=""http://openidenabled.com/python-openid/trunk/examples/server/"" rel=""nofollow"">this test provider</a>.</p>
"
196580,"<p>The main difference is that nginx is built to handle large numbers of connections in a much smaller memory space.  This makes it very well suited for apps that are doing comet like connections that can have many idle open connections.  This also gives it quite a smaller memory foot print.</p>

<p>From a raw performance perspective, nginx is faster, but not so much faster that I would include that as a determining factor.</p>

<p>Apache has the advantage in the area of modules available, and the fact that it is pretty much standard.  Any web host you go with will have it installed, and most techs are going to be very familiar with it.</p>

<p>Also, if you use mod_wsgi, it is your wsgi server so you don't even need cherrypy.</p>

<p>Other than that, the best advice I can give is try setting up your app under both and do some benchmarking, since no matter what any one tells you, your mileage may vary.</p>
"
198748,"<p>If you want to store a pickled object, you'll need to use a blob, since it is binary data. However, you can, say, base64 encode the pickled object to get a string that can be stored in a text field.</p>

<p>Generally, though, doing this sort of thing is indicative of bad design, since you're storing opaque data you lose the ability to use SQL to do any useful manipulation on that data. Although without knowing what you're actually doing, I can't really make a moral call on it.</p>
"
334090,"<p>Python debuggers (as well as profilers and coverage tools) use the <code>sys.settrace</code> function (in the <code>sys</code> module) to register a callback that gets called when interesting events happen.</p>

<p>If you're using Python 2.6, you can call <code>sys.gettrace()</code> to get the current trace callback function. If it's not <code>None</code> then you can assume you should be passing debug parameters to the JVM.</p>

<p>It's not clear how you could do this pre 2.6.</p>
"
335442,"<p>While it is true that syntactically, decorators are just ""sugar"", that is not the best way to think about them.</p>

<p>Decorators allow you to weave functionality into your existing code without actually modifying it. And they allow you to do it in a way that is declarative.</p>

<p>This allows you to use decorators to do <em>aspect-oriented programming</em> (AOP). So you want to use a decorator when you have a cross-cutting concern that you want to encapsulate in one place. </p>

<p>The quintessential example would probably be logging, where you want to log the entry or exit of a function, or both. Using a decorator is equivalent to applying advice (log this!) to a joinpoint (during method entry or exit).</p>

<p>Method decoration is a concept like OOP or list comprehensions. As you point out, it is not always appropriate, and <strong>can</strong> be overused. But in the right place, it can be useful for making code more modular and decoupled.</p>
"
29575,"<p>See the <a href=""http://docs.python.org/dist/simple-example.html"" rel=""nofollow"">distutils simple example</a>. That's basically what it is like, except real install scripts usually contain a bit more information. I have not seen any that are fundamentally more complicated, though. In essence, you just give it a list of what needs to be installed. Sometimes you need to give it some mapping dicts since the source and installed trees might not be the same.</p>

<p>Here is a real-life (anonymized) example:</p>

<pre><code>#!/usr/bin/python 

from distutils.core import setup 

setup (name = 'Initech Package 3', 
          description = ""Services and libraries ABC, DEF"", 
          author = ""That Guy, Initech Ltd"", 
          author_email = ""that.guy@initech.com"", 
          version = '1.0.5', 
          package_dir = {'Package3' : 'site-packages/Package3'}, 
          packages = ['Package3', 'Package3.Queries'], 
          data_files = [ 
                       ('/etc/Package3', ['etc/Package3/ExternalResources.conf']) 
          ])
</code></pre>
"
200634,"<p>Maybe your lists are too large and do not fit in memory, and you experience <a href=""http://en.wikipedia.org/wiki/Thrash_(computer_science)"" rel=""nofollow"">thrashing</a>.
If the sources are in files, you do not need the whole list in memory all at once. Try using <em><a href=""https://docs.python.org/2/library/itertools.html#itertools.ifilter"" rel=""nofollow"">itertools</a></em>, e.g.:</p>

<pre><code>from itertools import ifilter

def is_important(s):
   return len(s)&gt;10

filtered_list = ifilter(is_important, open('mylist.txt'))
</code></pre>

<p>Note that <em>ifilter</em> returns an <em>iterator</em> that is fast and memory efficient.</p>

<p><a href=""http://www.dabeaz.com/generators/"" rel=""nofollow"">Generator Tricks</a> is a tutorial by David M. Beazley that teaches some interesting uses for <em>generators</em>.</p>
"
85480,"<p>Depends on what you care about. If you mean WALL TIME (as in, the time on the clock on your wall), time.clock() provides NO accuracy because it may manage CPU time. </p>
"
120265,"<p>Use an editor that allows you to insert spaces up to the tabstop when you press the TAB key, instead of inserting a \t character. And then forget about it.</p>
"
261340,"<p>To create a standard python array of arrays of arbitrary size:</p>

<pre><code>a = [[0]*cols for _ in [0]*rows]
</code></pre>

<p>It is accessed like this:</p>

<pre><code>a[0][1] = 5 # set cell at row 0, col 1 to 5
</code></pre>

<p>A small python gotcha that's worth mentioning:  It is tempting to just type</p>

<pre><code>a = [[0]*cols]*rows
</code></pre>

<p>but that'll copy the <em>same</em> column array to each row, resulting in unwanted behaviour.  Namely:</p>

<pre><code>&gt;&gt;&gt; a[0][0] = 5
&gt;&gt;&gt; print a[1][0]
5
</code></pre>
"
130844,"<p>Python's mmap module will allow you to insert into a file. The following sample shows how it can be done in Unix (Windows mmap may be different). Note that this does not handle all error conditions and you might corrupt or lose the original file. Also, this won't handle unicode strings.</p>

<pre><code>import os
from mmap import mmap

def insert(filename, str, pos):
    if len(str) &lt; 1:
        # nothing to insert
        return

    f = open(filename, 'r+')
    m = mmap(f.fileno(), os.path.getsize(filename))
    origSize = m.size()

    # or this could be an error
    if pos &gt; origSize:
        pos = origSize
    elif pos &lt; 0:
        pos = 0

    m.resize(origSize + len(str))
    m[pos+len(str):] = m[pos:origSize]
    m[pos:pos+len(str)] = str
    m.close()
    f.close()
</code></pre>

<p>It is also possible to do this without mmap with files opened in 'r+' mode, but it is less convenient and less efficient as you'd have to read and temporarily store the contents of the file from the insertion position to EOF - which might be huge.</p>
"
159150,"<p>netifaces is a good module to use for getting the mac address (and other addresses). It's crossplatform and makes a bit more sense than using socket or uuid.</p>

<pre><code>&gt;&gt;&gt; import netifaces
&gt;&gt;&gt; netifaces.interfaces()
['lo', 'eth0', 'tun2']

&gt;&gt;&gt; netifaces.ifaddresses('eth0')[netifaces.AF_LINK]
[{'addr': '08:00:27:50:f2:51', 'broadcast': 'ff:ff:ff:ff:ff:ff'}]
</code></pre>

<hr>

<ul>
<li><p><a href=""https://pypi.python.org/pypi/netifaces"">pypi location</a></p></li>
<li><p><a href=""http://alastairs-place.net/projects/netifaces/"">Good Intro to netifaces</a></p></li>
</ul>
"
193660,"<p>Python's core types are immutable by design, as other users have pointed out:</p>

<pre><code>&gt;&gt;&gt; int.frobnicate = lambda self: whatever()
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: can't set attributes of built-in/extension type 'int'
</code></pre>

<p>You certainly <em>could</em> achieve the effect you describe by making a subclass, since user-defined types in Python are mutable by default.</p>

<pre><code>&gt;&gt;&gt; class MyInt(int):
...   def frobnicate(self):
...     print 'frobnicating %r' % self
... 
&gt;&gt;&gt; five = MyInt(5)
&gt;&gt;&gt; five.frobnicate()
frobnicating 5
&gt;&gt;&gt; five + 8
13
</code></pre>

<p>There's no need to make the <code>MyInt</code> subclass public, either; one could just as well define it inline directly in the function or method that constructs the instance.</p>

<p>There are certainly a few situations where Python programmers who are fluent in the idiom consider this sort of subclassing the right thing to do.  For instance, <code>os.stat()</code> returns a <code>tuple</code> subclass that adds named members, precisely in order to address the sort of readability concern you refer to in your example.</p>

<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; st = os.stat('.')
&gt;&gt;&gt; st
(16877, 34996226, 65024L, 69, 1000, 1000, 4096, 1223697425, 1223699268, 1223699268)
&gt;&gt;&gt; st[6]
4096
&gt;&gt;&gt; st.st_size
4096
</code></pre>

<p>That said, in the specific example you give, I don't believe that subclassing <code>float</code> in <code>item.price</code> (or elsewhere) would be very likely to be considered the Pythonic thing to do.  I <em>can</em> easily imagine somebody deciding to add a <code>price_should_equal()</code> method to <code>item</code> if that were the primary use case; if one were looking for something more general, perhaps it might make more sense to use named arguments to make the intended meaning clearer, as in</p>

<pre><code>should_equal(observed=item.price, expected=19.99)
</code></pre>

<p>or something along those lines.  It's a bit verbose, but no doubt it could be improved upon.  A possible advantage to such an approach over Ruby-style monkey-patching is that <code>should_equal()</code> could easily perform its comparison on any type, not just <code>int</code> or <code>float</code>.  But perhaps I'm getting too caught up in the details of the particular example that you happened to provide.</p>
"
273618,"<pre><code>while True:
    func()
    answer = raw_input( ""Loop again? "" )
    if answer != 'y':
        break
</code></pre>
"
251302,"<p>I think <code>reactor.callLater</code> would work better than <code>LoopingCall</code>. Something like this:</p>

<pre><code>class Protocol(DatagramProtocol):
    def __init__(self, timeout):
        self.timeout = timeout

    def datagramReceived(self, datagram):
        self.timeout.cancel()
        # ...

timeout = reactor.callLater(5, timedOut)
reactor.listenUDP(Protocol(timeout))
</code></pre>
"
67708,"<p>You can also do something like this and add the directory that the configuration file is sitting in to the Python load path, and then just do a normal import, assuming you know the name of the file in advance, in this case ""config"".</p>

<p>Messy, but it works.</p>

<pre><code>configfile = '~/config.py'

import os
import sys

sys.path.append(os.path.dirname(os.path.expanduser(configfile)))

import config
</code></pre>
"
36061,"<p>You can also pass the init parameters to the instance variables by position</p>

<pre><code># Abstract struct class       
class Struct:
    def __init__ (self, *argv, **argd):
        if len(argd):
            # Update by dictionary
            self.__dict__.update (argd)
        else:
            # Update by position
            attrs = filter (lambda x: x[0:2] != ""__"", dir(self))
            for n in range(len(argv)):
                setattr(self, attrs[n], argv[n])

# Specific class
class Point3dStruct (Struct):
    x = 0
    y = 0
    z = 0

pt1 = Point3dStruct()
pt1.x = 10

print pt1.x
print ""-""*10

pt2 = Point3dStruct(5, 6)

print pt2.x, pt2.y
print ""-""*10

pt3 = Point3dStruct (x=1, y=2, z=3)
print pt3.x, pt3.y, pt3.z
print ""-""*10
</code></pre>
"
68911,"<p>OK, this code worked</p>

<pre><code>s = socket.socket()
s.connect((ip,port))
s.send(""my request\r"")
print s.recv(256)
s.close()
</code></pre>

<p>It was quite difficult to work that out from the Python socket module documentation. So I'll accept The.Anti.9's answer.</p>
"
195647,"<p>Pop() for the last element ought to be O(1) since you only need to return the element referred to by the last element in the array and update the index of the last element.  I would expect pop(N) to be O(N) and require on average N/2 operations since you would need to move any elements beyond the Nth one, one position up in the array of pointers.</p>
"
70798,"<p>The open source Python package,<a href=""http://www.scipy.org/"">SciPy</a>, has quite a large set of optimization routines including some for multivariable problems with constraints (which is what fmincon does I believe).  Once you have SciPy installed type the following at the Python command prompt</p>

<p>help(scipy.optimize)</p>

<p>The resulting document is extensive and includes the following which I believe might be of use to you.</p>

<pre><code>   Constrained Optimizers (multivariate)

   fmin_l_bfgs_b -- Zhu, Byrd, and Nocedal's L-BFGS-B constrained optimizer
                      (if you use this please quote their papers -- see help)

   fmin_tnc      -- Truncated Newton Code originally written by Stephen Nash and
                      adapted to C by Jean-Sebastien Roy.

   fmin_cobyla   -- Constrained Optimization BY Linear Approximation
</code></pre>
"
291759,"<p>Check out <code>os.stat()</code> for file size and <code>file.readlines([sizehint])</code>. Those two functions should be all you need for the reading part, and hopefully you know how to do the writing :)</p>
"
123526,"<p>add <code>WSGIPassAuthorization On</code>:</p>

<pre><code>&lt;VirtualHost *&gt;
    &lt;Location /&gt;
        AuthType Digest
        AuthName ""global""
        AuthDigestDomain /
        AuthUserFile /root/apache_users
        &lt;Limit GET&gt;
            Require valid-user
        &lt;/Limit&gt;
    &lt;/Location&gt;
    WSGIPassAuthorization On
    WSGIScriptAlias / /some/script.wsgi
    WSGIDaemonProcess mywsgi user=someuser group=somegroup processes=2 threads=25
    WSGIProcessGroup mywsgi
    ServerName some.example.org
&lt;/VirtualHost&gt;
</code></pre>

<p>Then just read <code>environ['REMOTE_USER']</code>:</p>

<pre><code>def application(environ, start_response):
    start_response('200 OK', [
        ('Content-Type', 'text/plain'),
    ])
    return ['Hello %s' % environ['REMOTE_USER']]
</code></pre>

<p>More information at <a href=""http://code.google.com/p/modwsgi/wiki/ConfigurationGuidelines#User_Authentication"">mod_wsgi documentation</a>.</p>
"
255336,"<p>For completeness, one other way is to clear the softspace value after performing the write.</p>

<pre><code>import sys
print ""hello"",
sys.stdout.softspace=0
print ""world"",
print ""!""
</code></pre>

<p>prints <code>helloworld !</code></p>

<p>Using stdout.write() is probably more convenient for most cases though.</p>
"
302205,"<p>@S.Lott, thank you. Your suggestion worked for me, with some modification. Here's how I did it.</p>

<pre><code>data = urllib.urlencode(params)
url = host+page
request = urllib2.Request(url, data, headers)
response = urllib2.urlopen(request)

cookies = CookieJar()
cookies.extract_cookies(response,request)

cookie_handler= urllib2.HTTPCookieProcessor( cookies )
redirect_handler= HTTPRedirectHandler()
opener = urllib2.build_opener(redirect_handler,cookie_handler)

response = opener.open(request)
</code></pre>
"
34782,"<p>The standard implementation of Python (generally known as CPython as it is written in C) uses OS threads, but since there is the <a href=""http://en.wikipedia.org/wiki/Global_Interpreter_Lock"" rel=""nofollow"">Global Interpreter Lock</a>, only one thread at a time is allowed to run Python code.  But within those limitations, the threading libraries are robust and widely used.</p>

<p>If you want to be able to use multiple CPU cores, there are a few options.  One is to use multiple python interpreters concurrently, as mentioned by others.  Another option is to use a different implementation of Python that does not use a GIL.  The two main options are <a href=""http://en.wikipedia.org/wiki/Jython"" rel=""nofollow"">Jython</a> and <a href=""http://en.wikipedia.org/wiki/IronPython"" rel=""nofollow"">IronPython</a>.</p>

<p>Jython is written in Java, and is now fairly mature, though some incompatibilities remain.  For example, the web framework <a href=""http://zyasoft.com/pythoneering/2008/01/django-on-jython-minding-gap.html"" rel=""nofollow"">Django does not run perfectly yet</a>, but is getting closer all the time.  Jython is <a href=""http://mail.python.org/pipermail/python-list/2001-December/116555.html"" rel=""nofollow"">great for thread safety</a>, comes out <a href=""http://blogs.warwick.ac.uk/dwatkins/entry/benchmarking_parallel_python_1_2/"" rel=""nofollow"">better in benchmarks</a> and has a <a href=""http://cgwalters.livejournal.com/17956.html"" rel=""nofollow"">cheeky message for those wanting the GIL</a>.</p>

<p>IronPython uses the .NET framework and is written in C#.  Compatibility is reaching the stage where <a href=""http://www.infoq.com/news/2008/03/django-and-ironpython"" rel=""nofollow"">Django can run on IronPython</a> (at least as a demo) and there are <a href=""http://www.voidspace.org.uk/ironpython/threading.shtml"" rel=""nofollow"">guides to using threads in IronPython</a>.</p>
"
164870,"<p>Actually, the way that you are advocating accessing the key for a ReferenceProperty might well not exist in the future.  Attributes that begin with '_' in python are generally accepted to be ""protected"" in that things that are closely bound and intimate with its implementation can use them, but things that are updated with the implementation must change when it changes.</p>

<p>However, there is a way through the public interface that you can access the key for your reference-property so that it will be safe in the future.  I'll revise the above example:</p>

<pre><code>class Comment(db.Model):
    series = db.ReferenceProperty(reference_class=Series);

    def series_id(self):
        return Comment.series.get_value_for_datastore(self)
</code></pre>

<p>When you access properties via the class it is associated, you get the property object itself, which has a public method that can get the underlying values.</p>
"
20065,"<p>Use <code>optparse</code> which comes with the standard library. For example:</p>

<pre><code>#!/usr/bin/env python
import optparse

def main():
  p = optparse.OptionParser()
  p.add_option('--person', '-p', default=""world"")
  options, arguments = p.parse_args()
  print 'Hello %s' % options.person

if __name__ == '__main__':
  main()
</code></pre>

<p>Source: <a href=""http://www.ibm.com/developerworks/aix/library/au-pythocli/"" rel=""nofollow"">Using Python to create UNIX command line tools</a></p>

<p>However as of Python 2.7 optparse is deprecated, see: <a href=""http://stackoverflow.com/q/3217673/55075"">Why use argparse rather than optparse?</a></p>
"
19715,"<p>I recently introduced Python to my company, which does consulting work for the Post Office.  I did this by waiting until there was a project for which I would be the only programmer, then getting permission to do this new project in Python.  I then did another small project in Python with similarly impressive results.  In addition, I used Python for all of my small throwaway assignments (""can you parse the stats in these files into a CSV file organized by date and site?"", etc) and had a quick turnaround time on all of them.</p>

<p>I also evangelized Python a bit; I went out of my way to NOT be obnoxious about it, but I'd occasionally describe why I liked it so much, talked about the personal projects I use it for in my free time and why it's awesome for me, etc.</p>

<p>Eventually we started another project and I convinced everyone to use Python for it.  I took care to point everyone to a lot of documentation, including the specific webpages relating to what they were working on, and every time they had a question, I'd explain how to do things properly by explaining the Pythonic approach to things, etc.</p>

<p>This has worked really well.  However, this might be somewhat different than what you're describing.  In my case I started with moderately small projects and Python is only being used for new projects.  Also, none of my co-workers were really Perl or PHP gurus; they all knew those languages and had been using them for awhile, but it didn't take much effort for them to become more productive in Python than they'd been before.</p>

<p>So if you're talking about new projects with people who currently use PHP but aren't super-experts and don't love that language, then I think switching to Python is a no-brainer.  However, if you're talking about working with a large existing PHP code base with a lot of very experienced PHP programmers who are happy with their current setup, then switching languages is probably not a good idea.  You're probably somewhere in between, so you'll have to weigh the tradeoffs; hopefully my answer will help you do that.</p>
"
122064,"<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; print random.sample(xrange(100), 5)
[61, 54, 91, 72, 85]
</code></pre>

<p>This should yield 5 unique values in the range <code>0 â 99</code>. The <code>xrange</code> object generates values as requested so no memory is used for values that aren't sampled.</p>
"
73098,"<pre><code>import operator
a_list_of_dicts.sort(key=operator.itemgetter('name'))
</code></pre>

<p>'key' is used to sort by an arbitrary value and 'itemgetter' sets that value to each item's 'name' attribute.</p>
"
75507,"<p>The inspect module has exactly what you want:</p>

<pre><code>inspect.isroutine( obj )
</code></pre>

<p>FYI, the code is:</p>

<pre><code>def isroutine(object):
    """"""Return true if the object is any kind of function or method.""""""
    return (isbuiltin(object)
            or isfunction(object)
            or ismethod(object)
            or ismethoddescriptor(object))
</code></pre>
"
38762,"<p>davidg recommends using dicts.  I'd go one step further and use sets:</p>

<pre><code>months = set('January', 'February', ..., 'December')
</code></pre>

<p>Now you can test whether a value matches one of the values in the set like this:</p>

<pre><code>if m in months:
</code></pre>

<p>like dF, though, I usually just use string constants in place of enums.</p>
"
177470,"<p>And as of today there's another pure Python package reading DICOM files available: <a href=""https://github.com/darcymason/pydicom"" rel=""nofollow"">pydicom</a></p>
"
273688,"<p>The price of insisting on near-absolute backwards compatibility is just too high.  Spend two minutes programming in C++ if you want to see why.</p>
"
248066,"<p>This was trivial.</p>

<p>Each module has a <code>__file__</code> variable that shows its relative path from where you are right now.</p>

<p>Therefore, getting a directory for the module to notify it is simple as:</p>

<pre><code>os.path.dirname(__file__)
</code></pre>
"
109118,"<p>You normally can't get instance attributes given just a class, at least not without instantiating the class. You can get instance attributes given an instance, though, or class attributes given a class. See the 'inspect' module. You can't get a list of instance attributes because instances really can have anything as attribute, and -- as in your example -- the normal way to create them is to just assign to them in the __init__ method.</p>

<p>An exception is if your class uses slots, which is a fixed list of attributes that the class allows instances to have. Slots are explained in <a href=""http://www.python.org/2.2.3/descrintro.html"">http://www.python.org/2.2.3/descrintro.html</a>, but there are various pitfalls with slots; they affect memory layout, so multiple inheritance may be problematic, and inheritance in general has to take slots into account, too.</p>
"
40173,"<ul>
<li><p>locals() - No. </p></li>
<li><p>globals() - Yes.</p></li>
</ul>

<p><code>window</code> is a reference to the global scope, like <code>globals()</code> in python.</p>

<pre><code>globals()[""foo""]
</code></pre>

<p>is the same as:</p>

<pre><code>window[""foo""]
</code></pre>
"
133017,"<p>== determines if the values are equivalent, while ""is"" determines if they are the exact same object. </p>
"
41707,"<p>I'd say that a dictionary is definitely the best way to do it.  It's easily extensible, allows you to give each value a sensible name, and Python has a lot of built-in language features for using and manipulating dictionaries.  If you need to add more fields later, all you need to change is the code that converts the tuple to a dictionary and the code that actually makes use of the new values.</p>

<p>For example:</p>

<pre><code>job={}
job['jobid'], job['label'], job['username']=&lt;querycode&gt;
</code></pre>
"
109147,"<p>Take a close look at <a href=""http://www.csounds.com/"">cSounds</a>.  There are Python bindings allow you to do pretty flexible digital synthesis.  There are some pretty complete packages available, too.  </p>

<p>See <a href=""http://www.csounds.com/node/188"">http://www.csounds.com/node/188</a> for a package.</p>

<p>See <a href=""http://www.csounds.com/journal/issue6/pythonOpcodes.html"">http://www.csounds.com/journal/issue6/pythonOpcodes.html</a> for information on Python scripting within cSounds.</p>
"
327048,"<ul>
<li>first rule of optimization: <em>don't do it</em></li>
<li>second rule: <em>don't do it</em>, yet</li>
</ul>

<p>Here's some timings (Python 2.5.2, Windows):</p>

<pre><code>$ python -mtimeit -s""from math import sqrt; x = 123"" ""x**.5""
1000000 loops, best of 3: 0.445 usec per loop

$ python -mtimeit -s""from math import sqrt; x = 123"" ""sqrt(x)""
1000000 loops, best of 3: 0.574 usec per loop

$ python -mtimeit -s""import math; x = 123"" ""math.sqrt(x)""
1000000 loops, best of 3: 0.727 usec per loop
</code></pre>

<p>This test shows that <code>x**.5</code> is slightly faster than <code>sqrt(x)</code>.</p>

<p>For the Python 3.0 the result is the opposite:</p>

<pre><code>$ \Python30\python -mtimeit -s""from math import sqrt; x = 123"" ""x**.5""
1000000 loops, best of 3: 0.803 usec per loop

$ \Python30\python -mtimeit -s""from math import sqrt; x = 123"" ""sqrt(x)""
1000000 loops, best of 3: 0.695 usec per loop

$ \Python30\python -mtimeit -s""import math; x = 123"" ""math.sqrt(x)""
1000000 loops, best of 3: 0.761 usec per loop
</code></pre>

<p><code>math.sqrt(x)</code> is always faster than <code>x**.5</code> on another machine (Ubuntu, Python 2.6 and 3.1):</p>

<pre><code>$ python -mtimeit -s""from math import sqrt; x = 123"" ""x**.5""
10000000 loops, best of 3: 0.173 usec per loop
$ python -mtimeit -s""from math import sqrt; x = 123"" ""sqrt(x)""
10000000 loops, best of 3: 0.115 usec per loop
$ python -mtimeit -s""import math; x = 123"" ""math.sqrt(x)""
10000000 loops, best of 3: 0.158 usec per loop
$ python3.1 -mtimeit -s""from math import sqrt; x = 123"" ""x**.5""
10000000 loops, best of 3: 0.194 usec per loop
$ python3.1 -mtimeit -s""from math import sqrt; x = 123"" ""sqrt(x)""
10000000 loops, best of 3: 0.123 usec per loop
$ python3.1 -mtimeit -s""import math; x = 123"" ""math.sqrt(x)""
10000000 loops, best of 3: 0.157 usec per loop
</code></pre>
"
134709,"<p><a href=""http://www.amk.ca/python/writing/gvr-interview"">In this interview, </a> Guido van Rossum says he wishes he hadn't let 'lambda' into Python:</p>

<blockquote>
  <p>""<strong>Q. What feature of Python are you least pleased with?</strong><br /><br />
  Sometimes I've been too quick in accepting contributions, and later realized that it was a mistake. One example would be some of the functional programming features, such as lambda functions. lambda is a keyword that lets you create a small anonymous function; built-in functions such as map, filter, and reduce run a function over a sequence type, such as a list.<br /><br />
  In practice, it didn't turn out that well. Python only has two scopes: local and global. This makes writing lambda functions painful, because you often want to access variables in the scope where the lambda was defined, but you can't because of the two scopes. There's a way around this, but it's something of a kludge. Often it seems much easier in Python to just use a for loop instead of messing around with lambda functions. map and friends work well only when there's already a built-in function that does what you want.</p>
</blockquote>

<p>IMHO, Iambdas can be convenient sometimes, but usually are convenient at the expense of readibility. Can you tell me what this does:</p>

<pre><code>str(reduce(lambda x,y:x+y,map(lambda x:x**x,range(1,1001))))[-10:]
</code></pre>

<p>I wrote it, and it took me a minute to figure it out. This is from Project Euler - i won't say which problem because i hate spoilers, but it runs in 0.124 seconds :)</p>
"
61531,"<p>I use a <code>tests/</code> directory, and then import the main application modules using relative imports. So in MyApp/tests/foo.py, there might be:</p>

<pre><code>from .. import foo
</code></pre>

<p>to import the <code>MyApp.foo</code> module.</p>
"
136188,"<p>The command-line Python, IMO, definitely comes first.  Get that to work, since that's the core of what you're doing.</p>

<p>The issue is that using a web framework's ORM from a command line application isn't obvious.  Django provides specific instructions for using their ORM from a command-line app.  Those are annoying at first, but I think they're a life-saver in the long run.  I use it heavily for giant uploads of customer-supplied files.</p>

<p>Don't use bare CGI.  It's not impossible, but too many things can go wrong, and they've all been solved by the frameworks.  Why reinvent something?  Just use someone else's code.</p>

<p>Frameworks involve learning, but no real ""overhead"".  They're not slow.  They're code you don't have to write or debug.</p>

<ol>
<li><p>Learn some Python.</p></li>
<li><p>Do the <a href=""http://docs.djangoproject.com/en/dev/"">Django</a> tutorial.</p></li>
<li><p>Start to build a web app.</p>

<p>a.  Start a Django project.  Build a small application in that project.</p>

<p>b.  Build your new model using the Django ORM.  Create a Django unit test for the model.  Be sure that it works.  You'll be able to use the default admin pages and do a lot of playing around.  Just don't build the <em>entire</em> web site yet.</p></li>
<li><p>Get your command-line app to work using Django ORM.  Essentially, you have to finesse the settings file for this app to work nicely.  See the <a href=""http://docs.djangoproject.com/en/dev/topics/settings/#topics-settings"">settings/configuration</a> section.  </p></li>
<li><p>Once you've got your command line and the default admin running, you can finish
the web app.</p></li>
</ol>

<p>Here's the golden rule of frameworks:  <strong>It's code you don't have to write, debug or maintain.</strong>  Use them.</p>
"
60660,"<p>For C++, check out <a href=""http://www.boost.org/doc/libs/1_36_0/doc/html/interprocess.html"">Boost IPC</a>.<br />
You can probably create or find some bindings for the scripting languages as well.  </p>

<p>Otherwise if it's really important to be able to interface with scripting languages your best bet is simply to use files, pipes or sockets or even a higher level abstraction like HTTP. </p>
"
106756,"<p>I use <a href=""http://pyinstaller.python-hosting.com/"">PyInstaller</a> (the svn version) to create a stand-alone  version of my program that includes Python and all the dependencies. It takes a little fiddling to get it to work right and include everything (as does py2exe and other similar programs, see <a href=""http://stackoverflow.com/questions/2933/an-executable-python-app"">this question</a>), but then it works very well.</p>

<p>You then need to create an installer. <a href=""http://nsis.sourceforge.net/Main_Page"">NSIS</a> Works great for that and is free, but it creates .exe files not .msi. If .msi is not necessary, I highly recommend it. Otherwise check out the answers to <a href=""http://stackoverflow.com/questions/3767/what-is-the-best-choice-for-building-windows-installers"">this</a> question for other options.</p>
"
106560,"<p>You can create thread local storage using <code>threading.local()</code>.</p>

<pre><code>&gt;&gt;&gt; tls = threading.local()
&gt;&gt;&gt; tls.x = 4 
&gt;&gt;&gt; tls.x
4
</code></pre>

<p>Data stored to the tls will be unique to each thread which will help ensure that unintentional sharing does not occur.</p>
"
277531,"<p>One project I'm aware of that provides similar features (inline plotting, customisable rendering) is <a href=""http://fishsoup.net/software/reinteract/"">Reinteract</a>.  Another (though possibly a bit heavyweight for general usage) is <a href=""http://www.sagemath.org/"">SAGE</a> which provides functionality for web-based <a href=""http://www.sagenb.org"">notebooks</a>.</p>

<p>These aren't quite shells - they're designed more as a mathematical notebook (so for instance, you can modify an earlier result and have the change propogate to later calculations), but they're close to what you're looking for, and could probably be modified to be used as such.</p>
"
244049,"<p>You can do something that is almost exaclty what @Pramod first suggested.</p>

<pre><code>def izipmerge(a, b):
  for i, j in itertools.izip(a,b):
    yield i
    yield j
</code></pre>

<p>The advantage of this approach is that you won't run out of memory if both a and b are infinite.</p>
"
41846,"<p>@Staale</p>

<p>There is a better way:</p>

<pre><code>job = dict(zip(keys, values))
</code></pre>
"
192792,"<p>The web services are not documented by Microsoft as it is not an officially supported route to talk to TFS.  The officially supported route is to use their <a href=""http://msdn.microsoft.com/en-us/library/bb130146(VS.80).aspx"">.NET API</a>.  </p>

<p>In the case of your sort of application, the course of action I usually recommend is to create your own web service shim that lives on the TFS server (or another server) and uses their API to talk to the server but allows you to present the data in a nice way to your application.  </p>

<p>Their object model simplifies the interactions a great deal (depending on what you want to do) and so it actually means less code over-all - but better tested and testable code and also you can work around things such as the NTLM auth used by the TFS web services.</p>

<p>Hope that helps,</p>

<p>Martin.</p>
"
13906,"<p>I like <a href=""http://effbot.org/zone/closure.htm"">this rough, succinct definition</a>:</p>

<blockquote>
  <p>A function that can refer to environments that are no longer active.</p>
</blockquote>

<p>I'd add</p>

<blockquote>
  <p>A closure allows you to bind variables into a function <em>without passing them as parameters</em>.</p>
</blockquote>

<p>Decorators which accept parameters are a common use for closures.  Closures are a common implementation mechanism for that sort of ""function factory"".  I frequently choose to use closures in the <a href=""http://c2.com/cgi/wiki?StrategyPattern"">Strategy Pattern</a> when the strategy is modified by data at run-time.</p>

<p>In a language that allows anonymous block definition -- e.g., Ruby, C# -- closures can be used to implement (what amount to) novel new control structures.  The lack of anonymous blocks is among <a href=""http://ivan.truemesh.com/archives/000411.html"">the limitations of closures in Python</a>.</p>
"
244551,"<p>Here is the zip way</p>

<pre><code>def mapper(keys, values):
    n = len(keys)
    return [dict(zip(keys, values[i:i + n]))
            for i in range(0, len(values), n)]
</code></pre>
"
61746,"<p>We use both Buildbot and Hudson for Jython development.  Both are useful, but have different strengths and weaknesses.</p>

<p>Buildbot's configuration is pure Python and quite simple once you get the hang of it (look at the epydoc-generated API docs for the most current info).  Buildbot makes it easier to define non-testing tasksÂ and distribute the testers.  However, it really has no concept of individual tests, just textual, HTML, and summary output, so if you want to have multi-level browsable test output and so forth you'll have to build it yourself, or just use Hudson.</p>

<p>Hudson has terrific support for drilling down from overall results into test suites and individual tests; it also is great for comparing test output between builds, but the distributed (master/slave) stuff is comparatively more complicated because you need a Java environment on the slaves too; also, Hudson is less tolerant of flaky network links between the master and slaves.</p>

<p>So, to get the benefits of both tools, we run a single instance of Hudson, which catches the common test failures, then we do multi-platform regression with Buildbot.</p>

<p>Here are our instances:</p>

<ul>
<li><a href=""http://bob.underboss.org:8080/job/jython/lastBuild/testReport/"">Jython Hudson</a></li>
<li><a href=""http://www.acm.uiuc.edu/jython-buildbot/waterfall"">Jython buildbot</a></li>
</ul>
"
136083,"<p>Useful links:</p>

<p><a href=""http://bytes.com/forum/thread757255.html"">How to get memory size/usage of python object</a></p>

<p><a href=""http://mail.python.org/pipermail/python-list/2002-March/135223.html"">Memory sizes of python objects?</a></p>

<p><a href=""http://groups.google.com/group/comp.lang.python/msg/b9afcfc2e1de5b05"">if you put data into dictionary, how do we calculate the data size?</a> </p>

<p>However they don't give a definitive answer. The way to go:</p>

<ol>
<li><p>Measure memory consumed by Python interpreter with/without the list (use OS tools).</p></li>
<li><p>Use a third-party extension module which defines some sort of sizeof(PyObject).</p></li>
</ol>

<p><strong>Update</strong>:</p>

<p><a href=""http://code.activestate.com/recipes/546530/"">Recipe 546530: Size of Python objects (revised)</a></p>

<pre><code>import asizeof

N = 1000000
print asizeof.asizeof(range(N)) / N
# -&gt; 20 (python 2.5, WinXP, 32-bit Linux)
# -&gt; 33 (64-bit Linux)
</code></pre>
"
344045,"<p>wxPython is based on <a href=""http://wxwidgets.org/"">wxWidgets</a> which is a GUI-oriented toolkit. It has the advantage of using the styles and decorations provided by the system it runs on and thus it is very easy to write portable applications that integrate nicely into the look and feel of whatever you're running. You want a checkbox? Use wxCheckBox and wxPython will handle looks and interaction. </p>

<p>pyGame, on the other hand, is oriented towards game development and thus brings you closer to the hardware in ways wxPython doesn't (and doesn't need to, since it calls the OS for drawing most of its controls). pyGame has lots of game related stuff like collision detection, fine-grained control of surfaces and layers or flipping display buffers at a time of your choosing. </p>

<p>That said, graphics-wise you can probably always find a way to do what you want with both toolkits. However, when speed counts or you wish to implement graphically more taxing game ideas than Tetris, you're probably better off with pyGame. If you want to use lots of GUI elements and don't need the fancy graphics and sound functions, you're better off with wxPython.</p>

<p>Portability is not an issue. Both are available for the big three (Linux, OSX, Windows).</p>

<p>It's more a question of what kind of special capabilities you need, really.</p>
"
327009,"<p>How many square roots are you really performing?  Are you trying to write some 3D graphics engine in Python?  If not, then why go with code which is cryptic over code that is easy to read?  The time difference is would be less than anybody could notice in just about any application I could forsee.  I really don't mean to put down your question, but it seems that you're going a little too far with premature optimization.</p>
"
12166,"<p>An alternative tool to py2exe is <a href=""http://pypi.python.org/pypi/bbfreeze/"">bbfreeze</a> which generates executables for windows and linux. It's newer than py2exe and handles eggs quite well. I've found it magically works better without configuration for a wide variety of applications.</p>
"
235475,"<p>That's a very good question.</p>

<p>It turns out that the <code>os</code> module initializes <code>os.environ</code> to the value of <a href=""http://docs.python.org/library/posix.html""><code>posix</code></a><code>.environ</code>, which is set on interpreter start up. In other words, the standard library does not appear to provide access to the <a href=""http://www.opengroup.org/onlinepubs/000095399/functions/getenv.html"">getenv</a> function.</p>

<p>That is a case where it would probably be safe to use <a href=""http://docs.python.org/library/ctypes.html"">ctypes</a> on unix. Since you would be calling an ultra-standard libc function.</p>
"
233865,"<p>The error: </p>

<pre><code>ImportError: No module named _sqlite3
</code></pre>

<p>means that <a href=""http://en.wikipedia.org/wiki/SQLite"">SQLite</a> 3 does not find the associated shared library. On Mac OS X it's _sqlite3.so and it should be the same on other Unix systems. </p>

<p>To resolve the error you have to locate the _sqlite3.so library on your computer and then check your PYTHONPATH for this directory location. </p>

<p>To print the Python search path enter the following in the Python shell:</p>

<pre><code>import sys
print sys.path
</code></pre>

<p>If the directory containing your library is missing you can try adding it interactively with </p>

<pre><code>sys.path.append('/your/dir/here')
</code></pre>

<p>and try </p>

<pre><code>import sqlite3
</code></pre>

<p>again. If this works you have to add this directory permanently to your PYTHONPATH environment variable. </p>

<p>PS: If the library is missing you should (re-)install the module.</p>
"
181641,"<p>I suggest moving the <code>and</code> keyword to the second line and indenting all lines containing conditions with two spaces instead of four:</p>

<pre><code>if (cond1 == 'val1' and cond2 == 'val2'
  and cond3 == 'val3' and cond4 == 'val4'):
    do_something
</code></pre>

<p>This is exactly how I solve this problem in my code. Having a keyword as the first word in the line makes the condition a lot more readable, and reducing the number of spaces further distinguishes condition from action.</p>
"
94114,"<p>I think you'll find XMLGenerator from xml.sax.saxutils is the closest thing to what you want.</p>

<pre>
import time
from xml.sax.saxutils import XMLGenerator
from xml.sax.xmlreader import AttributesNSImpl

LOG_LEVELS = ['DEBUG', 'WARNING', 'ERROR']


class xml_logger:
    def __init__(self, output, encoding):
        """"""
        Set up a logger object, which takes SAX events and outputs
        an XML log file
        """"""
        logger = XMLGenerator(output, encoding)
        logger.startDocument()
        attrs = AttributesNSImpl({}, {})
        logger.startElementNS((None, u'log'), u'log', attrs)
        self._logger = logger
        self._output = output
        self._encoding = encoding
        return

    def write_entry(self, level, msg):
        """"""
        Write a log entry to the logger
        level - the level of the entry
        msg   - the text of the entry.  Must be a Unicode object
        """"""
        #Note: in a real application, I would use ISO 8601 for the date
        #asctime used here for simplicity
        now = time.asctime(time.localtime())
        attr_vals = {
            (None, u'date'): now,
            (None, u'level'): LOG_LEVELS[level],
            }
        attr_qnames = {
            (None, u'date'): u'date',
            (None, u'level'): u'level',
            }
        attrs = AttributesNSImpl(attr_vals, attr_qnames)
        self._logger.startElementNS((None, u'entry'), u'entry', attrs)
        self._logger.characters(msg)
        self._logger.endElementNS((None, u'entry'), u'entry')
        return

    def close(self):
        """"""
        Clean up the logger object
        """"""
        self._logger.endElementNS((None, u'log'), u'log')
        self._logger.endDocument()
        return

if __name__ == ""__main__"":
    #Test it out
    import sys
    xl = xml_logger(sys.stdout, 'utf-8')
    xl.write_entry(2, u""Vanilla log entry"")
    xl.close()   

</pre>

<p>You'll probably want to look at the rest of the article I got that from at <a href=""http://www.xml.com/pub/a/2003/03/12/py-xml.html"">http://www.xml.com/pub/a/2003/03/12/py-xml.html</a>.</p>
"
58417,"<p>Better still, install the <a href=""http://pypi.python.org/pypi/path.py/2.2""><code>path.py</code></a> module, it wraps all the <code>os.path</code> functions and other related functions into methods on an object that can be used wherever strings are used:</p>

<pre><code>&gt;&gt;&gt; from path import path
&gt;&gt;&gt; path('mydir/myfile.txt').abspath()
'C:\\example\\cwd\\mydir\\myfile.txt'
&gt;&gt;&gt;
</code></pre>
"
343575,"<p>Difficult to comment on your specific case. If settings.py is executed twice, then it's normal that you get two lines for every log sent.</p>

<p>The way we set it up in our projects is to have one module dedicated to logging. That modules has a ""module singleton"" pattern, so that we only execute the interesting code once.</p>

<p>It looks like this:</p>

<pre><code>def init_logging():
    stdoutHandler = logging.StreamHandler( sys.stdout )
    stdoutHandler.setLevel( DEBUG )
    stdoutHandler.setFormatter( logging.Formatter( LOG_FORMAT_WITH_TIME ) )
    logging.getLogger( LOG_AREA1 ).addHandler( stdoutHandler )

logInitDone=False
if not logInitDone:
    logInitDone = True
   init_logging()
</code></pre>

<p>Importing the log.py the first time will configure the logging correctly.</p>
"
320290,"<p>The <code>subprocess.Popen.wait()</code> is the only way to assure that they're dead.  Indeed, POSIX OS's require that you wait on your children.  Many *nix's will create a ""zombie"" process:  a dead child for which the parent didn't wait.</p>

<p>If the child is reasonably well-written, it terminates.   Often, children read from PIPE's.  Closing the input is a big hint to the child that it should close up shop and exit.</p>

<p>If the child has bugs and doesn't terminate, you may have to kill it.  You should fix this bug.  </p>

<p>If the child is a ""serve-forever"" loop, and is not designed to terminate, you should either kill it or provide some input or message which will force it to terminate.  </p>

<p><hr /></p>

<p>Edit.</p>

<p>In standard OS's, you have <code>os.kill( PID, 9 )</code>.  Kill -9 is harsh, BTW.  If you can kill them with SIGABRT (6?) or SIGTERM (15) that's more polite.</p>

<p>In Windows OS, you don't have an <code>os.kill</code> that works.  Look at this <a href=""http://code.activestate.com/recipes/347462/"">ActiveState Recipe</a> for terminating a process in Windows.</p>

<p>We have child processes that are WSGI servers.  To terminate them we do a GET on a special URL; this causes the child to clean up and exit.</p>
"
324483,"<p>Have you tried The cElementTree Module?</p>

<p>cElementTree is included with Python 2.5 and later, as xml.etree.cElementTree. Refer the <a href=""http://effbot.org/zone/celementtree.htm"" rel=""nofollow"">benchmarks</a>.</p>

<p><em>removed dead ImageShack link</em></p>
"
321893,"<p>First normalize 2 XML, then you can compare them.  I've used the following using lxml</p>

<pre><code>    obj1 = objectify.fromstring(expect)
    expect = etree.tostring(obj1)        
    obj2 = objectify.fromstring(xml)
    result = etree.tostring(obj2)        
    self.assertEquals(expect, result)
</code></pre>
"
51745,"<p>I would say your test scheme is not really useful. To fulfill the db query, the db server goes through several steps:</p>

<ol>
<li>parse the SQL</li>
<li>work up a query plan, i. e. decide on which indices to use (if any), optimize etc.</li>
<li>if an index is used, search it for the pointers to the actual data, then go to the appropriate location in the data or</li>
<li>if no index is used, scan <i>the whole table</i> to determine which rows are needed</li>
<li>load the data from disk into a temporary location (hopefully, but not necessarily, memory)</li>
<li>perform the count() and avg() calculations</li>
</ol>

<p>So, creating an array in Python and getting the average basically skips all these steps save the last one. As disk I/O is among the most expensive operations a program has to perform, this is a major flaw in the test (see also the answers to <a href=""http://stackoverflow.com/questions/26021/how-is-data-compression-more-effective-than-indexing-for-search-performance"">this question</a> I asked here before). Even if you read the data from disk in your other test, the process is completely different and it's hard to tell how relevant the results are.</p>

<p>To obtain more information about where Postgres spends its time, I would suggest the following tests:</p>

<ul>
<li>Compare the execution time of your query to a SELECT without the aggregating functions (i. e. cut step 5)</li>
<li>If you find that the aggregation leads to a significant slowdown, try if Python does it faster, obtaining the raw data through the plain SELECT from the comparison.</li>
</ul>

<p>To speed up your query, reduce disk access first. I doubt very much that it's the aggregation that takes the time.</p>

<p>There's several ways to do that:</p>

<ul>
<li>Cache data (in memory!) for subsequent access, either via the db engine's own capabilities or with tools like memcached</li>
<li>Reduce the size of your stored data</li>
<li>Optimize the use of indices. Sometimes this can mean to skip index use altogether (after all, it's disk access, too). For MySQL, I seem to remember that it's recommended to skip indices if you assume that the query fetches more than 10% of all the data in the table.</li>
<li>If your query makes good use of indices, I know that for MySQL databases it helps to put indices and data on separate physical disks. However, I don't know whether that's applicable for Postgres.</li>
<li>There also might be more sophisticated problems such as swapping rows to disk if for some reason the result set can't be completely processed in memory. But I would leave that kind of research until I run into serious performance problems that I can't find another way to fix, as it requires knowledge about a lot of little under-the-hood details in your process.</li>
</ul>

<p><b>Update:</b></p>

<p><i>I just realized that you seem to have no use for indices for the above query and most likely aren't using any, too, so my advice on indices probably wasn't helpful. Sorry. Still, I'd say that the aggregation is not the problem but disk access is. I'll leave the index stuff in, anyway, it might still have some use.</i></p>
"
323058,"<p>Matt has mentioned query expressions. These are available for LINQ in general, by the way - not just LINQ to Objects. (For example, the same query applied to a LINQ to SQL datacontext would execute the filter and projection on the database.)</p>

<p>The query expressions in C# 3 are simply syntactic sugar over writing normal C# code - although query expressions usually end up calling <a href=""http://msdn.microsoft.com/en-us/library/bb383977.aspx"" rel=""nofollow"">extension methods</a>. (They don't have to, and the compiler doesn't care, but they usually do.) There are various things you can do with collections which aren't available in C# query expressions, but which are supported by method calls, so it's worth being aware of both kinds of syntax. For instance, Matt's query expression of:</p>

<pre><code>List&lt;Foo&gt; fooList = new List&lt;Foo&gt;();
IEnumerable&lt;string&gt; extract = from foo in fooList where foo.Bar &gt; 10 select foo.Name.ToUpper();
</code></pre>

<p>is ""pre-processed"" into:</p>

<pre><code>List&lt;Foo&gt; fooList = new List&lt;Foo&gt;();
IEnumerable&lt;string&gt; extract = fooList.Where(foo =&gt; foo.Bar &gt; 10)
                                    .Select(foo =&gt; foo.Name.ToUpper());
</code></pre>

<p>If you want to (say) filter based on the index of the value in the original collection, you can use an <a href=""http://msdn.microsoft.com/en-us/library/bb549418.aspx"" rel=""nofollow"">appropriate overload of Where</a> which is unavailable via query expressions:</p>

<pre><code>List&lt;Foo&gt; fooList = new List&lt;Foo&gt;();
IEnumerable&lt;string&gt; extract = fooList.Where((foo, index) =&gt; foo.Bar &gt; 10 + index)
                                    .Select(foo =&gt; foo.Name.ToUpper());
</code></pre>

<p>Or you could find the length of the longest name matching the criteria:</p>

<pre><code>List&lt;Foo&gt; fooList = new List&lt;Foo&gt;();
int longestName = fooList.Where((foo, index) =&gt; foo.Bar &gt; 10 + index)
                         .Select(foo =&gt; foo.Name)
                         .Max();
</code></pre>

<p>(You don't <em>have</em> to do the projection and max in separate methods - there's a <code>Max</code> overload which takes a projection as well.)</p>

<p>My point is that using extension methods you can very easily build up sophisticated queries.</p>

<p>You mention Python generators as well - C# has this in the form of <a href=""http://stackoverflow.com/questions/317462/some-help-understanding-yield"">iterator blocks</a>. Indeed, these are incredibly useful when implementing LINQ-like operators. (Because most of LINQ to Objects is based on extension methods, you can add your own operators which look ""native"" to LINQ - although you can't change the query expression syntax yourself.)</p>
"
51218,"<p>You might also try:</p>

<pre><code>sys.stdout.write(""\r%2d%%"" % percent)
sys.stdout.flush()
</code></pre>

<p>Using a single carriage return at the beginning of your string rather than several backspaces. Your cursor will still blink, but it'll blink after the percent sign rather than under the first digit, and with one control character instead of three you may get less flicker.</p>
"
5435,"<p>You'll want the <a href=""https://docs.python.org/3.4/library/struct.html"" rel=""nofollow"">struct</a> package.</p>
"
187536,"<p>For best efficiency, you generally want to process more than a single bit at a time.
You can use a simple method to get a fixed width binary representation. eg.</p>

<pre><code>def _bin(x, width):
    return ''.join(str((x&gt;&gt;i)&amp;1) for i in xrange(width-1,-1,-1))
</code></pre>

<p>_bin(x, 8) will now give a zero padded representation of x's lower 8 bits.  This can be used to build a lookup table, allowing your converter to process 8 bits at a time (or more if you want to devote the memory to it).</p>

<pre><code>_conv_table = [_bin(x,8) for x in range(256)]
</code></pre>

<p>Then you can use this in your real function, stripping off leading zeroes when returning it.  I've also added handling for signed numbers, as without it you will get an infinite loop (Negative integers conceptually have an infinite number of set sign bits.)</p>

<pre><code>def bin(x):
    if x == 0: 
        return '0' #Special case: Don't strip leading zero if no other digits
    elif x &lt; 0:
        sign='-'
        x*=-1
    else:
        sign = ''
    l=[]
    while x:
        l.append(_conv_table[x &amp; 0xff])
        x &gt;&gt;= 8
    return sign + ''.join(reversed(l)).lstrip(""0"")
</code></pre>

<p>[Edit] Changed code to handle signed integers.<br />
[Edit2] Here are some timing figures of the various solutions.  bin is the function above, constantin_bin is from <a href=""http://stackoverflow.com/questions/187273/base-2-binary-representation-using-python#189579"">Constantin's answer</a> and num_bin is the original version.  Out of curiosity, I also tried a 16 bit lookup table variant of the above (bin16 below), and tried out Python3's builtin bin() function.  All timings were for 100000 runs using an 01010101 bit pattern.</p>

<pre><code>Num Bits:              8       16       32       64      128      256
---------------------------------------------------------------------
bin                0.544    0.586    0.744    1.942    1.854    3.357 
bin16              0.542    0.494    0.592    0.773    1.150    1.886
constantin_bin     2.238    3.803    7.794   17.869   34.636   94.799
num_bin            3.712    5.693   12.086   32.566   67.523  128.565
Python3's bin      0.079    0.045    0.062    0.069    0.212    0.201
</code></pre>

<p>As you can see, when processing long values using large chunks really pays off, but nothing beats the low-level C code of python3's builtin (which bizarrely seems consistently faster at 256 bits than 128!).  Using a 16 bit lookup table improves things, but probably isn't worth it unless you really need it, as it uses up a large chunk of memory, and can introduce a small but noticalbe startup delay to precompute the table.</p>
"
101087,"<p>You can use both MinGW and VC++ Express (free, no need to buy it).</p>

<p>See:</p>

<ol>
<li><a href=""http://eli.thegreenplace.net/2008/06/28/compiling-python-extensions-with-distutils-and-mingw/"">http://eli.thegreenplace.net/2008/06/28/compiling-python-extensions-with-distutils-and-mingw/</a></li>
<li><a href=""http://eli.thegreenplace.net/2008/06/27/creating-python-extension-modules-in-c/"">http://eli.thegreenplace.net/2008/06/27/creating-python-extension-modules-in-c/</a></li>
</ol>
"
185426,"<p>Warning:</p>

<ul>
<li>jobscry's answer (""^Run.?.py$"") is incorrect (will not match ""Run123.py"", for example).</li>
<li>orlandu63's answer (""/^Run[\w]*?.py$/"") will not match ""RunFoo.Bar.py"".</li>
</ul>

<p>(I don't have enough reputation to comment, sorry.)</p>
"
3040,"<p>Unfortunately the only API that isn't deprecated is located in the ApplicationServices framework, which doesn't have a bridge support file, and thus isn't available in the bridge. If you're wanting to use ctypes, you can use ATSFontGetFileReference after looking up the ATSFontRef.</p>

<p>Cocoa doesn't have any native support, at least as of 10.5, for getting the location of a font.</p>"
239043,"<p>In Perl, <a href=""http://search.cpan.org/perldoc?Win32::API"" rel=""nofollow"">Win32::API</a> is an easy way to some interfacing to DLLs. There is also <a href=""http://search.cpan.org/perldoc?Inline::C"" rel=""nofollow"">Inline::C</a>, if you have access to a compiler and the windows headers.</p>

<p>Perl <a href=""http://search.cpan.org/perldoc?perlxs"" rel=""nofollow"">XSUB</a>s can also create an interface between Perl and C. </p>
"
283713,"<p>The SQL you want is</p>

<pre><code>select name from studens where id in (1, 5, 8)
</code></pre>

<p>If you want to construct this from the python you could use</p>

<pre><code>l = [1, 5, 8]
sql_query = 'select name from studens where id in (' + ','.join(map(str, l)) + ')'
</code></pre>

<p>The <a href=""http://docs.python.org/library/functions.html#map"">map</a> function will transform the list into a list of strings that can be glued together by commas using the <a href=""http://docs.python.org/library/stdtypes.html#str.join"">str.join</a> method.</p>

<p>Alternatively:</p>

<pre><code>l = [1, 5, 8]
sql_query = 'select name from studens where id in (' + ','.join((str(n) for n in l)) + ')'
</code></pre>

<p>if you prefer <a href=""http://docs.python.org/glossary.html#term-generator-expression"">generator expressions</a> to the map function.</p>

<p>UPDATE: <a href=""http://stackoverflow.com/users/10661/slott"">S. Lott</a> mentions in the comments that the Python SQLite bindings don't support sequences. In that case, you might want</p>

<pre><code>select name from studens where id = 1 or id = 5 or id = 8
</code></pre>

<p>Generated by </p>

<pre><code>sql_query = 'select name from studens where ' + ' or '.join(('id = ' + str(n) for n in l))
</code></pre>
"
280226,"<p>A little recursive function would do it:</p>

<pre><code>def asum(a):
    if isinstance(a, list):
        return sum(asum(x) for x in a)
    else:
        return a

l = [[[[[39]]]], [1, 2, 3], [4, [5, 3], 1], [[[[8, 9], 10], 11], 12]]
l.sort(key=asum)
print l
</code></pre>
"
65440,"<blockquote>
  <p>Is it possible to store these regular expressions in a cache on disk in a pre-compiled manner to avoid having to execute the regex compilations on each import?</p>
</blockquote>

<p>Not easily. You'd have to write a custom serializer that hooks into the C <code>sre</code> implementation of the Python regex engine. Any performance benefits would be vastly outweighed by the time and effort required.</p>

<p>First, have you actually profiled the code? I doubt that compiling regexes is a significant part of the application's run-time. Remember that they are only compiled the first time the module is imported in the current execution -- thereafter, the module and its attributes are cached in memory.</p>

<p>If you have a program that basically spawns once, compiles a bunch of regexes, and then exits, you could try re-engineering it to perform multiple tests in one invocation. Then you could re-use the regexes, as above.</p>

<p>Finally, you could compile the regexes into C-based state machines and then link them in with an extension module. While this would likely be more difficult to maintain, it would eliminate regex compilation entirely from your application.</p>
"
77978,"<p>Nope, that is the only formula for the centroid of a collection of points.  See Wikipedia: <a href=""http://en.wikipedia.org/wiki/Centroid"">http://en.wikipedia.org/wiki/Centroid</a></p>
"
293920,"<p>In this specific context, your example doesn't make a lot of sense.</p>

<p>When a Being picks up an Item, the item retains an individual existence.  It doesn't disappear because it's been picked up.  It still exists, but it's (a) in the same location as the Being, and (b) no longer eligible to be picked up.  While it's had a state change, it still exists.</p>

<p>There is a two-way association between Being and Item.  The Being has the Item in a collection.  The Item is associated with a Being.</p>

<p>When an Item is picked up by a Being, two things have to happen.</p>

<ul>
<li><p>The Being how adds the Item in some <code>set</code> of items.  Your <code>bag</code> attribute, for example, could be such a <code>set</code>.  [A <code>list</code> is a poor choice -- does order matter in the bag?]</p></li>
<li><p>The Item's location changes from where it used to be to the Being's location.  There are probably two classes os Items - those with an independent sense of location (because they move around by themselves) and items that have to delegate location to the Being or Place where they're sitting.</p></li>
</ul>

<p>Under no circumstances does any Python object ever need to get deleted.  If an item is ""destroyed"", then it's not in a Being's bag.  It's not in a location.  </p>

<pre><code>player.bag.remove(cat)
</code></pre>

<p>Is all that's required to let the cat out of the bag.  Since the cat is not used anywhere else, it will both exist as ""used"" memory and not exist because nothing in your program can access it.   It will quietly vanish from memory when some quantum event occurs and memory references are garbage collected.</p>

<p>On the other hand,</p>

<pre><code>here.add( cat )
player.bag.remove(cat)
</code></pre>

<p>Will put the cat in the current location.  The cat continues to exist, and will not be put out with the garbage.</p>
"
129819,"<p>There is no reasonable way to make this ""class property"" system to work in Python.</p>

<p>Here is one unreasonable way to make it work. You can certainly make it more seamless with increasing amounts of metaclass magic.</p>

<pre><code>class ClassProperty(object):
    def __init__(self, getter, setter):
        self.getter = getter
        self.setter = setter
    def __get__(self, cls, owner):
        return getattr(cls, self.getter)()
    def __set__(self, cls, value):
        getattr(cls, self.setter)(value)

class MetaFoo(type):
    var = ClassProperty('getvar', 'setvar')

class Foo(object):
    __metaclass__ = MetaFoo
    _var = 5
    @classmethod
    def getvar(cls):
        print ""Getting var ="", cls._var
        return cls._var
    @classmethod
    def setvar(cls, value):
        print ""Setting var ="", value
        cls._var = value

x = Foo.var
print ""Foo.var = "", x
Foo.var = 42
x = Foo.var
print ""Foo.var = "", x
</code></pre>

<p>The knot of the issue is that properties are what Python calls ""descriptors"". There is no short and easy way to explain how this sort of metaprogramming works, so I must point you to the <a href=""http://users.rcn.com/python/download/Descriptor.htm"">descriptor howto</a>.</p>

<p>You only ever need to understand this sort of things if you are implementing a fairly advanced framework. Like a transparent object persistence or RPC system, or a kind of domain-specific language.</p>

<p>However, in a comment to a previous answer, you say that you </p>

<blockquote>
  <p>need to modify an attribute that in such a way that is seen by all instances of a class, and in the scope from which these class methods are called does not have references to all instances of the class.</p>
</blockquote>

<p>It seems to me, what you really want is an <a href=""http://en.wikipedia.org/wiki/Observer_pattern"">Observer</a> design pattern.</p>
"
211534,"<p>AFAIK an SQLITE database is just a file.
To check if the database exists, check for file existence.</p>

<p>When you open a SQLITE database it will automatically create one if the file that backs it up is not in place.</p>

<p>If you try and open a file as a sqlite3 database that is NOT a database, you will get this:</p>

<p>""sqlite3.DatabaseError: file is encrypted or is not a database""</p>

<p>so check to see if the file exists and also make sure to try and catch the exception in case the file is not a sqlite3 database</p>
"
5129,"<p>There are two main ways of running Python on Apache. The simplest would be to use CGI and write normal Python scripts while the second is using a web framework like Django or Pylons.</p>

<p>Using CGI is straightforward. Make sure your Apache config file has a cgi-bin set up. If not, follow their documentation (<a href=""http://httpd.apache.org/docs/2.0/howto/cgi.html"" rel=""nofollow"">http://httpd.apache.org/docs/2.0/howto/cgi.html</a>). At that point all you need to do is place your Python scripts in the cgi-bin directory and the standard output will become the HTTP response. Refer to Python's documentation for further info (<a href=""https://docs.python.org/library/cgi.html"" rel=""nofollow"">https://docs.python.org/library/cgi.html</a>).</p>

<p>If you want to use a web framework you'll need to setup mod_python or FastCGI. These steps are dependent on which framework you want to use. Django provides clear instructions on how to setup mod_python and Django with Apache (<a href=""http://www.djangoproject.com/documentation/modpython/"" rel=""nofollow"">http://www.djangoproject.com/documentation/modpython/</a>)</p>
"
164291,"<p>You can distribute the compiled Python bytecode (.pyc files) instead of the source. You can't prevent decompilation in Python (or any other language, really). You could use an obfuscator like <a href=""http://www.lysator.liu.se/~astrand/projects/pyobfuscate/"" rel=""nofollow"">pyobfuscate</a> to make it more annoying for competitors to decipher your decompiled source.</p>

<p>As Alex Martelli says <a href=""http://mail.python.org/pipermail/python-list/2006-April/1079623.html"" rel=""nofollow"">in this thread</a>, if you want to keep your code a secret, you shouldn't run it on other people's machines.</p>

<p>IIRC, the last time I used <a href=""http://python.net/crew/atuining/cx_Freeze/"" rel=""nofollow"">cx_Freeze</a> it created a DLL for Windows that removed the necessity for a native Python installation. This is at least worth checking out.</p>
"
168768,"<p>The most impressive new module is probably the <code>multiprocessing</code> module.  First because it lets you execute functions in new processes just as easily and with roughly the same API as you would with the <code>threading</code> module.  But more importantly because it introduces a lot of great classes for communicating between processes, such as a <code>Queue</code> class and a <code>Lock</code> class which are each used just like those objects would be in multithreaded code, as well as some other classes for sharing memory between processes.</p>

<p>You can find the documentation at <a href=""http://docs.python.org/library/multiprocessing.html"" rel=""nofollow"">http://docs.python.org/library/multiprocessing.html</a></p>
"
163870,"<p>""Apparently a cStringIO.StringIO object doesn't quack close enough to a file duck to suit subprocess.Popen""</p>

<p>:-)</p>

<p>I'm afraid not.  The pipe is a low-level OS concept, so it absolutely requires a file object that is represented by an OS-level file descriptor.  Your workaround is the right one.</p>
"
93857,"<p>The best way to prevent XSS is not to try and filter everything, but rather to simply do HTML Entity encoding.  For example, automatically turn &lt; into &amp;lt;.  This is the ideal solution assuming you don't need to accept any html input (outside of forum/comment areas where it is used as markup, it should be pretty rare to need to accept HTML); there are so many permutations via alternate encodings that anything but an ultra-restrictive whitelist (a-z,A-Z,0-9 for example) is going to let something through.</p>

<p>SQL Injection, contrary to other opinion, is still possible, if you are just building out a query string.  For example, if you are just concatenating an incoming parameter onto a query string, you will have SQL Injection.  The best way to protect against this is also not filtering, but rather to religiously use parameterized queries and NEVER concatenate user input.</p>

<p>This is not to say that filtering isn't still a best practice, but in terms of SQL Injection and XSS, you will be far more protected if you religiously use Parameterize Queries and HTML Entity Encoding.</p>
"
285677,"<p>The nearest equivalent is probably the <a href=""http://labix.org/python-dateutil"">dateutil</a> module.  Usage is:</p>

<pre><code>&gt;&gt;&gt; from dateutil.parser import parse
&gt;&gt;&gt; parse(""Wed, Nov 12"")
datetime.datetime(2008, 11, 12, 0, 0)
</code></pre>

<p>Using the fuzzy parameter should ignore extraneous text.  ie</p>

<pre><code>&gt;&gt;&gt; parse(""the date was the 1st of December 2006 2:30pm"", fuzzy=True)
datetime.datetime(2006, 12, 1, 14, 30)
</code></pre>
"
277274,"<p>You can use <a href=""http://wxpython.org/"">wxPython</a></p>

<pre><code>sound = wx.Sound('sound.wav')
sound.Play(wx.SOUND_SYNC)
</code></pre>

<p>or</p>

<pre><code>sound.Play(wx.SOUND_ASYNC)
</code></pre>

<p><a href=""http://svn.wxwidgets.org/viewvc/wx/wxPython/tags/wxPy-2.8.9.1/wxPython/demo/Sound.py?view=markup"">Here</a> is an example from the wxPython demo.</p>
"
249075,"<p>Almost no problem <strong>requires</strong> a specific programming language, that's just not how things work.</p>

<p>The easiest way to get a new language into an environment like yours is to start a new work project in your own time in the new language.  Make it do something you need doing, and write it on your own time.  Use it yourself, and other people will probably notice it.  They then say ""Can you send me that program?"" and boom, they're using your new language.</p>

<p>If you really want to something, I would probably write a site in Django, simply because its admin interface blows everyone away.</p>

<p>The main point to remember is that if you start using python, that's one more thing everyone else has to learn, and it's another bullet point that will need to be on every prospective employee's resume.  That can get expensive, and management won't like it.</p>
"
288536,"<p>Dan's idea doesn't quite work:</p>

<pre><code>#!/usr/bin/env python
class flushfile(file):
    def __init__(self, f):
        self.f = f
    def write(self, x):
        self.f.write(x)
        self.f.flush()

import sys
sys.stdout = flushfile(sys.stdout)

print ""foo""
</code></pre>

<p>The result:</p>

<pre><code>Traceback (most recent call last):
  File ""./passpersist.py"", line 12, in &lt;module&gt;
    print ""foo""
ValueError: I/O operation on closed file
</code></pre>

<p>I believe the problem is that it inherits from the file class, which actually isn't necessary. According to the docs for sys.stdout:</p>

<blockquote>
  <p>stdout and stderr neednât be built-in
  file objects: any object is acceptable
  as long as it has a write() method
  that takes a string argument.</p>
</blockquote>

<p>so changing</p>

<pre><code>class flushfile(file):
</code></pre>

<p>to</p>

<pre><code>class flushfile(object):
</code></pre>

<p>makes it work just fine.</p>
"
275894,"<p>Jason has it right. To summarize in a way that's easier to see:</p>

<ul>
<li>os.popen() -> stdout</li>
<li>os.popen2() -> (stdin, stdout)</li>
<li>os.popen3() -> (stdin, stdout, stderr)</li>
<li>os.popen4() -> (stdin, stdout_and_stderr)</li>
</ul>
"
327741,"<p>You might do something like this:</p>

<pre><code>def action1():
    pass # put a function here

def action2():
    pass # blah blah

def action3():
    pass # and so on

def no_such_action():
    pass # print a message indicating there's no such action

def main():
    actions = {""foo"": action1, ""bar"": action2, ""baz"": action3}
    while True:
        print_menu()
        selection = raw_input(""Your selection: "")
        if ""quit"" == selection:
            return
        toDo = actions.get(selection, no_such_action)
        toDo()

if __name__ == ""__main__"":
    main()
</code></pre>

<p>This puts all your possible actions' functions into a dictionary, with the key being what you will input to run the function. It then retrieves the action input action from the list, unless the input action doesn't exist, in which case it retrieves no_such_action.</p>

<p>After you have a basic understanding of how this works, if you're considering doing a Serious Business command-lineâtype application, I would look at the <a href=""http://docs.python.org/library/cmd.html""><code>cmd</code> framework</a> for command-line applications.</p>
"
295298,"<p>Keep in mind, there are actually no restrictions on filenames on Unix systems other than </p>

<ul>
<li>It may not contain \0 </li>
<li>It may not contain  /</li>
</ul>

<p>Everything else is fair game. </p>

<pre>
$ touch ""
> even multiline
> haha
> ^[[31m red ^[[0m
> evil""
$ ls -la 
-rw-r--r--       0 Nov 17 23:39 ?even multiline?haha??[31m red ?[0m?evil
$ ls -lab
-rw-r--r--       0 Nov 17 23:39 \neven\ multiline\nhaha\n\033[31m\ red\ \033[0m\nevil
$ perl -e 'for my $i ( glob(q{./*even*}) ){ print $i; } '
./
even multiline
haha
 red 
evil
</pre>

<p>Yes, i just stored ANSI Colour Codes in a file name and had them take effect. </p>

<p>For entertainment, put a BEL character in a directory name and watch the fun that ensues when you CD into it ;) </p>
"
135873,"<p>CTypes is very cool and much easier than SWIG, but it has the drawback that poorly or malevolently-written python code can actually crash the python process.  You should also consider <a href=""http://www.boost.org/doc/libs/release/libs/python/doc/"">boost</a> python.  IMHO it's actually easier than swig while giving you more control over the final python interface.  If you are using C++ anyway, you also don't add any other languages to your mix.</p>
"
85489,"<pre><code>clock() -&gt; floating point number

Return the CPU time or real time since the start of the process or since
the first call to clock().  This has as much precision as the system
records.

time() -&gt; floating point number

Return the current time in seconds since the Epoch.
Fractions of a second may be present if the system clock provides them.
</code></pre>

<p>Usually time() is more precise, because operating systems do not store the process running time with the precision they store the system time (ie, actual time)</p>
"
65903,"<p>If x and y are column vectors, you can do:</p>

<pre><code>for i=[x';y']
# do stuff with i(1) and i(2)
end
</code></pre>

<p>(with row vectors, just use <code>x</code> and <code>y</code>).</p>

<p>Here is an example run:</p>

<pre class=""lang-matlab prettyprint-override""><code>&gt;&gt; x=[1 ; 2; 3;]

x =

     1
     2
     3

&gt;&gt; y=[10 ; 20; 30;]

y =

    10
    20
    30

&gt;&gt; for i=[x';y']
disp(['size of i = ' num2str(size(i)) ', i(1) = ' num2str(i(1)) ', i(2) = ' num2str(i(2))])
end
size of i = 2  1, i(1) = 1, i(2) = 10
size of i = 2  1, i(1) = 2, i(2) = 20
size of i = 2  1, i(1) = 3, i(2) = 30
&gt;&gt; 
</code></pre>
"
168580,"<p>Here's my version:</p>

<pre><code>def getfiles(dirpath):
    a = [s for s in os.listdir(dirpath)
         if os.path.isfile(os.path.join(dirpath, s))]
    a.sort(key=lambda s: os.path.getmtime(os.path.join(dirpath, s)))
    return a
</code></pre>

<p>First, we build a list of the file names. isfile() is used to skip directories; it can be omitted if directories should be included. Then, we sort the list in-place, using the modify date as the key.</p>
"
166552,"<p>This will fetch your remote IP address</p>

<pre><code>import urllib
ip = urllib.urlopen('http://automation.whatismyip.com/n09230945.asp').read()
</code></pre>

<p>If you don't want to rely on someone else, then just upload something like this PHP script:</p>

<pre><code>&lt;?php echo $_SERVER['REMOTE_ADDR']; ?&gt;
</code></pre>

<p>and change the URL in the Python or if you prefer ASP:</p>

<pre><code>&lt;%
Dim UserIPAddress
UserIPAddress = Request.ServerVariables(""REMOTE_ADDR"")
%&gt;
</code></pre>

<p>Note: I don't know ASP, but I figured it might be useful to have here so I googled.</p>
"
182345,"<p>Import your settings module too</p>

<pre><code>import os
os.environ[""DJANGO_SETTINGS_MODULE""] = ""mysite.settings""

from mysite.polls.models import Poll, Choice
</code></pre>

<p>should do the trick.</p>
"
73044,"<pre><code>my_list = [{'name':'Homer', 'age':39}, {'name':'Bart', 'age':10}]

my_list.sort(lambda x,y : cmp(x['name'], y['name']))
</code></pre>

<p><code>my_list</code> will now be what you want.</p>

<p><strong>(3 years later) Edited to add:</strong></p>

<p>The new <code>key</code> argument is more efficient and neater.  A better answer now looks like:</p>

<pre><code>my_list = sorted(my_list, key=lambda k: k['name'])
</code></pre>

<p>...the lambda is, IMO, easier to understand than <code>operator.itemgetter</code>, but YMMV.</p>
"
68524,"<p>Though <a href=""http://stackoverflow.com/questions/68327/change-command-method-for-tkinter-button-in-python#68455"">Eli Courtwright's</a> program will work fineÂ¹, what you really seem to want though is just a way to reconfigure after instantiation any attribute which you could have set when you instantiatedÂ².  How you do so is by way of the configure() method.</p>

<pre><code>from Tkinter import Tk, Button

def goodbye_world():
    print ""Goodbye World!\nWait, I changed my mind!""
    button.configure(text = ""Hello World!"", command=hello_world)

def hello_world():
    print ""Hello World!\nWait, I changed my mind!""
    button.configure(text = ""Goodbye World!"", command=goodbye_world)

root = Tk()
button = Button(root, text=""Hello World!"", command=hello_world)
button.pack()

root.mainloop()
</code></pre>

<p>Â¹ ""fine"" if you use only the mouse; if you care about tabbing and using [Space] or [Enter] on buttons, then you will have to implement (duplicating existing code) keypress events too. Setting the <code>command</code> option through <code>.configure</code> is much easier.</p>

<p>Â² the only attribute that can't change after instantiation is <code>name</code>.</p>
"
67693,"<p>You can use the </p>

<pre><code>load_source(module_name, path_to_file) 
</code></pre>

<p>method from <a href=""https://docs.python.org/library/imp.html"">imp module</a>.</p>
"
233800,"<p>look at this:</p>

<pre><code>for f in flist:
    print f.func_closure


(&lt;cell at 0x00C980B0: int object at 0x009864B4&gt;,)
(&lt;cell at 0x00C980B0: int object at 0x009864B4&gt;,)
(&lt;cell at 0x00C980B0: int object at 0x009864B4&gt;,)
</code></pre>

<p>It means they all point to the same i variable instance, which will have a value of 2 once the loop is over.</p>

<p>A readable solution:</p>

<pre><code>for i in xrange(3):
        def ffunc(i):
            def func(x): return x * i
            return func
        flist.append(ffunc(i))
</code></pre>
"
216060,"<p>Three reasons:</p>

<ol>
<li>To increase readability. The colon helps the code flow into the following indented block.</li>
<li>To help text editors/IDEs, they can automatically indent the next line if the previous line ended with a colon.</li>
<li>To make parsing by python slightly easier.</li>
</ol>
"
43835,"<p>The simplest web program is a CGI script, which is basically just a program whose standard output is redirected to the web browser making the request.  In this approach, every page has its own executable file, which must be loaded and parsed on every request.  This makes it really simple to get something up and running, but scales badly both in terms of performance and organization.  So when I need a very dynamic page very quickly that won't grow into a larger system, I use a CGI script.</p>

<p>One step up from this is embedding your Python code in your HTML code, such as with PSP.  I don't think many people use this nowadays, since modern template systems have made this pretty obsolete.  I worked with PSP for awhile and found that it had basically the same organizational limits as CGI scripts (every page has its own file) plus some whitespace-related annoyances from trying to mix whitespace-ignorant HTML with whitespace-sensitive Python.</p>

<p>The next step up is very simple web frameworks such as web.py, which I've also used.  Like CGI scripts, it's very simple to get something up and running, and you don't need any complex configuration or automatically generated code.  Your own code will be pretty simple to understand, so you can see what's happening.  However, it's not as feature-rich as other web frameworks; last time I used it, there was no session tracking, so I had to roll my own.  It also has ""too much magic behavior"" to quote Guido (""upvars(), bah"").</p>

<p>Finally, you have feature-rich web frameworks such as Django.  These will require a bit of work to get simple Hello World programs working, but every major one has a great, well-written tutorial (especially Django) to walk you through it.  I highly recommend using one of these web frameworks for any real project because of the convenience and features and documentation, etc.</p>

<p>Ultimately you'll have to decide what you prefer.  For example, frameworks all use template languages (special code/tags) to generate HTML files.  Some of them such as Cheetah templates let you write arbitrary Python code so that you can do anything in a template.  Others such as Django templates are more restrictive and force you to separate your presentation code from your program logic.  It's all about what you personally prefer.</p>

<p>Another example is URL handling; some frameworks such as Django have you define the URLs in your application through regular expressions.  Others such as CherryPy automatically map your functions to urls by your function names.  Again, this is a personal preference.</p>

<p>I personally use a mix of web frameworks by using CherryPy for my web server stuff (form parameters, session handling, url mapping, etc) and Django for my object-relational mapping and templates.  My recommendation is to start with a high level web framework, work your way through its tutorial, then start on a small personal project.  I've done this with all of the technologies I've mentioned and it's been really beneficial.  Eventually you'll get a feel for what you prefer and become a better web programmer (and a better programmer in general) in the process.</p>
"
146833,"<p>Sounds like an <a href=""http://docs.djangoproject.com/en/dev/howto/custom-template-tags/#inclusion-tags"" rel=""nofollow"">inclusion tag</a> is what you're looking for. You could have a template and tag for each major variation and use the tag's arguments to customise the context for each template as required.</p>

<p>Basic tag definition:</p>

<pre><code>@register.inclusion_tag('person/address.html')
def display_address(address):
    return {'address': address}
</code></pre>

<p>Use in templates (assuming the templatetag module containing it has already been <code>{% load %}</code>-ed):</p>

<pre><code>{% display_address address %}
</code></pre>
"
224080,"<p>With regards to the <code>DictObj</code>, would the following work for you?  A blank class will allow you to arbitrarily add to or replace stuff in a container object.</p>

<pre><code>class Container(object):
    pass

&gt;&gt;&gt; myContainer = Container()
&gt;&gt;&gt; myContainer.spam = ""in a can""
&gt;&gt;&gt; myContainer.eggs = ""in a shell""
</code></pre>

<p>If you want to not throw an AttributeError when there is no attribute, what do you think about the following?  Personally, I'd prefer to use a dict for clarity, or to use a try/except clause.</p>

<pre><code>class QuietContainer(object):
    def __getattr__(self, attribute):
        try:
            return object.__getattr__(self,attribute)
        except AttributeError:
            return None

&gt;&gt;&gt; cont = QuietContainer()
&gt;&gt;&gt; print cont.me
None
</code></pre>

<p>Right?</p>
"
320862,"<p>A stacktrace would've helped, but presumably the error is:</p>

<pre><code>materials = 1 + (level * 1)
</code></pre>

<p>âlevelâ is a string, and you can't do arithmetic on strings. Python is a dynamically-typed language, but not a weakly-typed one.</p>

<pre><code>level= raw_input('blah')
try:
    level= int(level)
except ValueError:
    # user put something non-numeric in, tell them off
</code></pre>

<p>In other parts of the program you are using input(), which will evaluate the entered string as Python, so for â1â will give you the number 1.</p>

<p>But! This is super-dangerousâââimagine what happens if the user types âos.remove(filename)â instead of a number. Unless the user is only you and you don't care, never use input(). It will be going away in Python 3.0 (raw_input's behaviour will be renamed input).</p>
"
305395,"<p>I'm not familiar with the Python API but you can always use</p>

<pre><code>SELECT * FROM sqlite_master;
</code></pre>
"
349182,"<p><code>', '.join(args)</code> will do the trick.</p>
"
45538,"<p>Raymond D. Hettinger does <a href=""http://www.youtube.com/watch?v=hYUsssClE94"" rel=""nofollow"">an excellent talk</a> (<a href=""http://wenku.baidu.com/view/9c6fb20dcc1755270722089d.html"" rel=""nofollow"">slides</a>) about Python's built-in collections called 'Core Python Containers - Under the Hood'. The version I saw focussed mainly on <code>set</code> and <code>dict</code>, but <code>list</code> was covered too.</p>

<p>There are also some photos of the pertinent slides from EuroPython in <a href=""http://paranoid-engineering.blogspot.com/2008/07/europython-2008-day-3.html"" rel=""nofollow"">a blog</a>.</p>

<p>Here is a summary of my notes on <code>list</code>:</p>

<ul>
<li>Stores items as an array of pointers. Subscript costs O(1) time. Append costs amortized O(1) time. Insert costs O(n) time.</li>
<li>Tries to avoid <code>memcpy</code> when growing by over-allocating. Many small lists will waste a lot of space, but large lists never waste more than about 12.5% to overallocation.</li>
<li>Some operations pre-size. Examples given were <code>range(n)</code>, <code>map()</code>, <code>list()</code>, <code>[None] * n</code>, and slicing.</li>
<li>When shrinking, the array is <code>realloc</code>ed only when it is wasting 50% of space. <code>pop</code> is cheap.</li>
</ul>
"
71161,"<p>Try:</p>

<pre><code>import HTMLParser
</code></pre>

<p>In Python 3.0, the HTMLParser module has been renamed to html.parser
you can check about this <a href=""http://docs.python.org/library/htmlparser.html"">here</a></p>

<p>Python 3.0</p>

<pre><code>import html.parser
</code></pre>

<p>Python 2.2 and above</p>

<pre><code>import HTMLParser
</code></pre>
"
102667,"<p>My favorite uses are ""filter"" and ""reduce"" operations.</p>

<p>Let's say we're reading a file, and only want the lines which begin with ""##"".</p>

<pre><code>def filter2sharps( aSequence ):
    for l in aSequence:
        if l.startswith(""##""):
            yield l
</code></pre>

<p>We can then use the generator function in a proper loop</p>

<pre><code>source= file( ... )
for line in filter2sharps( source.readlines() ):
    print line
source.close()
</code></pre>

<p>The reduce example is similar.  Let's say we have a file where we need to locate blocks of <code>&lt;Location&gt;...&lt;/Location&gt;</code> lines.  [Not HTML tags, but lines that happen to look tag-like.]</p>

<pre><code>def reduceLocation( aSequence ):
    keep= False
    block= None
    for line in aSequence:
        if line.startswith(""&lt;/Location""):
            block.append( line )
            yield block
            block= None
            keep= False
        elif line.startsWith(""&lt;Location""):
            block= [ line ]
            keep= True
        elif keep:
            block.append( line )
        else:
            pass
    if block is not None:
        yield block # A partial block, icky
</code></pre>

<p>Again, we can use this generator in a proper for loop.</p>

<pre><code>source = file( ... )
for b in reduceLocation( source.readlines() ):
    print b
source.close()
</code></pre>

<p>The idea is that a generator function allows us to filter or reduce a sequence, producing a another sequence one value at a time.</p>
"
297175,"<p>You can also try the <a href=""http://www.boost.org/doc/libs/1_37_0/libs/python/doc/index.html"">Boost.Python</a> library; which has <a href=""http://www.boost.org/doc/libs/1_37_0/libs/python/doc/v2/callbacks.html"">this capability</a>. This library is mainly used to expose C++ to Python, but can be used the other way around.</p>
"
160898,"<p>First, a general definition:</p>

<blockquote>
  <p>When a program or function statement
  is executed, the current values of
  formal parameters are saved (on the
  stack) and within the scope of the
  statement, they are bound to the
  values of the actual arguments made in
  the call. When the statement is
  exited, the original values of those
  formal arguments are restored. This
  protocol is fully recursive. If within
  the body of a statement, something is
  done that causes the formal parameters
  to be bound again, to new values, the
  lambda-binding scheme guarantees that
  this will all happen in an orderly
  manner.</p>
</blockquote>

<p>Now, there is an excellent <a href=""http://markmail.org/message/fypalne4rp5curta"" rel=""nofollow"" title=""Theoretical question about Lambda"">python example in a discussion here</a>:</p>

<p>""...there is only one binding for <code>x</code>: doing <code>x = 7</code> just changes the value in the pre-existing binding. That's why</p>

<pre><code>def foo(x): 
   a = lambda: x 
   x = 7 
   b = lambda: x 
   return a,b
</code></pre>

<p>returns two functions that both return 7; if there was a new binding after the <code>x = 7</code>, the functions would return different values [assuming you don't call foo(7), of course. Also assuming nested_scopes]....""</p>
"
136246,"<p><code>@staticmethod</code> just disables the default function as method descriptor.  classmethod wraps your function in a container callable that passes a reference to the owning class as first argument:</p>

<pre><code>&gt;&gt;&gt; class C(object):
...  pass
... 
&gt;&gt;&gt; def f():
...  pass
... 
&gt;&gt;&gt; staticmethod(f).__get__(None, C)
&lt;function f at 0x5c1cf0&gt;
&gt;&gt;&gt; classmethod(f).__get__(None, C)
&lt;bound method type.f of &lt;class '__main__.C'&gt;&gt;
</code></pre>

<p>As a matter of fact, <code>classmethod</code> has a runtime overhead but makes it possible to access the owning class.  Alternatively I recommend using a metaclass and putting the class methods on that metaclass:</p>

<pre><code>&gt;&gt;&gt; class CMeta(type):
...  def foo(cls):
...   print cls
... 
&gt;&gt;&gt; class C(object):
...  __metaclass__ = CMeta
... 
&gt;&gt;&gt; C.foo()
&lt;class '__main__.C'&gt;
</code></pre>
"
98906,"<p>IMO, the ""more obvious/more idiomatic/better solution"" is to use an existing ORM rather than invent DAO-like classes.</p>

<p>It appears to me that ORM's are more popular than ""raw"" SQL connections.  Why?  Because Python <em>is</em> OO, and the mapping from SQL row to to object <em>is</em> absolutely essential. There aren't many cases where you deal with SQL rows that don't map to Python objects.</p>

<p>I think that <a href=""http://www.sqlalchemy.org/"">SQLAlchemy</a> or <a href=""http://www.sqlobject.org/"">SQLObject</a> (and the associated connection pooling) the more idiomatic Pythonic solution.</p>

<p>Pooling as a separate feature isn't very common because pure SQL (without object mapping) isn't very popular for the kind of complex, long-running processes that benefit from connection pooling.  Yes, pure SQL <em>is</em> used, but it's always used in simpler or more controlled applications where pooling isn't helpful.</p>

<p>I think you might have two alternatives:</p>

<ol>
<li>Revise your classes to use SQLAlchemy or SQLObject.  While this appears painful at first [all that work wasted], you should be able to leverage all the design and thought and it's merely an exercise in adopting a widely-used ORM and pooling solution.</li>
<li>Roll your own simple connection pool using the algorithm you outlined -- a simple Set or List of connections that you cycle through.  </li>
</ol>
"
280862,"<p>It is easy to do by hand, but you can overflow doing it that way.  You can do the exponent and factorial in a loop to avoid the overflow:</p>

<pre><code>def poisson_probability(actual, mean):
    # naive:   math.exp(-mean) * mean**actual / factorial(actual)

    # iterative, to keep the components from getting too large or small:
    p = math.exp(-mean)
    for i in xrange(actual):
        p *= mean
        p /= i+1
    return p
</code></pre>
"
100886,"<p>It might seem overkill, but, here it goes:</p>

<pre><code>import Queue, thread, subprocess

results= Queue.Queue()
def process_waiter(popen, description, que):
    try: popen.wait()
    finally: que.put( (description, popen.returncode) )
process_count= 0

proc1= subprocess.Popen( ['python', 'mytest.py'] )
thread.start_new_thread(process_waiter,
    (proc1, ""1 finished"", results))
process_count+= 1

proc2= subprocess.Popen( ['python', 'mytest.py'] )
thread.start_new_thread(process_waiter,
    (proc2, ""2 finished"", results))
process_count+= 1

# etc

while process_count &gt; 0:
    description, rc= results.get()
    print ""job"", description, ""ended with rc ="", rc
    process_count-= 1
</code></pre>
"
181057,"<p>Same basic solution as others, but I personally prefer to use map instead of the list comprehension:</p>

<pre><code>
>>> L = [104, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100]
>>> ''.join(map(chr,L))
'hello, world'
</code></pre>
"
252621,"<p>It's because you left out a <code>/</code> in <code>urls.py</code>.  Change the admin line to the following:</p>

<pre><code>(r'^admin/(.*)', admin.site.root),
</code></pre>

<p>I checked this on my server and got the same error with your line from <code>urls.py</code>.</p>
"
48136,"<p>Use GtkBuilder instead of Glade, it's integrated into Gtk itself instead of a separate library.</p>

<p>The main benefit of Glade is that it's much, much easier to create the interface. It's a bit more work to connect signal handlers, but I've never felt that matters much.</p>
"
227209,"<p>If you don't mind using regular expressions, then this function would give you much power in renaming files:</p>

<pre><code>import re, glob, os

def renamer(files, pattern, replacement):
    for pathname in glob.glob(files):
        basename= os.path.basename(pathname)
        new_filename= re.sub(pattern, replacement, basename)
        if new_filename != basename:
            os.rename(
              pathname,
              os.path.join(os.path.dirname(pathname), new_filename))
</code></pre>

<p>So in your example, you could do (assuming it's the current directory where the files are):</p>

<pre><code>renamer(""*.doc"", r""^(.*)\.doc$"", r""new(\1).doc"")
</code></pre>

<p>but you could also roll back to the initial filenames:</p>

<pre><code>renamer(""*.doc"", r""^new\((.*)\)\.doc"", r""\1.doc"")
</code></pre>

<p>and more.</p>
"
145287,"<p>Iâve never used it but Iâve heard good things about <a href=""https://docs.python.org/3.6/library/ctypes.html"">ctypes</a>. If youâre trying to use it with C++, be sure to evade name mangling via <a href=""http://stackoverflow.com/q/1041866/2157640""><code>extern ""C""</code></a>. <em>Thanks for the comment, Florian BÃ¶sch.</em></p>
"
61637,"<p>The example you give is actually a python builtin function, called <code>divmod</code>. So someone, at some point in time, thought that it was pythonic enough to include in the core functionality.</p>

<p>To me, if it makes the code cleaner, it is pythonic. Compare these two code blocks:</p>

<pre><code>seconds = 1234
minutes, seconds = divmod(seconds, 60)
hours, minutes = divmod(minutes, 60)

seconds = 1234
minutes = seconds / 60
seconds = seconds % 60
hours = minutes / 60
minutes = minutes % 60
</code></pre>
"
113011,"<p>Yes, just use Windows Python Extension, as stated <a href=""http://www.ravenbrook.com/project/p4dti/master/design/win32-eventlog/"">here</a>.</p>

<pre><code>import win32evtlogutil
win32evtlogutil.ReportEvent(ApplicationName, EventID, EventCategory,
    		    EventType, Inserts, Data, SID)
</code></pre>
"
214910,"<p>Short of changing and recompiling the source code (which <em>is</em> possible with open source), changing the base language is not really possible.</p>

<p>Even if you do recompile the source, it wouldn't be python, just your hacked-up changed version which you need to be very careful not to introduce bugs into.</p>

<p>However, I'm not sure why you'd want to.  Python's object-oriented features makes it quite simple to achieve similar results with the language as it stands.</p>
"
179005,"<p>It's a one-liner:</p>

<pre><code>tagDict = dict((t, i) for i, t in enumerate(tag))
</code></pre>
"
54008,"<p>As Google Web Toolkit is a <a href=""http://code.google.com/support/bin/answer.py?answer=54830&amp;topic=10208"" rel=""nofollow"">subset of Java</a> it works best when you Java at the backend too.  Since Google App Engine is currently <a href=""http://code.google.com/appengine/kb/general.html#language"" rel=""nofollow"">Python only</a> I think you'd have to do a lot of messing about to get your server and client to talk nicely to each other.</p>

<p>jQuery seems to be the most popular JavaScript library option in the <a href=""http://www.djangosnippets.org/tags/ajax/?page=1"" rel=""nofollow"">AJAX Tag at DjangoSnippets.com</a>.</p>

<p><strong>Edit:</strong> The above is only true of Google App Engine applications written in Python.  As Google App Engine now supports Java, GWT could now be a good choice for writing an AJAX front end.  <a href=""http://code.google.com/webtoolkit/doc/latest/tutorial/appengine.html"" rel=""nofollow"">Google even have a tutorial showing you how to do it.</a></p>
"
232644,"<p>This isn't how django works. You would only create the relation going one way.</p>

<pre><code>class Parent(models.Model):
  name = models.CharField(max_length=255)

class Child(models.Model):
  name = models.CharField(max_length=255)
  myparent = models.ForeignKey(Parent)
</code></pre>

<p>And if you were trying to access the children from the parent you would do
<code>parent_object.child_set.all()</code>. If you set a related_name in the myparent field, then that is what you would refer to it as. Ex: <code>related_name='children'</code>, then you would do <code>parent_object.children.all()</code></p>

<p>Read the <a href=""http://docs.djangoproject.com/en/dev/topics/db/models/#many-to-one-relationships"">docs</a> <a href=""http://docs.djangoproject.com/en/dev/topics/db/models/#many-to-one-relationships"">http://docs.djangoproject.com/en/dev/topics/db/models/#many-to-one-relationships</a> for more.</p>
"
179738,"<p>As far as algorithms go, that's an easy one.  Just find the max and min datetimes, take the difference, and divide by the number of datetimes you looked at.</p>

<p>If you have an array a of datetimes, you can do:</p>

<pre><code>mx = max(a)
mn = min(a)
avg = (mx-mn)/(len(a)-1)
</code></pre>

<p>to get back the average difference.</p>

<p>EDIT:  fixed the off-by-one error</p>
"
271832,"<blockquote>
  <p>Please note both <code>Content-Transfer-Encoding</code> have base64</p>
</blockquote>

<p>Not relevant in this case, the <code>Content-Transfer-Encoding</code> only applies to the body payload, not to the headers.</p>

<pre><code>=?gb2312?B?uLGxvmhlbrixsb5nLnhscw==?=
</code></pre>

<p>That's an <strong>RFC2047</strong>-encoded header atom. The stdlib function to decode it is <code>email.header.decode_header</code>. It still needs a little post-processing to interpret the outcome of that function though:</p>

<pre><code>import email.header
x= '=?gb2312?B?uLGxvmhlbrixsb5nLnhscw==?='
try:
    name= u''.join([
        unicode(b, e or 'ascii') for b, e in email.header.decode_header(x)
    ])
except email.Errors.HeaderParseError:
    pass # leave name as it was
</code></pre>

<p>However...</p>

<pre><code>Content-Type: application/vnd.ms-excel;
 name=""=?gb2312?B?uLGxvmhlbrixsb5nLnhscw==?=""
</code></pre>

<p>This is simply wrong. What mailer created it? RFC2047 encoding can only happen in atoms, and a quoted-string is not an atom. RFC2047 Â§5 explicitly denies this:</p>

<blockquote>
  <ul>
  <li>An 'encoded-word' MUST NOT appear within a 'quoted-string'.</li>
  </ul>
</blockquote>

<p>The accepted way to encode parameter headers when long string or Unicode characters are present is <strong>RFC2231</strong>, which is a whole new bag of hurt. But you should be using a standard mail-parsing library which will cope with that for you.</p>

<p>So, you could detect the <code>'=?'</code> in filename parameters if you want, and try to decode it via RFC2047. However, the strictly-speaking-correct thing to do is to take the mailer at its word and really call the file <code>=?gb2312?B?uLGxvmhlbrixsb5nLnhscw==?=</code>!</p>
"
298106,"<p>As others have pointed out, Python maintains an internal list of all modules that have been imported.  When you import a module for the first time, the module (a script) is executed in its own namespace until the end, the internal list is updated, and execution of continues after the import statement.   </p>

<p>Try this code:</p>

<pre><code>   # module/file a.py
   print ""Hello from a.py!""
   import b

   # module/file b.py
   print ""Hello from b.py!""
   import a
</code></pre>

<p>There is no loop:  there is only a cache lookup.</p>

<pre><code>&gt;&gt;&gt; import b
Hello from b.py!
Hello from a.py!
&gt;&gt;&gt; import a
&gt;&gt;&gt;
</code></pre>

<p>One of the beauties of Python is how everything devolves to executing a script in a namespace.</p>
"
53173,"<p>Put a <code>\</code> at the end of your line or enclose the statement in parens <code>( .. )</code>. From <a href=""http://www.ibm.com/developerworks/opensource/library/os-python5/"">IBM</a>:</p>

<pre><code>b = ((i1 &lt; 20) and
     (i2 &lt; 30) and
     (i3 &lt; 40))
</code></pre>

<p>or</p>

<pre><code>b = (i1 &lt; 20) and \
    (i2 &lt; 30) and \
    (i3 &lt; 40)
</code></pre>
"
261728,"<p>In some circumstances, it may be possible to move (all, or at least a key part) of the software into a web service that your organization hosts.</p>

<p>That way, the license checks can be performed in the safety of your own server room.</p>
"
193280,"<p>In my experience, it's just a matter of iteration.  Put your data and code wherever you think they go.  Chances are, you'll be wrong anyway.  But once you get a better idea of exactly how things are going to shape up, you're in a much better position to make these kinds of guesses.</p>

<p>As far as extension sources, we have a Code directory under trunk that contains a directory for python and a directory for various other languages.  Personally, I'm more inclined to try putting any extension code into its own repository next time around.</p>

<p>With that said, I go back to my initial point:  don't make too big a deal out of it.  Put it somewhere that seems to work for you.  If you find something that doesn't work, it can (and should) be changed.</p>
"
89971,"<p>There are a variety of ways of achieving this goal, some are clearer than others. For each of my examples, 'True' means that the string passed is valid, 'False' means it contains invalid characters.</p>

<p>First of all, there's the naive approach:</p>

<pre><code>import string
allowed = string.letters + string.digits + '_' + '-'

def check_naive(mystring):
    return all(c in allowed for c in mystring)
</code></pre>

<p>Then there's use of a regular expression, you can do this with re.match(). Note that '-' has to be at the end of the [] otherwise it will be used as a 'range' delimiter. Also note the $ which means 'end of string'. Other answers noted in this question use a special character class, '\w', I always prefer using an explicit character class range using [] because it is easier to understand without having to look up a quick reference guide, and easier to special-case.</p>

<pre><code>import re
CHECK_RE = re.compile('[a-zA-Z0-9_-]+$')
def check_re(mystring):
    return CHECK_RE.match(mystring)
</code></pre>

<p>Another solution noted that you can do an inverse match with regular expressions, I've included that here now. Note that [^...] inverts the character class because the ^ is used:</p>

<pre><code>CHECK_INV_RE = re.compile('[^a-zA-Z0-9_-]')
def check_inv_re(mystring):
   return not CHECK_INV_RE.search(mystring)
</code></pre>

<p>You can also do something tricky with the 'set' object. Have a look at this example, which removes from the original string all the characters that are allowed, leaving us with a set containing either a) nothing, or b) the offending characters from the string:</p>

<pre><code>def check_set(mystring):
    return not set(mystring) - set(allowed)
</code></pre>
"
223925,"<p>No and in fact, for the specific type of task you describe, I doubt there's a ""cleaner"" way to do it than regular expressions. It looks like your files have embedded line breaks so typically what we'll do here is make the line your unit of decomposition, applying per-line regexes. Meanwhile, you create a small state machine and use regex matches to trigger transitions in that state machine. This way you know where you are in the file, and what types of character data you can expect. Also, consider using named capture groups and loading the regexes from an external file. That way if the format of your transcript changes, it's a simple matter of tweaking the regex, rather than writing new parse-specific code.</p>
"
287919,"<p>You can use the Python implementation of the curses library:
<a href=""http://docs.python.org/library/curses.html"">http://docs.python.org/library/curses.html</a></p>

<p>Also, run this and you'll find your box:</p>

<pre><code>for i in range(255):
    print i, chr(i)
</code></pre>
"
190036,"<p>A trivial thing to try:</p>

<p>Resample both images to small thumbnails (e.g. 64 x 64) and compare the thumbnails pixel-by-pixel with a certain threshold. If the original images are almost the same, the resampled thumbnails will be very similar or even exactly the same. This method takes care of noise that can occur especially in low-light scenes. It may even be better if you go grayscale.</p>
"
337114,"<p>Take a look on this <a href=""http://www.djangosnippets.org/snippets/1035/"">snippet</a> - basic idea is to include custom JS in your admin definitions which will replace standard text areas with rich-text editor.</p>

<p>For jQuery/FCKEditor such JS could look like that:</p>

<pre><code>$(document).ready(function() {
    $(""textarea"").each(function(n, obj) {
        fck = new FCKeditor(obj.id) ;
            fck.BasePath = ""/admin-media/fckeditor/"" ;
            fck.ReplaceTextarea() ;
    });
});
</code></pre>
"
132459,"<p>There is frankly no way to mechanically and meaningfully translate C to Python without suffering an insane performance penalty. As we all know Python isn't anywhere near C speed (with current compilers and interpreters) but worse than that is that what C is good at (bit-fiddling, integer math, tricks with blocks of memory) Python is very slow at, and what Python is good at you can't express in C directly. A direct translation would therefore be extra inefficient, to the point of absurdity.</p>

<p>The much, much better approach in general is indeed to keep the C the C, and wrap it in a Python extension module (using <a href=""http://www.swig.org"">SWIG</a>, <a href=""http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/"">Pyrex</a>, <a href=""http://cython.org"">Cython</a> or <a href=""http://docs.python.org/ext"">writing a wrapper manually</a>) or call the C library directly using <a href=""http://docs.python.org/lib/module-ctypes.html"">ctypes</a>. All the benefits (and downsides) of C for what's already C or you add later, and all the convenience (and downsides) of Python for any code in Python.</p>

<p>That won't satisfy your 'sandboxing' needs, but you should realize that you cannot sandbox Python particularly well anyway; it takes a lot of effort and modification of CPython, and if you forget one little hole somewhere your jail is broken. If you want to sandbox Python you should start by sandboxing the entire process, and then C extensions can get sandboxed too.</p>
"
156553,"<p>I haven't used it, but the <a href=""http://springpython.webfactional.com/"">Spring Python</a> framework is based on Spring and implements <a href=""http://static.springsource.org/spring-python/1.2.x/sphinx/html/objects.html"">Inversion of Control</a>.</p>

<p>There also appears to be a Guice in Python project: <a href=""http://code.google.com/p/snake-guice/"">snake-guice</a></p>
"
346255,"<p>From the doc <a href=""http://docs.python.org/library/stdtypes.html#file.read"">file.read()</a> (my emphasis):</p>

<blockquote>
  <p>file.read([size])</p>
  
  <p>Read at most size bytes from the file (less if the read hits EOF before obtaining size  bytes). If the size argument is negative or omitted, read all data until EOF is reached. <strong>The bytes are returned as a string object</strong>. An empty string is returned when EOF is encountered immediately. (For certain files, like ttys, it makes sense to continue reading after an EOF is hit.) Note that this method may call the underlying C function fread more than once in an effort to acquire as close to size bytes as possible. Also note that when in non-blocking mode, less data than was requested may be returned, even if no size parameter was given.</p>
</blockquote>

<p>Be aware that a regexp search on a large string object may not be efficient, and consider doing the search line-by-line, using <a href=""http://docs.python.org/library/stdtypes.html#file.next"">file.next()</a> (a file object is its own iterator).</p>
"
207246,"<p>If by ""local"" you mean on the same network segment, then you have to perform the following steps:</p>

<ol>
<li>Determine your own IP address</li>
<li>Determine your own netmask</li>
<li>Determine the network range</li>
<li>Scan all the addresses (except the lowest, which is your network address and the highest, which is your broadcast address).</li>
<li>Use your DNS's reverse lookup to determine the hostname for IP addresses which respond to your scan.</li>
</ol>

<p>Or you can just let Python execute nmap externally and pipe the results back into your program.</p>
"
310968,"<p>You can define clean_FIELD_NAME() methods which can validate and alter data, as documented here: <a href=""http://docs.djangoproject.com/en/dev/ref/forms/validation/#ref-forms-validation"">http://docs.djangoproject.com/en/dev/ref/forms/validation/#ref-forms-validation</a></p>
"
237133,"<pre><code>met% python -c 'import this' | grep 'only one'
There should be one-- and preferably only one --obvious way to do it.
</code></pre>
"
219048,"<p><a href=""http://docs.python.org/library/subprocess"">Subprocess</a> replaces os.popen, os.system, os.spawn, popen2 and commands. A <a href=""http://docs.python.org/library/subprocess#replacing-shell-pipe-line"">simple example for piping</a> would be:</p>

<pre><code>p1 = Popen([""dmesg""], stdout=PIPE)
p2 = Popen([""grep"", ""hda""], stdin=p1.stdout, stdout=PIPE)
output = p2.communicate()[0]
</code></pre>

<p>You could also use a <a href=""http://docs.python.org/library/mmap.html"">memory mapped file</a> with the flag=MAP_SHARED for shared memory between processes.</p>

<p><a href=""http://docs.python.org/library/multiprocessing.html"">multiprocessing</a> abstracts both <a href=""http://docs.python.org/library/multiprocessing.html#exchanging-objects-between-processes"">pipes</a> and <a href=""http://docs.python.org/library/multiprocessing.html#sharing-state-between-processes"">shared memory</a> and provides a higher level interface. Taken from the Processing documentation:</p>

<pre><code>from multiprocessing import Process, Pipe

def f(conn):
    conn.send([42, None, 'hello'])
    conn.close()

if __name__ == '__main__':
    parent_conn, child_conn = Pipe()
    p = Process(target=f, args=(child_conn,))
    p.start()
    print parent_conn.recv()   # prints ""[42, None, 'hello']""
    p.join()
</code></pre>
"
287405,"<p>How about just passing through the C preprocessor, and letting that do the job.  It will get rid of all of them, so you might need to have a pre-preprocessor step and a post pre-processor step to protect things you don't want to be expanded.</p>

<ol>
<li>Change all #include to @include</li>
<li>Pass file through preprocessor</li>
<li>Change @include back to #include</li>
</ol>
"
78404,"<p>This is not an answer, more of a plea: Please don't do that.</p>

<p>Your reimplemented widgets will lack all sorts of functionality that users will miss. Will your text-entry boxes support drag'n'drop? Copy/paste? Right-to-left scripts? Drag-select? Double-click-select? Will all these mechanisms follow the native conventions of each platform you support?</p>

<p>With Wx your widgets might look inconsistant with the app, but at least they'll look consistant with the OS which is just as important. And more importantly, they'll do what users expect.</p>

<p>(edit) Three posts, and -3 points? Screw this den of karma-whores. Original poster: I have implemented a basic set of widgets in OpenGL (for a game UI) and it was an endless nightmare of a job.</p>
"
35635,"<p>Use <code>a.equal? b</code></p>

<p><a href=""http://www.ruby-doc.org/core/classes/Object.html"">http://www.ruby-doc.org/core/classes/Object.html</a></p>

<blockquote>
  <p>Unlike ==, the equal? method should never be overridden by subclasses: it is used to determine object identity (that is, a.equal?(b) iff a is the same object as b). </p>
</blockquote>
"
36327,"<p>It's a bug, see the <a href=""http://docs.python.org/lib/node528.html"" rel=""nofollow"">documentation of <code>subprocess.Popen</code></a>. There either needs to be a <code>""shell=True</code>"" option, or the first argument needs to be a sequence <code>['svn', '--version']</code>. As it is now, <code>Popen</code> is looking for an executable named, literally, ""svn --version"" which it doesn't find.</p>

<p>I don't know why it would work for your colleagues though, if they are running the same OS and version of Python... FWIW it gives me the same error message on a mac, and either of the two ways I gave fixes it.</p>
"
152454,"<p>Using hints from <a href=""http://www.devx.com/opensource/Article/37773/1954"">WindowMover article</a> and <a href=""http://our.obor.us/?q=node/42"">Nattee Niparnan's blog post</a> I managed to create this:</p>

<pre><code>import win32con
import win32gui

def isRealWindow(hWnd):
    '''Return True iff given window is a real Windows application window.'''
    if not win32gui.IsWindowVisible(hWnd):
        return False
    if win32gui.GetParent(hWnd) != 0:
        return False
    hasNoOwner = win32gui.GetWindow(hWnd, win32con.GW_OWNER) == 0
    lExStyle = win32gui.GetWindowLong(hWnd, win32con.GWL_EXSTYLE)
    if (((lExStyle &amp; win32con.WS_EX_TOOLWINDOW) == 0 and hasNoOwner)
      or ((lExStyle &amp; win32con.WS_EX_APPWINDOW != 0) and not hasNoOwner)):
        if win32gui.GetWindowText(hWnd):
            return True
    return False

def getWindowSizes():
    '''
    Return a list of tuples (handler, (width, height)) for each real window.
    '''
    def callback(hWnd, windows):
        if not isRealWindow(hWnd):
            return
        rect = win32gui.GetWindowRect(hWnd)
        windows.append((hWnd, (rect[2] - rect[0], rect[3] - rect[1])))
    windows = []
    win32gui.EnumWindows(callback, windows)
    return windows

for win in getWindowSizes():
    print win
</code></pre>

<p>You need the <a href=""http://python.net/crew/mhammond/win32/Downloads.html"">Win32 Extensions for Python module</a> for this to work.</p>

<p>EDIT: I discovered that <code>GetWindowRect</code> gives more correct results than <code>GetClientRect</code>. Source has been updated.</p>
"
229293,"<p>The suggestion to use <code>listdir</code> is a good one.  The direct answer to your question is <code>root, dirs, files = os.walk(dir_name).next()</code></p>
"
304352,"<p>Django, being a web framework, is extremely efficient at creating websites.  However, it's also equally well-suited to tackling problems off the web.  This is the <em>loose coupling</em> that the project prides itself on.  Nothing stops you from installing a complete version of Django, and just using what you need.  As a rule, very few components of Django make broad assumptions about their usage.</p>

<p>Specifically:</p>

<ul>
<li>Django models don't know anything
about HTML or HTTP.</li>
<li>Templates don't know anything about HTML or HTTP.</li>
<li>The cache
system can be used to <a href=""http://docs.djangoproject.com/en/dev/topics/cache/#the-low-level-cache-api"">store
<em>anything that can be pickled</em></a>.</li>
</ul>

<p>One of the main things you'll face when trying to use Django without a web server is setting up the environment properly.  The ORM and cache system still need to be configured in settings.py.  There are docs on <a href=""http://docs.djangoproject.com/en/dev/topics/settings/#using-settings-without-setting-django-settings-module"">using django without a settings module</a> that you may find useful.</p>
"
127678,"<p>I'm not sure if converting the info set to nested dicts first is easier. Using ElementTree, you can do this:</p>

<pre><code>import xml.etree.ElementTree as ET
doc = ET.parse(""template.xml"")
lvl1 = doc.findall(""level1-name"")[0]
lvl1.remove(lvl1.find(""leaf1"")
lvl1.remove(lvl1.find(""leaf2"")
# or use del lvl1[idx]
doc.write(""config-new.xml"")
</code></pre>

<p>ElementTree was designed so that you don't have to convert your XML trees to lists and attributes first, since it uses exactly that internally.</p>

<p>It also support as small subset of <a href=""http://effbot.org/zone/element-xpath.htm"" rel=""nofollow"">XPath</a>.</p>
"
50502,"<p>It's not entirely clear what you mean by ""the filepath of the file that is currently running within the process"".
<code>sys.argv[0]</code> usually contains the location of the script that was invoked by the Python interpreter.
Check the <a href=""https://docs.python.org/2/library/sys.html"" rel=""nofollow"">sys documentation</a> for more details.</p>

<p>As @Tim and @Pat Notz have pointed out, the __file__ attribute provides access to</p>

<blockquote>
  <p>the file from which the module was
  loaded, if it was loaded from a file</p>
</blockquote>
"
286064,"<p>I'm not familiar enough with the Decimal class to help you out, but your problem is due to the fact that decimal fractions can often not be accurate represented in binary, so what you're seeing is the closest possible approximation; there's no way to avoid this problem without using a special class (like Decimal, probably).</p>

<p><code>EDIT:</code> What about the decimal class isn't working properly for you? As long as I start with a string, rather than a float, powers seem to work fine.</p>

<pre><code>&gt;&gt;&gt; import decimal
&gt;&gt;&gt; print(decimal.Decimal(""1.2"") ** 2)
1.44
</code></pre>

<p>The <a href=""http://docs.python.org/library/decimal.html"">module documentation</a> explains the need for and usage of <code>decimal.Decimal</code> pretty clearly, you should check it out if you haven't yet.</p>
"
34481,"<p>On top of the more direct answers, I'd be remiss if I didn't mention <a href=""http://ipython.scipy.org/"">iPython</a>.
Hit 'tab' to see the available methods, with autocompletion.</p>

<p>And once you've found a method, try:</p>

<pre><code>help(object.method) 
</code></pre>

<p>to see the pydocs, method signature, etc.</p>

<p>Ahh... <a href=""http://en.wikipedia.org/wiki/REPL"">REPL</a>.</p>
"
4978,"<p>This is one of those cases that really boil down to personal preference or situational details. If you're more comfortable and experienced with Python, then say so. Are they asking you to justify it because they're more comfortable with one of the other environments? After you're done, will the system be passed off to someone else for long-term maintenance?</p>

<p>If they ask you to use a technology or language that you're not as familiar with, then make sure they know up-front that it's going to take you longer.</p>"
59018,"<p>An other very good documentation tool is <a href=""http://sphinx.pocoo.org/"">sphinx</a>. It will be used for the upcoming python 2.6 <a href=""http://docs.python.org/dev/"">documentation</a> and is used by <a href=""http://docs.djangoproject.com/en/dev/"">django</a> and a lot of other python projects.</p>

<p>From the sphinx website:</p>

<ul>
<li><strong>Output formats</strong>: HTML (including Windows HTML Help) and LaTeX, for printable PDF versions</li>
<li><strong>Extensive cross-references</strong>: semantic markup and automatic links for functions, classes, glossary terms and similar pieces of information</li>
<li><strong>Hierarchical structure</strong>: easy definition of a document tree, with automatic links to siblings, parents and children</li>
<li><strong>Automatic indices</strong>: general index as well as a module index</li>
<li><strong>Code handling</strong>: automatic highlighting using the Pygments highlighter</li>
<li><strong>Extensions</strong>: automatic testing of code snippets, inclusion of docstrings from Python modules, and more</li>
</ul>
"
281294,"<p>Here's a slightly more complex version of a linked list class, with a similar interface to python's sequence types (ie. supports indexing, slicing, concatenation with arbitrary sequences etc).  It should have O(1) prepend, doesn't copy data unless it needs to and can be used pretty interchangably with tuples.</p>

<p>It won't be as space or time efficient as lisp cons cells, as python classes are obviously a bit more heavyweight (You could improve things slightly with ""<code>__slots__ = '_head','_tail'</code>"" to reduce memory usage).  It will have the desired big O performance characteristics however.</p>

<p>Example of usage:</p>

<pre><code>&gt;&gt;&gt; l = LinkedList([1,2,3,4])
&gt;&gt;&gt; l
LinkedList([1, 2, 3, 4])
&gt;&gt;&gt; l.head, l.tail
(1, LinkedList([2, 3, 4]))

# Prepending is O(1) and can be done with:
LinkedList.cons(0, l)
LinkedList([0, 1, 2, 3, 4])
# Or prepending arbitrary sequences (Still no copy of l performed):
[-1,0] + l
LinkedList([-1, 0, 1, 2, 3, 4])

# Normal list indexing and slice operations can be performed.
# Again, no copy is made unless needed.
&gt;&gt;&gt; l[1], l[-1], l[2:]
(2, 4, LinkedList([3, 4]))
&gt;&gt;&gt; assert l[2:] is l.next.next

# For cases where the slice stops before the end, or uses a
# non-contiguous range, we do need to create a copy.  However
# this should be transparent to the user.
&gt;&gt;&gt; LinkedList(range(100))[-10::2]
LinkedList([90, 92, 94, 96, 98])
</code></pre>

<p>Implementation:</p>

<pre><code>import itertools

class LinkedList(object):
    """"""Immutable linked list class.""""""

    def __new__(cls, l=[]):
        if isinstance(l, LinkedList): return l # Immutable, so no copy needed.
        i = iter(l)
        try:
            head = i.next()
        except StopIteration:
            return cls.EmptyList   # Return empty list singleton.

        tail = LinkedList(i)

        obj = super(LinkedList, cls).__new__(cls)
        obj._head = head
        obj._tail = tail
        return obj

    @classmethod
    def cons(cls, head, tail):
        ll =  cls([head])
        if not isinstance(tail, cls):
            tail = cls(tail)
        ll._tail = tail
        return ll

    # head and tail are not modifiable
    @property  
    def head(self): return self._head

    @property
    def tail(self): return self._tail

    def __nonzero__(self): return True

    def __len__(self):
        return sum(1 for _ in self)

    def __add__(self, other):
        other = LinkedList(other)

        if not self: return other   # () + l = l
        start=l = LinkedList(iter(self))  # Create copy, as we'll mutate

        while l:
            if not l._tail: # Last element?
                l._tail = other
                break
            l = l._tail
        return start

    def __radd__(self, other):
        return LinkedList(other) + self

    def __iter__(self):
        x=self
        while x:
            yield x.head
            x=x.tail

    def __getitem__(self, idx):
        """"""Get item at specified index""""""
        if isinstance(idx, slice):
            # Special case: Avoid constructing a new list, or performing O(n) length 
            # calculation for slices like l[3:].  Since we're immutable, just return
            # the appropriate node. This becomes O(start) rather than O(n).
            # We can't do this for  more complicated slices however (eg [l:4]
            start = idx.start or 0
            if (start &gt;= 0) and (idx.stop is None) and (idx.step is None or idx.step == 1):
                no_copy_needed=True
            else:
                length = len(self)  # Need to calc length.
                start, stop, step = idx.indices(length)
                no_copy_needed = (stop == length) and (step == 1)

            if no_copy_needed:
                l = self
                for i in range(start): 
                    if not l: break # End of list.
                    l=l.tail
                return l
            else:
                # We need to construct a new list.
                if step &lt; 1:  # Need to instantiate list to deal with -ve step
                    return LinkedList(list(self)[start:stop:step])
                else:
                    return LinkedList(itertools.islice(iter(self), start, stop, step))
        else:       
            # Non-slice index.
            if idx &lt; 0: idx = len(self)+idx
            if not self: raise IndexError(""list index out of range"")
            if idx == 0: return self.head
            return self.tail[idx-1]

    def __mul__(self, n):
        if n &lt;= 0: return Nil
        l=self
        for i in range(n-1): l += self
        return l
    def __rmul__(self, n): return self * n

    # Ideally we should compute the has ourselves rather than construct
    # a temporary tuple as below.  I haven't impemented this here
    def __hash__(self): return hash(tuple(self))

    def __eq__(self, other): return self._cmp(other) == 0
    def __ne__(self, other): return not self == other
    def __lt__(self, other): return self._cmp(other) &lt; 0
    def __gt__(self, other): return self._cmp(other) &gt; 0
    def __le__(self, other): return self._cmp(other) &lt;= 0
    def __ge__(self, other): return self._cmp(other) &gt;= 0

    def _cmp(self, other):
        """"""Acts as cmp(): -1 for self&lt;other, 0 for equal, 1 for greater""""""
        if not isinstance(other, LinkedList):
            return cmp(LinkedList,type(other))  # Arbitrary ordering.

        A, B = iter(self), iter(other)
        for a,b in itertools.izip(A,B):
           if a&lt;b: return -1
           elif a &gt; b: return 1

        try:
            A.next()
            return 1  # a has more items.
        except StopIteration: pass

        try:
            B.next()
            return -1  # b has more items.
        except StopIteration: pass

        return 0  # Lists are equal

    def __repr__(self):
        return ""LinkedList([%s])"" % ', '.join(map(repr,self))

class EmptyList(LinkedList):
    """"""A singleton representing an empty list.""""""
    def __new__(cls):
        return object.__new__(cls)

    def __iter__(self): return iter([])
    def __nonzero__(self): return False

    @property
    def head(self): raise IndexError(""End of list"")

    @property
    def tail(self): raise IndexError(""End of list"")

# Create EmptyList singleton
LinkedList.EmptyList = EmptyList()
del EmptyList
</code></pre>
"
185593,"<p>I don't really understand why you're after a regular expression to solve this 'problem'. You're just after a way to find all .py files that start with 'Run'. So this is a simple solution that will work, without resorting to compiling an running a regular expression:</p>

<pre><code>import os
for filename in os.listdir(dirname):
    root, ext = os.path.splitext(filename)
    if root.startswith('Run') and ext == '.py':
        print filename
</code></pre>
"
347607,"<p>Here's my favorite approach to the ""family of related tests"".  I like explicit subclasses of a TestCase that expresses the common features.</p>

<pre><code>class MyTestF1( unittest.TestCase ):
    theFunction= staticmethod( f1 )
    def setUp(self):
        self.matrix1 = numpy.ones((5,10))
        self.matrix2 = numpy.identity(5)
    def testOutputShape( self ):
        """"""Output of functions be of a certain shape""""""
        output = self.theFunction(self.matrix1, self.matrix2)
        fail_message = ""%s produces output of the wrong shape"" % (self.theFunction.__name__,)
        self.assertEqual(self.matrix1.shape, output.shape, fail_message)

class TestF2( MyTestF1 ):
    """"""Includes ALL of TestF1 tests, plus a new test.""""""
    theFunction= staticmethod( f2 )
    def testUniqueFeature( self ):
         # blah blah blah
         pass

class TestF3( MyTestF1 ):
    """"""Includes ALL of TestF1 tests with no additional code.""""""
    theFunction= staticmethod( f3 )
</code></pre>

<p>Add a function, add a subclass of <code>MyTestF1</code>.  Each subclass of MyTestF1 includes all of the tests in MyTestF1 with no duplicated code of any kind.</p>

<p>Unique features are handled in an obvious way.  New methods are added to the subclass.</p>

<p>It's completely compatible with <code>unittest.main()</code></p>
"
341742,"<p>This is a complete example which combines hints by other people here.
It should render a file called test.svg from the current directory.  It was tested on Ubuntu 10.10, python-cairo 1.8.8, python-pygame 1.9.1, python-rsvg 2.30.0.</p>

<pre><code>#!/usr/bin/python

import array
import math

import cairo
import pygame
import rsvg

WIDTH = 512
HEIGHT = 512

data = array.array('c', chr(0) * WIDTH * HEIGHT * 4)
surface = cairo.ImageSurface.create_for_data(
    data, cairo.FORMAT_ARGB32, WIDTH, HEIGHT, WIDTH * 4)

pygame.init()
window = pygame.display.set_mode((WIDTH, HEIGHT))
svg = rsvg.Handle(file=""test.svg"")
ctx = cairo.Context(surface)
svg.render_cairo(ctx)

screen = pygame.display.get_surface()
image = pygame.image.frombuffer(data.tostring(), (WIDTH, HEIGHT),""ARGB"")
screen.blit(image, (0, 0)) 
pygame.display.flip() 

clock = pygame.time.Clock()
while True:
    clock.tick(15)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            raise SystemExit
</code></pre>
"
294199,"<pre><code>import Tkinter as tk

def quit(root):
    root.destroy()

root = tk.Tk()
tk.Button(root, text=""Quit"", command=lambda root=root:quit(root)).pack()
root.mainloop()
</code></pre>
"
258930,"<p>Note that what is happening is not related to any kind of implicit string conversion etc, but because the Exception class implements __getitem__(), and uses it to return the values in the args tuple (ex.args).  You can see this by the fact that you get the whole string as your first and only item in the iteration, rather than the character-by-character result you'd get if you iterate over the string.</p>

<p>This surprised me too, but thinking about it, I'm guessing it is for backwards compatability reasons.  Python used to (<a href=""http://www.python.org/doc/essays/stdexceptions.html"">pre-1.5</a>) lack the current class hierarchy of exceptions.  Instead, strings were thrown, with (usually) a tuple argument for any details that should be passed to the handling block.  ie:</p>

<pre><code>try:
    raise ""something failed"", (42, ""some other details"")
except ""something failed"", args:
    errCode, msg = args
    print ""something failed.  error code %d: %s"" % (errCode, msg)
</code></pre>

<p>It looks like this behavior was put in to avoid breaking pre-1.5 code expecting a tuple of arguments, rather than a non-iterable exception object.  There are a couple of examples of this with IOError in the Fatal Breakage section of the above <a href=""http://www.python.org/doc/essays/stdexceptions.html"">link</a></p>

<p>String exceptions have been depecated for a while, and are going away in Python 3.  I've now checked how Python 3 handles exception objects, and it looks like they are no longer iterable there:</p>

<pre><code>&gt;&gt;&gt; list(Exception(""test""))
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: 'Exception' object is not iterable
</code></pre>

<p>[Edit] Checked python3's behaviour</p>
"
346633,"<p>If you don't want to get involved with locales here is a function that formats numbers:</p>

<pre><code>def int_format(value, decimal_points=3, seperator=u'.'):
    value = str(value)
    if len(value) &lt;= decimal_points:
        return value
    # say here we have value = '12345' and the default params above
    parts = []
    while value:
        parts.append(value[-decimal_points:])
        value = value[:-decimal_points]
    # now we should have parts = ['345', '12']
    parts.reverse()
    # and the return value should be u'12.345'
    return seperator.join(parts)
</code></pre>

<p>Creating a <a href=""http://docs.djangoproject.com/en/dev/howto/custom-template-tags/#writing-custom-template-filters"">custom template filter</a> from this function is trivial.</p>
"
287942,"<p>ConfigParser isn't designed to handle such conditions. Furthermore, your config file doesn't make sense to me.</p>

<p>ConfigParser gives you a dict-like structure for each section, so when you call parser.items(section), I'm expecting similar output to dict.items(), which is just a list of key/value tuples. I would never expect to see something like:</p>

<pre><code>[('spam', 'eggs'), ('spam', 'ham')]
</code></pre>

<p>Not to mention, how would you expect the following to behave?:</p>

<pre><code>parser.get('Some Section', 'spam')
</code></pre>

<p>Which is the intended way to retrieve values.</p>

<p>If you want to store multiple values for the same key, I would suggest something like this in your config file:</p>

<pre><code>[Some Section]
spam: eggs, ham
</code></pre>

<p>And this in your code:</p>

<pre><code>spam_values = [v.strip() for v in parser.get('Some Section', 'spam').split(',')]
</code></pre>

<p>Of course, this will only work for values that don't contain commas themselves or handle quoting. For that, you should employ a more advanced technique (see <a href=""http://stackoverflow.com/questions/118096/how-can-i-parse-a-comma-delimited-string-into-a-list-caveat"">this</a> and <a href=""http://stackoverflow.com/questions/118458/how-can-i-join-a-list-into-a-string-caveat"">this</a>).</p>

<p>EDIT: If you don't mind the extra dependency, You could check out <a href=""http://www.voidspace.org.uk/python/configobj.html"">ConfigObj</a>, which natively supports lists as a value type.</p>
"
181553,"<p>This doesn't improve so much but...</p>

<pre><code>allCondsAreOK = (cond1 == 'val1' and cond2 == 'val2' and
                 cond3 == 'val3' and cond4 == 'val4')

if allCondsAreOK:
   do_something
</code></pre>
"
181848,"<p>I prefer this style when I have a terribly large if-condition:</p>

<pre><code>if (
  expr1
  and (expr2 or expr3)
  and hasattr(thingy1, '__eq__')
  or status==""HappyTimes""
):
  do_stuff()
else:
  do_other_stuff()
</code></pre>
"
122482,"<p>As @zacherates says, you really don't want to display a stacktrace to your users.  The easiest approach to this problem is what Django does by default if you have yourself and your developers listed in the ADMINS setting with email addresses; it sends an email to everyone in that list with the full stack trace (and more) everytime there is a 500 error with DEBUG = False.</p>
"
85613,"<p>You need <a href=""http://en.wikipedia.org/wiki/Address_Resolution_Protocol"">ARP</a>. Python's standard library doesn't include any code for that, so you either need to call an external program (your OS may have an 'arp' utility) or you need to build the packets yourself (possibly with a tool like <a href=""http://www.secdev.org/projects/scapy/"">Scapy</a>.</p>
"
291473,"<p>pyodbc comes with Activestate Python, which can be downloaded from <a href=""http://www.activestate.com/store/productdetail.aspx?prdGuid=b08b04e0-6872-4d9d-a722-7a0c2dea2758"" rel=""nofollow"">here</a>.  A minimal odbc script to connect to a SQL Server 2005 database looks like this:</p>

<pre><code>import odbc

CONNECTION_STRING=""""""
Driver={SQL Native Client};
Server=[Insert Server Name Here];
Database=[Insert DB Here];
Trusted_Connection=yes;
""""""

db = odbc.odbc(CONNECTION_STRING)
c = db.cursor()
c.execute ('select foo from bar')
rs = c.fetchall()
for r in rs:
    print r[0]
</code></pre>
"
236589,"<p>Here are some items that have helped me maintain a fairly large system in python.</p>

<ul>
<li><p>Structure your code in layers.  i.e separate biz logic,  presentaion logic and your persistence layers.  Invest a bit of time in defining these layers and make sure everyone on the project is bought in.  For large systems creating a framework that forces you into a certain way of development can be key as well.</p></li>
<li><p>Tests are key, without unit tests you will likely end up with an unmanagable code base several times quicker than with other languages.  Keep in mind that unit tests are often not sufficient, make sure to have several integration/acceptance tests you can run quickly after any major change.</p></li>
<li><p>Use <a href=""http://en.wikipedia.org/wiki/Fail-fast"">Fail Fast</a> principle.  Add assertions for cases you feel your code maybe vulnerable.</p></li>
<li><p>Have standard logging/error handling that will help you quickly navigate to the issue</p></li>
<li><p>Use an IDE( pyDev works for me) that provides type ahead, pyLint/Checker integration that help you detect common typos right away and promote some coding standards</p></li>
<li><p>Carefull about your imports, never do from x import * or do relative imports without use of .</p></li>
<li><p>Do refactor, a search/replace tool with regular expressions is often all you need to do move methods/class type refactoring.  </p></li>
</ul>
"
147716,"<pre><code>value = 0xdeadbeef
value &amp;= ~(1&lt;&lt;10)
</code></pre>
"
72504,"<p>From <a href=""http://docs.python.org/lib/minimal-example.html"">http://docs.python.org/lib/minimal-example.html</a> :</p>

<blockquote>
  <p>When a setUp() method is defined, the
  test runner will run that method prior
  to each test.</p>
</blockquote>

<p>So setUp() gets run before both testA and testB, setting i to 1 each time.  Behind the scenes, the entire test object is actually being re-instantiated for each test, with setUp() being run on each new instantiation before the test is executed.</p>
"
178668,"<p>@Unkwntech,</p>

<p>What you want is available in the just-released Python 2.6 in the form of <a href=""http://docs.python.org/whatsnew/2.6.html#new-improved-and-deprecated-modules"">named tuples</a>.  They allow you to do this:</p>

<pre><code>import collections
person = collections.namedtuple('Person', 'id name age')

me = person(id=1, age=1e15, name='Dan')
you = person(2, 'Somebody', 31.4159)

assert me.age == me[2]   # can access fields by either name or position
</code></pre>
"
80000,"<p>Similar behavior exists when module attribute names begin with a single underscore (e.g. _foo).</p>

<p>Module attributes named as such will not be copied into an importing module when using the <code>from*</code> method, e.g.:</p>

<pre><code>from bar import *
</code></pre>

<p>However, this is a convention and not a language constraint. These are not private attributes; they can be referenced and manipulated by any importer. Some argue that because of this, Python can not implement true encapsulation.</p>
"
339308,"<p>I've always been impressed by <a href=""http://pyparsing.wikispaces.com/"">pyparsing</a>. The author, Paul McGuire, is active on the <a href=""http://mail.python.org/mailman/listinfo/python-list"">python list</a>/<a href=""http://groups.google.com/group/comp.lang.python"">comp.lang.python</a> and has always been very helpful with any queries concerning it.</p>
"
257403,"<p>Your best bet is the tkMessageBox module, which should work on all systems (as Python will typically come with Tkinter).</p>

<p>If you can restrict yourself to a specific operating system, better choices might be available.</p>
"
302184,"<p>I had to do this exact thing myself recently.  I only needed classes from the standard library.  Here's an excerpt from my code:</p>

<pre><code>from urllib import urlencode
from urllib2 import urlopen, Request

# encode my POST parameters for the login page
login_qs = urlencode( [(""username"",USERNAME), (""password"",PASSWORD)] )

# extract my session id by loading a page from the site
set_cookie = urlopen(URL_BASE).headers.getheader(""Set-Cookie"")
sess_id = set_cookie[set_cookie.index(""="")+1:set_cookie.index("";"")]

# construct headers dictionary using the session id
headers = {""Cookie"": ""session_id=""+sess_id}

# perform login and make sure it worked
if ""Announcements:"" not in urlopen(Request(URL_BASE+""login"",headers=headers), login_qs).read():
    print ""Didn't log in properly""
    exit(1)

# here's the function I used after this for loading pages
def download(page=""""):
    return urlopen(Request(URL_BASE+page, headers=headers)).read()

# for example:
print download(URL_BASE + ""config"")
</code></pre>
"
115853,"<p>[<strong>Note</strong>.  Be very cautious about separating ""Calendar"" a collection of events, and ""Event"" - a single event on a calendar.  In your question, it seems like there could be some confusion.]</p>

<p>There are many variations on the Factory design pattern.</p>

<ol>
<li><p>A stand-alone convenience function (e.g., calendarMaker(data))</p></li>
<li><p>A separate class (e.g., CalendarParser) which builds your target class (Calendar).</p></li>
<li><p>A class-level method (e.g. Calendar.from_string) method.</p></li>
</ol>

<p>These have different purposes.  All are Pythonic, the questions are ""what do you <em>mean</em>?"" and ""what's likely to change?""  Meaning is everything; change is important.</p>

<p>Convenience functions are Pythonic.  Languages like Java can't have free-floating functions; you must wrap a lonely function in a class.  Python allows you to have a lonely function without the overhead of a class.  A function is relevant when your constructor has no state changes or alternate strategies or any memory of previous actions.  </p>

<p>Sometimes folks will define a class and then provide a convenience function that makes an instance of the class, sets the usual parameters for state and strategy and any other configuration, and then calls the single relevant method of the class.  This gives you both the statefulness of  class plus the flexibility of a stand-alone function.</p>

<p>The class-level method pattern is used, but it has limitations.  One, it's forced to rely on class-level variables.  Since these can be confusing, a complex constructor as a static method runs into problems when you need to add features (like statefulness or alternative strategies.)  Be sure you're never going to expand the static method.</p>

<p>Two, it's more-or-less irrelevant to the rest of the class methods and attributes.  This kind of <code>from_string</code> is just one of many alternative encodings for your Calendar objects.  You might have a <code>from_xml</code>, <code>from_JSON</code>, <code>from_YAML</code> and on and on.  None of this has the least relevance to what a Calendar IS or what it DOES.  These methods are all about how a Calendar is encoded for transmission.</p>

<p>What you'll see in the mature Python libraries is that factories are separate from the things they create.  Encoding (as strings, XML, JSON, YAML) is subject to a great deal of more-or-less random change.  The essential thing, however, rarely changes.</p>

<p>Separate the two concerns.  Keep encoding and representation as far away from state and behavior as you can.</p>
"
135070,"<p><code>xrange()</code> is more efficient because instead of generating a list of objects, it just generates one object at a time. Instead of 100 integers, and all of their overhead, and the list to put them in, you just have one integer at a time. Faster generation, better memory use, more efficient code.</p>

<p>Unless I specifically need a list for something, I always favor <code>xrange()</code></p>
"
159798,"<p>Most python people prefer underscores, but even I am using python since more than 5 years right now, I still do not like them. They just look ugly to me, but maybe that's all the Java in my head. </p>

<p>I simply like CamelCase better since it fits better with the way classes are named, It feels more logical to have <code>SomeClass.doSomething()</code> than <code>SomeClass.do_something()</code>. If you look around in the global module index in python, you will find both, which is due to the fact that it's a collection of libraries from various sources that grew overtime and not something that was developed by one company like Sun with strict coding rules. I would say the bottom line is: Use whatever you like better, it's just a question of personal taste.</p>
"
260770,"<p>You can find information about Python audio here: <a href=""http://wiki.python.org/moin/Audio/"">http://wiki.python.org/moin/Audio/</a></p>

<p>It doesn't look like it can play .mp3 files without external libraries. You could either convert your .mp3 file to a .wav or other format, or use a library like <a href=""http://pymedia.org/"">PyMedia</a>.</p>
"
249796,"<p>In C, you would use <code>stat()</code> and compare the <code>st_dev</code> field. In python, <code>os.stat</code> should do the same.</p>
"
249524,"<p>A possibility that you might consider is matching the entire string of possible values within the url pattern portion and pull out the specific pieces within your view.  As an example:</p>

<pre><code>urlpatterns = patterns('',
    url(r'^browse/(?P&lt;match&gt;.+)/$', 'app.views.view', name='model_browse'),
)

def view(request, match):
    pieces = match.split('/')
    # even indexed pieces are the names, odd are values
    ...
</code></pre>

<p>No promises about the regexp I used, but I think you understand what I mean.</p>

<p>(Edited to try and fix the regexp.)</p>
"
333715,"<p>The <code>string.split(stringobj)</code> is a feature of the <code>string</code> module, which must be imported separately.  Once upon a time, that was the only way to split a string.  That's some old code you're looking at.</p>

<p>The <code>stringobj.split()</code> is a feature of a string object, <code>stringobj</code>, which is more recent than the <code>string</code> module.  But pretty old, nonetheless.  That's the current practice.</p>
"
152583,"<pre><code>isinstance(o, str)
</code></pre>

<p><a href=""http://docs.python.org/lib/built-in-funcs.html"">Link</a></p>
"
173826,"<p>The nicest way would be to make a generator of event handlers, e.g.:</p>

<pre><code>def getOnClick(self, additionalArgument):
    def OnClick(self, event):
        self.log.write(""Click! (%d), arg: %s\n"" 
                         % (event.GetId(), additionalArgument))
    return OnClick
</code></pre>

<p>Now you bind it with:</p>

<pre><code>b = wx.Button(self, 10, ""Default Button"", (20, 20))
b.Bind(wx.EVT_BUTTON, self.getOnClick('my additional data'))
</code></pre>
"
35759,"<p>I really like python, it's usually my language of choice these days for small (non-gui) stuff that I do on my own.</p>

<p>However, for some larger Python projects I've tackled, I'm finding that it's not quite the same as programming in say, C++. I was working on a language parser, and needed to represent an AST in Python. This is certainly within the scope of what Python can do, but I had a bit of trouble with some refactoring. I was changing the representation of my AST and changing methods and classes around a lot, and I found I missed the strong typing that would be available to me in a C++ solution. Python's duck typing was almost <em>too</em> flexible and I found myself adding a lot of <code>assert</code> code to try to check my types as the program ran. And then I couldn't really be sure that everything was properly typed unless I had 100% code coverage testing (which I didn't at the time).</p>

<p>Actually, that's another thing that I miss sometimes. It's possible to write syntactically correct code in Python that simply won't run. The compiler is incapable of telling you about it until it actually executes the code, so in infrequently-used code paths such as error handlers you can easily have unseen bugs lurking around. Even code that's as simple as printing an error message with a % format string can fail at runtime because of mismatched types.</p>

<p>I haven't used Python for any GUI stuff so I can't comment on that aspect.</p>
"
191744,"<p>Forget all that, python just allocates more memory as needed, there is not a myriad of comandline arguments for the VM as in java, just let it run. For all comandline switches you can just run python -h or read man python.</p>
"
84155,"<p>The short answer: 1) backwards compatibility and 2) there's not enough of a difference for it to really matter.  For a more detailed explanation, read on.</p>

<p>The idiomatic Python approach to such operations is special methods which aren't intended to be called directly.  For example, to make <code>x + y</code> work for your own class, you write a <code>__add__</code> method.  To make sure that <code>int(spam)</code> properly converts your custom class, write a <code>__int__</code> method.  To make sure that <code>len(foo)</code> does something sensible, write a <code>__len__</code> method.</p>

<p>This is how things have always been with Python, and I think it makes a lot of sense for some things.  In particular, this seems like a sensible way to implement operator overloading.  As for the rest, different languages disagree; in Ruby you'd convert something to an integer by calling <code>spam.to_i</code> directly instead of saying <code>int(spam)</code>.</p>

<p>You're right that Python is an extremely object-oriented language and that having to call an external function on an object to get its length seems odd.  On the other hand, <code>len(silly_walks)</code> isn't any more onerous than <code>silly_walks.len()</code>, and Guido has said that he actually prefers it (<a href=""http://mail.python.org/pipermail/python-3000/2006-November/004643.html"">http://mail.python.org/pipermail/python-3000/2006-November/004643.html</a>).</p>
"
210982,"<p>If your ""classpath"" variable contains for instance ""-classpath foo.jar"", it will not work, since it is thinking the option name is ""-classpath foo.jar"". Split it in two arguments: [..., ""-classpath"", classpath, ...].</p>

<p>The other ways (copy and paste and system()) work because the shell splits the command line at the spaces (unless they are escaped or quoted). The command line is in fact passed down to the called program as an array (unlike on Windows), and the JVM is expecting to find an element with only ""-classpath"" followed by another element with the classpath.</p>

<p>You can see the difference for yourself by calling the following small Python script instead of the JVM:</p>

<pre><code>#!/usr/bin/python
import sys
print sys.argv
</code></pre>
"
35111,"<p>@John: Your snippet doesn't work -- you are returning the <em>class</em> of the base classes (which are also known as metaclasses). You really just want <code>cls.__bases__</code>:</p>

<pre><code>class A: pass
class B: pass
class C(A, B): pass

c = C() # Instance

assert C.__bases__ == (A, B) # Works
assert c.__class__.__bases__ == (A, B) # Works

def magicGetSuperClasses(clz):
  return tuple([base.__class__ for base in clz.__bases__])

assert magicGetSuperClasses(C) == (A, B) # Fails
</code></pre>

<p>Also, if you're using Python 2.4+ you can use <a href=""http://www.python.org/dev/peps/pep-0289/"">generator expressions</a> instead of creating a list (via []), then turning it into a tuple (via <code>tuple</code>). For example:</p>

<pre><code>def get_base_metaclasses(cls):
    """"""Returns the metaclass of all the base classes of cls.""""""
    return tuple(base.__class__ for base in clz.__bases__)
</code></pre>

<p>That's a somewhat confusing example, but genexps are generally easy and cool. :)</p>
"
263022,"<p>It's not possible, for any child process, to change the environment of the parent process. The best you can do is to output shell statements to stdout that you then source, or write it to a file that you source in the parent.</p>
"
138582,"<p><a href=""http://codespeak.net/pypy/dist/pypy/doc/home.html"">PyPy</a> is a project to reimplement Python in Python, using compilation to native code as one of the implementation strategies (others being a VM with JIT, using JVM, etc.). Their compiled C versions run slower than CPython on average but much faster for some programs.</p>

<p><a href=""http://code.google.com/p/shedskin/"">Shedskin</a> is an experimental Python-to-C++ compiler.</p>

<p><a href=""http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/version/Doc/About.html"">Pyrex</a> is a language specially designed for writing Python extension modules. It's designed to bridge the gap between the nice, high-level, easy-to-use world of Python and the messy, low-level world of C.</p>
"
109591,"<p>Starting from python 2.6 you can also use <code>NamedTemporaryFile</code> with the <code>delete=</code> option set to False. This way the temporary file will be accessible, even after you close it.</p>

<p>Note that on Windows (NT and later) you cannot access the file a second time while it is still open. You have to close it before you can copy it. This is not true on Unix systems.</p>
"
164920,"<p>The way I'd go about it is this:</p>

<ol>
<li>Encrypt all of the code</li>
<li>Write an installer that contacts the server with the machine's hostname and license file and gets the decryption key, then decrypts the code and compiles it to python bytecode</li>
<li>Add (in the installer) a module that checks the machine's hostname and license file on import and dies if it doesn't match</li>
</ol>

<p>This way the user only has to contact the server when the hostname changes and on first install, but you get a small layer of security.  You could change the hostname to something more complex, but there's really no need -- anyone that wants to pirate this will do so, but a simple mechanism like that will keep honest people honest.</p>
"
22219,"<p>Darren Thomas gives a good answer.  However, one big difference between the Java and Python approaches is that with reference counting in the common case (no circular references) objects are cleaned up immediately rather than at some indeterminate later date.</p>

<p>For example, I can write sloppy, non-portable code in CPython such as</p>

<pre><code>def parse_some_attrs(fname):
    return open(fname).read().split(""~~~"")[2:4]
</code></pre>

<p>and the file descriptor for that file I opened will be cleaned up immediately because as soon as the reference to the open file goes away, the file is garbage collected and the file descriptor is freed.  Of course, if I run Jython or IronPython or possibly PyPy, then the garbage collector won't necessarily run until much later; possibly I'll run out of file descriptors first and my program will crash.</p>

<p>So you SHOULD be writing code that looks like</p>

<pre><code>def parse_some_attrs(fname):
    with open(fname) as f:
        return f.read().split(""~~~"")[2:4]
</code></pre>

<p>but sometimes people like to rely on reference counting to always free up their resources because it can sometimes make your code a little shorter.</p>

<p>I'd say that the best garbage collector is the one with the best performance, which currently seems to be the Java-style generational garbage collectors that can run in a separate thread and has all these crazy optimizations, etc.  The differences to how you write your code should be negligible and ideally non-existent.</p>
"
64464,"<p>I prefer to think of Django applications as reusable modules or components than as ""applications"". </p>

<p>This helps me encapsulate and decouple certain features from one another, improving re-usability should I decide to share a particular ""app"" with the community at large, and maintainability.</p>

<p>My general approach is to bucket up specific features or feature sets into ""apps"" as though I were going to release them publicly. The hard part here is figuring out how big each bucket is. </p>

<p>A good trick I use is to imagine how my apps would be used if they were released publicly. This often encourages me to shrink the buckets and more clearly define its ""purpose"".</p>
"
155184,"<p>Django uses the following libraries for markup:</p>

<ul>
<li><a href=""http://www.freewisdom.org/projects/python-markdown/"">Markdown</a></li>
<li><a href=""http://pypi.python.org/pypi/textile"">Textile</a></li>
<li><a href=""http://docutils.sourceforge.net/rst.html"">reStructuredText</a></li>
</ul>

<p>You can see <a href=""http://code.djangoproject.com/browser/django/trunk/django/contrib/markup/templatetags/markup.py"">how they're used in Django</a>.</p>
"
156564,"<p>If you're always pulling all available items off the queue, is there any real point in using a queue, rather than just a list with a lock?  ie:</p>

<pre><code>from __future__ import with_statement
import threading

class ItemStore(object):
    def __init__(self):
        self.lock = threading.Lock()
        self.items = []

    def add(self, item):
        with self.lock:
            self.items.append(item)

    def getAll(self):
        with self.lock:
            items, self.items = self.items, []
        return items
</code></pre>

<p>If you're also pulling them individually, and making use of the blocking behaviour for empty queues, then you should use Queue, but your use case looks much simpler, and might be better served by the above approach.</p>

<p><strong>[Edit2]</strong>  I'd missed the fact that you're polling the queue from an idle loop, and from your update, I see that the problem isn't related to contention, so the below approach isn't really relevant to your problem.  I've left it in in case anyone finds a blocking variant of this useful:</p>

<p>For cases where you do want to block until you get at least one result, you can modify the above code to wait for data to become available through being signalled by the producer thread.  Eg.</p>

<pre><code>class ItemStore(object):
    def __init__(self):
        self.cond = threading.Condition()
        self.items = []

    def add(self, item):
        with self.cond:
            self.items.append(item)
            self.cond.notify() # Wake 1 thread waiting on cond (if any)

    def getAll(self, blocking=False):
        with self.cond:
            # If blocking is true, always return at least 1 item
            while blocking and len(self.items) == 0:
                self.cond.wait()
            items, self.items = self.items, []
        return items
</code></pre>
"
157439,"<p>time.clock() only measures wallclock time on Windows. On other systems, time.clock() actually measures CPU-time. On those systems time.time() is more suitable for wallclock time, and it has as high a resolution as Python can manage -- which is as high as the OS can manage; usually using gettimeofday(3) (microsecond resolution) or ftime(3) (millisecond resolution.) Other OS restrictions actually make the real resolution a lot higher than that. datetime.datetime.now() uses time.time(), so time.time() directly won't be better.</p>

<p>For the record, if I use datetime.datetime.now() in a loop, I see about a 1/10000 second resolution. From looking at your data, you have much, much coarser resolution than that. I'm not sure if there's anything Python as such can do, although you may be able to convince the OS to do better through other means.</p>

<p>I seem to recall that on Windows, time.clock() is actually (slightly) more accurate than time.time(), but it measures wallclock since the first call to time.clock(), so you have to remember to 'initialize' it first.</p>
"
9358,"<p>What you're after is the <a href=""http://id3-py.sourceforge.net/"">ID3</a> module.  It's very simple and will give you exactly what you need.  Just copy the ID3.py file into your site-packages directory and you'll be able to do something like the following:</p>

<pre><code>from ID3 import *
try:
  id3info = ID3('file.mp3')
  print id3info
  # Change the tags
  id3info['TITLE'] = ""Green Eggs and Ham""
  id3info['ARTIST'] = ""Dr. Seuss""
  for k, v in id3info.items():
    print k, "":"", v
except InvalidTagError, message:
  print ""Invalid ID3 tag:"", message
</code></pre>
"
311214,"<p>Now that you have a human readable description of your file name, it's quite straight forward to translate it into a regular expression (at least in this case ;)</p>

<blockquote>
  <p>must start with</p>
</blockquote>

<p>The caret (<code>^</code>) anchors a regular expression to the beginning of what you want to match, so your re has to start with this symbol.</p>

<blockquote>
  <p>'b',</p>
</blockquote>

<p>Any non-special character in your re will match literally, so you just use ""b"" for this part: <code>^b</code>.</p>

<blockquote>
  <p>followed by [...] digits,</p>
</blockquote>

<p>This depends a bit on which flavor of re you use:</p>

<p>The most general way of expressing this is to use brackets (<code>[]</code>). Those mean ""match any one of the characters listed within. <code>[ASDF]</code> for example would match either <code>A</code> or <code>S</code> or <code>D</code> or <code>F</code>, <code>[0-9]</code> would match anything between 0 and 9.</p>

<p>Your re library probably has a shortcut for ""any digit"". In <code>sed</code> and <code>awk</code> you could use <code>[[:digit:]]</code> [sic!], in python and many other languages you can use <code>\d</code>.</p>

<p>So now your re reads <code>^b\d</code>.</p>

<blockquote>
  <p>followed by three [...]</p>
</blockquote>

<p>The most simple way to express this would be to just repeat the atom three times like this: <code>\d\d\d</code>.</p>

<p>Again your language might provide a shortcut: braces (<code>{}</code>). Sometimes you would have to escape them with a backslash (if you are using sed or awk, read about ""extended regular expressions""). They also give you a way to say ""at least x, but no more than y occurances of the previous atom"": <code>{x,y}</code>.</p>

<p>Now you have: <code>^b\d{3}</code></p>

<blockquote>
  <p>followed by 'cv',</p>
</blockquote>

<p>Literal matching again, now we have <code>^b\d{3}cv</code></p>

<blockquote>
  <p>followed by two digits,</p>
</blockquote>

<p>We already covered this: <code>^b\d{3}cv\d{2}</code>.</p>

<blockquote>
  <p>then an underscore, followed by 'release', followed by .'ext'</p>
</blockquote>

<p>Again, this should all match literally, but the dot (<code>.</code>) is a special character. This means you have to escape it with a backslash: <code>^\d{3}cv\d{2}_release\.ext</code></p>

<p>Leaving out the backslash would mean that a filename like ""b410cv11_test_ext"" would also match, which may or may not be a problem for you.</p>

<p>Finally, if you want to guarantee that there is nothing else following "".ext"", anchor the re to the end of the thing to match, use the dollar sign (<code>$</code>).</p>

<p>Thus the complete regular expression for your specific problem would be:</p>

<pre><code>^b\d{3}cv\d{2}_release\.ext$
</code></pre>

<p>Easy.</p>

<p>Whatever language or library you use, there has to be a reference somewhere in the documentation that will show you what the exact syntax in your case should be. Once you have learned to break down the problem into a suitable description, understanding the more advanced constructs will come to you step by step.</p>
"
39755,"<pre><code>class A:
    def _ _init_ _(self):
        self.name = 'A'
a = A()
</code></pre>

<p>Creates an attribute on the object instance a of type A and it can therefore be found in: <code>a.__dict__</code></p>

<pre><code>class B:
    name = 'B'
b = B()
</code></pre>

<p>Creates an attribute on the class B and the attribute can be found in <code>B.__dict__</code> alternatively if you have an instance b of type B you can see the class level attributes in <code>b.__class__.__dict__</code></p>
"
227319,"<p>This looks like a <a href=""http://en.wikipedia.org/wiki/Linear_programming"">linear programming</a> problem. The <a href=""http://en.wikipedia.org/wiki/Simplex_algorithm"">Simplex algorithm</a> normally gives good results. It basically walks the boundaries of the subspace delimited by the inequalities, looking for the optimum.</p>

<p>Think of it visually: each inequality denotes a half-space, a plane in n-dimensional space that you have to be on the right side of. Your utility function is what you're trying to optimize. If the space is closed, the optimum is going to be at one of the apexes of the closed space; if it's open, it's possible that the optimum is infinite.</p>
"
167134,"<p>Consider <a href=""http://docs.python.org/library/stdtypes.html#dict.pop"" rel=""nofollow"">dict.pop</a>:</p>

<pre><code>for key in exclusion:
     a.pop(key, None)
</code></pre>

<p>The <code>None</code> keeps pop from raising an exception when <code>key</code> isn't a key.</p>
"
24061,"<p>To be honest, I understand closures perfectly well except I've never been clear about what exactly is the thing which is the ""closure"" and what's so ""closure"" about it. I recommend you give up looking for any logic behind the choice of term.</p>

<p>Anyway, here's my explanation:</p>

<pre><code>def foo():
   x = 3
   def bar():
      print x
   x = 5
   return bar

bar = foo()
bar()   # print 5
</code></pre>

<p>A key idea here is that the function object returned from foo retains a hook to the local var 'x' even though 'x' has gone out of scope and should be defunct. This hook is to the var itself, not just the value that var had at the time, so when bar is called, it prints 5, not 3.</p>

<p>Also be clear that Python 2.x has limited closure: there's no way I can modify 'x' inside 'bar' because writing 'x = bla' would declare a local 'x' in bar, not assign to 'x' of foo. This is a side-effect of Python's assignment=declaration. To get around this, Python 3.0 introduces the nonlocal keyword:</p>

<pre><code>def foo():
   x = 3
   def bar():
      print x
   def ack():
      nonlocal x
      x = 7
   x = 5
   return (bar, ack)

bar, ack = foo()
ack()   # modify x of the call to foo
bar()   # print 7
</code></pre>
"
338790,"<p>To mark a directory as a package you need a file named <code>__init__.py</code>, does this help?</p>
"
199736,"<p>Here's what you have to do.</p>

<p>First, be sure you can walk before you run.  Build something simple, possibly tangentially related to your main project.</p>

<p><strong>DO NOT</strong> build a piece of the final project and hope it will ""evolve"" into the final project.  This never works out well.  Why?  You'll make dumb mistakes.  But you can't delete or rework them because you're supposed to evolve that mistake into the final project.</p>

<p>Next, pick a a framework.  What?  Second?  Yes.  Second.  Until you actually do something with some scripting languages and frameworks, you have no real useful concept of what you're doing.  Once you've built something, you now have an informed opinion.</p>

<p>""Wait,"" you say.  ""To do step 1 I had to pick a framework.""  True.  Step 1, however, contains decisions you're allowed to revoke.  Pick the wrong framework for step 1 has no long-term bad effects.  It was just learning.</p>

<p>Third, with your strategic framework, and some experience, break down your existing site into pieces you can build with your new framework.   Prioritize those pieces from most important to least important.  </p>

<p><strong>DO NOT</strong> plan the entire conversion as one massive project.  It never works.  It makes a big job more complex than necessary.</p>

<p>We'll use Django as the example framework.  You'll have templates, view functions, model definitions, URL mapping and other details.</p>

<p>For each build, do the following:</p>

<ol>
<li><p>Convert your existing model to a Django model.  This won't ever fit your legacy SQL.  You'll have to rethink your model, fix old mistakes, correct old bugs that you've always wanted to correct.</p></li>
<li><p>Write unit tests.</p></li>
<li><p>Build a conversion utility to export old data and import into the new model.</p></li>
<li><p>Build Django admin pages to touch and feel the new data.</p></li>
<li><p>Pick representative pages and rework them into the appropriate templates.  You might make use of some legacy JSP pages.  However, don't waste too much time with this.  Use the HTML to create Django templates.</p></li>
<li><p>Plan your URL's and view functions.  Sometimes, these view functions will leverage legacy action classes.  Don't ""convert"".  Rewrite from scratch.  Use your new language and framework.</p></li>
</ol>

<p>The only thing that's worth preserving is the data and the operational concept.  Don't try to preserve or convert the code.  It's misleading.  You might convert unittests from JUnit to Python unittest.  </p>

<p><hr /></p>

<p>I gave this advice a few months ago.  I had to do some coaching and review during the processing.  The revised site is up and running.  No conversion from the old technology; they did the suggested rewrite from scratch.  Developer happy.  Site works well.</p>
"
335464,"<p>You could simply use sys.modules to test if a module has been imported (I'm using unicodedata as an example):</p>

<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; 'unicodedata' in sys.modules
False
&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; 'unicodedata' in sys.modules
True
</code></pre>
"
88344,"<p>I have two files. <code>settings_base.py</code> which contains common/default settings, and which is checked into source control. Each deployment has a separate <code>settings.py</code>, which executes <code>from settings_base import *</code> at the beginning and then overrides as needed.</p>
"
111974,"<pre><code>bounds = self.canvas.bbox(myText)  # returns a tuple like (x1, y1, x2, y2)
width = bounds[2] - bounds[0]
height = bounds[3] - bounds[1]
</code></pre>

<p>See the <a href=""http://infohost.nmt.edu/tcc/help/pubs/tkinter/canvas-methods.html"">TkInter reference</a>.</p>
"
89304,"<p>os.system is OK, but kind of dated.  It's also not very secure.  Instead, try subprocess.  subprocess does not call sh directly and is therefore more secure than os.system.</p>

<p>Get more information at <a href=""https://docs.python.org/library/subprocess.html"" rel=""nofollow"">https://docs.python.org/library/subprocess.html</a></p>
"
111091,"<p>You haven't said very much about your specific use case or needs.  In particular, it would be helpful to know what you need to do with the change information (how long do you need to store it?).  If you only need to store it for transient purposes, @S.Lott's session solution may be best.  If you want a full audit trail of all changes to your objects stored in the DB, try this <a href=""http://code.djangoproject.com/wiki/AuditTrail"">AuditTrail solution</a>.</p>

<p><strong>UPDATE</strong>: The AuditTrail code I linked to above is the closest I've seen to a full solution that would work for your case, though it has some limitations (doesn't work at all for ManyToMany fields).  It will store all previous versions of your objects in the DB, so the admin could roll back to any previous version.  You'd have to work with it a bit if you want the change to not take effect until approved.</p>

<p>You could also build a custom solution based on something like @Armin Ronacher's DiffingMixin.  You'd store the diff dictionary (maybe pickled?) in a table for the admin to review later and apply if desired (you'd need to write the code to take the diff dictionary and apply it to an instance).</p>
"
250786,"<p>You might be interested in trying <a href=""http://www.noah.org/wiki/Pexpect"">Pexpect</a> (<a href=""http://sourceforge.net/projects/pexpect/"">SourceForge project</a>).  This would allow you to deal with interactive prompts for your password.</p>

<p>Here's a snip of example usage (for ftp) from the main website:</p>

<pre>
   # This connects to the openbsd ftp site and
   # downloads the recursive directory listing.
   import pexpect
   child = pexpect.spawn ('ftp ftp.openbsd.org')
   child.expect ('Name .*: ')
   child.sendline ('anonymous')
   child.expect ('Password:')
   child.sendline ('noah@example.com')
   child.expect ('ftp> ')
   child.sendline ('cd pub')
   child.expect('ftp> ')
   child.sendline ('get ls-lR.gz')
   child.expect('ftp> ')
   child.sendline ('bye')
</pre>
"
250684,"<p>There are a few subtleties that may or may not be issues for you, such as handling of tabs (Eg. if you're displaying them as 8 spaces, but treating them as 1 character internally), handling various flavours of breaking and non-breaking whitespace, or allowing breaking on hyphenation etc.  If any of this is desirable, you may want to take a look at the textwrap module.  eg:</p>

<pre><code>def truncate(text, max_size):
    if len(text) &lt;= max_size:
        return text
    return textwrap.wrap(text, max_size-3)[0] + ""...""
</code></pre>

<p>The default behaviour for words greater than max_size is to break them (making max_size a hard limit).  You can change to the soft limit used by some of the other solutions here by passing break_long_words=False to wrap(), in which case it will return the whole word.  If you want this behaviour change the last line to:</p>

<pre><code>    lines = textwrap.wrap(text, max_size-3, break_long_words=False)
    return lines[0] + (""..."" if len(lines)&gt;1 else """")
</code></pre>

<p>There are a few other options like expand_tabs that may be of interest depending on the exact behaviour you want.</p>
"
349197,"<pre><code>'function(%s)' % ', '.join(args)
</code></pre>

<p>produces</p>

<pre><code>'function(a, b, c, d)'
</code></pre>
"
224274,"<p>.pyd's and .DLL's are different here, in that a .pyd ought to be automatically found by modulefinder and so included (as long as you have the appropriate ""import"" statement) without needing to do anything.  If one is missed, you do the same thing as if a .py file was missed (they're both just modules): use the ""include"" option for the py2exe options.</p>

<p>Modulefinder will not necessarily find dependencies on .DLLs (py2exe can detect some), so you may need to explicitly include these, with the 'data_files' option.</p>

<p>For example, where you had two .DLL's ('foo.dll' and 'bar.dll') to include, and three .pyd's ('module1.pyd', 'module2.pyd', and 'module3.pyd') to include:</p>

<pre><code>setup(name='App',
      # other options,
      data_files=[('.', 'foo.dll'), ('.', 'bar.dll')],
      options = {""py2exe"" : {""includes"" : ""module1,module2,module3""}}
     )
</code></pre>
"
224344,"<p>With Perl, you can use <a href=""http://search.cpan.org/perldoc?Parse::RecDescent"" rel=""nofollow"">Parse::RecDescent</a></p>

<p>It is simple, and your grammar will be maintainable later on.</p>
"
175258,"<p><em>I think this is a deeper issue than you realize</em>. Simply changing the file from Unicode into ASCII is easy, however, getting all of the Unicode characters to translate into reasonable ASCII counterparts (many letters are not available in both encodings) is another.</p>

<p>This Python Unicode tutorial may give you a better idea of what happens to Unicode strings that are translated to ASCII: <a href=""http://www.reportlab.com/i18n/python_unicode_tutorial.html"" rel=""nofollow"">http://www.reportlab.com/i18n/python_unicode_tutorial.html</a></p>

<p><strong>Here's a useful quote from the site:</strong></p>

<blockquote>
  <p>Python 1.6 also gets a ""unicode""
  built-in function, to which you can
  specify the encoding:</p>
</blockquote>

<pre><code>&gt; &gt;&gt;&gt; unicode('hello') u'hello'
&gt; &gt;&gt;&gt; unicode('hello', 'ascii') u'hello'
&gt; &gt;&gt;&gt; unicode('hello', 'iso-8859-1') u'hello'
&gt; &gt;&gt;&gt;
</code></pre>

<blockquote>
  <p>All three of these return the same
  thing, since the characters in 'Hello'
  are common to all three encodings.</p>
  
  <p>Now let's encode something with a
  European accent, which is outside of
  ASCII. What you see at a console may
  depend on your operating system
  locale; Windows lets me type in
  ISO-Latin-1.</p>
</blockquote>

<pre><code>&gt; &gt;&gt;&gt; a = unicode('AndrÃ©','latin-1')
&gt; &gt;&gt;&gt; a u'Andr\202'
</code></pre>

<blockquote>
  <p>If you can't type an acute letter e,
  you can enter the string 'Andr\202',
  which is unambiguous.</p>
  
  <p>Unicode supports all the common
  operations such as iteration and
  splitting. We won't run over them
  here.</p>
</blockquote>
"
95676,"<p>I like top-level exception handlers in general (regardless of language). They're a great place to cleanup resources that may not be immediately related to resources consumed inside the method that throws the exception.</p>

<p>It's also a fantastic place to <strong>log</strong> those exceptions if you have such a framework in place. Top-level handlers will catch those bizarre exceptions you didn't plan on and let you correct them in the future, otherwise, you may never know about them at all.</p>

<p>Just be careful that your top-level handler doesn't throw exceptions!</p>
"
128522,"<p>The first variant is indeed more efficient than the second when the function is called either zero or one times.  With the second and subsequent invocations, however, the ""import every call"" approach is actually less efficient.  See <a href=""http://wiki.python.org/moin/PythonSpeed/PerformanceTips#head-c849d5d5d94bc3eacbff9d5746af4083443cf2ca"">this link</a> for a lazy-loading technique that combines the best of both approaches by doing a ""lazy import"".</p>

<p>But there are reasons other than efficiency why you might prefer one over the other.  One approach is makes it much more clear to someone reading the code as to the dependencies that this module has.  They also have very different failure characteristics -- the first will fail at load time if there's no ""datetime"" module while the second won't fail until the method is called.</p>

<p><strong>Added Note:</strong> In IronPython, imports can be quite a bit more expensive than in CPython because the code is basically being compiled as it's being imported.</p>
"
210234,"<p>If you need to transform keys or values before creating a dictionary then a <a href=""http://docs.python.org/ref/genexpr.html"">generator expression</a> could be used. Example:</p>

<pre><code>&gt;&gt;&gt; adict = dict((str(k), v) for k, v in zip(['a', 1, 'b'], [2, 'c', 3]))
</code></pre>

<p>Take a look <a href=""http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"">Code Like a Pythonista: Idiomatic Python</a>.</p>
"
98703,"<p>Wrap your connection class.</p>

<p>Set a limit on how many connections you make.
Return an unused connection.
Intercept close to free the connection.</p>

<p>Update:
I put something like this in dbpool.py:</p>

<pre><code>import sqlalchemy.pool as pool
import MySQLdb as mysql
mysql = pool.manage(mysql)
</code></pre>
"
20848,"<p><a href=""https://docs.python.org/2/library/os.html#os.lstat"" rel=""nofollow"">os.lstat()</a> may be helpful. If lstat() succeeds and stat() fails, then it's probably a broken link.</p>
"
329518,"<p>run</p>

<pre><code>pydoc -p 8080
</code></pre>

<p>and point your browser to <a href=""http://localhost:8080/"">http://localhost:8080/</a></p>

<p>You'll see everything that's installed and can spend lots of time discovering new things.  :)</p>
"
43783,"<p>The result of the modulus operation on negatives seems to be programming language dependent and here is a listing <a href=""http://en.wikipedia.org/wiki/Modulo_operation"">http://en.wikipedia.org/wiki/Modulo_operation</a></p>
"
347549,"<pre><code>import math

def next_multiple(x, y):
    return math.ceil(x/y)*y

def try_it(x, y):
    print x, y, next_multiple(x, y)

for x, y in [
    (1.002, 0.1),
    (0.348, 0.1),
    (0.50, 1),
    (0.32, 0.05)
    ]:
    try_it(x, y)
</code></pre>

<p>produces:</p>

<pre><code>1.002 0.1 1.1
0.348 0.1 0.4
0.5 1 1.0
0.32 0.05 0.35
</code></pre>

<p>I think your first example output is wrong, The correct answer for x' is 1.1, right?</p>
"
220857,"<p>General answer: you need to preprocess your source files. </p>

<p>More specific answer: install <a href=""http://pypi.python.org/pypi/EasyExtend"">EasyExtend</a>, and go through following steps</p>

<p>i) Create a new langlet ( extension language )</p>

<pre><code>import EasyExtend
EasyExtend.new_langlet(""mystmts"", prompt = ""my&gt; "", source_ext = ""mypy"")
</code></pre>

<p>Without additional specification a bunch of files shall be created under EasyExtend/langlets/mystmts/ .</p>

<p>ii) Open mystmts/parsedef/Grammar.ext and add following lines</p>

<pre><code>small_stmt: (expr_stmt | print_stmt  | del_stmt | pass_stmt | flow_stmt |
             import_stmt | global_stmt | exec_stmt | assert_stmt | my_stmt )

my_stmt: 'mystatement' expr
</code></pre>

<p>This is sufficient to define the syntax of your new statement. The small_stmt non-terminal is part of the Python grammar and it's the place where the new statement is hooked in. The parser will now recognize the new statement i.e. a source file containing it will be parsed. The compiler will reject it though because it still has to be transformed into valid Python.</p>

<p>iii) Now one has to add semantics of the statement. For this one has to edit
 msytmts/langlet.py and add a my_stmt node visitor.</p>

<pre><code> def call_my_stmt(expression):
     ""defines behaviour for my_stmt""
     print ""my stmt called with"", expression

 class LangletTransformer(Transformer):
       @transform
       def my_stmt(self, node):
           _expr = find_node(node, symbol.expr)
           return any_stmt(CST_CallFunc(""call_my_stmt"", [_expr]))

 __publish__ = [""call_my_stmt""]
</code></pre>

<p>iv) cd to langlets/mystmts and type</p>

<pre><code>python run_mystmts.py
</code></pre>

<p>Now a session shall be started and the newly defined statement can be used:</p>

<pre><code>__________________________________________________________________________________

 mystmts

 On Python 2.5.1 (r251:54863, Apr 18 2007, 08:51:08) [MSC v.1310 32 bit (Intel)]
 __________________________________________________________________________________

 my&gt; mystatement 40+2
 my stmt called with 42
</code></pre>

<p>Quite a few steps to come to a trivial statement, right? There isn't an API yet that lets one define simple things without having to care about grammars. But EE is very reliable modulo some bugs. So it's just a matter of time that an API emerges that lets programmers define convenient stuff like infix operators or small statements using just convenient OO programming. For more complex things like embedding whole languages in Python by means of building a langlet there is no way of going around a full grammar approach.</p>
"
195124,"<p>The <a href=""http://gmplib.org"">GMP</a> library is one of the best arbitrary precision math libraries around, and there is a Python binding available at <a href=""http://www.aleax.it/gmpy.html"">GMPY</a>. I would try that method.</p>
"
182953,"<p>Well after a bit of hacking of Tim Golden's script, I have the following which seems to work quite well:</p>

<pre><code>import os

import win32file
import win32con

path_to_watch = ""."" # look at the current directory
file_to_watch = ""test.txt"" # look for changes to a file called test.txt

def ProcessNewData( newData ):
    print ""Text added: %s""%newData

# Set up the bits we'll need for output
ACTIONS = {
  1 : ""Created"",
  2 : ""Deleted"",
  3 : ""Updated"",
  4 : ""Renamed from something"",
  5 : ""Renamed to something""
}
FILE_LIST_DIRECTORY = 0x0001
hDir = win32file.CreateFile (
  path_to_watch,
  FILE_LIST_DIRECTORY,
  win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE,
  None,
  win32con.OPEN_EXISTING,
  win32con.FILE_FLAG_BACKUP_SEMANTICS,
  None
)

# Open the file we're interested in
a = open(file_to_watch, ""r"")

# Throw away any exising log data
a.read()

# Wait for new data and call ProcessNewData for each new chunk that's written
while 1:
  # Wait for a change to occur
  results = win32file.ReadDirectoryChangesW (
    hDir,
    1024,
    False,
    win32con.FILE_NOTIFY_CHANGE_LAST_WRITE,
    None,
    None
  )

  # For each change, check to see if it's updating the file we're interested in
  for action, file in results:
    full_filename = os.path.join (path_to_watch, file)
    #print file, ACTIONS.get (action, ""Unknown"")
    if file == file_to_watch:
        newText = a.read()
        if newText != """":
            ProcessNewData( newText )
</code></pre>

<p>It could probably do with a load more error checking, but for simply watching a log file and doing some processing on it before spitting it out to the screen, this works well.</p>

<p>Thanks everyone for your input - great stuff!</p>
"
242175,"<p>You can use <code>ctypes</code> to do this pretty simply:</p>

<pre><code>&gt;&gt;&gt; from ctypes import CDLL, c_char_p
&gt;&gt;&gt; getenv = CDLL(""libc.so.6"").getenv
&gt;&gt;&gt; getenv.restype = c_char_p
&gt;&gt;&gt; getenv(""HOME"")
'/home/glyph'
</code></pre>
"
209915,"<p>Here is a full-working version of the code that was very supplied by ephemient <a href=""http://stackoverflow.com/questions/187621/how-to-make-a-python-command-line-program-autocomplete-arbitrary-things-not-int#187660"">here</a> (thank you).</p>

<pre><code>import readline

addrs = ['angela@domain.com', 'michael@domain.com', 'david@test.com']

def completer(text, state):
    options = [x for x in addrs if x.startswith(text)]
    try:
        return options[state]
    except IndexError:
        return None

readline.set_completer(completer)
readline.parse_and_bind(""tab: complete"")

while 1:
    a = raw_input(""&gt; "")
    print ""You entered"", a
</code></pre>
"
163202,"<p>If you only want the file name itself, assuming that there's no query variables at the end like <a href=""http://example.com/somedir/somefile.zip?foo=bar"">http://example.com/somedir/somefile.zip?foo=bar</a> then you can use os.path.basename for this: </p>

<pre><code>[user@host]$ python
Python 2.5.1 (r251:54869, Apr 18 2007, 22:08:04) 
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.basename(""http://example.com/somefile.zip"")
'somefile.zip'
&gt;&gt;&gt; os.path.basename(""http://example.com/somedir/somefile.zip"")
'somefile.zip'
&gt;&gt;&gt; os.path.basename(""http://example.com/somedir/somefile.zip?foo=bar"")
'somefile.zip?foo=bar'
</code></pre>

<p>Some other posters mentioned using urlparse, which will work, but you'd still need to strip the leading directory from the file name. If you use os.path.basename() then you don't have to worry about that, since it returns only the final part of the URL or file path.</p>
"
209503,"<p>I'm not sure I understand the problem.  You could use readline.clear_history and readline.add_history to set up the completable strings you want, then control-r to search backword in the history (just as if you were at a shell prompt).  For example:</p>

<pre><code>#!/usr/bin/env python

import readline

readline.clear_history()
readline.add_history('foo')
readline.add_history('bar')

while 1:
    print raw_input('&gt; ')
</code></pre>

<p>Alternatively, you could write your own completer version and bind the appropriate key to it.  This version uses caching in case your match list is huge:</p>

<pre><code>#!/usr/bin/env python

import readline

values = ['Paul Eden &lt;paul@domain.com&gt;', 
          'Eden Jones &lt;ejones@domain.com&gt;', 
          'Somebody Else &lt;somebody@domain.com&gt;']
completions = {}

def completer(text, state):
    try:
        matches = completions[text]
    except KeyError:
        matches = [value for value in values
                   if text.upper() in value.upper()]
        completions[text] = matches
    try:
        return matches[state]
    except IndexError:
        return None

readline.set_completer(completer)
readline.parse_and_bind('tab: menu-complete')

while 1:
    a = raw_input('&gt; ')
    print 'said:', a
</code></pre>
"
95549,"<blockquote>
  <p>range creates a list, so if you do range(1, 10000000) it creates a list in memory with 10000000 elements.
  xrange is a generator, so it evaluates lazily.</p>
</blockquote>

<p>This brings you two advantages:</p>

<ol>
<li>You can iterate longer lists without getting a <code>MemoryError</code>.</li>
<li>As it resolves each number lazily, if you stop iteration early, you won't waste time creating the whole list.</li>
</ol>
"
202941,"<p>I think Django has some of the best documentation of any project I've worked on. That's the reason we chose it over Turbogears two years ago, and it's been the best technology choice we've made.</p>
"
335105,"<p>You mean something like this?</p>

<pre><code>import os
for path, dirs, files in os.walk( root ):
    for f in files:
        print path, f, os.path.getsize( os.path.join( path, f ) )
</code></pre>
"
70869,"<p>Careful not to use the <code>input</code> function, unless you know what you're doing. Unlike <code>raw_input</code>, <code>input</code> will accept any python expression, so it's kinda like <code>eval</code></p>
"
70583,"<p>Its just one of those language design choices. On some level they are justified. They make it so you need to go pretty far out of your way to try and call the method, and if you really need it that badly, you must have a pretty good reason! Debugging hooks and testing come to mind as possible applications, used responsibly of course.</p>
"
175038,"<p>Simple example:</p>

<pre><code>import os
chidren = []
for job in jobs:
    child = os.fork()
    if child:
        children.append(child)
    else:
        pass  # really should exec the job
for child in children:
    os.waitpid(child, 0)
</code></pre>

<p>Timing out a slow child is a little more work; you can use <code>wait</code> instead of <code>waitpid</code>, and cull the returned values from the list of children, instead of waiting on each one in turn (as here).  If you set up an <code>alarm</code> with a <code>SIGALRM</code> handler, you can terminate the waiting after a specified delay.  This is all standard UNIX stuff, not Python-specific...</p>
"
337285,"<pre><code>from itertools import takewhile
usefullines = takewhile(lambda x: not re.search(stopterm, x), lines)

from itertools import takewhile
usefullines = takewhile(lambda x: stopterm not in x, lines)
</code></pre>

<p>Here's a way that keeps the stopterm line:</p>

<pre><code>def useful_lines(lines, stopterm):
    for line in lines:
        if stopterm in line:
            yield line
            break
        yield line

usefullines = useful_lines(lines, stopterm)
# or...
for line in useful_lines(lines, stopterm):
    # ... do stuff
    pass
</code></pre>
"
67743,"<p>You can also define signals inside the class definition:</p>

<pre><code>class MyGObjectClass(gobject.GObject):
    __gsignals__ = {
      ""some-signal"": (gobject.SIGNAL_RUN_FIRST, gobject.TYPE_NONE, (object, )),
    }
</code></pre>

<p>The contents of the tuple are the the same as the three last arguments to <code>gobject.signal_new</code>.</p>
"
147768,"<p>Create a new launch configuration (Python Run)</p>

<p><strong>Main tab</strong></p>

<p>Use paster-script.py as main module (you can find it in the Scripts sub-directory in your python installation directory)</p>

<p>Don't forget to add the root folder of your application in the PYTHONPATH zone</p>

<p><strong>Arguments</strong>
Set the base directory to the root folder also.</p>

<p>As Program Arguments use ""serve development.ini"" (or whatever you use to debug your app"")</p>

<p><strong>Common Tab</strong></p>

<p>Check allocate console and launch in background</p>
"
246628,"<p>A bezier curve isn't that hard to draw yourself. Given three points <code>A</code>, <code>B</code>, <code>C</code> you require three linear interpolations in order to draw the curve. We use the scalar <code>t</code> as the parameter for the linear interpolation:</p>

<pre><code>P0 = A * t + (1 - t) * B
P1 = B * t + (1 - t) * C
</code></pre>

<p>This interpolates between two edges we've created, edge AB and edge BC. The only thing we now have to do to calculate the point we have to draw is interpolate between P0 and P1 using the same t like so:</p>

<pre><code>Pfinal = P0 * t + (1 - t) * P1
</code></pre>

<p>There are a couple of things that need to be done before we actually draw the curve. First off we have will walk some <code>dt</code> (delta t) and we need to be aware that <code>0 &lt;= t &lt;= 1</code>. As you might be able to imagine, this will not give us a smooth curve, instead it yields only a discrete set of positions at which to plot. The easiest way to solve this is to simply draw a line between the current point and the previous point.</p>
"
156949,"<p>You could split them up with shlex.split(), which can handle the quoted values you have, and pretty easily parse this with a very simple regular expression. Or, you can just use regular expressions for both splitting and parsing. Or simply use split().</p>

<pre><code>args = {}
for arg in shlex.split(cmdln_args):
    key, value = arg.split('=', 1)
    args[key] = value
</code></pre>
"
111364,"<p>Django is currently sending all columns to the database, even if you just changed one.  To change this, some changes in the database system would be necessary.  This could be easily implemented on the existing code by adding a set of dirty fields to the model and adding column names to it, each time you <code>__set__</code> a column value.</p>

<p>If you need that feature, I would suggest you look at the Django ORM, implement it and put a patch into the Django trac.  It should be very easy to add that and it would help other users too.  When you do that, add a hook that is called each time a column is set.</p>

<p>If you don't want to hack on Django itself, you could copy the dict on object creation and diff it.</p>

<p>Maybe with a mixin like this:</p>

<pre><code>class DiffingMixin(object):

    def __init__(self, *args, **kwargs):
        super(DiffingMixin, self).__init__(*args, **kwargs)
        self._original_state = dict(self.__dict__)

    def get_changed_columns(self):
        missing = object()
        result = {}
        for key, value in self._original_state.iteritems():
            if key != self.__dict__.get(key, missing):
                result[key] = value
        return result

 class MyModel(DiffingMixin, models.Model):
     pass
</code></pre>

<p>This code is untested but should work.  When you call <code>model.get_changed_columns()</code> you get a dict of all changed values.  This of course won't work for mutable objects in columns because the original state is a flat copy of the dict.</p>
"
10129,"<p>This will do what you want:</p>

<pre><code>signum = status &amp; 0xff
exitstatus = (status &amp; 0xff00) &gt;&gt; 8
</code></pre>
"
112559,"<p>Use a <a href=""http://en.wikipedia.org/wiki/Trie"">trie</a>.</p>

<p>Add your list of words to a trie. Each path from the root to a leaf is a valid word. A path from a root to an intermediate node represents a prefix, and the children of the intermediate node are valid completions for the prefix.</p>
"
88394,"<p>You vaguely mention ""a way to get a more accurate centroid"".  Maybe you're talking about a centroid that isn't affected by outliers.  For example, the <i>average</i> household income in the USA is probably very high, because a small number of <i>very</i> rich people skew the average; they are the ""outliers"".  For that reason, statisticians use the <i>median</i> instead.  One way to obtain the median is to sort the values, then pick the value halfway down the list.
<p>
Maybe you're looking for something like this, but for 2D or 3D points.  The problem is, in 2D and higher, you can't sort.  There's no natural order.  Nevertheless, there are ways to get rid of outliers.
<p>
One way is to find the <a href=""http://en.wikipedia.org/wiki/Convex_hull"">convex hull</a> of the points.  The convex hull has all the points on the ""outside"" of the set of points.  If you do this, and throw out the points that are on the hull, you'll be throwing out the outliers, and the points that remain will give a more ""representative"" centroid.  You can even repeat this process several times, and the result is kind like peeling an onion.  In fact, it's called ""convex hull peeling"".
<p></p>
"
61168,"<p>I don't believe there is an established ""best practice"".</p>

<p>I put my tests in another directory outside of the app code. I then add the main app directory to sys.path (allowing you to import the modules from anywhere) in my test runner script (which does some other stuff as well) before running all the tests. This way I never have to remove the tests directory from the main code when I release it, saving me time and effort, if an ever so tiny amount.</p>
"
237093,"<p><code>os.stat</code> returns a named tuple with <code>st_mtime</code> and <code>st_ctime</code> attributes. The modification time is <code>st_mtime</code> on both platforms; unfortunately, on Windows, <code>ctime</code> means ""creation time"", whereas on POSIX it means ""change time"". I'm not aware of any way to get the creation time on POSIX platforms.</p>
"
124357,"<p>The better regex implementation of perl is one part of the story. That can't explain however why the perl implementation scales better. The difference become bigger with more processors. For some reason the python implementation has an issue there.</p>
"
220366,"<p>Here is something I think will work for what you want, using a decorator.</p>

<pre><code>class LogWrappedFunction(object):
    def __init__(self, function):
        self.function = function

    def logAndCall(self, *arguments, **namedArguments):
        print ""Calling %s with arguments %s and named arguments %s"" %\
                      (self.function.func_name, arguments, namedArguments)
        self.function.__call__(*arguments, **namedArguments)

def logwrap(function):
    return LogWrappedFunction(function).logAndCall

@logwrap
def doSomething(spam, eggs, foo, bar):
    print ""Doing something totally awesome with %s and %s."" % (spam, eggs)


doSomething(""beans"",""rice"", foo=""wiggity"", bar=""wack"")
</code></pre>

<p>Run it, it will yield the following output:</p>

<pre><code>C:\scripts&gt;python decoratorExample.py
Calling doSomething with arguments ('beans', 'rice') and named arguments {'foo':
 'wiggity', 'bar': 'wack'}
Doing something totally awesome with beans and rice.
</code></pre>
"
158753,"<p>If you create a dictionary.py module, containing code which reads the file and builds a dictionary, this code will only be executed the first time it is imported. Further imports will return a reference to the existing module instance. As such, your classes can:</p>

<pre><code>import dictionary

dictionary.words[whatever]
</code></pre>

<p>where dictionary.py has:</p>

<pre><code>words = {}

# read file and add to 'words'
</code></pre>
"
199179,"<p>As codeape explains, it's not possible to document general data members.</p>

<p>However, it <em>is</em> possible to document <code>property</code> data members:</p>

<pre><code>class Foo:
  def get_foo(self): ...

  def set_foo(self, val): ...

  def del_foo(self): ...

  foo = property(get_foo, set_foo, del_foo, '''Doc string here''')
</code></pre>

<p>This will give a docstring to the <code>foo</code> attribute, obviously.</p>
"
312317,"<p>You will have to enable IMAP access to your GMail account (Settings â Forwarding and POP/IMAP), and then use <code>imaplib.IMAP4_SSL</code> to access it. </p>

<p>Use the raw text of every message as an argument to <code>email.message_from_string</code> in order to process any attachments.</p>
"
287987,"<p>If you are programming a game perhaps you would like to change the background color and use only spaces? For example:</p>

<pre><code>print "" ""+ ""\033[01;41m"" + "" "" +""\033[01;46m""  + ""  "" + ""\033[01;42m""
</code></pre>
"
273206,"<p>Try the <a href=""https://docs.python.org/2/library/os.path.html#os.path.exists""><code>os.path.exists</code></a> function</p>

<pre><code>if not os.path.exists(dir):
    os.mkdir(dir)
</code></pre>
"
114449,"<p>I have added a <a href=""http://code.google.com/p/gaeunit/source/browse/#svn/trunk/sample_app"">sample application</a> to the GAEUnit project which demonstrates how to write and execute a web test using GAEUnit.  The sample includes a slightly modified version of the '<a href=""http://pythonpaste.org/webtest/index.html"">webtest</a>' module ('import webbrowser' is commented out, as recommended by David Coffin).</p>

<p>Here's the 'web_tests.py' file from the sample application 'test' directory:</p>

<pre><code>import unittest
from webtest import TestApp
from google.appengine.ext import webapp
import index

class IndexTest(unittest.TestCase):

  def setUp(self):
    self.application = webapp.WSGIApplication([('/', index.IndexHandler)], debug=True)

  def test_default_page(self):
    app = TestApp(self.application)
    response = app.get('/')
    self.assertEqual('200 OK', response.status)
    self.assertTrue('Hello, World!' in response)

  def test_page_with_param(self):
    app = TestApp(self.application)
    response = app.get('/?name=Bob')
    self.assertEqual('200 OK', response.status)
    self.assertTrue('Hello, Bob!' in response)
</code></pre>
"
114232,"<p>When you call a class member, Python automatically uses a reference to the object as the first parameter. The variable <code>self</code> actually means nothing, it's just a coding convention. You could call it <code>gargaloo</code> if you wanted. That said, the call to <code>method_two</code> would raise a <code>TypeError</code>, because Python is automatically trying to pass a parameter (the reference to its parent object) to a method that was defined as having no parameters.</p>

<p>To actually make it work, you could append this to your class definition:</p>

<pre><code>method_two = staticmethod(method_two)
</code></pre>

<p>or you could use the <code>@staticmethod</code> <a href=""https://docs.python.org/2/library/functions.html#staticmethod"" rel=""nofollow"">function decorator</a>.</p>
"
291733,"<p>If you put most of the code into a module, you could have the main file (which is the one that is run) check the update location, and automatically download the most recent version and install that, before the module is imported.</p>

<p>That way you wouldn't have to have a restart of the application to run the most recent version, just reimport the module.  </p>

<pre><code># Check version of module
import module

# Check update address
if update_version &gt; module.version:
    download(update_module)
    import module
    reload(module)

module.main()
</code></pre>

<p>You can use the reload() function to force a module to reload it's data.  Note there are some caveats to this: objects created using classes in this module will not be magically updated to the new version, and ""from module import stuff"" before the reimport may result in ""stuff"" referring to the old object ""module.stuff"".</p>

<p>[Clearly, I didn't read the previous post clearly enough - it does exactly what I suggest!]</p>
"
245072,"<p>I couldn't find one either.  Strange!</p>

<p>Luckily, the number of Unicode blocks is quite manageably small.</p>

<p>This implementation accepts a one-character Unicode string, just like the functions in <code>unicodedata</code>.  If your inputs are mostly ASCII, this linear search might even be faster than binary search using <code>bisect</code> or whatever.  If I were submitting this for inclusion in the Python standard library, I'd probably write it as a binary search through an array of statically-initialized <code>struct</code>s in C.</p>

<pre><code>def block(ch):
  '''
  Return the Unicode block name for ch, or None if ch has no block.

  &gt;&gt;&gt; block(u'a')
  'Basic Latin'
  &gt;&gt;&gt; block(unichr(0x0b80))
  'Tamil'
  &gt;&gt;&gt; block(unichr(0xe0080))

  '''

  assert isinstance(ch, unicode) and len(ch) == 1, repr(ch)
  cp = ord(ch)
  for start, end, name in _blocks:
    if start &lt;= cp &lt;= end:
      return name

def _initBlocks(text):
  global _blocks
  _blocks = []
  import re
  pattern = re.compile(r'([0-9A-F]+)\.\.([0-9A-F]+);\ (\S.*\S)')
  for line in text.splitlines():
    m = pattern.match(line)
    if m:
      start, end, name = m.groups()
      _blocks.append((int(start, 16), int(end, 16), name))

# retrieved from http://unicode.org/Public/UNIDATA/Blocks.txt
_initBlocks('''
# Blocks-5.1.0.txt
# Date: 2008-03-20, 17:41:00 PDT [KW]
#
# Unicode Character Database
# Copyright (c) 1991-2008 Unicode, Inc.
# For terms of use, see http://www.unicode.org/terms_of_use.html
# For documentation, see UCD.html
#
# Note:   The casing of block names is not normative.
#         For example, ""Basic Latin"" and ""BASIC LATIN"" are equivalent.
#
# Format:
# Start Code..End Code; Block Name

# ================================================

# Note:   When comparing block names, casing, whitespace, hyphens,
#         and underbars are ignored.
#         For example, ""Latin Extended-A"" and ""latin extended a"" are equivalent.
#         For more information on the comparison of property values, 
#            see UCD.html.
#
#  All code points not explicitly listed for Block
#  have the value No_Block.

# Property: Block
#
# @missing: 0000..10FFFF; No_Block

0000..007F; Basic Latin
0080..00FF; Latin-1 Supplement
0100..017F; Latin Extended-A
0180..024F; Latin Extended-B
0250..02AF; IPA Extensions
02B0..02FF; Spacing Modifier Letters
0300..036F; Combining Diacritical Marks
0370..03FF; Greek and Coptic
0400..04FF; Cyrillic
0500..052F; Cyrillic Supplement
0530..058F; Armenian
0590..05FF; Hebrew
0600..06FF; Arabic
0700..074F; Syriac
0750..077F; Arabic Supplement
0780..07BF; Thaana
07C0..07FF; NKo
0900..097F; Devanagari
0980..09FF; Bengali
0A00..0A7F; Gurmukhi
0A80..0AFF; Gujarati
0B00..0B7F; Oriya
0B80..0BFF; Tamil
0C00..0C7F; Telugu
0C80..0CFF; Kannada
0D00..0D7F; Malayalam
0D80..0DFF; Sinhala
0E00..0E7F; Thai
0E80..0EFF; Lao
0F00..0FFF; Tibetan
1000..109F; Myanmar
10A0..10FF; Georgian
1100..11FF; Hangul Jamo
1200..137F; Ethiopic
1380..139F; Ethiopic Supplement
13A0..13FF; Cherokee
1400..167F; Unified Canadian Aboriginal Syllabics
1680..169F; Ogham
16A0..16FF; Runic
1700..171F; Tagalog
1720..173F; Hanunoo
1740..175F; Buhid
1760..177F; Tagbanwa
1780..17FF; Khmer
1800..18AF; Mongolian
1900..194F; Limbu
1950..197F; Tai Le
1980..19DF; New Tai Lue
19E0..19FF; Khmer Symbols
1A00..1A1F; Buginese
1B00..1B7F; Balinese
1B80..1BBF; Sundanese
1C00..1C4F; Lepcha
1C50..1C7F; Ol Chiki
1D00..1D7F; Phonetic Extensions
1D80..1DBF; Phonetic Extensions Supplement
1DC0..1DFF; Combining Diacritical Marks Supplement
1E00..1EFF; Latin Extended Additional
1F00..1FFF; Greek Extended
2000..206F; General Punctuation
2070..209F; Superscripts and Subscripts
20A0..20CF; Currency Symbols
20D0..20FF; Combining Diacritical Marks for Symbols
2100..214F; Letterlike Symbols
2150..218F; Number Forms
2190..21FF; Arrows
2200..22FF; Mathematical Operators
2300..23FF; Miscellaneous Technical
2400..243F; Control Pictures
2440..245F; Optical Character Recognition
2460..24FF; Enclosed Alphanumerics
2500..257F; Box Drawing
2580..259F; Block Elements
25A0..25FF; Geometric Shapes
2600..26FF; Miscellaneous Symbols
2700..27BF; Dingbats
27C0..27EF; Miscellaneous Mathematical Symbols-A
27F0..27FF; Supplemental Arrows-A
2800..28FF; Braille Patterns
2900..297F; Supplemental Arrows-B
2980..29FF; Miscellaneous Mathematical Symbols-B
2A00..2AFF; Supplemental Mathematical Operators
2B00..2BFF; Miscellaneous Symbols and Arrows
2C00..2C5F; Glagolitic
2C60..2C7F; Latin Extended-C
2C80..2CFF; Coptic
2D00..2D2F; Georgian Supplement
2D30..2D7F; Tifinagh
2D80..2DDF; Ethiopic Extended
2DE0..2DFF; Cyrillic Extended-A
2E00..2E7F; Supplemental Punctuation
2E80..2EFF; CJK Radicals Supplement
2F00..2FDF; Kangxi Radicals
2FF0..2FFF; Ideographic Description Characters
3000..303F; CJK Symbols and Punctuation
3040..309F; Hiragana
30A0..30FF; Katakana
3100..312F; Bopomofo
3130..318F; Hangul Compatibility Jamo
3190..319F; Kanbun
31A0..31BF; Bopomofo Extended
31C0..31EF; CJK Strokes
31F0..31FF; Katakana Phonetic Extensions
3200..32FF; Enclosed CJK Letters and Months
3300..33FF; CJK Compatibility
3400..4DBF; CJK Unified Ideographs Extension A
4DC0..4DFF; Yijing Hexagram Symbols
4E00..9FFF; CJK Unified Ideographs
A000..A48F; Yi Syllables
A490..A4CF; Yi Radicals
A500..A63F; Vai
A640..A69F; Cyrillic Extended-B
A700..A71F; Modifier Tone Letters
A720..A7FF; Latin Extended-D
A800..A82F; Syloti Nagri
A840..A87F; Phags-pa
A880..A8DF; Saurashtra
A900..A92F; Kayah Li
A930..A95F; Rejang
AA00..AA5F; Cham
AC00..D7AF; Hangul Syllables
D800..DB7F; High Surrogates
DB80..DBFF; High Private Use Surrogates
DC00..DFFF; Low Surrogates
E000..F8FF; Private Use Area
F900..FAFF; CJK Compatibility Ideographs
FB00..FB4F; Alphabetic Presentation Forms
FB50..FDFF; Arabic Presentation Forms-A
FE00..FE0F; Variation Selectors
FE10..FE1F; Vertical Forms
FE20..FE2F; Combining Half Marks
FE30..FE4F; CJK Compatibility Forms
FE50..FE6F; Small Form Variants
FE70..FEFF; Arabic Presentation Forms-B
FF00..FFEF; Halfwidth and Fullwidth Forms
FFF0..FFFF; Specials
10000..1007F; Linear B Syllabary
10080..100FF; Linear B Ideograms
10100..1013F; Aegean Numbers
10140..1018F; Ancient Greek Numbers
10190..101CF; Ancient Symbols
101D0..101FF; Phaistos Disc
10280..1029F; Lycian
102A0..102DF; Carian
10300..1032F; Old Italic
10330..1034F; Gothic
10380..1039F; Ugaritic
103A0..103DF; Old Persian
10400..1044F; Deseret
10450..1047F; Shavian
10480..104AF; Osmanya
10800..1083F; Cypriot Syllabary
10900..1091F; Phoenician
10920..1093F; Lydian
10A00..10A5F; Kharoshthi
12000..123FF; Cuneiform
12400..1247F; Cuneiform Numbers and Punctuation
1D000..1D0FF; Byzantine Musical Symbols
1D100..1D1FF; Musical Symbols
1D200..1D24F; Ancient Greek Musical Notation
1D300..1D35F; Tai Xuan Jing Symbols
1D360..1D37F; Counting Rod Numerals
1D400..1D7FF; Mathematical Alphanumeric Symbols
1F000..1F02F; Mahjong Tiles
1F030..1F09F; Domino Tiles
20000..2A6DF; CJK Unified Ideographs Extension B
2F800..2FA1F; CJK Compatibility Ideographs Supplement
E0000..E007F; Tags
E0100..E01EF; Variation Selectors Supplement
F0000..FFFFF; Supplementary Private Use Area-A
100000..10FFFF; Supplementary Private Use Area-B

# EOF
''')
</code></pre>
"
244304,"<p>[This may come off sounding more negative than it really is.  I'm not saying Basic is the root of all evil, <a href=""http://en.wikiquote.org/wiki/Edsger_Dijkstra"">others have said that</a>.  I'm saying it's a legacy we can afford to leave behind.]</p>

<p><strong>""because it was so easy to understand and so hard to make a mistake""</strong> That's certainly debatable.  I've had some bad experiences with utterly opaque basic.  Professional stuff -- commercial products -- perfectly awful code.  Had to give up and decline the work.</p>

<p><strong>""What, if any, are the advantages Basic has over other languages?""</strong>  None, really.</p>

<p><strong>""Why is it still around?""</strong>  Two reasons: (1) Microsoft, (2) all the IT departments that started doing VB and now have millions of lines of VB legacy code.</p>

<p><strong>""Plenty of other languages are considered dead...""</strong>  Yep.  Basic is there along side COBOL, PL/I and RPG as legacies that sometimes have more cost than value.  But because of the ""if it ain't broke don't fix it"" policy of big IT, there they sit, sucking up resources who could easily replace it with something smaller, simpler and cheaper to maintain.  Except it hasn't ""failed"" -- it's just disproportionately expensive.</p>

<p>30-year old COBOL is a horrible situation to rework.  Starting in 2016 we'll be looking at 30-year old MS Basic that we just can't figure out, don't want to live without, and can't decide how to replace.</p>

<p><strong>""but basic just keeps hanging on""</strong> It appears that some folks love Basic.  Others see it as yet another poorly-designed language; it's advantages are being early to market and being backed by huge vendors (IBM, initially).  Poorly-design, early-to-market only leaves us with a legacy that we'll be suffering with for decades.</p>

<p>I still have my 1965-edition Dartmouth Basic manual.  I don't long for the good old days.</p>
"
323800,"<p>As it has already been answered, I'll simply add a simple demonstration:</p>

<pre><code>&gt;&gt;&gt; a = [1, 2, 3, 4]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; c = a[:]
&gt;&gt;&gt; b[2] = 10
&gt;&gt;&gt; c[3] = 20
&gt;&gt;&gt; a
[1, 2, 10, 4]
&gt;&gt;&gt; b
[1, 2, 10, 4]
&gt;&gt;&gt; c
[1, 2, 3, 20]
</code></pre>
"
227930,"<p>This module contains constants related to Win32 programming.  It is not part of the Python 2.6 release, but should be part of the download of the pywin32 project.</p>

<p><strong>Edit:</strong> I imagine that the executable is an installation program, though the last time I downloaded pywin32 it was just a zip file.</p>
"
68566,"<p>There are a couple of different ways to approach the problem:</p>

<ol>
<li>Wrap command-line programs</li>
<li>use a Python library that provides SSH capabilities (eg - <a href=""http://www.lag.net/paramiko/"">Paramiko</a> or <a href=""http://twistedmatrix.com/trac/wiki/TwistedConch"">Twisted Conch</a>)</li>
</ol>

<p>Each approach has its own quirks. You will need to setup SSH keys to enable password-less logins if you are wrapping system commands like ""ssh"", ""scp"" or ""rsync."" You can embed a password in a script using Paramiko or some other library, but you might find the lack of documentation frustrating, especially if you are not familiar with the basics of the SSH connection (eg - key exchanges, agents, etc). It probably goes without saying that SSH keys are almost always a better idea than passwords for this sort of stuff.</p>

<p>NOTE: its hard to beat rsync if you plan on transferring files via SSH, especially if the alternative is plain old scp.</p>

<p>I've used Paramiko with an eye towards replacing system calls but found myself drawn back to the wrapped commands due to their ease of use and immediate familiarity. You might be different. I gave Conch the once-over some time ago but it didn't appeal to me.</p>

<p>If opting for the system-call path, Python offers an array of options such as os.system or the commands/subprocess modules. I'd go with the subprocess module if using version 2.4+.</p>
"
91572,"<p>If it were not for the dashes and underscores, the easiest solution would be</p>

<pre><code>my_little_string.isalnum()
</code></pre>

<p>(Section <a href=""https://docs.python.org/3/library/stdtypes.html#str.isalnum"" rel=""nofollow"">3.6.1</a> of the Python Library Reference)</p>
"
6161,"<p>Protocol buffers are intended to optimize communications between machines. They are really not intended for human interaction. Also, the format is binary, so it could not replace XML in that use case. </p>

<p>I would also recommend <a href=""http://en.wikipedia.org/wiki/JSON"">JSON</a> as being the most compact text-based format.</p>"
248080,"<p>While the <code>Popen</code> answers are reasonable for the general case, I would recommend <code>win32api</code> for this specific case, if you want to do something useful with it:</p>

<p>It goes something like this:</p>

<pre><code>from win32com.client import Dispatch
xl = Dispatch('Excel.Application')
wb = xl.Workbooks.Open('C:\\Documents and Settings\\GradeBook.xls')
xl.Visible = True    # optional: if you want to see the spreadsheet
</code></pre>

<p>Taken from <a href=""https://mail.python.org/pipermail/python-list/2005-June/315330.html"" rel=""nofollow"">a mailing list post</a> but there are plenty of examples around.</p>
"
204778,"<p><a href=""http://webpy.org/"">web.py</a>?</p>

<p>It's extremely simple, and Python'y. A basic hello-world web-application is..</p>

<pre><code>import web

 urls = (
     '/(.*)', 'hello'
  )

class hello:        
    def GET(self, name):
        i = web.input(times=1)
        if not name: name = 'world'
        for c in range(int(i.times)):
            print 'Hello,', name+'!'

if __name__ == ""__main__"": web.run(urls, globals())
</code></pre>

<p>..that's it.</p>

<p>I found Django forced a <em>lot</em> of it's own conventions and code layout, and I could never remember the middleware/shortcuts imports, and all the other ""magic"" that is pretty much required to write anything. I found it was closer to Ruby on Rails than a Python web-framework.</p>

<p>With web.py, you can write an entire, functioning web-application without using any of web.py's helper modules - the only thing you <em>have</em> to do is <code>import web</code> and setup the URLs, which is rather unavoidable. (the last line in the example runs the development web-server)</p>

<p>It has lots of stuff in it, like an database API, form helpers, a templating engine and so on, but it doesn't force them on you - you could do all your HTML output by <code>print ""Using &lt;b&gt;%s&lt;/b&gt;"" % (""  string formating "".strip())</code> if you wished!</p>

<p>Oh, while I have emphasised the simplicity, web.py is what <a href=""http://reddit.com"">http://reddit.com</a> is written in, so it's also proven very capable/reliable. Also, <a href=""http://www.aaronsw.com/weblog/rewritingreddit"">this post</a> by the web.py author is a very good explanation of why I much prefer web.py over Django</p>
"
204481,"<p>I just tried to measure times:</p>

<pre><code>class Foo(object):
    @classmethod
    def singleton(self):
        if not hasattr(self, 'instance'):
            self.instance = Foo()
        return self.instance



class Bar(object):
    @classmethod
    def singleton(self):
        try:
            return self.instance
        except AttributeError:
            self.instance = Bar()
            return self.instance



from time import time

n = 1000000
foo = [Foo() for i in xrange(0,n)]
bar = [Bar() for i in xrange(0,n)]

print ""Objs created.""
print


for times in xrange(1,4):
    t = time()
    for d in foo: d.singleton()
    print ""#%d Foo pass in %f"" % (times, time()-t)

    t = time()
    for d in bar: d.singleton()
    print ""#%d Bar pass in %f"" % (times, time()-t)

    print
</code></pre>

<p>On my machine:</p>

<pre><code>Objs created.

#1 Foo pass in 1.719000
#1 Bar pass in 1.140000

#2 Foo pass in 1.750000
#2 Bar pass in 1.187000

#3 Foo pass in 1.797000
#3 Bar pass in 1.203000
</code></pre>

<p>It seems that try/except is faster. It seems also more readable to me, anyway depends on the case, this test was very simple maybe you'd need a more complex one.</p>
"
290962,"<p>Form constructor has <code>initial</code> param that allows to provide default values for fields.</p>
"
324648,"<p>Something like this perhaps:</p>

<pre><code>myIndex = {}
for (someId,someVal) in collection:
    myIndex.setdefault(someId, []).append(someVal)
</code></pre>
"
146671,"<p>The first thing that may improve things is to move the re.compile outside the function.  The compilation is cached, but there is a speed hit in checking this to see if its compiled.</p>

<p>Another possibility is to use a single regex as below:</p>

<pre><code>MatchedQuotes = re.compile(r""(['\""])(.*)\1"", re.LOCALE)
item = MatchedQuotes.sub(r'\2', item, 1)
</code></pre>

<p>Finally, you can combine this into the regex in processVariables.  Taking <a href=""http://stackoverflow.com/questions/146607/im-using-python-regexes-in-a-criminally-inefficient-manner#146683"">Torsten Marek's</a> suggestion to use a function for re.sub, this improves and simplifies things dramatically.</p>

<pre><code>VariableDefinition = re.compile(r'&lt;%([""\']?)(.*?)\1=([""\']?)(.*?)\3%&gt;', re.LOCALE)
VarRepl = re.compile(r'&lt;%([""\']?)(.*?)\1%&gt;', re.LOCALE)

def processVariables(item):
    vars = {}
    def findVars(m):
        vars[m.group(2).upper()] = m.group(4)
        return """"

    item = VariableDefinition.sub(findVars, item)
    return VarRepl.sub(lambda m: vars[m.group(2).upper()], item)

print processVariables('&lt;%""TITLE""=""This Is A Test Variable""%&gt;The Web &lt;%""TITLE""%&gt;')
</code></pre>

<p>Here are my timings for 100000 runs:</p>

<pre><code>Original       : 13.637
Global regexes : 12.771
Single regex   :  9.095
Final version  :  1.846
</code></pre>

<p>[Edit] Add missing non-greedy specifier</p>

<p>[Edit2] Added .upper() calls so case insensitive like original version</p>
"
145634,"<p><a href=""http://bazaar-vcs.org/"" rel=""nofollow"">Bazaar</a> contains an alternative difference algorithm, called <a href=""http://bramcohen.livejournal.com/37690.html"" rel=""nofollow"">patience diff</a> (there's more info in the comments on that page) which is claimed to be better than the traditional diff algorithm. The file 'patiencediff.py' in the bazaar distribution is a simple command line front end.</p>
"
225788,"<p>Don't know if it would do : <a href=""http://bitten.edgewall.org/"">Bitten</a> is made by the guys who write Trac and is integrated with Trac. <a href=""http://gump.apache.org/"">Apache Gump</a> is the CI tool used by Apache. It is written in Python.</p>
"
202122,"<p><a href=""http://lxml.de/"">lxml</a> has support for <a href=""http://lxml.de/api.html#cdata"">CDATA</a> and API like ElementTree.</p>
"
230615,"<p>I run into this problem on a regular basis and often use the ""add a method"" solution. However, there are definitely cases where ""add a method"" or ""compute it in the view"" don't work (or don't work well). E.g. when you are caching template fragments and need some non-trivial DB computation to produce it. You don't want to do the DB work unless you need to, but you won't know if you need to until you are deep in the template logic.</p>

<p>Some other possible solutions:</p>

<ol>
<li><p>Use the {% expr &lt;expression> as &lt;var_name> %} template tag found at <a href=""http://www.djangosnippets.org/snippets/9/"">http://www.djangosnippets.org/snippets/9/</a> The expression is any legal Python expression with your template's Context as your local scope.</p></li>
<li><p>Change your template processor. Jinja2 (<a href=""http://jinja.pocoo.org/2/"">http://jinja.pocoo.org/2/</a>) has syntax that is almost identical to the Django template language, but with full Python power available. It's also faster. You can do this wholesale, or you might limit its use to templates that <em>you</em> are working on, but use Django's ""safer"" templates for designer-maintained pages.</p></li>
</ol>
"
294723,"<p>Actually, it looks like there's a better approach using filter:</p>

<pre><code>my_book = Book.objects.get(pk=1)
all_ingredients = Ingredient.objects.filter(recipe__book=my_book)
</code></pre>
"
192086,"<p>Thanks for the replies, it works!</p>

<p>And since the source files are in mixed formats, I added a list of source formats to be tried in sequence (<code>sourceFormats</code>), and on <code>UnicodeDecodeError</code> I try the next format:</p>

<pre><code>from __future__ import with_statement

import os
import sys
import codecs
from chardet.universaldetector import UniversalDetector

targetFormat = 'utf-8'
outputDir = 'converted'
detector = UniversalDetector()

def get_encoding_type(current_file):
    detector.reset()
    for line in file(current_file):
        detector.feed(line)
        if detector.done: break
    detector.close()
    return detector.result['encoding']

def convertFileBestGuess(filename):
   sourceFormats = ['ascii', 'iso-8859-1']
   for format in sourceFormats:
     try:
        with codecs.open(fileName, 'rU', format) as sourceFile:
            writeConversion(sourceFile)
            print('Done.')
            return
      except UnicodeDecodeError:
        pass

def convertFileWithDetection(fileName):
    print(""Converting '"" + fileName + ""'..."")
    format=get_encoding_type(fileName)
    try:
        with codecs.open(fileName, 'rU', format) as sourceFile:
            writeConversion(sourceFile)
            print('Done.')
            return
    except UnicodeDecodeError:
        pass

    print(""Error: failed to convert '"" + fileName + ""'."")


def writeConversion(file):
    with codecs.open(outputDir + '/' + fileName, 'w', targetFormat) as targetFile:
        for line in file:
            targetFile.write(line)

# Off topic: get the file list and call convertFile on each file
# ...
</code></pre>

<p>(EDIT by Rudro Badhon: this incorporates the original try multiple formats until you don't get an exception as well as an alternate approach that uses chardet.universaldetector)</p>
"
295113,"<p>Also, there is the <strong><a href=""https://docs.python.org/2/library/functions.html#globals"" rel=""nofollow"">globals()</a></strong> function in <a href=""http://en.wikipedia.org/wiki/Python_%28programming_language%29"" rel=""nofollow"">Python</a> which returns a dictionary with all the defined variables. You could also use something like this:</p>

<pre><code>print globals()[""myvar""]
</code></pre>
"
261656,"<p>Multidimensional arrays are a little murky.  There are few reasons for using them and many reasons for thinking twice and using something else that more properly reflects what you're doing.  [Hint. your question was thin on context ;-) ]</p>

<p>If you're doing matrix math, then use <code>numpy</code>.</p>

<p>However, some folks have worked with languages that force them to use multi-dimensional arrays because it's all they've got.  If your as old as I am (I started programming in the 70's) then you may remember the days when multidimensional arrays were the only data structure you had.  Or, your experience may have limited you to languages where you had to morph your problem into multi-dimensional arrays.</p>

<p>Say you have a collection <em>n</em> 3D points.  Each point has an x, y, z, and time value.  Is this an <em>n</em> x 4 array?  Or a 4 * <em>n</em> array?  Not really.  </p>

<p>Since each point has 4 fixed values, this is more properly a list of tuples.</p>

<pre><code>a = [ ( x, y, z, t ), ( x, y, z, t ), ... ]
</code></pre>

<p>Better still, we could represent this as a list of objects.</p>

<pre><code>class Point( object ):
    def __init__( self, x, y, z, t ):
        self.x, self.y, self.z, self.t = x, y, z, t

a = [ Point(x,y,x,t), Point(x,y,z,t), ... ]
</code></pre>
"
158221,"<p>How about importing the username and password from a file external to the script? That way even if someone got hold of the script, they wouldn't automatically get the password.</p>
"
346753,"<p>There is no difference on the import, however there is a small difference on access.</p>

<p>When you access the function as</p>

<pre><code>re.findall()
</code></pre>

<p>python will need to first find the module in the global scope and then find findall in modules dict.  May make a difference if you are calling it inside a loop thousands of times.</p>
"
91301,"<p>Logically a lot of things like MIME-encoded mail messages, URLs, XML documents, and so on should be returned as <code>bytes</code> not strings. This could cause some consternation as the libraries start to be nailed down for Python 3 and people discover that they have to be more aware of the <code>bytes</code>/<code>string</code> conversions than they were for <code>str</code>/<code>unicode</code> ...</p>
"
237705,"<p>Using retrlines() probably isn't the best idea there, since it just prints to the console and so you'd have to do tricky things to even get at that output. A likely better bet would be to use the nlst() method, which returns exactly what you want: a list of the file names.</p>
"
243892,"<p>I'd do something like this. This will be most time and space efficient, since you won't have the overhead of zipping objects together. This will also work if both <code>a</code> and <code>b</code> are infinite.</p>

<pre><code>def imerge(a, b):
    i1 = iter(a)
    i2 = iter(b)
    while True:
        try:
            yield i1.next()
            yield i2.next()
        except StopIteration:
            return
</code></pre>
"
118651,"<p>I personally doubt that there currently is at the moment, as a lot of the Python afficionados love the fact that Python is this way, whitespace delimited.</p>

<p>I've never actually thought about that as an accessibility issue however. Maybe it's something to put forward as a bug report to Python?</p>

<p>I'd assume that you use a screen reader here however for the output? So the tabs would seem ""invisible"" to you? With a Braille output, it might be easier to read, but I can understand exactly how confusing this could be.</p>

<p>In fact, this is very interesting to me. I wish that I knew enough to be able to write an app that will do this for you. </p>

<p>I think it's definately something that I'll put in a bug report for, unless you've already done so yourself, or want to.</p>

<p>Edit: Also, as <a href=""http://stackoverflow.com/questions/118643#118656"">noted</a> by <a href=""http://stackoverflow.com/users/3560/john-millikin"">John Millikin</a> There is also <a href=""http://timhatch.com/projects/pybraces/"">PyBraces</a> Which might be a viable solution to you, and may be possible to be hacked together dependant on your coding skills to be exactly what you need (and I hope that if that's the case, you release it out for others like yourself to use)</p>

<p>Edit 2: I've just <a href=""http://bugs.python.org/issue3942"">reported this</a> to the python bug tracker</p>
"
343961,"<p>What I found is the following site: <a href=""http://home.hiwaay.net/~taylorc/toolbox/geography/geoutm.html"" rel=""nofollow"">http://home.hiwaay.net/~taylorc/toolbox/geography/geoutm.html</a>
It has a javascript converter, you should check the algorithm there. From the page:</p>

<blockquote>
  <p>Programmers: The JavaScript source code in this document may be copied and reused without restriction.</p>
</blockquote>
"
55312,"<p>@<a href=""#53549"" rel=""nofollow"">Daren Thomas</a>: I agree, but you should use the <a href=""http://docs.python.org/dev/library/platform.html#platform.python_implementation"" rel=""nofollow"">platform module</a> to determine which interpreter you're running.</p>
"
291707,"<p>Another way to do it, without having to create any additional classes. I've added a set method to show what you do if you only override one of the two:</p>

<pre><code>class Foo(object):
    def _get_age(self):
        return 11

    def _set_age(self, age):
        self._age = age

    age = property(_get_age, _set_age)


class Bar(Foo):
    def _get_age(self):
        return 44

    age = property(_get_age, Foo._set_age)
</code></pre>

<p>This is a pretty contrived example, but you should get the idea.</p>
"
10213,"<p>To answer your general question, you can use <a href=""http://en.wikipedia.org/wiki/Bit_twiddling"" rel=""nofollow"">bit manipulation</a> techniques:</p>

<pre><code>pid, status = os.wait()
exitstatus, signum = status &amp; 0xFF, (status &amp; 0xFF00) &gt;&gt; 8
</code></pre>

<p>However, there are also <a href=""http://docs.python.org/lib/os-process.html#l2h-2780"" rel=""nofollow"">built-in functions</a> for interpreting exit status values:</p>

<pre><code>pid, status = os.wait()
exitstatus, signum = os.WEXITSTATUS( status ), os.WTERMSIG( status )
</code></pre>

<p>See also:</p>

<ul>
<li>os.WCOREDUMP()</li>
<li>os.WIFCONTINUED()</li>
<li>os.WIFSTOPPED()</li>
<li>os.WIFSIGNALED()</li>
<li>os.WIFEXITED()</li>
<li>os.WSTOPSIG()</li>
</ul>
"
68472,"<p>Python doesn't force you on using ""self"". You can give it whatever name you want. You just have to remember that the first argument in a method definition header is a reference to the object.</p>
"
250158,"<p>Just because it is ""marketed"" (in some general sense) as a special-purpose language for embedded script engines, does not mean that it is limited to that. In fact, WoW could probably just as well have chosen Python as their embedded scripting language.</p>
"
169825,"<p>I am a fan of <a href=""http://pyglet.org"" rel=""nofollow"">pyglet</a> which is a completely self contained library for doing graphical work under win32, linux, and OS X. </p>

<p>It has very low overhead, and you can see this for yourself from the tutorial on the website. It <em>should</em> play well with wxpython, or at least I seem to recall posts to the mailing list about wxpython and pyglet being used together.</p>

<p>It however does not offer selection of objects via mouse clicks - this you will have to handle yourself. Generally speaking for a 2D application this is not too difficult to do.</p>

<p><a href=""https://github.com/freespace/mactorii"" rel=""nofollow"">mactorii</a> is an OS X application of mine written in pure python+pyglet, and has some basic animation (scrolling) and click detection. It doesn't use wxpython, but perhaps it will give you an idea of what is involved. Note however mactorii is using the old pyglet api, so the run loop I have in there is obsolete. I will get around to updating it one day... :P</p>
"
108651,"<p>The following code is an in-place permutation of a given list, implemented as a generator. Since it only returns references to the list, the list should not be modified outside the generator.
The solution is non-recursive, so uses low memory. Work well also with multiple copies of elements in the input list.</p>

<pre><code>def permute_in_place(a):
    a.sort()
    yield list(a)

    if len(a) &lt;= 1:
        return

    first = 0
    last = len(a)
    while 1:
        i = last - 1

        while 1:
            i = i - 1
            if a[i] &lt; a[i+1]:
                j = last - 1
                while not (a[i] &lt; a[j]):
                    j = j - 1
                a[i], a[j] = a[j], a[i] # swap the values
                r = a[i+1:last]
                r.reverse()
                a[i+1:last] = r
                yield list(a)
                break
            if i == first:
                a.reverse()
                return

if __name__ == '__main__':
    for n in range(5):
        for a in permute_in_place(range(1, n+1)):
            print a
        print

    for a in permute_in_place([0, 0, 1, 1, 1]):
        print a
    print
</code></pre>
"
275774,"<p><strong>Note:</strong></p>

<ul>
<li>Not every movie has a cover url. (The random ID in your example doesn't.)</li>
<li>Make sure you're using an up-to-date version of IMDbPy. (IMDb changes, and IMDbPy with it.)</li>
</ul>

<p>...</p>

<pre><code>import imdb

access = imdb.IMDb()
movie = access.get_movie(1132626)

print ""title: %s year: %s"" % (movie['title'], movie['year'])
print ""Cover url: %s"" % movie['cover url']
</code></pre>

<p>If for some reason you can't use the above, you can always use something like BeautifulSoup to get the cover url.</p>

<pre><code>from BeautifulSoup import BeautifulSoup
import imdb

access = imdb.IMDb()
movie = access.get_movie(1132626)

page = urllib2.urlopen(access.get_imdbURL(movie))
soup = BeautifulSoup(page)
cover_div = soup.find(attrs={""class"" : ""photo""})
cover_url = (photo_div.find('img'))['src']
print ""Cover url: %s"" % cover_url
</code></pre>
"
136804,"<p>You might consider using something like <a href=""http://webpy.org/"">web.py</a> which would be easy to distribute (since it's small) and it would also be easy to adapt your other tools to it since it doesn't require you to submit to the framework so much like Django does. </p>

<p>Be forewarned, however, it's not the most loved framework in the Python community, but it might be just the thing for you. You might also check out <a href=""http://mdp.cti.depaul.edu/"">web2py</a>, but I know less about that.</p>
"
318140,"<p>Something like this?  Using <code>ctypes.cast</code>?</p>

<pre><code>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; p1= ctypes.c_char_p(""hi mom"")
&gt;&gt;&gt; ctypes.cast( p1, ctypes.c_void_p )
c_void_p(11133300)
</code></pre>
"
160042,"<p>base64 is the way to go for your simple needs. There is no need to import anything:</p>

<pre><code>&gt;&gt;&gt; 'your string'.encode('base64')
'eW91ciBzdHJpbmc=\n'
&gt;&gt;&gt; _.decode('base64')
'your string'
</code></pre>
"
189111,"<p>You could zip them.  ie:</p>

<pre><code>for a_row,b_row in zip(alist, blist):
    for a_item, b_item in zip(a_row,b_row):
        if a_item.isWhatever:
            b_item.doSomething()
</code></pre>

<p>However the overhead of zipping and iterating over the items may be higher than your original method if you rarely actually use the b_item (ie a_item.isWhatever is usually False).  You could use itertools.izip instead of zip to reduce the memory impact of this, but its still probably going to be slightly slower unless you always need the b_item.</p>

<p>Alternatively, consider using a 3D list instead, so terrain for cell i,j is at l[i][j][0], objects at l[i][j][1] etc, or even combine the objects so you can do a[i][j].terrain, a[i][j].object etc.</p>

<p>[Edit]  <a href=""http://stackoverflow.com/questions/189087/how-can-i-in-python-iterate-over-multiple-2d-lists-at-once-cleanly#189497"">DzinX's timings</a> actually show that the impact of the extra check for b_item isn't really significant, next to the performance penalty of re-looking up by index, so the above (using izip) seems to be fastest.  </p>

<p>I've now given a quick test for the 3d approach as well, and it seems faster still, so if you can store your data in that form, it could be both simpler and faster to access.  Here's an example of using it:</p>

<pre><code># Initialise 3d list:
alist = [ [[A(a_args), B(b_args)] for i in xrange(WIDTH)] for j in xrange(HEIGHT)]

# Process it:
for row in xlist:
    for a,b in row:
        if a.isWhatever(): 
            b.doSomething()
</code></pre>

<p>Here are my timings for 10 loops using a 1000x1000 array, with various proportions of isWhatever being true are:</p>

<pre><code>            ( Chance isWhatever is True )
Method      100%     50%      10%      1%

3d          3.422    2.151    1.067    0.824
izip        3.647    2.383    1.282    0.985
original    5.422    3.426    1.891    1.534
</code></pre>
"
65716,"<p>Try dynamically extending the bases that way you can take advantage of the mro and the methods are actual methods:</p>

<pre><code>class Parent(object):
    def bar(self):
        print ""bar""

class MetaFoo(type):
    def __new__(cls, name, bases, dict):
    	return type(name, (Parent,) + bases, dict)

class Foo(object):
    __metaclass__ = MetaFoo

if __name__ == ""__main__"":
    f = Foo()
    f.bar()
    print f.bar.func_name
</code></pre>
"
51263,"<p>The mechanize Browser object has a title() method. So the code from <a href=""http://stackoverflow.com/questions/51233/how-can-i-retrieve-the-page-title-of-a-webpage-using-python#51242"" rel=""nofollow"">this post</a> can be rewritten as:</p>

<pre><code>from mechanize import Browser
br = Browser()
br.open(""http://www.google.com/"")
print br.title()
</code></pre>
"
120291,"<p>You can't do this with plain xmlrpc since it has no notion of keyword arguments. However, you can superimpose this as a protocol on top of xmlrpc that would always pass a list as first argument, and a dictionary as a second, and then provide the proper support code so this becomes transparent for your usage, example below:</p>

<h2>Server</h2>

<pre><code>from SimpleXMLRPCServer import SimpleXMLRPCServer

class Server(object):
    def __init__(self, hostport):
        self.server = SimpleXMLRPCServer(hostport)

    def register_function(self, function, name=None):
        def _function(args, kwargs):
            return function(*args, **kwargs)
        _function.__name__ = function.__name__
        self.server.register_function(_function, name)

    def serve_forever(self):
        self.server.serve_forever()

#example usage
server = Server(('localhost', 8000))
def test(arg1, arg2):
    print 'arg1: %s arg2: %s' % (arg1, arg2)
    return 0
server.register_function(test)
server.serve_forever()
</code></pre>

<h2>Client</h2>

<pre><code>import xmlrpclib

class ServerProxy(object):
    def __init__(self, url):
        self._xmlrpc_server_proxy = xmlrpclib.ServerProxy(url)
    def __getattr__(self, name):
        call_proxy = getattr(self._xmlrpc_server_proxy, name)
        def _call(*args, **kwargs):
            return call_proxy(args, kwargs)
        return _call

#example usage
server = ServerProxy('http://localhost:8000')
server.test(1, 2)
server.test(arg2=2, arg1=1)
server.test(1, arg2=2)
server.test(*[1,2])
server.test(**{'arg1':1, 'arg2':2})
</code></pre>
"
308260,"<p>Ok, I answer my own question : I'm dumb :-)</p>

<pre><code>ls /usr/bin/ipython*
/usr/bin/ipython  /usr/bin/ipython2.4  /usr/bin/ipython2.5
</code></pre>

<p>Now it's built-in...</p>
"
50929,"<pre><code>&gt;&gt;&gt; import weakref
&gt;&gt;&gt; class Object:
...     pass
...
&gt;&gt;&gt; o = Object()
&gt;&gt;&gt; r = weakref.ref(o)
&gt;&gt;&gt; # if the reference is still active, r() will be o, otherwise None
&gt;&gt;&gt; do_something_with_o(r())
</code></pre>

<p>See the <a href=""http://docs.python.org/lib/module-weakref.html"">wearkref module docs</a> for more details.
You can also use <code>weakref.proxy</code> to create an object that proxies o. Will throw <code>ReferenceError</code> if used when the referent is no longer referenced.</p>
"
123083,"<p>Yeah, it's kind of annoying.  Perhaps this will work for your case.  </p>

<pre><code>
import re

class ReCheck(object):
    def __init__(self):
        self.result = None
    def check(self, pattern, text):
        self.result = re.search(pattern, text)
        return self.result

var = 'bar stuff'
m = ReCheck()
if m.check(r'foo(.+)',var):
    print m.result.group(1)
elif m.check(r'bar(.+)',var):
    print m.result.group(1)
elif m.check(r'baz(.+)',var):
    print m.result.group(1)
</code></pre>

<p><strong>EDIT:</strong> Brian correctly pointed out that my first attempt did not work.  Unfortunately, this attempt is longer.</p>
"
255508,"<p>Let's pretend for a moment that the development/deployment/maintenance effort/cost is equal and we look at it from the application user's perspective:</p>

<p><em>Which UI is the user going to find more useful?</em></p>

<p>in terms of</p>

<ul>
<li>Ease of use</li>
<li>Responsiveness</li>
<li>Familiar navigation/usage patterns</li>
<li>Most like other tools/applications in use on the platform (ie, native)</li>
</ul>

<p>I understand that ""useful"" is subjective.  I personally would never use (as a user, not developer) a web interface again if I could get away with it.  I <strong><em>hate</em></strong> them.</p>

<p>There are some applications that just don't make sense to develop as browser based apps.</p>

<p>From a development perspective</p>

<ul>
<li>No two browsers available today render <em>exactly</em> the same.</li>
<li>Even with Ajax, javascript and dynamic, responsive interfaces are non-trivial to implement/debug.</li>
</ul>

<p>There are many, many standalone GUI applications that are just terrible, no argument.  Development/deployment and maintenance for a multi-platform GUI is non-trivial.</p>

<p>Developing good user-interfaces is hard, period.</p>

<p>The reality is that I've made my living over the last 10 years developing mostly web based applications, because they're faster to develop, easier to deploy and provide enough utility that people will use them if they have to.</p>

<p>I don't believe that most users would use a web interface if given an alternative.</p>

<p>IMNSHO</p>
"
255481,"<p>The obvious advantages to browser-based:</p>

<ul>
<li>you can present the same UI regardless of platform</li>
<li>you can upgrade the application easily, and all users have the same version of the app running</li>
<li>you know the environment that your application will be running in (the server hardware/OS) which makes for easier testing and support compared to the multitude of operating system/hardware configurations that a GUI app will be installed on.</li>
</ul>

<p>And for GUI based:</p>

<ul>
<li>some applications (e.g.: image editing) arguably work better in a native GUI application</li>
<li>doesn't require network access</li>
</ul>

<p>Also see my comments on <a href=""http://stackoverflow.com/questions/115501/is-ruby-any-good-for-gui-development#115638"">this question</a>:</p>

<blockquote>
  <p>Cross-platform GUIs are an age-old problem. Qt, GTK, wxWindows, Java AWT, Java Swing, XUL -- they all suffer from the same problem: the resulting GUI doesn't look native on every platform. Worse still, every platform has a slightly different look and <strong>feel</strong>, so even if you were somehow able to get a toolkit that looked native on every platform, you'd have to somehow code your app to feel native on each platform.</p>
  
  <p>It comes down to a decision: do you want to minimise development effort and have a GUI that doesn't look and feel quite right on each platform, or do you want to maximise the user experience? If you choose the second option, you'll need to develop a common backend and a custom UI for each platform. <em>[edit: or use a web application.]</em></p>
</blockquote>

<p>Another thought I just had: you also need to consider the kind of data that your application manipulates and where it is stored, and how the users will feel about that. People are obviously okay having their facebook profile data stored on a webserver, but they might feel differently if you're writing a finance application like MYOB and you want to store all their personal financial details on your server. You might be able to get that to work, but it would require a lot of effort to implement the required security and to assure the userbase that their data is safe. In that situation you might decide that the overall effort is lower if you go with a native GUI app.</p>
"
28467,"<p>I haven't used SWIG or SIP, but I find writing Python wrappers with <a href=""http://www.boost.org/doc/libs/1_35_0/libs/python/doc/index.html"" rel=""nofollow"">boost.python</a> to be very powerful and relatively easy to use.</p>

<p>I'm not clear on what your requirements are for passing types between C/C++ and python, but you can do that easily by either exposing a C++ type to python, or by using a generic <a href=""http://www.boost.org/doc/libs/1_35_0/libs/python/doc/v2/object.html"" rel=""nofollow"">boost::python::object</a> argument to your C++ API. You can also register converters to automatically convert python types to C++ types and vice versa.</p>

<p>If you plan use boost.python, the <a href=""http://www.boost.org/doc/libs/1_35_0/libs/python/doc/tutorial/doc/html/index.html"" rel=""nofollow"">tutorial</a> is a good place to start.</p>

<p>I have implemented something somewhat similar to what you need. I have a C++ function that 
accepts a python function and an image as arguments, and applies the python function to each pixel in the image.</p>

<pre><code>Image* unary(boost::python::object op, Image&amp; im)
{
    Image* out = new Image(im.width(), im.height(), im.channels());
    for(unsigned int i=0; i&lt;im.size(); i++)
    {
        (*out)[i] == extract&lt;float&gt;(op(im[i]));
    }
    return out;
}
</code></pre>

<p>In this case, Image is a C++ object exposed to python (an image with float pixels), and op is a python defined function  (or really any python object with a &#95;&#95;call&#95;&#95; attribute). You can then use this function as follows (assuming unary is located in the called image that also contains Image and a load function):</p>

<pre><code>import image
im = image.load('somefile.tiff')
double_im = image.unary(lambda x: 2.0*x, im)
</code></pre>

<p>As for using arrays with boost, I personally haven't done this, but I know the functionality to expose arrays to python using boost is available - <a href=""http://www.boost.org/doc/libs/1_35_0/libs/python/doc/v2/faq.html#question2"" rel=""nofollow"">this</a> might be helpful.</p>
"
123985,"<p>The underlying operational system / shell reports real paths to python. </p>

<p>So, there really is no way around it, since <code>os.getcwd()</code> is a wrapped call to C Library <code>getcwd()</code> function.</p>

<p>There are some workarounds in the spirit of the one that you already know which is launching <code>pwd</code>.</p>

<p>Another one would involve using <code>os.environ['PWD']</code>. If that environmnent variable is set you can make some <code>getcwd</code> function that respects it.</p>

<p>The solution below combines both:</p>

<pre><code>import os
from subprocess import Popen, PIPE

class CwdKeeper(object):
    def __init__(self):
        self._cwd = os.environ.get(""PWD"")
        if self._cwd is None: # no environment. fall back to calling pwd on shell
           self._cwd = Popen('pwd', stdout=PIPE).communicate()[0].strip()
        self._os_getcwd = os.getcwd
        self._os_chdir = os.chdir

    def chdir(self, path):
        if not self._cwd:
            return self._os_chdir(path)
        p = os.path.normpath(os.path.join(self._cwd, path))
        result = self._os_chdir(p)
        self._cwd = p
        os.environ[""PWD""] = p
        return result

    def getcwd(self):
        if not self._cwd:
            return self._os_getcwd()
        return self._cwd

cwd = CwdKeeper()
print cwd.getcwd()
# use only cwd.chdir and cwd.getcwd from now on.    
# monkeypatch os if you want:
os.chdir = cwd.chdir
os.getcwd = cwd.getcwd
# now you can use os.chdir and os.getcwd as normal.
</code></pre>
"
44791,"<p>Don't you just want:</p>

<pre><code>"","".join(l)
</code></pre>

<p>Obviously it gets more complicated if you need to quote/escape commas etc in the values. In that case I would suggest looking at the csv module in the standard library:</p>

<p><a href=""https://docs.python.org/library/csv.html"" rel=""nofollow"">https://docs.python.org/library/csv.html</a></p>
"
200861,"<p>There's no corresponding ""hex nibble"" code for struct.pack, so you'll either need to manually pack into bytes first, like:</p>

<pre><code>hex_string = 'abcdef12'

hexdigits = [int(x, 16) for x in hex_string]
data = ''.join(struct.pack('B', (high &lt;&lt;4) + low) 
               for high, low in zip(hexdigits[::2], hexdigits[1::2]))
</code></pre>

<p>Or better, you can just use the hex codec.  ie.</p>

<pre><code>&gt;&gt;&gt; data = hex_string.decode('hex')
&gt;&gt;&gt; data
'\xab\xcd\xef\x12'
</code></pre>

<p>To unpack, you can encode the result back to hex similarly</p>

<pre><code>&gt;&gt;&gt; data.encode('hex')
'abcdef12'
</code></pre>

<p>However, note that for your example, there's probably no need to take the round-trip through a hex representation at all when encoding.  Just use the md5 binary digest directly.  ie.</p>

<pre><code>&gt;&gt;&gt; x = md5.md5('some string')
&gt;&gt;&gt; x.digest()
'Z\xc7I\xfb\xee\xc96\x07\xfc(\xd6f\xbe\x85\xe7:'
</code></pre>

<p>This is equivalent to your pack()ed representation.  To get the hex representation, use the same unpack method above:</p>

<pre><code>&gt;&gt;&gt; x.digest().decode('hex')
'acbd18db4cc2f85cedef654fccc4a4d8'
&gt;&gt;&gt; x.hexdigest()
'acbd18db4cc2f85cedef654fccc4a4d8'
</code></pre>

<p>[Edit]: Updated to use better method (hex codec)</p>
"
84019,"<p>It just isn't.</p>

<p>You can, however, do:</p>

<pre><code>&gt;&gt;&gt; [1,2,3].__len__()

3
</code></pre>

<p>Adding a <code>__len__()</code> method to a class is what makes the <code>len()</code> magic work.</p>
"
201325,"<p>There's an easy way to do this with the <code>binascii</code> module:</p>

<pre><code>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; print binascii.hexlify(""ABCZ"")
'4142435a'
</code></pre>

<p>Unless I'm misunderstanding something about the nibble ordering (high-nibble first is the default), that should be perfectly sufficient!</p>

<p>Furthermore, Python's <code>hashlib.md5</code> objects have a <code>hexdigest()</code> method to automatically convert the MD5 digest to an ASCII hex string, so that this method isn't even necessary for MD5 digests.  Hope that helps.</p>
"
233336,"<pre><code>import sqlite3
</code></pre>

<p><a href=""http://docs.python.org/library/sqlite3.html#module-sqlite3"">sqlite3</a> - DB-API 2.0 interface for SQLite databases.</p>

<p>You are missing the <code>.so</code> (shared object) - probably an installation step. In my Linux python installation, <code>_sqlite3</code> is at: </p>

<pre><code>${somewhere}/lib/python2.6/lib-dynload/_sqlite3.so
</code></pre>
"
63635,"<blockquote>
  <p>To build a dictionary from an arbitrary <i>object</i>, it's sufficient to use <code>__dict__</code>.</p>
</blockquote>

<p>This misses attributes that the object inherits from its class. For example,</p>

<pre><code>class c(object):
    x = 3
a = c()
</code></pre>

<p>hasattr(a, 'x') is true, but 'x' does not appear in a.__dict__</p>
"
170387,"<p><code>fork()</code> <em>has</em> in fact been duplicated in Windows, under <a href=""https://en.wikipedia.org/wiki/Cygwin"" rel=""nofollow"">Cygwin</a>, but it's pretty hairy.</p>

<blockquote>
  <p>The fork call in Cygwin is particularly interesting because it does not map well on top of the Win32 API. This makes it very difficult to implement correctly.</p>
</blockquote>

<p>See the <a href=""http://cygwin.com/cygwin-ug-net/highlights.html#ov-hi-process"" rel=""nofollow"">The Cygwin User's Guide</a> for a description of this hack.</p>
"
169913,"<p>I've seen this before... py2exe, for some reason, is not detecting that these modules are needed inside the ZIP archive and is leaving them out.</p>

<p>You can explicitly specify modules to include on the py2exe command line:</p>

<pre><code>python setup.py py2exe -p win32com -i twisted.web.resource
</code></pre>

<p>Something like that. Read up on the options and experiment.</p>
"
117201,"<p>The simplest method is the 'cgi' module:</p>

<pre><code>import cgi
data = cgi.FieldStorage()
data['bob']
</code></pre>

<p>But the context you are executing in (frameworks you're using, WSGI or even (heaven forbid) mod_python) may have different, more efficient or more direct methods of access.</p>
"
266111,"<p>Python, like perl 5, was not designed from the ground up to be thread safe. Threads were grafted on after the fact, so the global interpreter lock is used to maintain mutual exclusion to where only one thread is executing code at a given time in the bowels of the interpreter.</p>

<p>Individual Python threads are cooperatively multitasked by the interpreter itself by cycling the lock every so often.</p>

<p>Grabbing the lock yourself is needed when you are talking to Python from C when other Python threads are active to 'opt in' to this protocol and make sure that nothing unsafe happens behind your back.</p>

<p>Other systems that have a single-threaded heritage that later evolved into mulithreaded systems often have some mechanism of this sort. For instance, the Linux kernel has the ""Big Kernel Lock"" from its early SMP days. Gradually over time as multi-threading performance becomes an issue there is a tendency to try to break these sorts of locks up into smaller pieces or replace them with lock-free algorithms and data structures where possible to maximize throughput.</p>
"
245561,"<pre><code># file ""foo.py"" 
import sys
import os

def LINE( back = 0 ):
    return sys._getframe( back + 1 ).f_lineno
def FILE( back = 0 ):
    return sys._getframe( back + 1 ).f_code.co_filename
def FUNC( back = 0):
    return sys._getframe( back + 1 ).f_code.co_name
def WHERE( back = 0 ):
    frame = sys._getframe( back + 1 )
    return ""%s/%s %s()"" % ( os.path.basename( frame.f_code.co_filename ),     
                            frame.f_lineno, frame.f_code.co_name )

def testit():
   print ""Here in %s, file %s, line %s"" % ( FUNC(), FILE(), LINE() )
   print ""WHERE says '%s'"" % WHERE()

testit()
</code></pre>

<p>Output:</p>

<pre><code>$ python foo.py
Here in testit, file foo.py, line 17
WHERE says 'foo.py/18 testit()'
</code></pre>

<p>Use ""back = 1"" to find info regarding two levels back down the stack, etc.</p>
"
307594,"<p>For immutable value objects, like ints, strings or datetimes, object identity is not especially useful. It's better to think about equality. Identity is essentially an implementation detail for value objects - since they're immutable, there's no effective difference between having multiple refs to the same object or multiple objects.</p>
"
337733,"<p>You can easily do this by declaring your function like this:</p>

<pre><code>def filter(**kwargs):
</code></pre>

<p>your function will now be passed a dictionary called kwargs that contains the keywords and values passed to your function.  Note that, syntactically, the word <code>kwargs</code> is meaningless; the <code>**</code> is what causes the dynamic keyword behavior.</p>

<p>You can also do the reverse.  If you are calling a function, and you have a dictionary that corresponds to the arguments, you can do</p>

<pre><code>someFunction(**theDictionary)
</code></pre>

<p>There is also the lesser used *foo variant, which causes you to receive an array of arguments.  This is similar to normal C vararg arrays.</p>
"
132108,"<p><em>python -dv yourscript.py</em></p>

<p>That will make the interpreter to run in debug mode and to give you a trace of what the interpreter is doing.</p>

<p>If you want to interactively debug the code you should run it like this:</p>

<p><em>python -m pdb yourscript.py</em></p>

<p>That tells the python interpreter to run your script with the module ""pdb"" which is the python debugger, if you run it like that the interpreter will be executed in interactive mode, much like GDB</p>
"
56470,"<p>I assume that you're actually creating an XML DOM tree, because you want to validate that what goes into this file is valid XML, since otherwise you'd just write a static string to a file.  If validating your output is indeed your goal, then I'd suggest</p>

<pre><code>from xml.dom.minidom import parseString

doc = parseString(""""""&lt;html&gt;
    &lt;head&gt;
        &lt;script type=""text/javascript""&gt;
            var a = 'I love &amp;amp;aacute; letters'
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;And I like the fact that 3 &amp;gt; 1&lt;/h1&gt;
    &lt;/body&gt;
    &lt;/html&gt;"""""")

with open(""foo.xhtml"", ""w"") as f:
    f.write( doc.toxml() )
</code></pre>

<p>This lets you just write the XML you want to output, validate that it's correct (since parseString will raise an exception if it's invalid) and have your code look much nicer.</p>

<p>Presumably you're not just writing the same static XML every time and want some substitution.  In this case I'd have lines like</p>

<pre><code>var a = '%(message)s'
</code></pre>

<p>and then use the % operator to do the substitution, like</p>

<pre><code>&lt;/html&gt;"""""" % {""message"": ""I love &amp;amp;aacute; letters""})
</code></pre>
"
125248,"<p>OpenOffice.org can be scripted with Python: <a href=""http://wiki.services.openoffice.org/wiki/Python"">see here</a>.</p>

<p>Since OOo can load most MS Word files flawlessly, I'd say that's your best bet.</p>
"
305980,"<pre><code>testFunc.im_class
</code></pre>

<p><a href=""https://docs.python.org/reference/datamodel.html#the-standard-type-hierarchy"" rel=""nofollow"">https://docs.python.org/reference/datamodel.html#the-standard-type-hierarchy</a></p>

<blockquote>
  <p><code>im_class</code> is the class of <code>im_self</code> for
  bound methods or the class that asked
  for the method for unbound methods</p>
</blockquote>
"
303976,"<p>Ok, since my attempt to post my solution in a comment failed, here's what I was trying to say.  I could do exactly what I wanted from native Python (on Windows, not anywhere else though) with the following code:</p>

<pre><code>import msvcrt 

def kbfunc(): 
   x = msvcrt.kbhit()
   if x: 
      ret = ord(msvcrt.getch()) 
   else: 
      ret = 0 
   return ret
</code></pre>
"
143798,"<p>There is a thread in Google Groups about it:</p>

<p><a href=""http://groups.google.com/group/google-appengine/browse_thread/thread/f9d0f22d8de8c025/bba32165e308dd13?lnk=gst&amp;q=uploading+files#bba32165e308dd13"">Uploading Files</a></p>

<p>With a lot of useful code, that discussion helped me very much in uploading files.</p>
"
227802,"<p>You can call <code>burninate()</code> with a copy of the list like this:</p>

<p><code>d = burninate(a[:])</code></p>

<p>or,</p>

<p><code>d = burninate(list(a))</code></p>

<p>The other alternative is to make a copy of the list in your method:</p>

<pre><code>def burninate(b):
    c=[]
    b=b[:]
    for i in range(3):
        c.append(b.pop())
    return c

&gt;&gt;&gt; a = range(6)
&gt;&gt;&gt; b = burninate(a)
&gt;&gt;&gt; print a, b
&gt;&gt;&gt; [0, 1, 2, 3, 4, 5] [5, 4, 3]
</code></pre>
"
92260,"<p>Somtimes <a href=""http://pyyaml.org/"">YAML</a> can be good for this.</p>

<pre><code>import yaml
a = [0, 1, ['a', 'b', 'c'], 2, 3, 4]
print yaml.dump(a)
</code></pre>

<p>Produces:</p>

<pre><code>- 0
- 1
- [a, b, c]
- 2
- 3
- 4
</code></pre>
"
171707,"<p>Two columns, separated by tabs, joined into lines. Look in <em>itertools</em> for iterator equivalents, to achieve a space-efficient solution.</p>

<pre><code>import string
def fmtpairs(mylist):
    pairs = zip(mylist[::2],mylist[1::2])
    return '\n'.join('\t'.join(i) for i in pairs)

print fmtpairs(list(string.ascii_uppercase))

A   B
C   D
E   F
G   H
I   J
...
</code></pre>

<p>Oops... got caught by S.Lott (thank you).</p>

<p>A more general solution, handles any number of columns and odd lists. Slightly modified from <a href=""http://stackoverflow.com/questions/171662/formatting-a-list-of-text-into-columns#173823"">S.lott</a>, using generators to save space.</p>

<pre><code>def fmtcols(mylist, cols):
    lines = (""\t"".join(mylist[i:i+cols]) for i in xrange(0,len(mylist),cols))
    return '\n'.join(lines)
</code></pre>
"
171280,"<p><a href=""http://ipython.scipy.org/moin/"" rel=""nofollow"">iPython</a> (Python) and <a href=""http://rush.heroku.com/"" rel=""nofollow"">Rush</a> (Ruby) are shells that are designed for more advanced languages. There's also Hotwire, which is sort of a weird integrated shell/terminal emulator.</p>
"
78147,"<p>iBatis sequesters the SQL DML (or the definitions of the SQL) in an XML file.  It specifically focuses on the mapping between the SQL and some object model defined elsewhere.</p>

<p>SQL Alchemy can do this -- but it isn't really a very complete solution.  Like iBatis, you can merely have SQL table definitions and a mapping between the tables and Python class definitions. </p>

<p>What's more complete is to have a class definition that is <em>also</em> the SQL database definition.  If the class definition generates the SQL Table DDL as well as the query and processing DML, that's much more complete.  </p>

<p>I flip-flop between SQLAlchemy and the Django ORM.  SQLAlchemy can be used in an iBatis like manner.  But I prefer to make the object design central and leave the SQL implementation be derived from the objects by the toolset.</p>

<p>I use SQLAlchemy for large, batch, stand-alone projects.  DB Loads, schema conversions, DW reporting and the like work out well.  In these projects, the focus is on the relational view of the data, not the object model.  The SQL that's generated may be moved into PL/SQL stored procedures, for example.</p>

<p>I use Django for web applications, exploiting its built-in ORM capabilities.  You can, with a little work, segregate the Django ORM from the rest of the Django environment.  You can <a href=""http://docs.djangoproject.com/en/dev/topics/settings/#using-settings-without-setting-django-settings-module"">provide global settings</a> to bind your app to a specific database without using a separate settings module.</p>

<p>Django includes a number of common relationships (Foreign Key, Many-to-Many, One-to-One) for which it can manage the SQL implementation.  It generates key and index definitions for the attached database.</p>

<p>If your problem is largely object-oriented, with the database being used for persistence, then the nearly transparent ORM layer of Django has advantages.</p>

<p>If your problem is largely relational, with the SQL processing central, then the capability of seeing the generated SQL in SQLAlchemy has advantages.</p>
"
299462,"<p>You simply need to add the line:</p>

<pre><code>os.chdir(owd)
</code></pre>

<p>Just a note this was also answered in your other <A href=""http://stackoverflow.com/questions/299249/how-can-i-get-my-python-version-25-script-to-run-a-jar-file-inside-a-folder-ins"" rel=""nofollow"">question</A>.</p>
"
221338,"<p>You get this for free:</p>

<p><a href=""http://docs.djangoproject.com/en/dev/topics/db/queries/#backwards-related-objects"" rel=""nofollow"">http://docs.djangoproject.com/en/dev/topics/db/queries/#backwards-related-objects</a></p>

<p>By default, you can access a Manager which gives you access to related items through a <code>RELATEDCLASSNAME_set</code> attribute:</p>

<pre><code>some_foo.bar_set.all()
</code></pre>

<p>Or you can use the <code>related_name</code> argument to <code>ForeignKey</code> to specify the attribute which should hold the reverse relationship Manager:</p>

<pre><code>class Foo(models.Model):
     name = models.CharField()

class Bar(models.Model):
     title = models.CharField()
     foo = models.ForeignKey(Foo, related_name='bars')

...

some_foo.bars.all()
</code></pre>
"
198205,"<p>How about doing this?</p>

<pre><code>import string

def isAscii(s):
    for c in s:
        if c not in string.ascii_letters:
            return False
    return True
</code></pre>
"
310635,"<p>The Python way to do this is to accept an object that implements read() or write().  If you have a string, you can make this happen with <a href=""http://docs.python.org/library/stringio.html"" rel=""nofollow"">StringIO</a>:</p>

<pre><code>from cStringIO import StringIO

s = ""My very long string I want to read like a file""
file_like_string = StringIO(s)
data = file_like_string.read(10)
</code></pre>

<p>Remember that Python uses duck-typing: you don't have to involve a common base class. So long as your object implements read(), it can be read like a file.</p>
"
206800,"<p>Note that part of the behavior youâre seeing is due to <code>somedata</code> being a <code>dict</code>, as opposed to a simple data type such as a <code>bool</code>.</p>

<p>For instance, see this different example which behaves differently (although very similar):</p>

<pre><code>class the_base_class:
    somedata = False

class subclassthing(the_base_class):
    def __init__(self):
        print self.somedata


&gt;&gt;&gt; first = subclassthing()
False
&gt;&gt;&gt; first.somedata = True
&gt;&gt;&gt; print first.somedata
True
&gt;&gt;&gt; second = subclassthing()
False
&gt;&gt;&gt; print first.somedata
True
&gt;&gt;&gt; del first
&gt;&gt;&gt; del second
&gt;&gt;&gt; third = subclassthing()
False
</code></pre>

<p>The reason this example behaves differently from the one given in the question is because here <code>first.somedata</code> is being given a new value (the object <code>True</code>), whereas in the first example the dict object referenced by <code>first.somedata</code> (and also by the other subclass instances) is being modified.</p>

<p>See Torsten Marekâs comment to this answer for further clarification.</p>
"
79833,"<p>Your example is exiting on my install too.  I can make it execute the tests and stay within Python by changing</p>

<pre><code>unittest.main()
</code></pre>

<p>to</p>

<pre><code>unittest.TextTestRunner().run(unittest.TestLoader().loadTestsFromTestCase(Test))
</code></pre>

<p>More information is available <a href=""http://docs.python.org/library/unittest.html#basic-example"" rel=""nofollow"">here</a> in the Python Library Reference.</p>
"
79826,"<p>Don't try to run <code>unittest.main()</code> from IDLE. It's trying to access <code>sys.argv</code>, and it's getting the args that IDLE was started with. Either run your tests in a different way from IDLE, or call <code>unittest.main()</code> in its own Python process.</p>
"
13598,"<p>Not totally sure this is what you want, but..</p>

<pre><code>cleaned = stringwithslashes.decode('string_escape')
</code></pre>
"
316457,"<p>Here is a script I used to use to grab logwatch info from my mailbox. <a href=""http://brianlane.com/articles/lfnw2008/"">Presented at LFNW 2008</a> - </p>

<pre><code>#!/usr/bin/env python

''' Utility to scan my mailbox for new mesages from Logwatch on systems and then
    grab useful info from the message and output a summary page.

    by Brian C. Lane &lt;bcl@brianlane.com&gt;
'''
import os, sys, imaplib, rfc822, re, StringIO

server  ='mail.brianlane.com'
username='yourusername'
password='yourpassword'

M = imaplib.IMAP4_SSL(server)
M.login(username, password)
M.select()
typ, data = M.search(None, '(UNSEEN SUBJECT ""Logwatch"")')
for num in data[0].split():
    typ, data = M.fetch(num, '(RFC822)')
#   print 'Message %s\n%s\n' % (num, data[0][1])

    match = re.search(	""^(Users logging in.*?)^\w"",
     					data[0][1],
     					re.MULTILINE|re.DOTALL )
    if match:
    	file = StringIO.StringIO(data[0][1])
    	message = rfc822.Message(file)
    	print message['from']
    	print match.group(1).strip()
    	print '----'

M.close()
M.logout()
</code></pre>
"
4595,"<p>Tuples are a quick\flexible way to create <em>composite</em> data-types.
Lists are containers for, well, lists of objects.</p>

<p>For example, you would use a List to store a list of student details in a class.</p>

<p>Each student detail in that list may be a 3-tuple containing their roll number, name and test score.</p>

<pre><code> `[(1,'Mark',86),(2,'John',34)...]`<br></code></pre>

<p>Also, because tuples are immutable they can be used as keys in dictionaries.</p>"
348649,"<p>I'm not an expert on Perl, but what I do know is that GMail supports IMAP and POP3, 2 protocols that are completely standard and allow you to do just that. </p>

<p>Maybe that helps you to get started. </p>
"
280284,"<p>Immutable lists are best represented through two-tuples, with None representing NIL. To allow simple formulation of such lists, you can use this function:</p>

<pre><code>def mklist(*args):
    result = None
    for element in reversed(args):
        result = (element, result)
    return result
</code></pre>

<p>To work with such lists, I'd rather provide the whole collection of LISP functions (i.e. first, second, nth, etc), than introducing methods.</p>
"
315710,"<pre><code>import imaplib

# you want to connect to a server; specify which server
server= imaplib.IMAP4_SSL('imap.googlemail.com')
# after connecting, tell the server who you are
server.login('email@gmail.com', 'password')
# this will show you a list of available folders
# possibly your Inbox is called INBOX, but check the list of mailboxes
code, mailboxen= server.list()
print mailboxen
# if it's called INBOX, thenâ¦
server.select(""INBOX"")
</code></pre>

<p>The rest of your code seems correct.</p>
"
536,"<p>You can use ImageMagick's convert utility for this, see some examples in <a href=""https://web.archive.org/web/20120413111338/http://studio.imagemagick.org/pipermail/magick-users/2002-May/002636.html"" rel=""nofollow"">http://studio.imagemagick.org/pipermail/magick-users/2002-May/002636.html</a>
:</p>

<blockquote>
<pre><code>Convert taxes.pdf taxes.jpg 
</code></pre>
  
  <p>Will convert a two page PDF file into [2] jpeg files: taxes.jpg.0,
  taxes.jpg.1</p>
  
  <p>I can also convert these JPEGS to a thumbnail as follows:</p>

<pre><code>convert -size 120x120 taxes.jpg.0 -geometry 120x120 +profile '*' thumbnail.jpg
</code></pre>
  
  <p>I can even convert the PDF directly to a jpeg thumbnail as follows:</p>

<pre><code>convert -size 120x120 taxes.pdf -geometry 120x120 +profile '*' thumbnail.jpg
</code></pre>
  
  <p>This will result in a thumbnail.jpg.0 and thumbnail.jpg.1 for the two
  pages.</p>
</blockquote>
"
36902,"<p>From the Python documentation:</p>

<blockquote>
  <p>If there are more positional arguments than there are formal parameter slots, a TypeError exception is raised, unless a formal parameter using the syntax ""*identifier"" is present; in this case, that formal parameter receives a tuple containing the excess positional arguments (or an empty tuple if there were no excess positional arguments). </p>
  
  <p>If any keyword argument does not correspond to a formal parameter name, a TypeError exception is raised, unless a formal parameter using the syntax ""**identifier"" is present; in this case, that formal parameter receives a dictionary containing the excess keyword arguments (using the keywords as keys and the argument values as corresponding values), or a (new) empty dictionary if there were no excess keyword arguments. </p>
</blockquote>
"
254723,"<p>If you recompile pythonxy.dll, you can omit modules that you don't need. Going by size,  stripping off the unicode database and the CJK codes creates the largest code reduction. This, of course, assumes that you don't need these. Remove the modules from the pythoncore project, and also remove them from PC/config.c</p>
"
68061,"<p>Emacs! Seriously, its use of ""tab is a <em>command</em>, not a <em>character</em>"", is absolutely perfect for python development.</p>
"
31552,"<p>Use threads in python if the individual workers are doing I/O bound operations. If you are trying to scale across multiple cores on a machine either find a good <a href=""http://www.python.org/dev/peps/pep-0371/"">IPC</a> framework for python or pick a different language.</p>
"
208256,"<p>I believe you could use Twisted to implement FTPS by simply using its FTP implementation, but changing the <a href=""http://twistedmatrix.com/trac/browser/trunk/twisted/protocols/ftp.py?rev=24609#L2186""><code>FTPClient.connectFactory</code></a> attribute to be a function that does something with <a href=""http://twistedmatrix.com/documents/8.1.0/api/twisted.internet.interfaces.IReactorSSL.connectSSL.html""><code>connectSSL</code></a> rather than <code>connectTCP</code>.</p>

<p>Are you sure you want FTPS though?  <a href=""http://geekswithblogs.net/bvamsi/archive/2006/03/23/73147.aspx"">SFTP is a different, better, and much more popular protocol</a> these days: Twisted contains <a href=""http://twistedmatrix.com/trac/browser/trunk/twisted/conch/ssh/filetransfer.py?rev=24609"">an SFTP implementation</a> as well.</p>
"
184278,"<p>Sorry, but your question is wrong. People are probably going to vote me down for this one but I want to say it anyway:</p>

<p>I wouldn't expect to get an objective answer! Why? That's simple:</p>

<ul>
<li>All Ruby advocates will tell to use Ruby.</li>
<li>All Python advocates will tell to use Python.</li>
<li>All PHP advocates will tell to use PHP.</li>
<li>Insert additional languages here.</li>
</ul>

<p>Got the idea?</p>

<p>I recommend you to try each of the languages you mentioned for yourself. At least a few days each. Afterwards you should have a much better foundation to make your final decision.</p>

<p>That said, I would choose Ruby (because I am a Ruby advocate).</p>
"
117523,"<p>The Python standard library doesn't contain timezone information, because unfortunately timezone data changes a lot faster than Python. You need a third-party module for this; the usual choice is <a href=""http://pytz.sourceforge.net"">pytz</a></p>
"
265741,"<p>You can set a global socket timeout <sup>(*)</sup>:</p>

<pre><code>import socket

timeout = 10
socket.setdefaulttimeout(timeout)
</code></pre>

<hr>

<p><sup>(*)</sup> <strong>EDIT</strong>: As people in the comments correctly point out: This is technically true, but it only has predictable results for tasks that involve a single socket operation. An HTTP request consists of multiple socket operations (e.g. DNS requests or other things that might be abstracted away from an HTTP client). The timeout of the overall operation becomes unpredictable because of that.</p>
"
34482,"<p>If you have PyObjC (the Python - Objective-C bridge) installed or are running on OS X 10.5's system python (which ships with PyObjC), you can do</p>

<pre><code>from AppKit import NSBeep
NSBeep()
</code></pre>

<p>to play the system alert.</p>
"
172740,"<p>Cython and pyrex can be used to generate c code using a python-like syntax. Psyco is also fantastic for appropriate projects (sometimes you'll not notice much speed boost, sometimes it'll be as much as 50x as fast).
I still reckon the best way is to profile your code (cProfile, etc.) and then just code the bottlenecks as c functions for python.</p>
"
216136,"<p>Append the first element of the list to a reversed sublist:</p>

<pre><code>mylist = [1, 2, 3, 4, 5]
backwards = lambda l: (backwards (l[1:]) + l[:1] if l else []) 
print backwards (mylist)
</code></pre>
"
245295,"<p>""When one says ""everything is an object"" (like in Python), does he indeed mean that ""everything is first-class""?""</p>

<p>Yes.</p>

<p>Everything in Python is a proper object.  Even things that are ""primitive types"" in other languages.</p>

<p>You find that an object like <code>2</code> actually has a fairly rich and sophisticated interface.</p>

<pre><code>&gt;&gt;&gt; dir(2)
['__abs__', '__add__', '__and__', '__class__', '__cmp__', '__coerce__', '__delattr__', '__div__', '__divmod__', '__doc__', '__float__', '__floordiv__', '__getattribute__', '__getnewargs__', '__hash__', '__hex__', '__index__', '__init__', '__int__', '__invert__', '__long__', '__lshift__', '__mod__', '__mul__', '__neg__', '__new__', '__nonzero__', '__oct__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdiv__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__str__', '__sub__', '__truediv__', '__xor__']
</code></pre>

<p>Because everything's a first-class object in Python, there are relatively few obscure special cases.  </p>

<p>In Java, for example, there are primitive types (int, bool, double, char) that aren't proper objects.  That's why Java has to introduce Integer, Boolean, Double and Character as first-class types.  This can be hard to teach to beginners -- it isn't obvious why both a primitive type and an class have to exist side-by-side.</p>

<p>It also means that an object's class is -- itself -- an object.  This is different from C++, where the classes don't always have a distinct existence at run-time.</p>

<p>The type of <code>2</code> is the <code>type 'int'</code> object, which has methods, attributes and a type.</p>

<pre><code>&gt;&gt;&gt; type(2)
&lt;type 'int'&gt;
</code></pre>

<p>The type of a built-in type like <code>int</code> is the <code>type 'type'</code> object.  This has methods and attributes, also.</p>

<pre><code>&gt;&gt;&gt; type(type(2))
&lt;type 'type'&gt;
</code></pre>
"
293484,"<p>Run it through <a href=""http://tidy.sourceforge.net/"" rel=""nofollow"">Tidy</a> or one of its ported <a href=""http://utidylib.berlios.de/"" rel=""nofollow"">libraries</a>.</p>

<p>Try to code it by hand and you <em>will</em> want to gouge your eyes out.</p>
"
133336,"<p>If this is always, <em>always</em> the behaviour you want when a particular function raises an exception, you could use a decorator:</p>

<pre><code>def handle_exception(handler):
    def decorate(func):
        def call_function(*args, **kwargs):
            try:
                func(*args, **kwargs)
            except Exception, e:
                handler(e)
        return call_function
    return decorate

def baz(e):
    print(e)

@handle_exception(baz)
def foo(a, b):
    return a + b

@handle_exception(baz)
def bar(c, d):
    return c.index(d)
</code></pre>

<p>Usage:</p>

<pre><code>&gt;&gt;&gt; foo(1, '2')
unsupported operand type(s) for +: 'int' and 'str'
&gt;&gt;&gt; bar('steve', 'cheese')
substring not found
</code></pre>
"
339019,"<pre><code>width = 10
x = 5
print ""%0*d"" % (width, x)
&gt; 0000000005
</code></pre>

<p>See the print documentation for all the exciting details!</p>

<p><strong>Update for Python 3.x (7.5 years later)</strong></p>

<p>That last line should now be:</p>

<pre><code>print(""%0*d"" % (width, x))
</code></pre>

<p>I.e. <code>print()</code> is now a function, not a statement. Note that I still prefer the Old School <code>printf()</code> style because, IMNSHO, it reads better, and because, um, I've been using that notation since January, 1980. Something ... old dogs .. something something ... new tricks.</p>
"
339212,"<p>In my projects, I always have one window per glade file. I'd recommend the same for your project.</p>

<p>The following are the two main reasons:</p>

<ul>
<li>It will be faster and use less memory, since each call to gtk.glade.XML() parses the whole thing. Sure you can pass in the root argument to avoid creating the widget tree for all windows, but you'd still have to <em>parse</em> all the XML, even if you're not interested in it.</li>
<li>Conceptually its easier to understand if have one toplevel per window. You easily know which filename a given dialog/window is in just by looking at the filename.</li>
</ul>
"
22723,"<p>I agree with Corey, urllib2 is more complete than <a href=""http://docs.python.org/lib/module-urllib.html"">urllib</a> and should likely be the module used if you want to do more complex things, but to make the answers more complete, urllib is a simpler module if you want just the basics:</p>

<pre><code>import urllib
response = urllib.urlopen('http://www.example.com/sound.mp3')
mp3 = response.read()
</code></pre>

<p>Will work fine. Or, if you don't want to deal with the ""response"" object you can call <strong>read()</strong> directly:</p>

<pre><code>import urllib
mp3 = urllib.urlopen('http://www.example.com/sound.mp3').read()
</code></pre>
"
256235,"<p>I've mostly just seen the builtin <code>ValueError</code> used in this situation.</p>
"
299830,"<p>The only solution is to rewrite the method it uses for zipping files to read from a buffer.  It would be trivial to add this to the standard libraries; I'm kind of amazed it hasn't been done yet.  I gather there's a lot of agreement the entire interface needs to be overhauled, and that seems to be blocking any incremental improvements.</p>

<pre><code>import zipfile, zlib, binascii, struct
class BufferedZipFile(zipfile.ZipFile):
    def writebuffered(self, zipinfo, buffer):
        zinfo = zipinfo

        zinfo.file_size = file_size = 0
        zinfo.flag_bits = 0x00
        zinfo.header_offset = self.fp.tell()

        self._writecheck(zinfo)
        self._didModify = True

        zinfo.CRC = CRC = 0
        zinfo.compress_size = compress_size = 0
        self.fp.write(zinfo.FileHeader())
        if zinfo.compress_type == zipfile.ZIP_DEFLATED:
            cmpr = zlib.compressobj(zlib.Z_DEFAULT_COMPRESSION, zlib.DEFLATED, -15)
        else:
            cmpr = None

        while True:
            buf = buffer.read(1024 * 8)
            if not buf:
                break

            file_size = file_size + len(buf)
            CRC = binascii.crc32(buf, CRC) &amp; 0xffffffff
            if cmpr:
                buf = cmpr.compress(buf)
                compress_size = compress_size + len(buf)

            self.fp.write(buf)

        if cmpr:
            buf = cmpr.flush()
            compress_size = compress_size + len(buf)
            self.fp.write(buf)
            zinfo.compress_size = compress_size
        else:
            zinfo.compress_size = file_size

        zinfo.CRC = CRC
        zinfo.file_size = file_size

        position = self.fp.tell()
        self.fp.seek(zinfo.header_offset + 14, 0)
        self.fp.write(struct.pack(""&lt;LLL"", zinfo.CRC, zinfo.compress_size, zinfo.file_size))
        self.fp.seek(position, 0)
        self.filelist.append(zinfo)
        self.NameToInfo[zinfo.filename] = zinfo
</code></pre>
"
257614,"<p>As pointed out, you're failing to copy the Python variable values into the query, only their names, which mean nothing to MySQL.</p>

<p>However the direct string concatenation option:</p>

<pre><code>cursor.execute(""INSERT INTO releases (date, cat, name) VALUES ('%s', '%s', '%s')"" % (timestring, y[4], y[7]))
</code></pre>

<p>is dangerous and should never be used. If those strings have out-of-bounds characters like ' or \ in, you've got an SQL injection leading to possible security compromise. Maybe in your particular app that can never happen, but it's still a very bad practice, which beginners' SQL tutorials really need to stop using.</p>

<p>The solution using MySQLdb is to let the DBAPI layer take care of inserting and escaping parameter values into SQL for you, instead of trying to % it yourself:</p>

<pre><code>cursor.execute('INSERT INTO releases (date, cat, name) VALUES (%s, %s, %s)', (timestring, y[4], y[7]))
</code></pre>
"
132652,"<p>The only inconvenience I experience with using spaces instead of tabs is that you cannot easily remove an indentation level, you have to remove 4 spaces instead of just one tab.</p>
"
336894,"<p>Use the <a href=""https://docs.python.org/2/library/wsgiref.html#module-wsgiref.simple_server"" rel=""nofollow"">WSGI reference implementation</a>.  In the long run, you'll be happier.</p>

<pre><code>from wsgiref.simple_server import make_server, demo_app

httpd = make_server('', 8000, demo_app)
print ""Serving HTTP on port 8000...""

# Respond to requests until process is killed
httpd.serve_forever()
</code></pre>

<p>The demo_app is relatively easy to write; it handles your Ajax requests.</p>
"
86420,"<p>If you're still checking this,  I have a GPL FoxPro-to-PostgreSQL converter at <a href=""https://github.com/kstrauser/pgdbf"">https://github.com/kstrauser/pgdbf</a> .  We use it to routinely copy our tables into PostgreSQL for fast reporting.</p>
"
250168,"<p>It's probably because Lua was designed as a scripting and extension language. On the <a href=""http://www.lua.org/about.html"">official site</a> it's described as a powerful, fast, light-weight, embeddable scripting language. There's nothing stopping you from writing general purpose programs for it (if I recall correctly it ships with an interpreter and compiler), but the language designers intended it to be used mainly as an embedded language (hence being light-weight and all)</p>
"
216285,"<h2>Summary</h2>

<p><strong>Windows</strong>: no need to think, use Python.
<strong>Unix</strong>: quick or run-it-once scripts are for Bash, serious and/or long life time scripts are for Python.</p>

<h2>The big talk</h2>

<p>In a Windows environment, Python is definitely the best choice since <a href=""http://en.wikipedia.org/wiki/Command_Prompt"" rel=""nofollow"">cmd</a> is crappy and PowerShell has not really settled yet. What's more Python can run on several platform so it's a better investment. Finally, Python has a huge set of library so you will almost never hit the ""god-I-can't-do-that"" wall. This is not true for cmd and PowerShell.</p>

<p>In a Linux environment, this is a bit different. A lot of one liners are shorter, faster, more efficient and often more readable in pure Bash. But if you know your quick and dirty script is going to stay around for a while or will need to be improved, go for Python since it's far easier to maintain and extend and <a href=""http://www.google.fr/url?sa=t&amp;source=web&amp;ct=res&amp;cd=2&amp;url=http%3A%2F%2Fwww.dabeaz.com%2Fgenerators%2FGenerators.pdf&amp;ei=yRn7SJDYCIbS0QXFvq2JDw&amp;usg=AFQjCNE6b1w4feELQFUppm2-GFCzYyd2UQ&amp;sig2=nUjS8CM2Pd77W_HXUq4tRw"" rel=""nofollow"">you will be able to do most of the task you can do with GNU tools with the standard library</a>. And if you can't, you can still call the command-line from a Python script.</p>

<p>And of course you can call Python from the shell using -c option:</p>

<pre><code>python -c  ""for line in open('/etc/fstab') : print line""
</code></pre>

<p>Some more literature about Python used for system administration tasks:</p>

<ul>
<li><p><a href=""http://www.ibm.com/developerworks/aix/library/au-python/"" rel=""nofollow"">The IBM lab point of view</a>.</p></li>
<li><p><a href=""http://www.unixreview.com/documents/s=9083/sam0401d/"" rel=""nofollow"">A nice example to compare bash and python to script report</a>.</p></li>
<li><p><a href=""http://www.samag.com/documents/s=8964/sam0312a/0312a.htm"" rel=""nofollow"">The basics</a>.</p></li>
<li><p><a href=""http://rads.stackoverflow.com/amzn/click/0596515820"" rel=""nofollow"">The must-have book</a>.</p></li>
</ul>
"
327575,"<p>I think you want to use setdefault. It's a bit weird to use but does exactly what you need.</p>

<pre><code>d.setdefault(t, []).append(c)
</code></pre>

<p>The <code>.setdefault</code> method will return the element (in our case, a list) that's bound to the dict's key <code>t</code> if that key exists. If it doesn't, it will bind an empty list to the key <code>t</code> and return it. So either way, a list will be there that the <code>.append</code> method can then append the tuple <code>c</code> to.</p>
"
40593,"<pre><code>try:
   cursor.execute(""select 1 / 0 from dual"")
except cx_Oracle.DatabaseError, exc:
   error, = exc
   print ""Code:"", error.code
   print ""Message:"", error.message
</code></pre>

<p>This results in the following output:</p>

<pre><code>Code: 1476
Message: ORA-01476: divisor is equal to zero
</code></pre>
"
327825,"<p>I think my answer from the <a href=""http://stackoverflow.com/questions/260273/most-efficient-way-to-search-the-last-x-lines-of-a-file-in-python"">last time this came up</a> was sadly overlooked. :-)</p>

<blockquote>
  <p>If you're on a unix box,
  <code>os.popen(""tail -10 "" +
  filepath).readlines()</code> will probably
  be the fastest way.  Otherwise, it 
  depends on how robust you want it to
  be.  The methods proposed so far will
  all fall down, one way or another. 
  For robustness and speed in the most
  common case you probably want
  something like a logarithmic search:
  use file.seek to go to end of the file
  minus 1000 characters, read it in,
  check how many lines it contains, then
  to EOF minus 3000 characters, read in
  2000 characters, count the lines, then
  EOF minus 7000, read in 4000
  characters, count the lines, etc.
  until you have as many lines as you
  need.  But if you know for sure that
  it's always going to be run on files
  with sensible line lengths, you may
  not need that.</p>
  
  <p>You might also find some inspiration
  in the <a href=""http://www.koders.com/c/fid8DEE98A42C35A1346FA89C328CC3BF94E25CF377.aspx"">source code</a> for the unix
  <code>tail</code> command.</p>
</blockquote>
"
318501,"<p>You can do remote debugging of python web apps over TCP/IP with <a href=""http://winpdb.org/"" rel=""nofollow"">winpdb</a>.</p>
"
190233,"<p>For the exception handling, assuming your log file is opened as log:</p>

<pre><code>import sys
import traceback

def excepthook(type, value, tb):
    message = 'Uncaught exception:\n'
    message += ''.join(traceback.format_exception(type, value, tb))
    log.write(message)

sys.excepthook = excepthook
</code></pre>
"
181000,"<p>re.match attempts to match a pattern <strong>at the beginning of the string</strong>. re.search attempts to match the pattern <strong>throughout the string</strong> until it finds a match.</p>
"
115700,"<p>Right now (as of 2008), all the SOAP libraries available for Python suck. I recommend avoiding SOAP if possible. The last time we where forced to use a SOAP web service from Python, we wrote a wrapper in C# that handled the SOAP on one side and spoke COM out the other. </p>
"
263068,"<p>No process can change its parent process (or any other existing process' environment).</p>

<p>You can, however, create a new environment by creating a new interactive shell with the modified environment.</p>

<p>You have to spawn a new copy of the shell that uses the upgraded environment and has access to the existing stdin, stdout and stderr, and does its reinitialization dance.</p>

<p>You need to do something like use subprocess.Popen to run <code>/bin/bash -i</code>.</p>

<p>So the original shell runs Python, which runs a new shell.  Yes, you have a lot of processes running.  No it's not too bad because the original shell and Python aren't really doing anything except waiting for the subshell to finish so they can exit cleanly, also.</p>
"
192116,"<p>You can use the ""dir()"" function to do this.</p>

<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; dir(sys)
['__displayhook__', '__doc__', '__excepthook__', '__name__', '__stderr__', '__stdin__', '__stdo
t__', '_current_frames', '_getframe', 'api_version', 'argv', 'builtin_module_names', 'byteorder
, 'call_tracing', 'callstats', 'copyright', 'displayhook', 'dllhandle', 'exc_clear', 'exc_info'
 'exc_type', 'excepthook', 'exec_prefix', 'executable', 'exit', 'getcheckinterval', 'getdefault
ncoding', 'getfilesystemencoding', 'getrecursionlimit', 'getrefcount', 'getwindowsversion', 'he
version', 'maxint', 'maxunicode', 'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_
ache', 'platform', 'prefix', 'ps1', 'ps2', 'setcheckinterval', 'setprofile', 'setrecursionlimit
, 'settrace', 'stderr', 'stdin', 'stdout', 'subversion', 'version', 'version_info', 'warnoption
', 'winver']
&gt;&gt;&gt;
</code></pre>

<p>Another useful feature is help.</p>

<pre><code>&gt;&gt;&gt; help(sys)
Help on built-in module sys:

NAME
    sys

FILE
    (built-in)

MODULE DOCS
    http://www.python.org/doc/current/lib/module-sys.html

DESCRIPTION
    This module provides access to some objects used or maintained by the
    interpreter and to functions that interact strongly with the interpreter.

    Dynamic objects:

    argv -- command line arguments; argv[0] is the script pathname if known
</code></pre>
"
80008,"<p>dbr said:</p>

<blockquote>
<pre><code>def hash_password(password):
    """"""Returns the hashed version of a string
    """"""
    return hasher.new( str(password) ).hexdigest()
</code></pre>
</blockquote>

<p>This is a really insecure way to hash passwords. You <em>don't</em> want to do this. If you want to know why read the <a href=""http://www.openbsd.org/papers/bcrypt-paper.pdf"">Bycrypt Paper</a> by the guys who did the password hashing system for OpenBSD. Additionally if want a good discussion on how passwords are broken check out <a href=""http://www.securityfocus.com/columnists/388"">this interview</a> with the author of Jack the Ripper (the popular unix password cracker).</p>

<p>Now B-Crypt is great but I have to admit I don't use this system because I didn't have the EKS-Blowfish algorithm available and did not want to implement it my self. I use a slightly updated version of the FreeBSD system which I will post below. The gist is this. Don't just hash the password. Salt the password then hash the password and repeat 10,000 or so times.</p>

<p>If that didn't make sense here is the code: </p>

<pre><code>#note I am using the Python Cryptography Toolkit
from Crypto.Hash import SHA256

HASH_REPS = 50000

def __saltedhash(string, salt):
    sha256 = SHA256.new()
    sha256.update(string)
    sha256.update(salt)
    for x in xrange(HASH_REPS): 
        sha256.update(sha256.digest())
        if x % 10: sha256.update(salt)
    return sha256

def saltedhash_bin(string, salt):
    """"""returns the hash in binary format""""""
    return __saltedhash(string, salt).digest()

def saltedhash_hex(string, salt):
    """"""returns the hash in hex format""""""
    return __saltedhash(string, salt).hexdigest()
</code></pre>

<p>For deploying a system like this the key thing to consider is the HASH_REPS constant. This is the scalable cost factor in this system. You will need to do testing to determine what is the exceptable amount of time you want to wait for each hash to be computed versus the  risk of an offline dictionary based attack on your password file. </p>

<p>Security is hard, and the method I present is not the best way to do this, but it is significantly better than a simple hash. Additionally it is dead simple to implement. So even you don't choose a more complex solution this isn't the worst out there.</p>

<p>hope this helps,
Tim</p>
"
326789,"<pre><code>import sys
getattr(sys.modules[__name__], 'A')
</code></pre>
"
53182,"<blockquote>
  <p>From the horse's mouth: <a href=""http://docs.python.org/ref/explicit-joining.html"">Explicit line
  joining </a></p>
  
  <p>Two or more physical lines may be
  joined into logical lines using
  backslash characters (<code>\</code>), as follows:
  when a physical line ends in a
  backslash that is not part of a string
  literal or comment, it is joined with
  the following forming a single logical
  line, deleting the backslash and the
  following end-of-line character. For
  example:</p>

<pre><code>if 1900 &lt; year &lt; 2100 and 1 &lt;= month &lt;= 12 \
   and 1 &lt;= day &lt;= 31 and 0 &lt;= hour &lt; 24 \
   and 0 &lt;= minute &lt; 60 and 0 &lt;= second &lt; 60:   # Looks like a valid date
        return 1
</code></pre>
  
  <p>A line ending in a backslash cannot
  carry a comment. A backslash does not
  continue a comment. A backslash does
  not continue a token except for string
  literals (i.e., tokens other than
  string literals cannot be split across
  physical lines using a backslash). A
  backslash is illegal elsewhere on a
  line outside a string literal. </p>
</blockquote>
"
113680,"<p>The easiest way is probably just to use <code>list()</code>, but there is at least one other option as well:</p>

<pre><code>s = ""Word to Split""
wordlist = list(s)               # option 1, 
wordlist = [ch for ch in s]      # option 2, list comprehension.
</code></pre>

<p>They should <em>both</em> give you what you need:</p>

<pre><code>['W','o','r','d',' ','t','o',' ','S','p','l','i','t']
</code></pre>

<p>As stated, the first is likely the most preferable for your example but there are use cases that may make the latter quite handy for more complex stuff, such as if you want to apply some arbitrary function to the items, such as with:</p>

<pre><code>[doSomethingWith(ch) for ch in s]
</code></pre>
"
333116,"<p>You can use the <a href=""http://www.python.org/doc/2.5.2/lib/module-struct.html"" rel=""nofollow"">struct module</a>:</p>

<pre><code>import struct

# Pack a Python long as if it was a C unsigned integer, little endian
bytes = struct.pack(""&lt;I"", 0x78FF00AA)
print [hex(ord(byte)) for byte in bytes]

['0xaa', '0x0', '0xff', '0x78']
</code></pre>

<p>Read the documentation page to find about datatypes, and pay attention to endianness.</p>
"
86611,"<p>Using the netsh interface 
Usage set interface [name = ] IfName
            [ [admin = ] ENABLED|DISABLED
              [connect = ] CONNECTED|DISCONNECTED
              [newname = ] NewName ]</p>

<p>Try including everything inside the outer brackets:
netsh interface set interface name=""thename"" admin=disabled connect=DISCONNECTED newname=""thename""</p>

<p>See also this MS KB page: <a href=""http://support.microsoft.com/kb/262265/"">http://support.microsoft.com/kb/262265/</a>
You could follow either of their suggestions.
For disabling the adapter, you will need to determine a way to reference the hardware device.  If there will not be multiple adapters with the same name on the computer, you could possibly go off of the Description for the interface (or PCI ID works well).  After that, using devcon (disable|enable).  Devcon is an add-on console interface for the Device Manager.</p>
"
154566,"<p>In 2.5, theres no way to suppress it, other than measures like not giving users write access to the directory.</p>

<p>In python 2.6 and 3.0 however, there may be a setting in the sys module called ""dont_write_bytecode"" that can be set to suppress this.  This can also be set by passing the ""-B"" option, or setting the environment variable ""PYTHONDONTWRITEBYTECODE""</p>
"
244078,"<p>Here you go:</p>

<pre><code>let rec range i j = if i &gt; j then [] else i :: (range (i+1) j)
</code></pre>

<p>Note that this is not tail-recursive.  Modern Python versions even have a lazy range.</p>
"
244823,"<p>Try</p>

<p><a href=""http://wiki.kartbuilding.net/index.php/Anyterm"">AnyTerm</a></p>

<p><a href=""http://wiki.kartbuilding.net/index.php/Ajaxterm"">AjaxTerm</a></p>

<p><a href=""http://www-personal.umich.edu/~mressl/webshell/"">WebShell</a></p>
"
291819,"<p>Try using <a href=""http://con.appspot.com/console/help/integration"">App Engine Console</a> then you dont even have to deploy any special code</p>
"
271590,"<p>First, a meta comment: I would highly recommend coding the entire thing in a high-level language, profiling like mad, and optimizing only where profiling shows it's necessary. First optimize the algorithm, then the code, then think about bringing in the heavy iron. Having an optimum algorithm and clean code will make things much easier when/if you need to reimplement in a lower-level language.</p>

<p>Speaking for Python, <a href=""http://www.codeplex.com/Wiki/View.aspx?ProjectName=IronPython"">IronPython</a>/C# is probably the easiest optimization path. </p>

<p>CPython with C++ is doable, but I find C a lot easier to handle (but not all that easy, being C). Two tools that ease this are <a href=""http://cython.org/"">cython</a>/<a href=""http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/"">pyrex</a> (for C) and <a href=""http://shed-skin.blogspot.com/"">shedskin</a> (for C++). These compile Python into C/C++, and from there you can access C/C++ libraries without too much ado.</p>

<p>I've never used jython, but I hear that the jython/Java optimization path isn't all that bad.</p>
"
157100,"<ol>
<li><p>Try to follow ""<a href=""http://www.gnu.org/prep/standards/standards.html#Command_002dLine-Interfaces"">Standards for Command Line Interfaces</a>""</p></li>
<li><p>Convert your arguments (as Thomas suggested) to OptionParser format.</p>

<pre><code>parser.parse_args([""--""+p if ""="" in p else p for p in sys.argv[1:]])
</code></pre></li>
</ol>

<p>If command-line arguments are not in sys.argv or a similar list but in a string then (as ironfroggy suggested) use <code>shlex.split()</code>.</p>

<pre><code>parser.parse_args([""--""+p if ""="" in p else p for p in shlex.split(argsline)])
</code></pre>
"
139899,"<p>They are different, because the value of <code>i</code> in both the generator expression and the list comp are evaluated lazily, i.e. when the anonymous functions are invoked in <code>f</code>.<br />
By that time, <code>i</code> is bound to the last value if <code>t</code>, which is -1.</p>

<p>So basically, this is what the list comprehension does (likewise for the genexp):</p>

<pre><code>x = []
i = 1 # 1. from t
x.append(lambda: i)
i = -1 # 2. from t
x.append(lambda: i)
</code></pre>

<p>Now the lambdas carry around a closure that references <code>i</code>, but <code>i</code> is bound to -1 in both cases, because that is the last value it was assigned to.</p>

<p>If you want to make sure that the lambda receives the current value of <code>i</code>, do</p>

<pre><code>f(*[lambda u=i: u for i in t])
</code></pre>

<p>This way, you force the evaluation of <code>i</code> at the time the closure is created.</p>

<p><strong>Edit</strong>: There is one difference between generator expressions and list comprehensions: the latter leak the loop variable into the surrounding scope.</p>
"
321119,"<p>Since Python has monkey patching, not only can you not make anything ""private"".  Even if you could, someone could still monkeypatch in a new version of the method function.</p>

<p>You can use this kind of name as a ""don't go near"" warning.</p>

<pre><code>class Foo( object ):
    def _roo( self ):
       """"""Change this at your own risk.""""""
</code></pre>

<p>That's the usual approach.  Everyone can read your source.  They were warned.  If they boldly go where they were warned not to go, they get what they deserve.  It doesn't work and you can't help them.</p>

<p>You can try to make this intentionally obcure with inner classes and ""hidden"" implementation modules that are called by the ""private"" methods.  But... everyone has your source.  You can't <em>prevent</em> anything.  You can only advise people of the consequences of their actions.</p>
"
141313,"<pre><code>directories=[d for d in os.listdir(os.getcwd()) if os.path.isdir(d)]
</code></pre>
"
44381,"<p>Here's one way to do it:</p>

<pre><code>import inspect

def get_subclasses(mod, cls):
    """"""Yield the classes in module ``mod`` that inherit from ``cls``""""""
    for name, obj in inspect.getmembers(mod):
        if hasattr(obj, ""__bases__"") and cls in obj.__bases__:
            yield obj
</code></pre>
"
197566,"<p>It <strong>is</strong> possible to make documentation of module's data, with use of <a href=""http://epydoc.sourceforge.net/"">epydoc</a> syntax. Epydoc is one of the most frequently used documentation tools for Python.</p>

<p>The syntax for documenting is <code>#:</code> above the variable initialization line, like this:</p>

<pre><code># module.py:

#: Very important data.
#: Use with caution.
#: @type: C{str}
data = ""important data""
</code></pre>

<p>Now when you generate your documentation, <code>data</code> will be described as module variable with given description and type <code>str</code>. You can omit the <code>@type</code> line.</p>
"
273631,"<p>As far as I can tell, the standard library doesn't have a function, though it's not too difficult to write one as suggested above.  I think the real thing I was looking for was a way to decode a string and guarantee that it wouldn't throw an exception.  The errors parameter to string.decode does that.</p>

<pre><code>def decode(s, encodings=('ascii', 'utf8', 'latin1')):
    for encoding in encodings:
    	try:
    		return s.decode(encoding)
    	except UnicodeDecodeError:
    		pass
    return s.decode('ascii', 'ignore')
</code></pre>
"
89262,"<p><a href=""https://docs.python.org/2/library/subprocess.html"">https://docs.python.org/2/library/subprocess.html</a></p>

<p>...or for a very simple command:</p>

<pre><code>import os
os.system('cat testfile')
</code></pre>
"
70567,"<p>The <code>class.__stuff</code> naming convention lets the programmer know he isn't meant to access <code>__stuff</code> from outside. The name mangling makes it unlikely anyone will do it by accident.</p>

<p>True, you still can work around this, it's even easier than in other languages (which BTW also let you do this), but no Python programmer would do this if he cares about encapsulation.</p>
"
123225,"<p>Look at module <strong>shutil</strong>. 
It contains function <strong>copyfile</strong>(<em>src</em>, <em>dst</em>) </p>
"
49169,"<p><a href=""http://peak.telecommunity.com/DevCenter/setuptools"">Setuptools</a> is the software that creates <a href=""http://peak.telecommunity.com/DevCenter/PythonEggs"">.egg files</a>. It's an extension of the <a href=""http://docs.python.org/lib/module-distutils.html""><code>distutils</code></a> package in the standard library.</p>

<p>The process involves creating a <code>setup.py</code> file, then  <code>python setup.py bdist_egg</code> creates an .egg package.</p>
"
172145,"<p>I have no problems testing with <a href=""http://myopenid.com"" rel=""nofollow"">myopenid.com</a>. I thought there would be a problem testing on my local machine but it just worked. (I'm using ASP.NET with DotNetOpenId library).</p>

<p>The 'realm' and return url must contain the port number like '<a href=""http://localhost:93359"" rel=""nofollow"">http://localhost:93359</a>'.</p>

<p>I assume it works OK because the provider does a client side redirect.</p>
"
138755,"<p>I converted Greg Hewgill's python code to C# and it worked!</p>

<pre><code>[Test]
public void ReplaceTextInQuotes()
{
  Assert.AreEqual(""axbx'cPdPe'fxgh'iPj'k"", 
    Regex.Replace(""axbx'cxdxe'fxgh'ixj'k"",
      @""x(?=[^']*'([^']|'[^']*')*$)"", ""P""));
}
</code></pre>

<p>That test passed.</p>
"
345775,"<p>You should read <a href=""http://www.diveintopython.net/power_of_introspection/and_or.html"" rel=""nofollow"">Using the and-or trick</a> (section 4.6.1) of <i>Dive Into Python</i> by Mark Pilgrim.  It turns out that the and-or trick has major pitfalls you should be aware of.</p>
"
273576,"<p>The python team has worked very hard to make the lack of backward compatibility as painless as possible, to the point where the 2.6 release of python was created with a mind towards a painless upgrade process.   Once you have upgraded to 2.6 there are scripts that you can run that will move you to 3.0 without issue.  </p>
"
58129,"<p>Well, <code>re.compile</code> certainly may:</p>

<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.compile('he(lo')
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
  File ""C:\Python25\lib\re.py"", line 180, in compile
    return _compile(pattern, flags)
  File ""C:\Python25\lib\re.py"", line 233, in _compile
    raise error, v # invalid expression
sre_constants.error: unbalanced parenthesis
</code></pre>

<p><a href=""http://docs.python.org/lib/node46.html#l2h-408"">The documentation</a> does support this, in a roundabout way - check the bottom of the ""Module Contents"" page for (brief) description of the <code>error</code> exception.</p>

<p>Unfortunately, I don't have any answer to the general question. I suppose the documentation for the various modules varies in quality and thoroughness. If there were particular modules you were interested in, you might be able to <a href=""http://www.depython.net/"">decompile</a> them (if written in Python) or even <a href=""http://www.python.org/download/"">look at the source</a>, if they're in the standard library.</p>
"
275184,"<p>As an alternative to monkeypatching, I like DI. A nascent project such as <a href=""http://code.google.com/p/snake-guice/"" rel=""nofollow"">http://code.google.com/p/snake-guice/</a> may fit the bill.</p>

<p>Or see the blog post <a href=""http://web.archive.org/web/20090628142546/http://planet.open4free.org/tag/dependency%20injection/"" rel=""nofollow"">Dependency Injection in Python</a> by Dennis Kempin (Aug '08).</p>
"
164959,"<p>You could package the whole thing up as an Amazon Machine Instance (AMI), and then have them run your app on <a href=""http://aws.amazon.com/ec2/"">Amazon EC2</a>.  The nice thing about this solution is that Amazon will <a href=""http://docs.amazonwebservices.com/AWSEC2/latest/DeveloperGuide/index.html?paidamis-intro.html"">take care of billing for you</a>, and since you're distributing the entire machine image, you can be certain that all your clients are using the same LAMP stack.  The AMI is an encrypted machine image that is configured however you want it.</p>

<p>You can have Amazon bill the client with a one-time fee, usage-based fee, or monthly fee.</p>

<p>Of course, this solution requires that your clients host their app at Amazon, and pay the appropriate fees.</p>
"
24949,"<p>If you are talking about the python interpreter or CMD.exe that is the 'parent' of your script then no, it isn't possible. In every POSIX-like system (now you're running Windows, it seems, and that might have some quirk I don't know about, YMMV) each process has three streams, standard input, standard output and standard error. Bu default (when running in a console) these are directed to the console, but redirection is possible using the pipe notation:</p>

<pre><code>python script_a.py | python script_b.py
</code></pre>

<p>This ties the standard output stream of script a to the standard input stream of script B. Standard error still goes to the console in this example. See the article on <a href=""http://en.wikipedia.org/wiki/Standard_streams"" rel=""nofollow"">standard streams</a> on Wikipedia.</p>

<p>If you're talking about a child process, you can launch it from python like so (stdin is also an option if you want two way communication):</p>

<pre><code>import subprocess
# Of course you can open things other than python here :)
process = subprocess.Popen([""python"", ""main.py""], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
x = process.stderr.readline()
y = process.stdout.readline()
process.wait()
</code></pre>

<p>See the Python <a href=""http://docs.python.org/lib/module-subprocess.html"" rel=""nofollow"">subprocess</a> module for information on managing the process. For communication, the process.stdin and process.stdout pipes are considered standard <a href=""http://docs.python.org/lib/bltin-file-objects.html"" rel=""nofollow"">file objects</a>.</p>

<p>For use with pipes, reading from standard input as <a href=""http://stackoverflow.com/questions/24931/how-to-capture-python-interpreters-andor-cmdexes-output-from-a-python-script#24939"" rel=""nofollow"">lassevk</a> suggested you'd do something like this:</p>

<pre><code>import sys
x = sys.stderr.readline()
y = sys.stdin.readline()
</code></pre>

<p>sys.stdin and sys.stdout are standard file objects as noted above, defined in the <a href=""http://docs.python.org/lib/module-sys.html"" rel=""nofollow"">sys</a> module. You might also want to take a look at the <a href=""http://docs.python.org/lib/module-pipes.html"" rel=""nofollow"">pipes</a> module.</p>

<p>Reading data with readline() as in my example is a pretty naÃ¯ve way of getting data though. If the output is not line-oriented or indeterministic you probably want to look into <a href=""http://docs.python.org/lib/poll-objects.html"" rel=""nofollow"">polling</a> which unfortunately does not work in windows, but I'm sure there's some alternative out there.</p>
"
295760,"<p>The c# partial class has been already explained here so I'll just cover the python part. You can use multiple inheritance to elegantly distribute the definition of a class.</p>

<pre><code>class A_part1:
    def m1(self):
        print ""m1""

class A_part2:
    def m2(self):
        print ""m2""

class A(A_part1, A_part2):
    pass

a = A()
a.m1()
a.m2()
</code></pre>
"
193135,"<p>You might want to look at the dependency declarations in <a href=""http://peak.telecommunity.com/DevCenter/setuptools?action=highlight&amp;value=EasyInstall#declaring-dependencies"">setuptools</a>.  This might provide a way to assure that the right packages are either available in the environment or can be installed by someone with appropriate privileges.</p>
"
118706,"<p>Although I am not blind, I have heard good things about <a href=""http://emacspeak.sourceforge.net/"">Emacspeak</a>. They've had a Python mode since their <a href=""http://emacspeak.sourceforge.net/releases/release-8.0.html"">8.0 release</a> in 1998 (they seem to be up to release 28.0!). Definitely worth checking out.</p>
"
248819,"<p>EDIT: I've actually took your code above and integrated into a command. It will properly show a completion list for you to choose.</p>

<p>You can grab it here: <a href=""http://github.com/orestis/pysmell/tree/master"" rel=""nofollow"">http://github.com/orestis/pysmell/tree/master</a> (hit download and do python setup.py install). It's rough but it works. - please report any errors on <a href=""http://code.google.com/p/pysmell/"" rel=""nofollow"">http://code.google.com/p/pysmell/</a></p>

<p>--</p>

<p>Hi, I'm the developer of PySmell. I also use a Mac, so if you can send me an email (contact info is in the source code) with your progress so far, I can try to integrate it :)</p>

<p>Oh BTW it's called PySmell - no trailing 's' :)</p>
"
303697,"<pre><code>error, = exc.args
</code></pre>

<p>This is a case of <a href=""http://docs.python.org/tutorial/datastructures.html#tuples-and-sequences"" rel=""nofollow"">sequence unpacking</a>.</p>

<p>A more readable way to write the same, and the style I personally favor, is:</p>

<pre><code>[error] = exc.args
</code></pre>

<p>There are two bits required to understand the previous example:</p>

<ol>
<li>When the left hand side of an assignment is a recursive sequence of names, the value of the right hand side must be a sequence with the same length, and each item of the RHS value is assigned to the corresponding name in the LHS.</li>
<li>A one-item tuple in python is written <code>(foo,)</code>. In most contexts, the parenthesis can be ommitted. In particular, they can be omitted next to the assignment operator.</li>
</ol>
"
124128,"<p>I'd suggest this, as it uses the least regex to accomplish your goal.  It is still functional code, but no worse then your old Perl.</p>

<pre><code>import re
var = ""barbazfoo""

m = re.search(r'(foo|bar|baz)(.+)', var)
if m.group(1) == 'foo':
    print m.group(1)
    # do something with m.group(1)
elif m.group(1) == ""bar"":
    print m.group(1)
    # do something with m.group(1)
elif m.group(1) == ""baz"":
    print m.group(2)
    # do something with m.group(2)
</code></pre>
"
68628,"<pre><code>def import_file(full_path_to_module):
    try:
        import os
        module_dir, module_file = os.path.split(full_path_to_module)
        module_name, module_ext = os.path.splitext(module_file)
        save_cwd = os.getcwd()
        os.chdir(module_dir)
        module_obj = __import__(module_name)
        module_obj.__file__ = full_path_to_module
        globals()[module_name] = module_obj
        os.chdir(save_cwd)
    except:
        raise ImportError

import_file('/home/somebody/somemodule.py')
</code></pre>
"
68747,"<p>Personally I would use a classmethod whenever I needed a static method. Mainly because I get the class as an argument.</p>

<pre><code>class myObj(object):
   def myMethod(cls)
     ...
   myMethod = classmethod(myMethod)
</code></pre>

<p>or use a decorator</p>

<pre><code>class myObj(object):
   @classmethod
   def myMethod(cls)
</code></pre>

<p>For static properties.. Its time you look up some python definition.. variable can always change. There are two types of them mutable and immutable.. Also, there are class attributes and instance attributes.. Nothing really like static attributes in the sense of java &amp; c++</p>

<p>Why use static method in pythonic sense, if it has no relation whatever to the class! If I were you, I'd either use classmethod or define the method independent from the class.</p>
"
228196,"<p>We've had great success with <a href=""http://www.jetbrains.com/teamcity/"">TeamCity</a> as our CI server and using nose as our test runner.  <a href=""http://pypi.python.org/pypi/teamcity-nose"">Teamcity plugin for nosetests</a> gives you count pass/fail, readable display for failed test( that can be E-Mailed).  You can even see details of the test failures while you stack is running.  </p>

<p>If of course supports things like running on multiple machines, and it's much simpler to setup and maintain than buildbot.</p>
"
48262,"<p>Django has a built in template helper for this exact scenario:</p>

<p><a href=""https://docs.djangoproject.com/en/dev/ref/templates/builtins/#unordered-list"" rel=""nofollow"">https://docs.djangoproject.com/en/dev/ref/templates/builtins/#unordered-list</a></p>
"
145305,"<p><a href=""http://openwetware.org/wiki/Julius_B._Lucks/Projects/Python_All_A_Scientist_Needs"">This paper, claiming python to be all a scientist needs,</a> basically says: first prototype everything in Python. Then when you need to speed a part up, use SWIG and translate this part to C.</p>
"
319007,"<p>Thanks all!  I found that I hadn't installed the developer components in MySQL.  Once that was done the problem was solved and I easily compiled the MySQLdb for Python 2.6.</p>

<p>I've made the package available at <a href=""http://www.technicalbard.com/files/MySQL-python-1.2.2.win32-py2.6.exe"" rel=""nofollow"">my site</a>.</p>
"
317021,"<p>It's hard to say what your question is, but there are some alternatives.</p>

<p>If you mean to literally execute a request using the ICMP ping protocol, you can get an  ICMP library and execute the ping request directly.  Google ""Python ICMP"" to find things like this <a href=""http://code.activestate.com/recipes/409689/"">icmplib</a>.   You might want to look at <a href=""http://www.secdev.org/projects/scapy/"">scapy</a>, also.</p>

<p>This will be much faster than using <code>os.system(""ping "" + ip )</code>.  </p>

<p>If you mean to generically ""ping"" a box to see if it's up, you can use the echo protocol on port 7.</p>

<p>For echo, you use the <a href=""http://www.python.org/doc/2.5.2/lib/module-socket.html"">socket</a> library to open the IP address and port 7.  You write something on that port, send a carriage return (<code>""\r\n""</code>) and then read the reply.</p>

<p>If you mean to ""ping"" a web site to see if the site is running, you have to use the http protocol on port 80.</p>

<p>For or properly checking a web server, you use <a href=""http://www.python.org/doc/2.5.2/lib/module-urllib2.html"">urllib2</a> to open a specific URL.  (<code>/index.html</code> is always popular) and read the response. </p>

<p>There are still more potential meaning of ""ping"" including ""traceroute"" and ""finger"".</p>
"
135720,"<pre><code>r""""""
This is an extension of the re module. It stores the last successful
match object and lets you access it's methods and attributes via
this module.

This module exports the following additional functions:
    expand  Return the string obtained by doing backslash substitution on a
            template string.
    group   Returns one or more subgroups of the match.
    groups  Return a tuple containing all the subgroups of the match.
    start   Return the indices of the start of the substring matched by
            group.
    end     Return the indices of the end of the substring matched by group.
    span    Returns a 2-tuple of (start(), end()) of the substring matched
            by group.

This module defines the following additional public attributes:
    pos         The value of pos which was passed to the search() or match()
                method.
    endpos      The value of endpos which was passed to the search() or
                match() method.
    lastindex   The integer index of the last matched capturing group.
    lastgroup   The name of the last matched capturing group.
    re          The regular expression object which as passed to search() or
                match().
    string      The string passed to match() or search().
""""""

import re as re_

from re import *
from functools import wraps

__all__ = re_.__all__ + [ ""expand"", ""group"", ""groups"", ""start"", ""end"", ""span"",
        ""last_match"", ""pos"", ""endpos"", ""lastindex"", ""lastgroup"", ""re"", ""string"" ]

last_match = pos = endpos = lastindex = lastgroup = re = string = None

def _set_match(match=None):
    global last_match, pos, endpos, lastindex, lastgroup, re, string
    if match is not None:
        last_match = match
        pos = match.pos
        endpos = match.endpos
        lastindex = match.lastindex
        lastgroup = match.lastgroup
        re = match.re
        string = match.string
    return match

@wraps(re_.match)
def match(pattern, string, flags=0):
    return _set_match(re_.match(pattern, string, flags))


@wraps(re_.search)
def search(pattern, string, flags=0):
    return _set_match(re_.search(pattern, string, flags))

@wraps(re_.findall)
def findall(pattern, string, flags=0):
    matches = re_.findall(pattern, string, flags)
    if matches:
        _set_match(matches[-1])
    return matches

@wraps(re_.finditer)
def finditer(pattern, string, flags=0):
    for match in re_.finditer(pattern, string, flags):
        yield _set_match(match)

def expand(template):
    if last_match is None:
        raise TypeError, ""No successful match yet.""
    return last_match.expand(template)

def group(*indices):
    if last_match is None:
        raise TypeError, ""No successful match yet.""
    return last_match.group(*indices)

def groups(default=None):
    if last_match is None:
        raise TypeError, ""No successful match yet.""
    return last_match.groups(default)

def groupdict(default=None):
    if last_match is None:
        raise TypeError, ""No successful match yet.""
    return last_match.groupdict(default)

def start(group=0):
    if last_match is None:
        raise TypeError, ""No successful match yet.""
    return last_match.start(group)

def end(group=0):
    if last_match is None:
        raise TypeError, ""No successful match yet.""
    return last_match.end(group)

def span(group=0):
    if last_match is None:
        raise TypeError, ""No successful match yet.""
    return last_match.span(group)

del wraps  # Not needed past module compilation
</code></pre>

<p>For example:</p>

<pre><code>if gre.match(""foo(.+)"", var):
  # do something with gre.group(1)
elif gre.match(""bar(.+)"", var):
  # do something with gre.group(1)
elif gre.match(""baz(.+)"", var):
  # do something with gre.group(1)
</code></pre>
"
110437,"<p>Please don't reinvent the wheel and use <a href=""http://code.google.com/p/django-tagging/"">django-tagging application</a> which was made exactly for your use case. It can do all queries you describe, and much more.</p>

<p>If you need to add custom fields to your Tag model, you can also take a look at <a href=""http://www.bitbucket.org/zuber/django-newtagging"">my branch of django-tagging</a>.</p>
"
346877,"<p>Using the <a href=""https://docs.djangoproject.com/en/1.4/ref/generic-views/#django-views-generic-simple-direct-to-template"" rel=""nofollow""><code>direct_to_template</code></a> generic view would be a lot simpler.  You could use the passed in parameters on one view to specify the actual template in urls.py, if you don't want to add an entry for each page:</p>

<pre><code>r'^foo/(?P&lt;template_name&gt;.+)/$','direct_to_template', {'template': 'foo_index.html'}),
</code></pre>

<p>Then import the template in your <code>foo_index.html</code>:</p>

<pre><code>{% include template_name %}
</code></pre>
"
329453,"<p>The <a href=""http://docs.python.org/library/fractions.html"" rel=""nofollow"">fractions module</a> from 2.6 can be ripped out if necessary.  Grab fractions.py, numbers.py, and abc.py;  all pure python modules. </p>

<p>You can get the single files from here (2.6 branch, 2.7 does not work): 
<a href=""http://hg.python.org/cpython/branches"" rel=""nofollow"">http://hg.python.org/cpython/branches</a></p>
"
346257,"<p>I'd say: define your own ModelAdmin class and overwrite the widget used for particular field, like:</p>

<pre><code>class ArticleAdminModelForm(forms.ModelForm):
    description = forms.CharField(widget=widgets.AdminWYMEditor)

    class Meta:
        model = models.Article
</code></pre>

<p>(AdminWYMEditor is a <code>forms.Textarea</code> subclass that adds WYMEditor with configuration specific to Django admin app).</p>

<p>See <a href=""http://web.archive.org/web/20101123194618/http://jannisleidel.com/2008/11/wysiwym-editor-widget-django-admin-interface/"" rel=""nofollow"">this blog post by Jannis Leidel</a> to see how this widget can be implemented.</p>
"
119703,"<p>You CAN mix tabs and spaces... BUT a tab is considered to be the same indentation as 8 spaces, so unless your editor is set up to consider a tab to be 8 spaces you're asking for trouble when mixing them.</p>
"
331890,"<p>If you specifically want to avoid downloading the content, you'll need to use the HEAD request method.  I believe the <code>urllib</code> and <code>urllib2</code> libraries do not support HEAD requests, so you'll have to use the lower-level <code>httplib</code> library:</p>

<pre><code>import httplib

h = httplib.HTTPConnection('www.example.com')
h.request('HEAD', '/')
response = h.getresponse()

// Check for 30x status code
if 300 &lt;= response.status &lt; 400:
    // It's a redirect
    location = response.getheader('Location')
</code></pre>
"
193927,"<p>I would normally use <code>import X</code> on module level. If you only need a single object from a module, use <code>from X import Y</code>. </p>

<p>Only use <code>import X as Y</code> in case you're otherwise confronted with a name clash.</p>

<p>I only use imports on function level to import stuff I need when the module is used as the main module, like:</p>

<pre><code>def main():
  import sys
  if len(sys.argv) &gt; 1:
     pass
</code></pre>

<p>HTH</p>
"
76560,"<p>If you are looking to do file transfers, XMLRPC is likely a bad choice.  It will require that you encode all of your data as XML (and load it into memory).</p>

<p>""Data requests"" and ""file transfers"" sounds a lot like plain old HTTP to me, but your statement of the problem doesn't make your requirements clear.  What kind of information needs to be encoded in the request?  Would a URL like ""http://yourserver.example.com/service/request?color=yellow&amp;flavor=banana"" be good enough?</p>

<p>There are lots of HTTP clients and servers in Python, none of which are especially great, but all of which I'm sure will get the job done for basic file transfers.  You can do security the ""normal"" web way, which is to use HTTPS and passwords, which will probably be sufficient.</p>

<p>If you want two-way communication then HTTP falls down, and a protocol like Twisted's <a href=""http://twistedmatrix.com/projects/core/documentation/howto/pb-intro.html"" rel=""nofollow"">perspective broker (PB)</a> or <a href=""http://twistedmatrix.com/documents/8.1.0/api/twisted.protocols.amp.html"" rel=""nofollow"">asynchronous messaging protocol (AMP)</a> might suit you better.  These protocols are certainly well-supported by Twisted.</p>
"
131522,"<p>Note that the latter approach is going against the generally accepted ""pythonic"" philosophy of <a href=""http://en.wikipedia.org/wiki/Python_syntax_and_semantics#Exceptions"" rel=""nofollow"">EAFP, or ""It is Easier to Ask for Forgiveness than Permission.""</a>, while the former follows it.</p>
"
56844,"<p>You get '5.6' if you do <code>str(round(n, 1))</code> instead of just <code>round(n, 1)</code>.</p>
"
242226,"<p>I don't know if you're familiar with <code>sed</code>, the UNIX-based (but Windows-available) text parsing program, but I've found a sed script <a href=""http://sed.sourceforge.net/grabbag/scripts/remccoms3.sed"">here</a> which will remove C/C++ comments from a file. It's very smart; for example, it will ignore '//' and '/*' if found in a string declaration, etc. From within Python, it can be used using the following code:</p>

<pre><code>import subprocess
from cStringIO import StringIO

input = StringIO(source_code) # source_code is a string with the source code.
output = StringIO()

process = subprocess.Popen(['sed', '/path/to/remccoms3.sed'],
    input=input, output=output)
return_code = process.wait()

stripped_code = output.getvalue()
</code></pre>

<p>In this program, <code>source_code</code> is the variable holding the C/C++ source code, and eventually <code>stripped_code</code> will hold C/C++ code with the comments removed. Of course, if you have the file on disk, you could have the <code>input</code> and <code>output</code> variables be file handles pointing to those files (<code>input</code> in read-mode, <code>output</code> in write-mode). <code>remccoms3.sed</code> is the file from the above link, and it should be saved in a readable location on disk. <code>sed</code> is also available on Windows, and comes installed by default on most GNU/Linux distros and Mac OS X.</p>

<p>This will probably be better than a pure Python solution; no need to reinvent the wheel.</p>
"
60945,"<p>(I used to write customer apps for Windows Mobile.)</p>

<p>Forget about python. Even if it's technically possible:</p>

<ul>
<li>your app will be big (you'll have to bundle the whole python runtime with your app)</li>
<li>your app will use lots of memory (python is a memory hog, relative to C/C++)</li>
<li>your app will be slow</li>
<li>you wont find any documentation or discussion groups to help you when you (inevitably) encounter problems</li>
</ul>

<p>Go with C/C++ (or C#). Visual Studio 2005/2008 have decent tools for those (SDK for winmo built-in, debugging on the emulator or device connected through USB), the best documentation is for those technologies plus there are active forums/discussion groups/mailing lists where you can ask for help.</p>
"
286738,"<p>Staying within the Windows interprocess communication mechanisms, we had positive experience using <em>windows named pipes</em>. 
Using Windows overlapped IO and the <code>win32pipe</code> module from <a href=""http://pywin32.sourceforge.net/"">pywin32</a>.</p>

<p>You can learn much about win32 and python in the <a href=""http://oreilly.com/catalog/9781565926219/index.html"">Python Programming On Win32 </a> book.</p>

<p>The sending part simply writes to <code>r'\\.\pipe\mypipe'</code>.</p>

<p>A listener (<code>ovpipe</code>) object holds an event handle, and waiting for a message with possible other events involves calling <code>win32event.WaitForMultipleObjects</code>.</p>

<pre><code>rc = win32event.WaitForMultipleObjects(
    eventlist,    # Objects to wait for.
    0,            # Wait for one object
    timeout)      # timeout in milli-seconds.
</code></pre>

<p>Here is part of the python overlapped listener class:</p>

<pre><code>import win32event
import pywintypes
import win32file
import win32pipe

class ovpipe:
""Overlapped I/O named pipe class""
def __init__(self):
    self.over=pywintypes.OVERLAPPED()
    evt=win32event.CreateEvent(None,1,0,None)
    self.over.hEvent=evt
    self.pname='mypipe'
    self.hpipe = win32pipe.CreateNamedPipe(
        r'\\.\pipe\mypipe',             # pipe name 
        win32pipe.PIPE_ACCESS_DUPLEX|   # read/write access
        win32file.FILE_FLAG_OVERLAPPED,
        win32pipe.PIPE_TYPE_MESSAGE|    # message-type pipe 
        win32pipe.PIPE_WAIT,            # blocking mode 
        1,                              # number of instances 
        512,                            # output buffer size 
        512,                            # input buffer size 
        2000,                           # client time-out
        None)                           # no security attributes
    self.buffer = win32file.AllocateReadBuffer(512)
    self.state='noconnected'
    self.chstate()

def execmsg(self):
    ""Translate the received message""
    pass

def chstate(self):
    ""Change the state of the pipe depending on current state""
    if self.state=='noconnected':
        win32pipe.ConnectNamedPipe(self.hpipe,self.over)
        self.state='connectwait'
        return -6

    elif self.state=='connectwait':
        j,self.strbuf=win32file.ReadFile(self.hpipe,self.buffer,self.over)
        self.state='readwait'
        return -6

    elif self.state=='readwait':
        size=win32file.GetOverlappedResult(self.hpipe,self.over,1)
        self.msg=self.strbuf[:size]
        ret=self.execmsg()
        self.state = 'noconnected'
        win32pipe.DisconnectNamedPipe(self.hpipe)
        return ret
</code></pre>
"
275758,"<p>popen2 doesn't capture standard error, popen3 does capture standard error and gives a unique file handle for it. Finally, popen4 captures standard error but includes it in the same file object as standard output.</p>
"
108939,"<p>Presumably your hack was something like this:</p>

<pre><code># Deleting all messages older than ""earliest_date""
q = db.GqlQuery(""SELECT * FROM Message WHERE create_date &lt; :1"", earliest_date)
results = q.fetch(1000)

while results:
    db.delete(results)
    results = q.fetch(1000, len(results))
</code></pre>

<p>As you say, if there's sufficient data, you're going to hit the request timeout before it gets through all the records. You'd have to re-invoke this request multiple times from outside to ensure all the data was erased; easy enough to do, but hardly ideal.</p>

<p>The admin console doesn't seem to offer any help, as (from my own experience with it), it seems to only allow entities of a given type to be listed and then deleted on a page-by-page basis.</p>

<p>When testing, I've had to purge my database on startup to get rid of existing data.</p>

<p>I would infer from this that Google operates on the principle that disk is cheap, and so data is typically orphaned (indexes to redundant data replaced), rather than deleted. Given there's a fixed amount of data available to each app at the moment (0.5 GB), that's not much help for non-Google App Engine users.</p>
"
228790,"<p>If you just want to do a frequency count of a string, try this:</p>

<pre><code>s = 'hi there'
f = {}

for c in s:
        f[c] = f.get(c, 0) + 1

print f
</code></pre>
"
324002,"<p>It is better if you don't kill a thread.
A way could be to introduce a ""try"" block into the thread's cycle and to throw an exception when you want to stop the thread (for example a break/return/... that stops your for/while/...). 
I've used this on my app and it works...</p>
"
68892,"<p>For developing portable network programs of any sort in Python, <a href=""http://twistedmatrix.com"" rel=""nofollow"">Twisted</a> is quite useful. One of its benefits is providing a convenient layer above low-level socket APIs.</p>
"
160769,"<p>Personally I try to use CamelCase for classes, mixedCase methods and functions. Variables are usually underscore separated (when I can remember). This way I can tell at a glance what exactly I'm calling, rather than everything looking the same.</p>
"
229401,"<p>Just removing the slash at the end won't work, as you can probably have a URL that looks like this:</p>

<pre><code>http://www.google.com/test.php?filepath=tests/hey.xml
</code></pre>

<p>...in which case you'll get back ""hey.xml"". Instead of manually checking for this, you can use <b>urlparse</b> to get rid of the parameters, then do the check other people suggested:</p>

<pre><code>from urlparse import urlparse
url = ""http://www.google.com/test.php?something=heyharr/sir/a.txt""
f = urlparse(url)[2].rstrip(""/"")
print f[f.rfind(""/"")+1:]
</code></pre>
"
326462,"<p>My first question - <strong>why don't you just use one of those three services you listed?</strong> It seems they do exactly what you want. Sorry for being cynical, but I doubt that you working alone could in a reasonable amount of time beat the software engineers designing the algorithms used at those websites, especially considering their source of income depends on how well they do it.</p>

<p>Then again, you might just be smarter than they are =P. I'm not one to judge. In any case, I'd recommend <strong>python</strong>, for the reasons you stated - you won't need a fancy public interface, so python's lack of excellence in this area won't matter. Python is also good for doing text processing, and it has great built-in bindings for using databases (sqlite, for example; you can, of course, install MySQL if you feel it is necessary). </p>

<p>Downsides: it might get a bit slow, depending on how sophisticated your algorithms get.</p>
"
73791,"<p>Each test is run using a new instance of the MyTest class. That means if you change self in one test, changes will not carry over to other tests, since self will refer to a different instance.</p>

<p>Additionally, as others have pointed out, setUp is called before each test.</p>
"
77693,"<blockquote>
  <p>However it's written in Python which
  means there's little real support in
  the way of deployment/packaging,
  debugging, profilers and other tools
  that make building and maintaining
  applications much easier.</p>
</blockquote>

<p>Python has:</p>

<ol>
<li>a <a href=""http://docs.python.org/lib/module-pdb.html"">great interactive debugger</a>, which makes very good use of Python <a href=""http://en.wikipedia.org/wiki/REPL"">REPL</a>. </li>
<li><a href=""http://peak.telecommunity.com/DevCenter/EasyInstall"">easy_install</a> anv <a href=""http://pypi.python.org/pypi/virtualenv"">virtualenv</a> for dependency management, packaging and deployment.</li>
<li><a href=""http://docs.python.org/lib/profile.html"">profiling features</a> comparable to other languages</li>
</ol>

<p>So IMHO you shouldn't worry about this things, use Python and Django and live happily :-)</p>

<p>Lucky for you, newest version of <a href=""http://blog.leosoto.com/2008/08/django-on-jython-its-here.html"">Django runs on Jython</a>, so you don't need to leave your whole Java ecosystem behind.</p>

<p>Speaking of frameworks, I evaluated this year:</p>

<ol>
<li><a href=""http://pylonshq.com/"">Pylons</a> (Python)</li>
<li><a href=""http://webpy.org/"">webpy</a> (Python)</li>
<li><a href=""http://www.symfony-project.org/"">Symfony</a> (PHP)</li>
<li><a href=""http://www.cakephp.org/"">CakePHP</a> (PHP)</li>
</ol>

<p>None of this frameworks comes close to the power of Django or Ruby on Rails. Based on my collegue opinion I could recommend you <a href=""http://www.kohanaphp.com/home"">kohana</a> framework. The downside is, it's written in PHP and, as far as I know, PHP doesn't have superb tools for debugging, profiling and packaging of apps.</p>

<p><strong>Edit:</strong> Here is a very good <a href=""http://bud.ca/blog/pony"">article about packaging and deployment of Python apps</a> (specifically Django apps). It's a hot topic in Django community now.</p>
"
120695,"<p>Try this:</p>

<pre><code>import os
for top, dirs, files in os.walk('./'):
    for nm in files:       
        print os.path.join(top, nm)
</code></pre>
"
285304,"<p>Exit codes of 0 usually mean, ""nothing wrong here.""  However if the programmer of the script didn't follow convention you may have to consult the source to see what it means.  Usually a non-zero value is returned as an error code.</p>
"
92778,"<p>Have you read the <a href=""http://scintilla.sourceforge.net/ScintillaDoc.html#Markers"">Markers reference in Scintilla doc</a>?
This reference can be a bit obscure, so I advise to take a look at the source code of SciTE as well. This text editor was originally a testbed for Scintilla. It grown to a full fledged editor, but it is still a good implementation reference for all things Scintilla.</p>

<p>In our particular case, there is a Mark All button in the Find dialog. You can find its implementation in SciTEBase::MarkAll() method. This method only loops on search results (until it loops on the first search result, if any) and puts a bookmark on the found lines (and optionally set an indicator on the found items).
The found line is gotten using SCI_LINEFROMPOSITION(posFound), the bookmark is just a call to SCI_MARKERADD(lineno, markerBookmark).
Note that the mark can be symbol in a margin, or if not associated to a margin, it will highlight the whole line.</p>

<p>HTH.</p>
"
278217,"<p>If <code>functools.partial</code> is not available then it can be easily emulated:</p>

<pre><code>&gt;&gt;&gt; make_printer = lambda s: lambda: sys.stdout.write(""%s\n"" % s)
&gt;&gt;&gt; import sys
&gt;&gt;&gt; print_hello = make_printer(""hello"")
&gt;&gt;&gt; print_hello()
hello
</code></pre>

<p>Or</p>

<pre><code>def partial(func, *args, **kwargs):
    def f(*args_rest, **kwargs_rest):
        kw = kwargs.copy()
        kw.update(kwargs_rest)
        return func(*(args + args_rest), **kw) 
    return f

def f(a, b):
    return a + b

p = partial(f, 1, 2)
print p() # -&gt; 3

p2 = partial(f, 1)
print p2(7) # -&gt; 8

d = dict(a=2, b=3)
p3 = partial(f, **d)
print p3(), p3(a=3), p3() # -&gt; 5 6 5
</code></pre>
"
284695,"<p>On recent Python (> 2.7) versions, you can use the <a href=""https://docs.python.org/2/library/ttk.html"" rel=""nofollow""><code>ttk</code></a> module, which provides access to the <em>Tk themed widget</em> set, which has been introduced in <code>Tk 8.5</code>.</p>

<p>Here's how you import <code>ttk</code> in Python 2:</p>

<pre><code>import ttk

help(ttk.Notebook)
</code></pre>

<p>In Python 3, the <a href=""https://docs.python.org/3.4/library/tkinter.ttk.html?highlight=ttk#module-tkinter.ttk"" rel=""nofollow""><code>ttk</code></a> module comes with the standard distributions as a submodule of <a href=""https://docs.python.org/3.4/library/tkinter.html"" rel=""nofollow""><code>tkinter</code></a>. </p>

<p>Here's a simple working example based on an example from the <a href=""http://www.tkdocs.com/tutorial/complex.html"" rel=""nofollow""><code>TkDocs</code></a> website:</p>

<pre><code>from tkinter import ttk
import tkinter as tk
from tkinter.scrolledtext import ScrolledText


def demo():
    root = tk.Tk()
    root.title(""ttk.Notebook"")

    nb = ttk.Notebook(root)

    # adding Frames as pages for the ttk.Notebook 
    # first page, which would get widgets gridded into it
    page1 = ttk.Frame(nb)

    # second page
    page2 = ttk.Frame(nb)
    text = ScrolledText(page2)
    text.pack(expand=1, fill=""both"")

    nb.add(page1, text='One')
    nb.add(page2, text='Two')

    nb.pack(expand=1, fill=""both"")

    root.mainloop()

if __name__ == ""__main__"":
    demo()
</code></pre>

<p>Another alternative is to use the <code>NoteBook</code> widget from the <a href=""https://docs.python.org/3/library/tkinter.tix.html"" rel=""nofollow""><code>tkinter.tix</code></a> library. To use <code>tkinter.tix</code>, you must have the <code>Tix</code> widgets installed, usually alongside your installation of the <code>Tk</code> widgets. To test your installation, try the following:</p>

<pre><code>from tkinter import tix
root = tix.Tk()
root.tk.eval('package require Tix')
</code></pre>

<p>For more info, check out this <a href=""https://docs.python.org/3/library/tkinter.tix.html"" rel=""nofollow"">webpage</a> on the PSF website.</p>

<p>Note that <code>tix</code> is pretty old and not well-supported, so your best choice might be to go for <code>ttk.Notebook</code>.</p>
"
60448,"<p><H2>Python CE</H2>
Python port for Windows CE (Pocket PC) devices. Intended to be as close to desktop version as possible (console, current directory support, testsuite passed). </p>

<p><a href=""http://pythonce.sourceforge.net/""><img src=""http://pythonce.sourceforge.net/images/python-logo.jpg"" alt=""Python CE"" /></a></p>

<p><img src=""http://sourceforge.net/dbimage.php?id=76454"" alt=""alt text"" /></p>
"
35978,"<p>I'm assuming that the part the doesn't work is <code>{{ user.item }}</code>.</p>

<p>Django will be trying a dictionary lookup, but using the string <code>""item""</code> and not the value of the <code>item</code> loop variable.  Django did the same thing when it resolved <code>{{ user.name  }}</code> to the <code>name</code> attribute of the <code>user</code> object, rather than looking for a variable called <code>name</code>.</p>

<p>I think you will need to do some preprocessing of the data in your view before you render it in your template.</p>
"
208156,"<pre><code>import sys

# argv is your commandline arguments, argv[0] is your program name, so skip it
for n in sys.argv[1:]:
    print(n) #print out the filename we are currently processing
    input = open(n, ""r"")
    output = open(n + "".out"", ""w"")
    # do some processing
    input.close()
    output.close()
</code></pre>

<p>Then call it like:</p>

<pre>
./foo.py bar.txt baz.txt
</pre>
"
329718,"<ol>
<li><p><strong>Is there another Python CMS?</strong>  Yes, there is.  Are they better than Django?  From some perspective, yes.  Should you change? No.  Learn Django, it's as good as or better than most.</p></li>
<li><p><strong>Perhaps all current Python CMS packages are too ""alpha.""</strong>  A shocking statement, IMO.  However, if you think you can do better, by all means, jump in.  However, it's a huge amount of work, and your goal does not say ""do a huge amount of work to invent Yet Another CMS Framework.""</p></li>
<li><p><strong>Would you deploy a CMS with built-in (or plug-in) support for blogs, forums, etc.</strong>  I don't completely get this.  There's content (i.e., blog postings, forum postings) and there's a web application (i.e., a blog site with forum  comments).  They're different beasts, web applications depend on CMS.  A CMS can (generally) handle any kind of content; therefore, blogs aren't usually described as ""plug-ins"", they're just content.  Maybe you want a pre-built content model for blogs or something?  Not sure what your question really is.</p>

<ul>
<li><strong>relying on your own website [to] re-publish Blogger.com content</strong>.  Hard to know what to say here.  It matches your goals to simply proxy or rebrand nabble.  But it doesn't match your other goals because You won't learn very much Django, CMS, or any other technology.  Since your first goal and your technology list don't match up well, I have no idea what you're planning to do: learn Django or work on your book and move your blog.  Not sure what your question really is.</li>
</ul></li>
<li><p><strong>Sometimes a CMS package has its own CSS integrated, and using another CSS framework would be redundant or otherwise make no sense.</strong>  Correct.  Not sure what your question really is.</p></li>
<li><p><strong>Are there plugins for Django in Eclipse or Netbeans?</strong>  Is this a ""let me google that for you"" question?  <a href=""http://pydev.sourceforge.net/"" rel=""nofollow"">http://pydev.sourceforge.net/</a> is the Eclipse plug-in for Python.  <a href=""http://wiki.netbeans.org/Python"" rel=""nofollow"">http://wiki.netbeans.org/Python</a> is information on the Python plug-in for Net Beans.  Django is just Python, so a Django-specific plug-in doesn't really mean much.  <a href=""http://www.activestate.com/store/download.aspx?prdGUID=20f4ed15-6684-4118-a78b-d37ff4058c5f"" rel=""nofollow"">Komodo Edit</a> knows Django template syntax and can do some syntax highlighting.  That's cool.</p></li>
<li><p><strong>What are some current preferred tools for unit and functional testing a Django application?</strong>  Python has unittest tools.  They're part of Python.  Not part of an IDE.  Django has unit testing tools.  They're part of Django -- which is just Python -- not part of an IDE.  You simply run them and they produce a text log of what happened.</p></li>
</ol>
"
102990,"<p>expanding on the ""dict as switch"" idea. if you want to use a default value for your switch:</p>

<pre><code>def f(x):
    try:
        return {
            'a': 1,
            'b': 2,
        }[x]
    except KeyError:
        return 'default'
</code></pre>
"
283802,"<p>Probably you didn't open the file in binary mode when writing and/or reading the pickled data. In this case newline format conversion will occur, which can break the binary data.</p>

<p>To open a file in binary mode you have to provide ""b"" as part of the mode string:</p>

<pre><code>char_file = open('pickle.char', 'rb')
</code></pre>
"
94597,"<p>I think you mean ""Networked Apps""? Distributed means an app that can split its workload among multiple worker clients over the network. </p>

<p>You probably want.
<a href=""http://twistedmatrix.com/trac/"">Twisted</a></p>
"
285498,"<p>I'm not a python guru, but I found this question interesting so I googled around. <a href=""http://mail.python.org/pipermail/python-list/2007-September/508180.html"">This</a> was the first hit on ""python embedding API"" - does it help?</p>

<blockquote>
  <p>If the attributes belong to the global
  scope of a module, then you can  use
  ""PyImport_AddModule"" to get a handle
  to the module object. For  example, if
  you wanted to get the value of an
  integer in the <strong>main</strong>  module named
  ""foobar"", you would do the following:</p>

<pre><code>PyObject *m = PyImport_AddModule(""__main__"");
PyObject *v = PyObject_GetAttrString(m,""foobar"");

int foobar = PyInt_AsLong(v);

Py_DECREF(v);
</code></pre>
</blockquote>
"
183866,"<p><code>//</code> implements ""floor division"", regardless of your type. So
<code>1.0/2.0</code> will give <code>0.5</code>, but both <code>1/2</code>, <code>1//2</code> and <code>1.0//2.0</code> will give <code>0</code>.</p>

<p>See <a href=""https://docs.python.org/whatsnew/2.2.html#pep-238-changing-the-division-operator"">https://docs.python.org/whatsnew/2.2.html#pep-238-changing-the-division-operator</a> for details</p>
"
120959,"<pre><code>import urlparse, urllib
def myquote(url):
    parts= urlparse.urlparse(url)
    return urlparse.urlunparse(parts[:2] + urllib.quote(parts[2]) + parts[3:])
</code></pre>

<p>This quotes only the path component.</p>

<p>Otherwise, you could do: <code>urllib.quote(url, safe="":/"")</code></p>
"
195152,"<p>You can run grails in 256 megs of ram.  Many members of the community are doing so.  That being said I would say in either platform you want much more ram than that to make sure your performant.  But I might also reccomend checking out www.linode.com.  You can get quality hosting for a very reasonable cost and adding a bit of ram for grails will not break your budget.  Also if your interested in cloud based solutions Morph is hosting grails apps.
<a href=""http://developer.mor.ph/grails"" rel=""nofollow"">http://developer.mor.ph/grails</a></p>

<p>I like Django, but I for the maturity of the platform and the amount of quality Java work out there in terms of libaries and frameworks I chose grails.  In truth I think they are both good solutions but you cannot deny that your options are much greater with grails.</p>
"
43780,"<p>Your Python interpreter is correct.
One (stupid) way of calculating a modulus is to subtract or add the modulus until the resulting value is between 0 and (modulus â 1).</p>

<p>e.g.:
13 mod 5 = (13 â 5) mod 5 = (13 â 10) mod 5 = 3</p>

<p>or in your case: â2 mod 5 = (â2 + 5) mod 5 = 3</p>
"
138079,"<p>There is also <a href=""http://msdn.microsoft.com/en-us/library/66btctbe.aspx"">Type.InvokeMember</a>.</p>

<pre><code>public static class ReflectionExt
{
    public static object GetAttr(this object obj, string name)
    {
        Type type = obj.GetType();
        BindingFlags flags = BindingFlags.Instance | 
                                 BindingFlags.Public | 
                                 BindingFlags.GetProperty;

        return type.InvokeMember(name, flags, Type.DefaultBinder, obj, null);
    }
}
</code></pre>

<p>Which could be used like:</p>

<pre><code>object value = ReflectionExt.GetAttr(obj, ""PropertyName"");
</code></pre>

<p>or (as an extension method):</p>

<pre><code>object value = obj.GetAttr(""PropertyName"");
</code></pre>
"
100404,"<p>One little thing, might add clarity to override the default value for seconds</p>

<pre><code>&gt;&gt;&gt; b = a + datetime.timedelta(seconds=3000)
&gt;&gt;&gt; b
datetime.datetime(1, 1, 1, 12, 24, 59)
</code></pre>
"
186049,"<p>You might be better off using <code>os.walk()</code> for this.</p>

<p><code>os.listdir()</code> doesn't distinguish files from directories and you will quickly get into trouble trying to unlink these. There is a good example of using <code>os.walk()</code> to recursively remove a directory <a href=""http://docs.python.org/library/os.html#os.walk"">here</a>, and hints on how to adapt it to your circumstances.</p>
"
346967,"<p>When in doubt, time it:</p>

<pre><code>from timeit import Timer

print Timer(""""""re.findall(r""\d+"", ""fg12f 1414 21af 144"")"""""", ""import re"").timeit()
print Timer(""""""findall(r""\d+"", ""fg12f 1414 21af 144"")"""""", ""from re import findall"").timeit()
</code></pre>

<p>I get the following results, using the minimum of 5 repetitions of 10,000,000 calls:</p>

<pre><code>re.findall(): 123.444600105
findall(): 122.056155205
</code></pre>

<p>There appears to be a very slight usage advantage to using <code>findall()</code> directly, rather than <code>re.findall()</code>.</p>

<p>However, the actual import statements differ in their speed by a significant amount. On my computer, I get the following results:</p>

<pre><code>&gt;&gt;&gt; Timer(""import re"").timeit()
2.39156508446
&gt;&gt;&gt; Timer(""from re import findall"").timeit()
4.41387701035
</code></pre>

<p>So <code>import re</code> appears to be approximately twice as fast to execute. Presumably, though, execution of the imported code is your bottleneck, rather than the actual import.</p>
"
184708,"<pre><code>import array
def f7(list):
    return array.array('B', list).tostring()
</code></pre>

<p>from <a href=""http://www.python.org/doc/essays/list2str.html"">Python Patterns - An Optimization Anecdote</a></p>
"
186990,"<p>I've heard that <a href=""http://www.voidspace.org.uk/python/configobj.html"" rel=""nofollow"" title=""ConfigObj"">ConfigObj</a> is easier to work with than ConfigParser.  It is used by a lot of big projects, IPython, Trac, Turbogears, etc...  </p>

<p>From their <a href=""http://www.voidspace.org.uk/python/configobj.html#introduction"" rel=""nofollow"">introduction</a>:</p>

<p>ConfigObj is a simple but powerful config file reader and writer: an ini file round tripper. Its main feature is that it is very easy to use, with a straightforward programmer's interface and a simple syntax for config files. It has lots of other features though :</p>

<ul>
<li>Nested sections (subsections), to any level</li>
<li>List values</li>
<li>Multiple line values</li>
<li>String interpolation (substitution)</li>
<li>Integrated with a powerful validation system
<ul>
<li>including automatic type checking/conversion</li>
<li>repeated sections</li>
<li>and allowing default values</li>
</ul></li>
<li>When writing out config files, ConfigObj preserves all comments and the order of members and sections</li>
<li>Many useful methods and options for working with configuration files (like the 'reload' method)</li>
<li>Full Unicode support</li>
</ul>
"
98146,"<p>Any particular reason you want to use Django's templates? Both <a href=""http://jinja.pocoo.org/"">Jinja</a> and <a href=""http://genshi.edgewall.org/"">Genshi</a> are, in my opinion, superior.</p>

<p><hr /></p>

<p>If you really want to, then see the <a href=""http://docs.djangoproject.com/en/dev/topics/settings/#topics-settings"">Django documentation on <code>settings.py</code></a>. Especially the section ""Using settings without setting <code>DJANGO_SETTINGS_MODULE</code>"". Use something like this:</p>

<pre><code>from django.conf import settings
settings.configure (FOO='bar') # Your settings go here
</code></pre>
"
209557,"<p>I suggest the awesome online book <em><a href=""http://www.diveintopython.net"">Dive Into Python</a></em>.  It's how I learned the language originally.</p>

<p>Beyone teaching you the basic structure of the language, and a whole lot of useful data structures, it has a good chapter on <a href=""http://www.diveintopython.net/file_handling/index.html"">file handling</a> and subsequent chapters on <a href=""http://www.diveintopython.net/regular_expressions/index.html"">regular expressions</a> and more.</p>
"
29255,"<p>Setting an attribute on an object won't give a compile-time or a run-time error, it will just do nothing useful if the object doesn't access it (i.e. ""<code>node.noSuchAttr = 'bar'</code>"" would also not give an error).</p>

<p>Unless you need a specific feature of <code>minidom</code>, I would look at <code>ElementTree</code>:</p>

<pre><code>import sys
from xml.etree.cElementTree import Element, ElementTree

def make_xml():
    node = Element('foo')
    node.text = 'bar'
    doc = ElementTree(node)
    return doc

if __name__ == '__main__':
    make_xml().write(sys.stdout)
</code></pre>
"
315430,"<p>This will find all files starting with two digits and ending in gif, you can add the files into a global list, if you wish:</p>

<pre><code>import re
import os
r = re.compile(r'\d{2}.+gif$')
for root, dirs, files in os.walk('/home/vinko'):
  l = [os.path.join(root,x) for x in files if r.match(x)]
  if l: print l #Or append to a global list, whatever
</code></pre>
"
137624,"<p>Mechanize itself only sends GETs and POSTs, but you can easily extend the Request class to send HEAD. Example:</p>

<pre><code>import mechanize

class HeadRequest(mechanize.Request):
    def get_method(self):
        return ""HEAD""

request = HeadRequest(""http://www.example.com/"")
response = mechanize.urlopen(request)

print response.info()
</code></pre>
"
149145,"<p>If you don't mind working at a slightly lower level, httplib2 (<a href=""http://code.google.com/p/httplib2/"">http://code.google.com/p/httplib2/</a>) is an excellent HTTP library that includes caching functionality.</p>
"
300531,"<pre><code>def unquote(text):
    def unicode_unquoter(match):
        return unichr(int(match.group(1),16))
    return re.sub(r'%u([0-9a-fA-F]{4})',unicode_unquoter,text)
</code></pre>
"
222242,"<p>To get the wsdl :</p>

<pre><code>import sys

# we use suds -&gt; https://fedorahosted.org/suds
from suds import WebFault
from suds.client import *
import urllib2

# my 2 url conf
# url_sharepoint,url_NTLM_authproxy 
import myconfig as my 

# build url
wsdl = '_vti_bin/SiteData.asmx?WSDL'
url = '/'.join([my.url_sharepoint,wsdl])


# we need a NTLM_auth_Proxy -&gt; http://ntlmaps.sourceforge.net/
# follow instruction and get proxy running
proxy_handler = urllib2.ProxyHandler({'http': my.url_NTLM_authproxy })
opener = urllib2.build_opener(proxy_handler)

client = SoapClient(url, {'opener' : opener})

print client.wsdl
</code></pre>

<p>main (mean) problem:
the sharepoint-server uses a NTLM-Auth [ :-( ]
so i had to use the NTLM-Auth-Proxy</p>

<p>To Rob and Enzondio : THANKS for your hints !</p>
"
325027,"<p>You can kill a thread by installing trace into the thread that will exit the thread.   See attached link for one possible implementation.</p>

<p><a href=""https://web.archive.org/web/20130503082442/http://mail.python.org/pipermail/python-list/2004-May/281943.html"" rel=""nofollow"">Kill a thread in Python</a> </p>
"
221569,"<p>Contrary to the accepted answer, AFAIK, (c) is not an officially recognized alternative to the copyright symbol, although I'm not sure it's been tested in court.</p>

<p>However, Â© is just an abreviation of the word Copyright. Saying ""Copyright 2008 Robert Munro"" is identical to saying ""Â© 2008 Robert Munro""</p>

<p>Your ""Copyright: Â© 2008 etc."" Expands to ""Copyright: Copyright 2008 etc.""</p>

<p>Wikipedia's page seems to agree with me <a href=""http://en.wikipedia.org/wiki/Copyright_symbol"" rel=""nofollow"">http://en.wikipedia.org/wiki/Copyright_symbol</a></p>

<p>In the United States, the copyright notice consists of three elements:
   1. the Â© symbol, <strong>or</strong> the word ""Copyright"" or abbreviation ""Copr."";
...</p>
"
142368,"<p>Note that, instead of doing <code>os.listdir(os.getcwd())</code>, it's preferable to do <code>os.listdir(os.path.curdir)</code>. One less function call, and it's as portable.</p>

<p>So, to complete the answer, to get a list of directories in a folder:</p>

<pre><code>def listdirs(folder):
    return [d for d in os.listdir(folder) if os.path.isdir(os.path.join(folder, d))]
</code></pre>

<p>If you prefer full pathnames, then use this function:</p>

<pre><code>def listdirs(folder):
    return [
        d for d in (os.path.join(folder, d1) for d1 in os.listdir(folder))
        if os.path.isdir(d)
    ]
</code></pre>
"
53037,"<ol>
<li>Put files in one folder. </li>
<li>Add &#95;&#95;init&#95;&#95;.py file to the folder. Do necessary imports in &#95;&#95;init&#95;&#95;.py</li>
<li><p>Replace multiple imports by one:</p>

<p>import folder_name  </p></li>
</ol>

<p>See <a href=""http://docs.python.org/tut/node8.html#SECTION008400000000000000000"" rel=""nofollow"">Python Package Management</a></p>
"
247740,"<p>or </p>

<pre><code>os.system(""start excel.exe &lt;path/to/file&gt;"")
</code></pre>

<p>(presuming it's in the path, and you're on windows)</p>

<p>and also on Windows, just <code>start &lt;filename&gt;</code> works, too - if it's an associated extension already (as xls would be)</p>
"
77898,"<p><strong>zacherates</strong> writes:</p>

<blockquote>
  <p>I'd model Role as an association class between Users and Roles (...)</p>
</blockquote>

<p>I'd also reccomed this solution, but you can also make use of some syntactical sugar provided by Django: <a href=""http://docs.djangoproject.com/en/dev/topics/db/models/#extra-fields-on-many-to-many-relationships"">ManyToMany relation with extra fields</a>.</p>

<p>Example:</p>

<pre><code>class User(models.Model):
    name = models.CharField(max_length=128)

class Event(models.Model):
    name = models.CharField(max_length=128)
    members = models.ManyToManyField(User, through='Role')

    def __unicode__(self):
        return self.name

class Role(models.Model):
    person = models.ForeignKey(User)
    group = models.ForeignKey(Event)
    date_joined = models.DateField()
    invite_reason = models.CharField(max_length=64)
</code></pre>
"
260731,"<p>I can reproduce this by installing GConf 2.24 on my machine. GConf 2.22 works fine, but 2.24 breaks it.</p>

<p>GConf is failing to launch because D-Bus is not running. Manually spawning D-Bus and the GConf daemon makes this work again.</p>

<p>I tried to spawn the D-Bus session bus by doing the following:</p>

<pre><code>import dbus
dummy_bus = dbus.SessionBus()
</code></pre>

<p>...but got this:</p>

<pre><code>dbus.exceptions.DBusException: org.freedesktop.DBus.Error.Spawn.ExecFailed: dbus-launch failed to autolaunch D-Bus session: Autolaunch error: X11 initialization failed.
</code></pre>

<p>Weird. Looks like it doesn't like to come up if X isn't running. To work around that, start dbus-launch manually (IIRC use the <a href=""http://www.python.org/doc/2.5.2/lib/os-process.html"">os.system()</a> call):</p>

<pre><code>$ dbus-launch 
DBUS_SESSION_BUS_ADDRESS=unix:abstract=/tmp/dbus-eAmT3q94u0,guid=c250f62d3c4739dcc9a12d48490fc268
DBUS_SESSION_BUS_PID=15836
</code></pre>

<p>You'll need to parse the output somehow and inject them into environment variables (you'll probably want to use <a href=""http://www.python.org/doc/2.5.2/lib/os-procinfo.html"">os.putenv</a>). For my testing, I just used the shell, and set the environment vars manually with <code>export DBUS_SESSION_BUS_ADDRESS=blahblah...</code>, etc.</p>

<p>Next, you need to launch <code>gconftool-2 --spawn</code> with those environment variables you received from <code>dbus-launch</code>. This will launch the GConf daemon. If the D-Bus environment vars are not set, the daemon will not launch.</p>

<p>Then, run your GConf code. Provided you set the D-Bus session bus environment variables for your own script, you will now be able to communicate with the GConf daemon.</p>

<p>I know it's complicated.</p>

<p><code>gconftool-2</code> provides a <code>--direct</code> option that enables you to set GConf variables without needing to communicate with the server, but I haven't been able to find an equivalent option for the Python bindings (short of outputting XML manually).</p>

<p><em>Edit:</em> For future reference, if anybody wants to run <code>dbus-launch</code> from within a normal <code>bash</code> script (as opposed to a Python script, as this thread is discussing), it is quite easy to retrieve the session bus address for use within the script:</p>

<pre><code>#!/bin/bash

eval `dbus-launch --sh-syntax`

export DBUS_SESSION_BUS_ADDRESS
export DBUS_SESSION_BUS_PID

do_other_stuff_here
</code></pre>
"
260394,"<p>If you are running Python on a POSIX system, you can use 'tail -10' to retrieve the last few lines. This may be faster than writing your own Python code to get the last 10 lines. Rather than opening the file directly, open a pipe from the command 'tail -10 filename'. If you are certain of the log output though (for example, you know that there are <strong>never</strong> any very long lines that are hundreds or thousands of characters long) then using one of the 'read the last 2KB' approaches listed would be fine.</p>
"
295465,"<p>Probably the best way to handle this is to split up the code, so that logic that processes the page contents is split from the code that fetches the page.</p>

<p>Then pass an instance of the fetcher code into the processing logic, then you can easily replace it with a mock fetcher for the unit test.</p>

<p>e.g.</p>

<pre><code>class Processor(oject):
    def __init__(self, fetcher):
        self.m_fetcher = fetcher

    def doProcessing(self):
        ## use self.m_fetcher to get page contents

class RealFetcher(object):
    def fetchPage(self, url):
        ## get real contents

class FakeFetcher(object):
    def fetchPage(self, url):
        ## Return whatever fake contents are required for this test
</code></pre>
"
262789,"<p>You could try the <a href=""http://www.microsoft.com/downloads/details.aspx?familyid=F851122A-4925-4788-BC39-409644CE0F9B&amp;displaylang=en"" rel=""nofollow"">Microsoft Windows MultiPoint Software Development Kit 1.1</a></p>

<p>or the new
<a href=""http://www.microsoft.com/downloads/details.aspx?FamilyID=0eb18c26-5e02-4c90-ae46-06662818f817&amp;displaylang=en"" rel=""nofollow"">Microsoft Windows MultiPoint Software Development Kit 1.5</a></p>

<p>and the main <a href=""http://www.microsoft.com/multipoint/mouse-sdk/"" rel=""nofollow"">Microsoft Multipoint</a> site</p>
"
261797,"<p>Depending in who the client is, a simple protection mechanism, combined with a sensible license agreement will be <em>far</em> more effective than any complex licensing/encryption/obfuscation system.</p>

<p>The best solution would be selling the code as a service, say by hosting the service, or offering support - although that isn't always practical.</p>

<p>Shipping the code as <code>.pyc</code> files will prevent your protection being foiled by a few <code>#</code>s, but it's hardly effective anti-piracy protection (as if there is such a technology), and at the end of the day, it shouldn't achieve anything that a decent license agreement with the company will.</p>

<p>Concentrate on making your code as nice to use as possible - having happy customers will make your company far more money than preventing some theoretical piracy..</p>
"
261766,"<p>A solution using groupby</p>

<pre><code>    &gt;&gt;&gt; from itertools import groupby
    &gt;&gt;&gt; l = [('a',1), ('a', 2),('a', 3),('b', 1),('b', 2),('c', 1),]
    &gt;&gt;&gt; [(label, [v for l,v in value]) for (label, value) in groupby(l, lambda x:x[0])]
    [('a', [1, 2, 3]), ('b', [1, 2]), ('c', [1])]
</code></pre>

<p>groupby(l, lambda x:x[0]) gives you an iterator that contains ['a', [('a', 1), ...], c, [('c', 1)], ...]</p>
"
118308,"<p>Here's another path you can use.  I'm not sure if this is part of the standard distribution or if the file is automatically created on first use of the IDLE.</p>

<pre><code>C:\Python25\Lib\idlelib\idle.pyw
</code></pre>
"
204916,"<p>The ideal setup would be close to <a href=""http://www.igvita.com/2008/02/11/nginx-and-memcached-a-400-boost/"" rel=""nofollow"">this</a>:</p>

<p><img src=""http://www.igvita.com/posts/02-08/nginx-memcached.png"" alt=""caching"" /></p>

<p>In short, <a href=""http://wiki.codemongers.com/"" rel=""nofollow"">nginx</a> is a fast and light webserver/front-proxy with a unique module that let's it fetch data directly from <a href=""http://www.danga.com/memcached/"" rel=""nofollow"">memcached</a>'s RAM store, without hitting the disk, or any dynamic webapp.  Of course, if the request's URL wasn't already cached (or if it has expired), the request proceeds to the webapp as usual.  The genius part is that when the webapp has generated the response, a copy of it goes to memcached, ready to be reused.</p>

<p>All this is perfectly applicable not only to webpages, but to AJAX query/responses.</p>

<p>in the article the 'back' servers are http, and specifically talk about mongrel. It would be even better if the back were FastCGI and other (faster?) framework; but it's a lot less critical, since the nginx/memcached team absorb the biggest part of the load.</p>

<p>note that if your url scheme for the AJAX traffic is well designed (REST is best, IMHO), you can put most of the DB right in memcached, and any POST (which WILL pass to the app) can preemptively update the cache.</p>
"
52006,"<p>Postgres is doing a lot more than it looks like (maintaining data consistency for a start!)</p>

<p>If the values don't have to be 100% spot on, or if the table is updated rarely, but you are running this calculation often, you might want to look into Materialized Views to speed it up.</p>

<p>(Note, I have not used materialized views in Postgres, they look at little hacky, but might suite your situation).</p>

<p><a href=""http://jonathangardner.net/tech/w/PostgreSQL/Materialized_Views"">Materialized Views</a></p>

<p>Also consider the overhead of actually connecting to the server and the round trip required to send the request to the server and back.</p>

<p>I'd consider 200ms for something like this to be pretty good, A quick test on my oracle server, the same table structure with about 500k rows and no indexes, takes about 1 - 1.5 seconds, which is almost all just oracle sucking the data off disk.</p>

<p>The real question is, is 200ms fast enough?</p>

<p>-------------- More --------------------</p>

<p>I was interested in solving this using materialized views, since I've never really played with them. This is in oracle.</p>

<p>First I created a MV which refreshes every minute.</p>

<pre><code>create materialized view mv_so_x 
build immediate 
refresh complete 
START WITH SYSDATE NEXT SYSDATE + 1/24/60
 as select count(*),avg(a),avg(b),avg(c),avg(d) from so_x;
</code></pre>

<p>While its refreshing, there is no rows returned</p>

<pre><code>SQL&gt; select * from mv_so_x;

no rows selected

Elapsed: 00:00:00.00
</code></pre>

<p>Once it refreshes, its MUCH faster than doing the raw query</p>

<pre><code>SQL&gt; select count(*),avg(a),avg(b),avg(c),avg(d) from so_x;

  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)
---------- ---------- ---------- ---------- ----------
   1899459 7495.38839 22.2905454 5.00276131 2.13432836

Elapsed: 00:00:05.74
SQL&gt; select * from mv_so_x;

  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)
---------- ---------- ---------- ---------- ----------
   1899459 7495.38839 22.2905454 5.00276131 2.13432836

Elapsed: 00:00:00.00
SQL&gt;
</code></pre>

<p>If we insert into the base table, the result is not immediately viewable view the MV.</p>

<pre><code>SQL&gt; insert into so_x values (1,2,3,4,5);

1 row created.

Elapsed: 00:00:00.00
SQL&gt; commit;

Commit complete.

Elapsed: 00:00:00.00
SQL&gt; select * from mv_so_x;

  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)
---------- ---------- ---------- ---------- ----------
   1899459 7495.38839 22.2905454 5.00276131 2.13432836

Elapsed: 00:00:00.00
SQL&gt;
</code></pre>

<p>But wait a minute or so, and the MV will update behind the scenes, and the result is returned fast as you could want.</p>

<pre><code>SQL&gt; /

  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)
---------- ---------- ---------- ---------- ----------
   1899460 7495.35823 22.2905352 5.00276078 2.17647059

Elapsed: 00:00:00.00
SQL&gt;
</code></pre>

<p>This isn't ideal. for a start, its not realtime, inserts/updates will not be immediately visible. Also, you've got a query running to update the MV whether you need it or not (this can be tune to whatever time frame, or on demand). But, this does show how much faster an MV can make it seem to the end user, if you can live with values which aren't quite upto the second accurate.</p>
"
78482,"<p>It can be done. As of Python 2.5, however, this mechanism is Linux-specific and not portable:</p>

<pre><code>import subprocess
import sys

file = sys.argv[1]
p1 = subprocess.Popen(['hg', 'cat', file], stdout=subprocess.PIPE)
p2 = subprocess.Popen([
    'gvimdiff',
    '/proc/self/fd/%s' % p1.stdout.fileno(),
    file])
p2.wait()
</code></pre>

<p>That said, in the specific case of diff, you can simply take one of the files from stdin, and remove the need to use the bash-alike functionality in question:</p>

<pre><code>file = sys.argv[1]
p1 = subprocess.Popen(['hg', 'cat', file], stdout=subprocess.PIPE)
p2 = subprocess.Popen(['diff', '-', file], stdin=p1.stdout)
diff_text = p2.communicate()[0]
</code></pre>
"
179023,"<blockquote>
  <p>I haven't a clue about encryption at all. But I need it. How?</p>
</blockquote>

<p><strong>DANGER!</strong> If you don't know much about cryptography, don't try to implement it yourself.  Cryptography is <em>hard to get right</em>.  There are many, many different ways to break the security of a cryptographic system beyond actually cracking the key (which is usually very hard).</p>

<p>If you just slap a cipher on your streaming data, without careful key management and other understanding of the subtleties of cryptographic systems, you will likely open yourself up to all kinds of vulnerabilities. For example, the scheme you describe will be vulnerable to <a href=""http://wikipedia.org/wiki/Man-in-the-middle_attack"" rel=""nofollow"">man-in-the-middle attacks</a> without some specific plan for key distribution among the nodes, and may be vulnerable to <a href=""http://wikipedia.org/wiki/Chosen-plaintext_attack"" rel=""nofollow"">chosen-plaintext</a> and/or <a href=""http://wikipedia.org/wiki/Known-plaintext_attack"" rel=""nofollow"">known-plaintext attacks</a> depending on how your distributed system communicates with the outside world, and the exact choice of cipher and <a href=""http://wikipedia.org/wiki/Block_cipher_mode"" rel=""nofollow"">mode of operation</a>.</p>

<p>So... you will have to read up on crypto in general before you can use it securely.</p>
"
204853,"<p>I can't speak to the MySQL/PostgreSQL question as I have limited experience with Postgres, but my Masters research project was about high-performance websites with CherryPy, and I don't think you'll be disappointed if you use CherryPy for your site.  It can easily scale to thousands of simultaneous users on commodity hardware.</p>

<p>Of course, the same could be said for PHP, and I don't know of any reasonable benchmarks comparing PHP and CherryPy performance.  But if you were wondering whether CherryPy can handle a high-traffic site with a huge number of requests per second, the answer is definitely yes.</p>
"
166563,"<p>whatismyip.org is better... it just tosses back the ip as plaintext with no extraneous crap.</p>

<pre><code>import urllib
ip = urllib.urlopen('http://whatismyip.org').read()
</code></pre>

<p>But yeah, it's impossible to do it easily without relying on something outside the network itself.</p>
"
326660,"<p>This is a sociological question, not a programming question.</p>

<p>I use Lua for general-purpose scripting almost exclusively.  But I had to write a few hundred lines of code so that Lua would play better with the shell.  This included such tricks as </p>

<ul>
<li>Quoting a string so it is seen as one word by the shell</li>
<li>Writing a function to capture the output of a command as in shell $(command)</li>
<li>Writing a function to crawl the filesystem using the Lua posix library and expand shell globbing patterns</li>
</ul>

<p>(For those who may be interested, I've left the code in my <a href=""http://www.cs.tufts.edu/~nr/drop/lua/"">Lua drop box</a>, which also contains some other stuff.  The interesting stuff is probably in <code>osutil</code> in <code>os.quote</code>, <code>os.runf</code>, <code>os.capture</code>, and maybe <code>os.execve</code>.  The globbing is in <a href=""http://www.cs.tufts.edu/~nr/drop/lua/posixutil.lua""><code>posixutil.lua</code></a>.  They both use Luiz Henrique de Figuereido's <a href=""http://www.tecgraf.puc-rio.br/~lhf/ftp/lua/"">Lua Posix library</a>.)</p>

<p>To me, the extra effort is worth it because I can deal with simple syntax and great data structures.  To others, a more direct connection with the shell might be preferred.</p>
"
67715,"<p>Do you mean load or import?</p>

<p>You can manipulate the sys.path list specify the path to your module, then import your module. For example, given a module at:</p>

<pre><code>/foo/bar.py
</code></pre>

<p>You could do:</p>

<pre><code>import sys
sys.path[0:0] = '/foo' # puts the /foo directory at the start of your path
import bar
</code></pre>
"
147844,"<p>There is a <a href=""http://www.phyast.pitt.edu/~micheles/python/documentation.html"">decorator module</a> with <code>decorator</code> decorator you can use:</p>

<pre><code>@decorator
def args_as_ints(f, *args, **kwargs):
    args = [int(x) for x in args]
    kwargs = dict((k, int(v)) for k, v in kwargs.items())
    return f(*args, **kwargs)
</code></pre>

<p>Then the signature and help of the method is preserved:</p>

<pre><code>&gt;&gt;&gt; help(funny_function)
Help on function funny_function in module __main__:

funny_function(x, y, z=3)
    Computes x*y + 2*z
</code></pre>

<p>EDIT: J. F. Sebastian pointed out that I didn't modify <code>args_as_ints</code> function -- it is fixed now.</p>
"
147790,"<p>There are a few points to consider.</p>

<p>A \u2018 character may appear only as a fragment of representation of a unicode string in Python, e.g. if you write:</p>

<pre><code>&gt;&gt;&gt; text = u'â'
&gt;&gt;&gt; print repr(text)
u'\u2018'
</code></pre>

<p>Now if you simply want to print the unicode string prettily, just use unicode's <code>encode</code> method:</p>

<pre><code>&gt;&gt;&gt; text = u'I don\u2018t like this'
&gt;&gt;&gt; print text.encode('utf-8')
I donât like this
</code></pre>

<p>To make sure that every line from any file would be read as unicode, you'd better use the <code>codecs.open</code> function instead of just <code>open</code>, which allows you to specify file's encoding:</p>

<pre><code>&gt;&gt;&gt; import codecs
&gt;&gt;&gt; f1 = codecs.open(file1, ""r"", ""utf-8"")
&gt;&gt;&gt; text = f1.read()
&gt;&gt;&gt; print type(text)
&lt;type 'unicode'&gt;
&gt;&gt;&gt; print text.encode('utf-8')
I donât like this
</code></pre>
"
224722,"<p>This is a simpler version of your DictObj class:</p>

<pre><code>class DictObj(object):
    def __getattr__(self, attr):
        return self.__dict__.get(attr)

&gt;&gt;&gt; d = DictObj()
&gt;&gt;&gt; d.something = 'one'
&gt;&gt;&gt; print d.something
one
&gt;&gt;&gt; print d.somethingelse
None
&gt;&gt;&gt;
</code></pre>
"
152111,"<p>In general, this usually indicates that the method is effectively internal, rather than part of the documented interface, and should not be relied on.  Future versions of the library are free to rename or remove such methods, so if you care about future compatability without having to rewrite, avoid doing it.</p>
"
152083,"<p>It is intentional (in Python) that there are no ""private"" scopes. It is a convention that anything that starts with an underscore should not ideally be used, and hence you may not complain if its behavior or definition changes in a next version.</p>
"
327024,"<p>In these micro-benchmarks, math.sqrt will be slower, because of the slight time it takes to lookup the sqrt in the math namespace. You can improve it slightly with </p>

<pre><code> from math import sqrt
</code></pre>

<p>Even then though, running a few variations through timeit, show a slight (4-5%) performance advantage for ""x**.5""</p>

<p>interestingly, doing</p>

<pre><code> import math
 sqrt = math.sqrt
</code></pre>

<p>sped it up even more, to within 1% difference in speed, with very little statistical significance.</p>

<p>I will repeat Kibbee, and say that this is probably a premature optimization.</p>
"
43364,"<p>I use catdoc or antiword for this, whatever gives the result that is the easiest to parse. I have embedded this in python functions, so it is easy to use from the parsing system (which is written in python).</p>

<pre><code>import os

def doc_to_text_catdoc(filename):
    (fi, fo, fe) = os.popen3('catdoc -w ""%s""' % filename)
    fi.close()
    retval = fo.read()
    erroroutput = fe.read()
    fo.close()
    fe.close()
    if not erroroutput:
        return retval
    else:
        raise OSError(""Executing the command caused an error: %s"" % erroroutput)

# similar doc_to_text_antiword()
</code></pre>

<p>The -w switch to catdoc turns off line wrapping, BTW.</p>
"
34330,"<p>Here is code to install a python-script as a service, written in python :)</p>

<p><a href=""http://code.activestate.com/recipes/551780/"">http://code.activestate.com/recipes/551780/</a></p>

<p>This post could also help you out:</p>

<p><a href=""http://essiene.blogspot.com/2005/04/python-windows-services.html"">http://essiene.blogspot.com/2005/04/python-windows-services.html</a></p>
"
118713,"<p>I've tested and used BeautifulSoup with both IPy 1.1 and 2.0 (forget which beta, but this was a few months back). Leave a comment if you are still having trouble and I'll dig out my test code and post it.</p>
"
80449,"<p>Since this question is tagged with regex, I decided to try a regex approach. I first replace all the spaces in the quotes parts with \x00, then split by spaces, then replace the \x00 back to spaces in each part.</p>

<p>Both versions do the same thing, but splitter is a bit more readable then splitter2.</p>

<pre><code>import re

s = 'this is ""a test"" some text ""another test""'

def splitter(s):
    def replacer(m):
        return m.group(0).replace("" "", ""\x00"")
    parts = re.sub('"".+?""', replacer, s).split()
    parts = [p.replace(""\x00"", "" "") for p in parts]
    return parts

def splitter2(s):
    return [p.replace(""\x00"", "" "") for p in re.sub('"".+?""', lambda m: m.group(0).replace("" "", ""\x00""), s).split()]

print splitter2(s)
</code></pre>
"
294528,"<p>I wrote <a href=""http://nedbatchelder.com/code/cog/index.html"">Cog</a> partly to generate C++ code from an XML data schema.  It lets you use Python code embedded in C++ source files to generate C++ source.</p>
"
22208,"<p>Meanwhile, I did a refined research to verify what the internal representation in Python is, and also what its limits are. ""<a href=""http://www.cmlenz.net/archives/2008/07/the-truth-about-unicode-in-python"">The Truth About Unicode In Python</a>"" is a very good article which cites directly from the Python developers. Apparently, internal representation is either UCS-2 or UCS-4 depending on a compile-time switch. So Jon, it's not UTF-16, but your answer put me on the right track anyway, thanks.</p>
"
74590,"<p>Why not D-Bus?  It's a very simple message passing system that runs on almost all platforms and is designed for robustness.  It's supported by pretty much every scripting language at this point.</p>

<p><a href=""http://freedesktop.org/wiki/Software/dbus"">http://freedesktop.org/wiki/Software/dbus</a></p>
"
73186,"<p>You could use a custom comparison function, or you could pass in a function that calculates a custom sort key. That's usually more efficient as the key is only calculated once per item, while the comparison function would be called many more times.</p>

<p>You could do it this way:</p>

<pre><code>def mykey(adict): return adict['name']
x = [{'name': 'Homer', 'age': 39}, {'name': 'Bart', 'age':10}]
sorted(x, key=mykey)
</code></pre>

<p>But the standard library contains a generic routine for getting items of arbitrary objects: <code>itemgetter</code>. So try this instead:</p>

<pre><code>from operator import itemgetter
x = [{'name': 'Homer', 'age': 39}, {'name': 'Bart', 'age':10}]
sorted(x, key=itemgetter('name'))
</code></pre>
"
176033,"<p>My understanding is that arrays are stored more efficiently (i.e. as contiguous blocks of memory vs. pointers to Python objects), but I am not aware of any performance benefit.  Additionally, with arrays you must store primitives of the same type, whereas lists can store anything.</p>
"
45016,"<p>Have you tried View -> Zoom -> Reset on both sites?</p>
"
310817,"<p>If you want to do things low-level, use <a href=""http://spacepants.org/src/pymad/"" rel=""nofollow"">pymad</a>. It turns MP3s into a buffer of sample data.</p>

<p>If you want something a little higher-level, use the Echo Nest <a href=""http://code.google.com/p/echo-nest-remix/"" rel=""nofollow"">Remix API</a> (disclosure: I wrote part of it for my dayjob). It includes a few examples. If you look at the <a href=""http://code.google.com/p/echo-nest-remix/source/browse/#svn/trunk/examples/cowbell"" rel=""nofollow"">cowbell</a> example (i.e., <a href=""http://morecowbell.dj"" rel=""nofollow"">MoreCowbell.dj</a>), you'll see a fork of pymad that gives you a <a href=""http://numpy.scipy.org/"" rel=""nofollow"">NumPy</a> array instead of a buffer. That datatype makes it easier to slice out sections and do math on them.</p>
"
134631,"<p>They are <b>completely different</b>.  <code>is</code> checks for object identity, while <code>==</code> checks for equality (a notion that depends on the two operands' types).</p>

<p>It is only a lucky coincidence that ""<code>is</code>"" seems to work correctly with small integers (e.g. 5 == 4+1).  That is because CPython optimizes the storage of integers in the range (-5 to 256) by making them singletons: <a href=""https://docs.python.org/2/c-api/int.html#c.PyInt_FromLong"" rel=""nofollow"">https://docs.python.org/2/c-api/int.html#c.PyInt_FromLong</a></p>
"
311769,"<p>It's simpler to use split than a regex.</p>

<pre><code>&gt;&gt;&gt; line=""$GPRMC,092204.999,4250.5589,S,14718.5084,E,1,12,24.4,89.6,M,,,0000*1F ""
&gt;&gt;&gt; line.split(',')
['$GPRMC', '092204.999', '4250.5589', 'S', '14718.5084', 'E', '1', '12', '24.4', '89.6', 'M', '', '', '0000*1F ']
&gt;&gt;&gt;
</code></pre>
"
206617,"<p>You can <a href=""http://www.plope.org/Members/chrism/flymake-mode"" rel=""nofollow"">use Pyflakes together with Flymake</a> in order to get instant notification when your python code is valid (and avoids a few common pitfalls as well).</p>
"
290650,"<p>""how easy is CGI programming in python?""  Easier than C, that's for sure.  Python is easier because -- simply -- it's an easier language to work with than C.  First and foremost: no memory allocation-deallocation.  Beyond that, the OO programming model is excellent.</p>

<p>Beyond the essential language simplicity, the Python <a href=""http://www.wsgi.org/wsgi/"">WSGI</a> standard is much easier to cope with than the CGI standard.</p>

<p>However, raw CGI is a huge pain when compared with the greatly simplified world of an all-Python framework (<a href=""http://turbogears.org/"">TurboGears</a>, <a href=""http://www.cherrypy.org/"">CherryPy</a>, <a href=""http://www.djangoproject.com/"">Django</a>, whatever.)</p>

<p>The frameworks impose a lot of (necessary) structure.  The out-of-the-box experience for a CGI programmer is that it's too much to learn.  True.  All new things are too much to learn.  However, the value far exceeds the investment.</p>

<p>With Django, you're up and running within minutes.  Seriously.  <code>django-admin.py startproject</code> and you have something you can run almost immediately.  You do have to design your URL's, write view functions and design page templates.  All of which is work.  But it's <em>less</em> work than CGI in C.  </p>

<p>Django has a better architecture than PHP because the presentation templates are completely separated from the processing.  This leads to some confusion (see <a href=""http://stackoverflow.com/questions/276345/syntax-error-whenever-i-put-python-code-inside-a-django-template"">Syntax error whenever I put python code inside a django template</a>) when you want to use the free-and-unconstrained PHP style on the Django framework.</p>

<p><strong>linking the user interface to the back-end</strong></p>

<p>Python front-end (Django, for example) uses Python view functions.  Those view functions can contain any Python code at all.  That includes, if necessary, modules written in C and callable from Python.</p>

<p>That means you can compile a <a href=""http://clipsrules.sourceforge.net/"">CLIPS</a> module with a Python-friendly interface.  It becomes something available to your Python code with the <code>import</code> statement.</p>

<p>Sometimes, however, that's ineffective because your Django pages are waiting for the CLIPS engine to finish.  An alternative is to use something like a named pipe.</p>

<p>You have your CLIPS-based app, written entirely in C, reading from a named pipe.  Your Django application, written entirely in Python, writes to that named pipe.  Since you've got two independent processes, you'll max out all of your cores pretty quickly like this.</p>
"
269364,"<p>I doubt there's an established MIME type.  Have you considered using JSON instead, it is almost the same as a Python dict, and has a better established culture of tools and techniques.</p>
"
344060,"<p>According to this page, UTM is supported by proj4js.</p>

<p><a href=""http://trac.osgeo.org/proj4js/wiki/UserGuide#Supportedprojectionclasses"">http://trac.osgeo.org/proj4js/wiki/UserGuide#Supportedprojectionclasses</a></p>

<p>You may also want to take a look at <a href=""http://gdal.org"">GDAL</a>.  The gdal library has excellent python support, though it may be a bit overkill if you're only doing projection conversion.</p>
"
14320,"<p>There's nothing that will automatically do what you want.</p>

<p>However, there is a python zipfile module that will make this easy to do.  Here's how to iterate over the lines in the file.</p>

<pre><code>#!/usr/bin/python

import zipfile
f = zipfile.ZipFile('myfile.zip')

for subfile in f.namelist():
    print subfile
    data = f.read(subfile)
    for line in data.split('\n'):
        print line
</code></pre>
"
265472,"<p>If you're doing a lot of this kind of thing, you want to learn about <a href=""http://scipy.org/""><code>scipy</code>.</a></p>

<pre><code>&gt;&gt;&gt; import scipy
&gt;&gt;&gt; sum(scipy.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))
array([12, 15, 18])
</code></pre>

<p>All array sizes are checked for you automatically.  The sum is done in pure C, so it's very fast.  <code>scipy</code> arrays are also very memory efficient.</p>

<p>The drawback is you're dependent on a fairly complex third-party module.  But that's a very good tradeoff for many purposes.</p>
"
327313,"<p>Use tuples.<br />
Tuples can be keys to dictionaries, so you don't need to nest dictionaries.</p>

<pre><code>d = {}
d[ word1, word2, word3 ] = 1
</code></pre>

<p>Also as a plus, you could use defaultdict   </p>

<ul>
<li>so that elements that don't have entries always return 0</li>
<li>and so that u can say <code>d[w1,w2,w3] += 1</code> without checking if the key already exists or not</li>
</ul>

<p>example:</p>

<pre><code>from collections import defaultdict
d = defaultdict(int)
d[""first"",""word"",""tuple""] += 1
</code></pre>

<p>If you need to find all words ""word3"" that are tupled with (word1,word2) then search for it in dictionary.keys() using list comprehension</p>

<p>if you have a tuple, t, you can get the first two items using slices:</p>

<pre><code>&gt;&gt;&gt; a = (1,2,3)
&gt;&gt;&gt; a[:2]
(1, 2)
</code></pre>

<p>a small example for searching tuples with list comprehensions:</p>

<pre><code>&gt;&gt;&gt; b = [(1,2,3),(1,2,5),(3,4,6)]
&gt;&gt;&gt; search = (1,2)
&gt;&gt;&gt; [a[2] for a in b if a[:2] == search]
[3, 5]
</code></pre>

<p>You see here, we got a list of all items that appear as the third item in the tuples that start with (1,2)</p>
"
201550,"<p>unobfuscating it:</p>

<pre><code>def r(a):
    i = a.find('0') # returns -1 on fail, index otherwise
    ~i or exit(a) # ~(-1) == 0, anthing else is not 0
                  # thus: if i == -1: exit(a)
    inner_lexp = [ (i-j)%9*(i/9 ^ j/9)*(i/27 ^ j/27 | i%9/3 ^ j%9/3) or a[j] 
                   for j in range(81)]  # r appears to be a string of 81 
                                        # characters with 0 for empty and 1-9 
                                        # otherwise
    [m in inner_lexp or r(a[:i]+m+a[i+1:]) for m in'%d'%5**18] # recurse
                            # trying all possible digits for that empty field
                            # if m is not in the inner lexp

from sys import *
r(argv[1]) # thus, a is some string
</code></pre>

<p>So, we just need to work out the inner list expression. I know it collects the digits set in the line -- otherwise, the code around it makes no sense. However, I have no real clue how it does that (and Im too tired to work out that binary fancyness right now, sorry)</p>
"
312741,"<p>I got it working quite well with emacs 23. The only open issue is the focus not returning to the python buffer after sending the buffer to the iPython interpreter.</p>

<p><a href=""http://www.emacswiki.org/emacs/PythonMode#toc10"" rel=""nofollow"">http://www.emacswiki.org/emacs/PythonMode#toc10</a></p>

<pre><code>(setq load-path
      (append (list nil
                    ""~/.emacs.d/python-mode-1.0/""
            ""~/.emacs.d/pymacs/""
            ""~/.emacs.d/ropemacs-0.6""
                    )
              load-path))
(setq py-shell-name ""ipython"")

(defadvice py-execute-buffer (around python-keep-focus activate)
  ""return focus to python code buffer""
  (save-excursion ad-do-it))

(setenv ""PYMACS_PYTHON"" ""python2.5"") 
(require 'pymacs)

(pymacs-load ""ropemacs"" ""rope-"")

(provide 'python-programming)
</code></pre>
"
215902,"<p>The only purpose of entity groups (defined by the parent attribute) is to enable transactions among different entities. If you don't need the transactions, don't use the entity group relationships.</p>

<p>I suggest you re-reading the <a href=""http://code.google.com/appengine/docs/datastore/keysandentitygroups.html"">Keys and Entity Groups</a> section of the docs, it took me quite a few reads to grasp the idea.</p>

<p>Also watch these talks, among other things they discuss transactions and entity groups:</p>

<ul>
<li><a href=""http://sites.google.com/site/io/building-scalable-web-applications-with-google-app-engine"">Building Scalable Web Applications with Google App Engine</a></li>
<li><a href=""http://sites.google.com/site/io/under-the-covers-of-the-google-app-engine-datastore"">Under the Covers of the Google App Engine Datastore</a></li>
</ul>
"
155587,"<p>I'm a big fan of <a href=""http://www.autoitscript.com/autoit3/"">AutoIt</a>.  They have a COM version which allows you to use most of their functions from Python.</p>

<pre><code>import win32com.client
oAutoItX = win32com.client.Dispatch( ""AutoItX3.Control"" )

oAutoItX.Opt(""WinTitleMatchMode"", 2) #Match text anywhere in a window title

width = oAutoItX.WinGetClientSizeWidth(""Firefox"")
height = oAutoItX.WinGetClientSizeHeight(""Firefox"")

print width, height
</code></pre>
"
334953,"<p>Here's a link to the <a href=""http://svn.python.org/view/python/trunk/Objects/dictobject.c?rev=66801&amp;view=auto"" title=""dict implementation"">actual implementation</a> in the python SVN repository.  That should be the most definite answer.</p>
"
51505,"<p>You could try increasing the indent size, but in general I would just say, relax, it will come with time. I don't think trying to make Python look like C is a very good idea.</p>
"
85134,"<p>Django has this built in.  See <a href=""http://docs.djangoproject.com/en/dev/ref/contrib/sites/#ref-contrib-sites"" rel=""nofollow"">the sites framework</a>.</p>

<p>As a general technique, include a 'host' column in your database schema attached to the data you want to be host-specific, then include the <code>Host</code> HTTP header in the query when you are retrieving data.</p>
"
114648,"<p>I needed to solve this problem too a while back so that I could act as a client for a RESTful API.  I settled on httplib2 because it allowed me to send PUT and DELETE in addition to GET and POST.  Httplib2 is not part of the standard library but you can easily get it from the cheese shop.</p>
"
291650,"<p>Actually, it's preferable that your application starts with a dummy checker-downloader that changes rarely (if ever); before running, it should check if any updates are available; if yes, then it would download them (typically the rest of the app would be modules) and then import them and start the app.</p>

<p>This way, as soon as updates are available, you start the application and will run the latest version; otherwise, a restart of the application is required.</p>
"
234995,"<p>The problem is that when the pattern is matched against 'test/' the groupdict captured by the regex contains the mapping 'name' => None:</p>

<pre><code>&gt;&gt;&gt; url.match(""test/"").groupdict()
{'name': None}
</code></pre>

<p>This means that when the view is invoked, using something I expect that is similar to below:</p>

<pre><code>view(request, *groups, **groupdict)
</code></pre>

<p>which is equivalent to:</p>

<pre><code>view(request, name = None)
</code></pre>

<p>for 'test/', meaning that name is assigned None rather than not assigned.</p>

<p>This leaves you with two options. You can:</p>

<ol>
<li>Explicitly check for None in the view code which is kind of hackish.</li>
<li>Rewrite the url dispatch rule to make the name capture non-optional and introduce a second rule to capture when no name is provided. </li>
</ol>

<p>For example:</p>

<pre><code>urlpatterns = patterns('',
    (r'^test/(?P&lt;name&gt;.+)$','myview.displayName'), # note the '+' instead of the '*'
    (r'^test/$','myview.displayName'),
)
</code></pre>

<p>When taking the second approach, you can simply call the method without the capture pattern, and let python handle the default parameter or you can call a different view which delegates.</p>
"
234645,"<p>Here's a simplistic solution that works with your test input:</p>

<pre><code>import re
re.findall('\[[^\]]*\]|\""[^\""]*\""|\S+',s)
</code></pre>

<p>This will return any code that matches either </p>

<ul>
<li>a open bracket followed by zero or more non-close-bracket characters followed by a close bracket, </li>
<li>a double-quote followed by zero or more non-quote characters followed by a quote,</li>
<li>any group of non-whitespace characters</li>
</ul>

<p>This works with your example, but might fail for many real-world strings you may encounter. For example, you didn't say what you expect with unbalanced brackets or quotes,or how you want single quotes or escape characters to work. For simple cases, though, the above might be good enough.</p>
"
156973,"<p>Rather than using a regex, or relying on specific formatting you could use python's tokenize module.</p>

<pre><code>import tokenize
f=open(filename)
insert_index = None
for tok, text, (srow, scol), (erow,ecol), l in tokenize.generate_tokens(f.readline):
    if tok == tokenize.COMMENT:
        continue
    elif tok == tokenize.STRING:
        insert_index = erow, ecol
        break
    else:
        break # No docstring found
</code></pre>

<p>This way you can even handle pathological cases like:</p>

<pre><code># Comment
# """"""Not the real docstring""""""
' this is the module\'s \
docstring, containing:\
"""""" and having code on the same line following it:'; this_is_code=42
</code></pre>

<p>excactly as python would handle them.</p>
"
40715,"<p>""env"" simply executes the first thing it finds in the PATH env var. To switch to different python, prepend the directory for that python's executable to the path before invoking your script.</p>
"
40069,"<p>I think <a href=""http://www.gnupg.org/related_software/gpgme/"" rel=""nofollow"">GPGME</a> and the <a href=""http://pyme.sourceforge.net/"" rel=""nofollow"">PyMe Python wrapper</a> should do what you need.</p>
"
327378,"<p><a href=""http://pybites.blogspot.com/2008/10/pure-python-dictionary-implementation.html"">Pure Python Dictionary Implementation</a></p>

<blockquote>
  <p>For those curious about how CPython's dict implementation works, I've written a Python implementation using the same algorithms.</p>
</blockquote>
"
302984,"<p>Here is one example of Sconscript file</p>

<pre><code>env=Environment(CPPPATH='/usr/include/glib-2.0/:/usr/lib/glib-2.0/include:inc',
                CPPDEFINES=[],
                LIBS=['glib-2.0']) 
env.Program('runme', Glob('src/*.c'))
</code></pre>

<p>(The environment line is not really necessary for the example, but I have it to include the non standard glib header path and left it there so you can get the idea how to add extra includes and defines)</p>

<p>The source files are in src directory and header files in inc directory. You run scons from the base directory and the output file is also generated in the same directory.</p>
"
301998,"<p>I'd give Mechanize (<a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""nofollow"">http://wwwsearch.sourceforge.net/mechanize/</a>) a shot. It may well handle your cookie/headers transparently.</p>
"
301649,"<h2>XSLT</h2>

<p>I suggest using <a href=""http://en.wikipedia.org/wiki/Xslt"">XSLT templates</a> to transform the XML into INSERT statements (or whatever you need), as required.<br />
You should be able to invoke XSLT from any of the languages you mention.  </p>

<p>This will result in a lot less code than doing it the long way round.  </p>
"
257412,"<p>You have to download the page and parse html document, find your image with regex and download it.. You can use urllib2 for downloading and Beautiful Soup for parsing html file.</p>
"
333483,"<p>As the other poster mention, py2exe, will generate an executable + some libraries to load. You can also have some data to add to your program.</p>

<p>Next step is to use an installer, to package all this into one easy-to-use installable/unistallable program.</p>

<p>I have used InnoSetup ( <a href=""http://www.jrsoftware.org/isinfo.php"">http://www.jrsoftware.org/isinfo.php</a> ) with delight for several years and for commercial programs, so I heartily recommend it.</p>
"
324355,"<p>I recommend you to use <a href=""http://lxml.de/"" rel=""nofollow"">lxml</a>, it's a python binding for the libxml2 library which is really fast. </p>

<p>In my experience, libxml2 and expat have very similar performance. But I prefer libxml2 (and lxml for python) because it seems to be more actively developed and tested. Also libxml2 has more features.</p>

<p>lxml is mostly API compatible with <a href=""http://docs.python.org/lib/module-xml.etree.ElementTree.html"" rel=""nofollow"">xml.etree.ElementTree</a>. And there is good documentation in its web site.</p>
"
146524,"<p>Got it!! The problem is that some of the imports are of <code>myproject.myapp.views</code>, and some are just of <code>myapp.views</code>. This is confusing the Python module system enough that it no longer detects the functions as the same object. This is because your main <code>settings.py</code> probably has a line like:</p>

<pre><code>ROOT_URLCONF = `myproject.urls`
</code></pre>

<p>To solve this, try using the full import in your shell session:</p>

<pre><code>&gt;&gt;&gt; from django.core.urlresolvers import reverse
&gt;&gt;&gt; from myproject.myapp import views
&gt;&gt;&gt; reverse(views.myview)
'/myview/'
</code></pre>

<p>Here's a log of the debugging session, for any interested future readers:</p>

<pre><code>&gt;&gt;&gt; from django.core import urlresolvers
&gt;&gt;&gt; from myapp import myview
&gt;&gt;&gt; urlresolvers.get_resolver (None).reverse_dict
{None: ([(u'myview/', [])], 'myview/$'), &lt;function myview at 0x845d17c&gt;: ([(u'myview/', [])], 'myview/$')}
&gt;&gt;&gt; v1 = urlresolvers.get_resolver (None).reverse_dict.items ()[1][0]
&gt;&gt;&gt; reverse(v1)
'/myview/'
&gt;&gt;&gt; v1 is myview
False
&gt;&gt;&gt; v1.__module__
'testproject.myapp.views'
&gt;&gt;&gt; myview.__module__
'myapp.views'
</code></pre>

<p>What happens if you change the URL match to be <code>r'^myview/$'</code>?</p>

<p><hr /></p>

<p>Have you tried it with the view name? Something like <code>reverse ('myapp.myview')</code>?</p>

<p>Is <code>urls.py</code> the root URLconf, or in the <code>myapp</code> application? There needs to be a full path from the root to a view for it to be resolved. If that's <code>myproject/myapp/urls.py</code>, then in <code>myproject/urls.py</code> you'll need code like this:</p>

<pre><code>from django.conf.urls.defaults import patterns
urlpatterns = patterns ('',
    (r'^/', 'myapp.urls'),
)
</code></pre>
"
271839,"<p><strong>Test 1</strong>: Connect and Disconnect clients like mad, to see how well you handle the init and end of sessions, and just how much your server will survive under spikes, also while doing this measure how many clients fail to connect. That is very important</p>

<p><strong>Test 2</strong>: Connect clients and keep them logged on for say a week, doing random actions <a href=""http://en.wikipedia.org/wiki/Fuzz_testing"">(FuzzTest)</a>. Time the round-trip of each action. Also keep record of the order of actions, because this way your ""clients"" will find loopholes in your usecases (very important, and VERY hard to test rationally).</p>

<p><strong>Test 3 &amp; 4</strong>: Determine major use cases for your system, and write up scripts that do these tasks. Then run several clients doing same task(test 3), and also several clients doing different tasks(test 4).</p>

<p><strong>Series:</strong>
Now the other dimension you need here is amount of clients.
A nice series would be:
5,10,50,100,500,1000,5000,10000,...</p>

<p>This way you can get data for each series of tests with different work loads.</p>

<p>Also congrats on SWIGing your clients api to Python! That is a great way to get things ready. </p>

<p>Note: <a href=""http://www.ibm.com/developerworks/java/library/j-fuzztest.html"">IBM has a sample of fuzz testing on Java</a>, which is unrealted to your case, but will help you design a good fuzztest for your system</p>
"
35443,"<p>The best way of going through a proxy that requires authentication is using <a href=""http://docs.python.org/lib/module-urllib2.html"">urllib2</a> to build a custom url opener, then using that to make all the requests you want to go through the proxy. Note in particular, you probably don't want to embed the proxy password in the url or the python source code (unless it's just a quick hack).</p>

<pre><code>import urllib2

def get_proxy_opener(proxyurl, proxyuser, proxypass, proxyscheme=""http""):
    password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
    password_mgr.add_password(None, proxyurl, proxyuser, proxypass)

    proxy_handler = urllib2.ProxyHandler({proxyscheme: proxyurl})
    proxy_auth_handler = urllib2.ProxyBasicAuthHandler(password_mgr)

    return urllib2.build_opener(proxy_handler, proxy_auth_handler)

if __name__ == ""__main__"":
    import sys
    if len(sys.argv) &gt; 4:
        url_opener = get_proxy_opener(*sys.argv[1:4])
        for url in sys.argv[4:]:
            print url_opener.open(url).headers
    else:
        print ""Usage:"", sys.argv[0], ""proxy user pass fetchurls...""
</code></pre>

<p>In a more complex program, you can seperate these components out as appropriate (for instance, only using one password manager for the lifetime of the application). The python documentation has <a href=""http://docs.python.org/lib/urllib2-examples.html"">more examples on how to do complex things with urllib2</a> that you might also find useful.</p>
"
271303,"<p>The widget <code>django.forms.widgets.HiddenInput</code> will render your field as hidden.</p>

<p>In most cases, I think you'll find that any hidden form value could also be specified as a url parameter instead.  In other words:</p>

<pre><code>&lt;form action=""new/{{your_hidden_value}}"" method=""post""&gt;
....
&lt;/form&gt;
</code></pre>

<p>and in urls.py:</p>

<pre><code>^/new/(?P&lt;hidden_value&gt;\w+)/
</code></pre>

<p>I prefer this technique myself because I only really find myself needing hidden form fields when I need to track the primary key of a model instance - in which case an ""edit/pkey"" url serves the purposes of both initiating the edit/returning the form, and receiving the POST on save.</p>
"
270670,"<p>It appears python is inserting a byte order marker when you convert a UTF16 string to binary.  The .NET byte array contains no BOM, so I did some ghetto python that turns the UTF16 into hex, removes the first 4 characters, then decodes it to binary.</p>

<p>There may be a better way to rip out the BOM, but this works for me!</p>

<p>Here's one that passes:</p>

<pre><code>import hashlib
from base64 import b64decode, b64encode

def utf16tobin(s):
  return s.encode('hex')[4:].decode('hex')

b64salt = ""kDP0Py2QwEdJYtUX9cJABg==""
b64hash = ""OJF6H4KdxFLgLu+oTDNFodCEfMA=""
binsalt = b64decode(b64salt)
password_string = 'password'.encode(""utf16"")
password_string = utf16tobin(password_string)

m1 = hashlib.sha1()
# Pass in salt
m1.update(binsalt + password_string)
# Pass in password
# B64 encode the binary digest
if b64encode(m1.digest()) == b64hash:
    print ""Logged in!""
else:
    print ""Didn't match""
    print b64hash
    print b64encode(m1.digest())
</code></pre>
"
139137,"<p>What we did was override the default test_runner so that it wouldn't create a new database to test against.  This way, it runs the test against whatever our current local database looks like.  But be very careful if you use this method because any changes to data you make in your tests will be permanent.  I made sure that all our tests restores any changes back to their original state, and keep our pristine version of our database on the server and backed up.</p>

<p>So to do this you need to copy the run_test method from django.test.simple to a location in your project -- I put mine in myproject/test/test_runner.py</p>

<p>Then make the following changes to that method:</p>

<pre><code>// change
old_name = settings.DATABASE_NAME
from django.db import connection
connection.creation.create_test_db(verbosity, autoclobber=not interactive)
result = unittest.TextTestRunner(verbosity=verbosity).run(suite)
connection.creation.destroy_test_db(old_name, verbosity)

// to:
result = unittest.TextTestRunner(verbosity=verbosity).run(suite)
</code></pre>

<p>Make sure to do all the necessary imports at the top and then in your settings file set the setting:</p>

<pre><code>TEST_RUNNER = 'myproject.test.test_runner.run_tests'
</code></pre>

<p>Now when you run ./manage.py test Django will run the tests against the current state of your database rather than creating a new version based on your current model definitions.</p>

<p>Another thing you can do is create a copy of your database locally, and then do a check in your new run_test() method like this:</p>

<pre><code>if settings.DATABASE_NAME != 'my_test_db': 
    sys.exit(""You cannot run tests using the %s database. Please switch DATABASE_NAME to my_test_db in settings.py"" % settings.DATABASE_NAME)
</code></pre>

<p>That way there's no danger of running tests against your main database.</p>
"
200761,"<p>In Python you use the <a href=""http://www.python.org/doc/2.5.2/lib/module-struct.html"" rel=""nofollow"">struct</a> module for this.</p>

<pre><code>&gt;&gt;&gt; from struct import *
&gt;&gt;&gt; pack('hhl', 1, 2, 3)
'\x00\x01\x00\x02\x00\x00\x00\x03'
&gt;&gt;&gt; unpack('hhl', '\x00\x01\x00\x02\x00\x00\x00\x03')
(1, 2, 3)
&gt;&gt;&gt; calcsize('hhl')
8
</code></pre>

<p>HTH</p>
"
215090,"<p>Use <code>PyArray_DescrConverter</code>.  Here's an example:</p>

<pre><code>#include &lt;Python.h&gt;
#include &lt;stdio.h&gt;
#include &lt;numpy/arrayobject.h&gt;

int main(int argc, char *argv[])
{
     int dims[] = { 2, 3 };
     PyObject *op, *array;
     PyArray_Descr *descr;

     Py_Initialize();
     import_array();
     op = Py_BuildValue(""[(s, s), (s, s)]"", ""a"", ""i4"", ""b"", ""U5"");
     PyArray_DescrConverter(op, &amp;descr);
     Py_DECREF(op);
     array = PyArray_SimpleNewFromDescr(2, dims, descr);
     PyObject_Print(array, stdout, 0);
     printf(""\n"");
     Py_DECREF(array);
     return 0;
}
</code></pre>

<p>Thanks to <a href=""http://stackoverflow.com/users/9530/adam-rosenfield"">Adam Rosenfield</a> for pointing to Section 13.3.10 of the <a href=""http://numpy.scipy.org/numpybook.pdf"">Guide to NumPy</a>.</p>
"
155127,"<pre><code>$ perl -0777 -ne'print qq($1) if /__all__ = \[(.*?)\]/s' __init__.py | grep Error 

'BrowserStateError',
'ContentTooShortError',
'FormNotFoundError',
'GopherError',
'HTTPDefaultErrorHandler',
'HTTPError',
'HTTPErrorProcessor',
'LinkNotFoundError',
'LoadError',
'ParseError',
'RobotExclusionError',
'URLError',
</code></pre>

<p>Or:</p>

<pre><code>&gt;&gt;&gt; import mechanize
&gt;&gt;&gt; filter(lambda s: ""Error"" in s, dir(mechanize))
['BrowserStateError', 'ContentTooShortError', 'FormNotFoundError', 'GopherError'
, 'HTTPDefaultErrorHandler', 'HTTPError', 'HTTPErrorProcessor', 'LinkNotFoundErr
or', 'LoadError', 'ParseError', 'RobotExclusionError', 'URLError']
</code></pre>
"
39113,"<p>As lassevk suggests, write out the new file as you go, here is some example code:</p>

<pre><code>fin = open(""a.txt"")
fout = open(""b.txt"", ""wt"")
for line in fin:
    fout.write( line.replace('foo', 'bar') )
fin.close()
fout.close()
</code></pre>
"
190131,"<p>A simpler way to think about it, perhaps: when main returns, your process will not exit if there are non-daemon threads still running.</p>

<p>A bit of advice: Clean shutdown is easy to get wrong when threads and synchronization are involved - if you can avoid it, do so. Use daemon threads whenever possible.</p>
"
181626,"<p>Making two widgets appear on the same frame is easy, actually. You should use sizers to accomplish this.</p>

<p>In your example, you can change your <code>Notebook</code> class implementation to something like this:</p>

<pre><code>class Notebook(wx.Frame):
    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, parent, id, title, size=(600, 600))
        menubar = wx.MenuBar()
        file = wx.Menu()
        file.Append(101, 'Quit', '' )
        menubar.Append(file, ""&amp;File"")
        self.SetMenuBar(menubar)
        wx.EVT_MENU(self, 101, self.OnQuit)
        nb = wx.Notebook(self, -1, style=wx.NB_BOTTOM)
        self.sheet1 = MySheet(nb)
        self.sheet2 = MySheet(nb)
        self.sheet3 = MySheet(nb)
        nb.AddPage(self.sheet1, ""Sheet1"")
        nb.AddPage(self.sheet2, ""Sheet2"")
        nb.AddPage(self.sheet3, ""Sheet3"")
        self.sheet1.SetFocus()
        self.StatusBar()
        # new code begins here:
        # add your text ctrl:
        self.text = wx.TextCtrl(self, -1, style = wx.TE_MULTILINE)
        # create a new sizer for both controls:
        sizer = wx.BoxSizer(wx.VERTICAL)
        # add notebook first, with size factor 2:
        sizer.Add(nb, 2)
        # then text, size factor 1, maximized
        sizer.Add(self.text, 1, wx.EXPAND)
        # assign the sizer to Frame:
        self.SetSizerAndFit(sizer)
</code></pre>

<p>Only the <code>__init__</code> method is changed. Note that you can manipulate the proportions between the notebook and text control by changing the second argument of the <code>Add</code> method.</p>

<p>You can learn more about sizers from the official <a href=""http://docs.wxwidgets.org/2.8/wx_sizeroverview.html"">Sizer overview</a> article.</p>
"
11074,"<p>I started writing up a summary of my experience with my own code generator, then went back and re-read your question and found you had already touched upon the same issues yourself, focus on the execution results instead of the code layout/look.</p>

<p>Problem is, this is hard to test, the generated code might not be suited to actually run in the environment of the unit test system, and how do you encode the expected results?</p>

<p>I've found that you need to break down the code generator into smaller pieces and unit test those. Unit testing a full code generator is more like integration testing than unit testing if you ask me.</p>
"
111973,"<p>You should have a look at the <a href=""http://docs.python.org/lib/module-httplib.html"">httplib module</a>.  It should let you make whatever sort of HTTP request you want.</p>
"
312466,"<p>If you know list size:</p>

<pre><code>def SplitList(list, chunk_size):
    return [list[offs:offs+chunk_size] for offs in range(0, len(list), chunk_size)]
</code></pre>

<p>If you don't (an iterator):</p>

<pre><code>def IterChunks(sequence, chunk_size):
    res = []
    for item in sequence:
        res.append(item)
        if len(res) &gt;= chunk_size:
            yield res
            res = []
    if res:
        yield res  # yield the last, incomplete, portion
</code></pre>

<p>In the latter case, it can be rephrased in a more beautiful way if you can be sure that the sequence always contains a whole number of chunks of given size (i.e. there is no incomplete last chunk).</p>
"
196962,"<p>The solution used in Twisted, which doesn't need pywin32:</p>

<pre><code>def isVista():
    if getattr(sys, ""getwindowsversion"", None) is not None:
        return sys.getwindowsversion()[0] == 6
    else:
        return False
</code></pre>

<p>Note that it will also match Windows Server 2008.</p>
"
196931,"<p>The simplest solution I found is this one:</p>

<pre><code>import sys

def isWindowsVista():
    '''Return True iff current OS is Windows Vista.'''
    if sys.platform != ""win32"":
        return False
    import win32api
    VER_NT_WORKSTATION = 1
    version = win32api.GetVersionEx(1)
    if not version or len(version) &lt; 9:
        return False
    return ((version[0] == 6) and 
            (version[1] == 0) and
            (version[8] == VER_NT_WORKSTATION))
</code></pre>
"
122785,"<p>Like this:</p>

<pre><code>def nest(d):
    rv = {}
    for key, value in d.iteritems():
        node = rv
        for part in key.split('/'):
            node = node.setdefault(part, {})
        node.update(value)
    return rv
</code></pre>
"
109122,"<p>You can also test if an object has a specific variable with:</p>

<pre><code>&gt;&gt;&gt; hi_obj = hi()
&gt;&gt;&gt; hasattr(hi_obj, ""some attribute"")
</code></pre>
"
111251,"<p>A Callable is an object that has the <code>__call__</code> method.  This means you can fake callable functions or do neat things like <a href=""http://www.python.org/dev/peps/pep-0309/"">Partial Function Application</a> where you take a function and add something that enhances it or fills in some of the parameters, returning something that can be called in turn (known as <a href=""http://en.wikipedia.org/wiki/Currying"">Currying</a> in functional programming circles).</p>

<p>Certain typographic errors will have the interpreter attempting to call something you did not intend, such as (for example) a string.  This can produce errors where the interpreter attempts to execute a non-callable application.  You can see this happening in a python interpreter by doing something like the transcript below.</p>

<pre><code>[nigel@k9 ~]$ python
Python 2.5 (r25:51908, Nov  6 2007, 15:55:44) 
[GCC 4.1.2 20070925 (Red Hat 4.1.2-27)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; 'aaa'()    # &lt;== Here we attempt to call a string.
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: 'str' object is not callable
&gt;&gt;&gt;
</code></pre>
"
112557,"<p>One of the best ways to do this is to use a directed graph to store your dictionary.  It takes a little bit of setting up, but once done it is fairly easy to then do the type of searches you are talking about.</p>

<p>The nodes in the graph correspond to a letter in your word, so each node will have one incoming link and up to 26 (in English) outgoing links.</p>

<p>You could also use a hybrid approach where you maintain a sorted list containing your dictionary and use the directed graph as an index into your dictionary.  Then you just look up your prefix in your directed graph and then go to that point in your dictionary and spit out all words matching your search criteria.</p>
"
35582,"<p>Check out <a href=""http://mail.python.org/pipermail/python-3000/2007-September/010209.html"" rel=""nofollow"">this thread</a> for a discussion on the reasons behind this behavior (including that Guido likes it, and it's <a href=""http://mail.python.org/pipermail/python-3000/2007-September/010222.html"" rel=""nofollow"">not likely to change</a>).</p>
"
138615,"<p>I was able to do this with Python:</p>

<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r""x(?=[^']*'([^']|'[^']*')*$)"", ""P"", ""axbx'cxdxe'fxgh'ixj'k"")
""axbx'cPdPe'fxgh'iPj'k""
</code></pre>

<p>What this does is use the non-capturing match (?=...) to check that the character x is within a quoted string. It looks for some nonquote characters up to the next quote, then looks for a sequence of either single characters or quoted groups of characters, until the end of the string.</p>

<p>This relies on your assumption that the quotes are always balanced. This is also not very efficient.</p>
"
312677,"<p>Python has nothing to do with this -- it's the shell.</p>

<p>Call</p>

<pre><code>$ python convert.py -i 'video_*'
</code></pre>

<p>and it will pass in that wildcard.</p>

<p>The other six values were passed in as args, not attached to the <code>-i</code>, exactly as if you'd run <code>python convert.py -i video_1 video_2 video_3 video_4 video_5 video_6</code>, and the <code>-i</code> only attaches to the immediate next parameter.</p>

<p>That said, your best bet might to be just read your input filenames from <code>args</code>, rather than using <code>options.input</code>.</p>
"
312538,"<p>See at the bottom of this <a href=""http://wiki.python.org/moin/EscapingHtml"">page at Python wiki</a>, there are at least 2 options to ""unescape"" html.</p>
"
213987,"<p>If you want to learn about the DICOM format, ""Digital Imaging and Communications in Medicine (DICOM):  A Practical Introduction and Survival Guide"" by Oleg Pianykh is quite readable and gives a good introduction to key DICOM concepts.  Springer-Verlag is the publisher of this book.  The full DICOM standard is, of course, the ultimate reference although it is somewhat more intimidating.  It is available from NEMA (<a href=""http://medical.nema.org"">http://medical.nema.org</a>).</p>

<p>The file format is actually less esoteric than you might imagine and consists of a preamble followed by a sequence of data elements.  The preamble contains the ASCII text ""DICM"" and several reserved bytes that are unused.  Following the preamble is a sequence of data elements.  Each data element consists of the size of the element, a two-character ASCII code indicating the value representation, a DICOM tag, and the value.  Data elements in the file are ordered by their DICOM tag numbers.  The image itself is just another data element with a size, value representation, etc.</p>

<p>Value representations specify exactly how to interpret the value.  Is it a number?  Is it a character string?  If it's a character string, is it a short one or a long one and which characters are permitted?  The value representation code tells you this.</p>

<p>A DICOM tag is a 4 byte hexadecimal code composed of a 2 byte ""group"" number and a 2 byte ""element"" number.  The group number is an identifier that tells you what information entity the tag applies to (for example, group 0010 refers to the patient and group 0020 refers to the study).  The element number identifies the interpretation of the value (items such as the patient's ID number, the series description, etc.).  To find out how you should interpret the value, your code looks up the DICOM tag in a dictionary file.</p>

<p>There are some other details involved, but that's the essence of it.  Probably the most instructive thing you can do to learn about the file format is to take an example DICOM file, look at it with a hex editor, and go through the process of parsing it mentally.  I would advise against trying to learn about DICOM by looking at existing open source implementations, at least initially.  It is more likely to confuse instead of enlighten.  Getting the big picture is more important.  Once you have the big picture, then you can descend into subtleties.</p>
"
330298,"<h2>PyS60 -- its cool :)</h2>

<p>I worked quite a lot on PyS60 ver 1.3 FP2. It is a great language to port your apps on 
Symbian Mobiles and Powerful too. I did my Major project in PyS60, which was a <a href=""http://sourceforge.net/projects/gsmlocator"" rel=""nofollow"">GSM locator</a>(its not the latest version) app for Symbian phones. </p>

<p>There is also a very neat py2sis utility which converts your py apps to portabble sis apps that can be installed on any Sumbian phones. The ease of use of Python scripting laanguage and a good set of warapped APIs for Mobile functions just enables you to do anything very neatly and quickly.</p>

<p>The latest Video and Camera APIs let you do neary everything that can be done with the phone. I'd suggest you few very good resources to start with</p>

<ol>
<li><a href=""http://www.forum.nokia.com/Resources_and_Information/Tools/Runtimes/Python_for_S60/"" rel=""nofollow"">Forum Nokia</a></li>
<li><a href=""http://opensource.nokia.com/projects/pythonfors60/"" rel=""nofollow"">Nokia OpenSource Resource
center</a></li>
<li><a href=""http://www.mobilenin.com/pys60/menu.htm"" rel=""nofollow"">A very good tutorial (for beginners)</a></li>
</ol>

<p>Just access these, download the Emulator, and TAKE OFF for a ride with PyS60. M sure you'll love it.</p>

<p>P.S. : as the post is so old, I believe u must already be either loving it or finished off with it. But I just cudn't resist answering. :)</p>
"
111066,"<p>i suppose this would help</p>

<pre><code>from httplib2 import Http
def get_html(uri,num_redirections=0): # put it as 0 for not to follow redirects
conn = Http()
return conn.request(uri,redirections=num_redirections)
</code></pre>
"
345415,"<p>I also agree that itertools is not needed.</p>

<p>But why stop at 2?</p>

<pre><code>  def tmerge(*iterators):
    for values in zip(*iterators):
      for value in values:
        yield value
</code></pre>

<p>handles any number of iterators from 0 on upwards.</p>

<p>UPDATE:  DOH!  A commenter pointed out that this won't work unless all the iterators are the same length.</p>

<p>The correct code is:</p>

<pre><code>def tmerge(*iterators):
  empty = {}
  for values in itertools.izip_longest(*iterators, fillvalue=empty):
    for value in values:
      if value is not empty:
        yield value
</code></pre>

<p>and yes, I just tried it with lists of unequal length, and a list containing {}.</p>
"
182010,"<p>In 30 years of programming I've used a debugger exactly 4 times.  All four times were to read the <code>core</code> file produced from a C program crashing to locate the traceback information that's buried in there.</p>

<p>I don't think debuggers help much, even in compiled languages.  Many people like debuggers, there are some reasons for using them, I'm sure, or people wouldn't lavish such love and care on them.</p>

<p>Here's the point -- <strong>software is knowledge capture</strong>.  </p>

<p>Yes, it does have to run.  More importantly, however, software has <strong>meaning</strong>.</p>

<p>This is not an indictment of <em>your</em> use of a debugger.  However, I find that the folks who rely on debugging will sometimes produce really odd-looking code and won't have a good justification for what it <strong>means</strong>.  They can only say ""it may be a hack, but it works.""  </p>

<p>My suggestion on debuggers is ""don't bother"".</p>

<p>""But, what if I'm totally stumped?"" you ask, ""should I learn the debugger then?""  Totally stumped by what?  The language?  Python's too simple for utter befuddlement.  Some library?  Perhaps.</p>

<p>Here's what you do -- with or without a debugger.</p>

<ol>
<li>You have the source, read it.</li>
<li>You write small tests to exercise the library.  Using the interactive shell, if possible.  [All the really good libraries seem to show their features using the interactive Python mode -- I strive for this level of tight, clear simplicity.]</li>
<li>You have the source, add print functions.</li>
</ol>
"
158868,"<p><a href=""http://www.rwdev.eu/articles/emacspyeng"">This site</a> has a description of how to get Python code completion in Emacs.
<a href=""http://rope.sourceforge.net/ropemacs.html"">Ropemacs</a> is a way to get Rope to work in emacs.  I haven't had extensive experience with either, but they're worth looking into.</p>
"
55734,"<p>I'm using two different approaches in my <code>models.py</code>. The first is the <code>permalink</code> decorator:</p>

<pre><code>from django.db.models import permalink

def get_absolute_url(self): 
    """"""Construct the absolute URL for this Item.""""""
    return ('project.app.views.view_name', [str(self.id)])
get_absolute_url = permalink(get_absolute_url)
</code></pre>

<p>You can also call <code>reverse</code> directly:</p>

<pre><code>from django.core.urlresolvers import reverse

def get_absolute_url(self): 
    """"""Construct the absolute URL for this Item.""""""
    return reverse('project.app.views.view_name', None, [str(self.id)])
</code></pre>
"
55404,"<pre><code>import re
reg = re.compile('&lt;input type=""hidden"" name=""([^""]*)"" value=""&lt;id&gt;"" /&gt;')
value = reg.search(inputHTML).group(1)
print 'Value is', value
</code></pre>
"
213768,"<p>Thread per request is often a bad idea.  If your server experiences huge spikes in load it will take the box to its knees.  Consider using a thread pool that can grow to a limited size during peak usage and shrink to a smaller size when load is light.</p>
"
93312,"<p>In addition to <code>pprint.pprint</code>, <code>pprint.pformat</code> is really useful for making readable <code>__repr__</code>s. My complex <code>__repr__</code>s usually look like so:</p>

<pre><code>def __repr__(self):
    from pprint import pformat

    return ""&lt;ClassName %s&gt;"" % pformat({""attrs"":self.attrs,
                                       ""that_i"":self.that_i,
                                       ""care_about"":self.care_about})
</code></pre>
"
35776,"<p>Python is considered (among Python programmers :) to be a great language for rapid prototyping. There's not a lot of extraneous syntax getting in the way of your thought processes, so most of the work you do tends to go into the code. (There's far less idioms required to be involved in writing good Python code than in writing good C++.)</p>

<p>Given this, most Python (CPython) programmers ascribe to the ""premature optimization is the root of all evil"" philosophy. By writing high-level (and significantly slower) Python code, one can optimize the bottlenecks out using C/C++ bindings when your application is nearing completion. At this point it becomes more clear what your processor-intensive algorithms are through proper profiling. This way, you write most of the code in a very readable and maintainable manner while allowing for speedups down the road. You'll see several Python library modules written in C for this very reason.</p>

<p>Most graphics libraries in Python (i.e. wxPython) are just Python wrappers around C++ libraries anyway, so you're pretty much writing to a C++ backend.</p>

<p>To address your IDE question, <a href=""http://pythonide.blogspot.com/"">SPE</a> (Stani's Python Editor) is a good IDE that I've used and <a href=""http://www.eclipse.org/"">Eclipse</a> with <a href=""http://pydev.sourceforge.net/"">PyDev</a> gets the job done as well. Both are OSS, so they're free to try!</p>

<p>[Edit] @Marcin: Have you had experience writing > 30k LOC in Python? It's also funny that you should mention Google's scalability concerns, since they're Python's biggest supporters! Also a small organization called NASA also uses Python frequently ;) see <a href=""http://www.python.org/about/success/usa/"">""One coder and 17,000 Lines of Code Later""</a>.</p>
"
329338,"<p><a href=""http://code.google.com/p/sympy/"" rel=""nofollow"">SymPy</a> is a symbolic maths library written entirely in Python and has full support for rational numbers.  From the <a href=""http://docs.sympy.org/tutorial.html"" rel=""nofollow"">tutorial</a>:</p>

<pre><code>&gt;&gt;&gt; from sympy import *
&gt;&gt;&gt; a = Rational(1,2)

&gt;&gt;&gt; a
1/2

&gt;&gt;&gt; a*2
1

&gt;&gt;&gt; Rational(2)**50/Rational(10)**50
1/88817841970012523233890533447265625
</code></pre>

<p>There is also GMP for Python (<a href=""http://gmpy.sourceforge.net/"" rel=""nofollow"">GMPY</a>) which, while not pure Python, is probably more efficient.</p>
"
276326,"<pre><code>   from django import http

   return http.HttpResponsePermanentRedirect('/yournewpage.html')
</code></pre>

<p>the browser will get the 301, and go to <code>/yournewpage.html</code> as expected. the other answer is technically correct, in that python is not handling the redirection per se, the browser is. this is what's happening under the hood:</p>

<pre><code>Browser             Python         HTTP
   -------------------&gt;            GET /youroldpage.html HTTP/1.1

   &lt;-------------------            HTTP/1.1 301 Moved Permanently
                                   Location: /yournewpage.html
   -------------------&gt;            GET /yournewpage.html HTTP/1.1
</code></pre>
"
138586,"<p><a href=""http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/"" rel=""nofollow"">Pyrex</a> is a subset of the Python language that compiles to C, done by the guy that first built <a href=""http://www.secnetix.de/olli/Python/list_comprehensions.hawk"" rel=""nofollow"">list comprehensions</a> for Python.  It was mainly developed for building wrappers but can be used in a more general context.  <a href=""http://cython.org/"" rel=""nofollow"">Cython</a> is a more actively maintained fork of pyrex.</p>
"
315318,"<p>I haven't used web2py, but if it runs in a terminal window, you can use standard pdb stuff. Add this line somewhere in your code:</p>

<pre><code>import pdb; pdb.set_trace()
</code></pre>

<p>This will invoke the debugger and break.  Then you can use <a href=""http://docs.python.org/lib/module-pdb.html"" rel=""nofollow"">PDB</a> commands: n to step to the next line, l to list code, s to step into a function, p to print values, etc.</p>
"
136019,"<p>You can also use <a href=""http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/"" rel=""nofollow"">Pyrex</a>, which can act as glue between high-level Python code and low-level C code. <a href=""http://codespeak.net/lxml/"" rel=""nofollow"">lxml</a> is written in Pyrex, for instance.</p>
"
212299,"<p>Given your requirements, I'd say the custom class is your best bet:</p>

<pre><code>class options(object):
    VERBOSE = True
    IGNORE_WARNINGS = True

if options.VERBOSE:
    # ...
</code></pre>

<p>To be complete, another approach would be using a separate module, i.e. <code>options.py</code> to encapsulate your option defaults.</p>

<p><code>options.py</code>:</p>

<pre><code>VERBOSE = True
IGNORE_WARNINGS = True
</code></pre>

<p>Then, in <code>main.py</code>:</p>

<pre><code>import options

if options.VERBOSE:
    # ...
</code></pre>

<p>This has the feature of removing some clutter from your script. The default values are easy to find and change, as they are cordoned off in their own module. If later your application has grown, you can easily access the options from other modules.</p>

<p>This is a pattern that I frequently use, and would heartily recommend if you don't mind your application growing larger than a single module. Or, start with a custom class, and expand to a module later if your app grows to multiple modules.</p>
"
285941,"<p>Use <a href=""http://crummy.com/software/BeautifulSoup"">Beautiful Soup</a>.  Doing it yourself is harder than it looks, you'll be better off using a tried and tested module.</p>

<p><strong>EDIT:</strong></p>

<p>I think you want:</p>

<pre><code>soup = BeautifulSoup.BeautifulSoup(urllib.urlopen(url).read())
</code></pre>

<p>By the way, it's a bad idea to try opening the URL there, as if it goes wrong it could get ugly.</p>

<p><strong>EDIT 2:</strong></p>

<p>This should show you all the links in a page:</p>

<pre><code>import urlparse, urllib
from BeautifulSoup import BeautifulSoup

url = ""http://www.example.com/index.html""
source = urllib.urlopen(url).read()

soup = BeautifulSoup(source)

for item in soup.fetchall('a'):
    try:
        link =  urlparse.urlparse(item['href'].lower())
    except:
        # Not a valid link
        pass
    else:
        print link
</code></pre>
"
56510,"<p>Yeah, gdb is good for lower level debugging.</p>

<p>You can change threads with the <em>thread</em> command.</p>

<p>e.g</p>

<pre><code>(gdb) thr 2
[Switching to thread 2 (process 6159 thread 0x3f1b)]
(gdb) backtrace
....
</code></pre>

<p>You could also check out Python specific debuggers like <a href=""http://winpdb.org/about/"">Winpdb</a>, or <a href=""http://bashdb.sourceforge.net/pydb/"">pydb</a>. Both platform independent. </p>
"
253390,"<p>For cvs, <a href=""http://pycvs.sourceforge.net/"" rel=""nofollow"">pyCVS</a> may be worth a look.</p>

<p>For svn, there is <a href=""http://pysvn.tigris.org/"" rel=""nofollow"">pysvn</a>, which is pretty good.</p>
"
251625,"<p>You could also check  out <a href=""http://www.lag.net/paramiko/"">paramiko</a>. There's no scp module (yet), but it fully supports sftp.</p>

<p>[EDIT]
Sorry, missed the line where you mentioned paramiko.
The following module is simply an implementation of the scp protocol for paramiko.
If you don't want to use paramiko or conch (the only ssh implementations I know of for python), you could rework this to run over a regular ssh session using pipes.</p>

<p><a href=""https://github.com/jbardin/scp.py"">scp.py for paramiko</a></p>
"
128023,"<p>For easy manipulation of XML in python, I like the <a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">Beautiful Soup</a> library. It works something like this:</p>

<p>Sample XML File:</p>

<pre><code>&lt;root&gt;
  &lt;level1&gt;leaf1&lt;/level1&gt;
  &lt;level2&gt;leaf2&lt;/level2&gt;
&lt;/root&gt;
</code></pre>

<p>Python code:</p>

<pre><code>from BeautifulSoup import BeautifulStoneSoup, Tag, NavigableString

soup = BeautifulStoneSoup('config-template.xml') # get the parser for the xml file
soup.contents[0].name
# u'root'
</code></pre>

<p>You can use the node names as methods:</p>

<pre><code>soup.root.contents[0].name
# u'level1'
</code></pre>

<p>It is also possible to use regexes:</p>

<pre><code>import re
tags_starting_with_level = soup.findAll(re.compile('^level'))
for tag in tags_starting_with_level: print tag.name
# level1
# level2
</code></pre>

<p>Adding and inserting new nodes is pretty straightforward:</p>

<pre><code># build and insert a new level with a new leaf
level3 = Tag(soup, 'level3')
level3.insert(0, NavigableString('leaf3')
soup.root.insert(2, level3)

print soup.prettify()
# &lt;root&gt;
#  &lt;level1&gt;
#   leaf1
#  &lt;/level1&gt;
#  &lt;level2&gt;
#   leaf2
#  &lt;/level2&gt;
#  &lt;level3&gt;
#   leaf3
#  &lt;/level3&gt;
# &lt;/root&gt;
</code></pre>
"
21937,"<p>I think the article ""<a href=""http://www.ibm.com/developerworks/java/library/j-jtp10283/"">Java theory and practice: A brief history of garbage collection</a>"" from IBM should help explain some of the questions you have.</p>
"
210707,"<pre><code>from numpy import uint32
</code></pre>
"
330574,"<p>Be cautious of premature optimization.</p>

<p>Addition: The ""Python backend runs an algorithm whose state..."" is the session in the web framework.  That's it.  Let the Django framework maintain session state in cache.  Period.  </p>

<p>""The algorithm's per-user state undergoes many small changes as a user works with the application.""   Most web frameworks offer a cached session object.  Often it is very high performance.  See Django's <a href=""http://docs.djangoproject.com/en/dev/topics/http/sessions/#topics-http-sessions"" rel=""nofollow"">session documentation</a> for this. </p>

<p>Advice.  [Revised]</p>

<p>It appears you have something that works.  Leverage to learn your framework, learn the tools, and learn what knobs you can turn without breaking a sweat.  Specifically, using session state.</p>

<p>Second, fiddle with caching, session management, and things that are easy to adjust, and see if you have enough speed.  Find out whether MySQL socket or named pipe is faster by trying them out.  These are the no-programming optimizations.</p>

<p>Third, measure performance to find your actual bottleneck.  Be prepared to provide (and defend) the measurements as fine-grained enough to be useful and stable enough to providing meaningful comparison of alternatives.  </p>

<p>For example, show the performance difference between persistent sessions and cached sessions.</p>
"
285437,"<p>For something like Twitter, you'll save yourself a ton of time by not reinventing the wheel. Try a library like <a href=""http://code.google.com/p/python-twitter/"" rel=""nofollow"">python-twitter</a>. This way, you can write your script, or even a full fledged application, that interfaces with Twitter, and you don't have to care about the implementation details.</p>

<p>If you want to roll your own interface library, you're going to have to get familiar with <a href=""https://docs.python.org/library/urllib.html"" rel=""nofollow"">urllib</a> and depending on what format they provide results, either <a href=""http://lxml.de/"" rel=""nofollow"">lxml</a> (or some other xml parser) or <a href=""http://undefined.org/python/#simplejson"" rel=""nofollow"">simplejson</a>.</p>
"
93557,"<p>You could try setting up a filter using the <code>unicodedata.category()</code> function:</p>

<pre><code>printable = Set('Lu', 'Ll', ...)
def filter_non_printable(str):
  return ''.join(c for c in str if unicodedata.category(c) in printable)
</code></pre>

<p>See the <a href=""http://www.unicode.org/versions/Unicode9.0.0/ch04.pdf"" rel=""nofollow"">Unicode database character properties</a> for the available categories</p>
"
29262,"<p>@Daniel</p>

<p>Thanks for the reply, I also figured out how to do it with the minidom (I'm not sure of the difference between the ElementTree vs the minidom)</p>

<pre>
<code>
from xml.dom.minidom import *
def make_xml():
    doc = Document();
    node = doc.createElement('foo')
    node.appendChild(doc.createTextNode('bar'))
    doc.appendChild(node)
    return doc
if __name__ == '__main__':
    make_xml().writexml(sys.stdout)
</code>
</pre>

<p>I swear I tried this before posting my question...</p>
"
94491,"<p>Here's how I did it (grabbing all files ending in "".ranks""):</p>

<pre><code>import urllib2, cStringIO, zipfile

try:
    remotezip = urllib2.urlopen(url)
    zipinmemory = cStringIO.StringIO(remotezip.read())
    zip = zipfile.ZipFile(zipinmemory)
    for fn in zip.namelist():
        if fn.endswith("".ranks""):
            ranks_data = zip.read(fn)
            for line in ranks_data.split(""\n""):
                # do something with each line
except urllib2.HTTPError:
    # handle exception
</code></pre>
"
102443,"<p>How about something like this:</p>

<pre><code>def itersorted(d):
    for key in sorted(d):
        yield d[key]
</code></pre>
"
101227,"<p>As far as I know there is not. I wrote one for myself (as well as a few other useful extensions and put them in a project called <a href=""http://www.codeplex.com/nextension"" rel=""nofollow"">NExtension</a> on Codeplex.</p>

<p>Apparently the Parallel extensions for .NET have a Zip function.</p>

<p>Here's a simplified version from NExtension (but please check it out for more useful extension methods):</p>

<pre><code>public static IEnumerable&lt;TResult&gt; Zip&lt;T1, T2, TResult&gt;(this IEnumerable&lt;T1&gt; source1, IEnumerable&lt;T2&gt; source2, Func&lt;T1, T2, TResult&gt; combine)
{
    using (IEnumerator&lt;T1&gt; data1 = source1.GetEnumerator())
    using (IEnumerator&lt;T2&gt; data2 = source2.GetEnumerator())
        while (data1.MoveNext() &amp;&amp; data2.MoveNext())
        {
            yield return combine(data1.Current, data2.Current);
        }
}
</code></pre>

<p>Usage:</p>

<pre><code>int[] list1 = new int[] {1, 2, 3};
string[] list2 = new string[] {""a"", ""b"", ""c""};

foreach (var result in list1.Zip(list2, (i, s) =&gt; i.ToString() + "" "" + s))
    Console.WriteLine(result);
</code></pre>
"
276994,"<p>When I tried to write Python web service last year, I ended up using <a href=""http://pywebsvcs.sourceforge.net/"">ZSI-2.0</a> (which is something like heir of SOAPpy) and a <a href=""http://pywebsvcs.sourceforge.net/holger.pdf"">paper available on its web</a>.</p>

<p>Basically I wrote my WSDL file by hand and then used ZSI stuff to generate stubs for my client and server code. I wouldn't describe the experience as pleasant, but the application did work.</p>
"
5319,<p>erm.. HTML? (trying to be funny here... while we wait for real answers..)</p>
283520,"<p>No, this won't work. Wx bindings (like most other ""python bindings"") are actually compiled against CPython.</p>

<p>In this regards they are not just packages on sys.path to be found, as you have tried. They actually depend on CPython itself. <a href=""http://www.python.org/doc/2.5.2/ext/ext.html"" rel=""nofollow"">This rather dry document explains the process.</a></p>

<p>Note: There was a mission by some of the crew at Resolver Systems to allow you to use CPython bindings with IronPython (called <a href=""http://code.google.com/p/ironclad/"" rel=""nofollow"">IronClad</a>) but this is in its early stages, and I think they will concentrate on getting things like Numpy working first, GUI toolkits will always be the last, and hardest.</p>
"
160375,"<p>This works on Mac OS X 10.5.5.  Note the capital <strong>-U</strong> option.  Perhaps that's been your problem.</p>

<pre><code>import subprocess
ps = subprocess.Popen(""ps -U 0"", shell=True, stdout=subprocess.PIPE)
print ps.stdout.read()
ps.stdout.close()
ps.wait()
</code></pre>

<p>Here's the Python version</p>

<pre><code>Python 2.5.2 (r252:60911, Feb 22 2008, 07:57:53) 
[GCC 4.0.1 (Apple Computer, Inc. build 5363)] on darwin
</code></pre>
"
95010,"<p>It is for optimization reasons.</p>

<p>range() will create a list of values from start to end (0 .. 20 in your example). This will become an expensive operation on very large ranges.</p>

<p>xrange() on the other hand is much more optimised. it will only compute the next value when needed (via an xrange sequence object) and does not create a list of all values like range() does.</p>
"
279568,"<p>Use a generator function to generate an iterator.</p>

<pre><code>def foo_gen():
    n = 0
    while True:
        n+=1
        yield n
</code></pre>

<p>Then use it like</p>

<pre><code>foo = foo_gen().next
for i in range(0,10):
    print foo()
</code></pre>

<p>If you want an upper limit:</p>

<pre><code>def foo_gen(limit=100000):
    n = 0
    while n &lt; limit:
       n+=1
       yield n
</code></pre>

<p>If the iterator terminates (like the example above), you can also loop over it directly, like</p>

<pre><code>for i in foo_gen(20):
    print i
</code></pre>

<p>Of course, in these simple cases it's better to use xrange :)</p>

<p>Here is the documentation on the <a href=""http://docs.python.org/reference/simple_stmts.html#the-yield-statement"">yield statement</a>.</p>
"
160922,"<p>Look at documentation for following modules on <a href=""http://www.cpan.org/"" rel=""nofollow"">CPAN</a></p>

<p><a href=""http://search.cpan.org/search?query=HTML%3A%3ATreeBuilder&amp;mode=all"" rel=""nofollow"">HTML::TreeBuilder</a></p>

<p><a href=""http://search.cpan.org/author/MSISK/HTML-TableExtract-2.10/lib/HTML/TableExtract.pm"" rel=""nofollow"">HTML::TableExtract</a></p>

<p>and</p>

<p><a href=""http://search.cpan.org/search?query=parse+recdescent&amp;mode=all"" rel=""nofollow"">Parse::RecDescent</a></p>

<p>I've used these modules to process quite large and complex web-pages.</p>
"
5165,"<p>Yes, mod_python is pretty confusing to set up.  Here's how I did it.</p>

<p>In httpd.conf:</p>

<pre><code>LoadModule python_module modules/mod_python.so<br><br>&lt;Directory ""/serverbase/htdocs/myapp""&gt;<br>  AddHandler mod_python .py<br>  PythonHandler myapp<br>  PythonDebug On<br></code></pre>

<p>and in your application directory:</p>

<pre><code>$ /serverbase/htdocs/myapp$ ls -l<br>total 16<br>-r-xr-xr-x 1 root sys        6484 May 21 15:54 myapp.py<br></code></pre>

<p>Repeat the configuration for each python program you wish to have running under mod_python.</p>"
202988,"<p>I would use the <a href=""http://www.python.org/doc/2.5.2/lib/module-ConfigParser.html"">ConfigParser</a> module, which produces some pretty readable and user-editable output for your example:</p>

<pre>[bob]
colour_scheme: blue
british: yes
[joe]
color_scheme: that's 'color', silly!
british: no</pre>

<p>The following code would produce the config file above, and then print it out:</p>

<pre><code>import sys
from ConfigParser import *

c = ConfigParser()

c.add_section(""bob"")
c.set(""bob"", ""colour_scheme"", ""blue"")
c.set(""bob"", ""british"", str(True))

c.add_section(""joe"")
c.set(""joe"", ""color_scheme"", ""that's 'color', silly!"")
c.set(""joe"", ""british"", str(False))

c.write(sys.stdout)  # this outputs the configuration to stdout
                     # you could put a file-handle here instead

for section in c.sections(): # this is how you read the options back in
    print section
    for option in c.options(section):
            print ""\t"", option, ""="", c.get(section, option)

print c.get(""bob"", ""british"") # To access the ""british"" attribute for bob directly
</code></pre>

<p>Note that ConfigParser only supports strings, so you'll have to convert as I have above for the Booleans. See <a href=""http://effbot.org/librarybook/configparser.htm"">effbot</a> for a good run-down of the basics.</p>
"
250461,"<h3>What do you like about it?</h3>

<p>URL dispatching:  I was never a big fan of ""/foo.php"" is the file ""foo.php"" on my server, and if I want nicer URLs I need to mess around with mod_rewrite and keep that in line with what my logic in foo expects.</p>

<p>ORM: Because 90%+ of your queries, in my experience, do not need to be written by hand.  Smart caching is much more important for performance, in general.  You can <em>always</em> drop to raw SQL as needed.</p>

<p>Middleware and Signals: Easy to extend most parts of the request / response / view / render cycle without touching Django code itself.</p>

<h3>What made you switch/use it?</h3>

<p>It came out when I was disappointed with the Python web framework offerings.  An easy sell for me.</p>

<h3>How fast is it in production?</h3>

<p>Hmm, to be honest, I've never cared too much.  The webserver part of your app is (in my opinion) always the easiest to scale.  As long as you use 'best practices' and share nothing, all you need to do is add a software load balancer and you can add new webservers until the cows come home.  The first bottleneck people generally hit is database load - but Django gives you great caching APIs that help you alleviate that.</p>

<p>That said, I only skimmed this but it seems faster than Rails and the well known PHP frameworks: <a href=""http://wiki.rubyonrails.org/rails/pages/Framework+Performance"">http://wiki.rubyonrails.org/rails/pages/Framework+Performance</a></p>

<h3>How hard is it to master it?</h3>

<p>I guess it depends how you define 'master'.  The documentation is great, over the course of a decent sized site/app I think you'll use a little bit of everything, which is a great start.</p>
"
250459,"<p><strong><em>What do I like about it :</em></strong></p>

<ul>
<li>Very simple ORM</li>
<li>clear separation of template / controller</li>
<li>django-admin</li>
<li>pluggable apps : it seems to me that the Django community really nailed that one !</li>
</ul>

<p><strong><em>What made me switch :</em></strong></p>

<ul>
<li>mainly curiosity</li>
<li>I heard a lot of good things about it from a colleague</li>
<li>I wanted something more lightweight than the Java I do for a living</li>
<li>I had a side project heavily data-driven for which the Django-Admin interface is very useful</li>
</ul>

<p><strong><em>What features I'd like :</em></strong></p>

<ul>
<li>better / simpler control of the transactions (configuring different types of transactions (read only / read write / some tweaking here and there) isnt as easy as i am used to. Having a session in view model, where the transaction is still open in the view doesnt make me all that comfortable, I would prefer if the transactions didnt leave a service layer. But again, there isnt really a service layer in the Django model.</li>
<li>better model for business logic (maybe that's just me, but I miss the service oriented approach of enterprise java, I never know if I should put the business logic in the view, in the form or in the model. None of those solution make me feel warm and fuzzy ... at the same time, I dont have heavy business logic in the application I develop for the moment, and I would probably still use Java for those)</li>
<li>stability (in the sense of not changing, not in the sense of not crashing). Again, coming from Java, where I'm still working on Java 1.4 for a lot of projects, having a project that just released 1.0 and all the refactoring that went with it is not very reassuring. It did take some work to follow trunk and using 0.96 was not particularly compelling. I dont think I would feel comfortable to use it on a mission critical enterprise project yet.</li>
</ul>

<p>I realize that there is quite a few improvements that I would like. Dont understand me wrong, I love Django and I will stick to it for a lot of projects. I jsut wont put it everywhere yet ...</p>
"
1840,"<p><strong>On Linux:</strong></p>

<ul>
<li>set raw mode</li>
<li>select and read the keystroke</li>
<li>restore normal settings</li>
</ul>

<pre>
import sys
import select
import termios
import tty

def getkey():
    old_settings = termios.tcgetattr(sys.stdin)
    tty.setraw(sys.stdin.fileno())
    select.select([sys.stdin], [], [], 0)
    answer = sys.stdin.read(1)
    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)
    return answer

print """"""Menu
1) Say Foo
2) Say Bar""""""

answer=getkey()

if ""1"" in answer: print ""foo""
elif ""2"" in answer: print ""bar""

</pre>
"
1780,"<P>If you are looking for user facing interaction, stick with xml. It has more support, understanding, and general acceptance currently. If it's internal, I would say that protocol buffers are a great idea.</P>
<P>Maybe in a few years as more tools come out to support protocol buffers, then start looking towards that for a public facing api. Until then... <A href=""http://en.wikipedia.org/wiki/JSON"">JSON</A>?</P>"
281366,"<p>When I wanted to do it, I installed <a href=""http://www.jython.org/Project/"" rel=""nofollow"">Jython</a> and used the <a href=""http://docs.oracle.com/javase/1.5.0/docs/api/java/awt/Robot.html"" rel=""nofollow""><code>java.awt.Robot</code></a> class. If you need to make a CPython script this is obviously not suitable, but when you the flexibility to choose anything it is a nice cross-platform solution.</p>

<pre><code>import java.awt

robot = java.awt.Robot()

robot.mouseMove(x, y)
robot.mousePress(java.awt.event.InputEvent.BUTTON1_MASK)
robot.mouseRelease(java.awt.event.InputEvent.BUTTON1_MASK)
</code></pre>
"
745,"<p>Are you looking to get a list of objects that have a certain attribute? If so, a <a href=""http://docs.python.org/tut/node7.html#SECTION007140000000000000000"">list comprehension</a> is the right way to do this.</p>

<pre><code>result = [obj for obj in listOfObjs if hasattr(obj, 'attributeName')]<br></code></pre>"
348284,"<p>It shouldn't be necessary to recreate the SimpleClass object each time, as some are suggesting, if you're simply using it to output data based on its attributes.  However, you're not actually creating an instance of the class; you're simply creating a reference to the class object itself.  Therefore, you're adding a reference to the same class attribute to the list (instead of instance attribute), over and over.</p>

<p>Instead of:</p>

<pre><code>x = SimpleClass
</code></pre>

<p>you need:</p>

<pre><code>x = SimpleClass()
</code></pre>
"
280561,"<p>You use <code>self.attribute</code> to reference an attribute of your current instance.</p>

<p>You use <code>wx.Frame.__init__()</code> to reference a method of the parent class.</p>

<p>You don't use <code>self</code> if you only reference a local name (variable) of the method (function) you are in.</p>

<p>These are not ""rules of thumb,"" because there are no exceptions.</p>

<p><hr /></p>

<p>What is probably confusing you in this particular example is that panel seems to be only a local name in the constructor, so it looks like the panel would disappear, once your constructor returns.</p>

<p>If you look at the documentation to <code>wx.Panel</code>, though, you will see that <em>its</em> constructor attaches the panel to the parent window, so it will continue to exist, even after the constructor returns.</p>

<p>Magic :)</p>
"
137827,"<p>I'm going to be contrarian and suggest that, if you can, you should write your extension library using the <a href=""http://docs.python.org/api/"" rel=""nofollow"">standard Python API</a>.  It's really well-integrated from both a C and Python perspective... if you have any experience with the Perl API, you will find it a <em>very</em> pleasant surprise.</p>

<p>Ctypes is nice too, but as others have said, it doesn't do C++.</p>

<p>How big is the library you're trying to wrap?  How quickly does the codebase change?  Any other maintenance issues?  These will all probably affect the choice of the best way to write the Python bindings.</p>
"
28935,"<p>I've never attempted it myself, but hearing plenty about other people who've tried, it's not a road you want to go down.</p>

<p>There is the alternative of putting the gui in pygame itself. There are plenty of gui toolkits built specifically for pygame that you could use. Most of them are rather unfinished, but there are 2 big, actively maintained ones: <a href=""http://www.pygame.org/project/108/"" rel=""nofollow"">PGU</a> and <a href=""http://www.pygame.org/project/125/"" rel=""nofollow"">OcempGUI</a>. The full list on the pygame site is <a href=""http://www.pygame.org/tags/gui"" rel=""nofollow"">here</a>.</p>
"
242111,"<p>Not exactly.  For emulating things <em>other</em> than lists, there's <code>__getattribute__</code>, but unfortunately Python doesn't consider operators like <code>x[y]</code> or <code>x(y)</code> to be <em>exactly</em> the same as <code>x.__getitem__(y)</code> or <code>x.__call__(y)</code>.  Operators like that are attributes of the class, not attributes of the instance, as you can see here:</p>

<pre><code>&gt;&gt;&gt; class x(object):
...     def __getattribute__(self, o):
...         print o
... 
&gt;&gt;&gt; x()[3]
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: 'x' object does not support indexing
</code></pre>

<p>However, you can take advantage of Python's dynamic nature to effectively eliminate that distinction.  If your main concern is to save yourself typing, and to produce less code that needs maintaining, you can do something like this:</p>

<pre><code>class override(object):
    def __init__(self, methodName):
        self.methodName = methodName

    def __get__(self, oself, cls):
        oself._load(self.methodName)
        return getattr(super(oself.__class__, oself), self.methodName)

class LazyList(list):
    def _load(self, name):
        print 'Loading data for %s...' % (name,)

    for methodName in set(dir(list)) - set(dir(object)):
        locals()[methodName] = override(methodName)
</code></pre>

<p>You probably don't want to use <code>dir()</code> in real life, but a suitable fixed list of strings could work as a substitute.</p>
"
281330,"<p>I dug through the source code of Synergy to find the call that generates mouse events:</p>

<pre><code>#include &lt;ApplicationServices/ApplicationServices.h&gt;

int to(int x, int y)
{
    CGPoint newloc;
    CGEventRef eventRef;
    newloc.x = x;
    newloc.y = y;

    eventRef = CGEventCreateMouseEvent(NULL, kCGEventMouseMoved, newloc,
                                        kCGMouseButtonCenter);
    //Apparently, a bug in xcode requires this next line
    CGEventSetType(eventRef, kCGEventMouseMoved);
    CGEventPost(kCGSessionEventTap, eventRef);
    CFRelease(eventRef);

    return 0;
}
</code></pre>

<p>Now to write Python bindings!</p>
"
279892,"<p>This would work, too:</p>

<pre><code>def curry(func, *args):
    def curried(*innerargs):
       return func(*(args+innerargs))
    curried.__name__ = ""%s(%s, ...)"" % (func.__name__, "", "".join(map(str, args)))
    return curried

&gt;&gt;&gt; w=curry(sys.stdout.write, ""Hey there"")
&gt;&gt;&gt; w()
Hey there
</code></pre>
"
95682,"<p>A destructor (as in a __del__ method) is a bad idea, as these are not guaranteed to be called. The atexit module is a safer approach, although these will still not fire if the Python interpreter crashes (rather than the Python application), or if os._exit() is used, or the process is killed aggressively, or the machine reboots. (Of course, the last item isn't an issue in your case.) If your process is crash-prone (it uses fickle third-party extension modules, for instance) you may want to do the cleanup in a simple parent process for more isolation.</p>

<p>If you aren't really worried, use the atexit module.</p>
"
163163,"<p>The impression I get is that 2.6 should work fine with Django 1.0. As found here: <a href=""http://simonwillison.net/2008/Oct/2/whatus/"" rel=""nofollow"">http://simonwillison.net/2008/Oct/2/whatus/</a> </p>
"
126250,"<p>The big complication here is emulating the full browser environment outside of a browser. You can use stand alone javascript interpreters like Rhino and SpiderMonkey to run javascript code but they don't provide a complete browser like environment to full render a web page.</p>

<p>If I needed to solve a problem like this I would first look at how the javascript is rendering the page, it's quite possible it's fetching data via AJAX and using that to render the page. I could then use python libraries like simplejson and httplib2 to directly fetch the data and use that, negating the need to access the DOM object. However, that's only one possible situation, I don't know the exact problem you are solving.</p>

<p>Other options include the selenium one mentioned by Åukasz, some kind of webkit embedded craziness, some kind of IE win32 scripting craziness or, finally, a pyxpcom based solution (with added craziness). All these have the drawback of requiring pretty much a fully running web browser for python to play with, which might not be an option depending on your environment.</p>
"
250471,"<pre><code>def smart_truncate1(text, max_length=100, suffix='...'):
    """"""Returns a string of at most `max_length` characters, cutting
    only at word-boundaries. If the string was truncated, `suffix`
    will be appended.
    """"""

    if len(text) &gt; max_length:
        pattern = r'^(.{0,%d}\S)\s.*' % (max_length-len(suffix)-1)
        return re.sub(pattern, r'\1' + suffix, text)
    else:
        return text
</code></pre>

<p>OR</p>

<pre><code>def smart_truncate2(text, min_length=100, suffix='...'):
    """"""If the `text` is more than `min_length` characters long,
    it will be cut at the next word-boundary and `suffix`will
    be appended.
    """"""

    pattern = r'^(.{%d,}?\S)\s.*' % (min_length-1)
    return re.sub(pattern, r'\1' + suffix, text)
</code></pre>

<p>OR</p>

<pre><code>def smart_truncate3(text, length=100, suffix='...'):
    """"""Truncates `text`, on a word boundary, as close to
    the target length it can come.
    """"""

    slen = len(suffix)
    pattern = r'^(.{0,%d}\S)\s+\S+' % (length-slen-1)
    if len(text) &gt; length:
        match = re.match(pattern, text)
        if match:
            length0 = match.end(0)
            length1 = match.end(1)
            if abs(length0+slen-length) &lt; abs(length1+slen-length):
                return match.group(0) + suffix
            else:
                return match.group(1) + suffix
    return text
</code></pre>
"
228959,"<p>I have written a simple Jabber bot (and thus Google talk bot) using the <code>xmpppy</code> library, which works well. The examples on <a href=""http://xmpppy.sourceforge.net/"" rel=""nofollow"">xmpppy</a> should get you started (specifically <a href=""http://xmpppy.sourceforge.net/examples/bot.py"" rel=""nofollow""><code>bot.py</code></a>)</p>

<p>As for something actually implemented in twisted.Words:</p>

<p><a href=""http://yoan.dosimple.ch/blog/2007/01/30/"" rel=""nofollow"">Here</a> is a simple tutorial on creating a bot that prints every received message to the local terminal (and a version that replies with the revere of the received message). To track the online time of various accounts, you would add a callback for ""presences"" (going online/offline/away etc are ""presence changes"", in Jabber terminology)</p>

<p>For a more complete system, <a href=""http://code.google.com/p/pownce-jabber-bot/"" rel=""nofollow"">pownce-jabber-bot</a> uses twisted.words and  <a href=""http://wokkel.ik.nu/"" rel=""nofollow"">wokkel</a> for the jabber interface.</p>

<p><a href=""http://code.google.com/p/pownce-jabber-bot/source/browse/trunk/powncebot/%5F%5Finit%5F%5F.py?spec=svn15&amp;r=15"" rel=""nofollow"">The  powncebot/__init__.py</a> file seems like a good place to start - it's seems pretty simple.</p>
"
143995,"<p>The answer to the question is: PEP-8 wants to make a recommendation and has decided that since spaces are more popular it will strongly recommend spaces over tabs.</p>

<p><hr /></p>

<p>Notes on PEP-8</p>

<p>PEP-8 says <em>'Use 4 spaces per indentation level.'</em><br />
Its clear that this is the standard recommendation.</p>

<p><em>'For really old code that you don't want to mess up, you can continue to use 8-space tabs.'</em><br />
Its clear that there are SOME circumstances when tabs can be used.</p>

<p><em>'Never mix tabs and spaces.'</em><br />
This is a clear prohibition of mixing - I think we all agree on this.  Python can detect this and often chokes.  Using the -tt argument makes this an explicit error.</p>

<p><em>'The most popular way of indenting Python is with spaces only.  The second-most popular way is with tabs only.'</em><br />
This clearly states that both are used.  Just to be ultra-clear: You should still never mix spaces and tabs in same file.</p>

<p><em>'For new projects, spaces-only are strongly recommended over tabs.'</em><br />
This is a clear recommendation, and a strong one, but not a prohibition of tabs.</p>

<p><hr /></p>

<p>I can't find a good answer to my own question in PEP-8. 
I use tabs, which I have used historically in other languages.
Python accepts source with exclusive use of tabs.  That's good enough for me.</p>

<p>I thought I would have a go at working with spaces.  In my editor, I configured a file type to use spaces exclusively and so it inserts 4 spaces if I press tab.  If I press tab too many times, I have to delete the spaces!  <strong>Arrgh!</strong>  Four times as many deletes as tabs!  My editor can't tell that I'm using 4 spaces for indents (although AN editor might be able to do this) and obviously insists on deleting the spaces one at a time.</p>

<p>Couldn't Python be told to consider tabs to be n spaces when its reading indentations?
If we could agree on 4 spaces per indentation and 4 spaces per tab and allow Python to accept this, then there would be no problems.<br />
We should find win-win solutions to problems.</p>
"
48414,"<p>I like <a href=""http://jtauber.com/blog/2006/04/15/python_tuples_are_not_just_constant_lists/"">this explanation</a>.</p>

<p>Basically, you should use tuples when there's a constant structure (the 1st position always holds one type of value and the second another, and so forth), and lists should be used for lists of homogeneous values.</p>

<p>Of course there's always exceptions, but this is a good general guideline.</p>
"
196950,"<p>If the content is long enough I would suggest some <a href=""http://en.wikipedia.org/wiki/Frequency_analysis"" rel=""nofollow"">frequency analysis</a> on the letters. </p>

<p>But for a few words I think your best bet is to compare them to an English dictionary and accept the input if half of them match.</p>
"
304627,"<p>For a dictionary, you're best of encoding to JSON first. You can use simplejson.dumps() or if you want to convert from a data model in App Engine, you could use encode() from the GQLEncoder library. </p>
"
70237,"<pre><code>import ImageGrab
img = ImageGrab.grab()
img.save('test.jpg','JPEG')
</code></pre>

<p>this requires Python Imaging Library</p>
"
253103,"<p>It depends on how the user installs your package. If the user actually runs ""setup.py install"", it's fairly easy: Just add another subcommand to the install command (say, install_vim), whose run() method will copy the files you want in the places where you want them. You can add your subcommand to install.sub_commands, and pass the command into setup().</p>

<p>If you want a post-install script in a binary, it depends on the type of binary you are creating. For example, bdist_rpm, bdist_wininst, and bdist_msi have support for post-install scripts, because the underlying packing formats support post-install scripts.</p>

<p>bdist_egg doesn't support a post-install mechanism by design:</p>

<p><a href=""http://bugs.python.org/setuptools/issue41"">http://bugs.python.org/setuptools/issue41</a></p>
"
125061,"<p>You should use the <code>@property</code> decorator.</p>

<pre><code>&gt;&gt;&gt; class a(object):
...     def __init__(self, x):
...             self.x = x
...     @property
...     def xval(self):
...             return self.x
... 
&gt;&gt;&gt; b = a(5)
&gt;&gt;&gt; b.xval
5
&gt;&gt;&gt; b.xval = 6
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
AttributeError: can't set attribute
</code></pre>
"
324273,"<pre><code>l=[1,2,3]
for i,item in enumerate(l):
    if item==2:
        get_previous=l[i-1]
        print get_previous

&gt;&gt;&gt;1
</code></pre>
"
257511,"<p>They are both specifications for plugging a web application into a web server. One glaring difference is that WSGI comes from the Python world, and I believe there are no non-python implementations.</p>

<p><strong>Specifications are generally not comparable based on better/faster/reliable.</strong> </p>

<p>Only their implementations are comparable, and I am sure you will find good implementations of both specifications.</p>

<p>Perhaps <a href=""http://en.wikipedia.org/wiki/SCGI"">read</a> and <a href=""http://en.wikipedia.org/wiki/WSGI"">read</a>.</p>
"
255580,"<p>The convention is often to use <code>arg=None</code> and use</p>

<pre><code>def foo(arg=None):
    if arg is None:
        arg = ""default value""
        # other stuff
    # ...
</code></pre>

<p>to check if it was passed or not. Allowing the user to pass <code>None</code>, which would be interpreted as if the argument was <em>not</em> passed.</p>
"
325467,"<p>The <code>os.exec*()</code> functions <em>replace</em> the current programm with the new one. When this programm ends so does your process. You probably want <code>os.system()</code>.</p>
"
50521,"<p>The <code>__file__</code> attribute works for both the file containing the main execution code as well as imported modules.</p>

<p>See <a href=""https://web.archive.org/web/20090918095828/http://pyref.infogami.com/__file__"" rel=""nofollow"">https://web.archive.org/web/20090918095828/http://pyref.infogami.com/__file__</a></p>
"
250395,"<p>The main overhead here is the multiple individual puts to the datastore. If you can, store the links as a single entity, as Andre suggests. You can always split the links into an array and store it in a ListProperty.</p>

<p>If you do need an entity for each link, try this:</p>

<pre><code># For each line in the input, add to the database
groups = []
for x in allLinks:
     newGroup = LinkGrouping()
     newGroup.reference = hash
     newGroup.link = x
     groups.append(newGroup)
db.put(groups)
</code></pre>

<p>It will reduce the datastore roundtrips to one, and it's the roundtrips that are really killing your high CPU cap.</p>
"
67532,"<p>You might want to try <a href=""http://www.msobczak.com/prog/yami/"">YAMI</a> , it's very simple yet functional, portable and comes with binding to few languages</p>
"
172794,"<p>I'm surprised no one mentioned ShedSkin: <a href=""http://code.google.com/p/shedskin/"">http://code.google.com/p/shedskin/</a>, it automagically converts your python program to C++ and in some benchmarks yields better improvements than psyco in speed.  </p>

<p>Plus anecdotal stories on the simplicity: <a href=""http://pyinsci.blogspot.com/2006/12/trying-out-latest-release-of-shedskin.html"">http://pyinsci.blogspot.com/2006/12/trying-out-latest-release-of-shedskin.html</a></p>

<p>There are limitations though, please see: <a href=""http://tinyurl.com/shedskin-limitations"">http://tinyurl.com/shedskin-limitations</a></p>
"
339235,"<p>There are plenty of Python parsing tools: <a href=""http://nedbatchelder.com/text/python-parsers.html"">http://nedbatchelder.com/text/python-parsers.html</a></p>
"
196039,"<p>One thing that CherryPy's webserver has going for it is that it's a pure python webserver (AFAIK), which may or may not make deployment easier for you.  Plus, I could see the benefits of using it if you're just using a server for WSGI and static content.</p>

<p>(shameless plug warning:  I wrote the WSGI code that I'm about to mention)</p>

<p><a href=""http://www.kamaelia.org/Home"">Kamaelia</a> will have WSGI support coming in the next release.  The cool thing is that you'll likely be able to either use the pre-made one or build your own using the existing HTTP and WSGI code.</p>

<p>(end shameless plug)</p>

<p>With that said, given the current options, I would personally probably go with CherryPy because it seems to be the simplest to configure and I can understand python code moreso than I can understand C code.</p>

<p>You may do best to try each of them out and see what the pros and cons of each one are for your specific application though.</p>
"
337990,"<p><code>sys.stdin</code> and <code>sys.stdout</code> handles are invalid because pythonw does not provide console support as it runs as a deamon, so default arguments of <code>subprocess.call()</code> are failing.</p>

<p>Deamon programs close stdin/stdout/stderr purposedly and use logging instead, so that you have to manage this yourself: I would suggest to use subprocess.PIPE.</p>

<p>If you <em>really</em> don't care about what the sub process says for errors and all, you could use <code>os.devnull</code> (I'm not really sure how portable it is?) but I wouldn't recommend that.</p>
"
255705,"<p>You could try with
<a href=""http://google.com/complete/search?output=toolbar&amp;q=keyword"">http://google.com/complete/search?output=toolbar&amp;q=keyword</a></p>

<p>and then parse the xml result.</p>
"
122387,"<p>An additional note to the <code>get_python_lib</code> function mentioned already: on some platforms different directories are used for platform specific modules (eg: modules that require compilation).  If you pass <code>plat_specific=True</code> to the function you get the site packages for platform specific packages.</p>
"
73019,"<p>I guess you've meant:</p>

<pre><code>[{'name':'Homer', 'age':39}, {'name':'Bart', 'age':10}]
</code></pre>

<p>This would be sorted like this:</p>

<pre><code>sorted(l,cmp=lambda x,y: cmp(x['name'],y['name']))
</code></pre>
"
338391,"<p>A solution working with Python 2.4 (it should work with any version superior to 2.1) and Pydev:</p>

<pre><code>import inspect

def isdebugging():
  for frame in inspect.stack():
    if frame[1].endswith(""pydevd.py""):
      return True
  return False
</code></pre>

<p>The same should work with pdb by simply replacing <code>pydevd.py</code> with <code>pdb.py</code>. As do3cc suggested, it tries to find the debugger within the stack of the caller.</p>

<p>Useful links:</p>

<ul>
<li><a href=""https://docs.python.org/library/pdb.html"" rel=""nofollow"">The Python Debugger</a></li>
<li><a href=""https://docs.python.org/library/inspect.html#the-interpreter-stack"" rel=""nofollow"">The interpreter stack</a></li>
</ul>
"
147835,"<p>Take a look at the <a href=""http://www.phyast.pitt.edu/~micheles/python/documentation.html"">decorator</a> module - specifically the <a href=""http://www.phyast.pitt.edu/~micheles/python/documentation.html#decorator-is-a-decorator"">decorator</a> decorator, which solves this problem.</p>
"
197990,"<p>Here's a relatively simple example of how do it...</p>

<pre><code># -*- coding: utf-8 -*-
import re

# Test Data
ENCODING_RAW_DATA = (
    ('latin_1',    'L', u'Hello'),        # Latin 1
    ('iso8859_2',  'E', u'dobrÃ½ veÄer'),  # Central Europe
    ('iso8859_9',  'T', u'Ä°yi akÅamlar'), # Turkish
    ('iso8859_13', 'B', u'Ä® sveikatÄ!'),  # Baltic
    ('shift_jis',  'J', u'ä»æ¥ã¯'),        # Japanese
    ('iso8859_5',  'C', u'ÐÐ´ÑÐ°Ð²ÑÑÐ²ÑÐ¹ÑÐµ'), # Cyrillic
    ('iso8859_7',  'G', u'ÎÎµÎ¹Î¬ ÏÎ¿Ï'),   # Greek
)

CODE_TO_ENCODING = dict([(chr(ord(code)-64), encoding) for encoding, code, text in ENCODING_RAW_DATA])
EXPECTED_RESULT = u''.join([line[2] for line in ENCODING_RAW_DATA])
ENCODED_DATA = ''.join([chr(ord(code)-64) + text.encode(encoding) for encoding, code, text in ENCODING_RAW_DATA])

FIND_RE = re.compile('[\x00-\x1A][^\x00-\x1A]*')

def decode_single(bytes):
    return bytes[1:].decode(CODE_TO_ENCODING[bytes[0]])

result = u''.join([decode_single(bytes) for bytes in FIND_RE.findall(ENCODED_DATA)])

assert result==EXPECTED_RESULT, u""Expected %s, but got %s"" % (EXPECTED_RESULT, result)
</code></pre>
"
307727,"<p>Thanks to both of you for your suggestions.  I've implemented (first iteration) as follows.  Not sure if it's the best approach, but it's working.</p>

<p>Class A = Articles.  Has a StringListProperty which can be queried on it's list elements</p>

<p>Class B = Tags.  One entity per tag, also keeps a running count of the total number of articles using each tag.</p>

<p>Data modifications to A are accompanied by maintenance work on B.  Thinking that counts being pre-computed is a good approach in a read-heavy environment.</p>
"
149917,"<p>You could use a decorator function such as:</p>

<pre><code>class cache(object):
    def __init__(self, fun):
        self.fun = fun
        self.cache = {}

    def __call__(self, *args, **kwargs):
        key  = str(args) + str(kwargs)
        try:
            return self.cache[key]
        except KeyError:
            self.cache[key] = rval = self.fun(*args, **kwargs)
            return rval
        except TypeError: # incase key isn't a valid key - don't cache
            return self.fun(*args, **kwargs)
</code></pre>

<p>and define a function along the lines of:</p>

<pre><code>@cache
def get_url_src(url):
    return urllib.urlopen(url).read()
</code></pre>

<p>This is assuming you're not paying attention to HTTP Cache Controls, but just want to cache the page for the duration of the application</p>
"
222556,"<p><a href=""https://docs.python.org/library/re.html#regular-expression-syntax"" rel=""nofollow"">https://docs.python.org/library/re.html#regular-expression-syntax</a></p>

<blockquote>
  <p>(?...)    This is an extension
  notation (a ""?"" following a ""("" is not
  meaningful otherwise). The first
  character after the ""?"" determines
  what the meaning and further syntax of
  the construct is. Extensions usually
  do not create a new group;
  (?P...) is the only exception to
  this rule. Following are the currently
  supported extensions. </p>
  
  <p>(?iLmsux)    (One or more letters from
  the set ""i"", ""L"", ""m"", ""s"", ""u"", ""x"".)
  The group matches the empty string;
  the letters set the corresponding
  flags (re.I, re.L, re.M, re.S, re.U,
  re.X) for the entire regular
  expression. This is useful if you wish
  to include the flags as part of the
  regular expression, instead of passing
  a flag argument to the compile()
  function.</p>
  
  <p>Note that the (?x) flag changes how
  the expression is parsed. It should be
  used first in the expression string,
  or after one or more whitespace
  characters. If there are
  non-whitespace characters before the
  flag, the results are undefined.</p>
</blockquote>

<p>So in this case the string is a regular expression, and is set to be case-insensitive.</p>
"
222776,"<p>From <a href=""http://wiki.python.org/moin/HowTo/Sorting#head-d121eed08556ad7cb2a02a886788656dadb709bd"">Sorting Mini-HOW TO</a></p>

<blockquote>
  <p>Often there's a built-in that will
  match your needs, such as str.lower().
  The operator module contains a number
  of functions useful for this purpose.
  For example, you can sort tuples based
  on their second element using
  operator.itemgetter():</p>
</blockquote>

<pre><code>&gt;&gt;&gt; import operator 
&gt;&gt;&gt; L = [('c', 2), ('d', 1), ('a', 4), ('b', 3)]
&gt;&gt;&gt; map(operator.itemgetter(0), L)
['c', 'd', 'a', 'b']
&gt;&gt;&gt; map(operator.itemgetter(1), L)
[2, 1, 4, 3]
&gt;&gt;&gt; sorted(L, key=operator.itemgetter(1))
[('d', 1), ('c', 2), ('b', 3), ('a', 4)]
</code></pre>

<p>Hope this helps.</p>
"
148891,"<p>This ActiveState Python recipe might be helpful:
<a href=""http://code.activestate.com/recipes/491261/"" rel=""nofollow"">http://code.activestate.com/recipes/491261/</a></p>
"
21975,"<p>Short answer: Because of timezones.</p>

<p>The Epoch is in UTC.</p>

<p>For example, I'm on IST (Irish Stsandard Time) or GMT+1. time.mktime() is relative to my timezone, so on my system this refers to</p>

<pre><code>&gt;&gt;&gt; time.mktime((2009, 1, 31, 0, 0, 0, 5, 31, -1))
1233360000.0
</code></pre>

<p>Because you got the result 1233378000, that would suggest that you're 5 hours behind me</p>

<pre><code>&gt;&gt;&gt; (1233378000 - 1233360000) / (60*60)    
5
</code></pre>

<p>Have a look at the time.gmtime() function which works off UTC.</p>
"
72950,"<p>You have to implement your own comparison function that will compare the dictionaries by values of name keys. See <a href=""http://wiki.python.org/moin/HowTo/Sorting"">Sorting Mini-HOW TO from PythonInfo Wiki</a></p>
"
299611,"<p>lxml provides etree.DTD</p>

<p>from the tests on <a href=""http://lxml.de/api/lxml.tests.test_dtd-pysrc.html"" rel=""nofollow"">http://lxml.de/api/lxml.tests.test_dtd-pysrc.html</a></p>

<pre><code>...
root = etree.XML(_bytes(""&lt;b/&gt;"")) 
dtd = etree.DTD(BytesIO(""&lt;!ELEMENT b EMPTY&gt;"")) 
self.assert_(dtd.validate(root)) 
</code></pre>
"
43753,"<p>If you decide to go with a framework that is WSGI-based (for instance <a href=""http://www.turbogears.org/2.0"" rel=""nofollow"">TurboGears</a>), I would recommend you go through the excellent article <a href=""http://pythonpaste.org/webob/do-it-yourself.html"" rel=""nofollow"">Another Do-It-Yourself Framework</a> by Ian Bicking.</p>

<p>In the article, he builds a simple web application framework from scratch.</p>

<p>Also, check out the video <a href=""http://www.vimeo.com/3258566"" rel=""nofollow"">Creating a web framework with WSGI</a> by Kevin Dangoor. Dangoor is the founder of the TurboGears project.</p>
"
149212,"<p>Definitely threads. Why? The future is multi-core. Almost any new CPU has more than one core or if it has just one, it might support hyperthreading and thus pretending it has more than one. To effectively make use of multi-core CPUs (and Intel is planing to go up to 32 cores in the not so far future), you need multiple threads. If you run all in one main thread (usually the UI thread is the main thread), users will have CPUs with 8, 16 and one day 32 cores and your application never uses more than one of these, IOW it runs much, much slower than it could run.</p>

<p>Actual if you plan an application nowadays, I would go away of the classical design and think of a master/slave relationship. Your UI is the master, it's only task is to interact with the user. That is displaying data to the user and gathering user input. Whenever you app needs to ""process any data"" (even small amounts and much more important big ones), create a ""task"" of any kind, forward this task to a background thread and make the thread perform the task, providing feedback to the UI (e.g. how many percent it has completed or just if the task is still running or not, so the UI can show a ""work-in-progress indicator""). If possible, split the task into many small, independent sub-tasks and run more than one background process, feeding one sub-task to each of them. That way your application can really benefit from multi-core and get faster the more cores CPUs have.</p>

<p>Actually companies like Apple and Microsoft are already planing on how to make their still most single threaded UIs themselves multithreaded. Even with the approach above, you may one day have the situation that the UI is the bottleneck itself. The background processes can process data much faster than the UI can present it to the user or ask the user for input. Today many UI frameworks are little thread-safe, many not thread-safe at all, but that will change. Serial processing (doing one task after another) is a dying design, parallel processing (doing many task at once) is where the future goes. Just look at graphic adapters. Even the most modern NVidia card has a pitiful performance, if you look at the processing speed in MHz/GHz of the GPU alone. How comes it can beat the crap out of CPUs when it comes to 3D calculations? Simple: Instead of calculating one polygon point or one texture pixel after another, it calculates many of them in parallel (actually a whole bunch at the same time) and that way it reaches a throughput that still makes CPUs cry. E.g. the ATI X1900 (to name the competitor as well) has 48 shader units!</p>
"
297310,"<p><a href=""http://www.w3.org/TR/xpath#node-tests"">XPath considers all unprefixed names to be in ""no namespace""</a>.</p>

<p>In particular the spec says:</p>

<p>""A QName in the node test is expanded into an expanded-name using the namespace declarations from the expression context. This is the same way expansion is done for element type names in start and end-tags except that the default namespace declared with xmlns is not used: if the QName does not have a prefix, then the namespace URI is null (this is the same way attribute names are expanded). ""</p>

<p>See those two detailed explanations of the problem and its solution: <a href=""http://www.topxml.com/people/bosley/defaultns.asp""><strong>here</strong></a> and <a href=""http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=1455253&amp;SiteID=1""><strong>here</strong></a>. The solution is to associate a prefix (with the API that's being used) and to use it to prefix any unprefixed name in the XPath expression.</p>

<p>Hope this helped.</p>

<p>Cheers,</p>

<p>Dimitre Novatchev</p>
"
298052,"<p>MiniUPnP source code contains a Python sample code using the C library as an extension module (see <code>testupnpigd.py</code>), which I consider as a proper solution to my problem.</p>

<p>Rationale: this is not the pure Python solution I was looking for, but:</p>

<ul>
<li>significant effort has already been invested in this library,</li>
<li>it is lightweight (it does not address Media Server issues),</li>
<li>IGD is typically only used at connection setup, so not integrating it tighter with the Python code does not seem like an issue,</li>
<li>as a bonus, it also provides a NAT-PNP implementation (the Apple concurrent of IGD, part of <a href=""http://developer.apple.com/networking/bonjour/specs.html"">Bonjour</a>).</li>
</ul>
"
298489,"<p>You need to look at the Django <a href=""http://docs.djangoproject.com/en/dev/topics/forms/#topics-forms-index"">forms</a>.</p>

<p>You should never build your own form like that.</p>

<p>You should declare a Form class which includes a <a href=""http://docs.djangoproject.com/en/dev/ref/forms/fields/#choicefield"">ChoiceField</a> and provide the domain of choices to that field.  Everything will happen pretty much automatically from there.</p>

<p>The choices, BTW, should be defined in your Model as the range of values for that Model field.</p>

<p>Your page merely includes <code>{{form}}</code>.  Django builds the form with the choices and decodes the choices to a final result.</p>
"
260312,"<p>I think reading the last 2 KB or so of the file should make sure you get 10 lines, and shouldn't be too much of a resource hog.</p>

<pre><code>file_handle = open(""somefile"")
file_size = file_handle.tell()
file_handle.seek(max(file_size - 2*1024, 0))

# this will get rid of trailing newlines, unlike readlines()
last_10 = file_handle.read().splitlines()[-10:]

assert len(last_10) == 10, ""Only read %d lines"" % len(last_10)
</code></pre>
"
323041,"<p>I've tried db.delete(results) and App Engine Console, and none of them seems to be working for me. Manually removing entries from Data Viewer (increased limit up to 200) didn't work either since I have uploaded more than 10000 entries. I ended writing this script </p>

<pre><code>from google.appengine.ext import db
from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app
import wsgiref.handlers
from mainPage import YourData #replace this with your data
class CleanTable(webapp.RequestHandler):
    def get(self, param):
        txt = self.request.get('table')
        q = db.GqlQuery(""SELECT * FROM ""+txt)
        results = q.fetch(10)
        self.response.headers['Content-Type'] = 'text/plain'
        #replace yourapp and YouData your app info below.
        self.response.out.write(""""""
          &lt;html&gt;
          &lt;meta HTTP-EQUIV=""REFRESH"" content=""5; url=http://yourapp.appspot.com/cleanTable?table=YourData""&gt;
            &lt;body&gt;"""""")

        try:
            for i in range(10):
                db.delete(results)
                results = q.fetch(10, len(results))
                self.response.out.write(""&lt;p&gt;10 removed&lt;/p&gt;"")
                self.response.out.write(""""""
                &lt;/body&gt;
              &lt;/html&gt;"""""")

        except Exception, ints:
            self.response.out.write(str(inst))

def main():
  application = webapp.WSGIApplication([
    ('/cleanTable(.*)', CleanTable),
  ])

  wsgiref.handlers.CGIHandler().run(application)
</code></pre>

<p>The trick was to include redirect in html instead of using self.redirect. I'm ready to wait overnight to get rid of all the data in my table. Hopefully, GAE team will make it easier to drop tables in the future.  </p>
"
130312,"<p>The most obvious (and I would argue most readable) answer is to not use a list comprehension or generator expression, but rather a real generator:</p>

<pre><code>def gen_expensive(mylist):
    for item in mylist:
        result = expensive(item)
        if result:
            yield result
</code></pre>

<p>It takes more horizontal space, but it's much easier to see what it does at a glance, and you end up not repeating yourself.</p>
"
131452,"<pre><code>if element in mylist:
    index = mylist.index(element)
    # ... do something
else:
    # ... do something else
</code></pre>
"
248758,"<p>Your idea about the daemon has much merit, despite the complexity it introduces. As long as the actions don't require some user interface interaction <em>as root</em>, a daemon allows you to control what operations are allowed and disallowed.</p>

<p>However, you can use SUDO to create a controlled compromise between ROOT and normal users... simply grant SUDO access to the users in question for the specific tools they need. That reduces the attack surface by allowing only ""permitted"" root launches.</p>
"
51570,"<p>Rather than focusing on making your existing structures more readable, you should focus on making more logical structures.  Make smaller blocks, try not to nest blocks excessively, make smaller functions, and try to think through your code flow more.</p>

<p>If you come to a point where you can't quickly determine the structure of your code, you should probably consider refactoring and adding some comments.  Code flow should always be immediately apparent -- the more you have to think about it, the less maintainable your code becomes.</p>
"
321941,"<p>If the problem is really just the whitespace and attribute order, and you have no other constructs than text and elements to worry about, you can parse the strings using a standard XML parser and compare the nodes manually. Here's an example using minidom, but you could write the same in etree pretty simply:</p>

<pre><code>def isEqualXML(a, b):
    da, db= minidom.parseString(a), minidom.parseString(b)
    return isEqualElement(da.documentElement, db.documentElement)

def isEqualElement(a, b):
    if a.tagName!=b.tagName:
        return False
    if sorted(a.attributes.items())!=sorted(b.attributes.items()):
        return False
    if len(a.childNodes)!=len(b.childNodes):
        return False
    for ac, bc in zip(a.childNodes, b.childNodes):
        if ac.nodeType!=bc.nodeType:
            return False
        if ac.nodeType==ac.TEXT_NODE and ac.data!=bc.data:
            return False
        if ac.nodeType==ac.ELEMENT_NODE and not isEqualElement(ac, bc):
            return False
    return True
</code></pre>

<p>If you need a more thorough equivalence comparison, covering the possibilities of other types of nodes including CDATA, PIs, entity references, comments, doctypes, namespaces and so on, you could use the DOM Level 3 Core method isEqualNode. Neither minidom nor etree have that, but pxdom is one implementation that supports it:</p>

<pre><code>def isEqualXML(a, b):
    da, db= pxdom.parseString(a), pxdom.parseString(a)
    return da.isEqualNode(db)
</code></pre>

<p>(You may want to change some of the DOMConfiguration options on the parse if you need to specify whether entity references and CDATA sections match their replaced equivalents.)</p>

<p>A slightly more roundabout way of doing it would be to parse, then re-serialise to canonical form and do a string comparison. Again pxdom supports the DOM Level 3 LS option âcanonical-formâ which you could use to do this; an alternative way using the stdlib's minidom implementation is to use c14n. However you must have the PyXML extensions install for this so you still can't quite do it within the stdlib:</p>

<pre><code>from xml.dom.ext import c14n

def isEqualXML(a, b):
    da, bd= minidom.parseString(a), minidom.parseString(b)
    a, b= c14n.Canonicalize(da), c14n.Canonicalize(db)
    return a==b
</code></pre>
"
34078,"<p>The GIL (Global Interpreter Lock) might be a problem, but the API is quite OK. Try out the excellent <code>processing</code> module, which implements the Threading API for separate processes. I am using that right now (albeit on OS X, have yet to do some testing on Windows) and am really impressed. The Queue class is really saving my bacon in terms of managing complexity!</p>

<p><strong>EDIT</strong>: it seemes the processing module is being included in the standard library as of version 2.6 (<code>import multiprocessing</code>). Joy!</p>
"
296064,"<p>It makes no substantial difference. If the big module has already been loaded, the second import in your second example does nothing except adding 'ReallyBigLib' to the current namespace.</p>
"
296663,"<p>You may be interested in this question: <a href=""http://stackoverflow.com/questions/69316/biggest-differences-of-thrift-vs-protocol-buffers"">""Biggest differences of Thrift vs Protocol Buffers?""</a></p>
"
119616,"<blockquote>
  <blockquote>
    <p>Simple, parse MP3 binary blob to calculate something, in Python</p>
  </blockquote>
</blockquote>

<p>That sounds like a pretty tall order. I don't know Python, but here's some code I've refactored from another program I once tried to write.</p>

<p><strong>Note:</strong> It's in C++ (sorry, it's what I've got). Also, as-is, it'll only handle constant bit rate MPEG 1 Audio Layer 3 files. That <em>should</em> cover most, but I can't make any guarantee as to this working in all situations. Hopefully this does what you want, and hopefully refactoring it into Python is easier than doing it from scratch.</p>

<pre class=""lang-cpp prettyprint-override""><code>// determines the duration, in seconds, of an MP3;
// assumes MPEG 1 (not 2 or 2.5) Audio Layer 3 (not 1 or 2)
// constant bit rate (not variable)

#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;cstdlib&gt;

using namespace std;

//Bitrates, assuming MPEG 1 Audio Layer 3
const int bitrates[16] = {
         0,  32000,  40000,  48000,  56000,  64000,  80000,   96000,
    112000, 128000, 160000, 192000, 224000, 256000, 320000,       0
  };


//Intel processors are little-endian;
//search Google or see: http://en.wikipedia.org/wiki/Endian
int reverse(int i)
{
    int toReturn = 0;
    toReturn |= ((i &amp; 0x000000FF) &lt;&lt; 24);
    toReturn |= ((i &amp; 0x0000FF00) &lt;&lt; 8);
    toReturn |= ((i &amp; 0x00FF0000) &gt;&gt; 8);
    toReturn |= ((i &amp; 0xFF000000) &gt;&gt; 24);
    return toReturn;
}

//In short, data in ID3v2 tags are stored as
//""syncsafe integers"". This is so the tag info
//isn't mistaken for audio data, and attempted to
//be ""played"". For more info, have fun Googling it.
int syncsafe(int i)
{
 int toReturn = 0;
 toReturn |= ((i &amp; 0x7F000000) &gt;&gt; 24);
 toReturn |= ((i &amp; 0x007F0000) &gt;&gt;  9);
 toReturn |= ((i &amp; 0x00007F00) &lt;&lt;  6);
 toReturn |= ((i &amp; 0x0000007F) &lt;&lt; 21);
 return toReturn;     
}

//How much room does ID3 version 1 tag info
//take up at the end of this file (if any)?
int id3v1size(ifstream&amp; infile)
{
   streampos savePos = infile.tellg(); 

   //get to 128 bytes from file end
   infile.seekg(0, ios::end);
   streampos length = infile.tellg() - (streampos)128;
   infile.seekg(length);

   int size;
   char buffer[3] = {0};
   infile.read(buffer, 3);
   if( buffer[0] == 'T' &amp;&amp; buffer[1] == 'A' &amp;&amp; buffer[2] == 'G' )
     size = 128; //found tag data
   else
     size = 0; //nothing there

   infile.seekg(savePos);

   return size;

}

//how much room does ID3 version 2 tag info
//take up at the beginning of this file (if any)
int id3v2size(ifstream&amp; infile)
{
   streampos savePos = infile.tellg(); 
   infile.seekg(0, ios::beg);

   char buffer[6] = {0};
   infile.read(buffer, 6);
   if( buffer[0] != 'I' || buffer[1] != 'D' || buffer[2] != '3' )
   {   
       //no tag data
       infile.seekg(savePos);
       return 0;
   }

   int size = 0;
   infile.read(reinterpret_cast&lt;char*&gt;(&amp;size), sizeof(size));
   size = syncsafe(size);

   infile.seekg(savePos);
   //""size"" doesn't include the 10 byte ID3v2 header
   return size + 10;
}

int main(int argCount, char* argValues[])
{
  //you'll have to change this
  ifstream infile(""C:/Music/Bush - Comedown.mp3"", ios::binary);

  if(!infile.is_open())
  {
   infile.close();
   cout &lt;&lt; ""Error opening file"" &lt;&lt; endl;
   system(""PAUSE"");
   return 0;
  }

  //determine beginning and end of primary frame data (not ID3 tags)
  infile.seekg(0, ios::end);
  streampos dataEnd = infile.tellg();

  infile.seekg(0, ios::beg);
  streampos dataBegin = 0;

  dataEnd -= id3v1size(infile);
  dataBegin += id3v2size(infile);

  infile.seekg(dataBegin,ios::beg);

  //determine bitrate based on header for first frame of audio data
  int headerBytes = 0;
  infile.read(reinterpret_cast&lt;char*&gt;(&amp;headerBytes),sizeof(headerBytes));

  headerBytes = reverse(headerBytes);
  int bitrate = bitrates[(int)((headerBytes &gt;&gt; 12) &amp; 0xF)];

  //calculate duration, in seconds
  int duration = (dataEnd - dataBegin)/(bitrate/8);

  infile.close();

  //print duration in minutes : seconds
  cout &lt;&lt; duration/60 &lt;&lt; "":"" &lt;&lt; duration%60 &lt;&lt; endl;

  system(""PAUSE"");
  return 0;
}
</code></pre>
"
340896,"<p>Paramiko doesn't output anything by default. You probably have a call to the logging module, setting a loglevel that's inherited when paramiko sets up it's own logging.</p>

<p>If you want to get at the paramiko logger to override the settings:</p>

<pre><code>logger = paramiko.util.logging.getLogger()
</code></pre>

<p>There's also a convenience function to log everything to a file:</p>

<pre><code>paramiko.util.log_to_file('filename.log')
</code></pre>
"
261808,"<p>What about signing your code with standard encryption schemes by hashing and signing important files and checking it with public key methods?</p>

<p>In this way you can issue license file with a public key for each customer.</p>

<p>Additional you can use an python obfuscator like <a href=""http://www.lysator.liu.se/~astrand/projects/pyobfuscate/"">this one</a> (just googled it).</p>
"
118163,"<p>It works for me. You must be doing something wrong.</p>

<pre><code>&gt;&gt;&gt; re.match(r'(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', '127.255.0.0').groups()
('127', '255', '0', '0')
</code></pre>

<p>Don't forget to escape the regex using raw strings: <code>r'regex_here'</code> as stated in the <a href=""http://docs.python.org/dev/howto/regex.html"" rel=""nofollow"">Regex Howto</a></p>
"
219066,"<p>Take a look at the <a href=""http://docs.python.org/dev/library/multiprocessing.html"">multiprocessing</a> module new in python 2.6  (also available for earlier versions a <a href=""http://pyprocessing.berlios.de/"">pyprocessing</a></p>

<p>Here's an example from the docs illustrating passing information using a pipe for instance:</p>

<pre><code>from multiprocessing import Process, Pipe

def f(conn):
    conn.send([42, None, 'hello'])
    conn.close()

if __name__ == '__main__':
    parent_conn, child_conn = Pipe()
    p = Process(target=f, args=(child_conn,))
    p.start()
    print parent_conn.recv()   # prints ""[42, None, 'hello']""
    p.join()
</code></pre>
"
219671,"<p>I cannot confirm your results, and your server is coded fishy. I whipped up my own server and do not have this problem either. Let's move the discussion to a simpler level:</p>

<pre><code>import thread, socket, Queue

connections = Queue.Queue()
num_threads = 10
backlog = 10

def request():
    while 1:
        conn = connections.get()
        data = ''
        while '\r\n\r\n' not in data:
            data += conn.recv(4048)
        conn.sendall('HTTP/1.1 200 OK\r\n\r\nHello World')
        conn.close()

if __name__ == '__main__':
    for _ in range(num_threads):
        thread.start_new_thread(request, ())

    acceptor = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    acceptor.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    acceptor.bind(('', 1234))
    acceptor.listen(backlog)
    while 1:
        conn, addr = acceptor.accept()
        connections.put(conn)
</code></pre>

<p>which on my machine does:</p>

<pre><code>ab -n 10000 -c 10 http://127.0.0.1:1234/ --&gt; 8695.03 [#/sec]
ab -n 10000 -c 11 http://127.0.0.1:1234/ --&gt; 8529.41 [#/sec]
</code></pre>
"
167205,"<p>I do this kind of thing all the time for quick-and-dirty scripts.  It's quite common to have a CGI or PHP script that just uses system/popen to call some external program.</p>

<p>Just be extra careful if your web server is open to the internet at large.  Be sure to sanitize your GET/POST input in this case so as to not allow attackers to run arbitrary commands on your machine.</p>
"
167240,"<p>You'll never be able to keep the source code from people who really want it. It's best to come to grips with this fact now, and save yourself the headache later.</p>
"
192913,"<p>ElementTree's parse() is like DOM, whereas iterparse() is like SAX. In my opinion, ElementTree is better than DOM and SAX in that it provides API easier to work with.</p>
"
193101,"<p>You can't easily do it in a distribution-neutral format.  The only reliable dependency tracking mechanisms are built into the package management systems on the distributions and will vary from distribution to distribution.  You'll effectively have to do rpm for fedora, debs for ubuntu and debian etc.</p>

<p>Py2exe works fine on Windows.  It builds a distribution with all of the necessary DLL's and a wrapper for the python interpreter that starts your program.  It's fairly straightforward to install - just drop it in a directory - so making a msi file for it is trivial.</p>
"
217925,"<p>Read the <a href=""http://www.python.org/doc/2.5.2/lib/module-unittest.html"" rel=""nofollow"">unit testing framework section</a> of the <a href=""http://www.python.org/doc/2.5.2/lib/lib.html"" rel=""nofollow"">Python Library Reference</a>.</p>

<p>A <a href=""http://www.python.org/doc/2.5.2/lib/minimal-example.html"" rel=""nofollow"">basic example</a> from the documentation:</p>

<pre><code>import random
import unittest

class TestSequenceFunctions(unittest.TestCase):

    def setUp(self):
        self.seq = range(10)

    def testshuffle(self):
        # make sure the shuffled sequence does not lose any elements
        random.shuffle(self.seq)
        self.seq.sort()
        self.assertEqual(self.seq, range(10))

    def testchoice(self):
        element = random.choice(self.seq)
        self.assert_(element in self.seq)

    def testsample(self):
        self.assertRaises(ValueError, random.sample, self.seq, 20)
        for element in random.sample(self.seq, 5):
            self.assert_(element in self.seq)

if __name__ == '__main__':
    unittest.main()
</code></pre>
"
230986,"<p>Have a look at the <a href=""http://www.noah.org/wiki/Pexpect"">pexpect</a> module. It is designed to deal with interactive programs, which seems to be your case.</p>

<p>Oh, and remember that hard-encoding root's password in a shell or python script is potentially a security hole :D</p>
"
64308,"<p>I tend to create new applications for each logically separate set of models. e.g.:</p>

<ul>
<li>User Profiles</li>
<li>Forum Posts</li>
<li>Blog posts</li>
</ul>
"
246933,"<p>You can use the <a href=""http://effbot.org/zone/aggdraw-index.htm"">aggdraw</a> on top of PIL, bezier curves are <a href=""http://effbot.org/zone/pythondoc-aggdraw.htm#aggdraw.Path-class"">supported</a>.</p>

<p><strong>EDIT:</strong></p>

<p>I made an example only to discover there is a bug in the <code>Path</code> class regarding <code>curveto</code> :(</p>

<p>Here is the example anyway:</p>

<pre><code>from PIL import Image
import aggdraw

img = Image.new(""RGB"", (200, 200), ""white"")
canvas = aggdraw.Draw(img)

pen = aggdraw.Pen(""black"")
path = aggdraw.Path()
path.moveto(0, 0)
path.curveto(0, 60, 40, 100, 100, 100)
canvas.path(path.coords(), path, pen)
canvas.flush()

img.save(""curve.png"", ""PNG"")
img.show()
</code></pre>

<p><a href=""http://www.mail-archive.com/image-sig@python.org/msg02108.html"">This</a> should fix the bug if you're up for recompiling the module...</p>
"
42046,"<pre><code>os.system('xdg-open ""%s""' % foldername)
</code></pre>

<p><code>xdg-open</code> can be used for files/urls also</p>
"
295276,"<p>The problem is not with bash. It should be setting your environment variable correctly, complete with the <code>:</code> character.</p>

<p>The problem, instead, is with Python's parsing of the <code>PYTHONPATH</code> variable. Following the example set by the <a href=""http://sourceware.org/cgi-bin/cvsweb.cgi/libc/posix/execvp.c?rev=1.27&amp;content-type=text/x-cvsweb-markup&amp;cvsroot=glibc""><code>PATH</code> variable</a>, it seems there is no escape character at all, so there is no way to make it interpret the <code>:</code> as something other than a separator. You can see it for yourself in the <a href=""http://svn.python.org/view/python/trunk/Modules/getpath.c?rev=54257&amp;view=auto"">Python interpreter source code</a>.</p>

<p>The only solution is, as several people already mentioned, to use a symlink or something else to allow you to give a colon-less name for your directories.</p>
"
118375,"<p>This is not a solution, but you can add <code>objects = models.Manager()</code> to your Django models without changing any behavior.</p>

<p>I myself only use pyflakes, primarily due to some dumb defaults in pylint and laziness on my part (not wanting to look up how to change the defaults).</p>
"
118462,"<p>Using the <code>csv</code> module you can do that way:</p>

<pre><code>import csv
writer = csv.writer(open(""some.csv"", ""wb""))
writer.writerow(the_list)
</code></pre>

<p>If you need a string just use <code>StringIO</code> instance as a file:</p>

<pre><code>f = StringIO.StringIO()
writer = csv.writer(f)
writer.writerow(the_list)
print f.getvalue()
</code></pre>

<p>The output: <code>a,""one """"two"""" three"",""foo, bar"",""both""""'""</code></p>

<p><code>csv</code> will write in a way it can read back later.
You can fine-tune its output by defining a <code>dialect</code>, just set <code>quotechar</code>, <code>escapechar</code>, etc, as needed:</p>

<pre><code>class SomeDialect(csv.excel):
    delimiter = ','
    quotechar = '""'
    escapechar = ""\\""
    doublequote = False
    lineterminator = '\n'
    quoting = csv.QUOTE_MINIMAL

f = cStringIO.StringIO()
writer = csv.writer(f, dialect=SomeDialect)
writer.writerow(the_list)
print f.getvalue()
</code></pre>

<p>The output: <code>a,one \""two\"" three,""foo, bar"",both\""'</code></p>

<p>The same dialect can be used with csv module to read the string back later to a list.</p>
"
263162,"<p>I would use the bash eval statement, and have the python script output the shell code</p>

<p>child.py:</p>

<pre><code>#!/usr/bin/env python
print 'FOO=""A_Value""'
</code></pre>

<p>parent.sh</p>

<pre><code>#!/bin/bash
eval `./child.py`
</code></pre>
"
263314,"<p>The reliable only way to protect code is to run it on a server you control and provide your clients with a client which interfaces with that server.</p>
"
179531,"<p>If you want to import a module while at the same time ensuring that it doesn't import anything, you can replace the <code>__import__</code> builtin function.</p>

<p>For example, use this class:</p>

<pre><code>class ImportWrapper(object):
    def __init__(self, real_import):
        self.real_import = real_import

    def wrapper(self, wantedModules):
        def inner(moduleName, *args, **kwargs):
            if moduleName in wantedModules:
                print ""IMPORTING MODULE"", moduleName
                self.real_import(*args, **kwargs)
            else:
                print ""NOT IMPORTING MODULE"", moduleName
        return inner

    def mock_import(self, moduleName, wantedModules):
        __builtins__.__import__ = self.wrapper(wantedModules)
        try:
            __import__(moduleName, globals(), locals(), [], -1)
        finally:
            __builtins__.__import__ = self.real_import
</code></pre>

<p>And in your test code, instead of writing <code>import myModule</code>, write:</p>

<pre><code>wrapper = ImportWrapper(__import__)
wrapper.mock_import('myModule', [])
</code></pre>

<p>The second argument to <code>mock_import</code> is a list of module names you <em>do</em> want to import in inner module.</p>

<p>This example can be modified further to e.g. import other module than desired instead of just not importing it, or even mocking the module object with some custom object of your own.</p>
"
191805,"<p>Give a try to web2py. It is point and click (you do not even need to install Python, comes with it). You develop using a web interface and you can deploy almost everywhere, including iPhone, Oracle and Google App Engine. Before trying web2py, try install some of the other Python frameworks, you will appreciate it even more.</p>
"
294461,"<p>You may want to look at <a href=""http://www.autoitscript.com/autoit3/"" rel=""nofollow"">AutoIt</a>.  It does everything that AutoHotKey can do, but the language syntax doesn't make you want to pull your hair out.  Additonally, it has COM bindings so you can use most of it's abilities easily in python if you so desired.  I've posted about how to do it here <a href=""http://stackoverflow.com/questions/151846/get-other-running-processes-window-sizes-in-python#155587"">before</a>.</p>
"
80028,"<p><strong>If you are writing your tests after you've written your code and making them pass, you are not doing TDD</strong> (nor are you getting any benefits of Test-First or Test-Driven development.. check out SO questions for definitive books on TDD)</p>

<blockquote>
  <p>One of the things I've noticed with
  using mocker is that it's easier to
  write the application code first and
  then go back and write the tests
  second, since most of the time I'm
  mocking many method calls and the
  syntax to write the mocked calls is
  much more verbose (thus harder to
  write) than the application code. It's
  easier to write the app code and then
  model the test code off of that.</p>
</blockquote>

<p>Of course, its easier because you are just testing that the sky is orange after you made it orange by painting it with a specific kind of brush. 
This is retrofitting tests (for self-assurance). Mocks are good but you should know how and when to use them - Like the saying goes 'When you have a hammer everything looks like a nail' It's also easy to write a whole load of unreadable and not-as-helpful-as-can-be  tests. The time spent understanding what the test is about is time lost that can be used to fix broken ones. </p>

<p>And the point is: </p>

<ul>
<li>Read <a href=""http://martinfowler.com/articles/mocksArentStubs.html#ClassicalAndMockistTesting"">Mocks aren't stubs - Martin Fowler</a> if you haven't already. Google out some documented instances of good <a href=""http://martinfowler.com/eaaDev/ModelViewPresenter.html"">ModelViewPresenter</a> patterned GUIs (Fake/Mock out the UIs if necessary). </li>
<li>Study your options and choose wisely. I'll play the guy with the halo on your left shoulder in white saying 'Don't do it.' Read this question as to <a href=""http://stackoverflow.com/questions/59195/how-are-mocks-meant-to-be-used"">my reasons</a> -  St. Justin  is on your right shoulder. I believe he has also something to say:) </li>
</ul>
"
264183,"<p>The 1000 record limit is a hard limit in Google AppEngine.</p>

<p>This presentation <a href=""http://sites.google.com/site/io/building-scalable-web-applications-with-google-app-engine"" rel=""nofollow"">http://sites.google.com/site/io/building-scalable-web-applications-with-google-app-engine</a> explains how to efficiently page through data using AppEngine.</p>

<p>(Basically by using a numeric id as key and specifying a WHERE clause on the id.)</p>
"
166073,"<blockquote>
  <p>Edit: Can you elaborate on the best-practices of naming attributes with a single or double leading underscore ? I see in most modules that a single underscore is used.</p>
</blockquote>

<p>Single underscore doesn't mean anything special to python, it is just best practice, to tell ""hey you probably don't want to access this unless you know what you are doing"". Double underscore however makes python mangle the name internally making it accessible only from the class where it is defined.</p>

<p>Double leading AND trailing underscore denotes a special function, such as <code>__add__</code> which is called when using the + operator.</p>

<p>Read more in <a href=""http://www.python.org/dev/peps/pep-0008/"" rel=""nofollow"">PEP 8</a>, especially the ""Naming Conventions"" section.</p>
"
205075,"<p>You can use something like py2exe to compile your python script into an exe, or Freeze for a linux binary.</p>

<p>see: <a href=""http://stackoverflow.com/questions/2933/an-executable-python-app#2937"">http://stackoverflow.com/questions/2933/an-executable-python-app#2937</a></p>
"
330908,"<p>The <a href=""http://www.python.org/doc/2.5.2/lib/module-csv.html"" rel=""nofollow"">CSV module</a> should be able to do that for you</p>
"
172458,"<p>Your first thought should be channel security - either SSL/TLS, or IPSec.<br />
Admittedly, these both have a certain amount of setup overhead, IPSec more than SSL/TLS, especially when it comes to PKI etc. - but it more than pays for itself in simplicity of development, reliability, security, and more. Just make sure you're using strong cipher suites, as appropriate to the protocol.</p>

<p>If neither SSL/TLS or IPSec fits your scenario/environment, your next choice should be <a href=""http://en.wikipedia.org/wiki/Advanced_Encryption_Standard"">AES</a> (aka Rijndael).<br />
Use keys at least 256 bits long, if you want you can go longer.<br />
Keys should be randomly generated, by a cryptographically secure random number generator (and not a simple rnd() call).<br />
Set the cipher mode to <a href=""http://en.wikipedia.org/wiki/Cipher_block_chaining"">CBC</a>.<br />
Use PKCS7 padding.<br />
Generate a unique, crypto-random Initialization Vector (IV).
Don't forget to properly protect and manage your keys, and maybe consider periodic key rotations.</p>

<p>Depending on your data, you may want to also implement a keyed hash, to provide for message integrity - use <a href=""http://en.wikipedia.org/wiki/SHA-256"">SHA-256</a> for hashing.</p>

<p>There are also rare situations where you may want to go with a stream cipher, but thats usually more complicated and I would recommend you avoid it your first time out.</p>

<p>Now, I'm not familiar ezpycrypto (or really python in general), and cant really state that it supports all this; but everything here is pretty standard and recommended best practice, if your crypto library doesnt support it, I would suggest finding one that does ;-).</p>
"
132682,"<p>I use <strong>doctest</strong>[1] almost everywhere because I like the fact that I document and test my functions at the same time.</p>

<p>Have a look at this code:</p>

<pre><code>def throw_up(something, gowrong=False):
    """"""
    &gt;&gt;&gt; throw_up('Fish n Chips')
    Traceback (most recent call last):
    ...
    Exception: Fish n Chips

    &gt;&gt;&gt; throw_up('Fish n Chips', gowrong=True)
    'I feel fine!'
    """"""
    if gowrong:
        return ""I feel fine!""
    raise Exception(something)

if __name__ == '__main__':
    import doctest
    doctest.testmod()
</code></pre>

<p>If you put this example in a module and run it from the command line both test cases are evaluated and checked.</p>

<p>[1] <a href=""http://docs.python.org/lib/module-doctest.html"">Python documentation: 23.2 doctest -- Test interactive Python examples</a></p>
"
134168,"<p>You can merge all your regexes into one using the ""|"" operator and let the regex library do the work of discerning between tokens. Some care should be taken to ensure the preference of tokens (for example to avoid matching a keyword as an identifier).</p>
"
201891,"<p>You shouldn't name your scripts like existing modules. Especially if standard. </p>

<p>That said, you can touch sys.path to modify the library loading order</p>

<pre><code>~# cat getopt.py
print ""HI""
~# python
Python 2.5.2 (r252:60911, Jul 31 2008, 17:28:52)
[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; import getopt
HI

~# python
Python 2.5.2 (r252:60911, Jul 31 2008, 17:28:52)
[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path.remove('')
&gt;&gt;&gt; import getopt
&gt;&gt;&gt; dir(getopt)
['GetoptError', '__all__', '__builtins__', '__doc__', '__file__', '__name__', 'do_longs', 'do_shorts', 'error', 'getopt', 'gnu_getopt', 'long_has_args', 'os', 'short_has_arg']
</code></pre>

<p>In addition, you may wish to avoid the full import and do it differently, like this:</p>

<pre><code>import sys
sys.path.remove('')
from getopt import getopt
sys.path.insert(0,'')
opts, args = getopt(sys.argv[1:], ""h:s"")
for key,value in opts:
    print key, ""=&gt;"", value
</code></pre>
"
327307,"<p>Set the <a href=""http://docs.djangoproject.com/en/dev/topics/http/sessions/#session-cookie-domain"">SESSION&#x5F;COOKIE&#x5F;DOMAIN</a> option.  You need to set the domain for each of your sites so the cookies don't override each other.</p>

<p>You can also use SESSION&#x5F;COOKIE&#x5F;NAME to make the cookie names different for each site.</p>
"
264303,"<p>Yeah, you don't have any pretty options.  The time is written with this line in _write_gzip_header:</p>

<pre><code>write32u(self.fileobj, long(time.time()))
</code></pre>

<p>Since they don't give you a way to override the time, you can do one of these things:</p>

<ol>
<li>Derive a class from GzipFile, and copy the <code>_write_gzip_header</code> function into your derived class, but with a different value in this one line.</li>
<li>After importing the gzip module, assign new code to its time member.  You will essentially be providing a new definition of the name time in the gzip code, so you can change what time.time() means.</li>
<li>Copy the entire gzip module, and name it my_stable_gzip, and change the line you need to.</li>
<li>Pass a CStringIO object in as fileobj, and modify the bytestream after gzip is done.</li>
<li>Write a fake file object that keeps track of the bytes written, and passes everything through to a real file, except for the bytes for the timestamp, which you write yourself.</li>
</ol>

<p>Here's an example of option #2 (untested):</p>

<pre><code>class FakeTime:
    def time(self):
        return 1225856967.109

import gzip
gzip.time = FakeTime()

# Now call gzip, it will think time doesn't change!
</code></pre>

<p>Option #5 may be the cleanest in terms of not depending on the internals of the gzip module (untested):</p>

<pre><code>class GzipTimeFixingFile:
    def __init__(self, realfile):
        self.realfile = realfile
        self.pos = 0

    def write(self, bytes):
        if self.pos == 4 and len(bytes) == 4:
            self.realfile.write(""XYZY"")  # Fake time goes here.
        else:
            self.realfile.write(bytes)
        self.pos += len(bytes)
</code></pre>
"
265570,"<p>There's also <a href=""http://pygtk.org/"">PyGTK</a>, which is basically a Python wrapper for the Gnome Toolkit.  I've found it easier to wrap my mind around than Tkinter, coming from pretty much no knowledge of GUI programming previously.  It works pretty well and has some good tutorials.  Unfortunately there isn't an installer for Python 2.6 for Windows yet, and may not be for a while.</p>
"
13943,"<p>Isn't that what <a href=""#13844"">Anders' second example</a> does?</p>

<p>In 2.5 there's also a <code>string-escape</code> encoding you can apply:</p>

<pre><code>&gt;&gt;&gt; mystring = r""This is \n a test \r""
&gt;&gt;&gt; mystring.decode('string-escape')
'This is \n a test \r'
&gt;&gt;&gt; print mystring.decode('string-escape')
This is 
 a test 
&gt;&gt;&gt;
</code></pre>
"
12557,"<p>The notion of tuples are highly expressive:</p>

<ul>
<li><p>Pragmatically, they are great for packing and unpacking values (<code>x,y=coord</code>).</p></li>
<li><p>In combination with dictionaries (hash tables), they allow forms of mapping that would otherwise require many levels of association.  For example, consider marking that (x,y) has been found.</p>

<pre><code>// PHP
if (!isset($found[$x])) {
    $found[$x] = Array();
    $found[$x][$y] = true;
} else if (!isset($found[$x][$y])) {
    $found[$x][$y] = true;
}


# Python
found[(x,y)] = True # parens added for clarity
</code></pre></li>
<li><p>Lists should be used with the expectation of operations on its contents (hence the various mentions of immutability).  One will want to pop, push, splice, slice, search, insert before, insert after, etc with a list.</p></li>
<li><p>Tuples should be a low-level representation of an object, where simple comparisons are made, or operations such as extracting the n'th element or n elements in a predictable fashion, such as the coordinates example given earlier.</p></li>
<li><p>Lastly, lists are not hashable, so the type of mapping done with dictionaries (hash tables in Perl, associative arrays in PHP) must be done with tuples.</p>

<p>Here's a simple example of tuples and dictionaries, together at last:</p>

<pre><code>""""""
couple is a tuple of two people
doesLike is a dictionary mapping couples to True or False
""""""
couple = ""john"", ""jane""
doesLike = dict()
doesLike[couple] = True
doesLike[""jane"", ""john""] = False # unrequited love :'(
</code></pre></li>
</ul>
"
294542,"<p>One technique I've used for code generation is to not worry at all about formatting in the code generator. Then, as a next step after generating the code, run it through <a href=""http://www.gnu.org/software/indent/""><code>indent</code></a> to format it reasonably so you can read (and more importantly, debug) it. </p>
"
116901,"<p>I don't know the correct way to do it, but this manual method is the approach I've used for simple scripts which seems to have preformed suitably.</p>

<p>I'll assume that whatever directory I'm in, the Python files for my program are in the relative <code>src/</code> directory, and that the file I want to execute (which has the proper shebang and execute permissions) is named <code>main.py</code>.</p>

<pre>
$ mkdir -p MyApplication.app/Contents/MacOS
$ mv src/* MyApplication.app/Contents/MacOS
$ cd MyApplication.app/Contents/MacOS
$ mv main.py MyApplication
</pre>

<p>At this point we have an application bundle which, as far as I know, should work on any Mac OS system with Python installed (which I think it has by default). It doesn't have an icon or anything, that requires adding some more metadata to the package which is unnecessary for my purposes and I'm not familiar with.</p>

<p>To create the drag-and-drop installer is quite simple. Use Disk Utility to create a New Disk Image of approximately the size you require to store your application. Open it up, copy your application and an alias of <code>/Applications</code> to the drive, then use View Options to position them as you want.</p>

<p>The drag-and-drop message is just a background of the disk image, which you can also specify in View Options. I haven't done it before, but I'd assume that after you whip up an image in your editor of choice you could copy it over, set it as the background and then use <code>chflags hidden</code> to prevent it from cluttering up your nice window.</p>

<p>I know these aren't the clearest, simplest or most detailed instructions out there, but I hope somebody may find them useful.</p>
"
117270,"<p>Make one or both of the terms a floating point number, like so:</p>

<pre><code>4.0/100.0
</code></pre>

<p>Alternatively, turn on the feature that will be default in Python 3.0, 'true division', that does what you want. At the top of your module or script, do:</p>

<pre><code>from __future__ import division
</code></pre>
"
216143,"<p>The best solution that I found was to use Firebug to monitor XmlHttpRequests, and then to use a script to resend them.</p>
"
216145,"<p>In the project <a href=""http://wader-project.org"">Wader</a> we use <a href=""http://pygtkmvc.sourceforge.net/"">python gtkmvc</a>, that makes much easier to apply the MVC patterns when using pygtk and glade, you can see the file organization of our project in the <a href=""http://trac.wader-project.org/browser/trunk/wader"">svn repository</a>:</p>

<pre><code>wader/
  cli/
  common/
  contrib/
  gtk/
    controllers/
    models/
    views/
  test/
  utils/
</code></pre>
"
135050,"<pre><code>import sys
sys.path
</code></pre>
"
235238,"<p>There are two possible ways to solve this:</p>

<ol>
<li><a href=""http://wiki.pylonshq.com/display/pylonscookbook/Adding+trailing+slash+to+pages+automatically"" rel=""nofollow"">Do it entirely in pylons</a>.</li>
<li><a href=""http://enarion.net/web/apache/htaccess/trailing-slash/"" rel=""nofollow"">Add an htaccess rule to rewrite the trailing slash</a>.</li>
</ol>

<p>Personally I don't like the trailing slash, because if you have a uri like:</p>

<p><a href=""http://example.com/people"" rel=""nofollow"">http://example.com/people</a></p>

<p>You should be able to get the same data in xml format by going to:</p>

<p><a href=""http://example.com/people.xml"" rel=""nofollow"">http://example.com/people.xml</a></p>
"
140209,"<pre><code>sub (replacement, string[, count = 0])
</code></pre>

<p><a href=""https://docs.python.org/howto/regex.html#search-and-replace"" rel=""nofollow"">sub</a> returns the string obtained by replacing the leftmost non-overlapping occurrences of the RE in string by the replacement replacement. If the pattern isn't found, string is returned unchanged.</p>

<pre><code>    p = re.compile( '(blue|white|red)')
    &gt;&gt;&gt; p.sub( 'colour', 'blue socks and red shoes')
    'colour socks and colour shoes'
    &gt;&gt;&gt; p.sub( 'colour', 'blue socks and red shoes', count=1)
    'colour socks and red shoes'
</code></pre>
"
318986,"<p>If X is normal with mean 0 and standard deviation sigma, it must hold </p>

<pre><code>P = Prob[ -a &lt;= X &lt;= a ] = Prob[ -a/sigma &lt;= N &lt;= a/sigma ]
  = 2 Prob[ 0 &lt;= N &lt;= a/sigma ]
  = 2 ( Prob[ N &lt;= a/sigma ] - 1/2 )
</code></pre>

<p>where N is normal with mean 0 and standard deviation 1. Hence</p>

<pre><code>P/2 + 1/2 = Prob[ N &lt;= a/sigma ] = Phi(a/sigma)
</code></pre>

<p>Where Phi is the cumulative distribution function (cdf) of a normal variable with mean 0 and stddev 1. Now we need the <em>inverse</em> normal cdf (or the ""percent point function""), which in Python is scipy.stats.norm.ppf(). Sample code:</p>

<pre><code>from scipy.stats import norm
P = 0.3456
a = 3.0

a_sigma = float(norm.ppf(P/2 + 0.5))   # a/sigma
sigma = a/a_sigma   # Here is the standard deviation
</code></pre>

<p>For example, we know that the probability of a N(0,1) variable falling int the interval [-1.1] is ~ 0.682 (the dark blue area in <a href=""http://en.wikipedia.org/wiki/Image:Standard_deviation_diagram.svg"" rel=""nofollow"">this figure</a>). If you set P = 0.682 and a = 1.0 you obtain sigma ~ 1.0, which is indeed the standard deviation.  </p>
"
215782,"<p>Are your examples real code, or just examples?</p>

<p>If they're real code, I think you overuse decorators, probably because of your background (i.e. you are used to other programming languages)</p>

<h3>Stage 1: avoiding decorators</h3>

<pre><code>def run(rootnode, func):
    def _run(node): # recursive internal function
        func(node)
        for x in node.children:
            _run(x) # recurse
    _run(rootnode) # initial run
</code></pre>

<p>This run method obsoletes makeRunner. Your example turns to:</p>

<pre><code>def pp(n): print ""%s,"" % n.val
run(tree, pp)
</code></pre>

<p>However, this ignores completely generators, soâ¦</p>

<h3>Stage 2: using generators</h3>

<pre><code>class Node :
    def __init__(self,val,children) :
        self.val = val
        self.children = children

    def __iter__(self): # recursive
        yield self
        for child in self.children:
            for item in child: # recurse
                yield item

def run(rootnode, func):
    for node in rootnode:
        func(node)
</code></pre>

<p>Your example remains</p>

<pre><code>def pp(n): print ""%s,"" % n.val
run(tree, pp)
</code></pre>

<p>Note that the special method <code>__iter__</code> allows us to use the <code>for node in rootnode:</code> construct. If you don't like it, just rename the <code>__iter__</code> method to e.g. <code>walker</code>, and change the <code>run</code> loop into: <code>for node in rootnode.walker():</code><br />
Obviously, the <code>run</code> function could be a method of <code>class Node</code> instead.</p>

<p>As you see, I suggest you use directly <code>run(tree, func)</code> instead of binding them to the name <code>printTree</code>, but you can use them in a decorator, or you can make use of the <code>functools.partial</code> function:</p>

<pre><code>printTree= functools.partial(run, func=pp)
</code></pre>

<p>and from then on, you would just</p>

<pre><code>printTree(tree)
</code></pre>
"
268101,"<p>OK, I hate to answer my own question, but:</p>

<p>find your python site-packages (mine is /usr/local/lib/python2.5/site-packages )</p>

<p>then:</p>

<pre><code>$ unzip MySQL_python-1.2.2-py2.5-linux-i686.egg
</code></pre>

<p>This worked fine for me</p>
"
268174,"<p>No, there isn't.</p>

<p>It's because the <a href=""http://www.greenbytes.de/tech/webdav/rfc2616.html"">HTTP spec</a> does not provide anything for the client to specify time-to-live information with a HTTP request. You can do this only on TCP level, as you mentioned.</p>

<p>On the other hand, the server may inform the client about timeout situations with HTTP status codes <a href=""http://www.greenbytes.de/tech/webdav/rfc2616.html#status.408"">408 Request Timeout</a> resp. <a href=""http://www.greenbytes.de/tech/webdav/rfc2616.html#status.504"">504 Gateway Timeout</a>.</p>
"
343804,"<p>Avoid tutorials (written by kids, for kids, newbie level)
Read the Petzold, Richter, Pietrek, Russinovich and Adv. Win32 api newsgroup 
news://comp.os.ms-windows.programmer.win32</p>
"
292659,"<p><a href=""http://code.google.com/p/protobuf/"">ProtocolBuffers</a> was released by Google as a way of serializing data in a very compact efficient way.  They have support for C++, Java and Python.  I haven't used it yet, but looking at the source, there seem to be RPC clients and servers for each language.  </p>

<p>I personally have used XML-RPC on several projects, and it always did exactly what I was hoping for.  I was usually going between C++, Java and Python.  I use libxmlrpc in Python often because it's easy to memorize and type interactively, but it is actually much slower than the alternative <a href=""http://sourceforge.net/projects/py-xmlrpc/"">pyxmlrpc</a>.</p>

<p>PyAMF is mostly for RPC with Flash clients, but it's a compact RPC format worth looking at too.</p>

<p>When you have Python on both ends, I don't believe anything beats <a href=""http://pyro.sourceforge.net/"">Pyro</a>  (Python Remote Objects.)  Pyro even has a ""name server"" that lets services announce their availability to a network.  Clients use the name server to find the services it needs no matter where they're active at a particular moment.  This gives you free redundancy, and the ability to move services from one machine to another without any downtime.</p>

<p>For security, I'd tunnel over SSH, or use TLS or SSL at the connection level.  Of course, all these options are essentially the same, they just have various difficulties of setup.</p>
"
215552,"<p>Rather than manipulate the config files, you can use <a href=""http://perl.apache.org/"" rel=""nofollow"">mod_perl</a> to embed Perl directly into the config files. This could allow you, for example, to read required vhosts out of a database.</p>

<p>See  <a href=""http://perl.apache.org/start/tips/config.html"" rel=""nofollow"">Configure Apache with Perl Example</a> for quick example and <a href=""http://perl.apache.org/docs/1.0/guide/config.html#Apache_Configuration_in_Perl"" rel=""nofollow"">Apache Configuration in Perl</a> for all the details.</p>
"
215695,"<p>In Perl, you've got at least 2 modules for that:</p>

<p><a href=""http://search.cpan.org/~nwiger/Apache-ConfigFile-1.18/ConfigFile.pm"" rel=""nofollow"">Apache::ConfigFile</a></p>

<p><a href=""https://metacpan.org/pod/Apache%3a%3aAdmin%3a%3aConfig"" rel=""nofollow"">Apache::Admin::Config</a> </p>
"
270538,"<p>from the examples directory in the libxml2 python bindings:</p>

<pre><code>#!/usr/bin/python -u
import libxml2
import sys

# Memory debug specific
libxml2.debugMemory(1)

dtd=""""""&lt;!ELEMENT foo EMPTY&gt;""""""
instance=""""""&lt;?xml version=""1.0""?&gt;
&lt;foo&gt;&lt;/foo&gt;""""""

dtd = libxml2.parseDTD(None, 'test.dtd')
ctxt = libxml2.newValidCtxt()
doc = libxml2.parseDoc(instance)
ret = doc.validateDtd(ctxt, dtd)
if ret != 1:
    print ""error doing DTD validation""
    sys.exit(1)

doc.freeDoc()
dtd.freeDtd()
del dtd
del ctxt
</code></pre>
"
114268,"<p><code>mod_wsgi</code> in combination with a <code>virtualenv</code> for all the dependencies, a mercurial checkout into the virtualenv and a <code>fabric</code> recipe to check out the changes on the server.</p>

<p>I wrote an article about my usual workflow: <a href=""http://lucumr.pocoo.org/2008/7/17/deploying-python-web-applications/"" rel=""nofollow"">Deploying Python Web Applications</a>.  Hope that helps.</p>
"
289167,"<p>In python, <a href=""http://pypi.python.org/pypi/elementtidy/1.0-20050212"">ElementTidy</a> parses tag soup and produces an element tree, which allows querying using XPath:</p>

<pre><code>&gt;&gt;&gt; from elementtidy.TidyHTMLTreeBuilder import TidyHTMLTreeBuilder as TB
&gt;&gt;&gt; tb = TB()
&gt;&gt;&gt; tb.feed(""&lt;p&gt;Hello world"")
&gt;&gt;&gt; e= tb.close()
&gt;&gt;&gt; e.find("".//{http://www.w3.org/1999/xhtml}p"")
&lt;Element {http://www.w3.org/1999/xhtml}p at 264eb8&gt;
</code></pre>
"
271705,"<p>@gnud, @edg - Unless I misunderstand, he's asking about the filename, not the file content
@setori - the Content-Trasfer-Encoding is telling you how the CONTENT of the file is encoded, not the ""filename"".</p>

<p>I'm not an expert, but this part here in the filename is telling him about the characters that follow:</p>

<p>=?gb2312?B?</p>

<p>I'm looking for the documentation in the RFCs... Ah! here it is: <a href=""http://tools.ietf.org/html/rfc2047"">http://tools.ietf.org/html/rfc2047</a></p>

<p>The RFC says:</p>

<p><strong><em>Generally, an ""encoded-word"" is a sequence of printable ASCII characters that begins with ""=?"", ends with ""?="", and has two ""?""s in between.</em></strong> </p>

<p>Something else to look at is the code in SharpMimeTools, a MIME parser (in C#) that I use in my <a href=""http://ifdefined.com/bugtrackernet.html"">bug tracking</a> app, <a href=""http://ifdefined.com/bugtrackernet.html"">BugTracker.NET</a></p>
"
154972,"<p>You should look at a good parser for <a href=""http://wikicreole.org/"" rel=""nofollow"">Creole</a> syntax: <a href=""http://wiki.sheep.art.pl/Wiki%20Creole%20Parser%20in%20Python"" rel=""nofollow"">creole.py</a>. It can convert Creole (which is ""a common wiki markup language to be used across different wikis"") to HTML.</p>
"
215329,"<p>Well a lot of operations in Python are thread-safe by default, so a standard dictionary should be ok (at least in certain respects).  This is mostly due to the GIL, which will help avoid some of the more serious threading issues.</p>

<p>There's a list here:  <a href=""http://coreygoldberg.blogspot.com/2008/09/python-thread-synchronization-and.html"" rel=""nofollow"">http://coreygoldberg.blogspot.com/2008/09/python-thread-synchronization-and.html</a> that might be useful.</p>

<p>Though atomic nature of those operation just means that you won't have an entirely inconsistent state if you have two threads accessing a dictionary at the same time.  So you wouldn't have a corrupted value.  However you would (as with most multi-threading programming) not be able to rely on the specific order of those atomic operations.</p>

<p>So to cut a long story short...</p>

<p>If you have fairly simple requirements and aren't to bothered about the ordering of what get written into the cache then you can use a dictionary and know that you'll always get a consistent/not-corrupted value (it just might be out of date).</p>

<p>If you want to ensure that things are a bit more consistent with regard to reading and writing then you might want to look at Django's local memory cache:</p>

<p><a href=""http://code.djangoproject.com/browser/django/trunk/django/core/cache/backends/locmem.py"" rel=""nofollow"">http://code.djangoproject.com/browser/django/trunk/django/core/cache/backends/locmem.py</a></p>

<p>Which uses a read/write lock for locking.</p>
"
156968,"<p>well it works for me:</p>

<pre><code>class Users(Base):
    __tablename__   = 'users'
    __table_args__  = {'autoload':True}

users = Users()
print users.__table__.select()
</code></pre>

<p>...SELECT users.......</p>
"
135228,"<p>range() returns a list, xrange() returns an xrange object.</p>

<p>xrange() is a bit faster, and a bit more memory efficient. But the gain is not very large.</p>

<p>The extra memory used by a list is of course not just wasted, lists have more functionality (slice, repeat, insert, ...). Exact differences can be found in the <a href=""http://docs.python.org/typesseq.html"">documentation</a>. There is no bonehard rule, use what is needed.</p>

<p>Python 3.0 is still in development, but IIRC range() will very similar to xrange() of 2.X and list(range()) can be used to generate lists.</p>
"
10846,"<p>The latest version of <a href=""http://effbot.org/zone/element-xpath.htm"">elementtree</a> supports XPath pretty well.  Not being an XPath expert I can't say for sure if the implementation is full but it has satisfied most of my needs when working in Python.  I've also use lxml and PyXML and I find etree nice because it's a standard module.</p>

<p>NOTE: I've since found lxml and for me it's definitely the best XML lib out there for Python.  It does XPath nicely as well (though again perhaps not a full implementation).</p>
"
181593,"<p>People worry it encourages an obfuscated style of programming, doing something that can be achieved with clearer methods.</p>

<p>I'm not against reduce myself, I also find it a useful tool sometimes.</p>
"
271860,"<p><a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">BeautifulSoup</a> is a great screen-scraping library.  Use urllib2 to fetch the page, and BeautifulSoup to parse it apart.  Here's a code sample from their docs:</p>

<pre><code>import urllib2
from BeautifulSoup import BeautifulSoup

page = urllib2.urlopen(""http://www.icc-ccs.org/prc/piracyreport.php"")
soup = BeautifulSoup(page)
for incident in soup('td', width=""90%""):
    where, linebreak, what = incident.contents[:3]
    print where.strip()
    print what.strip()
    print
</code></pre>
"
39760,"<p>It's an often-asked question.  There's an <a href=""http://code.activestate.com/recipes/113799/"">ASPN Cookbook</a> entry on it that has served me in the past.</p>

<p>And there is an <a href=""http://wiki.python.org/moin/BitManipulation"">extensive page of requirements one person would like to see from a module doing this.</a></p>
"
214682,"<p>There is something that works as you want it to: <code>twisted.python.reflect.namedAny</code>:</p>

<pre><code>&gt;&gt;&gt; from twisted.python.reflect import namedAny
&gt;&gt;&gt; namedAny(""operator.eq"")
&lt;built-in function eq&gt;
&gt;&gt;&gt; namedAny(""pysqlite2.dbapi2.connect"")
&lt;built-in function connect&gt;
&gt;&gt;&gt; namedAny(""os"")
&lt;module 'os' from '/usr/lib/python2.5/os.pyc'&gt;
</code></pre>
"
157711,"<p>You're unlikely to get sufficiently fine-grained control that you can completely eliminate the possibility
of duplicate timestamps - you'd need resolution smaller than the time it takes to generate a datetime object.  There are a couple of other approaches you might take to deal with it:</p>

<ol>
<li><p>Deal with it.  Leave your timestamps non-unique as they are, but rely on python's sort being stable to deal with reordering problems.  Sorting on timestamp <em>first</em>, then something else will retain the timestamp ordering - you just have to be careful to always start from the timestamp ordered list every time, rather than doing multiple sorts on the same list.</p></li>
<li><p>Append your own value to enforce uniqueness.  Eg. include an incrementing integer value as part of the key, or append such a value only if timestamps are different.  Eg.</p></li>
</ol>

<p>The following will guarantee unique timestamp values:</p>

<pre><code>    class TimeStamper(object):
        def __init__(self):
            self.lock = threading.Lock()
            self.prev = None
            self.count = 0

         def getTimestamp(self):
             with self.lock:
                 ts = str(datetime.now())
                 if ts == self.prev:
                     ts +='.%04d' % self.count
                     self.count += 1
                 else:
                     self.prev = ts
                     self.count = 1
             return ts
</code></pre>

<p>For multiple processes (rather than threads), it gets a bit trickier though.</p>
"
181767,"<p>I use pdb for basic python debugging. Some of the situations I use it are:</p>

<ul>
<li>When you have a loop iterating over 100,000 entries and want to break at a specific point, it becomes really helpful.(conditional breaks)</li>
<li>Trace the control flow of someone else's code.</li>
<li>Its always better to use a debugger than litter the code with prints.</li>
<li>Normally there can be more than one point of failures resulting in a bug, all are not obvious in the first look. So you look for obvious places, if nothing is wrong there, you move ahead and add some more prints.. debugger can save you time here, you dont need to add the print and run again.</li>
</ul>
"
35543,"<p>XHTML is easy, use <a href=""http://lxml.de/validation.html"" rel=""nofollow"">lxml</a>.</p>

<p>HTML is harder, since there's traditionally not been as much interest in validation among the HTML crowd (run StackOverflow itself through a validator, yikes). The easiest solution would be to execute external applications such as <a href=""http://www.jclark.com/sp/"" rel=""nofollow"">nsgmls</a> or <a href=""http://openjade.sourceforge.net/"" rel=""nofollow"">OpenJade</a>, and then parse their output.</p>
"
87622,"<p>I'm not really an old hand at Python, but here's an XPath solution using libxml2.</p>

<pre><code>import libxml2

DOC = """"""&lt;elements&gt;
    &lt;parent name=""CategoryA""&gt;
        &lt;child value=""a1""/&gt;
        &lt;child value=""a2""/&gt;
        &lt;child value=""a3""/&gt;
    &lt;/parent&gt;
    &lt;parent name=""CategoryB""&gt;
        &lt;child value=""b1""/&gt;
        &lt;child value=""b2""/&gt;
        &lt;child value=""b3""/&gt;
    &lt;/parent&gt;
&lt;/elements&gt;""""""

doc = libxml2.parseDoc(DOC)

def getValues(cat):
    return [attr.content for attr in doc.xpathEval(""/elements/parent[@name='%s']/child/@value"" % (cat))]

print getValues(""CategoryA"")
</code></pre>

<p>With result...</p>

<pre><code>['a1', 'a2', 'a3']
</code></pre>
"
89434,"<p>Don't throw away your code!</p>

<p>It's the single worst mistake you can make (on a large codebase).  See <a href=""http://www.joelonsoftware.com/articles/fog0000000069.html"" rel=""nofollow"">Things You Should Never Do, Part 1</a>.</p>

<p>You've invested a lot of effort into that old code and worked out many bugs.  Throwing it away is a classic developer mistake (and one I've done many times).  It makes you feel ""better"", like a spring cleaning.  But you don't need to buy a new apartment and all new furniture to outfit your house.  You can work on one room at a time... and maybe some things just need a new paintjob.  Hence, this is where refactoring comes in.</p>

<p>For new functionality in your app, <a href=""http://blog.danbartels.com/articles/322.aspx"" rel=""nofollow"">write it in C# and call it from your classic ASP</a>.  You'll be forced to be modular when you rewrite this new code.  When you have time, refactor parts of your old code into C# as well, and work out the bugs as you go.  Eventually, you'll have replaced your app with all new code.</p>

<p>You could also write your own compiler.  We wrote one for our classic ASP app a long time ago to allow us to output PHP.  It's called <a href=""http://www.joelonsoftware.com/items/2006/09/01b.html"" rel=""nofollow"">Wasabi</a> and I think it's the reason Jeff Atwood thought Joel Spolsky went off his rocker.  Actually, maybe we should just ship it, and then you could use that.  </p>

<p>It allowed us to switch our entire codebase to .NET for the next release while only rewriting a very small portion of our source.  It also caused a bunch of people to call us crazy, but writing a compiler is not that complicated, and it gave us a lot of flexibility.</p>

<p>Also, if this is an internal only app, just leave it.  Don't rewrite it - you are the only customer and if the requirement is you need to run it as classic asp, you can meet that requirement.</p>
"
109380,"<p>I would also recommend jinja2. There is a <a href=""https://web.archive.org/web/20090421084229/http://lucumr.pocoo.org/2008/9/16/why-jinja-is-not-django-and-why-django-should-have-a-look-at-it"" rel=""nofollow"">nice article</a> on <code>django</code> vs. <code>jinja2</code> that gives some in-detail information on why you should prefere the later.</p>
"
273661,"<p>It's worth mentioning that backward compatibility incurs costs of its own. In some cases it's almost impossible to evolve a language in the ideal way if 100% backward compatibility is required. Java's implementation of generics (which erases type information at compile-time in order to be backwardly-compatible) is a good example of how implementing features with 100% backward compatibility can result in a sub-optimal language feature.</p>

<p>So loosely speaking, it can come down to a choice between a poorly implemented new feature that's backwardly compatible, or a nicely implemented new feature that's not. In many cases, the latter is a better choice, particularly if there are tools that can automatically translate incompatible code.</p>
"
206860,"<p>This is a difficult problem because you either have to reverse engineer the javascript on a per-site basis, or implement a javascript engine and run the scripts (which has its own difficulties and pitfalls).</p>

<p>It's a heavy weight solution, but I've seen people doing this with greasemonkey scripts - allow Firefox to render everything and run the javascript, and then scrape the elements.  You can even initiate user actions on the page if needed.</p>


"
165089,"<p>You can use a dedicated application which sends the keystroke to the window manager, which should then pass it to flash, if the window starts as being the active window on the screen. This is quite error prone, though, due to delays between starting flash and when the window will show up.</p>

<p>For example, your script could do something like this:
flashplayer *.swf
sleep 3 &amp;&amp; xsendkey Control+F</p>

<p>The application xsendkey can be found here: <a href=""http://people.csail.mit.edu/adonovan/hacks/xsendkey.html"" rel=""nofollow"">http://people.csail.mit.edu/adonovan/hacks/xsendkey.html</a>
Without given a specific window, it will send it to the root window, which is handled by your window manager. You could also try to figure out the Window id first, using xprop or something related to it.</p>

<p>Another option is a Window manager, which is able to remember your settings and automatically apply them. Fluxbos for example provides this feature. You could set fluxbox to make the Window decor-less and stretch it over the whole screen, if flashplayer supports being resized. This is also not-so-nice, as it would probably affect all the flashplayer windows you open ever.</p>
"
38513,"<p>Returning a tuple is the usual way to do this in Python.</p>
"
138630,"<p>In the latest releases of QT you can draw widgets <em>into</em> your OpenGL context, if you really would like to do something like that. Otherwise there is <a href=""http://www.cegui.org.uk/wiki/index.php/Main_Page"">CEGui</a> that is used in some game engines. </p>

<p>Implementing GUI Widgets yourself unless you want to edify yourself is a waste of your time, unless you would be satisfied with the most rudimentary of looks and functionality. </p>
"
199607,"<p>If you already have a large amount of business logic implemented in Java, then I see two possibilities for you.</p>

<p>The first is to use a high level language that runs within the JVM and has a web framework, such as <a href=""http://groovy.codehaus.org/"" rel=""nofollow"">Groovy</a>/<a href=""http://grails.org/"" rel=""nofollow"">Grails</a> or <a href=""http://jruby.codehaus.org/"" rel=""nofollow"">JRuby</a> and <a href=""http://rads.stackoverflow.com/amzn/click/1590598814"" rel=""nofollow"">Rails</a>.  This allows you to directly leverage all of the business logic you've implemented in Java without having to re-architect the entire site.  You should be able to take advantage of the framework's improved productivity with respect to the web development and still leverage your existing business logic.</p>

<p>An alternative approach is to turn your business logic layer into a set of services available over a standard RPC mechanisim - REST, SOAP, XML-RPC or some other simple XML (YAML or JSON) over HTTP protocol (see also <a href=""https://dwr.dev.java.net/"" rel=""nofollow"">DWR</a>) so that the front end can make these RPC calls to your business logic.</p>

<p>The first approach, using a high level language on the JVM is probably less re-architecture than the second.   </p>

<p>If your goal is a complete migration off of Java, then either of these approaches allow you to do so in smaller steps - you may find that this kind of hybrid is better than whole sale deprecation - the JVM has a lot of libraries and integrates well into a lot of other systems.</p>
"
172097,"<p>A <a href=""http://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users"">user profile</a> (as returned by <code>django.contrib.auth.models.User.get_profile</code>) doesn't extend the User table - the model you specify as the profile model with the <code>AUTH_PROFILE_MODULE</code> setting is just a model which has a <code>ForeignKey</code> to <code>User</code>. <code>get_profile</code> and the setting are really just a convenience API for accessing an instance of a specific model which has a <code>ForeignKey</code> to a specific <code>User</code> instance.</p>

<p>As such, one option is to create a profile model in which the <code>ForeignKey</code> to <code>User</code> can be <code>null</code> and associate your <code>Photo</code> model with this profile model instead of the <code>User</code> model. This would allow you to create a profile for a non-existent user and attach a registered User to the profile at a later date.</p>
"
182057,"<p>Download the Python 2.6 Windows installer from <a href=""http://python.org/"" rel=""nofollow"">python.org</a> (<a href=""http://python.org/ftp/python/2.6/python-2.6.msi"" rel=""nofollow"">direct link</a>). If you're just learning, use the included SQLite library so you don't have to fiddle with database servers.</p>

<p><hr /></p>

<p>Most web development frameworks (Django, Turbogears, etc) come with a built-in webserver command that runs on the local computer without Apache.</p>
"
287395,"<p>Instead of reinventing the wheel, download ""unifdef"".  If you're on some flavour of Linux, you can probably find a package for it, otherwise it's on <a href=""http://freshmeat.net/projects/unifdef/"" rel=""nofollow"">FreshMeat</a></p>
"
287867,"<p>do_stuff is not an instance variable in your example. It's more like a static variable. You need to define do_stuff within a method (e.g., the <strong>init</strong> method) where you have a reference to self in order to make it an instance variable. I hope this example clarifies things for you:</p>

<pre><code>class Foo:

  def __init__(self):
    self.do_stuff = { ""A"": self.do_A, ""B"": self.do_B }

  def run(self):
    for x in [""A"", ""B""]:
      self.do_stuff[x](""hi"")

  def do_A(self, x):
    pass

  def do_B(self, x):
    pass
</code></pre>

<p>Note that the lambda functions aren't necessary. You can just store references to the functions themselves in your dictionary. The notation ""self.do_A"" will automatically pass self as the first argument. </p>

<p>EDIT: Does anyone know how to make underscores show properly in non-code-sample text?
<br>
EDIT: WTH? The preview is showing underscores differently than the post.</p>
"
276372,"<p>I am quite sure that Django templates does not support that.
For your replace operation I would look into different filters.</p>

<p>You really should try to keep as much logic as you can in your views and not in the templates.</p>
"
189838,"<p>This isn't the prettiest way to do it, but in my opinion, it's the best way.  </p>

<pre><code>def loop():
    while True:
    #snip: print out current state
        while True:
            ok = get_input(""Is this ok? (y/n)"")
            if ok == ""y"" or ok == ""Y"": return
            if ok == ""n"" or ok == ""N"": break
        #do more processing with menus and stuff
</code></pre>

<p>I'm pretty sure you could work out something using recursion here as well, but I dunno if that's a good option for you.</p>
"
158326,"<p>Do you actually need to reference the classes at class definition time? ie.</p>

<pre><code> class CRoom(object):
     person = CPerson(""a person"")
</code></pre>

<p>Or (more likely), do you just need to use CPerson in the methods of your class (and vice versa).  eg:</p>

<pre><code>class CRoom(object):
    def getPerson(self): return CPerson(""someone"")
</code></pre>

<p>If the second, there's no problem - as by the time the method gets <strong>called</strong> rather than defined, the module will be imported.  Your sole problem is how to refer to it.  Likely you're doing something like:</p>

<pre><code>from CRoom import CPerson # or even import *
</code></pre>

<p>With circularly referencing modules, you can't do this, as at the point one module imports another, the original modules body won't have finished executing, so the namespace will be incomplete.  Instead, use qualified references.  ie:</p>

<pre><code>#croom.py
import cperson
class CRoom(object):
    def getPerson(self): return cperson.CPerson(""someone"")
</code></pre>

<p>Here, python doesn't need to lookup the attribute on the namespace until the method actually gets called, by which time both modules should have completed their initialisation.</p>
"
212959,"<p>Why not just use <a href=""http://docs.python.org/library/optparse.html#module-optparse"" rel=""nofollow"">optparse</a>:</p>

<pre><code>from optparse import OptionParser
[...]
parser = OptionParser()
parser.add_option(""-f"", ""--file"", dest=""filename"",
              help=""write report to FILE"", metavar=""FILE"")
parser.add_option(""-q"", ""--quiet"",
              action=""store_false"", dest=""verbose"", default=True,
              help=""don't print status messages to stdout"")

(options, args) = parser.parse_args()

file = options.filename
if options.quiet == True:
    [...]
</code></pre>
"
213138,"<p><em>Disclaimer: I didn't test this and don't know if it can perform better.</em>  </p>

<p>Create a single perm view:</p>

<pre><code>function(doc) {
  for (var tag in doc.tags) {
    emit([tag, doc.published], doc)
  }
};
</code></pre>

<p>And query with 
_view/your_view/all?startkey=['your_tag_here']&amp;endkey=['your_tag_here', {}]</p>

<p>Resulting JSON structure will be slightly different but you will still get the publish date sorting.</p>
"
213572,"<p>Consider reconsidering your design. Maintaining that much state in your webserver is probably a bad idea. Multi-process is a much better way to go for stability. </p>

<p>Is there another way to share state between separate processes? What about a service? Database? Index? </p>

<p>It seems unlikely that maintaining a huge array of data in memory and relying on a single multi-threaded process to serve all your requests is the best design or architecture for your app. </p>
"
213820,"<p>Sure, python is a pretty good choice for those tasks (I'm sure many will recommend PowerShell instead).</p>

<p>Here is a fine introduction from that point of view:</p>

<p><a href=""http://www.redhatmagazine.com/2008/02/07/python-for-bash-scripters-a-well-kept-secret/"">http://www.redhatmagazine.com/2008/02/07/python-for-bash-scripters-a-well-kept-secret/</a></p>

<p>EDIT: About gnud's concern: <a href=""http://www.portablepython.com/"">http://www.portablepython.com/</a></p>
"
189696,"<pre><code>
keeplooping=True
while keeplooping:
    #Do Stuff
    while keeplooping:
          #do some other stuff
          if finisheddoingstuff(): keeplooping=False
</code></pre>

<p>or something like that. You could set a variable in the inner loop, and check it in the outer loop immediately after the inner loop exits, breaking if appropriate. I kinda like the GOTO method, provided you don't mind using an April Fool's joke module - its not Pythonic, but it does make sense.</p>
"
275460,"<p>As <a href=""http://stackoverflow.com/questions/275207/python-ctypes-and-function-calls#275333"">vincent</a> mentioned, this is due to the allocated page being marked as non executable.  Newer processors support this <a href=""http://en.wikipedia.org/wiki/NX_bit"">functionality</a>, and its used as an added layer of security by OS's which support it.  The idea is to protect against certain buffer overflow attacks.  Eg. A common attack is to overflow a stack variable, rewriting the return address to point to code you have inserted.  With a non-executable stack this now only produces a segfault, rather than control of the process.  Similar attacks also exist for heap memory.</p>

<p>To get around it, you need to alter the protection.  This can only be performed on page aligned memory, so you'll probably need to change your code to something like the below:</p>

<pre><code>libc = CDLL('libc.so')

# Some constants
PROT_READ = 1
PROT_WRITE = 2
PROT_EXEC = 4

def executable_code(buffer):
    """"""Return a pointer to a page-aligned executable buffer filled in with the data of the string provided.
    The pointer should be freed with libc.free() when finished""""""

    buf = c_char_p(buffer)
    size = len(buffer)
    # Need to align to a page boundary, so use valloc
    addr = libc.valloc(size)
    addr = c_void_p(addr)

    if 0 == addr:  
        raise Exception(""Failed to allocate memory"")

    memmove(addr, buf, size)
    if 0 != libc.mprotect(addr, len(buffer), PROT_READ | PROT_WRITE | PROT_EXEC):
        raise Exception(""Failed to set protection on buffer"")
    return addr

code_ptr = executable_code(buffer)
fptr = cast(code_ptr, CFUNCTYPE(c_long, c_long))
print fptr(1234)
libc.free(code_ptr)
</code></pre>

<p>Note: It may be a good idea to unset the executable flag before freeing the page.  Most C libraries don't actually return the memory to the OS when done, but keep it in their own pool.  This could mean they will reuse the page elsewhere without clearing the EXEC bit, bypassing the security benefit. </p>

<p>Also note that this is fairly non-portable.  I've tested it on linux, but not on any other OS.  It won't work on windows, buy may do on other unixes (BSD, OsX?).</p>
"
108032,"<p>Some libraries support 64 bits extensions, indeed, but there doesn't seem to be a standard. <a href=""http://xmlrpc-c.sourceforge.net/"" rel=""nofollow"">xmlrpc-c</a>, for example, has a so called i8 but it doesn't work with python (at least not by default).</p>

<p>I would recommend to either:</p>

<ul>
<li>Convert the integer to string by hand and send it as such. XMLRPC will convert it to string anyway, so I would say this is reasonable.</li>
<li>Break it in two 32 bits integers and send it as such.</li>
</ul>
"
236253,"<p>What is happening is that the variable i is captured, and the functions are returning the value it is bound to at the time it is called.  In functional languages this kind of situation never arises, as i wouldn't be rebound.  However with python, and also as you've seen with lisp, this is no longer true.</p>

<p>The difference with your scheme example is to do with the semantics of the do loop.  Scheme is effectively creating a new i variable each time through the loop, rather than reusing an existing i binding as with the other languages.  If you use a different variable created external to the loop and mutate it, you'll see the same behaviour in scheme.  Try replacing your loop with:</p>

<pre><code>(let ((ii 1)) (
  (do ((i 1 (+ 1 i)))
      ((&gt;= i 4))
    (set! flist 
      (cons (lambda (x) (* ii x)) flist))
    (set! ii i))
))
</code></pre>

<p>Take a look <a href=""http://lambda-the-ultimate.org/node/2648"">here</a> for some further discussion of this.</p>

<p>[Edit] Possibly a better way to describe it is to think of the do loop as a macro which performs the following steps:</p>

<ol>
<li>Define a lambda taking a single parameter (i), with a body defined by the body of the loop,</li>
<li>An immediate call of that lambda with appropriate values of i as its parameter. </li>
</ol>

<p>ie. the equivalent to the below python:</p>

<pre><code>flist = []

def loop_body(i):      # extract body of the for loop to function
    def func(x): return x*i
    flist.append(func)

map(loop_body, xrange(3))  # for i in xrange(3): body
</code></pre>

<p>The i is no longer the one from the parent scope but a brand new variable in its own scope (ie. the parameter to the lambda) and so you get the behaviour you observe.  Python doesn't have this implicit new scope, so the body of the for loop just shares the i variable.</p>
"
237214,"<p>If I read your updated requirements correctly, I don't think Django's existing auth system will be sufficient. It sounds like you need a full-on ACL system.</p>

<p>This subject has come up a number of times. Try googling on django+acl.</p>

<p>Random samplings ...</p>

<p>There was a Summer of Code project a couple of years ago, but I'm not sure where they got to. See <a href=""http://code.djangoproject.com/wiki/GenericAuthorization"">http://code.djangoproject.com/wiki/GenericAuthorization</a></p>

<p>There is a fresh ticket at djngoproject.org that might be interesting:</p>

<ul>
<li><a href=""http://code.djangoproject.com/ticket/9444"">http://code.djangoproject.com/ticket/9444</a></li>
</ul>

<p>There is some interesting code snips on dumpz.org:</p>

<ul>
<li><a href=""http://dumpz.org/274/"">http://dumpz.org/274/</a> models.py       </li>
<li><a href=""http://dumpz.org/273/"">http://dumpz.org/273/</a> signals.py</li>
</ul>

<p>... but there are zero docs.</p>

<p>Good luck!</p>
"
314633,"<pre><code>&gt;&gt;&gt; mysets = (set(x.items()) for x in MyList)
&gt;&gt;&gt; reduce(lambda a,b: a.intersection(b), mysets)
set([('sum', '-21,90'), ('type', 'Purchase'), ('target', 'Apple Store')])
</code></pre>

<p>First, I've created a generator that will convert the list of dicts into an iterable sequence of sets of key,value pairs. You could use a list comprehension here but this way doesn't convert your entire list into yet another list, useful if you don't know how big it will be.</p>

<p>Then I've used reduce to apply a function that finds the common values between each set. It finds the intersection of set 1 &amp; set 2, which is itself a set, then the intersection of that set &amp; set 3 etc. The mysets generator will happily feed each set on demand to the reduce function until its done.</p>

<p>I believe reduce has been deprecated as a built-in in Python 3.0, but should still be available in functools.</p>

<p>You could of course make it a one-liner by replacing mysets in the reduce with the generator expression, but that reduces the readability IMO. In practice I'd probably even go one step further and break the lambda out into its own line as well:</p>

<pre><code>&gt;&gt;&gt; mysets = (set(x.items()) for x in MyList)
&gt;&gt;&gt; find_common = lambda a,b: a.intersection(b)
&gt;&gt;&gt; reduce(find_common, mysets)
set([('sum', '-21,90'), ('type', 'Purchase'), ('target', 'Apple Store')])
</code></pre>

<p>And if you need the end result to be a dict, just wrap it like so:</p>

<pre><code>&gt;&gt;&gt; dict(reduce(find_common, mysets))
{'sum': '-21,90', 'type': 'Purchase', 'target': 'Apple Store'}
</code></pre>

<p>dict can accept any iterator of key,value pairs, such as the set of tuples returned at the end.</p>
"
237447,"<p>Yes, this is the way to do it; the property declaration executes at the time the parent class' definition is executed, which means it can only ""see"" the versions of the methods which exist on the parent class. So when you redefine one or more of those methods on a child class, you need to re-declare the property using the child class' version of the method(s).</p>
"
276696,"<p>You most probably should not use import for what you are trying to do.</p>

<p>Without further information I can only guess, but you should move the code in the module you import from the top level into a function, do the import once and than simply call the function from you loop.</p>
"
188971,"<p>All of them will get the job done.</p>

<h2>Use the one that you and your team are most familiar with</h2>

<p>This will have a far greater impact on the delivery times and stability of your app than any of the other variables.</p>
"
189452,"<p>When you write a Conch server, you can control what happens when the client makes a shell request by implementing <a href=""http://twistedmatrix.com/trac/browser/trunk/twisted/conch/interfaces.py?rev=24441#L62""><code>ISession.openShell</code></a>.  The Conch server will request <a href=""http://twistedmatrix.com/trac/browser/trunk/twisted/conch/interfaces.py?rev=24441#L6""><code>IConchUser</code></a> from your realm and then adapt the resulting avatar to <code>ISession</code> to call <code>openShell</code> on it if necessary.</p>

<p><code>ISession.openShell</code>'s job is to take the transport object passed to it and associate it with a protocol to interpret the bytes received from it and, if desired, to write bytes to it to be sent to the client.</p>

<p>In an unfortunate twist, the object passed to <code>openShell</code> which represents the transport is actually an <a href=""http://twistedmatrix.com/trac/browser/trunk/twisted/internet/interfaces.py?rev=24441#L1028""><code>IProcessProtocol</code></a> provider.  This means that you need to call <a href=""http://twistedmatrix.com/trac/browser/trunk/twisted/internet/interfaces.py?rev=24441#L1033""><code>makeConnection</code></a> on it, passing an <a href=""http://twistedmatrix.com/trac/browser/trunk/twisted/internet/interfaces.py?rev=24441#L1261""><code>IProcessTransport</code></a> provider.  When data is received from the client, the <code>IProcessProtocol</code> will call <a href=""http://twistedmatrix.com/trac/browser/trunk/twisted/internet/interfaces.py?rev=24441#L1282""><code>writeToChild</code></a> on the transport you pass to <code>makeConnection</code>.  When you want to send data to the client, you should call <a href=""http://twistedmatrix.com/trac/browser/trunk/twisted/internet/interfaces.py?rev=24441#L1043""><code>childDataReceived</code></a> on it.</p>

<p>To see the exact behavior, I suggest reading <a href=""http://twistedmatrix.com/trac/browser/trunk/twisted/conch/ssh/session.py?rev=24441#L173"">the implementation of the <code>IProcessProtocol</code> that is passed in</a>.  Don't depend on anything that's not part of <code>IProcessProtocol</code>, but seeing the implementation can make it easier to understand what's going on.</p>

<p>You may also want to look at <a href=""http://twistedmatrix.com/trac/browser/trunk/twisted/conch/unix.py?rev=24441#L174"">the implementation of the normal shell-creation</a> to get a sense of what you're aiming for.  This will give you a clue about how to associate the stdio of the bzr child process you launch with the SSH channel.</p>
"
211573,"<p>SQLite automatically creates the database file the first time you try to use it. The SQL statements for creating tables can use <code>IF NOT EXISTS</code> to make the commands only take effect if the table has not been created This way you don't need to check for the database's existence beforehand: SQLite can take care of that for you.</p>

<p>The main thing I would still be worried about is that executing <code>CREATE TABLE IF EXISTS</code> for every web transaction (say) would be inefficient; you can avoid that by having the program keep an (in-memory) variable saying whether it has created the database today, so it runs the <code>CREATE TABLE</code> script once per run. This would still allow for you to delete the database and start over during debugging.</p>
"
160227,"<p>Python is designed to support more than just object-oriented programming. Preserving the same interface between methods and functions lets the two styles interoperate more cleanly.</p>

<p>Ruby was built from the ground up to be object-oriented. Even the literals are objects (evaluate 1.class and you get Fixnum). The language was built such that self is a reserved keyword that returns the current instance wherever you are.</p>

<p>If you're inside an instance method of one of your class, self is a reference to said instance. </p>

<p>If you're in the definition of the class itself (not in a method), self is the class itself:</p>

<pre><code>class C
  puts ""I am a #{self}""
  def instance_method
    puts 'instance_method'
  end
  def self.class_method
    puts 'class_method'
  end
end
</code></pre>

<p>At class definition time, 'I am a C' will be printed.</p>

<p>The straight 'def' defines an instance method, whereas the 'def self.xxx' defines a class method.</p>

<pre><code>c=C.new

c.instance_method
#=&gt; instance_method
C.class_method
#=&gt; class_method
</code></pre>
"
37553,"<p>You can try this <a href=""http://code.activestate.com/recipes/362715/"" rel=""nofollow"">recipe on Active State</a>. </p>

<p>There is also a <a href=""http://code.google.com/p/lino/source/browse/lino/utils/dbfreader.py"" rel=""nofollow"">DBFReader module</a> which you can try.</p>

<p>For support for <a href=""http://www.physics.ox.ac.uk/users/santoso/dbf.py.src"" rel=""nofollow"">memo fields</a>.</p>
"
35667,"<p>I'm not familiar with the specific services listed, but the field of natural language processing has developed a number of techniques that enable this sort of information extraction from general text.  As Sean stated, once you have candidate terms, it's not to difficult to search for those terms with some of the other entities in context and then use the results of that search to determine how confident you are that the term extracted is an actual entity of interest.</p>

<p><a href=""http://opennlp.sourceforge.net/"">OpenNLP</a> is a great project if you'd like to play around with natural language processing.  The capabilities you've named would probably be best accomplished with Named Entity Recognizers (NER) (algorithms that locate proper nouns, generally, and sometimes dates as well) and/or Word Sense Disambiguation (WSD) (eg: the word 'bank' has different meanings depending on it's context, and that can be very important when extracting information from text.  Given the sentences: ""the plane banked left"", ""the snow bank was high"", and ""they robbed the bank"" you can see how dissambiguation can play an important part in language understanding)</p>

<p>Techniques generally build on each other, and NER is one of the more complex tasks, so to do NER successfully, you will generally need accurate tokenizers (natural language tokenizers, mind you -- statistical approaches tend to fare the best), string stemmers (algorithms that conflate similar words to common roots: so words like informant and informer are treated equally), sentence detection ('Mr. Jones was tall.' is only one sentence, so you can't just check for punctuation), part-of-speech taggers (POS taggers), and WSD.</p>

<p>There is a python port of (parts of) OpenNLP called NLTK (<a href=""http://nltk.sourceforge.net"">http://nltk.sourceforge.net</a>) but I don't have much experience with it yet.  Most of my work has been with the Java and C# ports, which work well.  </p>

<p>All of these algorithms are language-specific, of course, and they can take significant time to run (although, it is generally faster than reading the material you are processing).  Since the state-of-the-art is largely based on statistical techniques, there is also a considerable error rate to take into account.  Furthermore, because the error rate impacts all the stages, and something like NER requires numerous stages of processing, (tokenize -> sentence detect -> POS tag -> WSD -> NER) the error rates compound.</p>
"
57745,"<p>You could find an answer here -- <a href=""http://stackoverflow.com/questions/53224/getting-international-characters-from-a-web-page#53246"">Getting international characters from a web page?</a></p>

<p><strong>EDIT</strong>: It seems like <code>BeautifulSoup</code> doesn't convert entities written in hexadecimal form. It can be fixed:</p>

<pre><code>import copy, re
from BeautifulSoup import BeautifulSoup

hexentityMassage = copy.copy(BeautifulSoup.MARKUP_MASSAGE)
# replace hexadecimal character reference by decimal one
hexentityMassage += [(re.compile('&amp;#x([^;]+);'), 
                     lambda m: '&amp;#%d;' % int(m.group(1), 16))]

def convert(html):
    return BeautifulSoup(html,
        convertEntities=BeautifulSoup.HTML_ENTITIES,
        markupMassage=hexentityMassage).contents[0].string

html = '&lt;html&gt;&amp;#x01ce;&amp;#462;&lt;/html&gt;'
print repr(convert(html))
# u'\u01ce\u01ce'
</code></pre>

<p><strong>EDIT</strong>: </p>

<p><a href=""http://effbot.org/zone/re-sub.htm#unescape-html"" rel=""nofollow""><code>unescape()</code></a> function mentioned by <a href=""http://stackoverflow.com/questions/57708/convert-xml-html-entities-into-unicode-string-in-python/58125#58125"">@dF</a> which uses  <code>htmlentitydefs</code> standard module and <code>unichr()</code> might be more appropriate in this case.</p>
"
241814,"<p>Adding to the discussion:</p>

<p>Because the GIL exists, some operations are atomic in Python and do not need a lock. </p>

<p><a href=""http://www.python.org/doc/faq/library/#what-kinds-of-global-value-mutation-are-thread-safe"">http://www.python.org/doc/faq/library/#what-kinds-of-global-value-mutation-are-thread-safe</a></p>

<p>As stated by the other answers, however, you <em>still</em> need to use locks whenever the application logic requires them (such as in a Producer/Consumer problem).</p>
"
60431,"<p>In Python, <code>__init__.py</code> files actually have a meaning! They mean that the folder they are in is a Python module. As such, they have a real role in your code and should most probably be stored in Version Control.</p>

<p>You could well imagine a folder in your source tree that is NOT a Python module, for example a folder containing only resources (e.g. images) and no code. That folder would not need to have a <code>__init__.py</code> file in it. Now how do you make the difference between folders where distutils should create those files and folders where it should not ?</p>
"
200265,"<p>Set the cookie again, as if you hadn't set it the first time, but specify an expiration date that is in the past.</p>
"
200611,"<p>Using <a href=""http://www.python.org/doc/2.5.2/lib/module-cPickle.html"">cPickle</a> on the dictionary would be my choice. Dictionaries are a natural fit for these kind of data, so given your requirements I see no reason not to use them. That, unless you are thinking about reading them from non-python applications, in which case you'd have to use a language neutral text format. And even here you could get away with the pickle plus an export tool.</p>
"
58296,"<p>This isn't possible without cooperation from an external server, because there could be any number of NATs between you and the other computer. If it's a custom protocol, you could ask the other system to report what address it's connected to.</p>
"
58917,"<p>You could actually pull this off, but it would require using metaclasses, which are <em>deep</em> magic (there be dragons). If you want an intro to metaclasses, there's a series of <a href=""http://www.ibm.com/developerworks/linux/library/l-pymeta.html"" rel=""nofollow"">articles from IBM</a> which manage to introduce the ideas without melting your brain.</p>

<p>The source code from an ORM like SQLObject might help, too, since it uses this same kind of declarative syntax.</p>
"
91970,"<p>If the model class is sufficiently intelligent, it should recognize the standard Python ways of doing this.</p>

<p>Try:</p>

<pre><code>getattr(p, s)
setattr(p, s, new_value)
</code></pre>

<p>There is also hasattr available.</p>
"
276934,"<p>Here's something I put together a while ago, it's windows only but may help you get part of what you need done.</p>

<p>Derived from:
""for sys available mem""
<a href=""http://msdn2.microsoft.com/en-us/library/aa455130.aspx"">http://msdn2.microsoft.com/en-us/library/aa455130.aspx</a></p>

<p>""individual process information and python script examples""
<a href=""http://www.microsoft.com/technet/scriptcenter/scripts/default.mspx?mfr=true"">http://www.microsoft.com/technet/scriptcenter/scripts/default.mspx?mfr=true</a></p>

<p>NOTE: the WMI interface/process is also available for performing similar tasks
        I'm not using it here because the current method covers my needs, but if someday it's needed to extend or improve this, then may want to investigate the WMI tools a vailable.</p>

<p>WMI for python:</p>

<p><a href=""http://tgolden.sc.sabren.com/python/wmi.html"">http://tgolden.sc.sabren.com/python/wmi.html</a></p>

<p>The code:</p>

<pre><code>'''
Monitor window processes

derived from:
&gt;for sys available mem
http://msdn2.microsoft.com/en-us/library/aa455130.aspx

&gt; individual process information and python script examples
http://www.microsoft.com/technet/scriptcenter/scripts/default.mspx?mfr=true

NOTE: the WMI interface/process is also available for performing similar tasks
        I'm not using it here because the current method covers my needs, but if someday it's needed
        to extend or improve this module, then may want to investigate the WMI tools available.
        WMI for python:
        http://tgolden.sc.sabren.com/python/wmi.html
'''

__revision__ = 3

import win32com.client
from ctypes import *
from ctypes.wintypes import *
import pythoncom
import pywintypes
import datetime


class MEMORYSTATUS(Structure):
    _fields_ = [
                ('dwLength', DWORD),
                ('dwMemoryLoad', DWORD),
                ('dwTotalPhys', DWORD),
                ('dwAvailPhys', DWORD),
                ('dwTotalPageFile', DWORD),
                ('dwAvailPageFile', DWORD),
                ('dwTotalVirtual', DWORD),
                ('dwAvailVirtual', DWORD),
                ]


def winmem():
    x = MEMORYSTATUS() # create the structure
    windll.kernel32.GlobalMemoryStatus(byref(x)) # from cytypes.wintypes
    return x    


class process_stats:
    '''process_stats is able to provide counters of (all?) the items available in perfmon.
    Refer to the self.supported_types keys for the currently supported 'Performance Objects'

    To add logging support for other data you can derive the necessary data from perfmon:
    ---------
    perfmon can be run from windows 'run' menu by entering 'perfmon' and enter.
    Clicking on the '+' will open the 'add counters' menu,
    From the 'Add Counters' dialog, the 'Performance object' is the self.support_types key.
    --&gt; Where spaces are removed and symbols are entered as text (Ex. # == Number, % == Percent)
    For the items you wish to log add the proper attribute name in the list in the self.supported_types dictionary,
    keyed by the 'Performance Object' name as mentioned above.
    ---------

    NOTE: The 'NETFramework_NETCLRMemory' key does not seem to log dotnet 2.0 properly.

    Initially the python implementation was derived from:
    http://www.microsoft.com/technet/scriptcenter/scripts/default.mspx?mfr=true
    '''
    def __init__(self,process_name_list=[],perf_object_list=[],filter_list=[]):
        '''process_names_list == the list of all processes to log (if empty log all)
        perf_object_list == list of process counters to log
        filter_list == list of text to filter
        print_results == boolean, output to stdout
        '''
        pythoncom.CoInitialize() # Needed when run by the same process in a thread

        self.process_name_list = process_name_list
        self.perf_object_list = perf_object_list
        self.filter_list = filter_list

        self.win32_perf_base = 'Win32_PerfFormattedData_'

        # Define new datatypes here!
        self.supported_types = {
                                    'NETFramework_NETCLRMemory':    [
                                                                        'Name',
                                                                        'NumberTotalCommittedBytes',
                                                                        'NumberTotalReservedBytes',
                                                                        'NumberInducedGC',    
                                                                        'NumberGen0Collections',
                                                                        'NumberGen1Collections',
                                                                        'NumberGen2Collections',
                                                                        'PromotedMemoryFromGen0',
                                                                        'PromotedMemoryFromGen1',
                                                                        'PercentTimeInGC',
                                                                        'LargeObjectHeapSize'
                                                                     ],

                                    'PerfProc_Process':              [
                                                                          'Name',
                                                                          'PrivateBytes',
                                                                          'ElapsedTime',
                                                                          'IDProcess',# pid
                                                                          'Caption',
                                                                          'CreatingProcessID',
                                                                          'Description',
                                                                          'IODataBytesPersec',
                                                                          'IODataOperationsPersec',
                                                                          'IOOtherBytesPersec',
                                                                          'IOOtherOperationsPersec',
                                                                          'IOReadBytesPersec',
                                                                          'IOReadOperationsPersec',
                                                                          'IOWriteBytesPersec',
                                                                          'IOWriteOperationsPersec'     
                                                                      ]
                                }

    def get_pid_stats(self, pid):
        this_proc_dict = {}

        pythoncom.CoInitialize() # Needed when run by the same process in a thread
        if not self.perf_object_list:
            perf_object_list = self.supported_types.keys()

        for counter_type in perf_object_list:
            strComputer = "".""
            objWMIService = win32com.client.Dispatch(""WbemScripting.SWbemLocator"")
            objSWbemServices = objWMIService.ConnectServer(strComputer,""root\cimv2"")

            query_str = '''Select * from %s%s''' % (self.win32_perf_base,counter_type)
            colItems = objSWbemServices.ExecQuery(query_str) # ""Select * from Win32_PerfFormattedData_PerfProc_Process"")# changed from Win32_Thread        

            if len(colItems) &gt; 0:        
                for objItem in colItems:
                    if hasattr(objItem, 'IDProcess') and pid == objItem.IDProcess:

                            for attribute in self.supported_types[counter_type]:
                                eval_str = 'objItem.%s' % (attribute)
                                this_proc_dict[attribute] = eval(eval_str)

                            this_proc_dict['TimeStamp'] = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.') + str(datetime.datetime.now().microsecond)[:3]
                            break

        return this_proc_dict      


    def get_stats(self):
        '''
        Show process stats for all processes in given list, if none given return all processes   
        If filter list is defined return only the items that match or contained in the list
        Returns a list of result dictionaries
        '''    
        pythoncom.CoInitialize() # Needed when run by the same process in a thread
        proc_results_list = []
        if not self.perf_object_list:
            perf_object_list = self.supported_types.keys()

        for counter_type in perf_object_list:
            strComputer = "".""
            objWMIService = win32com.client.Dispatch(""WbemScripting.SWbemLocator"")
            objSWbemServices = objWMIService.ConnectServer(strComputer,""root\cimv2"")

            query_str = '''Select * from %s%s''' % (self.win32_perf_base,counter_type)
            colItems = objSWbemServices.ExecQuery(query_str) # ""Select * from Win32_PerfFormattedData_PerfProc_Process"")# changed from Win32_Thread

            try:  
                if len(colItems) &gt; 0:
                    for objItem in colItems:
                        found_flag = False
                        this_proc_dict = {}

                        if not self.process_name_list:
                            found_flag = True
                        else:
                            # Check if process name is in the process name list, allow print if it is
                            for proc_name in self.process_name_list:
                                obj_name = objItem.Name
                                if proc_name.lower() in obj_name.lower(): # will log if contains name
                                    found_flag = True
                                    break

                        if found_flag:
                            for attribute in self.supported_types[counter_type]:
                                eval_str = 'objItem.%s' % (attribute)
                                this_proc_dict[attribute] = eval(eval_str)

                            this_proc_dict['TimeStamp'] = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.') + str(datetime.datetime.now().microsecond)[:3]
                            proc_results_list.append(this_proc_dict)

            except pywintypes.com_error, err_msg:
                # Ignore and continue (proc_mem_logger calls this function once per second)
                continue
        return proc_results_list     


def get_sys_stats():
    ''' Returns a dictionary of the system stats'''
    pythoncom.CoInitialize() # Needed when run by the same process in a thread
    x = winmem()

    sys_dict = { 
                    'dwAvailPhys': x.dwAvailPhys,
                    'dwAvailVirtual':x.dwAvailVirtual
                }
    return sys_dict


if __name__ == '__main__':
    # This area used for testing only
    sys_dict = get_sys_stats()

    stats_processor = process_stats(process_name_list=['process2watch'],perf_object_list=[],filter_list=[])
    proc_results = stats_processor.get_stats()

    for result_dict in proc_results:
        print result_dict

    import os
    this_pid = os.getpid()
    this_proc_results = stats_processor.get_pid_stats(this_pid)

    print 'this proc results:'
    print this_proc_results
</code></pre>

<p><a href=""http://monkut.webfactional.com/blog/archive/2009/1/21/windows-process-memory-logging-python"">http://monkut.webfactional.com/blog/archive/2009/1/21/windows-process-memory-logging-python</a></p>
"
108936,"<p>I had to do this years ago. I used pymedia. I am not sure if it is still around any way here is some test code I wrote when I was playing with it. It is about 3 years old though.</p>

<p><strong>Edit:</strong> The sample code plays an MP3 file</p>

<pre><code>import pymedia
import time

demuxer = pymedia.muxer.Demuxer('mp3') #this thing decodes the multipart file i call it a demucker

f = open(r""path to \song.mp3"", 'rb')


spot = f.read()
frames = demuxer.parse(spot)
print 'read it has %i frames' % len(frames)
decoder = pymedia.audio.acodec.Decoder(demuxer.streams[0]) #this thing does the actual decoding
frame = decoder.decode(spot)
print dir(frame)
#sys.exit(1)
sound = pymedia.audio.sound
print frame.bitrate, frame.sample_rate
song = sound.Output( frame.sample_rate, frame.channels, 16 ) #this thing handles playing the song

while len(spot) &gt; 0:
    try:
        if frame: song.play(frame.data)
        spot = f.read(512)
        frame = decoder.decode(spot)
    except:
        pass

while song.isPlaying(): time.sleep(.05)
print 'well done'
</code></pre>
"
95707,"<p>I believe that <a href=""http://pyparsing.wikispaces.com/"">pyparsing</a> is based on the same principles as parsec.</p>
"
277234,"<p>Have you looked at <a href=""http://ipython.scipy.org/moin/"">ipython</a>? It's not quite as ""gui"". No smileys, sorry. ;-) It is a pretty good interactive shell for python though. </p>

<p>edit: I see you revised your question to emphasize the importance <strong>GUI</strong>. In that case, IPython wouldn't be a good match. </p>

<p>Might as well save you another blind alley: I went looking at DrPython hoping it would be similar to PLT's DrScheme, which looks comparable to example you've linked too. Unfortunately DrPython isn't all that much like DrScheme. </p>
"
106709,"<p>The behaviour does seem confusing, but intensional. I reproduce here the entirety of the unicode documentation from the <a href=""http://docs.python.org/lib/built-in-funcs.html"" rel=""nofollow"">Python Built-In Functions documentation</a> (for version 2.5.2, as I write this):</p>

<blockquote>
  <p><strong>unicode([object[, encoding [, errors]]])</strong></p>
  
  <p>Return the Unicode string version of object using one of the following modes:</p>
  
  <p>If encoding and/or errors are given, unicode() will decode the
     object which can either be an 8-bit string or a character buffer
     using the codec for encoding. The encoding parameter is a string
     giving the name of an encoding; if the encoding is not known,
     LookupError is raised. Error handling is done according to
     errors; this specifies the treatment of characters which are
     invalid in the input encoding. If errors is 'strict' (the
     default), a ValueError is raised on errors, while a value of
     'ignore' causes errors to be silently ignored, and a value of
     'replace' causes the official Unicode replacement character,
     U+FFFD, to be used to replace input characters which cannot be
     decoded. See also the <a href=""http://docs.python.org/lib/module-codecs.html"" rel=""nofollow"">codecs</a> module.</p>
  
  <p>If no optional parameters are given, unicode() will mimic the
     behaviour of str() except that it returns Unicode strings
     instead of 8-bit strings. More precisely, if object is a Unicode
     string or subclass it will return that Unicode string without
     any additional decoding applied.</p>
  
  <p>For objects which provide a __unicode__() method, it will call
     this method without arguments to create a Unicode string. For
     all other objects, the 8-bit string version or representation is
     requested and then converted to a Unicode string using the codec
     for the default encoding in 'strict' mode.</p>
  
  <p>New in version 2.0. Changed in version 2.2: Support for __unicode__() added. </p>
</blockquote>

<p>So, when you call <code>unicode(r, 'utf-8')</code>, it requires an 8-bit string or a character buffer as the first argument, so it coerces your object using the <code>__str__()</code> method, and attempts to decode that using the <code>utf-8</code> codec. Without the <code>utf-8</code>, the <code>unicode()</code> function looks for a for a <code>__unicode__()</code> method on your object, and not finding it, calls the <code>__str__()</code> method, as you suggested, attempting to use the default codec to convert to unicode.</p>
"
105272,"<p>The Global Interpreter Lock prevents threads from accessing the <em>interpreter</em> simultaneously (thus CPython only ever uses one core). However, as I understand it, the threads are still interrupted and scheduled <em>preemptively</em>, which means you still need locks on shared data structures, lest your threads stomp on each other's toes.</p>

<p>The answer I've encountered time and time again is that multithreading in Python is rarely worth the overhead, because of this. I've heard good things about the <a href=""http://pyprocessing.berlios.de/"" rel=""nofollow"">PyProcessing</a> project, which makes running multiple processes as ""simple"" as multithreading, with shared data structures, queues, etc. (PyProcessing will be introduced into the standard library of the upcoming Python 2.6 as the <a href=""http://www.python.org/dev/peps/pep-0371/"" rel=""nofollow"">multiprocessing</a> module.) This gets you around the GIL, as each process has its own interpreter.</p>
"
347065,"<p>You will only have a first language for a little while. Pick any direction that interests you, and follow it. There is no way around the introduction ""Drink from the Firehose"" experience.</p>

<p>Keep early project simple, and tangible. Build useful things and the motivation will be there.</p>

<p>Web / desktop / mobile / etc, its all good. Find the one that gets you thinking about code when your not coding, and you'll know your going in the right direction.</p>
"
36935,"<p>You will want to wire your URL to the Django <a href=""https://docs.djangoproject.com/en/1.4/ref/generic-views/#django-views-generic-create-update-create-object"" rel=""nofollow"">create_object generic view</a>, and pass it either ""model"" (the model you want to create) or ""form_class"" (a customized <a href=""https://docs.djangoproject.com/en/1.1/topics/forms/modelforms/#topics-forms-modelforms"" rel=""nofollow"">ModelForm</a> class).  There are a number of <a href=""https://docs.djangoproject.com/en/1.4/ref/generic-views/#django-views-generic-create-update-create-object"" rel=""nofollow"">other arguments</a> you can also pass to override default behaviors.</p>

<p>Sample URLconf for the simplest case:</p>

<pre><code>from django.conf.urls.defaults import *
from django.views.generic.create_update import create_object

from my_products_app.models import Product

urlpatterns = patterns('',
    url(r'^admin/products/add/$', create_object, {'model': Product}))
</code></pre>

<p>Your template will get the context variable ""form"", which you just need to wrap in a &lt;form> tag and add a submit button.  The simplest working template (by default should go in ""my_products_app/product_form.html""):</p>

<pre><code>&lt;form action=""."" method=""POST""&gt;
  {{ form }}
  &lt;input type=""submit"" name=""submit"" value=""add""&gt;
&lt;/form&gt;
</code></pre>

<p>Note that your Product model must have a get_absolute_url method, or else you must pass in the post_save_redirect parameter to the view.  Otherwise it won't know where to redirect to after save.</p>
"
329978,"<p>Cartesian product is in the <a href=""http://docs.python.org/library/itertools.html#itertools.product"" rel=""nofollow"">itertools module</a> (in 2.6).</p>

<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.product(range(1, 3), range(1, 5)))
[(1, 1), (1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3), (2, 4)]
</code></pre>
"
330039,"<p>Python's crypt() is a wrapper for the system's crypt() function. From the Linux crypt() man page:</p>

<pre>
char *crypt(const char *key, const char *salt);

key is a userâs typed password.
salt is a two-character string chosen from the set [aâzAâZ0â9./]. 
This string is used to perturb the algorithm in one of 4096 
different ways.
</pre>

<p>Emphasis is on ""<em>two-character</em> string"". Now, if you look at crypt()'s behavior in Python:</p>

<pre><code>&gt;&gt;&gt; crypt.crypt(""Hello"", ""World"")
'Wo5pEi/H5/mxU'
&gt;&gt;&gt; crypt.crypt(""Hello"", ""ABCDE"")
'AB/uOsC7P93EI'
</code></pre>

<p>you discover that the first two characters of the result always coincide with the first two characters of the original salt, which indeed form the true two-character-salt itself.
That is, the result of crypt() has the form 2char-salt + encrypted-pass.
Hence, there is no difference in the result if instead of passing the two-character-salt or the original many-characters-salt you pass the whole encrypted password.</p>

<p>Note: the set [aâzAâZ0â9./] contains 64 characters, and 64&#42;64=4096. Here's how <em>two</em> characters relate to ""<em>4096</em> different ways"".</p>
"
210096,"<p>If you are using ubuntu Linux there was a patch added to the python-mysql package that added the ability to set that same MYSQL_OPT_RECONNECT option (see <a href=""https://launchpad.net/ubuntu/hardy/+source/python-mysqldb/1.2.2-5"">here</a>).  I have not tried it though.</p>

<p>Unfortunately, the patch was later removed due to a conflict with autoconnect and transations (described <a href=""https://launchpad.net/ubuntu/+source/python-mysqldb"">here</a>).</p>

<p>The comments from that page say:
1.2.2-7 Published in intrepid-release on 2008-06-19 </p>

<p>python-mysqldb (1.2.2-7) unstable; urgency=low</p>

<p>[ Sandro Tosi ]
  * debian/control
    - list items lines in description starts with 2 space, to avoid reformat
      on webpages (Closes: #480341)</p>

<p>[ Bernd Zeimetz ]
  * debian/patches/02_reconnect.dpatch:
    - Dropping patch:
      Comment in Storm which explains the problem:</p>

<pre><code>    # Here is another sad story about bad transactional behavior. MySQL
    # offers a feature to automatically reconnect dropped connections.
    # What sounds like a dream, is actually a nightmare for anyone who
    # is dealing with transactions. When a reconnection happens, the
    # currently running transaction is transparently rolled back, and
    # everything that was being done is lost, without notice. Not only
    # that, but the connection may be put back in AUTOCOMMIT mode, even
    # when that's not the default MySQLdb behavior. The MySQL developers
    # quickly understood that this is a terrible idea, and removed the
    # behavior in MySQL 5.0.3. Unfortunately, Debian and Ubuntu still
    # have a patch right now which *reenables* that behavior by default
    # even past version 5.0.3.
</code></pre>
"
161146,"<p>If you're specifically after parsing links out of web-pages, then Perl's <a href=""http://search.cpan.org/perldoc?WWW::Mechanize"" rel=""nofollow"">WWW::Mechanize</a> module will figure things out for you in a very elegant fashion.  Here's a sample program that grabs the first page of Stack Overflow and parses out all the links, printing their text and corresponding URLs:</p>

<pre><code>#!/usr/bin/perl
use strict;
use warnings;
use WWW::Mechanize;

my $mech = WWW::Mechanize-&gt;new;

$mech-&gt;get(""http://stackoverflow.com/"");

$mech-&gt;success or die ""Oh no! Couldn't fetch stackoverflow.com"";

foreach my $link ($mech-&gt;links) {
    print ""* ["",$link-&gt;text, ""] points to "", $link-&gt;url, ""\n"";
}
</code></pre>

<p>In the main loop, each <code>$link</code> is a <a href=""http://search.cpan.org/perldoc?WWW::Mechanize::Link"" rel=""nofollow"">WWW::Mechanize::Link</a> object, so you're not just constrained to getting the text and URL.</p>

<p>All the best,</p>

<p>Paul</p>
"
283725,"<p>Well, if the file object support the tell method, you can do:</p>

<pre><code>current_size = f.tell()
</code></pre>

<p>That will tell you were it is currently writing. If you write in a sequential way this will be the size of the file.</p>

<p>Otherwise, you can use the file system capabilities, i.e. <code>os.fstat</code> as suggested by others.</p>
"
348079,"<p>Mock the view, hit the page, and see if the mock was called. if it was not, the cache was used instead.</p>
"
184193,"<p>Here's what I came up with:</p>

<pre><code>import os

def CreateNewChangeList(description):
    ""Create a new changelist and returns the changelist number as a string""
    p4in, p4out = os.popen2(""p4 changelist -i"")
    p4in.write(""change: new\n"")
    p4in.write(""description: "" + description)
    p4in.close()
    changelist = p4out.readline().split()[1]
    return changelist

def OpenFileForEdit(file, changelist = """"):
    ""Open a file for edit, if a changelist is passed in then open it in that list""
    cmd = ""p4 edit ""
    if changelist:
        cmd += "" -c "" + changelist + "" ""
    ret = os.popen(cmd + file).readline().strip()
    if not ret.endswith(""opened for edit""):
        print ""Couldn't open"", file, ""for edit:""
        print ret
        raise ValueError
</code></pre>
"
279952,"<p>Either </p>

<p>A) Use <a href=""http://docs.djangoproject.com/en/dev/topics/db/models/#multi-table-inheritance"" rel=""nofollow"">multiple table inheritance</a> and create a ""Eater"" base class, that Cat, Cow and Human inherit from.</p>

<p>B) Use a <a href=""http://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/#id1"" rel=""nofollow"">Generic Relation</a>, where Food could be linked to any other Model.</p>

<p>Those are well-documented and officially supported features, you'd better stick to them to keep your own code clean, avoid workarounds and be sure it'll be still supported in the future.</p>

<p>-- EDIT ( A.k.a. ""how to be a reputation whore"" )</p>

<p>So, here is a recipe for that particular case.</p>

<p>Let's assume you absolutely want separate models for Cat, Cow and Human. In a real-world application, you want to ask to yourself why a ""category"" field wouldn't do the job.</p>

<p>It's easier to get to the ""real"" class through generic relations, so here is the implementation for B. We can't have that 'food' field in Person, Cat or Cow, or we'll run into the same problems. So we'll create an intermediary ""FoodConsumer"" model. We'll have to write additional validation tests if we don't want more than one food for an instance.</p>

<pre><code>from django.db import models
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes import generic

class Food(models.Model):
     """"""Food, by name.""""""
     name = models.CharField(max_length=25)

# ConsumedFood has a foreign key to Food, and a ""eaten_by"" generic relation
class ConsumedFood(models.Model):
    food = models.ForeignKey(Food, related_name=""eaters"")
    content_type = models.ForeignKey(ContentType, null=True)
    object_id = models.PositiveIntegerField(null=True)
    eaten_by = generic.GenericForeignKey('content_type', 'object_id')

class Person(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    birth_date = models.DateField()
    address = models.CharField(max_length=100)
    city = models.CharField(max_length=50)
    foods = generic.GenericRelation(ConsumedFood)

class Cat(models.Model):
    name = models.CharField(max_length=50)
    foods = generic.GenericRelation(ConsumedFood)    

class Cow(models.Model):
    farmer = models.ForeignKey(Person)
    foods = generic.GenericRelation(ConsumedFood)
</code></pre>

<p>Now, to demonstrate it let's just write this working <a href=""http://docs.djangoproject.com/en/dev/topics/testing/#writing-doctests"" rel=""nofollow"">doctest</a>:</p>

<pre><code>""""""
&gt;&gt;&gt; from models import *

Create some food records

&gt;&gt;&gt; weed = Food(name=""weed"")
&gt;&gt;&gt; weed.save()

&gt;&gt;&gt; burger = Food(name=""burger"")
&gt;&gt;&gt; burger.save()

&gt;&gt;&gt; pet_food = Food(name=""Pet food"")
&gt;&gt;&gt; pet_food.save()

John the farmer likes burgers

&gt;&gt;&gt; john = Person(first_name=""John"", last_name=""Farmer"", birth_date=""1960-10-12"")
&gt;&gt;&gt; john.save()
&gt;&gt;&gt; john.foods.create(food=burger)
&lt;ConsumedFood: ConsumedFood object&gt;

Wilma the cow eats weed

&gt;&gt;&gt; wilma = Cow(farmer=john)
&gt;&gt;&gt; wilma.save()
&gt;&gt;&gt; wilma.foods.create(food=weed)
&lt;ConsumedFood: ConsumedFood object&gt;

Felix the cat likes pet food

&gt;&gt;&gt; felix = Cat(name=""felix"")
&gt;&gt;&gt; felix.save()
&gt;&gt;&gt; pet_food.eaters.create(eaten_by=felix)
&lt;ConsumedFood: ConsumedFood object&gt;

What food john likes again ?
&gt;&gt;&gt; john.foods.all()[0].food.name
u'burger'

Who's getting pet food ?
&gt;&gt;&gt; living_thing = pet_food.eaters.all()[0].eaten_by
&gt;&gt;&gt; isinstance(living_thing,Cow)
False
&gt;&gt;&gt; isinstance(living_thing,Cat)
True

John's farm is in fire ! He looses his cow.
&gt;&gt;&gt; wilma.delete()

John is a lot poorer right now
&gt;&gt;&gt; john.foods.clear()
&gt;&gt;&gt; john.foods.create(food=pet_food)
&lt;ConsumedFood: ConsumedFood object&gt;

Who's eating pet food now ?
&gt;&gt;&gt; for consumed_food in pet_food.eaters.all():
...    consumed_food.eaten_by
&lt;Cat: Cat object&gt;
&lt;Person: Person object&gt;

Get the second pet food eater
&gt;&gt;&gt; living_thing = pet_food.eaters.all()[1].eaten_by

Try to find if it's a person and reveal his name
&gt;&gt;&gt; if isinstance(living_thing,Person): living_thing.first_name
u'John'

""""""
</code></pre>
"
100776,"<p>Thanks to @<a href=""#100345"">Pax Diablo</a>, @bvmou and @Arachnid for the suggestion of using full datetimes throughout.  If I have to accept datetime.time objects from an external source, then this seems to be an alternative <code>add_secs_to_time()</code> function:</p>

<pre><code>def add_secs_to_time(timeval, secs_to_add):
    dummy_date = datetime.date(1, 1, 1)
    full_datetime = datetime.datetime.combine(dummy_date, timeval)
    added_datetime = full_datetime + datetime.timedelta(seconds=secs_to_add)
    return added_datetime.time()
</code></pre>

<p>This verbose code can be compressed to this one-liner:</p>

<pre><code>(datetime.datetime.combine(datetime.date(1, 1, 1), timeval) + datetime.timedelta(seconds=secs_to_add)).time()
</code></pre>

<p>but I think I'd want to wrap that up in a function for code clarity anyway.</p>
"
4572,"<p>If you're simply displaying data from models, why not use the <a href=""https://docs.djangoproject.com/en/1.2/ref/generic-views/"" rel=""nofollow"">Django Generic Views</a>? They're designed to let you easy show data from a model without having to write your own view and stuff about mapping URL paramaters to views, fetching data, handling edge cases, rendering output, etc.</p>
"
348317,"<p>I see four things that can justify an investment of time in using Plone:</p>

<ul>
<li>Plone has a large and helpful community. Most of the things you need, somebody else<br />
already did at some time in the past. He probably asked some questions and got helpful 
answers, or he wrote a tutorial. Usually that leaves traces easy to find.
about how he did it.</li>
<li>You won't need to understand the whole complexity for many of your customizing needs.</li>
<li>Plone developers are aware of their complex stack, and are discussing how this can be
reduced. Plone has proven in the past that it is able to renew itself and drop old
infrastructure in a clean way with defined deprecation phases.</li>
<li>There are many local user groups with helpful people.</li>
</ul>

<p>Oh wait, I was told the plone developer meetings are one of the best!
<a href=""http://plone.org/events/conferences/vienna-2004"" rel=""nofollow"">Like that one</a></p>
"
283854,"<p>As mentioned by <a href=""http://stackoverflow.com/questions/283766/pickled-file-wont-load-on-maclinux#283802"">Adam</a>, the problem is likely to be the newline format of the pickle file.</p>

<p>Unfortunately, the real problem is actually caused on <em>save</em> rather than load.  This may be recoverable if you're using text mode pickles, rather than binary.  Try opening the file in universal newline mode, which will cause python to guess what the right line-endings are  ie:</p>

<pre><code>char_file=open('filename.char','rU')
</code></pre>

<p>However, if you're using a binary format (cPickle.dump(file, 1)) you may have an unrecoverably corrupted pickle (even when loading in Windows) - if you're lucky and no \r\n characters show up then it may work, but as soon as this occurs you could end up with corrupted data, as there's no way to distinguish between a ""real"" \r\n code and one windows has inserted on seeing just \n.</p>

<p>The best way to handle things to be loaded in multiple platforms is to always save in binary mode.  On your windows machine, when saving the pickle use:</p>

<pre><code>char_file = open('filename.char','wb')
cPickle.dumps(data, char_file)
</code></pre>
"
102633,"<p>Basically avoiding call-back functions when iterating over input maintaining state.</p>

<p>See <a href=""http://www.python.org/dev/peps/pep-0255/"">here</a> and <a href=""http://www.dabeaz.com/generators/index.html"">here</a> for an overview of what can be done using generators.</p>
"
185692,"<p>There is an inconsistency in your specification. You say Database.py needs to import all Model classes to do ORM but then you say the User class need access to the Database to do queries.</p>

<p>Think of these as layers of an API. The Database class provides an API (maybe object-oriented) to some physical persistence layer (such as DB-API 2.0). The Model classes, like User, use the Database layer to load and save their state. There is no reason for the Database.py class to import all the Model classes, and in fact you wouldn't want that because you'd have to modify Database.py each time you created a new Model class - which is a code smell.</p>
"
103908,"<p>Try that:</p>

<pre><code>li=[[0,1,2],[3,4,5],[6,7,8]]
li2 = [ y for x in li for y in x]
</code></pre>

<p>You can read it like this:<br>
Give me the list of every ys.<br>
The ys come from the xs.<br>
The xs come from li.</p>

<p>To map that in a string:</p>

<pre><code>','.join(map(str,li2))
</code></pre>
"
105175,"<p>This post describes the GIL at a fairly high-level:</p>

<ul>
<li><a href=""https://web.archive.org/web/20080516010343/http://www.pyzine.com/Issue001/Section_Articles/article_ThreadingGlobalInterpreter.html"" rel=""nofollow"">https://web.archive.org/web/20080516010343/http://www.pyzine.com/Issue001/Section_Articles/article_ThreadingGlobalInterpreter.html</a></li>
</ul>

<p>Of particular interest are these quotes:</p>

<blockquote>
  <p>Every ten instructions (this default
  can be changed), the core releases the
  GIL for the current thread. At that
  point, the OS chooses a thread from
  all the threads competing for the lock
  (possibly choosing the same thread
  that just released the GIL â you don't
  have any control over which thread
  gets chosen); that thread acquires the
  GIL and then runs for another ten
  bytecodes.</p>
</blockquote>

<p>and </p>

<blockquote>
  <p>Note carefully that the GIL only
  restricts pure Python code. Extensions
  (external Python libraries usually
  written in C) can be written that
  release the lock, which then allows
  the Python interpreter to run
  separately from the extension until
  the extension reacquires the lock.</p>
</blockquote>

<p>It sounds like the GIL just provides fewer possible instances for a context switch, and makes multi-core/processor systems behave as a single core, with respect to each python interpreter instance, so yes, you still need to use synchronization mechanisms.</p>
"
284706,"<p>I think I might have been overthinking this. One way I've come up with that does the job, is simply to have a global variable, that accumulates the diagnostic data.</p>

<p>Somthing like this:</p>

<pre><code>log1 = dict()
class TestBar(unittest.TestCase):
    def runTest(self):
        for t1, t2 in testdata:
            f = Foo(t1) 
            if f.bar(t2) != 2: 
                log1(""TestBar.runTest"") = (f, t1, t2)
                self.fail(""f.bar(t2) != 2"")
</code></pre>

<p>Thanks for the resplies. They have given me some alternative ideas for how to record information from unit tests.              </p>
"
160920,"<p>I've never heard that term, but one explanation could be the ""default parameter"" hack used to assign a value directly to a lambda's parameter. Using Swati's example:</p>

<pre><code>def foo(x): 
    a = lambda x=x: x 
    x = 7 
    b = lambda: x 
    return a,b

aa, bb = foo(4)
aa() # Prints 4
bb() # Prints 7
</code></pre>
"
210474,"<p>Adding to previous answers: check the <a href=""http://www.noah.org/wiki/Pexpect"">pexpect</a> module for dealing with interactive commands (adduser, passwd etc.)</p>
"
95825,"<p>I was quite surprised to learn that you could use the bisect module to do a very fast binary search in a sequence. It's documentation doesn't say anything about it:</p>

<blockquote>
  <p>This module provides support for maintaining a list in sorted order without having to sort the list after each insertion.</p>
</blockquote>

<p>The usage is very simple:</p>

<pre><code>&gt;&gt;&gt; import bisect
&gt;&gt;&gt; lst = [4, 7, 10, 23, 25, 100, 103, 201, 333]
&gt;&gt;&gt; bisect.bisect_left(lst, 23)
3
</code></pre>

<p>You have to remember though, that it's quicker to linearly look for something in a list goes item by item, than sorting the list and then doing a binary search on it. The first option is O(n), the second is O(nlogn).</p>
"
185388,"<pre><code>/^Run.*\.py$/
</code></pre>

<p>Or, in python specifically:</p>

<pre><code>import re
re.match(r""^Run.*\.py$"", stringtocheck)
</code></pre>

<p>This will match ""Runfoobar.py"", but not ""runfoobar.PY"". To make it case insensitive, instead use:</p>

<pre><code>re.match(r""^Run.*\.py$"", stringtocheck, re.I)
</code></pre>
"
276838,"<p>Django's template language is deliberately hobbled. When used by non-programming designers, this is definitely a Good Thing, but there are times when you <em>need</em> to do a little programming. (No, I don't want to argue about that. This has come up several times on django-users and django-dev.)</p>

<p>Two ways to accomplish what you were trying:</p>

<ul>
<li>Use a different template engine. See <a href=""http://jinja.pocoo.org/2/"">Jinja2</a> for a good example that is fully explained for integrating with Django.</li>
<li>Use a template tag that permits you to do Python expressions. See <a href=""http://www.djangosnippets.org/snippets/9/"">limodou's Expr tag</a>.</li>
</ul>

<p>I have used the expr tag in several places and it has made life <em>much</em> easier. My next major Django site will use jinja2.</p>
"
106780,"<p>You have two levels of testing.</p>

<ol>
<li><p>Filtering and Modifying content.  These are ""low-level"" operations that don't really require physical file I/O.  These are the tests, decision-making, alternatives, etc.  The ""Logic"" of the application.</p></li>
<li><p>File system operations.  Create, copy, rename, delete, backup.  Sorry, but those are proper file system operations that -- well -- require a proper file system for testing.</p></li>
</ol>

<p>For this kind of testing, we often use a ""Mock"" object.  You can design a ""FileSystemOperations"" class that embodies the various file system operations.  You test this to be sure it does basic read, write, copy, rename, etc.  There's no real logic in this.  Just methods that invoke file system operations.</p>

<p>You can then create a MockFileSystem which dummies out the various operations.  You can use this Mock object to test your other classes.</p>

<p>In some cases, all of your file system operations are in the os module.  If that's the case, you can create a MockOS module with mock version of the operations you actually use.</p>

<p>Put your MockOS module on the <code>PYTHONPATH</code> and you can conceal the real OS module.</p>

<p>For production operations you use your well-tested ""Logic"" classes plus your FileSystemOperations class (or the real OS module.)</p>
"
171304,"<p>From all appearances, Python IS a shell.  It runs with <code>#!</code> and it can run interactively.  Between the <code>os</code> and <code>shutil</code> packages you have all of the features of standard Unix shells.</p>

<p>Since you can do anything in Python with simple, powerful scripts, you don't really need to spend any time messing with the other shells.</p>
"
200627,"<p>I don't tackle the question which one is best. If you want to handle text-files, I'd consider <a href=""http://www.python.org/doc/2.5.2/lib/module-ConfigParser.html"">ConfigParser -module</a>. Another you could give a try would be <a href=""http://undefined.org/python/"">simplejson</a> or <a href=""http://www.yaml.org/"">yaml</a>. You could also consider a real db table.</p>

<p>For instance, you could have a table called userattrs, with three columns:</p>

<ul>
<li>Int user_id</li>
<li>String attribute_name</li>
<li>String attribute_value</li>
</ul>

<p>If there's only few, you could store them into cookies for quick retrieval.</p>
"
58168,"<p>Unlike Java, where there are exceptions that must be declared to be raised (and some that don't have to be, but that's another story), any Python code may raise any exception at any time.</p>

<p>There are a list of <a href=""http://docs.python.org/lib/module-exceptions.html"">built-in exceptions</a>, which generally has some description of when these exceptions might be raised.  Its up to you as to how much exception handling you will do, and if you will handle stuff gracefully, or just fail with a traceback.</p>
"
313181,"<p>I got three quality answers, and I thank you all (and upvoted you all) for them. I haven't chosen any as the accepted answer, because each addressed one aspect, so I wanted to write a summary.</p>

<p><strong>Do you need to work in MP3?</strong></p>

<ul>
<li><p>Transcoding to PCM and back to MP3 is unlikely to result in a drop in quality. </p></li>
<li><p>Don't optimise audio-quality prematurely; test it with a simple prototype and listen to it.</p></li>
</ul>

<p><strong>Working in MP3</strong></p>

<ul>
<li><p>Wikipedia has a summary of the <a href=""http://en.wikipedia.org/wiki/MP3"">MP3 File Format</a>.</p></li>
<li><p>MP3 frames are short (1152 samples, or just a few milliseconds) allowing for moderate precision at that level.</p></li>
<li><p>However, <a href=""http://en.wikipedia.org/wiki/MP3"">Wikipedia</a> warns that ""Frames are not independent items (""byte reservoir"") and therefore cannot be extracted on arbitrary frame boundaries.""</p></li>
<li><p>Existing libraries are unlikely to be of assistance, if I really want to avoid decoding.</p></li>
</ul>

<p><strong>Working in PCM</strong></p>

<p>There are several libraries at this level:</p>

<ul>
<li><a href=""http://pymedia.org/"">PyMedia</a></li>
<li><a href=""http://lame.sourceforge.net/"">LAME</a></li>
<li><a href=""http://spacepants.org/src/pymad/"">PyMad</a> (Linux only? Decoder only?)</li>
</ul>

<p><strong>Working at a higher level</strong></p>

<ul>
<li><p><a href=""http://code.google.com/p/echo-nest-remix/"">Echo Nest Remix API</a>  (Mac or Linux only, at the moment) is an API to a web-service that supports quite sophisticated operations (e.g. finding the locations of music beats and tempo, etc.)</p></li>
<li><p><a href=""http://mpesch3.de1.cc/mp3dc.html#dwn"">mp3DirectCut</a> (Windows only) is a GUI that apparently performs the operations I want, but as an app. It is not open-source. (I tried to run it, got an Access Denied installer error, and didn't follow up. A GUI isn't suitably for me, as I want to repeatedly run these operations on a changing library of files.) </p></li>
</ul>

<p>My plan is now to start out in PyMedia, using PCM. Thank you all for your assistance.</p>
"
313665,"<p>No need for anything fancy. Just use nextset:</p>

<pre><code>
import pyodbc

db = pyodbc.connect ("""")
q = db.cursor ()
q.execute (""""""
SELECT TOP 5 * FROM INFORMATION_SCHEMA.TABLES
SELECT TOP 10 * FROM INFORMATION_SCHEMA.COLUMNS
"""""")
tables = q.fetchall ()
q.nextset ()
columns = q.fetchall ()

assert len (tables) == 5
assert len (columns) == 10

</code></pre>
"
243909,"<p>You can use <code>zip</code> as well as <code>itertools.chain</code>. This will <b>only work</b> if the first list is <b>finite</b>:</p>

<pre><code>merge=itertools.chain(*[iter(i) for i in zip(['foo', 'bar'], itertools.count(1))])
</code></pre>
"
163905,"<p>Here is a list of <a href=""http://wiki.python.org/moin/GuiProgramming"">Python GUI Toolkits</a>.</p>

<p>Also, you can <a href=""http://stevegilham.blogspot.com/2007/07/hello-wpf-in-ironpython.html"">use IronPython to work with WPF directly</a>. </p>
"
211506,"<p>Well, usually hash-functions (and cryptographic functions generally) work on bytes. The Python strings are basically byte-strings. If you want to compute the hash of some object you have to convert it to a string representation. Just make sure to apply the same operation later if you want to check if the hash is correct. And make sure that your string representation doesn't contain any changing data that you don't want to be checked.</p>

<p>Edit: Due to popular request a short reminder that Python unicode strings don't contain bytes but unicode code points. Each unicode code point contains <em>multiple</em> bytes (2 or 4, depending on how the Python interpreter was compiled). Python strings only contain bytes. So Python strings (type <em>str</em>) are the type most similar to an array of bytes.</p>
"
5927,"<p>The size of the file is sent as the Content-Length header. Here is how to get it with urllib:</p>

<pre><code>&gt;&gt;&gt; site = urllib.urlopen(""http://python.org"")<br>&gt;&gt;&gt; meta = site.info()<br>&gt;&gt;&gt; print meta.getheaders(""Content-Length"")<br>['16535']<br>&gt;&gt;&gt;<br></code></pre>"
188620,"<p>I'd look into <a href=""http://www.codeplex.com/Wiki/View.aspx?ProjectName=IronPython"">IronPython</a> which intrinsically has access to windows/office APIs because it runs on .NET runtime.</p>
"
183533,"<p>Yes, this is a good strategy for readable but unique filenames.</p>

<p><strong>One important change</strong>: You should replace <code>os.path.isfile</code> with <code>os.path.lexists</code>!  As it is written right now, if there is a directory named /foo/bar.baz, your program will try to overwrite that with the new file (which won't work)... since <code>isfile</code> only checks for files and not directories.  <code>lexists</code> checks for directories, symlinks, etc... basically if there's any reason that filename could not be created.</p>

<p>EDIT: @Brian gave a better answer, which is more secure and robust in terms of race conditions.</p>
"
277191,"<p>As far as I know there is nothing out there that offers the sort of whiz-bang features that the Mono guys have implemented in their new shell, but that is not to say that the ""basic"" python interactive shell isn't a feature-complete and powerful application.  I could see something like the C# shell being developed at some point, but I think as of today those features you're pointing to are reasonably unique.  One might argue that this is because nobody thought of them or, alternatively, because nobody has really had a need for them.  I tend to subscribe to the latter, although I suppose both are plausible.</p>
"
276289,"<p>The <code>resource</code> module provides <a href=""http://www.python.org/doc/2.5.2/lib/node522.html""><code>getrusage</code></a> which can give you the information you need, at least for Unix-like platforms.</p>

<p>Note that CPU usage as a percentage is always measured over a time interval. Essentially, it is the amount of time taken by your program doing something divided by the interval time.</p>

<p>For example, if your application takes 2 seconds of CPU time over a 5 second period, then it can be said to be using 40% of the CPU.</p>

<p>Note that this calculation, as simple as it seems, can get tricky when using a multiprocessor system. If your application uses 7 seconds of CPU time in 5 seconds of wall clock time on a two-processor system, do you say it is uses 140% or 70% CPU?</p>

<p>Update: As <a href=""http://stackoverflow.com/questions/276281/cpu-usage-per-process-in-python#276295"">gimel</a> mentions, the <code>os.times</code> function also provides this information in a platform-independent way. The above calculation notes still apply, of course.</p>
"
182242,"<p>Check <a href=""http://stackoverflow.com/questions/62832/reading-data-from-a-log-file-as-a-separate-application-is-writing-to-it#63446"">my answer</a> to a <a href=""http://stackoverflow.com/questions/62832/"">similar question</a>. You could try the same loop in Python. <a href=""http://code.activestate.com/recipes/157035/"">This page</a> suggests:</p>

<pre><code>import time

while 1:
    where = file.tell()
    line = file.readline()
    if not line:
        time.sleep(1)
        file.seek(where)
    else:
        print line, # already has newline
</code></pre>

<p>Also see the question <a href=""http://stackoverflow.com/questions/136168/tail-a-file-with-python"">tail() a file with Python</a>.</p>
"
138539,"<p>This might seem reasonable at first glance, however there are a lot of ordinary things in Python that aren't directly mappable to to a C representation without carrying over a lot of the Python runtime support. For example, duck typing comes to mind. Many functions in Python that read input can take a file <em>or file-like</em> object, as long as it supports certain operations, eg. read() or readline(). If you think about what it would take to map this type of support to C, you begin to imagine exactly the sorts of things that the Python runtime system already does.</p>

<p>There are utilities such as <a href=""http://www.py2exe.org/"">py2exe</a> that will bundle a Python program and runtime into a single executable (as far as possible).</p>
"
236718,"<p><strong>Incompatible changes to the signature of a method.</strong> This doesn't happen as much in Python as it does in Java and C++.  </p>

<p>Python has optional arguments, default values, and far more flexibility in defining method signatures.  Also, duck typing means that -- for example -- you don't have to switch from some class to an interface as part of a significant software change.  Things just aren't as complex.</p>

<p><strong>How do you find all the places where that method is being called?</strong>   grep works for dynamic languages.  If you need to know every place a method is used, grep (or equivalent IDE-supported search) works great.  </p>

<p><strong>How do you find out what operations an instance provides, since you don't have a static type to lookup?</strong></p>

<p>a.  Look at the source.  You don't have the Java/C++ problem of object libraries and jar files to contend with.  You don't need all the elaborate aids and tools that those languages require.</p>

<p>b.  An IDE can provide signature information under many common circumstances.  You can, easily, defeat your IDE's reasoning powers.  When that happens, you should probably review what you're doing to be sure it makes sense.  If your IDE can't reason out your type information, perhaps it's too dynamic.</p>

<p>c.  In Python, you often work through the interactive interpreter.  Unlike Java and C++, you can explore your instances directly and interactively.  You don't need a sophisticated IDE.</p>

<p>Example:</p>

<pre><code>  &gt;&gt;&gt; x= SomeClass()
  &gt;&gt;&gt; dir(x)
</code></pre>

<p><strong>How do you handle/prevent typing errors?</strong>  Same as static languages: you don't prevent them.  You find and correct them.  Java can only find a certain class of typos.  If you have two similar class or variable names, you can wind up in deep trouble, even with static type checking.</p>

<p>Example:</p>

<pre><code>class MyClass { }
class MyClassx extends MyClass { }
</code></pre>

<p>A typo with these two class names can cause havoc.  [""But I wouldn't put myself in that position with Java,"" folks say.  Agreed.  I wouldn't put myself in that position with Python, either; you make classes that are profoundly different, and will fail early if they're misused.]</p>

<p><strong>Are UnitTest's used as a substitute for static type checking?</strong>  Here's the other Point of view: static type checking is a substitute for clear, simple design.  </p>

<p>I've worked with programmers who weren't sure why an application worked.  They couldn't figure out why things didn't compile; the didn't know the difference between abstract superclass and interface, and the couldn't figure out why a change in place makes a bunch of other modules in a separate JAR file crash.   The static type checking gave them false confidence in a flawed design.</p>

<p>Dynamic languages allow programs to be simple.  Simplicity is a substitute for static type checking.  Clarity is a substitute for static type checking.</p>
"
199215,"<p>Perhaps shorter:</p>

<pre><code>&gt;&gt;&gt; re.sub(r""\B([A-Z])"", r"" \1"", ""DoIThinkThisIsABetterAnswer?"")
</code></pre>
"
199593,"<p>Using an automated tool to ""port"" the web application will almost certainly guarantee that future programming efficiency will be minimised -- not improved.</p>

<p>A good scripting language can help programming efficiency when used by good programmers who understand good coding practices in that language.  Automated tools are usually not designed to output code that is elegent or well-written, only code that works.</p>

<p>You'll only get an improvement in programming efficiency after you've put in the effort to re-implement the web app -- which, due to the time required for the reimplementation, may or may not result in an improvement overall.</p>
"
61322,"<p>I would say that threading for something this simple is overkill.  You're better off using some form of asynchronous programming.</p>

<p>Here is an example using <a href=""http://twistedmatrix.com/"">Twisted</a>:</p>

<pre><code>from twisted.internet import reactor
from twisted.web import resource, server

class MyResource(resource.Resource):
    isLeaf = True
    def render_GET(self, request):
        return 'gotten'

site = server.Site(MyResource())

reactor.listenTCP(8000, site)
reactor.listenTCP(8001, site)
reactor.run()
</code></pre>

<p>I also thinks it looks a lot cleaner to have each port be handled in the same way, instead of having the main thread handle one port and an additional thread handle the other.  Arguably that can be fixed in the thread example, but then you're using three threads.</p>
"
212187,"<p>If you insist on not having to define a class, you can abuse some existing classes. Most objects belong to ""new-style"" classes which don't have a dict, but functions can have arbitrary attributes:</p>

<pre><code>&gt;&gt;&gt; x = lambda: 0   # any function will do
&gt;&gt;&gt; x.foo = 'bar'
&gt;&gt;&gt; x.bar = 0
&gt;&gt;&gt; x.xyzzy = x
&gt;&gt;&gt; x.foo
'bar'
&gt;&gt;&gt; x.bar
0
&gt;&gt;&gt; x.xyzzy
&lt;function &lt;lambda&gt; at 0x6cf30&gt;
</code></pre>

<p>One problem is that functions already have some attributes, so dir(x) is a little messy:</p>

<pre><code>&gt;&gt;&gt; dir(x)
['__call__', '__class__', '__delattr__', '__dict__', '__doc__',
'__get__', '__getattribute__', '__hash__', '__init__',
'__module__', '__name__', '__new__', '__reduce__',
'__reduce_ex__', '__repr__', '__setattr__', '__str__', 'foo',
'func_closure', 'func_code', 'func_defaults', 'func_dict',
'func_doc', 'func_globals', 'func_name', 'xyzzy']
</code></pre>
"
37502,"<p>While I agree with Lucas that regular expressions are not all that scary, I still think that you should go with a specialized HTML parser. This is because the HTML standard is hairy enough (especially if you want to parse arbitrarily ""HTML"" pages taken off the Internet) that you would need to write a lot of code to handle the corner cases. It seems that <a href=""http://docs.python.org/lib/module-htmllib.html"" rel=""nofollow"">python includes one out of the box</a>. </p>

<p>You should also check out the <a href=""http://utidylib.berlios.de/"" rel=""nofollow"">python bindings for TidyLib</a> which can clean up broken HTML, making the success rate of any HTML parsing much higher.</p>
"
93069,"<p>The thread will block, but the process is still alive.</p>

<p>In a single threaded application, this means everything is blocked while you sleep.  In a multithreaded application, only the thread you explicitly 'sleep' will block and the other threads still run within the process.</p>
"
285959,"<p>Here's a code example, showing getting the attributes and contents of the links:</p>

<pre><code>soup = BeautifulSoup.BeautifulSoup(urllib.urlopen(url))
for link in soup.findAll('a'):
    print link.attrs, link.contents
</code></pre>
"
286094,"<p><a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">BeautifulSoup</a> is a good Python library for dealing with messy HTML in clean ways.</p>
"
109207,"<p>Suggest</p>

<pre><code>&gt;&gt;&gt; print vars.__doc__
vars([object]) -&gt; dictionary

Without arguments, equivalent to locals().
With an argument, equivalent to object.__dict__.
</code></pre>

<p>In otherwords, it essentially just wraps __dict__ </p>
"
346907,"<p>Python is excellent for UnitTesting C# code.  Our app is 75% in Python and 25% C#(Python.Net), and our unit tests are 100% python.  </p>

<p>I find that it's much easier to make use of stubs and mocks in Python which is probably one of the most critical components that enable one to write effective unittests.</p>
"
56008,"<p>IDLE provides Emacs keybindings without having to install other software. </p>

<ol>
<li>Open up the menu item Options -> Configure IDLE...</li>
<li>Go to Keys tab</li>
<li>In the drop down menu on the right
side of the dialog change the select
to ""IDLE Classic Unix""</li>
</ol>

<p>It's not the true emacs key bindings but you get the basics like movement, saving/opening, ...</p>
"
139393,"<p><strong>Addressing ""tuple"" part of the question</strong></p>

<p>Declaration of CPython's PyTuple in a typical build configuration boils down to this:</p>

<pre><code>struct PyTuple {
  size_t refcount; // tuple's reference count
  typeobject *type; // tuple type object
  size_t n_items; // number of items in tuple
  PyObject *items[1]; // contains space for n_items elements
};
</code></pre>

<p>Size of PyTuple instance is fixed during it's construction and cannot be changed afterwards. The number of bytes occupied by PyTuple can be calculated as</p>

<blockquote>
  <p><code>sizeof(size_t) x 2 + sizeof(void*) x (n_items + 1)</code>.</p>
</blockquote>

<p>This gives <em>shallow</em> size of tuple. To get <em>full</em> size you also need to add total number of bytes consumed by object graph rooted in <code>PyTuple::items[]</code> array. </p>

<p>It's worth noting that tuple construction routines make sure that only single instance of empty tuple is ever created (singleton).</p>

<p>References:
<a href=""http://svn.python.org/view/python/tags/r252/Include/Python.h?rev=60915&amp;view=markup"">Python.h</a>,
<a href=""http://svn.python.org/view/python/tags/r252/Include/object.h?rev=60915&amp;view=markup"">object.h</a>,
<a href=""http://svn.python.org/view/python/tags/r252/Include/tupleobject.h?rev=60915&amp;view=markup"">tupleobject.h</a>,
<a href=""http://svn.python.org/view/python/tags/r252/Objects/tupleobject.c?rev=60915&amp;view=markup"">tupleobject.c</a></p>
"
311680,"<p><strong>You should not use a list comprehension for that</strong>.</p>

<p>List comprehensions are an awesome feature, but they are meant to be shortcuts, not regular code.</p>

<p>For such a long snippet, you should use ordinary blocs :</p>

<pre><code>allUuids = []
for x in self.db.query(schema.allPostsUuid).execute(timeout = 20) :
    if x.type == ""post"" and x.deleted is not False :
        allUuids.append(x.id)
</code></pre>

<p>Exactly the same behavior, much more readable. Guido would be proud of you :-)</p>
"
60852,"<p>You can't do this with the base dict class -- it's ordered by hash.  You could build your own dictionary that is really a list of key,value pairs or somesuch, which would be ordered.</p>
"
199126,"<p>Have a look at my answer on <em><a href=""http://stackoverflow.com/questions/155303/net-how-can-you-split-a-caps-delimited-string-into-an-array#155487"">.NET - How can you split a âcapsâ delimited string into an array?</a></em></p>

<p><strong>Edit:</strong> Maybe better to include it here.</p>

<pre><code>re.sub(r'([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))', r'\1 ', text)
</code></pre>

<p>For example:</p>

<pre><code>""SimpleHTTPServer"" =&gt; [""Simple"", ""HTTP"", ""Server""]
</code></pre>
"
314834,"<p>My answer is identical to Matthew Trevor's, except for one difference:</p>

<pre><code>&gt;&gt;&gt; mysets = (set(x.items()) for x in MyList)
&gt;&gt;&gt; reduce(set.intersection, mysets)
set([('sum', '-21,90'), ('type', 'Purchase'), ('target', 'Apple Store')])
</code></pre>

<p>Here I use <code>set.intersection</code> instead of creating a new lambda. In my opinion this is more readable, as this intuitively reads as ""reduce is reducing this list using the set intersection operator."" This should also be much faster, as <code>set.intersection</code> is a built-in C function.</p>

<p>To fully answer your question, you can extract the values using a list comprehension:</p>

<pre><code>&gt;&gt;&gt; mysets = (set(x.items()) for x in MyList)
&gt;&gt;&gt; result = reduce(set.intersection, mysets)
&gt;&gt;&gt; values = [r[1] for r in result]
&gt;&gt;&gt; values
['-21,90', 'Purchase', 'Apple Store']
</code></pre>

<p>This would end up on one line for me. but that's entirely up to you:</p>

<pre><code>&gt;&gt;&gt; [r[1] for r in reduce(set.intersection, (set(x.items()) for x in myList))]
['-21,90', 'Purchase', 'Apple Store']
</code></pre>
"
237443,"<p>Or just use the ""safe"" filter in your template.</p>

<p>Also, I cannot stress enough how important it is to be familiar with Django's documentation; many common questions like this have easy-to-find answers and explanations (<a href=""http://docs.djangoproject.com/en/dev/topics/templates/#id2"">like this one</a>), and reading through the docs and getting a feel for how everything works will drastically decrease the amount of time you need to spend ask ""why did it do that"" and increase the amount of time you spend building things that work the way you want.</p>
"
214495,"<p><a href=""http://twistedmatrix.com/"" rel=""nofollow"">Twisted</a> can serve as such a web server.  While not multithreaded itself, there is a (not yet released) multithreaded WSGI container present in the current trunk.  You can check out the SVN repository and then run:</p>

<pre><code>twistd web --wsgi=your.wsgi.application
</code></pre>
"
328969,"<p>PyParsing does a great job.  Paul McGuire has several scrips that are easy to adopt for various uses on the pyparsing wiki. (<a href=""http://pyparsing.wikispaces.com/Examples"">http://pyparsing.wikispaces.com/Examples</a>) One reason for investing a little time with pyparsing is that he has also written a very brief very well organized O'Reilly Short Cut manual that is also inexpensive.</p>

<p>Having said that, I use BeautifulSOup a lot and it is not that hard to deal with the entitites issues, you can convert them before you run BeautifulSoup.  </p>

<p>Goodluck   </p>
"
91325,"<p>One of the great things about this question (and Python in general) is that you can just mess around in the interpreter! <a href=""http://www.python.org/download/releases/3.0/"">Python 3.0 rc1 is currently available for download</a>.</p>

<pre><code>&gt;&gt;&gt; import urllib.request
&gt;&gt;&gt; fh = urllib.request.urlopen('http://www.python.org/')
&gt;&gt;&gt; print(type(fh.read(100)))
&lt;class 'bytes'&gt;
</code></pre>
"
287114,"<p>I suggest <a href=""http://www.riverbankcomputing.co.uk/software/sip/intro"">SIP</a>. SIP is better than SWIG due to the following reasons:</p>

<ol>
<li><p>For a given set of files, swig generates more duplicate (overhead) code than SIP. SIP manages to generate less duplicate (overhead) code by using a library file which can be statically or dynamically linked. In other words SIP has better scalability.</p></li>
<li><p>Execution time of SIP is much less than that of SWIG. Refer <a href=""http://people.web.psi.ch/geus/talks/europython2004_geus.pdf"">Python Wrapper Tools: A Performance Study</a>. Unfortunately link appears broken. I have a personal copy which can be shared on request.</p></li>
</ol>
"
275426,"<p>Done some research with my friend and found out this is a platform-specific issue. We suspect that on some platforms malloc mmaps memory without PROT_EXEC and on others it does.</p>

<p>Therefore it is necessary to change the protection level with mprotect afterwards.</p>

<p>Lame thing, took a while to find out what to do.</p>

<pre><code>from ctypes import (
    cast, CFUNCTYPE, c_long, sizeof, addressof, create_string_buffer, pythonapi
)

PROT_NONE, PROT_READ, PROT_WRITE, PROT_EXEC = 0, 1, 2, 4
mprotect = pythonapi.mprotect

buffer = ''.join(map(chr, [ #0000000000000000 &lt;add&gt;:
    0x55,                     # push   %rbp
    0x48, 0x89, 0xe5,         # mov    %rsp,%rbp
    0x48, 0x89, 0x7d, 0xf8,   # mov    %rdi,-0x8(%rbp)
    0x48, 0x8b, 0x45, 0xf8,   # mov    -0x8(%rbp),%rax
    0x48, 0x83, 0xc0, 0x0a,   # add    $0xa,%rax
    0xc9,                     # leaveq 
    0xc3,                     # retq
]))

pagesize = pythonapi.getpagesize()
cbuffer = create_string_buffer(buffer)#c_char_p(buffer)
addr = addressof(cbuffer)
size = sizeof(cbuffer)
mask = pagesize - 1
if mprotect(~mask&amp;addr, mask&amp;addr + size, PROT_READ|PROT_WRITE|PROT_EXEC) &lt; 0:
    print ""mprotect failed?""
else:
    fptr = cast(cbuffer, CFUNCTYPE(c_long, c_long))
    print repr(fptr(1234))
</code></pre>
"
108852,"<p>Both answers give the same result, but if my reading of the question is correct give the wrong answer to a simple alteration to the given graph - if you add a dependency on 'c' from 'b' (which doesn't introduce a cycle as the graph is directed) the output is: <code>
a
c
d
e
g
f
b
d
e
g
f
</code></p>

<p>which isn't totally helpful. Try this small variation, which keeps track of which nodes of the graph have already been visited:</p>

<pre><code>def get_all(D, k, seen=None):
    if not seen:
        seen = set( )
    if k not in seen:
        seen.add(k)
        yield k
        for ii in D.get(k, []):
            for jj in get_all(D, ii, seen):
                yield jj
</code></pre>
"
273620,"<pre><code>keepLooping = True
while keepLooping:
  # do stuff here

  # Prompt the user to continue
  q = raw_input(""Keep looping? [yn]: "")
  if not q.startswith(""y""):
    keepLooping = False
</code></pre>
"
317385,"<p>The <code>%%</code> becomes a single <code>%</code>.  This code is essentially doing two levels of string formatting.  First the <code>%sourcedest</code> is executed to turn your code essentially into:</p>

<pre><code>cursor.execute('INSERT INTO mastertickets (BLAH, FOO) VALUES (%s, %s)', (self.tkt.id, n))
</code></pre>

<p>then the db layer applies the parameters to the slots that are left.</p>

<p>The double-% is needed to get the db's slots passed through the first string formatting operation safely.</p>
"
317583,"<p>The inet_aton returns a string of bytes.  This used to be the <em>lingua franca</em> for C-language interfaces.</p>

<p>Here's how to unpack those bytes into a more useful value.</p>

<pre><code>&gt;&gt;&gt; import socket
&gt;&gt;&gt; packed_n= socket.inet_aton(""128.0.0.1"")
&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.unpack( ""!L"", packed_n )
(2147483649L,)
&gt;&gt;&gt; hex(_[0])
'0x80000001L'
</code></pre>

<p>This unpacked value can be used with ctypes.  The hex thing is just to show you that the unpacked value looks a lot like an IP address.</p>
"
320192,"<p>It is probably a Space character encoded in <a href=""http://en.wikipedia.org/wiki/Quoted-printable"">quoted-printable</a></p>
"
313105,"<p>You want an <a href=""http://docs.djangoproject.com/en/dev/topics/db/models/#id5"" rel=""nofollow"">Abstract base class</a> (""virtual"" doesn't mean anything in Python.)</p>

<p>From the documentation:</p>

<pre><code>class CommonInfo(models.Model):
    name = models.CharField(max_length=100)
    age = models.PositiveIntegerField()

    class Meta:
        abstract = True
</code></pre>

<p><hr /></p>

<p>Edit</p>

<p>""In OO programming when you call object.method() you're supposed to get the lowest-subclass's implementation.""</p>

<p>True.  But not the whole story.</p>

<p>This is not a OO issue.  Or even a Python or Django issue.  This is an ORM issue.</p>

<p>The question is ""What object is reconstructed at the end of the FK reference?""  And the answer is that there's no standard, obvious answer of how to handle the transformation from FK value to object.  </p>

<p>I've got a row in <code>AnimalHome</code> with an <code>animals</code> value of 42.  It refers to <code>Animal.objects.get(pk=42)</code>.  Which subclass of Animal?  Cat?  Dog?  How does the ORM layer know if it should do <code>Dog.objects.get(pk=42)</code> or <code>Cat.objects.get(pk=42)</code>?</p>

<p>""But wait,"" you say.  ""It should fetch the Animal object, not a Dog or Cat object.""  You can hope for that, but that's not how the Django ORM works.  Each class is a distinct table.  Cat and Dog are -- by definition -- separate tables, with separate queries.  You're not using an object store.  You're using ORM to relational tables.</p>

<p><hr /></p>

<p>Edit</p>

<p>First, your query only works if Dog and Cat share a common key generator, and don't have an overlapping set of PK's.</p>

<p>If you have a Dog with PK of 42 AND a Cat with PK of 42, you've got a problem.  And since you can't easily control the key generation, your solution can't work.</p>

<p>Run Time Type Identification is bad.  It's not Object-Oriented in a number of ways.  Almost anything you can do to avoid RTTI is better than an ever-expanding sequence of if-statements to distinguish subclasses.</p>

<p>However, the model you're trying to build is -- specifically -- a pathological problem for ORM systems.  Indeed, so specifically pathological that I'm almost willing to bet it's homework.  [There are pathological problems for pure SQL systems, also.  They often show up as homework.]</p>

<p>The issue is that the ORM cannot do what you think it should do.  So you have two choices.</p>

<ul>
<li>Stop using Django.</li>
<li>Do something Django does directly.</li>
<li>Break OO design guidelines and resort to brittle things like RTTI, which make it remarkably hard to add another subclass of animals.</li>
</ul>

<p>Consider this way to do RTTI -- it includes the class name as well as the PK</p>

<pre><code>KIND_CHOICES = (
   ( ""DOG"", ""Dog"" ),
   ( ""CAT"", ""Cat"" ),
)

class Animal( models.Model ):
    kind = models.CharField( max_length= 1, choices=KIND_CHOICES )
    fk = models.IntegerField()
    def get_kind( self ):
        if kind == ""DOG"":
            return Dog.objects.get( pk = fk )
        elif kind == ""CAT"":
            return Cat.objects.get( pk = fk )
</code></pre>
"
273685,"<p>I think there are many examples of backward compatibility breakages.  Many of the languages that did this were either small or died out along the way.</p>

<p>Many examples of this involved renaming the language.</p>

<p>Algol 60 and Algol 68 were so different that the meetings on Algol 68 broke up into factions.  The Algol 68 faction, the Pascal faction and the PL/I faction.  </p>

<p>Wirth's Pascal morphed into Modula-3.  It was very similar to pascal -- very similar syntax and semantics -- but several new features.  Was that really a Pascal-2 with no backward compatibility?</p>

<p>The Lisp to Scheme thing involved a rename.</p>

<p>If you track down a scan of the old <a href=""http://cm.bell-labs.com/cm/cs/who/dmr/bintro.html"">B programming language</a> manual, you'll see that the evolution to C looks kind of incremental -- not radical -- but it did break compatibility.</p>

<p>Fortran existed in many forms.  I don't know for sure, but I think that Digital's Fortran 90 for VAX/VMS wasn't completely compatible with ancient Fortran IV programs.</p>

<p>RPG went through major upheavals -- I think that there are really two incompatible languages called RPG.</p>

<p><strong>Bottom Line</strong>  I think that <em>thinking</em> and <em>learning</em> are inevitable.   You have three responses to learning the limitations of a language.</p>

<ol>
<li><p>Invent a new language that's utterly incompatible.</p></li>
<li><p>Incremental chagne until you are forced to invent a new language.</p></li>
<li><p>Break compatibility in a controlled, thoughtful way.</p></li>
</ol>

<p>I think that #1 and #2 are both coward's ways out.  Chucking the old is easier than attempting to preserve it.  Preserving every nuanced feature (no matter how bad) is a lot of work, some of it of little or no value.</p>

<p>Commercial enterprises opt for cowardly approaches in the name of ""new marketing"" or ""preserving our existing customers"".  That's why commercial software ventures aren't hot-beds of innovation.  </p>

<p>I think that <strong>only</strong> open-source projects can be embrace innovation in the way that the Python community is tackling this change.</p>
"
328337,"<p>The length of the segment is not important, thus using a square root is not required and should be avoided since we could lose some precision.</p>

<pre><code>class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

class Segment:
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def is_between(self, c):
        # Check if slope of a to c is the same as a to b ;
        # that is, when moving from a.x to c.x, c.y must be proportionally
        # increased than it takes to get from a.x to b.x .

        # Then, c.x must be between a.x and b.x, and c.y must be between a.y and b.y.
        # =&gt; c is after a and before b, or the opposite
        # that is, the absolute value of cmp(a, b) + cmp(b, c) is either 0 ( 1 + -1 )
        #    or 1 ( c == a or c == b)

        a, b = self.a, self.b             

        return ((b.x - a.x) * (c.y - a.y) == (c.x - a.x) * (b.y - a.y) and 
                abs(cmp(a.x, c.x) + cmp(b.x, c.x)) &lt;= 1 and
                abs(cmp(a.y, c.y) + cmp(b.y, c.y)) &lt;= 1)
</code></pre>

<p>Some random example of usage :</p>

<pre><code>a = Point(0,0)
b = Point(50,100)
c = Point(25,50)
d = Point(0,8)

print Segment(a,b).is_between(c)
print Segment(a,b).is_between(d)
</code></pre>
"
157792,"<pre><code>data = { 'keyC':1, 'keyB':2, 'keyA':1 }

for key, value in sorted(data.items(), key=lambda x: (-1*x[1], x[0])):
    print key, value
</code></pre>
"
181768,"<p>Usually when the error is buried in some function, but I don't know exactly what or where. Either I insert dozens of <code>log.debug()</code> calls and then have to take them back out, or just put in:</p>

<pre><code>import pdb
pdb.set_trace ()
</code></pre>

<p>and then run the program. The debugger will launch when it reaches that point and give me a full REPL to poke around in.</p>
"
89267,"<p>os.system has been superceeded by the subprocess module. Use subproccess instead.</p>
"
328070,"<pre><code>my_list = [line.split(',') for line in open(""filename.txt"")]
</code></pre>
"
214666,"<p><a href=""http://docs.djangoproject.com/en/dev/topics/templates/#topics-templates"" rel=""nofollow"">Django's templating engine</a> is quite decent.  It's pretty robust while not stepping on too many toes.  If you're working with Python I would recommend it.  I don't know how to divorce it from Django, but I doubt it would be very difficult seeing as Django is quite modular.</p>

<p><strong>EDIT:</strong>  Apparently the <a href=""http://docs.djangoproject.com/en/dev/ref/templates/api/#configuring-the-template-system-in-standalone-mode"" rel=""nofollow"">mini-guide to using Django's templating engine standalone</a> was sitting in front of me already, thanks <a href=""http://stackoverflow.com/users/6760/insin"">insin</a>.</p>
"
112563,"<p>If you on a debian[-like] machine, </p>

<pre><code>#!/bin/bash
echo -n ""Enter a word: ""
read input
grep ""^$input"" /usr/share/dict/words
</code></pre>

<p>Takes all of 0.040s on my P200.</p>
"
8974,"<p>A simple example from the book Dive Into Python works ok for me, <a href=""http://www.diveintopython.org/download/diveintopython-examples-5.4.zip"" rel=""nofollow"">this</a> is the download link, the example is fileinfo.py. Don't know if it's the best, but it can do the basic job.</p>

<p>The entire book is available online <a href=""http://www.diveintopython.org/"" rel=""nofollow"">here</a>.</p>
"
90103,"<p>An additional benefit for Jython, at least for some, is <a href=""http://zyasoft.com/pythoneering/2008/06/realizing-jython-25.html"">it lacks the GIL</a> (the Global Interpreter Lock) and uses Java's native threads.  This means that you can run pure Python code in parallel, something not possible with the GIL.</p>
"
86705,"<p>Using Django on apache with mod_python, I host multiple (unrelated) django sites simply with the following apache config:</p>

<pre><code>&lt;VirtualHost 1.2.3.4&gt;
        DocumentRoot /www/site1
        ServerName site1.com
        &lt;Location /&gt;
                SetHandler python-program
                SetEnv DJANGO_SETTINGS_MODULE site1.settings
                PythonPath ""['/www'] + sys.path""
                PythonDebug On
                PythonInterpreter site1
        &lt;/Location&gt;
&lt;/VirtualHost&gt;

&lt;VirtualHost 1.2.3.4&gt;
        DocumentRoot /www/site2
        ServerName site2.com
        &lt;Location /&gt;
                SetHandler python-program
                SetEnv DJANGO_SETTINGS_MODULE site2.settings
                PythonPath ""['/www'] + sys.path""
                PythonDebug On
                PythonInterpreter site2
        &lt;/Location&gt;
&lt;/VirtualHost&gt;
</code></pre>

<p>No need for multiple apache instances or proxy servers. Using a different PythonInterpreter directive for each site (the name you enter is arbitrary) keeps the namespaces separate.</p>
"
271729,"<p>I agree with the Idea of coding first in a high level language such as Python,  Profiling and then Implementing any code that needs speeding up in C / C++ and wrapping it for use in the high level language.</p>

<p>As an alternative to boost I would like to suggest <a href=""http://www.swig.org/"">SWIG</a> for creating Python callable code from C. Its reasonably painless to use, and will compile callable modules for a wide range of languages. (Python, Ruby, Java, Lua. to name a few) from C code.</p>

<p>The wrapping process is semi automated, so there is no need to add new functions to the base C code, making a smoother work flow. </p>
"
114114,"<p>You may have ""Class"" and ""Instance"" confused.  It's not clear from your example, so I'll presume that you're using a lot of class definitions and don't have appropriate object instances of those classes.</p>

<p>Classes don't really have usable attribute values.  A class is just a common set of definitions for a collection of objects.  You should think of of classes as definitions, not actual things.</p>

<p>Instances of classes, ""objects"", are actual things that have actual attribute values and execute method functions.</p>

<p>You don't pass variables among <em>classes</em>.  You pass variables among <em>instances</em>.  As a practical matter only instance variables matter.  [Yes, there are class variables, but they're a fairly specialized and often confusing thing, best avoided.]</p>

<p>When you create an object (an instance of a class)</p>

<pre><code>b= BasicInfoPage(...)
</code></pre>

<p>Then <code>b.intelligence</code> is the value of intelligence for the <code>b</code> instance of <code>BasicInfoPage</code>.</p>

<p>A really common thing is </p>

<pre><code>class MOS( wx.wizard.PageSimple ):
    def __init__( self, parent, title, basicInfoPage ):
        &lt;snip&gt;
        self.basicInfo= basicInfoPage
</code></pre>

<p>Now, within MOS methods, you can say <code>self.basicInfo.intelligence</code> because MOS has an object that's a BasicInfoPage available to it.</p>

<p>When you build MOS, you provide it with the instance of BasicInfoPage that it's supposed to use.</p>

<pre><code>someBasicInfoPage= BasicInfoPage( ... ) 
m= MOS( ..., someBasicInfoPage )
</code></pre>

<p>Now, the object <code>m</code> can examine <code>someBasicInfoPage.intelligence</code> </p>
"
214956,"<p>I had good votes when <a href=""http://stackoverflow.com/questions/98245/what-is-your-single-favorite-python-templating-engine#98285"">answering this same question's duplicate</a>.</p>

<p>My answer was:</p>

<p><a href=""http://jinja.pocoo.org/2"">Jinja2</a>.</p>

<p>Nice <a href=""http://jinja.pocoo.org/2/documentation/templates"">syntax</a>, good <a href=""http://jinja.pocoo.org/2/documentation/extensions.html"">customization possibilities</a>. </p>

<p>Integrates well. Can be sandboxed, so you don't have to trust completely your template authors. (Mako can't).</p>

<p>It is also pretty fast, with the bonus of compiling your template to bytecode and cache it, as in the demonstration below:</p>

<pre><code>&gt;&gt;&gt; import jinja2
&gt;&gt;&gt; print jinja2.Environment().compile('{% for row in data %}{{ row.name | upper }}{% endfor %}', raw=True) 
from __future__ import division
from jinja2.runtime import LoopContext, Context, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join
name = None

def root(context, environment=environment):
    l_data = context.resolve('data')
    t_1 = environment.filters['upper']
    if 0: yield None
    for l_row in l_data:
        if 0: yield None
        yield unicode(t_1(environment.getattr(l_row, 'name')))

blocks = {}
debug_info = '1=9'
</code></pre>

<p>This code has been generated on the fly by Jinja2. Of course the compiler optmizes it further (e.g. removing <code>if 0: yield None</code>)</p>
"
215507,"<p>PyString_Decode does this:</p>

<pre><code>PyObject *PyString_Decode(const char *s,
    		  Py_ssize_t size,
    		  const char *encoding,
    		  const char *errors)
{
    PyObject *v, *str;

    str = PyString_FromStringAndSize(s, size);
    if (str == NULL)
    return NULL;
    v = PyString_AsDecodedString(str, encoding, errors);
    Py_DECREF(str);
    return v;
}
</code></pre>

<p>IOW, it does basically what you're doing in your second example - converts to a string, then decode the string.  The problem here arises from PyString_AsDecodedString, rather than PyString_AsDecodedObject.  PyString_AsDecodedString does PyString_AsDecodedObject, but then tries to convert the resulting unicode object into a string object with the default encoding (for you, looks like that's ASCII).  That's where it fails.</p>

<p>I believe you'll need to do two calls - but you can use PyString_AsDecodedObject rather than calling the python ""decode"" method.  Something like:</p>

<pre><code>#include &lt;Python.h&gt;
#include &lt;stdio.h&gt;

int main(int argc, char *argv[])
{
     char c_string[] = { (char)0x93, 0 };
     PyObject *py_string, *py_unicode;

     Py_Initialize();

     py_string = PyString_FromStringAndSize(c_string, 1);
     if (!py_string) {
          PyErr_Print();
          return 1;
     }
     py_unicode = PyString_AsDecodedObject(py_string, ""windows_1252"", ""replace"");
     Py_DECREF(py_string);

     return 0;
}
</code></pre>

<p>I'm not entirely sure what the reasoning behind PyString_Decode working this way is.  A <a href=""http://mail.python.org/pipermail/python-dev/2001-May/014547.html"" rel=""nofollow"">very old thread on python-dev</a> seems to indicate that it has something to do with chaining the output, but since the Python methods don't do the same, I'm not sure if that's still relevant.</p>
"
181583,"<p>Wouldn't it fail to launch, then? You want <code>msvcr71.dll</code> in the same directory as the exe, so that the library loader will be able to find and link it into the application's memory map. </p>

<p>It's needed for basic operation, so you can't just let <code>py2exe</code> unpack it with the rest of the DLLs.</p>
"
190193,"<p>IDLE displays a warning message about firewall programs because it connects to the interpreter over the loopback interface, but that interface is always ""connected"" and doesn't require you to be on the Internet.</p>

<p>If IDLE isn't working for you with Python 3.0, you might consult <a href=""http://bugs.python.org/issue3628"">Python issue3628</a>.</p>
"
191336,"<p>CherryPy is not a full-stack web framework (like Django for example), in fact it isn't a web framework but a HTTP framework. Writing a web application using CherryPy is much like writing a regular object-oriented application in Python.
Also, CherryPy has it's own production-ready WSGI web server, which can be also used for applications written using other frameworks, hence the confusion surrounding CherryPy as a framework.</p>
"
141565,"<p>A better way would be to use isinstance and type conversion. If I'm understanding you right, you want this:</p>

<pre><code>def __init__ (self, filename):
    if isinstance (filename, basestring):
        # filename is a string
    else:
        # try to convert to a list
        self.path = list (filename)
</code></pre>
"
64554,"<p>The main gotcha I see is that you're not handling any errors: .login() and .sendmail() both have documented exceptions that they can throw, and it seems like .connect() must have some way to indicate that it was unable to connect - probably an exception thrown by the underlying socket code.</p>
"
311360,"<p>Look at the <a href=""http://www.python.org/doc/2.5.2/lib/module-array.html"" rel=""nofollow"">array</a> module.</p>

<pre><code>class Bit( object ):
    def __init__( self, size ):
        self.bits= array.array('B',[0 for i in range((size+7)//8)] )
    def set( self, bit ):
        b= self.bits[bit//8]
        self.bits[bit//8] = b | 1 &lt;&lt; (bit % 8)
    def get( self, bit ):
        b= self.bits[bit//8]
        return (b &gt;&gt; (bit % 8)) &amp; 1
</code></pre>

<p>FWIW, all of the <code>//8</code> and <code>% 8</code> operations can be replaced with <code>&gt;&gt;3</code> and <code>&amp;0x07</code>.  This <em>may</em> lead to slightly better speed at the risk of some obscurity.</p>

<p>Also, changing <code>'B'</code> and <code>8</code> to <code>'L'</code> and <code>32</code> should be faster on most hardware.  [Changing to <code>'H'</code> and 16 might be faster on some hardware, but it's doubtful.]</p>
"
336547,"<p>read here:<br>
<a href=""http://en.wikipedia.org/wiki/TNEF"" rel=""nofollow"">http://en.wikipedia.org/wiki/TNEF</a></p>

<p>a package for parsing here:<br>
<a href=""https://github.com/verdammelt/tnef"" rel=""nofollow"">https://github.com/verdammelt/tnef</a></p>
"
247761,"<p>I like popen2 for the ability to monitor the process.</p>

<pre><code>excelProcess = popen2.Popen4(""start excel %s"" % (excelFile))
status = excelProcess.wait()
</code></pre>

<p><a href=""http://www.python.org/doc/2.5.2/lib/module-popen2.html"" rel=""nofollow"">http://www.python.org/doc/2.5.2/lib/module-popen2.html</a></p>

<p><strong>EDIT</strong>: be aware that calling wait() will block until the process returns.  Depending on your script, this may not be your desired behavior.</p>
"
134664,"<p>I agree with nosklo's advice: if you need to give the function a name, use <code>def</code>.  I reserve <code>lambda</code> functions for cases where I'm just passing a brief snippet of code to another function, e.g.:</p>

<pre><code>a = [ (1,2), (3,4), (5,6) ]
b = map( lambda x: x[0]+x[1], a )
</code></pre>
"
245264,"<p>lighttpd with FastCGI will be nominally faster, but really the time it takes to run your python code and any database hits it does is going to absolutely dwarf any performance benefit you get between web servers.</p>

<p>mod_python and apache will give you a bit more flexibility feature-wise if you want to write code outside of django that does stuff like digest auth, or any fancy HTTP header getting/setting.  Perhaps you want to use other builtin features of apache such as mod_rewrite.</p>

<p>If memory is a concern, staying away form apache/mod_python will help a lot.  Apache tends to use a lot of RAM, and the mod_python code that glues into all of the apache functionality occupies a lot of memory-space as well. Not to mention the multiprocess nature of apache tends to eat up more RAM, as each process grows to the size of it's most intensive request.</p>
"
115777,"<p>It's pythonic not to think about esoteric difference in some pattern you read somewhere and now want to use everywhere, like the factory pattern.</p>

<p>Most of the time you would think of a @staticmethod as a solution it's probably better to use a module function, except when you stuff multiple classes in one module and each has a different implementation of the same interface, then it's better to use a @staticmethod</p>

<p>Ultimately weather you create your instances by a @staticmethod or by module function makes little difference.</p>

<p>I'd probably use the initializer ( __init__ ) of a class because one of the more accepted ""patterns"" in python is that the factory for a class is the class initialization.</p>
"
154012,"<p><a href=""http://wiki.wxpython.org/CreatingStandaloneExecutables"">http://wiki.wxpython.org/CreatingStandaloneExecutables</a></p>

<p>It shouldn't be that large unless you have managed to include the debug build of wx.
I seem to rememebr about 4Mb for the python.dll and similair for wx.</p>
"
154055,"<p>For iterating over months you need a different recipe, since timedeltas can't express ""one month"".</p>

<pre><code>from datetime import date

def jump_by_month(start_date, end_date, month_step=1):
    current_date = start_date
    while current_date &lt; end_date:
        yield current_date
        carry, new_month = divmod(current_date.month - 1 + month_step, 12)
        new_month += 1
        current_date = current_date.replace(year=current_date.year + carry,
                                            month=new_month)
</code></pre>

<p>(NB: you have to subtract 1 from the month for the modulus operation then add it back to <code>new_month</code>, since months in <code>datetime.date</code>s start at 1.)</p>
"
271853,"<p>If you are comfortable coding tests in Python, I've found <a href=""http://funkload.nuxeo.org/"">funkload</a> to be very capable.  You don't say your server is http-based, so you may have to adapt their test facilities to your own client/server style.  </p>

<p>Once you have a test in Python, funkload can run it on many threads, monitoring response times, and summarizing for you at the end of the test.</p>
"
292002,"<p>Python resolves your variables with -- generally -- three namespaces available.  </p>

<blockquote>
  <p>At any time during execution, there
  are at least three nested scopes whose
  namespaces are directly accessible:
  the innermost scope, which is searched
  first, contains the local names; the
  namespaces of any enclosing functions,
  which are searched starting with the
  nearest enclosing scope; the middle
  scope, searched next, contains the
  current module's global names; and the
  outermost scope (searched last) is the
  namespace containing built-in names.</p>
</blockquote>

<p>There are two functions: <code>globals</code> and <code>locals</code> which show you the contents two of these namespaces.</p>

<p>Namespaces are created by packages, modules, classes, object construction and functions.  There aren't any other flavors of namespaces.  </p>

<p>In this case, the call to a function named <code>x</code> has to be resolved in the local name space or the global namespace.</p>

<p>Local in this case, is the body of the method function <code>Foo.spam</code>.</p>

<p>Global is -- well -- global. </p>

<p>The rule is to search the nested local spaces created by method functions (and nested function definitions), then search global.  That's it.</p>

<p>There are no other scopes.  The <code>for</code> statement (and other compound statements like <code>if</code> and <code>try</code>) don't create new nested scopes.  Only definitions (packages, modules, functions, classes and object instances.)</p>

<p>Inside a class definition, the names are part of the class namespace.  <code>code2</code>, for instance, must be qualified by the class name.  Generally <code>Foo.code2</code>.  However, <code>self.code2</code> will also work because Python objects look at the containing class as a fall-back.</p>

<p>An object (an instance of a class) has instance variables.  These names are in the object's namespace.  They must be qualified by the object.  (<code>variable.instance</code>.)  </p>

<p>From within a class method, you have locals and globals.  You say <code>self.variable</code> to pick the instance as the namespace.  You'll note that <code>self</code> is an argument to every class member function, making it part of the local namespace.</p>

<p>See <a href=""http://www.network-theory.co.uk/docs/pytut/PythonScopesandNameSpaces.html"" rel=""nofollow"">Python Scope Rules</a>, <a href=""http://stackoverflow.com/questions/146359/python-scope"">Python Scope</a>, <a href=""http://showmedo.com/videos/video?name=2800020&amp;fromSeriesID=280"" rel=""nofollow"">Variable Scope</a>.</p>
"
114626,"<p>The fastest way to display 30x400 data points is to:</p>

<h2>Use OpenGL color arrays</h2>

<p>If you can quickly transform your data to what OpenGL understands as color array, you could create a vertex array describing quads, one for each sensor, then update your color array and draw this orthographically on screen.</p>

<h2>Use OpenGL textures</h2>

<p>If you can quickly transform your datapoints to an opengl texture you can draw one quad with fixed UV coordinates that is bound to this texture.</p>

<h2>Use pygame</h2>

<p>Pygame has support for conversion of Numpy/Numarray to surfaces, Pygame can then transform such surfaces which involves resampling, after resampling you can blit it on screen.</p>

<h2>Misc</h2>

<p><a href=""http://pyglet.org/"">pyglet</a> makes dealing with opengl very easy</p>
"
141670,"<p>The only difficulty I've seen people encounter with Python's in particular is when they try to mix non-functional features like variable reassignment with closures, and are surprised when this doesn't work:</p>

<pre><code>def outer ():
    x = 1
    def inner ():
        print x
        x = 2
    return inner
outer () ()
</code></pre>

<p>Usually just pointing out that a function has its own local variables is enough to deter such silliness.</p>
"
53036,"<p>Yes, take a look at the ""6.4 Packages"" section in <a href=""http://docs.python.org/tut/node8.html"" rel=""nofollow"">http://docs.python.org/tut/node8.html</a>:</p>

<p>Basically, you can place a bunch of files into a directory and add an __init__.py file to the directory.  If the directory is in your PYTHONPATH or sys.path, you can do ""import directoryname"" to import everything in the directory or ""import directoryname.some_file_in_directory"" to import a specific file that is in the directory.</p>

<blockquote>
  <p>The __init__.py files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as ""string"", from unintentionally hiding valid modules that occur later on the module search path. In the simplest case, __init__.py can just be an empty file, but it can also execute initialization code for the package or set the __all__ variable, described later. </p>
</blockquote>
"
337560,"<p>Did you try this version of fetchone?  Or something different?</p>

<pre><code>row = cursor.fetchone() 
while row is not None:
    # process
    row = cursor.fetchone()
</code></pre>

<p>Also, did you try this?</p>

<pre><code> row = cursor.fetchmany(size=1)
 while row is not None:
     # process
     row = cursor.fetchmany( size=1 )
</code></pre>

<p>Not all drivers support these, so you may have gotten errors or found them too slow.</p>

<p><hr /></p>

<p>Edit.</p>

<p>When it hangs on execute, you're waiting for the database.  That's not a row-by-row Python thing; that's a MySQL thing.  </p>

<p>MySQL prefers to fetch all rows as part of it's own cache management.  This is turned off by providing a the fetch_size of Integer.MIN_VALUE (-2147483648L).</p>

<p>The question is, what part of the Python DBAPI becomes the equivalent of the JDBC fetch_size?</p>

<p>I think it might be the arraysize attribute of the cursor.  Try</p>

<pre><code>cursor.arraysize=-2**31
</code></pre>

<p>And see if that forces MySQL to stream the result set instead of caching it.</p>
"
249125,"<p>Sneaking a language in is often done by automating tedious manual tasks (especially dynamic/scripting languages like Python/Ruby etc). Set it up so something like deploying builds, or shuffling backups, or whatever is done with Python.</p>

<p>Then casually slip in how easy it was to do, and try to spread some of the enthusiasm around.</p>

<p>Acceptance and awareness should slowly grow from that, and before you know it, management is seriously considering Python for a new project.</p>
"
130278,"<pre><code>result = [x for x in map(expensive,mylist) if x]
</code></pre>

<p>map() will return a list of the values of each object in mylist passed to expensive(). Then you can list-comprehend that, and discard unnecessary values.</p>

<p>This is somewhat like a nested comprehension, but should be faster (since the python interpreter can optimize it fairly easily).</p>
"
307776,"<p>I am coming from a Java background but I am fairly confident that the same principles will apply in Python.  As a rule of thumb you should <b>never</b> inherit from a class whose implementation you don't understand and control unless that class has been designed specifically for inheritance.  If it has been designed in this way it should describe this clearly in its documentation.</p>

<p>The reason for this is that inheritance can potentially bind you to the implementation details of the class that you are inheriting from.</p>

<p>To use an example from Josh Bloch's book 'Effective Java'</p>

<p>If we were to extend the class <code>ArrayList</code> class in order to be able to count the number of items that were added to it during its life-time (not necessarily the number it currently contains) we may be tempted to write something like this.</p>

<pre><code>public class CountingList extends ArrayList {
    int counter = 0;

    public void add(Object o) {
        counter++;
        super.add(0);
    }

    public void addAll(Collection c) {
        count += c.size();
        super.addAll(c);
    }

    // Etc.
}
</code></pre>

<p>Now this extension looks like it would accurately count the number of elements that were added to the list but in fact it may not.  If <code>ArrayList</code> has implemented <code>addAll</code> by iterating over the <code>Collection</code> provided and calling its interface method <code>addAll</code> for each element then we will count each element added through the <code>addAll</code> method twice.  Now the behaviour of our class is dependent on the implementation details of <code>ArrayList</code>.</p>

<p>This is of course in addition to the disadvantage of not being able to use other implementations of <code>List</code> with our <code>CountingList</code> class.  Plus the disadvantages of inheriting from a concrete class that are discussed above.</p>

<p>It is my understanding that Python uses a similar (if not identical) method dispatch mechanism to Java and will therefore be subject to the same limitations.  If someone could provide an example in Python I'm sure it would be even more useful.</p>
"
152249,"<p>I would treat the entities as a unit (since they also can contain numerical character codes), resulting in the following regular expression:</p>

<pre><code>(\w|&amp;(#(x[0-9a-fA-F]+|[0-9]+)|[a-z]+);)+
</code></pre>

<p>This matches</p>

<ul>
<li>either a word character (including â<code>_</code>â), or</li>
<li>an HTML entity consisting of
<ul>
<li>the character â<code>&amp;</code>â,
<ul>
<li>the character â<code>#</code>â,
<ul>
<li>the character â<code>x</code>â followed by at least one hexadecimal digit, or</li>
<li>at least one decimal digit, or</li>
</ul></li>
<li>at least one letter (= named entity),</li>
</ul></li>
<li>a semicolon</li>
</ul></li>
<li>at least once.</li>
</ul>

<p>/EDIT: Thanks to Î¤ÎÎ©Î¤ÎÎÎÎ¥ for pointing out an error.</p>
"
215874,"<p>First of all, change your function to <code>return</code> the value. <code>print</code>ing it will complicate things since you want to get the value back. Suppose your <code>MyModule.py</code> looks like this:</p>

<pre><code>import thirdparty

def MyFunc(some_arg):
    result = thirdparty.go()
    return result
</code></pre>

<p>Now, to do what you want, you have to go beyond basic embedding, as the <a href=""http://docs.python.org/extending/embedding.html"">documentation says</a>. Here is the full code to run your function:</p>

<pre><code>#include &lt;Python.h&gt;

int
main(int argc, char *argv[])
{
    PyObject *pName, *pModule, *pFunc;
    PyObject *pArgs, *pArg, *pResult;
    int i;

    Py_Initialize();
    pName = PyString_FromString(""MyModule.py"");
    /* Error checking of pName left out as exercise */

    pModule = PyImport_Import(pName);
    Py_DECREF(pName);

    if (pModule != NULL) {
        pFunc = PyObject_GetAttrString(pModule, ""MyFunc"");
        /* pFunc is a new reference */

        if (pFunc) {
            pArgs = PyTuple_New(0);
            pArg = PyString_FromString(""some parameter"")
            /* pArg reference stolen here: */
            PyTuple_SetItem(pArgs, 0, pArg);
            pResult = PyObject_CallObject(pFunc, pArgs);
            Py_DECREF(pArgs);
            if (pResult != NULL) {
                printf(""Result of call: %s\n"", PyString_AsString(pResult));
                Py_DECREF(pResult);
            }
            else {
                Py_DECREF(pFunc);
                Py_DECREF(pModule);
                PyErr_Print();
                fprintf(stderr,""Call failed\n"");
                return 1;
            }
        }
        else {
            if (PyErr_Occurred())
                PyErr_Print();
            fprintf(stderr, ""Cannot find function"");
        }
        Py_XDECREF(pFunc);
        Py_DECREF(pModule);
    }
    else {
        PyErr_Print();
        fprintf(stderr, ""Failed to load module"");
        return 1;
    }
    Py_Finalize();
    return 0;
}
</code></pre>
"
216184,"<p>I know it's not a helpful answer (though this question has been already answered), but in any real code, please don't do that. Python cannot optimize tail-calls, has slow function calls and has a fixed recursion depth, so there are at least 3 reasons why to do it iteratively instead.</p>
"
153991,"<p>This may help:</p>

<p><a href=""http://stackoverflow.com/questions/49146/what-is-the-best-way-to-make-an-exe-file-from-a-python-program"">http://stackoverflow.com/questions/49146/what-is-the-best-way-to-make-an-exe-file-from-a-python-program</a></p>
"
83155,"<p>I agree with Mr.Shark, but if you have an instance of a class, you'll need to use its <code>__class__</code> member:</p>

<pre><code>&gt;&gt;&gt; class test():
...     pass
...
&gt;&gt;&gt; a_test = test()
&gt;&gt;&gt;
&gt;&gt;&gt; a_test.__name__
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
AttributeError: test instance has no attribute '__name__'
&gt;&gt;&gt;
&gt;&gt;&gt; a_test.__class__
&lt;class __main__.test at 0x009EEDE0&gt;
</code></pre>
"
116122,"<p>I also recommend <a href=""http://code.google.com/p/httplib2/"" rel=""nofollow"">httplib2</a> by Joe Gregario.  I use this regularly instead of httplib in the standard lib.</p>
"
294785,"<p>Please read up on distutils.  Specifically, the section on <a href=""http://www.python.org/doc/2.5.2/dist/describing-extensions.html"" rel=""nofollow"">Extension Modules</a>.</p>

<p>Making assumptions about compilers is bad policy; your instinct may not have all the facts.  You could do some marketplace survey -- ask what they can handle regarding source distribution of extension modules.</p>

<p>It's relatively easy to create the proper distutils <code>setup.py</code> and see who can run it and who can't.</p>

<p>Built binary distributions are pretty common.  Perhaps you can sign up some users will help create binary distributions -- with OS-native installers -- for some considerations.  </p>
"
334932,"<p>If you really want to use your databases ENUM type:</p>

<ol>
<li>Use Django 1.x</li>
<li>Recognize your application will only work on some databases.</li>
<li>Puzzle through this documentation page:<a href=""http://docs.djangoproject.com/en/dev/howto/custom-model-fields/#howto-custom-model-fields"">http://docs.djangoproject.com/en/dev/howto/custom-model-fields/#howto-custom-model-fields</a></li>
</ol>

<p>Good luck!</p>
"
308936,"<p>Tuples will be slightly faster to construct for a small number of elements.  Although actually most of the gains will be in memory used rather than CPU cycles, since tuples require less space than lists.</p>

<p>With that being said, the performance difference should be negligible, and in general you shouldn't worry about these kinds of micro-optimizations until you've profiled your code and identified a section of code that is a bottleneck.</p>
"
67527,"<p>Django doesn't directly handle the generation of dynamic content (specifically Zip files). That work would be done by Python's standard library. You can take a look at how to dynamically create a Zip file in Python <a href=""https://docs.python.org/2/library/zipfile.html#zipfile-objects"" rel=""nofollow"">here</a>.</p>

<p>If you're worried about it slowing down your server you can cache the requests if you expect to have many of the same requests. You can use Django's <a href=""http://docs.djangoproject.com/en/dev/topics/cache/#topics-cache"" rel=""nofollow"">cache framework</a> to help you with that.</p>

<p>Overall, zipping files can be CPU intensive but Django shouldn't be any slower than another Python web framework.</p>
"
197101,"<p>In Python 3.0:</p>

<pre><code>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; import fileinput
&gt;&gt;&gt; print(inspect.getfullargspec(fileinput.input))
FullArgSpec(args=['files', 'inplace', 'backup', 'bufsize', 'mode', 'openhook'],
varargs=None, varkw=None, defaults=(None, 0, '', 0, 'r', None), kwonlyargs=[], 
kwdefaults=None, annotations={})
</code></pre>
"
166246,"<p>For logging standard output, you can use a stdout wrapper, such as this one:</p>

<pre><code>from __future__ import with_statement

class OutWrapper(object):
    def __init__(self, realOutput, logFileName):
        self._realOutput = realOutput
        self._logFileName = logFileName

    def _log(self, text):
        with open(self._logFileName, 'a') as logFile:
            logFile.write(text)

    def write(self, text):
        self._log(text)
        self._realOutput.write(text)
</code></pre>

<p>You then have to initialize it in your main Python file (the one that runs everything):</p>

<pre><code>import sys    
sys.stdout = OutWrapper(sys.stdout, r'c:\temp\log.txt')
</code></pre>

<p>As to logging exceptions, the easiest thing to do is to wrap <code>MainLoop</code> method of wx.App in a try..except, then extract the exception information, save it in some way, and then re-raise the exception through <code>raise</code>, e.g.:</p>

<pre><code>try:
    app.MainLoop()
except:
    exc_info = sys.exc_info()
    saveExcInfo(exc_info) # this method you have to write yourself
    raise
</code></pre>
"
327195,"<p>Can I answer my own question?</p>

<p>I have just discovered the handy function ""sorted"" which does exactly what I was looking for.</p>

<pre>
for k in sorted(somedictionary.keys()):
    dosomething()
</pre>

<p>It shows up in <a href=""http://stackoverflow.com/questions/157424/python-25-dictionary-2-key-sort"">http://stackoverflow.com/questions/157424/python-25-dictionary-2-key-sort</a></p>
"
327292,"<p>Have you tried to install the <code>py-readline</code> (or <code>py25-readline</code> for Python 2.5) port?</p>

<p>Also, in the snippet above, you are NOT using the MacPort python, but rather the Apple Python.</p>

<p>The MacPort version should be located in the <code>/opt/local</code> directory structure. You should check your path.</p>
"
117299,"<p>I resigned from using pylint/pychecker in favor of using pyflakes with Django code - it just tries to import module and reports any problem it finds, like unused imports or uninitialized local names.</p>
"
13902,"<p>I've never heard of transactions being used in the same context as explaining what a closure is and there really aren't any transaction semantics here.</p>

<p>It's called a closure because it ""closes over"" the outside variable (constant)--i.e., it's not just a function but an enclosure of the environment where the function was created. </p>

<p>In the following example, calling the closure g after changing x will also change the value of x within g, since g closes over x:</p>

<pre><code>x = 0

def f():
    def g(): 
        return x * 2
    return g


closure = f()
print(closure()) # 0
x = 2
print(closure()) # 4
</code></pre>
"
118656,"<p>You should be able to configure your editor to speak the tabs and spaces -- I know it's possible to <em>display</em> whitespace in most editors, so there must be an accessibility option somewhere to speak them.</p>

<p>Failing that, there is <a href=""http://timhatch.com/projects/pybraces/"" rel=""nofollow"">pybraces</a>, which was written as a practical joke but might actually be useful to you with a bit of work.</p>
"
326912,"<p>inner doesn't exist until outer makes it.  You should either move inner up to a toplevel function for testability, or have the outer test test all the possible execution paths of itself and inner.</p>

<p>Do note that the inner function isn't a simple function, it's a closure.  Consider this case:</p>

<pre><code>def outer(a):
    b = compute_something_from(a)
    def inner():
        do_something_with(a, b)
</code></pre>

<p>That's the standard testability trade-off.  If your <a href=""http://en.wikipedia.org/wiki/Cyclomatic_complexity"">cyclomatic complexity</a> is too high, your tests will be too numerous.</p>
"
331788,"<p>From the <a href=""http://www.python.org/dev/peps/pep-0008/"" rel=""nofollow"">Python Style Guide</a>:</p>

<p><strong>With regard to listing out a compound expression:</strong></p>

<p>Compound statements (multiple statements on the same line) are generally discouraged.</p>

<p>Yes:</p>

<pre><code>if foo == 'blah':
    do_blah_thing()
do_one()
do_two()
do_three()
</code></pre>

<p>Or for the code you supplied, Greg's example is a good one:</p>

<pre><code>if filecmp.cmp(local, config_file):
    shutil.copyfile(remote, config_file)
else:
    shutil.copyfile(local, config_file)
</code></pre>

<p>Rather not:</p>

<pre><code>if foo == 'blah': do_blah_thing()
do_one(); do_two(); do_three()
</code></pre>

<p><strong>Method Names and Instance Variables</strong></p>

<p>Use the function naming rules: lowercase with words separated by underscores as necessary to improve readability.</p>

<p><strong>Update:</strong> Per Oscar's request, also listed how his code would look in this fashion.</p>
"
295242,"<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; safechars = '_-.()' + string.digits + string.ascii_letters
&gt;&gt;&gt; allchars = string.maketrans('', '')
&gt;&gt;&gt; deletions = ''.join(set(allchars) - set(safechars))
&gt;&gt;&gt; filename = '#abc.$%.txt'
&gt;&gt;&gt; safe_filename = string.translate(filename, allchars, deletions)
&gt;&gt;&gt; safe_filename
'abc..txt'
&gt;&gt;&gt;
</code></pre>

<p>The above code doesn't work for unicode strings. It doesn't handle empty strings, special filenames ('nul', 'con', etc) also.</p>
"
295354,"<p>Why not just wrap the ""osopen"" with a try/except and let the underlying OS sort out whether the file is valid?</p>

<p>This seems like much less work and is valid no matter which OS you use.</p>
"
118496,"<p><a href=""http://www.sqlalchemy.org/trac/wiki/SqlSoup"" rel=""nofollow"">sqlsoup</a> in sqlalchemy gives you the quickest solution in python I think if you want a clear(ish) one liner . Look at the page to see.</p>

<p>It should be something like...</p>

<pre><code>result = [n.Number for n in db.Numbers.filter(db.Numbers.Number &lt; 5).all()]
</code></pre>
"
119693,"<p>Editor-to-editor mistake occurs when you have <em>mixed indentation within a file</em>. This arises as follows: a block of code is indented with 4 spaces, and then one indentation level ""in"", it is indented with tabs. Now the heathen who did this (mixing tabs and spaces) had it so his tabs are also 4 spaces, so he sees no problems, and python sees no problems. Now our victim comes along later, and he has his tabs set to 8 spaces. Now our victims thinks the code looks all whacked, and <em>fixes it</em> by <em>removing one level of indentation</em>, which now makes the code <em>look</em> like it is still 2 levels of indentation, but is <em>really one level</em>. At this point all hell breaks loose.</p>

<p>The lesson here is that you should never, ever, mix tabs and spaces. If you keep to this, then it is easy to reindent your code into spaces or tabs, regardless of which you personally use. The best way to ensure you don't mix tabs and spaces is to always run python with <code>-tt</code>, which will produce an error when tabs and spaces are mixed.</p>

<p>As for tabs and spaces, I personally use tabs so separate indentation from appearance - it is much easier to change the appearance of code when it is indented with tabs than it is with spaces. I know this runs contrary to what 99% of python programmers do, but that is my <em>personal</em> preference, and it is easy in any case to convert a tabbed file to a spaced one. The reverse is not always true, since you can accidentally whack out 4 spaces in strings etc.</p>
"
193256,"<p>Non-python data is best bundled inside your Python modules using the <code>package_data</code> support in <A HREF=""http://peak.telecommunity.com/DevCenter/setuptools"">setuptools</A>. One thing I strongly recommend is using namespace packages to create shared namespaces which multiple projects can use -- much like the Java convention of putting packages in <code>com.yourcompany.yourproject</code> (and being able to have a shared <code>com.yourcompany.utils</code> namespace).</p>

<p>Re branching and merging, if you use a good enough source control system it will handle merges even through renames; <A HREF=""http://www.bazaar-vcs.org/"">Bazaar</A> is particularly good at this.</p>

<p>Contrary to some other answers here, I'm +1 on having a <code>src</code> directory top-level (with <code>doc</code> and <code>test</code> directories alongside). Specific conventions for documentation directory trees will vary depending on what you're using; <A HREF=""http://sphinx.pocoo.org/"">Sphinx</A>, for instance, has its own conventions which its quickstart tool supports.</p>

<p>Please, please leverage setuptools and pkg_resources; this makes it much easier for other projects to rely on specific versions of your code (and for multiple versions to be simultaneously installed with different non-code files, if you're using <code>package_data</code>).</p>
"
193713,"<p>So, the problem with developing parallel libraries in different languages is that often times different languages will have different idioms for the same task. I know this from personal experience, having ported a library from Python to PHP. Idioms aren't just naming: for example, Python has a good deal of magic you can use with getters and setters to make object properties act magical; Python has monkeypatching; Python has named parameters.</p>

<p>With a port, you want to pick a ""base"" language, and then attempt to mimic all the idioms in the other language (not easy to do); for parallel development, not doing anything too tricky and catering to the least common denominator is preferable. Then bolt on the syntax sugar.</p>
"
31126,"<p>you could always write one yourself:</p>

<pre><code>def iterattr(iterator, attributename):
    for obj in iterator:
        yield getattr(obj, attributename)
</code></pre>

<p>will work with anything that iterates, be it a tuple, list, or whatever.</p>

<p>I love python, it makes stuff like this very simple and no more of a hassle than neccessary, and in use stuff like this is hugely elegant.</p>
"
168640,"<p>You forgot to specify the open mode ('w') in fdopen(). The default is 'r', causing the write() call to fail.</p>

<p>I think mkstemp() creates the file for reading only. Calling fdopen with 'w' probably reopens it for writing (you <em>can</em> reopen the file created by mkstemp).</p>
"
168795,"<p>The <a href=""http://docs.python.org/library/json.html"" rel=""nofollow"">new <code>json</code> module</a> is a real boon to web programmers!!  (It was known as <a href=""http://undefined.org/python/#simplejson"" rel=""nofollow""><code>simplejson</code></a> before being merged into the standard library.)</p>

<p>It's ridiculously easy to use: <code>json.dumps(obj)</code> encodes a built-in-type Python object to a JSON string, while <code>json.loads(string)</code> decodes a JSON string into a Python object.</p>

<p>Really really handy.</p>
"
323886,"<p>(Well, since this is tagged with Python):</p>

<p>We use Python's <a href=""http://docs.python.org/library/optparse.html"" rel=""nofollow"">optparse</a> module for this purpose. It has a much friendlier API than lots of ifs.</p>
"
142669,"<p>Global variables are usually a bad idea, but you can do this by assigning to <code>__builtins__</code>:</p>

<pre><code>__builtins__.foo = 'something'
print foo
</code></pre>

<p>Also, modules themselves are variables that you can access from any module.  So if you define a module called <code>my_globals.py</code>:</p>

<pre><code># my_globals.py
foo = 'something'
</code></pre>

<p>Then you can use that from anywhere as well:</p>

<pre><code>import my_globals
print my_globals.foo
</code></pre>

<p>Using modules rather than modifying <code>__builtins__</code> is generally a cleaner way to do globals of this sort.</p>
"
229819,"<p>With the caveat from Federico Ramponi ""You should use scapy as an interpreter by its own, not as a library"", I want to answer the non-scapy-specific parts of the question.</p>

<p><strong>Q:</strong> when installing Python libraries, do I need to change my path or anything similar?</p>

<p><strong>A:</strong> I think you are talking about changing <code>PYTHONPATH</code> system-wide. This is usually not required or a good idea.</p>

<p>Third party Python libraries should either be installed in system directories, such as <code>/usr/lib/python2.5/site-packages</code>, or installed locally, in which case you might want to set <code>PYTHONPATH</code> in your Makefile or a in driver shell script.</p>

<p><strong>Q:</strong> Also, is there something I can run in the interpreter to tell me the contents of the scapy package?</p>

<p><strong>A:</strong> You can do something like this:</p>

<pre><code>&gt;&gt;&gt; import scapy
&gt;&gt;&gt; dir(scapy)
</code></pre>

<p>Or even better:</p>

<pre><code>&gt;&gt;&gt; import scapy
&gt;&gt;&gt; help(scapy)
</code></pre>

<p>Bonus question asked in a comment.</p>

<p><strong>Q:</strong> Is 'import scapy' the same as 'from scapy import *'?</p>

<p><strong>A:</strong> <code>import scapy</code> binds the scapy name in the local namespace to the scapy module object. OTOH, <code>from scapy import *</code> does not bind the module name, but all public names defined in the scapy module are bound in the local namespace.</p>

<p>See paragraphs 6 and 7 of the Python Reference Manual, <a href=""http://www.python.org/doc/2.5.2/ref/import.html"" rel=""nofollow"">6.12 The import statement</a>.</p>
"
295733,"<p>A partial class is simply a class that's contained in more than one file.  Sometimes it's so that one part can be machine-generated, and another part user-edited.</p>

<p>I use them in C# when I'm making a class that's getting a bit too large.  I'll put the accessors and constructors in one file, and all of the interesting methods in a different file.</p>

<p>In Perl, you'd simply have two (or more) files that each declare themselves to be in a package:</p>

<p>(main program)</p>

<pre><code>    use MyClass;
</code></pre>

<p>(in MyClass.pm)</p>

<pre><code>    use MyClassOtherStuff;
    package MyClass;
    # [..class code here...]
</code></pre>

<p>(in MyClassOtherStuff.pm)</p>

<pre><code>    package MyClass;
    # [...rest of code here...]
</code></pre>
"
205037,"<p>In most cases, using <code>__dict__</code> or <code>dir()</code> will get you the info you're wanting. If you should happen to need more details, the standard library includes the <a href=""https://docs.python.org/2/library/inspect.html"" rel=""nofollow"">inspect</a> module, which allows you to get some impressive amount of detail. Some of the real nuggests of info include:</p>

<ul>
<li>names of function and method parameters</li>
<li>class hierarchies</li>
<li>source code of the implementation of a functions/class objects</li>
<li>local variables out of a frame object</li>
</ul>

<p>If you're just looking for ""what attribute values does my object have?"", then <code>dir()</code> and <code>__dict__</code> are probably sufficient. If you're really looking to dig into the current state of arbitrary objects (keeping in mind that in python almost everything is an object), then <code>inspect</code> is worthy of consideration.</p>
"
178211,"<p>Yes,</p>

<pre><code>a = {""id"": 1, ""name"":""Sesame Street""}
</code></pre>
"
16929,"<p>Jeff Atwood himself described how StackOverflow.com sanitizes user input (in non-language-specific terms) on the Stack Overflow blog: <a href=""http://blog.stackoverflow.com/2008/06/safe-html-and-xss/"" rel=""nofollow"">http://blog.stackoverflow.com/2008/06/safe-html-and-xss/</a></p>

<p>However, as Justin points out, if you use Django templates or something similar then they probably sanitize your HTML output anyway.</p>

<p>SQL injection also shouldn't be a concern.  All of Python's database libraries (MySQLdb, cx_Oracle, etc) always sanitize the parameters you pass.  These libraries are used by all of Python's object-relational mappers (such as Django models), so you don't need to worry about sanitation there either.</p>
"
17300,"<p>The best way to plan for an eventual transition to compiled code is to write the performance sensitive portions as a module of simple functions in a <a href=""http://en.wikipedia.org/wiki/Functional_programming"" rel=""nofollow"">functional style</a> (stateless and without side effects), which accept and return basic data types.</p>

<p>This will provide a one-to-one mapping from your Python prototype code to the eventual compiled code, and will let you use <a href=""https://docs.python.org/library/ctypes.html"" rel=""nofollow"">ctypes</a> easily and avoid a whole bunch of headaches.</p>

<p>For peak fitting, you'll almost certainly need to use arrays, which will complicate things a little, but is still very doable with ctypes.</p>

<p>If you really want to use more complicated data structures, or modify the passed arguments, <a href=""http://www.swig.org/"" rel=""nofollow"">SWIG</a> or <a href=""https://docs.python.org/extending/"" rel=""nofollow"">Python's standard C-extension interface</a> will let you do what you want, but with some amount of hassle.</p>

<p>For what you're doing, you may also want to check out <a href=""http://numpy.scipy.org/"" rel=""nofollow"">NumPy</a>, which might do some of the work you would want to push to C, as well as offering <a href=""http://projects.scipy.org/scipy/numpy/wiki/NumPyCAPI"" rel=""nofollow"">some additional help in moving data back and forth between Python and C</a>.</p>
"
195021,"<blockquote>
  <p>The solution should work inside the same process (like in the example above) as well as when another process has opened the file.</p>
</blockquote>

<p>If by 'another process' you mean 'whatever process' (i.e. not your program), in Linux there's no way to accomplish this relying only on system calls (<em>fcntl</em> &amp; friends). What you want is <a href=""http://en.wikipedia.org/wiki/File_locking"">mandatory locking</a>, and the Linux way to obtain it is a bit more involved:</p>

<p>Remount the partition that contains your file with the <em>mand</em> option:</p>

<pre><code># mount -o remount,mand /dev/hdXY</code></pre>

<p>Set the <em>sgid</em> flag for your file:</p>

<pre><code># chmod g-x,g+s yourfile</code></pre>

<p>In your Python code, obtain an exclusive lock on that file:</p>

<pre><code>fcntl.flock(fd, fcntl.LOCK_EX)</code></pre>

<p>Now even <em>cat</em> will not be able to read the file until you release the lock. </p>
"
44098,"<p>You do it the exact same way.  Put a string in as the first statement in the module.</p>
"
339329,"<p>Here's an approach that works really well.</p>

<pre><code>abc= ONETHING( ... )
xyz= ANOTHERTHING( ... )
pqr= SOMETHING( this=abc, that=123, more=(xyz,123) )
</code></pre>

<p>Declarative.  Easy-to-parse.  </p>

<p>And...</p>

<p>It's actually Python.  A few class declarations and the work is done.  The DSL is actually class declarations.</p>

<p>What's important is that a DSL merely creates objects.  When you define a DSL, first you have to start with an object model.  Later, you put some syntax around that object model.  You don't start with syntax, you start with the model.</p>
"
298443,"<p>The high CPU usage will be due to fetching 100 entities per request. You have several options here:</p>

<ul>
<li>Using Profile.all().fetch(100) will be ever so slightly faster, and easier to read besides.</li>
<li>Remove any extraneous properties from the Profile model. There's significant per-property overhead deserializing entities.</li>
<li>Display fewer users per page.</li>
<li>Store the output of this page in memcache, and render from memcache whenever you can. That way, you don't need to generate the page often, so it doesn't matter so much if it's high CPU.</li>
</ul>
"
296621,"<p>If you're not recursing, you don't need walk().</p>

<p>Federico's answer with glob is fine, assuming you aren't going to have any directories called âsomething.extâ. Otherwise try:</p>

<pre><code>import os, shutil

for basename in os.listdir(srcdir):
    if basename.endswith('.ext'):
        pathname = os.path.join(srcdir, basename)
        if os.path.isfile(pathname):
            shutil.copy2(pathname, dstdir)
</code></pre>
"
222334,"<p>A flaw with this approach is that it may give the user the ability to to more than you want them to.  They can call <em>any</em> single-parameter function in that namespace just by providing the name.  You can help guard against this with a few checks (eg. isinstance(SomeBaseClass, theClass), but its probably better to avoid this approach.  Another disadvantage is that it constrains your class placement.  If you end up with dozens of such classes and decide to group them into modules, your lookup code will stop working.</p>

<p>You have several alternative options:</p>

<ol>
<li><p>Create an explicit mapping:</p>

<pre><code> class_lookup = {'Class1' : Class1, ... }
 ...
 result = class_lookup[className](param).html
</code></pre>

<p>though this has the disadvantage that you have to re-list all the classes.</p></li>
<li><p>Nest the classes in an enclosing scope.  Eg. define them within their own module, or within an outer class:</p>

<pre><code>class Namespace(object):
    class Class1(object):
        ...
    class Class2(object):
        ...
...
result = getattr(Namespace, className)(param).html
</code></pre>

<p>You do inadvertantly expose a couple of additional class variables here though (__bases__, __getattribute__ etc) - probably not exploitable, but not perfect.</p></li>
<li><p>Construct a lookup dict from the subclass tree.  Make all your classes inherit from a single baseclass.  When all classes have been created, examine all baseclasses and populate a dict from them.  This has the advantage that you can define your classes anywhere (eg. in seperate modules), and so long as you create the registry after all are created, you will find them.</p>

<pre><code>def register_subclasses(base):
    d={}
    for cls in base.__subclasses__():
        d[cls.__name__] = cls
        d.update(register_subclasses(cls))
    return d


class_lookup = register_subclasses(MyBaseClass)
</code></pre>

<p>A more advanced variation on the above is to use self-registering classes - create a metaclass than automatically registers any created classes in a dict.  This is probably overkill for this case - its useful in some ""user-plugins"" scenarios though.</p></li>
</ol>
"
323911,"<p>When dealing with generators where you need some context, I often use the below utility function to give a sliding window view on an iterator:</p>

<pre><code>import collections, itertools

def window(it, winsize, step=1):
    """"""Sliding window iterator.""""""
    it=iter(it)  # Ensure we have an iterator
    l=collections.deque(itertools.islice(it, winsize))
    while 1:  # Continue till StopIteration gets raised.
        yield tuple(l)
        for i in range(step):
            l.append(it.next())
            l.popleft()
</code></pre>

<p>It'll generate a view of the sequence N items at a time, shifting step places over.  eg.</p>

<pre><code>&gt;&gt;&gt; list(window([1,2,3,4,5],3))
[(1, 2, 3), (2, 3, 4), (3, 4, 5)]
</code></pre>

<p>When using in lookahead/behind situations where you also need to deal with numbers without having a next or previous value, you may want pad the sequence with an appropriate value such as None.</p>

<pre><code>l= range(10)
# Print adjacent numbers
for cur, next in window(l + [None] ,2):
    if next is None: print ""%d is the last number."" % cur
    else: print ""%d is followed by %d"" % (cur,next)
</code></pre>
"
305649,"<p>I had to first rewrite your code before I could understand it:</p>

<pre><code>def OW60(sign=1):
    r1 = random.randint (1, 30)
    r2 = random.randint (1, 30)
    val = sign * (r1 + r2)

    islow  = (r1&lt;=5)  + (r2&lt;=5)
    ishigh = (r1&gt;=26) + (r2&gt;=26)

    if islow == 2 or ishigh == 2:
        return val + OW60(1)
    elif islow == 1 and ishigh == 1:
        return val + OW60(-1)
    else:
        return val
</code></pre>

<p>Maybe you might find this less readable; I don't know. (Do check if it is equivalent to what you had in mind.) Also, regarding the way you use ""result"" in your code -- do you know of Python's <a href=""http://www.diveintopython.org/getting_to_know_python/dictionaries.html"" rel=""nofollow"">dict</a>s?</p>

<p>Anyway, matters of programming style aside: Suppose F(x) is the <a href=""http://en.wikipedia.org/wiki/Cumulative_distribution_function"" rel=""nofollow"">CDF</a> of OW60(1), i.e. </p>

<pre><code>F(x) = the probability that OW60(1) returns a value â¤ x.
</code></pre>

<p>Similarly let </p>

<pre><code>G(x) = the probability that OW60(-1) returns a value â¤ x.
</code></pre>

<p>Then you can calculate F(x) from the definition, by summing over all (30&times;30) possible values of the result of the first throw. For instance, if the first throw is (2,3) then you'll roll again, so this term contributes (1/30)(1/30)(5+F(x-5)) to the expression for F(x). So you'll get some obscenely long expression like</p>

<pre><code>F(x) = (1/900)(2+F(x-2) + 3+F(x-3) + ... + 59+F(x-59) + 60+F(x-60))
</code></pre>

<p>which is a sum over 900 terms, one for each pair (a,b) in [30]&times;[30]. The pairs (a,b) with both â¤ 5 or both â¥26 have a term a+b+F(x-a-b), the pairs with one â¤5 and one â¥26 have a term a+b+G(x-a-b), and the rest have a term like (a+b), because you don't throw again.</p>

<p>Similarly you have </p>

<pre><code>G(x) = (1/900)(-2+F(x-2) + (-3)+F(x-3) + ... + (-59)+F(x-59) + (-60)+F(x-60))
</code></pre>

<p>Of course, you can collect coefficients; the only F terms that occur are from F(x-60) to F(x-52) and from F(x-10) to F(x-2) (for a,bâ¥26 or bothâ¤5), and the only G terms that occur are from G(x-35) to G(x-27) (for one of a,bâ¥26 and the other â¤5), so there are fewer terms than 30 terms. In any case, defining the vector V(x) as </p>

<pre><code>V(x) = [F(x-60) G(x-60) ... F(x-2) G(x-2) F(x-1) G(x-1) F(x) G(x)]
</code></pre>

<p>(say), you have (from those expressions for F and G) a relation of the form </p>

<pre><code>V(x) = A*V(x-1) + B
</code></pre>

<p>for an appropriate matrix A and an appropriate vector B (which you can calculate), so starting from initial values of the form V(x) = [0 0] for x sufficiently small, you can find F(x) and G(x) for x in the range you want to arbitrarily close precision. (And your f(x), the probability of throwing x, is just F(x)-F(x-1), so that comes out as well.)</p>

<p>There might be a better way. All said and done, though, why are you doing this? Whatever kind of distribution you want, there are nice and simple probability distributions, with the appropriate parameters, that have good properties (e.g. small variance, one-sided errors, whatever). There is no reason to make up your own ad-hoc procedure to generate random numbers.</p>
"
251372,"<p>Definitely a lack of standard libraries.  It's also lesser known than Python, Perl or Ruby.</p>
"
252039,"<p>Have you looked at <a href=""http://docs.djangoproject.com/en/dev/ref/contrib/flatpages/#ref-contrib-flatpages"" rel=""nofollow"">flat pages</a> in Django?  It probably does everything you're looking for.</p>
"
252057,"<p>If you want to just create a template for each of them, you could use the <a href=""https://docs.djangoproject.com/en/1.4/ref/generic-views/#django-views-generic-simple-direct-to-template"" rel=""nofollow""><code>direct_to_template</code></a> generic view to serve it up.</p>

<p>Another option would be the <a href=""https://docs.djangoproject.com/en/1.4/ref/contrib/flatpages/"" rel=""nofollow""><code>django.contrib.flatpages</code></a> app, which would let you configure the static URLs and content via the database.</p>
"
306196,"<p>It seems that while the class is being created, Python creates regular function objects. They only get turned into unbound method objects afterwards. Knowing that, this is the only way I could find to do what you want:</p>

<pre><code>def logger(myFunc):
    def new(*args, **keyargs):
        print 'Entering %s.%s' % (myFunc.im_class.__name__, myFunc.__name__)
        return myFunc(*args, **keyargs)

    return new

class C(object):
    def f(self):
        pass
C.f = logger(C.f)
C().f()
</code></pre>

<p>This outputs the desired result.</p>

<p>If you want to wrap all the methods in a class, then you probably want to create a wrapClass function, which you could then use like this:</p>

<pre><code>C = wrapClass(C)
</code></pre>
"
307099,"<p>You should be able to do something like the following:</p>

<pre><code>def save(self, **kwargs):
    super(Publisher, self).save(**kwargs)

    for item in self.item_set.all():
        item.code = ""%s - whatever"" % item.code
</code></pre>

<p>I don't really like what you're doing here, this isn't a good way to relate <code>Item</code> to <code>Publisher</code>.  What is it you're after in the end?</p>
"
128549,"<p>Curt makes a good point: the second version is clearer and will fail at load time rather than later, and unexpectedly.</p>

<p>Normally I don't worry about the efficiency of loading modules, since it's (a) pretty fast, and (b) mostly only happens at startup.</p>

<p>If you have to load heavyweight modules at unexpected times, it probably makes more sense to load them dynamically with the <code>__import__</code> function, and be <b>sure</b> to catch <code>ImportError</code> exceptions, and handle them in a reasonable manner.</p>
"
176972,"<p>Read Tim Bray's <a href=""http://www.tbray.org/ongoing/When/200x/2003/07/30/OnSearchTOC"">series of posts on the subject</a>.</p>

<blockquote>
  <ul>
  <li>Background</li>
  <li>Usage of search engines</li>
  <li>Basics</li>
  <li>Precision and recall</li>
  <li>Search engne intelligence</li>
  <li>Tricky search terms</li>
  <li>Stopwords</li>
  <li>Metadata</li>
  <li>Internationalization</li>
  <li>Ranking results</li>
  <li>XML</li>
  <li>Robots</li>
  <li>Requirements list</li>
  </ul>
</blockquote>
"
301139,"<p>You can use <a href=""http://www.python.org/doc/2.5.2/ref/exec.html""><code>exec</code></a>:</p>

<pre><code>exec ""import myapp.commands.%s"" % command
</code></pre>
"
259266,"<p>Theres a couple ways to run a function on a loop like that - You can either use a list comprehension</p>

<pre><code>test = list('asdf')
[function(x) for x in test]
</code></pre>

<p>and use that result</p>

<p>Or you could use the map function</p>

<pre><code>test = list('asdf')
map(function, test)
</code></pre>

<p>The first answer is more ""pythonic"", while the second is more functional. </p>

<p>EDIT: The second way is also a lot faster, as it's not running arbitrary code to call a function, but directly calling a function using <code>map</code>, which is implemented in C.</p>
"
258310,"<p>Sounds like a job for <a href=""http://docs.djangoproject.com/en/dev/ref/models/querysets/#extra-select-none-where-none-params-none-tables-none-order-by-none-select-params-none""><code>extra</code></a>.</p>

<pre><code>A.objects.extra(
    select={
        'b_count': 'SELECT COUNT(*) FROM yourapp_b WHERE yourapp_b.a_id = yourapp_a.id',
    },
    where=['b_count &lt; 2']
)
</code></pre>

<p>If the B count is something you often need as a filtering or ordering criterion, or needs to be displayed on list views, you could consider denormalisation by adding a b_count field to your A model and using signals to update it when a B is added or deleted:</p>

<pre><code>from django.db import connection, transaction
from django.db.models.signals import post_delete, post_save

def update_b_count(instance, **kwargs):
    """"""
    Updates the B count for the A related to the given B.
    """"""
    if not kwargs.get('created', True) or kwargs.get('raw', False):
        return
    cursor = connection.cursor()
    cursor.execute(
        'UPDATE yourapp_a SET b_count = ('
            'SELECT COUNT(*) FROM yourapp_b '
            'WHERE yourapp_b.a_id = yourapp_a.id'
        ') '
        'WHERE id = %s', [instance.a_id])
    transaction.commit_unless_managed()

post_save.connect(update_b_count, sender=B)
post_delete.connect(update_b_count, sender=B)
</code></pre>

<p>Another solution would be to manage a status flag on the A object when you're adding or removing a related B.</p>

<pre><code>B.objects.create(a=some_a)
if some_a.hidden and some_a.b_set.count() &gt; 1:
    A.objects.filter(id=some_a.id).update(hidden=False)

...

some_a = b.a
some_b.delete()
if not some_a.hidden and some_a.b_set.count() &lt; 2:
    A.objects.filter(id=some_a.id).update(hidden=True)
</code></pre>
"
121572,"<p>With <a href=""http://docs.python.org/lib/module-ctypes.html"">ctypes</a>, you can achieve the same thing with</p>

<pre><code>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; a = (1,2,3)
&gt;&gt;&gt; ctypes.addressof(a)
3077760748L
</code></pre>

<p>Documentation:</p>

<blockquote>
  <p><code>addressof(C instance) -&gt; integer</code><br />
  Return the address of the C instance internal buffer</p>
</blockquote>

<p>Note that in CPython, currently <code>id(a) == ctypes.addressof(a)</code>, but <code>ctypes.addressof</code> should return the real address for each Python implementation, if</p>

<ul>
<li>ctypes is supported</li>
<li>memory pointers are a valid notion.</li>
</ul>

<p><strong>Edit</strong>: added information about interpreter-independence of ctypes</p>
"
252438,"<p>ctypes can be used to access dlls, here's a tutorial:</p>

<p><a href=""http://docs.python.org/library/ctypes.html#module-ctypes"">http://docs.python.org/library/ctypes.html#module-ctypes</a></p>
"
144573,"<p>Changing the decimal working precision to 2 digits is <em>not</em> a good idea, unless you absolutely only are going to perform a single operation.</p>

<p>You should always perform calculations at higher precision than the level of significance, and only round the final result. If you perform a long sequence of calculations and round to the number of significant digits at each step, errors will accumulate. The decimal module doesn't know whether any particular operation is one in a long sequence, or the final result, so it assumes that it shouldn't round more than necessary. Ideally it would use infinite precision, but that is too expensive so the Python developers settled for 28 digits.</p>

<p>Once you've arrived at the final result, what you probably want is quantize:</p>

<pre>
>>> (Decimal('1.00') / Decimal('3.00')).quantize(Decimal(""0.001""))
Decimal(""0.333"")
</pre>

<p>You have to keep track of significance manually. If you want automatic significance tracking, you should use interval arithmetic. There are some libraries available for Python, including <a href=""http://pyinterval.googlecode.com/"">pyinterval</a> and <a href=""http://code.google.com/p/mpmath/"">mpmath</a> (which supports arbitrary precision). It is also straightforward to implement interval arithmetic with the decimal library, since it supports directed rounding.</p>

<p>You may also want to read the <a href=""http://speleotrove.com/decimal/decifaq4.html#signif"">Decimal Arithmetic FAQ: Is the decimal arithmetic âsignificanceâ arithmetic?</a></p>
"
175016,"<p>It's not possible AFAIK... which is a pity.  Basically, ElementTree modules assume that the reader is 100% XML compliant, so it shouldn't matter if they output a section as CDATA or some other format that generates the equivalent text.</p>

<p>See <a href=""https://mail.python.org/pipermail/python-list/2005-June/304602.html"" rel=""nofollow"">this thread</a> on the Python mailing list for more info.  Basically, they recommend some kind of DOM-based XML library instead.</p>
"
196974,"<p>Check the <a href=""http://en.wikipedia.org/wiki/Wikipedia%3aLanguage_recognition_chart"" rel=""nofollow"">Language Recognition Chart</a> </p>
"
123217,"<p><a href=""https://docs.python.org/library/shutil.html"" rel=""nofollow"">shutil</a> may have what youâre looking for.</p>
"
229192,"<p>You could use <a href=""http://www.python.org/doc/2.5.2/lib/os-file-dir.html""><code>os.listdir()</code></a> which returns a list of names (for both files and directories) in a given directory. If you need to distinguish between files and directories, call <code>os.stat()</code> on each name.</p>
"
323900,"<p>OK - I've figured it out. You can do it, you just have to use the right import syntax. The correct syntax is:</p>

<p>from prototype.cf.models import Movie</p>

<p>My mistake was not specifying the "".models"" part of that line. D'oh!</p>
"
258491,"<p>I liked @<a href=""#258415"">bobince</a>'s answer (+1), but will up the ante.</p>

<p>Since you have a rather large starting set, you may wish to avoid loading the entire list into memory. Unless you need the whole list for something else, you could use a <a href=""http://www.python.org/doc/2.5.2/ref/genexpr.html"">Python generator expression</a> to perform the same task by building up the filtered list item by item as they're requested:</p>

<pre><code>for filtered_url in (line for line in file if 'CONTENT_ITEM_ID' in line):
   do_something_with_filtered_url(filtered_url)
</code></pre>
"
300556,"<p>This will do it if you absolutely have to have this (I really do agree with the cries of ""non-standard""):</p>

<pre><code>from urllib import unquote

def unquote_u(source):
    result = unquote(source)
    if '%u' in result:
        result = result.replace('%u','\\u').decode('unicode_escape')
    return result

print unquote_u('Tan%u0131m')

&gt; TanÄ±m
</code></pre>
"
47208,"<p>As python is in kind of an transition phase towards python 3 with breaking backward compatibility I don't think it is a good idea to go python 3 only. Based on the <a href=""http://www.python.org/dev/peps/pep-3000/#timeline"" rel=""nofollow"">time line</a> there will be at least one or two following releases of the 2.x series after 2.6/3.0 in october.</p>

<p>Beside not having python 3 available on your target platforms, it will take some time until important external python libraries will be ported and usable on python 3.</p>

<p>So as Matthew suggests staying at 2.4/2.5 and keeping the <a href=""http://www.python.org/dev/peps/pep-3000/#compatibility-and-transition"" rel=""nofollow"">transition</a> plan to python 3 in mind is a solid choice.</p>
"
224187,"<p>The naive approach can be written more compactly as a generator expression:</p>

<pre><code>((a,b,c) for a in [1,2,3] for b in [4,5,6,7,8,9] for c in [1,2])
</code></pre>

<p>The general approach can be written much more simply using a recursive function:</p>

<pre><code>def combinations(*seqs):
  if not seqs: return (item for item in ())
  first, rest = seqs[0], seqs[1:]
  if not rest: return ((item,) for item in first)
  return ((item,) + items for item in first for items in combinations(*rest))
</code></pre>

<p>Sample usage:</p>

<pre><code>&gt;&gt;&gt; for pair in combinations('abc', [1,2,3]):
...   print pair
... 
('a', 1)
('a', 2)
('a', 3)
('b', 1)
('b', 2)
('b', 3)
('c', 1)
('c', 2)
('c', 3)
</code></pre>
"
147687,"<p>Configure and build your appliance at <a href=""https://elasticserver.com/"" rel=""nofollow"">Elastic Server On-Demand</a>.</p>
"
45519,"<p>Perhaps the following would work:</p>

<ul>
<li>Generate your icon image using PIL</li>
<li>Convert the image to .ico format using the python interface to ImageMagick, <a href=""http://www.imagemagick.org/download/python/"">PythonMagick</a></li>
</ul>

<p>I have not tried this approach. The ImageMagick convert command line program was able to convert a .png file to .ico format, so at least ImageMagick supports the .ico format.</p>
"
168072,"<p>I suggest you read <a href=""http://www.python.org/dev/peps/pep-0008/"" rel=""nofollow"">PEP8</a> (styleguide for Python code).</p>
"
45832,"<p>According to <a href=""http://en.wikipedia.org/wiki/Favicon"">Wikipedia</a> modern browsers can handle favicons in PNG format, so maybe you could just generate that?</p>

<p>Alternatively the <a href=""http://en.wikipedia.org/wiki/ICO_(icon_image_file_format)"">ICO article</a> describes the format...</p>
"
46233,"<p>@<a href=""#44878"">Peter Hoffmann</a></p>

<p>Using generator expressions has the benefit of also producing an iterator but saves importing itertools. Furthermore, list comprehensions are generally preferred to map, thus, I'd expect generator expressions to be preferred to imap.</p>

<pre><code>&gt;&gt;&gt; l = [1, ""foo"", 4 ,""bar""]
&gt;&gt;&gt; "","".join(str(bit) for bit in l)
'1,foo,4,bar'
</code></pre>
"
46442,"<p>I think I fixed it. It's turns out I had a simple config error. My ini file read:</p>

<pre><code>sqlalchemy.default.url = [connection string here]
sqlalchemy.pool_recycle = 1800
</code></pre>

<p>The problem is that my <code>environment.py</code> file declared that the engine would only map keys with the prefix: <code>sqlalchemy.default</code> so <code>pool_recycle</code> was ignored.</p>

<p>The solution is to simply change the second line in the ini to:</p>

<pre><code>sqlalchemy.default.pool_recycle = 1800
</code></pre>
"
196854,"<p>There are some nice trick to this in Ruby:</p>

<pre><code>name = ""Peter""
@age = 15 # instance variable
puts ""Hi, you are #{name} and your age is #@age""
</code></pre>
"
71295,"<p>You should also consider the <code>array</code> module in the standard library if all the items in your list or tuple are of the same type.  It can be faster and take less memory.</p>
"
255438,"<p>I guess you mean ""keyword argument"", when you say ""named parameter"". <code>dict.pop()</code> does not accept keyword argument, so this part of the question is moot.</p>

<pre><code>&gt;&gt;&gt; {}.pop('test', d=None)
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: pop() takes no keyword arguments
</code></pre>

<p>That said, the way to detect whether an argument was provided is to use the <code>*args</code> or <code>**kwargs</code> syntax. For example:</p>

<pre><code>def foo(first, *rest):
    if len(rest) &gt; 1:
        raise TypeError(""foo() expected at most 2 arguments, got %d""
                        % (len(rest) + 1))
    print 'first =', first
    if rest:
        print 'second =', rest[0]
</code></pre>

<p>With some work, and using the <code>**kwargs</code> syntax too it is possible to completely emulate the python calling convention, where arguments can be either provided by position or by name, and arguments provided multiple times (by position and name) cause an error.</p>
"
21221,"<p>The best sell of Python I've ever seen was by a manager in our group who had a young daughter.  He used a quote attributed to Einstein:</p>

<blockquote>
  <p>If you can't explain something to a six-year-old, you really don't understand it yourself.</p>
</blockquote>

<p>The next few slides of his presentation demonstrated how he was able to teach his young daughter some basic Python in less than 30 minutes, with examples of the code she wrote and an explanation of what it did.</p>

<p>He ended the presentation with a picture of his daughter and her quote ""Programming is fun!""</p>

<p>I would focus on Python's user friendliness and wealth of libraries and frameworks.  There are also a lot of little libraries that you might not get in other languages, and would have to write yourself (i.e. <a href=""http://blog.programmerslog.com/?p=124"">How a C++ developer writes Python</a>).</p>

<p>Good luck!</p>
"
227810,"<p>A slightly more readable way to do the same thing is:</p>

<pre><code>d = burninate(list(a))
</code></pre>

<p>Here, the <code>list()</code> constructor creates a new list based on <code>a</code>.</p>
"
226536,"<p>I always use something like <code>&lt;a href=""/""&gt;</code> (assuming your home is at the root, of course). I seem to recall looking this up once, and couldn't find a Django variable for this path; at any rate, <code>/</code> seemed pretty easy, anyway.</p>
"
226803,"<p>Last time I was facing a problem like this, I rewrote to use SQLite rather than a dict, and had a massive performance increase. That performance increase was at least partially on account of the database's indexing capabilities; depending on your algorithms, YMMV.</p>

<p>A thin wrapper that does SQLite queries in <code>__getitem__</code> and <code>__setitem__</code> isn't much code to write.</p>
"
332290,"<p><code>class foo(object):</code> is the 'new' way of declaring classes.</p>

<p>This change was made in python 2.2, see <a href=""https://docs.python.org/whatsnew/2.2.html"" rel=""nofollow"">this PEP for an explanation</a> of the differences. </p>
"
301533,"<p>In .NET, C# 3.0 and VB9 provide excellent support for working with XML using LINQ to XML:</p>

<p><a href=""http://msdn.microsoft.com/en-us/library/bb387061.aspx"">LINQ to XML Overview</a></p>
"
301987,"<p>Try <a href=""http://twill.idyll.org/"" rel=""nofollow"">twill</a> - a simple language that allows users to browse the Web from a command-line interface. With twill, you can navigate through Web sites that use forms, cookies, and most standard Web features. More to the point, <em>twill</em> is written in <code>Python</code> and has a <a href=""http://twill.idyll.org/python-api.html"" rel=""nofollow"">python API</a>, e.g:</p>

<pre><code>from twill import get_browser
b = get_browser()

b.go(""http://www.python.org/"")
b.showforms()
</code></pre>
"
306260,"<p>Class functions should always take self as their first argument, so you can use that instead of im_class.</p>

<pre><code>def logger(myFunc):
    def new(self, *args, **keyargs):
        print 'Entering %s.%s' % (self.__class__.__name__, myFunc.__name__)
        return myFunc(self, *args, **keyargs)

    return new 

class C(object):
    @logger
    def f(self):
        pass
C().f()
</code></pre>

<p>at first I wanted to use <code>self.__name__</code> but that doesn't work because the instance has no name. you must use <code>self.__class__.__name__</code> to get the name of the class.</p>
"
163094,"<p>I think that ""the file name"" isn't a very well defined concept when it comes to http transfers. The server might (but is not required to) provide one as ""content-disposition"" header, you can try to get that with <code>remotefile.headers['Content-Disposition']</code>. If this fails, you probably have to parse the URI yourself.</p>
"
36220,"<blockquote>
  <p>But how does this handle language specific sorting rules? Does it take locale into account?</p>
</blockquote>

<p>No, <code>list.sort()</code> is a generic sorting function. If you want to sort according to the Unicode rules, you'll have to define a custom sort key function. You can try using the <a href=""http://jtauber.com/blog/2006/01/27/python_unicode_collation_algorithm/"">pyuca</a> module, but I don't know how complete it is.</p>
"
1852,"<p><strong>On Windows:</strong></p>

<pre><code>import msvcrt
answer=msvcrt.getch()
</code></pre>
"
348423,"<p>Python has an SMTPD module that will be helpful to you for writing a server. You'll probably also want the SMTP module to do the re-send. Both modules are in the standard library at least since version 2.3.</p>
"
100283,"<p>This is a parsing problem, so neither regex not split() are the ""good"" solution. Use a parser generator instead.</p>

<p>I would look closely at <a href=""http://pyparsing.wikispaces.com/"">pyparsing</a>. There have also been some decent articles about pyparsing in the <a href=""http://pymag.phparch.com/"">Python Magazine</a>.</p>
"
100687,"<p>Thanks to <a href=""http://pydev.org/"" rel=""nofollow"">Pydev</a>, you can <a href=""http://pydev.org/manual_adv_pylint.html"" rel=""nofollow"">integrate pylint</a> in the <a href=""http://www.eclipse.org/"" rel=""nofollow"">Eclipse IDE</a> really easily and get a code report each time you save a modified file.</p>
"
237907,"<p>It feels like what you really want is a class representing the weapon, with attributes to handle the base values and calculate hit values with various modifiers. Here's a simple example:</p>

<pre><code>SHORT_RANGE = 'S'
MEDIUM_RANGE = 'M'
LONG_RANGE = 'L'
SHORT_RANGE_MODIFIER = 0.6
MEDIUM_RANGE_MODIFIER = 0.3
LONG_RANGE_MODIFIER = 0.1

class Weapon(object):
    def __init__(self, code_name, full_name, base_hit_value,
                 short_range_modifier=None, medium_range_modifier=None,
                 long_range_modifier=None):
        self.code_name, self.full_name = code_name, full_name
        self.base_hit_value = base_hit_value
        self.range_modifiers = {
            SHORT_RANGE: short_range_modifier or SHORT_RANGE_MODIFIER,
            MEDIUM_RANGE: medium_range_modifier or MEDIUM_RANGE_MODIFIER,
            LONG_RANGE: long_range_modifier or LONG_RANGE_MODIFIER,
        }

    def hit_value(self, range, modifier=1):
        return self.base_hit_value * self.range_modifiers[range] * modifier
</code></pre>

<p>From there, you might create instances of Weapon inside your Character object like so:</p>

<pre><code>    self.rifle = Weapon('CRM', 'rifle', 5)
    self.pistol = Weapon('PST', 'pistol', 10)
</code></pre>

<p>And then if, say, the character fires the pistol at short range:</p>

<pre><code>    hit_value = self.pistol.hit_value(SHORT_RANGE)
</code></pre>

<p>The extra argument to the hit_value() method can be used to pass in character- or situation-specific modifications.</p>

<p>Of course, the next step beyond this would be to directly model the weapons as subclasses of Weapon (perhaps breaking down into specific types of weapons, like guns, bows, grenades, etc., each with their own base values) and add an Inventory class to represent the weapons a character is carrying.</p>

<p>All of this is pretty standard, boring object-oriented design procedure, but for plenty of situations this type of thinking will get you off the ground quickly and provide at least a little bit of basic flexibility.</p>
"
315400,"<p>Um, perhaps, use <a href=""http://linuxcommand.org/man_pages/logrotate8.html"" rel=""nofollow"">logrotate</a> to rotate and compress the logs periodically, if it isn't being done already.</p>
"
242107,"<p>Don't forget that in C, backslash-newline is eliminated before comments are processed, and trigraphs are processed before that (because ??/ is the trigraph for backslash).  I have a C program called SCC (strip C/C++ comments), and here is part of the test code...</p>

<pre><code>"" */ /* SCC has been trained to know about strings /* */ */""!
""\""Double quotes embedded in strings, \\\"" too\'!""
""And \
newlines in them""

""And escaped double quotes at the end of a string\""""

aa '\\
n' OK
aa ""\""""
aa ""\
\n""

This is followed by C++/C99 comment number 1.
// C++/C99 comment with \
continuation character \
on three source lines (this should not be seen with the -C fla
The C++/C99 comment number 1 has finished.

This is followed by C++/C99 comment number 2.
/\
/\
C++/C99 comment (this should not be seen with the -C flag)
The C++/C99 comment number 2 has finished.

This is followed by regular C comment number 1.
/\
*\
Regular
comment
*\
/
The regular C comment number 1 has finished.

/\
\/ This is not a C++/C99 comment!

This is followed by C++/C99 comment number 3.
/\
\
\
/ But this is a C++/C99 comment!
The C++/C99 comment number 3 has finished.

/\
\* This is not a C or C++  comment!

This is followed by regular C comment number 2.
/\
*/ This is a regular C comment *\
but this is just a routine continuation *\
and that was not the end either - but this is *\
\
/
The regular C comment number 2 has finished.

This is followed by regular C comment number 3.
/\
\
\
\
* C comment */
</code></pre>

<p>This does not illustrate trigraphs.  Note that you can have multiple backslashes at the end of a line, but the line splicing doesn't care about how many there are, but the subsequent processing might.  Etc.  Writing a single regex to handle all these cases will be non-trivial (but that is different from impossible).</p>
"
136232,"<p>ctypes is great, but does not handle C++ classes.  I've also found ctypes is about 10% slower than a direct C binding, but that will highly depend on what you are calling.</p>

<p>If you are going to go with ctypes, definitely check out the Pyglet and Pyopengl projects, that have massive examples of ctype bindings.</p>
"
184898,"<p>This is what I have at the top of one my data loading scripts.</p>

<pre><code>import string
import sys
try:
    import settings # Assumed to be in the same directory.
    #settings.DISABLE_TRANSACTION_MANAGEMENT = True
except ImportError:
    sys.stderr.write(""Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n(If the file settings.py does indeed exist, it's causing an ImportError somehow.)\n"" % __file__)
sys.exit(1)

#Setup the django environment with the settings module.
import django
import django.core.management
django.core.management.setup_environ(settings)

from django.db import transaction
</code></pre>

<p>This should all execute before you do much else in your script.</p>

<p>Another method is to use fixtures and manage.py.  Though if you are just trying to accomplish a bulk data load to initialize a database this should work fine.</p>

<p>Also depending on what you are doing you may or may not want to do it all in one transaction.  Uncomment the transaction line above and structure your code similar to this.</p>

<pre><code>transaction.enter_transaction_management()
try:
    #Do some stuff
    transaction.commit()
finally:
    transaction.rollback()
    pass
transaction.leave_transaction_management()
</code></pre>
"
279165,"<p>For one of my projects, I have tested and/or implemented probably six or seven different methods of going from an image to a PDF in the last six months.  Ultimately I ended up coming back to <a href=""http://www.reportlab.org/downloads.html"" rel=""nofollow"">ReportLab</a> (which I had initially avoided for reasons similar to those you described) because all of the others had glaring limitations or outright omissions (such as the inability to set document metadata).</p>

<p>ReportLab isn't as difficult to handle as it appears at first glance and it may save you a lot of headache-laden refactoring later on.  I would strongly suggest you go ahead and use it and therefore know that if you ever want to be able to do more you will have the ability too rather than do what I did and bounce back and forth between a number of different utilities, libraries, and formats.</p>

<p><strong>EDIT:</strong></p>

<p>It is also worth mentioning that you can bypass the Platypus layout system that comes with ReportLab if all you want to do is put bit a of text and imagery on a page.</p>
"
184376,"<p>it depends.</p>

<p>php - symfony is a great framework.  downsides: php, wordy and directory heavy.  propel gets annoying to use.  upsides: php is everywhere and labor is cheap.  well done framework, and good support.  lots of plugins to make your life easier</p>

<p>python - django is also a great framework.  downsides: python programmers can be harder to find, django even harder.  changing your db schema can be somewhat difficult since there are no official migrations.  doesn't quite do mvc like you'd expect.  upsides: does everything you need and has the great python std library and community behind it.</p>

<p>ruby - i've never used merb, so I'll address rails.  upsides: there is a plugin, gem, or recipe for almost anything you could want to do.  easy to use.  downsides: those plugins, gems, and recipes sometimes fail to work in mysterious ways.  monkey patching is often evil.  the community is.. vocal.  opinionated software, and sometimes those opinions are wrong (<em>lack of foreign keys</em>).  rails itself seems like a tower of cards waiting to explode and take hours of your life away.</p>

<p>with all of that said, I'm a freelance php/symfony and ruby/rails developer.  I've worked on several projects in both languages and frameworks.  My latest project is in Rails solely because of ActiveMerchant.  I've been looking for a reason to develop a django app for a while.  If there were an ActiveMerchant like library for django, I probably would have used it.</p>
"
184571,"<p>You can do this by calling SetFont on the parent window (Frame, Dialog, etc) before adding any widgets.  The child widgets will inherit the font.</p>
"
239064,"<p>In Perl, <a href=""http://search.cpan.org/perldoc/P5NCI"" rel=""nofollow"">P5NCI</a> will also do that, at least in some cases.  But it seems to me that anything you use that directly manages interfacing with the dll is going to be user-unfriendly, and if you are going to have a user (scriptor?) friendly wrapper, it might as well be an XS module.</p>

<p>I guess I don't see a meaningful distinction between ""compile and send out executables"" and ""compile and send out scripts"".</p>
"
60219,"<p>You could try <a href=""http://selenium.openqa.org/"">selenium</a>.</p>
"
238646,"<p>the <a href=""http://docs.python.org/library/re#regular-expression-syntax"">re</a> module supports the \w syntax which:</p>

<blockquote>
  <p>If UNICODE is set, this will match the
  characters [0-9_] plus whatever is
  classified as alphanumeric in the
  Unicode character properties database.</p>
</blockquote>

<p>therefore the following examples shows how to match unicode identifiers:</p>

<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; m = re.compile('(?u)[^\W0-9]\w*')
&gt;&gt;&gt; m.match('a')
&lt;_sre.SRE_Match object at 0xb7d75410&gt;
&gt;&gt;&gt; m.match('9')
&gt;&gt;&gt; m.match('ab')
&lt;_sre.SRE_Match object at 0xb7c258e0&gt;
&gt;&gt;&gt; m.match('a9')
&lt;_sre.SRE_Match object at 0xb7d75410&gt;
&gt;&gt;&gt; m.match('unicÃ¶de')
&lt;_sre.SRE_Match object at 0xb7c258e0&gt;
&gt;&gt;&gt; m.match('Ã¶dipus')
&lt;_sre.SRE_Match object at 0xb7d75410&gt;
</code></pre>

<p>So the expression you look for is: (?u)[^\W0-9]\w*</p>
"
137320,"<p>Don't waste time profiling.  The time is always in the database operations.  Do as few as possible.  Just the minimum number of inserts.</p>

<p>Three Things.</p>

<p>One.  Don't SELECT over and over again to conform the Date, Hostname and Person dimensions.  Fetch all the data ONCE into a Python dictionary and use it in memory.  Don't do repeated singleton selects.  Use Python.</p>

<p>Two.  Don't Update.</p>

<p>Specifically, Do not do this.  It's bad code for two reasons.</p>

<pre><code>cursor.execute(""UPDATE people SET chats_count = chats_count + 1 WHERE id = '%s'"" % person_id)
</code></pre>

<p>It be replaced with a simple SELECT COUNT(*) FROM ... .  Never update to increment a count.  Just count the rows that are there with a SELECT statement.  [If you can't do this with a simple SELECT COUNT or SELECT COUNT(DISTINCT), you're missing some data -- your data model should always provide correct complete counts.  Never update.]</p>

<p>And.  Never build SQL using string substitution.  Completely dumb.</p>

<p>If, for some reason the <code>SELECT COUNT(*)</code> isn't fast enough (benchmark first, before doing anything lame) you can cache the result of the count in another table.  AFTER all of the loads.  Do a <code>SELECT COUNT(*) FROM whatever GROUP BY whatever</code> and insert this into a table of counts.  Don't Update.  Ever.</p>

<p>Three.  Use Bind Variables.  Always.</p>

<pre><code>cursor.execute( ""INSERT INTO ... VALUES( %(x)s, %(y)s, %(z)s )"", {'x':person_id, 'y':time_to_string(time), 'z':channel,} )
</code></pre>

<p>The SQL never changes.  The values bound in change, but the SQL never changes.  This is MUCH faster.  Never build SQL statements dynamically.  Never.  </p>
"
237747,"<p>John, I found that first link as well, but it didn't directly help me with the problem.  It did make me look deeper into quantize though.</p>

<p>I came up with this yesterday before going to bed:</p>

<pre><code>import sys

import PIL
import Image

PALETTE = [
    0,   0,   0,  # black,  00
    0,   255, 0,  # green,  01
    255, 0,   0,  # red,    10
    255, 255, 0,  # yellow, 11
] + [0, ] * 252 * 3

# a palette image to use for quant
pimage = Image.new(""P"", (1, 1), 0)
pimage.putpalette(PALETTE)

# open the source image
image = Image.open(sys.argv[1])
image = image.convert(""RGB"")

# quantize it using our palette image
imagep = image.quantize(palette=pimage)

# save
imagep.save('/tmp/cga.png')
</code></pre>

<p>TZ.TZIOY, your solution seems to work along the same principles.  Kudos, I should have stopped working on it and waited for your reply.  Mine is a bit simpler, although definately not more logical than yours.  PIL is cumbersome to use.  Yours explains what's going on to do it.</p>
"
60702,"<p>I think you'll want something based on sockets. </p>

<p>If you want RPC rather than just IPC I would suggest something like XML-RPC/SOAP which runs over HTTP, and can be used from any language.</p>
"
60662,"<p>How about <a href=""http://incubator.apache.org/thrift/"">Facebook's Thrift</a>?</p>

<blockquote>
  <p>Thrift is a software framework for scalable cross-language services development. It combines a software stack with a code generation engine to build services that work efficiently and seamlessly between C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, Smalltalk, and OCaml.</p>
</blockquote>
"
103890,"<p>My favorite, and the shortest one, is this:</p>

<pre><code>li2 = sum(li, [])
</code></pre>

<p>and</p>

<pre><code>s = ','.join(li2)
</code></pre>

<p>EDIT: use <code>sum</code> instead of <code>reduce</code>, (thanks <a href=""http://stackoverflow.com/users/17624/thomas-wouters"">Thomas Wouters</a>!)</p>
"
60723,"<p>This is a simple test program I knocked up:</p>

<pre><code>#!/usr/bin/env python

TEST1=""""""
#include ""Foo.h""
#define bar foo\\
    x
#include ""Bar.h""
""""""

TEST2=""""""
#define bar foo
#define x 1 \\
    12 \\
    2 \\\\ 3
Foobar
""""""

TEST3=""""""
#define foo(x) if(x) \\
doSomething(x)
""""""

TEST4=""""""
#define foo(x) if(x) \\
doSomething(x)
normalCode();
""""""

import re
matcher = re.compile(r""^[ \t]*#define(.*\\\n)+.*$"",re.MULTILINE)

def extractDefines(s):
    mo = matcher.search(s)
    if not mo:
    	print mo
    	return
    print mo.group(0)

extractDefines(TEST1)
extractDefines(TEST2)
extractDefines(TEST3)
extractDefines(TEST4)
</code></pre>

<p>The re I used:</p>

<pre><code>r""^[ \t]*#define(.*\\\n)+.*$""
</code></pre>

<p>Is very similar to the one use used, the changes:</p>

<ol>
<li>[ \t] To avoid newlines at the start
of the define.</li>
<li>I rely on + being
greedy, so I can use a simple .*$ at
the end to get the first line of the
define that doesn't end with \</li>
</ol>
"
283706,"<p><a href=""http://docs.python.org/library/stdtypes.html#str.join"">string.join</a> the list values separated by commas, and use the <a href=""http://docs.python.org/library/stdtypes.html#string-formatting"">format operator</a> to form a query string.</p>

<pre><code>myquery = ""select name from studens where id in (%s)"" % "","".join(map(str,mylist))
</code></pre>

<p>(Thanks, <a href=""http://stackoverflow.com/users/1199/blair-conrad"">blair-conrad</a>)</p>
"
186483,"<p>With the existence of the following syntax:</p>

<pre><code>import some_other_module as some_module
</code></pre>

<p>the maintainability argument of style 2 is no longer relevant.</p>

<p>I tend to use style 1. Normally, I find that I explicitly reference the imported package name only a few times in a typical Python program. Everything else is methods on the object, which of course don't need to reference the imported package.</p>
"
347588,"<p>Look at <a href=""http://www.python.org/dev/peps/pep-0333/"" rel=""nofollow"">PEP 333</a> for an excellent design pattern for a very lightweight web server.  If your server has this exact API, you can reuse it in a lot of context with a lot of other products.</p>

<p>PEP 333 (WSGI) suggests that you don't directly return the page, but you provide the HTML page to a ""start_response"" callable object, which wraps your HTML in the proper HTTP response, with the proper headers.</p>
"
107721,"<p>Yes, it is enabled by default. You can disable it by using the -u option on the command line when calling python.</p>
"
207775,"<p>If you know the names of your computers you can use:</p>

<pre><code>import socket
IP1 = socket.gethostbyname(socket.gethostname()) # local IP adress of your computer
IP2 = socket.gethostbyname('name_of_your_computer') # IP adress of remote computer
</code></pre>

<p>Otherwise you will have to scan for all the IP addresses that follow the same mask as your local computer (IP1), as stated in another answer.</p>
"
207788,"<p>Komodo 5 beta 1 was released in October 2008 and has initial support for Python 3 but I don't think I'd be using it for production code yet.</p>

<p>Given that Python 3 is still a very early release candidate, you may have some trouble finding mature support in IDEs.</p>
"
208227,"<p>You may find the <a href=""https://docs.python.org/2/library/fileinput.html"" rel=""nofollow""><code>fileinput</code></a> module useful.  It is designed for exactly this problem.</p>
"
5168,"<p>Are you running Python on UNIX or Windows?</p>

<p>An alternative to mod_python and FastCGI is mod_wsgi. You can find out more at <a href=""http://code.google.com/p/modwsgi/"" rel=""nofollow"">modwsgi</a></p>

<p>I have built and installed this on Solaris without problems. I had previously tried mod_python but ran into problems with shared libraries as part of the build. There are <a href=""http://code.google.com/p/modwsgi/wiki/InstallationInstructions"" rel=""nofollow"">good install docs</a> available.</p>
"
5343,"<p><a href=""http://en.wikipedia.org/wiki/Qt_%28toolkit%29"">Qt</a> (pronounced ""cute"" by its creators[1]) is a cross-platform application development framework, widely used for the development of GUI programs.</p>

<p>Qt uses <strong>C++</strong> with several non-standard extensions implemented by an additional pre-processor that generates standard C++ code before compilation. Qt can also be used in several other programming languages; bindings exist for <strong>Ada</strong> (QtAda)[4], C<strong>#</strong> (Qyoto/Kimono)[5], <strong>Java</strong> (Qt Jambi)[6], <strong>Pascal</strong>, <strong>Perl</strong>, <strong>PHP</strong> (PHP-Qt), <strong>Ruby</strong> (RubyQt), and <strong>Python</strong> (PyQt). It runs on all major platforms, and has extensive internationalization support. Non-GUI features include SQL database access, XML parsing, thread management, network support and a unified cross-platform API for file handling.</p>"
277308,"<p><a href=""http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/"" rel=""nofollow"">pyrex</a> or <a href=""http://cython.org/"" rel=""nofollow"">cython</a> are also good and easy ways for mixing the two worlds.</p>

<p>Wrapping C++ using these tools is a bit trickier then wrapping C but it can be done. <a href=""http://wiki.cython.org/WrappingCPlusPlus"" rel=""nofollow"">Here</a> is the wiki page about it.</p>
"
108547,"<p>Enums have been proposed for inclusion into the language before, but were rejected (see <a href=""http://www.python.org/dev/peps/pep-0354/"" rel=""nofollow"" title=""PEP 354"">http://www.python.org/dev/peps/pep-0354/</a>), though there are existing packages you could use instead of writing your own implementation:</p>

<ul>
<li>enum: <a href=""http://pypi.python.org/pypi/enum"" rel=""nofollow"" title=""enum"">http://pypi.python.org/pypi/enum</a></li>
<li>SymbolType (not quite the same as enums, but still useful): <a href=""http://pypi.python.org/pypi/SymbolType"" rel=""nofollow"" title=""SymbolType"">http://pypi.python.org/pypi/SymbolType</a></li>
<li><a href=""http://pypi.python.org/pypi?:action=search&amp;term=enum&amp;submit=search"" rel=""nofollow"">Or just do a search</a></li>
</ul>
"
56840,"<p>You can switch the data type to a integer:</p>

<pre><code>&gt;&gt;&gt; n = 5.59
&gt;&gt;&gt; int(n * 10) / 10.0
5.5
&gt;&gt;&gt; int(n * 10 + 0.5) 
56
</code></pre>

<p>And then display the number by inserting the locale's decimal separator.</p>

<p>However, <a href=""http://stackoverflow.com/questions/56820/round-in-python-doesnt-seem-to-be-rounding-properly#56833"" rel=""nofollow"">Jimmy's answer</a> is better.</p>
"
56845,"<p>Floating point math is vulnerable to slight, but annoying, precision inaccuracies.  If you can work with integer or fixed point, you will be guaranteed precision.</p>
"
171933,"<p>If you need to look at the ID3 tags in the MP3 files then there are a few modules on CPAN that may help u (for eg...   <a href=""http://search.cpan.org/dist/MP3-Find/"" rel=""nofollow"">MP3::Find</a>    <a href=""http://search.cpan.org/dist/MP3-Tag/"" rel=""nofollow"">MP3::Tag</a> )</p>

<p>Also these articles may help....</p>

<ul>
<li><a href=""http://www.ibm.com/developerworks/linux/library/l-cpmp31.html"" rel=""nofollow"">Cultured Perl: Fun with MP3 and Perl - IBM</a></li>
<li><a href=""https://web.archive.org/web/1/http://articles.techrepublic%2ecom%2ecom/5100-10878_11-5293815.html"" rel=""nofollow"">Reading ID3 tags with Perl's MP3::Tag module - TechRepublic</a></li>
</ul>

<p>I think its the AENC tag you might be looking for. <a href=""http://www.id3.org"" rel=""nofollow"">http://www.id3.org</a></p>

<p>/I3az/</p>
"
172350,"<p>The main idea of 2.6 is to provide a migration path to 3.0. So you can use <code>from __future__ import X</code> slowly migrating one feature at a time until you get all of them nailed down and can move to 3.0. Many of the 3.0 features will flow into 2.6 as well, so you can make the language gap smaller gradually rather than having to migrate everything in one go.</p>

<p>At work, we plan to upgrade from 2.5 to 2.6 first. Then we begin enabling 3.0 features slowly one module at a time. At some point a whole subpart of the system will probably be ready for 3.x.</p>

<p>The only problem are libraries. If a library is never migrated, we are stuck with the old library. But I am pretty confident that we'll get a fine alternative in due time for that part.</p>
"
224052,"<p>You might want to consider a full parser generator. </p>

<p>Regular expressions are good for searching text for small substrings but they're woefully under-powered if you're really interested in parsing the entire file into meaningful data. </p>

<p>They are especially insufficient if the context of the substring is important.</p>

<p>Most people throw regexes at everything because that's what they know. They've never learned any parser generating tools and they end up coding a lot of the production rule composition and semantic action handling that you can get for free with a parser generator. </p>

<p>Regexes are great and all, but if you need a parser they're no substitute.</p>
"
44878,"<p>@jmanning2k using a list comprehension has the downside of creating a new temporary list. The better solution would be using itertools.imap which returns an iterator</p>

<pre><code>from itertools import imap
l = [1, ""foo"", 4 ,""bar""]
"","".join(imap(str, l))
</code></pre>
"
333621,"<p><a href=""http://jcalderone.livejournal.com/39794.html"" rel=""nofollow"">This article</a> is pretty good, and shows you a good way to do it. The second item from the <em>Do</em> list answers your question.</p>

<p><em>shameless copy paste:</em></p>

<blockquote>
  <h1>Filesystem structure of a Python project</h1>
  
  <p><em>by <a href=""http://jcalderone.livejournal.com/profile"" rel=""nofollow"">Jp Calderone</a></em></p>
  
  <p><strong>Do:</strong></p>
  
  <ul>
  <li>name the directory something related to your project. For example, if your
  project is named ""Twisted"", name the
  top-level directory for its source
  files <code>Twisted</code>. When you do releases,
  you should include a version number
  suffix: <code>Twisted-2.5</code>.</li>
  <li>create a directory <code>Twisted/bin</code> and put your executables there, if you
  have any. Don't give them a <code>.py</code>
  extension, even if they are Python
  source files. Don't put any code in
  them except an import of and call to a
  main function defined somewhere else
  in your projects.</li>
  <li>If your project is expressable as a single Python source file, then put it
  into the directory and name it
  something related to your project. For
  example, <code>Twisted/twisted.py</code>. If you
  need multiple source files, create a
  package instead (<code>Twisted/twisted/</code>,
  with an empty
  <code>Twisted/twisted/__init__.py</code>) and place
  your source files in it. For example,
  <code>Twisted/twisted/internet.py</code>.</li>
  <li>put your unit tests in a sub-package of your package (note - this means
  that the single Python source file
  option above was a trick - you always
  need at least one other file for your
  unit tests). For example,
  <code>Twisted/twisted/test/</code>. Of course, make
  it a package with
  <code>Twisted/twisted/test/__init__.py</code>.
  Place tests in files like
  <code>Twisted/twisted/test/test_internet.py</code>.</li>
  <li>add <code>Twisted/README</code> and <code>Twisted/setup.py</code> to explain and
  install your software, respectively,
  if you're feeling nice.</li>
  </ul>
  
  <p><strong>Don't:</strong></p>
  
  <ul>
  <li>put your source in a directory called <code>src</code> or <code>lib</code>. This makes it hard
  to run without installing.</li>
  <li>put your tests outside of your Python package. This makes it hard to
  run the tests against an installed
  version.</li>
  <li>create a package that only has a <code>__init__.py</code> and then put all your code into <code>__init__.py</code>. Just make a module
  instead of a package, it's simpler.</li>
  <li>try to come up with magical hacks to make Python able to import your module
  or package without having the user add
  the directory containing it to their
  import path (either via <code>PYTHONPATH</code> or
  some other mechanism). You will not
  correctly handle all cases and users
  will get angry at you when your
  software doesn't work in their
  environment.</li>
  </ul>
</blockquote>
"
204082,"<p>No, Windows services run on a completely separate hidden desktop and have no access to the logged-on user's desktop. There is no way around this from a service developer's perspective.</p>

<p>In previous versions of Windows, it was possible for a service to be marked as ""allowed to interact with the user desktop"", but this option was removed in XP or Vista (I forget which). Now, services cannot interact with the user desktop.</p>

<p>One solution to your problem might be to have a desktop application that communicates with the service through some IPC method. When the service wants to alert the user of some condition, it would notify the desktop application which would then display a regular message box.</p>
"
204210,"<p>You can actually write programs which will use multiple processors. You cannot do it with threads because of the GIL lock, but you can do it with different process.
Either:</p>

<ul>
<li>use the <a href=""http://www.python.org/doc/2.5.2/lib/module-subprocess.html"">subprocess</a> module, and divide your code to execute a process per processor</li>
<li>have a look at <a href=""http://www.parallelpython.com/content/view/17/31/"">parallelpython</a> module</li>
<li>if you use python > 2.6 have a look at the <a href=""http://docs.python.org/dev/library/multiprocessing.html"">multiprocess</a> module.</li>
</ul>
"
204318,"<p>It depends on which case is ""typical"", because exceptions should model, well, atypical conditions. So, if the typical case is that the <code>instance</code> attribute should exist, then use the second code style. If not having <code>instance</code> is as typical as having <code>instance</code>, then use the first style.</p>

<p>In the specific case of creating a singleton, I'm inclined to go with the first style, because creating a singleton the initial time is a typical use case. :-)</p>
"
167515,"<p>Not the best solution, but you could type:</p>

<pre><code> pound = u'\u00A3'
</code></pre>

<p>Then you have it in a variable you can use in the rest of your session.</p>
"
168328,"<pre><code>mods = ('Project','Links','Profile','Contact')

urlpatterns = patterns('',
   *(('^%s/$'%n, 'mysite.app.views.%s'%n.lower()) for n in mods)
)
</code></pre>
"
168601,"<p>Unless you have a really <em>huge</em> number of views, writing them down explicitly is not too bad, from a style perspective.</p>

<p>You can shorten your example, though, by using the prefix argument of the <code>patterns</code> function:</p>

<pre><code>urlpatterns = patterns('mysite.app.views',
    (r'^Project/$', 'project'),
    (r'^Links/$', 'links'),
    (r'^Profile/$', 'profile'),
    (r'^Contact/$', 'contact'),
)
</code></pre>
"
196763,"<p>Since Stackoverflow already has this feature you just need to get the contents of the search results page and scrape the information you need. Here is the URL for a search by relevance:</p>

<blockquote>
  <p><a href=""http://stackoverflow.com/search?q=python+best+practices&amp;sort=relevance"">http://stackoverflow.com/search?q=python+best+practices&amp;sort=relevance</a></p>
</blockquote>

<p>If you View Source, you'll see that the information you need for each question is on a line like this:</p>

<pre><code>&lt;h3&gt;&lt;a href=""/questions/5119/what-are-the-best-rss-feeds-for-programmersdevelopers#5150"" class=""answer-title""&gt;What are the best RSS feeds for programmers/developers?&lt;/a&gt;&lt;/h3&gt;
</code></pre>

<p>So you should be able to get the first ten by doing a regex search for a string of that form.</p>
"
196851,"<pre><code>&gt;&gt;&gt; from urllib import urlencode
&gt;&gt;&gt; params = urlencode({'q': 'python best practices', 'sort': 'relevance'})
&gt;&gt;&gt; params
'q=python+best+practices&amp;sort=relevance'
&gt;&gt;&gt; from urllib2 import urlopen
&gt;&gt;&gt; html = urlopen(""http://stackoverflow.com/search?%s"" % params).read()
&gt;&gt;&gt; import re
&gt;&gt;&gt; links = re.findall(r'&lt;h3&gt;&lt;a href=""([^""]*)"" class=""answer-title""&gt;([^&lt;]*)&lt;/a&gt;&lt;/h3&gt;', html)
&gt;&gt;&gt; links
[('/questions/5119/what-are-the-best-rss-feeds-for-programmersdevelopers#5150', 'What are the best RSS feeds for programmers/developers?'), ('/questions/3088/best-ways-to-teach-a-beginner-to-program#13185', 'Best ways to teach a beginner to program?'), ('/questions/13678/textual-versus-graphical-programming-languages#13886', 'Textual versus Graphical Programming Languages'), ('/questions/58968/what-defines-pythonian-or-pythonic#59877', 'What defines &amp;#8220;pythonian&amp;#8221; or &amp;#8220;pythonic&amp;#8221;?'), ('/questions/592/cxoracle-how-do-i-access-oracle-from-python#62392', 'cx_Oracle - How do I access Oracle from Python? '), ('/questions/7170/recommendation-for-straight-forward-python-frameworks#83608', 'Recommendation for straight-forward python frameworks'), ('/questions/100732/why-is-if-not-someobj-better-than-if-someobj-none-in-python#100903', 'Why is if not someobj: better than if someobj == None: in Python?'), ('/questions/132734/presentations-on-switching-from-perl-to-python#134006', 'Presentations on switching from Perl to Python'), ('/questions/136977/after-c-python-or-java#138442', 'After C++ - Python or Java?')]
&gt;&gt;&gt; from urlparse import urljoin
&gt;&gt;&gt; links = [(urljoin('http://stackoverflow.com/', url), title) for url,title in links]
&gt;&gt;&gt; links
[('http://stackoverflow.com/questions/5119/what-are-the-best-rss-feeds-for-programmersdevelopers#5150', 'What are the best RSS feeds for programmers/developers?'), ('http://stackoverflow.com/questions/3088/best-ways-to-teach-a-beginner-to-program#13185', 'Best ways to teach a beginner to program?'), ('http://stackoverflow.com/questions/13678/textual-versus-graphical-programming-languages#13886', 'Textual versus Graphical Programming Languages'), ('http://stackoverflow.com/questions/58968/what-defines-pythonian-or-pythonic#59877', 'What defines &amp;#8220;pythonian&amp;#8221; or &amp;#8220;pythonic&amp;#8221;?'), ('http://stackoverflow.com/questions/592/cxoracle-how-do-i-access-oracle-from-python#62392', 'cx_Oracle - How do I access Oracle from Python? '), ('http://stackoverflow.com/questions/7170/recommendation-for-straight-forward-python-frameworks#83608', 'Recommendation for straight-forward python frameworks'), ('http://stackoverflow.com/questions/100732/why-is-if-not-someobj-better-than-if-someobj-none-in-python#100903', 'Why is if not someobj: better than if someobj == None: in Python?'), ('http://stackoverflow.com/questions/132734/presentations-on-switching-from-perl-to-python#134006', 'Presentations on switching from Perl to Python'), ('http://stackoverflow.com/questions/136977/after-c-python-or-java#138442', 'After C++ - Python or Java?')]
</code></pre>

<p>Converting this to a function should be trivial.</p>

<p><strong>EDIT</strong>: Heck, I'll do it...</p>

<pre><code>def get_stackoverflow(query):
    import urllib, urllib2, re, urlparse
    params = urllib.urlencode({'q': query, 'sort': 'relevance'})
    html = urllib2.urlopen(""http://stackoverflow.com/search?%s"" % params).read()
    links = re.findall(r'&lt;h3&gt;&lt;a href=""([^""]*)"" class=""answer-title""&gt;([^&lt;]*)&lt;/a&gt;&lt;/h3&gt;', html)
    links = [(urlparse.urljoin('http://stackoverflow.com/', url), title) for url,title in links]

    return links
</code></pre>
"
122360,"<pre><code>from distutils.sysconfig import get_python_lib
print get_python_lib()
</code></pre>
"
258159,"<p>Nginx with mod_wsgi</p>
"
70841,"<p>Use 'raw_input' for input from a console/terminal.</p>

<p>if you just want a command line argument like a file name or something e.g. </p>

<pre><code>$ python my_prog.py file_name.txt
</code></pre>

<p>then you can use sys.argv...</p>

<pre><code>import sys
print sys.argv
</code></pre>

<p>sys.argv is a list where 0 is the program name, so in the above example sys.argv[1] would be ""file_name.txt""</p>

<p>If you want to have full on command line options use the optparse module.</p>

<p>Pev</p>
"
255210,"<p>This is a functional-style file comparison function. It returns instantly False if the files have different sizes; otherwise, it reads in 4KiB block sizes and returns False instantly upon the first difference:</p>

<pre><code>from __future__ import with_statement
import os
import itertools, functools, operator

def filecmp(filename1, filename2):
    ""Do the two files have exactly the same contents?""
    with open(filename1, ""rb"") as fp1, open(filename2, ""rb"") as fp2:
        if os.fstat(fp1.fileno()).st_size != os.fstat(fp2.fileno()).st_size:
            return False # different sizes â´ not equal
        fp1_reader= functools.partial(fp1.read, 4096)
        fp2_reader= functools.partial(fp2.read, 4096)
        cmp_pairs= itertools.izip(iter(fp1_reader, ''), iter(fp2_reader, ''))
        inequalities= itertools.starmap(operator.ne, cmp_pairs)
        return not any(inequalities)

if __name__ == ""__main__"":
    import sys
    print filecmp(sys.argv[1], sys.argv[2])
</code></pre>

<p>Just a different take :)</p>
"
124255,"<p>Perl is heavily optimized for text processing.  There are so many factors that it's hard to say what's the exact difference.  Text is represented completely differently internally (utf-8 versus utf-16/utf-32) and the regular expression engines are completely different too.  Python's regular expression engine is a custom one and not as much used as the perl one.  There are very few developers working on it (I think it's largely unmaintained) in contrast to the Perl one which is basically the ""core of the language"".</p>

<p>After all Perl is <em>the</em> text processing language.</p>
"
120706,"<p>Make sure you are using lists and no shell expansion:</p>

<pre><code>subprocess.Popen(['command', 'argument1', 'argument2'], shell=False)
</code></pre>
"
258396,"<pre><code>list2 = filter( lambda x: x.find( 'CONTENT_ITEM_ID ') != -1,  list1 )
</code></pre>

<p>The filter calls the function (first parameter) on each element of list1 (second parameter). If the function returns true (non-zero), the element is copied to the output list.</p>

<p>The lambda basically creates a temporary unnamed function. This is just to avoid having to create a function and then pass it, like this:</p>

<pre><code>function look_for_content_item_id( elem ):
    if elem.find( 'CONTENT_ITEM_ID') == -1:
        return 0
    return 1
list2 = filter( look_for_content_item_id, list1 )
</code></pre>
"
252345,"<p>I think it's <em>simply</em> a design, nothing secret, or mysterious.</p>
"
68770,"<p>Static methods in python are called <a href=""http://pyref.infogami.com/classmethod"" rel=""nofollow"">classmethod</a>s. Take a look at the following code</p>

<pre><code>class MyClass:
    def myInstanceMethod(self):
        print 'output from an instance method'
    @classmethod
    def myStaticMethod(cls):
        print 'output from a static method'
MyClass.myInstanceMethod()

Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: unbound method myInstanceMethod() must be called [...]
MyClass.myStaticMethod()
</code></pre>

<p>output from a static method</p>

<p>Notice that when we call the method <em>myInstanceMethod</em>, we get an error. This is because it requires that method be called on an instance of this class. The method <em>myStaticMethod</em> is set as a classmethod using the <a href=""http://www.python.org/dev/peps/pep-0318/"" rel=""nofollow"">decorator</a> <em>@classmethod</em>.</p>

<p>Just for kicks and giggles, we could call <em>myInstanceMethod</em> on the class by passing in an instance of the class, like so:</p>

<pre><code>&gt;&gt;&gt; MyClass.myInstanceMethod(MyClass())
output from an instance method
</code></pre>
"
227854,"<p>A more general solution would be to <code>import copy</code>, and use <code>copy.copy()</code> on the parameter.</p>
"
228333,"<p>The <a href=""http://docs.python.org/library/shelve.html"">shelve</a> module may do it; at any rate, it should be simple to test.  Instead of:</p>

<pre><code>self.lengths = {}
</code></pre>

<p>do:</p>

<pre><code>import shelve
self.lengths = shelve.open('lengths.shelf')
</code></pre>

<p>The only catch is that keys to shelves must be strings, so you'll have to replace</p>

<pre><code>self.lengths[indx]
</code></pre>

<p>with</p>

<pre><code>self.lengths[str(indx)]
</code></pre>

<p>(I'm assuming your keys are just integers, as per your comment to Charles Duffy's post)</p>

<p>There's no built-in caching in memory, but your operating system may do that for you anyway.</p>

<p>[actually, that's not quite true: you can pass the argument 'writeback=True' on creation.  The intent of this is to make sure storing lists and other mutable things in the shelf works correctly.  But a side-effect is that the whole dictionary is cached in memory.  Since this caused problems for you, it's probably not a good idea :-) ]</p>
"
145071,"<p>The iPhone SDK agreement is also rather vague  about whether you're even allowed to run scripting languages (outside of a WebView's Javascript). My reading is that it is OK - as long as none of the scripts you execute are downloaded from the network (so pre-installed and user-edited scripts seem to be OK).</p>

<p>IANAL etc etc.</p>
"
145623,"<p>If you need a finer granularity than lines, you can use Levenshtein distance. Levenshtein distance is a straight-forward measure on how to similar two texts are.<br />
You can also use it to extract the edit logs and can a very fine-grained diff, similar to that on the edit history pages of SO.
Be warned though that Levenshtein distance can be quite CPU- and memory-intensive to calculate, so using difflib,as Douglas Leder suggested, is most likely going to be faster.</p>

<p>Cf. also <a href=""http://stackoverflow.com/questions/132478/how-to-perform-string-diffs-in-java#132547"">this answer</a>.</p>
"
173914,"<p><a href=""http://googlemac.blogspot.com/2008/04/manipulating-keyboard-leds-through.html"" rel=""nofollow"">http://googlemac.blogspot.com/2008/04/manipulating-keyboard-leds-through.html</a></p>
"
196967,"<p>I think the most effective way would be to ask the users to submit english text only :)</p>

<p>You can show a language selection drop-down over your text area with English/ Other as the options. When user selects ""Other"",  disable the text area with a message that only English language is supported [at the moment].</p>
"
49514,"<p>If I'm not mistaken the zip function you use in python <a href=""http://groups.google.com/group/comp.lang.python/browse_thread/thread/195e57735ff6ee56"">creates a pair of the items found in list1 and list2</a>. Basically it still is a for loop with the addition that it will retrieve the data from the two seperate lists for you, instead that you have to do it yourself.</p>

<p>So maybe your best option is to use a <em>standard</em> for loop like this:</p>

<pre><code>for i=1:length(a)
  c(i) = a(i) + b(i);
end
</code></pre>

<p>or whatever you have to do with the data.</p>

<p>If you really are talking about parallel computing then you should take a look at the <a href=""http://www.mathworks.com/products/parallel-computing/"">Parallel Computing Toolbox</a> for matlab, and more specifically at <a href=""http://www.mathworks.com/access/helpdesk/help/toolbox/distcomp/index.html?/access/helpdesk/help/toolbox/distcomp/brb2x2l-1.html"">parfor</a></p>
"
122116,"<p>In Ruby:</p>

<pre><code>a = (0..100).entries.sort_by {rand}.slice! 0, 5
</code></pre>

<p><strong>Update</strong>: Here is a slightly different way:
    a = (0...100).entries.sort_by{rand}[0...5]</p>

<p><strong>EDIT:</strong></p>

<p>and In Ruby 1.9 you can do this:</p>

<pre><code>Array(0..100).sample(5) 
</code></pre>
"
223974,"<p>I agree with ddaa. However, if you want to understand this sort of thing, you can set up a dummy server using something like <code>nc</code> (in *nix) and then open the URL in the interactive Python interpreter.</p>

<p>In one terminal, run <code>nc -l 1234</code> which will open a socket and listen for connections on port 1234 of the local machine. <code>nc</code> will accept an incoming connection and display whatever it reads from the socket. Anything you type into <code>nc</code> will be sent over the socket to the remote connection, in this case Python's <code>urlopen()</code>.</p>

<p>Run Python in another terminal and enter your code, i.e.</p>

<pre><code>data = urllib2.urlopen('http://127.0.0.1:1234')
data.read()
</code></pre>

<p>The call to <code>urlopen()</code> will establish the connection to the server, send the request and then block waiting for a response. You will see that <code>nc</code> prints the HTTP request into it's terminal.</p>

<p>Now type something into the terminal that is running <code>nc</code>. The call to <code>urlopen()</code> will still block until you press ENTER in <code>nc</code>, that is, until it receives a new line character. So <code>urlopen()</code> will not return until it has read at least one new line character. (For those concerned about possible buffering by <code>nc</code>, this is not an issue. <code>urlopen()</code> will block until it sees the first new line character.)</p>

<p>So it should be noted that <code>urlopen()</code> will block until the first new line character is received, after which data can be read from the connection. In practice, HTTP responses are short multiline responses, so <code>urlopen()</code> should return quite quickly.</p>
"
147762,"<p>But it really is ""I don\u2018t like this"" and not ""I don't like this"". The character u'\u2018' is a completely different character than ""'"" (and, visually, should correspond more to '`').</p>

<p>If you're trying to convert encoded unicode into plain ASCII, you could perhaps keep a mapping of unicode punctuation that you would like to translate into ASCII.</p>

<pre><code>punctuation = {
  u'\u2018': ""'"",
  u'\u2019': ""'"",
}
for src, dest in punctuation.iteritems():
  text = text.replace(src, dest)
</code></pre>

<p>There are an awful lot of <a href=""http://www.fileformat.info/info/unicode/block/general_punctuation/images.htm"">punctuation characters in unicode</a>, however, but I suppose you can count on only a few of them actually being used by whatever application is creating the documents you're reading.</p>
"
147791,"<p>If you match all whitespaces the similarity is better:</p>

<pre><code>difflib.SequenceMatcher(lambda x: x in "" \t\n"", doc1, doc2).ratio()
</code></pre>

<p>However, difflib is not ideal to such a problem because these are two nearly identical documents, but typos and such produce differences for difflib where a human wouldn't see many.</p>

<p>Try reading up on <a href=""http://en.wikipedia.org/wiki/Tf-idf"">tf-idf</a>, <a href=""http://en.wikipedia.org/wiki/Bayesian_probability"">Bayesian probability</a>, <a href=""http://en.wikipedia.org/wiki/Vector_space_model"">Vector space Models</a> and <a href=""http://en.wikipedia.org/wiki/W-shingling"">w-shingling</a></p>

<p>I have written a an <a href=""http://hg.codeflow.org/tfclassify"">implementation of tf-idf</a> applying it to a vector space and using the dot product as a distance measure to classify documents.</p>
"
224014,"<p><a href=""http://pyparsing.wikispaces.com/"" rel=""nofollow"">Build a parser</a>?  I can't decide if your data is regular enough for that, but it might be worth looking into.</p>
"
69995,"<p>You can actually do it all with GET methods.  However, you'll want to use a full challenge response protocol for the logins.  (You can hash on the client side using javascript.  You just need to send out a unique challenge each time.)  You'll also want to use SSL to ensure that no one can see the strings as they go across.</p>

<p>In some senses there's no real security difference between GET and POST requests as they both go across in plaintext, in other senses and in practice... GET is are a hell of a lot easier to intercept and is all over most people's logs and your web browser's history. :)</p>

<p>(Or as suggested by the other posters, use a different method entirely like HTTP auth, digest auth or some higher level authentication scheme like AD, LDAP, kerberos or shib.  However I kinda assumed that if you didn't have POST you wouldn't have these either.)</p>
"
305948,"<p>I'm not a Python expert, but does this work?</p>

<pre><code>testFunc.__self__.__class__
</code></pre>

<p>It seems to work for bound methods, but in your case, you may be using an unbound method, in which case this may work better:</p>

<pre><code>testFunc.__objclass__
</code></pre>

<p>Here's the test I used:</p>

<pre><code>Python 2.5.2 (r252:60911, Jul 31 2008, 17:31:22) 
[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; hd = hashlib.md5().hexdigest
&gt;&gt;&gt; hd
&lt;built-in method hexdigest of _hashlib.HASH object at 0x7f9492d96960&gt;
&gt;&gt;&gt; hd.__self__.__class__
&lt;type '_hashlib.HASH'&gt;
&gt;&gt;&gt; hd2 = hd.__self__.__class__.hexdigest
&gt;&gt;&gt; hd2
&lt;method 'hexdigest' of '_hashlib.HASH' objects&gt;
&gt;&gt;&gt; hd2.__objclass__
&lt;type '_hashlib.HASH'&gt;
</code></pre>

<p>Oh yes, another thing:</p>

<pre><code>&gt;&gt;&gt; hd.im_class
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
AttributeError: 'builtin_function_or_method' object has no attribute 'im_class'
&gt;&gt;&gt; hd2.im_class
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
AttributeError: 'method_descriptor' object has no attribute 'im_class'
</code></pre>

<p>So if you want something bulletproof, it should handle <code>__objclass__</code> and <code>__self__</code> too. But your mileage may vary.</p>
"
127601,"<ol>
<li><p>Add to the docs. it is downright crappy</p></li>
<li><p>Help out other users on the dev and user mailing lists. </p></li>
<li><p>TEST PYTHON. bugs in programming languages are real bad. And I have seen someone discover atleast 1 bug in python</p></li>
<li><p>Frequent the #python channel on irc.freenode.net</p></li>
</ol>
"
251566,"<p>Alternatively, if you're on OS X 10.5, you could use Scripting Bridge to delete files via the Finder.  I've done this in Ruby code <a href=""http://osx-trash.rubyforge.org/git?p=osx-trash.git;a=blob;f=bin/trash;h=26911131eacafd659b4d760bda1bd4c99dc2f918;hb=HEAD"">here</a> via RubyCocoa.  The the gist of it is:</p>

<pre><code>url = NSURL.fileURLWithPath(path)
finder = SBApplication.applicationWithBundleIdentifier(""com.apple.Finder"")
item = finder.items.objectAtLocation(url)
item.delete
</code></pre>

<p>You could easily do something similar with PyObjC.</p>
"
126286,"<p><a href=""http://doc.trolltech.com/4.4/qtwebkit.html"">QtWebKit</a> is contained in PyQt4, but I don't know if you can use it without showing a widget. After a cursory look over the documentation, it seems to me you can only get HTML, not a DOM tree.</p>
"
254567,"<p>Since I can't comment on the answers of others I'll write my own.</p>

<p>If you use md5 you definitely must not just md5.update(f.read()) since you'll use too much memory.</p>

<pre><code>def get_file_md5(f, chunk_size=8192):
    h = hashlib.md5()
    while True:
        chunk = f.read(chunk_size)
        if not chunk:
            break
        h.update(chunk)
    return h.hexdigest()
</code></pre>
"
128496,"<p>Although this depends on what you're doing, most applications should be able to just upgrade and then fix everything that breaks.  In my experience, the main things that I've had to fix after an upgrade are</p>

<ol>
<li><p>Changes to some of the funky stuff with models, such as the syntax for following foreign keys.</p></li>
<li><p>A small set of template changes, most notably auto-escaping.</p></li>
<li><p>Anything that depends on the specific structure of Django's internals.  This shouldn't be an issue unless you're doing stuff like dynamically modifying Django internals to change their behavior in a way that's necessary/convenient for your project.</p></li>
</ol>

<p>To summarize, unless you're doing a lot of really weird and/or complex stuff, a simple upgrade should be relatively painless and only require a few changes.</p>
"
176226,"<p>I found these two books very useful when I used to build full-text search engines.</p>

<p><a href=""http://rads.stackoverflow.com/amzn/click/0134638379"">Information Retrieval</a></p>

<p><a href=""http://rads.stackoverflow.com/amzn/click/1558605703"">Managing Gigabytes</a></p>
"
195770,"<p>Setuptools is overkill for me since my program's usage is quite limited, so here's my homegrown alternative.</p>

<p>I bundle a ""third-party"" directory that includes all prerequisites, and use site.addsitedir so they don't need to be installed globally.</p>

<pre><code># program startup code
import os
import sys
import site
path = os.path.abspath(os.path.dirname(__file__))
ver = 'python%d.%d' % sys.version_info[:2]
thirdparty = os.path.join(path, 'third-party', 'lib', ver, 'site-packages')
site.addsitedir(thirdparty)
</code></pre>

<p>Most of my prereqs have setup.py installers.  Each bundled module gets its own ""install"" process, so any customized stuff (e.g. ./configure) can be run automatically.  My install script runs this makefile as part of the install process.</p>

<pre><code># sample third-party/Makefile
PYTHON_VER = `python -c ""import sys; \
        print 'python%d.%d' % sys.version_info[:2]""`
PYTHON_PATH = lib/$(PYTHON_VER)/site-packages
MODS = egenix-mx-base-3.0.0 # etc

.PHONY: all init clean realclean $(MODS)
all: $(MODS)
$(MODS): init
init:
    mkdir -p bin
    mkdir -p $(PYTHON_PATH)
clean:
    rm -rf $(MODS)
realclean: clean
    rm -rf bin
    rm -rf lib

egenix-mx-base-3.0.0:
    tar xzf $@.tar.gz
    cd $@ &amp;&amp; python setup.py install --prefix=..
    rm -rf $@
</code></pre>
"
195784,"<p>Personally, I'd buy <a href=""http://oreilly.com/catalog/9780596516147/"">this book</a> and cram it into the noggin over the course of a week or so.</p>

<p>I've tried tackling SQLAlchemy on the job without learning the details first. I had a hard time with it, because I found the online documentation to be sparse and cryptic (""<em>read the source for more info...</em>""). SA also provides several levels of abstraction at which you can work and I wasn't confident that I was ever working at the correct level.</p>
"
74295,"<p>If you want to exclude classes and other random objects that may have a <code>__call__</code> method, and only check for functions and methods, these three functions in the <a href=""http://docs.python.org/lib/module-inspect.html""><code>inspect</code> module</a></p>

<pre><code>inspect.isfunction(obj)
inspect.isbuiltin(obj)
inspect.ismethod(obj)
</code></pre>

<p>should do what you want in a future-proof way.</p>
"
74327,"<p>Garbage collection is faster (more time efficient) than reference counting, if you have enough memory. For example, a copying gc traverses the ""live"" objects and copies them to a new space, and can reclaim all the ""dead"" objects in one step by marking a whole memory region. This is very efficient, <em>if</em> you have enough memory. Generational collections use the knowledge that ""most objects die young""; often only a few percent of objects have to be copied.</p>

<p>[This is also the reason why gc can be faster than malloc/free]</p>

<p>Reference counting is much more space efficient than garbage collection, since it reclaims memory the very moment it gets unreachable. This is nice when you want to attach finalizers to objects (e.g. to close a file once the File object gets unreachable). A reference counting system can work even when only a few percent of the memory is free. But the management cost of having to increment and decrement counters upon each pointer assignment cost a lot of time, and some kind of garbage collection is still needed to reclaim cycles.</p>

<p>So the trade-off is clear: if you have to work in a memory-constrained environment, or if you need precise finalizers, use reference counting. If you have enough memory and need the speed, use garbage collection.</p>
"
258512,"<p>For completeness; You can also use <code>ifilter</code>. It is like filter, but doesn't build up a list.</p>

<pre><code>from itertools import ifilter

for line in ifilter(lambda line: 'CONTENT_ITEM_ID' in line, urls):
    do_something(line)
</code></pre>
"
259438,"<p>Don't muck with the registry directly. User the SC command-line tool. Namely, SC CREATE</p>

<pre>
    DESCRIPTION:
        SC is a command line program used for communicating with the
        NT Service Controller and services.
    USAGE:
        sc  [command] [service name]  ...

        The option  has the form ""\\ServerName""
        Further help on commands can be obtained by typing: ""sc [command]""
        Commands:
          query-----------Queries the status for a service, or
                          enumerates the status for types of services.
          queryex---------Queries the extended status for a service, or
                          enumerates the status for types of services.
          start-----------Starts a service.
          pause-----------Sends a PAUSE control request to a service.
          interrogate-----Sends an INTERROGATE control request to a service.
          continue--------Sends a CONTINUE control request to a service.
          stop------------Sends a STOP request to a service.
          config----------Changes the configuration of a service (persistant).
          description-----Changes the description of a service.
          failure---------Changes the actions taken by a service upon failure.
          qc--------------Queries the configuration information for a service.
          qdescription----Queries the description for a service.
          qfailure--------Queries the actions taken by a service upon failure.
          delete----------Deletes a service (from the registry).
          create----------Creates a service. (adds it to the registry).
          control---------Sends a control to a service.
          sdshow----------Displays a service's security descriptor.
          sdset-----------Sets a service's security descriptor.
          GetDisplayName--Gets the DisplayName for a service.
          GetKeyName------Gets the ServiceKeyName for a service.
          EnumDepend------Enumerates Service Dependencies.

        The following commands don't require a service name:
        sc   
          boot------------(ok | bad) Indicates whether the last boot should
                          be saved as the last-known-good boot configuration
          Lock------------Locks the Service Database
          QueryLock-------Queries the LockStatus for the SCManager Database
    EXAMPLE:
        sc start MyService
</pre>
"
299377,"<p>Here is a small script to get you started. There are ways to make it ""better"", but not knowing the full scope of what you are trying to accomplish this should be sufficient.</p>

<pre><code>import os

if __name__ == ""__main__"":
   startingDir = os.getcwd() # save our current directory
   testDir = ""\\test"" # note that \ is windows specific, and we have to escape it
   os.chdir(testDir) # change to our test directory
   os.system(""java -jar run_this.jar required_paramter.ext"")
   os.chdir(startingDir) # change back to where we started
</code></pre>
"
260973,"<p>Here is a version using <code>mmap</code> that seems pretty efficient. The big plus is that <code>mmap</code> will automatically handle the file to memory paging requirements for you.</p>

<pre><code>import os
from mmap import mmap

def lastn(filename, n):
    # open the file and mmap it
    f = open(filename, 'r+')
    m = mmap(f.fileno(), os.path.getsize(f.name))

    nlcount = 0
    i = m.size() - 1 
    if m[i] == '\n': n += 1
    while nlcount &lt; n and i &gt; 0:
        if m[i] == '\n': nlcount += 1
        i -= 1
    if i &gt; 0: i += 2

    return m[i:].splitlines()

target = ""target string""
print [l for l in lastn('somefile', 10) if l == target]
</code></pre>
"
178239,"<p>To assist future Googling, these are usually called associative arrays in PHP, and dictionaries in Python.</p>
"
262895,"<p>The best you can do with Python is to obscure things.</p>

<ul>
<li>Strip out all docstrings</li>
<li>Distribute only the .pyc compiled files.</li>
<li>freeze it</li>
<li>Obscure your constants inside a class/module so that help(config) doesn't show everything</li>
</ul>

<p>You may be able to add some additional obscurity by encrypting part of it and decrypting it on the fly and passing it to eval(). But no matter what you do someone can break it.</p>

<p>None of this will stop a determined attacker from disassembling the bytecode or digging through your api with help, dir, etc.</p>
"
259804,"<p>Golden rule of data - don't aggregate too early - it is much easier to glue fields together than separate them. Most people also have a middle name which should be an optional field. Some people have a plethora of middle names. Some people only have <a href=""https://stilgherrian.com/category/only-one-name/"" rel=""nofollow"">one name</a>, one word. Some cultures commonly have a dictionary of middle names, paying homage to the family tree back to the Golgafrincham Ark landing.</p>

<p>You don't need a code solution here - you need a business rule.</p>
"
195247,"<p>Do you mean that you want Windows to prompt for elevation when your program is run? This is controlled by adding a UAC manifest to the EXE's resources. <a href=""http://blogs.msdn.com/shawnfa/archive/2006/04/06/568563.aspx"">This blog entry</a> explains how to create the manifest and how to compile it into a .RES file.</p>

<p>I don't know what facilities py2exe has for embedding custom .RES files, so you might need to use the MT.EXE tool from the Platform SDK to embed the manifest in your program. MT.EXE doesn't need .RES files; it can merge the .manifest file directly.</p>
"
223389,"<p>Witout looking at the code, I'd expect that the following happens:</p>

<ol>
<li><code>urlopen()</code> opens the connection, and sends the query. Then the server starts feeding the reply. At this point, the data accumulates in buffers until they are full and the operating system tells the server to hold on for a while.</li>
<li>Then <code>data.read()</code> empties the buffer, so the operating system tells the server to go on, and the rest of the reply gets downloaded.</li>
</ol>

<p>Naturally, if the reply is short enough, or if the <code>.read()</code> happens quickly enough, then the buffers do not have time to fill up and the download happens in one go.</p>
"
223534,"<p>The <a href=""http://www.crummy.com/software/BeautifulSoup/documentation.html"" rel=""nofollow"">BeautifulSoup documentation</a> should cover everything you need - in this case it looks like you want to use <code>findNext</code>:</p>

<pre><code>headerRows[0][10].findNext('b').string
</code></pre>

<p>A more generic solution which doesn't rely on the <code>&lt;b&gt;</code> tag would be to use the <a href=""http://www.crummy.com/software/BeautifulSoup/documentation.html#arg-text"" rel=""nofollow"">text</a> argument to <code>findAll</code>, which allows you to search only for <code>NavigableString</code> objects:</p>

<pre><code>&gt;&gt;&gt; s = BeautifulSoup(u'&lt;p&gt;Test 1 &lt;span&gt;More&lt;/span&gt; Test 2&lt;/p&gt;')
&gt;&gt;&gt; u''.join([s.string for s in s.findAll(text=True)])
u'Test 1 More Test 2'
</code></pre>
"
44094,"<p>It's easy, you just add a docstring at the top of the module.</p>
"
221832,"<p>Since Twisted is event driven, you don't need a timeout per se. You simply need to set a state variable (like datagramRecieved) when you receive a datagram and register a <a href=""http://twistedmatrix.com/projects/core/documentation/howto/time.html"" rel=""nofollow"">looping  call</a> that checks the state variable, stops the reactor if appropriate then clears state variable:</p>

<pre><code>from twisted.internet import task
from twisted.internet import reactor

datagramRecieved = False
timeout = 1.0 # One second

# UDP code here

def testTimeout():
    global datagramRecieved
    if not datagramRecieved:
        reactor.stop()
    datagramRecieved = False


l = task.LoopingCall(testTimeout)
l.start(timeout) # call every second

# l.stop() will stop the looping calls
reactor.run()
</code></pre>
"
218562,"<p>Solution: in python you have to use win32file.CreateFile() instead of open(). Thanks everyone for telling me what I was trying to do, it helped me find the answer!</p>
"
260148,"<p>If you have libxml2 and libxslt installed, then also install <a href=""http://codespeak.net/lxml/"" rel=""nofollow"">lxml</a>.  It provides a nice, easy-to-use binding for libxml2 and libxslt, and it also implements the ElementTree API.</p>

<p>libxml2/libxslt also come with their own, much lower-level Python bindings, but lxml is much more straightforward and pythonic, and it seems to have great performance as well.</p>
"
120449,"<p>Thanks to Armin for pointing out the 'array' module. I also found the 'struct' module that packs c-style structs in a string:</p>

<p>From the documentation (<a href=""https://docs.python.org/library/struct.html"" rel=""nofollow"">https://docs.python.org/library/struct.html</a>):</p>

<pre><code>&gt;&gt;&gt; from struct import *
&gt;&gt;&gt; pack('hhl', 1, 2, 3)
'\x00\x01\x00\x02\x00\x00\x00\x03'
&gt;&gt;&gt; unpack('hhl', '\x00\x01\x00\x02\x00\x00\x00\x03')
(1, 2, 3)
&gt;&gt;&gt; calcsize('hhl')
8
</code></pre>
"
296303,"<p>Contextual imports are technically more efficient, but I think they can create other problems.</p>

<p>Later, if you want to add a similar except clause, you now have two places to maintain the same block of code. You also now have the problem of testing the exception, to make sure that the first import doesn't cause any unforeseen issues in your code.</p>
"
296565,"<p>Here is a recursive version</p>

<pre><code>def zipfolder(path, relname, archive):
    paths = os.listdir(path)
    for p in paths:
        p1 = os.path.join(path, p) 
        p2 = os.path.join(relname, p)
        if os.path.isdir(p1): 
            zipfolder(p1, p2, archive)
        else:
            archive.write(p1, p2) 

def create_zip(path, relname, archname):
    archive = zipfile.ZipFile(archname, ""w"", zipfile.ZIP_DEFLATED)
    if os.path.isdir(path):
        zipfolder(path, relname, archive)
    else:
        archive.write(path, relname)
    archive.close()
</code></pre>
"
325864,"<p>Check out the looper utility from the <a href=""http://pythonpaste.org/tempita/#bunch-and-looper"">Tempita project</a>. It gives you a wrapper object around the loop item that provides properties such as previous, next, first, last etc.</p>

<p>Take a look at the <a href=""http://svn.pythonpaste.org/Tempita/trunk/tempita/_looper.py"">source code</a> for the looper class, it is quite simple. There are other such loop helpers out there, but I cannot remember any others right now.</p>

<p>Example:</p>

<pre><code>> easy_install Tempita
> python
>>> from tempita import looper
>>> for loop, i in looper([1, 2, 3]):
...     print loop.previous, loop.item, loop.index, loop.next, loop.first, loop.last, loop.length, loop.odd, loop.even
... 
None 1 0 2 True False 3 True 0
1 2 1 3 False False 3 False 1
2 3 2 None False True 3 True 0
</code></pre>
"
149317,"<p>GAE is very useful tool to build scalable web applications. Few of the limitations pointed out by many are no support for background tasks, lack of periodic tasks and strict limit on how much time each HTTP request takes, if a request exceeds that time limit the operation is terminated, which makes running time consuming tasks impossible.</p>

<p><strong>How to run background task ?</strong><br>
In GAE the code is executed only when there is a HTTP request. There is a strict time limit (i think 10secs) on how long the code can take. So if there are no requests then code is not executed. One of the suggested work around was use an external box to send requests continuously, so kind of creating a background task. But for this we need an external box and now we dependent on one more element. The other alternative was sending 302 redirect response so that client re-sends the request, this also makes us dependent on external element which is client. What if that external box is GAE itself ? Everyone who has used functional language which does not support looping construct in the language is aware of the alternative ie recursion is the replacement to loop. So what if we complete part of the computation and do a HTTP GET on the same url with very short time out say 1 second ? This creates a loop(recursion) on php code running on apache.</p>

<pre>
&lt;?php
$i = 0;
if(isset($_REQUEST[""i""])){
        $i= $_REQUEST[""i""];
    sleep(1);
}
$ch = curl_init(""http://localhost"".$_SERVER[""PHP_SELF""].""?i="".($i+1));
curl_setopt($ch, CURLOPT_HEADER, 0);
curl_setopt($ch, CURLOPT_TIMEOUT, 1);
curl_exec($ch);
print ""hello world\n"";
?&gt;
</pre>

<p>Some how this does not work on GAE. So what if we do HTTP GET on some other url say url2 which does HTTP GET on the first url ? This seem to work in GAE. Code for this looks like this.</p>

<pre>
class FirstUrl(webapp.RequestHandler):
    def get(self):
    	self.response.out.write(""ok"")
    	time.sleep(2)
    	urlfetch.fetch(""http://""+self.request.headers[""HOST""]+'/url2')

class SecondUrl(webapp.RequestHandler):
    def get(self):
    	self.response.out.write(""ok"")
    	time.sleep(2)
    	urlfetch.fetch(""http://""+self.request.headers[""HOST""]+'/url1')

application = webapp.WSGIApplication([('/url1', FirstUrl), ('/url2', SecondUrl)])
def main():
    run_wsgi_app(application)
if __name__ == ""__main__"":
    main()
</pre>

<p>Since we found out a way to run background task, lets build abstractions for periodic task (timer) and a looping construct which spans across many HTTP requests (foreach).</p>

<p><strong>Timer</strong><br>
Now building timer is straight forward. Basic idea is to have list of timers and the interval at which each should be called. Once we reach that interval call the callback function. We will use memcache to maintain the timer list. To find out when to call callback, we will store a key in memcache with interval as expiration time. We periodically (say 5secs) check if that key is present, if not present then call the callback and again set that key with interval.</p>

<pre>
def timer(func, interval):
    timerlist = memcache.get('timer')
    if(None == timerlist):
    	timerlist = []
    timerlist.append({'func':func, 'interval':interval})
    memcache.set('timer-'+func, '1', interval)
    memcache.set('timer', timerlist)

def checktimers():
    timerlist = memcache.get('timer')
    if(None == timerlist):
    	return False
    for current in timerlist:
    	if(None == memcache.get('timer-'+current['func'])):
    		#reset interval
    		memcache.set('timer-'+current['func'], '1', current['interval'])
    		#invoke callback function
    		try:
    			eval(current['func']+'()')
    		except:
    			pass
    		return True
    return False

</pre>

<p><strong>Foreach</strong><br>
This is needed when we want to do long taking computation say doing some operation on 1000 database rows or fetch 1000 urls etc. Basic idea is to maintain list of callbacks and arguments in memcache and each time invoke callback with the argument.</p>

<pre>
def foreach(func, args):
    looplist = memcache.get('foreach')
    if(None == looplist):
    	looplist = []
    looplist.append({'func':func, 'args':args})
    memcache.set('foreach', looplist)

def checkloops():
    looplist = memcache.get('foreach')
    if(None == looplist):
    	return False
    if((len(looplist) > 0) and (len(looplist[0]['args']) > 0)):
    	arg = looplist[0]['args'].pop(0)
    	func = looplist[0]['func']
    	if(len(looplist[0]['args']) == 0):
    		looplist.pop(0)
    	if((len(looplist) > 0) and (len(looplist[0]['args']) > 0)):
    		memcache.set('foreach', looplist)
    	else:
    		memcache.delete('foreach')
    	try:
    		eval(func+'('+repr(arg)+')')
    	except:
    		pass
    	return True
    else:
    	return False

# instead of
# foreach index in range(0, 1000):
#   someoperaton(index)
# we will say
# foreach('someoperaton', range(0, 1000))

</pre>

<p>Now building a program which fetches list of urls every one hour is straight forward. Here is the code.</p>

<pre>
def getone(url):
    try:
    	result = urlfetch.fetch(url)
    	if(result.status_code == 200):
    		memcache.set(url, '1', 60*60)
    		#process result.content
    except :
    	pass

def getallurl():
    #list of urls to be fetched
    urllist = ['http://www.google.com/', 'http://www.cnn.com/', 'http://www.yahoo.com', 'http://news.google.com']
    fetchlist = []
    for url in urllist:
    	if (memcache.get(url) is None):
    		fetchlist.append(url)
    #this is equivalent to
    #for url in fetchlist: getone(url)
    if(len(fetchlist) > 0):
    	foreach('getone', fetchlist)

#register the timer callback
timer('getallurl', 3*60)
</pre>

<p>complete code is here <a href=""http://groups.google.com/group/httpmr-discuss/t/1648611a54c01aa"" rel=""nofollow"">http://groups.google.com/group/httpmr-discuss/t/1648611a54c01aa</a>
I have been running this code on appengine for few days without much problem.</p>

<p>Warning: We make heavy use of urlfetch. The limit on no of urlfetch per day is 160000. So be careful not to reach that limit.</p>
"
323912,"<p>A useful options library for C#: <a href=""http://www.ndesk.org/Options"" rel=""nofollow"">NDesk.Options</a></p>
"
168656,"<p>You might be able to use a special view function along these lines:</p>

<pre><code>def router(request, function, module):
    m =__import__(module, globals(), locals(), [function.lower()])
    try:
        return m.__dict__[function.lower()](request)
    except KeyError:
        raise Http404()
</code></pre>

<p>and then a urlconf like this:</p>

<pre><code>(r'^(?P&lt;function&gt;.+)/$', router, {""module"": 'mysite.app.views'}),
</code></pre>

<p>This code is untested but the general idea should work, even though you should remember:</p>

<p><strong>Explicit is better than implicit.</strong></p>
"
168766,"<p>May be <a href=""http://www.python.org/dev/peps/pep-0361/"" rel=""nofollow"">PEP 0631</a> and <a href=""http://docs.python.org/whatsnew/2.6.html"" rel=""nofollow"">What's new in 2.6</a> can provide elements of answer. This last article explains the new features in Python 2.6, released on October 1 2008.</p>
"
169779,"<p>For CherryPy 3.1, you would need to find the right subclass of Session, run its 'setup' classmethod, and then set cherrypy.session to a ThreadLocalProxy. That all happens in cherrypy.lib.sessions.init, in the following chunks:</p>

<pre><code># Find the storage class and call setup (first time only).
storage_class = storage_type.title() + 'Session'
storage_class = globals()[storage_class]
if not hasattr(cherrypy, ""session""):
    if hasattr(storage_class, ""setup""):
        storage_class.setup(**kwargs)

# Create cherrypy.session which will proxy to cherrypy.serving.session
if not hasattr(cherrypy, ""session""):
    cherrypy.session = cherrypy._ThreadLocalProxy('session')
</code></pre>

<p>Reducing (replace FileSession with the subclass you want):</p>

<pre><code>FileSession.setup(**kwargs)
cherrypy.session = cherrypy._ThreadLocalProxy('session')
</code></pre>

<p>The ""kwargs"" consist of ""timeout"", ""clean_freq"", and any subclass-specific entries from tools.sessions.* config.</p>
"
33563,"<p><strong>int</strong> is a value type, so each time you do an assignment, (e.g. both instances of <strong>+=</strong> above), it doesn't modify the object you have on the heap, but replaces the reference with one of the result of the right hand side of the assignment (i.e. an int)</p>

<p><strong>list</strong> isn't a value type, so it isn't bound by the same rules.</p>

<p>this page has more details on the differences: <a href=""http://docs.python.org/ref/objects.html"">http://docs.python.org/ref/objects.html</a></p>

<p>IMO, yes, you should define a new class that keeps an int as an instance variable</p>
"
323891,"<p>Create a hash table which stores function pointers (in C# that'd be delegates) for handling each of the parameters, keyed using the parameter text.  Then you just go through the command line in a loop and make calls to delegates based on what comes out of hash table lookups.</p>
"
50505,"<p>I think it's just <code>__file__</code>   Sounds like you may also want to checkout the <a href=""https://docs.python.org/2/library/inspect.html"" rel=""nofollow"">inspect module</a>.</p>
"
142846,"<p>The BitVector package may be what you need. It's not built in to my python installation, but easy to track down on the python site.</p>

<p><a href=""https://pypi.python.org/pypi/BitVector"" rel=""nofollow"">https://pypi.python.org/pypi/BitVector</a> for the current version.</p>
"
143227,"<p>As a long-time Pythonista, I have to say the path/file manipulation functions in the std library are sub-par: they are not object-oriented and they reflect an obsolete, lets-wrap-OS-system-functions-without-thinking philosophy.  I'd heartily recommend the 'path' module as a wrapper (around os, os.path, glob and tempfile if you must know): much nicer and OOPy: <a href=""http://pypi.python.org/pypi/path.py/2.2"" rel=""nofollow"">http://pypi.python.org/pypi/path.py/2.2</a></p>

<p>This is walk() with the path module:</p>

<pre><code>dir = path(os.environ['HOME'])
for f in dir.walk():
    if f.isfile() and f.endswith('~'):
        f.remove()
</code></pre>
"
229300,"<p>If you have more complex requirements than just the top directory (eg ignore VCS dirs etc), you can also modify the list of directories to prevent os.walk recursing through them.</p>

<p>ie:</p>

<pre><code>def _dir_list(self, dir_name, whitelist):
    outputList = []
    for root, dirs, files in os.walk(dir_name):
        dirs[:] = [d for d in dirs if is_good(d)]
        for f in files:
            do_stuff()
</code></pre>

<p>Note - be careful to mutate the list, rather than just rebind it.  Obviously os.walk doesn't know about the external rebinding.</p>
"
142162,"<p>I had to do this to make it work:</p>

<ol>
<li><p>Open MainMenu.xib. Make sure the class of the app delegate is <code>MyApplicationAppDelegate</code>. I'm not sure if you will have to do this, but I did. It was wrong and so the app delegate never got called in the first place.</p></li>
<li><p>Add <code>statusItem.retain()</code> because it gets autoreleased right away.</p></li>
</ol>
"
79932,"<p>Pop open the source code to <code>unittest.py</code>. <code>unittest.main()</code> is hard-coded to call <code>sys.exit()</code> after running all tests. Use <code>TextTestRunner</code> to run test suites from the prompt.</p>
"
261704,"<p>You should take a look at how the guys at getdropbox.com do it for their client software, including Linux. It's quite tricky to crack and requires some quite creative disassembly to get past the protection mechanisms.</p>
"
119219,"<p>Personally I feel you can write good/bad code in any language. I also firmly believe in learning a <a href=""http://www.linuxjournal.com/article/6536"" rel=""nofollow"">new language every so often</a> for the sake of learning itself. On those grounds I say if you have the time just go for it. Python is a great language that many others are inspired from.</p>

<p>Whether one framework or language is better or not depends on your definition of better. Do you want more work as a programmer? Do you want to develop business apps quickly, or do you want to compute 3D matrix transformations? </p>

<p>Once you've answered those questions you might find yourself taking a completely different direction, say F# if you had particular interest in the financial or scientific sector.</p>
"
262084,"<p><a href=""http://pyglet.org/"">Pyglet</a> has the ability to play back audio through an external library called <a href=""http://code.google.com/p/avbin"">AVbin</a>. Pyglet is a ctypes wrapper around native system calls on each platform it supports. Unfortunately, I don't think anything in the standard library will play audio back.</p>
"
326587,"<p>You could do something like this:</p>

<pre><code>&gt;&gt;&gt; s = ""0010011010011101""
&gt;&gt;&gt; [int(s[x:x+8], 2) for x in range(0, len(s), 8)]
[38, 157]
</code></pre>
"
180009,"<p>This is possible in Python, but is probably not the best way to do it.  The class factory pattern is essentially a workaround for languages that don't have first class classes.  Since Python does have first class classes, you can store a class in a variable, and use that class directly to create instances.  To change what class is created, store a different class in the variable.</p>

<p>For example:</p>

<pre><code>class class1:
  def greet(self):
    print ""hi""

class class2:
  def greet(self):
    print ""hello""

maker = class1
obj1 = maker()

maker = class2
obj2 = maker()

obj1.greet() # prints ""hi""
obj2.greet() # prints ""hello""
</code></pre>
"
117384,"<p>woo!
solved it on my own.</p>

<p>Use </p>

<pre><code>self.combo['selection']
</code></pre>

<p>instead of</p>

<pre><code>self.combo['value']
</code></pre>
"
117794,"<p>Look closely at <a href=""http://www.sqlalchemy.org/"" rel=""nofollow"">SQLAlchemy</a>.  This can probably do much of what you want.  It gives you Python syntax for plain-old SQL that runs on the server.</p>
"
117818,"<p>LINQ is a language feature of C# and VB.NET.  It is a special syntax recognized by the compiler and treated specially.  It is also dependent on another language feature called expression trees.</p>

<p>Expression trees are a <strong>little</strong> different in that they are not special syntax.  They are written just like any other class instantiation, but the compiler does treat them specially under the covers by turning a lambda into an instantiation of a run-time <a href=""http://en.wikipedia.org/wiki/Abstract_syntax_tree"">abstract syntax tree</a>.  These can be manipulated at run-time to produce a command in another language (i.e. SQL).</p>

<p>The C# and VB.NET compilers take LINQ syntax, and turn it into lambdas, then pass those into expression tree instantiations.  Then there are a bunch of framework classes that manipulate these trees to produce SQL.  You can also find other libraries, both MS-produced and third party, that offer ""LINQ providers"", which basically pop a different AST processer in to produce something from the LINQ other than SQL.</p>

<p>So one obstacle to doing these things in another language is the question whether they support run-time AST building/manipulation.  I don't know whether any implementations of Python or Boo do, but I haven't heard of any such features.</p>
"
264871,"<p>I've never used these APIs, but digging through the code, it looks like the class passed in is used to register the name of the class in the registry, so you can't do any initialization of your own.  But there's a method called GetServiceCustomOption that may help:</p>

<p><a href=""http://mail.python.org/pipermail/python-win32/2006-April/004518.html"">http://mail.python.org/pipermail/python-win32/2006-April/004518.html</a></p>
"
265491,"<p>Represent each of your values as a power of two:</p>

<pre><code>testA = 2**0
testB = 2**1
testC = 2**3
</code></pre>

<p>Then to set a value true:</p>

<pre><code>table = table | testB
</code></pre>

<p>To set a value false:</p>

<pre><code>table = table &amp; (~testC)
</code></pre>

<p>To test for a value:</p>

<pre><code>bitfield_length = 0xff
if ((table &amp; testB &amp; bitfield_length) != 0):
    print ""Field B set""
</code></pre>

<p>Dig a little deeper into hexadecimal representation if this doesn't make sense to you. This is basically how you keep track of your boolean flags in an embedded C application as well (if you have limitted memory).</p>
"
342876,"<p>I strongly recommend <a href=""http://www.winprog.org/tutorial/"">theForger's Win32 API Tutorial</a>.  Its a C tutorial, but he pretty much holds your hand and shows you the basics.  Its also pretty short, which is nice in a tutorial.</p>
"
118680,"<p>If BeautifulSoup doesn't work on IronPython, it's because IronPython doesn't implement the whole Python language (the same way CPython does). BeautifulSoup is pure-python, no C-extensions, so the only problem is the compatibility of IronPython with CPython in terms of Python source code.There shouldn't be one, but if there is, the error will be obvious (""no module named ..."", ""no method named ..."", etc.). Google says that only one of BS's tests fails with IronPython. it probably works, and that test may be fixed by now. I wouldn't know.</p>

<p>Try it out and see, would be my advice, unless anybody has anything more concrete.</p>
"
118817,"<pre><code>import os
import shutil
from os import path
from os.path import join, getmtime
from time import time

archive = ""bak""
current = ""cur""

def archive_old_versions(days = 3):
    for root, dirs, files in os.walk(current):
        for name in files:
            fullname = join(root, name)
            if (getmtime(fullname) &lt; time() - days * 60 * 60 * 24):
                shutil.move(fullname, join(archive, name))
</code></pre>
"
43616,"<p>You didn't state what web server you were using, but Apache has a nice little module called <a href=""http://httpd.apache.org/docs/1.3/mod/mod_mime_magic.html"" rel=""nofollow"">Mime Magic</a> which it uses to determine the type of a file when told to do so.  It reads some of the file's content and tries to figure out what type it is based on the characters found.  And as <a href=""http://stackoverflow.com/questions/43580/how-to-find-the-mime-type-of-a-file-in-python#43588"" rel=""nofollow"">Dave Webb Mentioned</a> the <a href=""http://docs.python.org/lib/module-mimetypes.html"" rel=""nofollow"">MimeTypes Module</a> under python will work, provided an extension is handy.</p>

<p>Alternatively, if you are sitting on a UNIX box you can use <code>sys.popen('file -i ' + fileName, mode='r')</code> to grab the MIME type.  Windows should have an equivalent command, but I'm unsure as to what it is. </p>
"
326796,"<p>You can smash this into one for statement, but that'd have messy code duplication.</p>

<pre><code>import sys
import types
this_module = sys.modules[__name__]
[x for x in
    [getattr(this_module, x) for x in dir(this_module)]
    if type(x) == types.ClassType]
</code></pre>
"
151215,"<p>You want the datetime module. </p>

<pre><code>&gt;&gt;&gt; from datetime import datetime 
&gt;&gt;&gt; datetime(2008,08,18) - datetime(2008,09,26) 
datetime.timedelta(4) 
</code></pre>

<p>Or other example:</p>

<pre><code>Python 2.5.2 (r252:60911, Feb 22 2008, 07:57:53) 
[GCC 4.0.1 (Apple Computer, Inc. build 5363)] on darwin 
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. 
&gt;&gt;&gt; import datetime 
&gt;&gt;&gt; today = datetime.date.today() 
&gt;&gt;&gt; print today 
2008-09-01 
&gt;&gt;&gt; last_year = datetime.date(2007, 9, 1) 
&gt;&gt;&gt; print today - last_year 
366 days, 0:00:00 
</code></pre>

<p>As pointed out <a href=""http://python.6.x6.nabble.com/How-Compute-of-Days-between-Two-Dates-tp1711833p1711841.html"" rel=""nofollow"">here</a></p>
"
151642,"<p>Best thing I can think of is to encode it yourself.  How about this subroutine?</p>

<pre><code>from urllib2 import Request, urlopen
from binascii import b2a_base64

def b64open(url, postdata):
  req = Request(url, b2a_base64(postdata), headers={'Content-Transfer-Encoding': 'base64'})
  return urlopen(req)

conn = b64open(""http://www.whatever.com/script.cgi"", u""LibertÃ© ÃgalitÃ© FraternitÃ©"")
# returns a file-like object
</code></pre>

<p>(Okay, so this code just sends POST-data.  But you apparently want multipart-encoded data, as if you clicked an ""Upload File"" button, right?  Well, it's a pretty straightforward combination of what I have here and the answers from the question you linked.)</p>
"
152225,"<p>You probably want to take the problem reverse, i.e. finding all the character without the spaces:</p>

<pre><code>[^ \t\n]*
</code></pre>

<p>Or you want to add the extra characters:</p>

<pre><code>[a-zA-Z0-9&amp;;]*
</code></pre>

<p>In case you want to match HTML entities, you should try something like:</p>

<pre><code>(\w+|&amp;\w+;)*
</code></pre>
"
218102,"<p>Those don't look like regexps you're trying to translate, they look more like unix shell globs.  Python has a <a href=""http://www.python.org/doc/2.5.2/lib/module-fnmatch.html"" rel=""nofollow"">module</a> for doing this already.  It doesn't know about the ""+"" syntax you used, but neither does my shell, and I think the syntax is nonstandard.</p>

<pre><code>&gt;&gt;&gt; import fnmatch
&gt;&gt;&gt; fnmatch.fnmatch(""fooabcdef"", ""*abcde?"")
True
&gt;&gt;&gt; help(fnmatch.fnmatch)
Help on function fnmatch in module fnmatch:

fnmatch(name, pat)
    Test whether FILENAME matches PATTERN.

    Patterns are Unix shell style:

    *       matches everything
    ?       matches any single character
    [seq]   matches any character in seq
    [!seq]  matches any char not in seq

    An initial period in FILENAME is not special.
    Both FILENAME and PATTERN are first case-normalized
    if the operating system requires it.
    If you don't want this, use fnmatchcase(FILENAME, PATTERN).

&gt;&gt;&gt;
</code></pre>
"
118110,"<p>You may also want to consider the <a href=""http://docs.python.org/lib/module-csv.html"" rel=""nofollow"">csv</a> module. I haven't tried it, but it looks like your input data is closer to CSV than to shell syntax (which is what shlex parses).</p>
"
179356,"<p><a href=""http://mail.google.com/support/bin/answer.py?ctx=gmail&amp;hl=en&amp;answer=75725"">Labels are accessed exactly like IMAP folders</a>, according to Google.</p>
"
81087,"<p>I don't really know why you want to do that, but you can install an excepthook that will be called by Python whenever an uncatched exception is raised, and in it clear the array of registered function in the <code>atexit</code> module.</p>

<p>Something like that :</p>

<pre><code>import sys
import atexit

def clear_atexit_excepthook(exctype, value, traceback):
    atexit._exithandlers[:] = []
    sys.__excepthook__(exctype, value, traceback)

def helloworld():
    print ""Hello world!""

sys.excepthook = clear_atexit_excepthook
atexit.register(helloworld)

raise Exception(""Good bye cruel world!"")
</code></pre>

<p>Beware that it may behave incorrectly if the exception is raised from an <code>atexit</code> registered function (but then the behaviour would have been strange even if this hook was not used).</p>
"
264165,"<p>Your client (s in you Python code) is a ServerProxy object. It only accepts return values of type boolean, integers, floats, arrays, structures, dates or binary data.</p>

<p>However, without you doing the wiring, there is no way for it to return another ServerProxy, which you would need for accessing another class. You could probably implement an object cache on the Ruby side, but it would involve keeping track of active session and deciding when to remove objects, how to handle missing objects, etc.</p>

<p>Instead I would suggest exposing a thin wrapper on the ruby side that does atomic operations like:</p>

<pre><code>def foobar()
  return ExampleFoo.new().foo().bar()
end
</code></pre>
"
51023,"<p>You could transform both into <a href=""http://docs.python.org/lib/datetime-timedelta.html"" rel=""nofollow"">timedelta objects</a> and subtract these from each other, which will take care to of the carry-overs. For example:</p>

<pre><code>&gt;&gt;&gt; import datetime as dt
&gt;&gt;&gt; t1 = dt.time(23, 5, 5, 5)
&gt;&gt;&gt; t2 = dt.time(10, 5, 5, 5)
&gt;&gt;&gt; dt1 = dt.timedelta(hours=t1.hour, minutes=t1.minute, seconds=t1.second, microseconds=t1.microsecond)
&gt;&gt;&gt; dt2 = dt.timedelta(hours=t2.hour, minutes=t2.minute, seconds=t2.second, microseconds=t2.microsecond)
&gt;&gt;&gt;  print(dt1-dt2)
13:00:00
&gt;&gt;&gt; print(dt2-dt1)
-1 day, 11:00:00
&gt;&gt;&gt; print(abs(dt2-dt1))
13:00:00
</code></pre>

<p>Negative timedelta objects in Python get a negative day field, with the other fields positive. You could check beforehand: comparison works on both time objects and timedelta objects:</p>

<pre><code>&gt;&gt;&gt; dt2 &lt; dt1
True
&gt;&gt;&gt; t2 &lt; t1
True
</code></pre>
"
51242,"<p>This is probably overkill for such a simple task, but if you plan to do more than that, then it's saner to start from these tools (mechanize, BeautifulSoup) because they are much easier to use than the alternatives (urllib to get content and regexen or some other parser to parse html)</p>

<p>Links:
<a href=""http://crummy.com/software/BeautifulSoup"" rel=""nofollow"">BeautifulSoup</a> 
<a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""nofollow"">mechanize</a></p>

<pre><code>#!/usr/bin/env python
#coding:utf-8

from BeautifulSoup import BeautifulSoup
from mechanize import Browser

#This retrieves the webpage content
br = Browser()
res = br.open(""https://www.google.com/"")
data = res.get_data() 

#This parses the content
soup = BeautifulSoup(data)
title = soup.find('title')

#This outputs the content :)
print title.renderContents()
</code></pre>
"
321322,"<p>Your line</p>

<pre><code>page = urllib.urlopen(""http://www.woarl.com/board/ucp.php?mode=login""[logindata])
</code></pre>

<p>is semantically invalid Python.  Presumably you meant</p>

<pre><code>page = urllib.urlopen(""http://www.woarl.com/board/ucp.php?mode=login"", [logindata])
</code></pre>

<p>which has a comma separating the arguments.  However, what you ACTUALLY want is simply</p>

<pre><code>page = urllib2.urlopen(""http://www.woarl.com/board/ucp.php?mode=login"", logindata)
</code></pre>

<p>without trying to enclose logindata into a list and using the more up-to-date version of urlopen is the urllib2 library.</p>
"
321334,"<pre><code>def non_overridable(f):
    f.non_overridable = True
    return f

class ToughMeta(type):
    def __new__(cls, name, bases, dct):
        non_overridables = get_non_overridables(bases)
        for name in dct:
            if name in non_overridables:
                raise Exception (""You can not override %s, it is non-overridable"" % name)
        return type.__new__(cls, name, bases, dct)

def get_non_overridables(bases):
    ret = []
    for source in bases:
        for name, attr in source.__dict__.items():
            if getattr(attr, ""non_overridable"", False):
                ret.append(name)
        ret.extend(get_non_overridables(source.__bases__))
    return ret

class ToughObject(object):
    __metaclass__ = ToughMeta
    @non_overridable
    def test1():
        pass

# Tests ---------------
class Derived(ToughObject):
    @non_overridable
    def test2(self):
        print ""hello""

class Derived2(Derived):
    def test1(self):
        print ""derived2""

# --------------------
</code></pre>
"
249571,"<p>The <strong>subprocess</strong> module intends to replace several other, older modules and functions, such as:</p>

<ul>
<li>os.system</li>
<li>os.spawn*</li>
<li>os.popen*</li>
<li>popen2.*</li>
<li>commands.*</li>
</ul>

<p>.</p>

<pre><code>import subprocess

process_one = subprocess.Popen(['gqview', '/home/toto/my_images'])

print process_one.pid
</code></pre>
"
128957,"<p>.NETs multi-value cookies work exactly the same way as what you're doing in django using a separator.  They've just abstracted that away for you.  What you're doing is fine and proper, and I don't think Django has anything specific to 'solve' this problem.</p>

<p>I will say that you're doing the right thing, in not using multiple cookies. Keep the over-the-wire overhead down by doing what you're doing.</p>
"
129518,"<p>Have a look at the <a href=""https://docs.python.org/2/library/unittest.html#unittest.TestCase.assertRaises"" rel=""nofollow"">assertRaises</a> method of the <code>unittest</code> module.</p>
"
197547,"<blockquote>
  <p>(e.g., the lengths differ by one or there is extra garbage characters on the end of the decrypted string)</p>
</blockquote>

<p>I missed that bit. There's nothing wrong with your encryption/decryption. It sounds like a padding problem. AES always encodes data in blocks of 128 bits. If the length of your data isn't a multiple of 128 bits the data should be padded before encryption and the padding needs to be removed/ignored after encryption.</p>
"
67533,"<p>I think the first option is considered the best practice. And make the code folder your first package. The Rietveld project developed by Guido van Rossum is a very good model to learn from. Have a look at it: <a href=""http://code.google.com/p/rietveld"" rel=""nofollow"">http://code.google.com/p/rietveld</a></p>

<p>With regard to Django 1.0, I suggest you start using the Django trunk code instead of the GAE built in django port. Again, have a look at how it's done in Rietveld.</p>
"
130652,"<p>Compare the difference to a timedelta that you create:</p>

<pre><code>if datetime.datetime.now() - timestamp &gt; datetime.timedelta(seconds = 5):
    print 'older'
</code></pre>
"
320060,"<p>Unless your tree is really large or you have really high (real) requirements for speed, I would choose the recursive method. Easier to read, easier to code.</p>
"
54313,"<p>Glade is very useful for creating interfaces, it means you can easily change the GUI without doing much coding. You'll find that if you want to do anything useful (e.g. build a treeview) you will have to get familiar with various parts of the GTK documentation  - in practice finding a good tutorial/examples. </p>
"
166521,"<p>I'm afraid there aren't any good platform independent ways to do this other than connecting to another computer and having it send you your IP address.  For example:  <a href=""http://www.findmyipaddress.info/locateipaddresses.html"">findmyipaddress</a>.  Note that this won't work if you need an IP address that's behind NAT unless the computer you're connecting to is behind NAT as well.</p>

<p>Here's one solution that works in Linux:  <a href=""http://code.activestate.com/recipes/439094/"">get the IP address associated with a network interface</a>.</p>
"
216628,"<p>The lower environments should try to match the production environment as closely as possible given the resources available. This applies to all development efforts regardless of whether they are python-based or even web-based. In practical terms, most organizations are not willing to spend that type of money. In this case try to make at least the environment that is directly below production as close to production as possible.</p>

<p>Some of the variable to keep in mind are:</p>

<ul>
<li><p>many times there are multiple machines (app server, database server, web server, load balancers, fire walls, etc) in a production. Keep these all in mind.</p></li>
<li><p>Operating Systems</p></li>
<li><p>number of CPUs. Moving from a one CPU lower environment to a multi core production environment can expose multi-threading issues that were not tested</p></li>
<li><p>load balancing. Many times lower environments are not load balanced. If you are replicating sessions (for instance) across multiple production app servers, you should try to do the same in a lower environment</p></li>
<li><p>Software / library versions</p></li>
</ul>
"
141947,"<p>Outside the admin, see <a href=""http://www.djangosnippets.org/snippets/690/"">this django snippet</a>. Put it in your <code>.save()</code>, and it'll work with objects created programmatically. Inside the admin, as the others have said, use <code>prepopulated_fields</code>.</p>
"
320252,"<p>I can't think of any big algorithmic improvements, but a simple microoptimisation you can make is to bind frequently called methods (such as stack.append / stack.pop) to locals (this saves a dictionary lookup)</p>

<pre><code>def children(self):
    stack = [self.entities]
    push = stack.append
    pop = stack.pop
    while stack: 
        for e in pop():
            yield e
            if e.entities:
                push(e.entities)
</code></pre>

<p>This gives a small (~15%) speedup by my tests (using 100 traversals of an 8-deep tree with 4 children at each node gives me the below timings:)</p>

<pre><code>children     :  5.53942348004
children_bind:  4.77636131253
</code></pre>

<p>Not huge, but worth doing if speed is important.</p>
"
320876,"<p>Actually this code has a bug, since you don't catch <code>]]&gt;</code> appearing in the data you are inserting as CDATA</p>

<p>as per <a href=""http://stackoverflow.com/questions/223652/is-there-a-way-to-escape-a-cdata-end-token-in-xml"">Is there a way to escape a CDATA end token in xml?</a></p>

<p>you should break it into two CDATA's in that case, splitting the <code>]]&gt;</code> between the two.</p>

<p>basically <code>data = data.replace(""]]&gt;"", ""]]]]&gt;&lt;![CDATA[&gt;"")</code><br>
(not necessarily correct, please verify)</p>
"
197922,"<p>Google has a javascript API that has an implementation of language detection.  I've only play tested with it, never used it in production.</p>

<p><a href=""http://code.google.com/apis/ajaxlanguage/documentation/#Detect"" rel=""nofollow"">http://code.google.com/apis/ajaxlanguage/documentation/#Detect</a></p>
"
337279,"<p>"" I was hoping for a 1 thought->1 Python line mapping.""  Wouldn't we all love a programming language that somehow mirrored our natural language?</p>

<p>You can achieve that, you just need to define your unique thoughts once.  Then you have the 1:1 mapping you were hoping for.</p>

<pre><code>def usefulLines( aFile ):
    for line in aFile:
        yield line
        if line == stopterm:
            break
</code></pre>

<p>Is pretty much it.</p>

<pre><code>for line in usefulLines( aFile ):
    # process a line, knowing it occurs BEFORE stopterm.
</code></pre>

<p>There are more general approaches.  The <code>lassevk</code> answers with <code>enum_while</code> and <code>enum_until</code> are generalizations of this simple design pattern.</p>
"
249483,"<p>Note that there is currently no python-mysql adapter for python2.6. If you need MySQL, stick with 2.5 for now.</p>
"
201566,"<p><code>r(a)</code> is a recursive function which attempts to fill in a <code>0</code> in the board in each step.</p>

<p><code>i=a.find('0');~i or exit(a)</code> is the on-success termination.  If no more <code>0</code> values exist in the board, we're done.</p>

<p><code>m</code> is the current value we will try to fill the <code>0</code> with.</p>

<p><code>m
in[(i-j)%9*(i/9^j/9)*(i/27^j/27|i%9/3^j%9/3)or a[j]for
j in range(81)]</code> evaluates to truthy if it is obivously incorrect to put <code>m</code> in the current <code>0</code>.  Let's nickname it ""is_bad"".  This is the most tricky bit. :)</p>

<p><code>is_bad or r(a[:i]+m+a[i+1:]</code> is a conditional recursive step.  It will recursively try to evaluate the next <code>0</code>  in the board iff the current solution candidate appears to be sane.</p>

<p><code>for m in '%d'%5**18</code> enumerates all the numbers from 1 to 9 (inefficiently).</p>
"
171271,"<p>Well, there's emacs, which is arguably a shell written in lisp :)</p>

<p>Seriously though, are you looking for a reimplementation of an existing shell design in a different language such as Python? Or are you looking for a new implementation of a shell language that looks similar to your language of choice?</p>
"
53333,"<p>I retested with MySQL specifying ENGINE = MEMORY and it doesn't change a thing (still 200 ms).  Sqlite3 using an in-memory db gives similar timings as well (250 ms).</p>

<p>The math <a href=""http://stackoverflow.com/questions/51553/why-are-sql-aggregate-functions-so-much-slower-than-python-and-java-or-poor-man#53303"" rel=""nofollow"">here</a> looks correct (at least the size, as that's how big the sqlite db is :-)</p>

<p>I'm just not buying the disk-causes-slowness argument as there is every indication the tables are in memory (the postgres guys all warn against trying too hard to pin tables to memory as they swear the OS will do it better than the programmer)</p>

<p>To clarify the timings, the Java code is not reading from disk, making it a totally unfair comparison if Postgres is reading from the disk and calculating a complicated query, but that's really besides the point, the DB should be smart enough to bring a small table into memory and precompile a stored procedure IMHO.</p>

<p>UPDATE (in response to the first comment below):</p>

<p><em>I'm not sure how I'd test the query without using an aggregation function in a way that would be fair, since if i select all of the rows it'll spend tons of time serializing and formatting everything.  I'm not saying that the slowness is due to the aggregation function, it could still be just overhead from concurrency, integrity, and friends.  I just don't know how to isolate the aggregation as the sole independent variable.</em></p>
"
293335,"<ol>
<li><p>The <code>user_id</code> field is the FK reference from <code>Idea</code> to <code>User</code>.  It looks like you've changed your model, and not updated your database, then you'll have this kind of problem.</p>

<p>Drop the old table, rerun syncdb.</p></li>
<li><p>Your model tables get an <code>id</code> field by default.  You can call it <code>id</code> in your queries.  You can also use the synonym of <code>pk</code>.</p>

<p>If you define your own primary key field you, you don't get the automatic <code>id</code> field.  But you can still use <code>pk</code> to refer to the Primary Key.</p></li>
</ol>
"
217049,"<p>A scriptable object is an object that records the operations done to it and it can store them as a ""script"" which can be replayed.</p>

<p>For example, see: <a href=""https://svn.enthought.com/enthought/browser/AppTools/trunk/docs/source/appscripting/Introduction.rst"">Application Scripting Framework</a></p>

<p>Now, if Alistair didn't know what he asked and really meant ""subscriptable"" objects (as edited by others), then (as mipadi also answered) this is the correct one:</p>

<p>A subscriptable object is any object that implements the <code>__getitem__</code> special method (think lists, dictionaries).</p>
"
152399,"<p>You need to send the application an activateIgnoringOtherApps: message and then send the window makeKeyAndOrderFront:. </p>

<p>In Objective-C this would be:</p>

<pre><code>[NSApp activateIgnoringOtherApps:YES];
[[self window] makeKeyAndOrderFront:self];
</code></pre>
"
43172,"<p>And the answer is like so:</p>

<pre><code>def check_commit_msg(local, master, old_revno, old_revid, new_revno, new_revid):
    branch = local or master
    revision = branch.repository.get_revision(new_revid)
    print revision.message
</code></pre>

<p>local and master are Branch objects, so once you have a revision, it's easy to extract the message.</p>
"
216168,"<p>A bit more explicit:</p>

<pre><code>def rev(l):
    if len(l) == 0: return []
    return [l[-1]] + rev(l[:-1])
</code></pre>

<p><hr></p>

<p>This turns into:</p>

<pre><code>def rev(l):
    if not l: return []
    return [l[-1]] + rev(l[:-1])
</code></pre>

<p>Which turns into:</p>

<pre><code>def rev(l):
    return [l[-1]] + rev(l[:-1]) if l else []
</code></pre>

<p>Which is the same as another answer.</p>

<p><hr></p>

<p>Tail recursive / CPS style (which python doesn't optimize for anyway):</p>

<pre><code>def rev(l, k):
    if len(l) == 0: return k([])
    def b(res):
        return k([l[-1]] + res)
    return rev(l[:-1],b)


&gt;&gt;&gt; rev([1, 2, 3, 4, 5], lambda x: x)
[5, 4, 3, 2, 1]
</code></pre>
"
116047,"<p>Try running pylint with</p>

<pre><code>pylint --ignored-classes=Tags
</code></pre>

<p>If that works, add all the other Django classes - possibly using a script, in say, python :P </p>

<p>The documentation for <code>--ignore-classes</code> is:</p>

<blockquote>
  <p><code>--ignored-classes=&lt;members names&gt;</code><br />
  List of classes names for which member
  attributes should not be checked
  (useful for classes with attributes
  dynamicaly set). [current: %default]</p>
</blockquote>

<p>I should add this is not a particular elegant solution in my view, but it should work.</p>
"
292119,"<p>You might look at how <a href=""http://books.google.com/books?id=W8T2f7F_rs0C&amp;pg=PA147&amp;lpg=PA147&amp;dq=pygame+keyboard+polling&amp;source=web&amp;ots=Chhw92jDrx&amp;sig=lavBFmwAUzB06J5er8T-AHN4eWs&amp;hl=en&amp;sa=X&amp;oi=book_result&amp;resnum=1&amp;ct=result"" rel=""nofollow"">pygame</a> handles this to steal some ideas.</p>
"
336525,"<pre><code>## All you need is this class:

class MainWindow(Window):
    my_button = Button('Click Me')
    my_paragraph = Text('This is the text you wish to place')
    my_alert = AlertBox('What what what!!!')

    @my_button.clicked
    def my_button_clicked(self, button, event):
        self.my_paragraph.text.append('And now you clicked on it, the button that is.')

    @my_paragraph.text.changed
    def my_paragraph_text_changed(self, text, event):
        self.button.text = 'No more clicks!'

    @my_button.text.changed
    def my_button_text_changed(self, text, event):
        self.my_alert.show()


## The Style class is automatically gnerated by the framework
## but you can override it by defining it in the class:
##
##      class MainWindow(Window):
##          class Style:
##              my_blah = {'style-info': 'value'}
##
## or like you see below:

class Style:
    my_button = {
        'background-color': '#ccc',
        'font-size': '14px'}
    my_paragraph = {
        'background-color': '#fff',
        'color': '#000',
        'font-size': '14px',
        'border': '1px solid black',
        'border-radius': '3px'}

MainWindow.Style = Style

## The layout class is automatically generated
## by the framework but you can override it by defining it
## in the class, same as the Style class above, or by
## defining it like this:

class MainLayout(Layout):
    def __init__(self, style):
        # It takes the custom or automatically generated style class upon instantiation
        style.window.pack(HBox().pack(style.my_paragraph, style.my_button))

MainWindow.Layout = MainLayout

if __name__ == '__main__':
    run(App(main=MainWindow))
</code></pre>

<p>It would be relatively easy to do in python with a bit of that metaclass python magic know how. Which I have. And a knowledge of PyGTK. Which I also have. Gets ideas?</p>
"
336975,"<p>metavar seems to be used for generating help : <a href=""http://www.python.org/doc/2.5.2/lib/optparse-generating-help.html"">http://www.python.org/doc/2.5.2/lib/optparse-generating-help.html</a></p>
"
65991,"<p>Or, just make the key a tuple with time.now() as the first field in the tuple.</p>

<p>Then you can retrieve the keys with dictname.keys(), sort, and voila!</p>

<p>Gerry</p>
"
64673,"<p>Make sure you don't have any firewalls blocking SMTP.  The first time I tried to send an email, it was blocked both by Windows Firewall and McAfee - took forever to find them both.</p>
"
311646,"<p>I found out that os.system does what I want, </p>

<p>Thanks for all that tried to help.</p>

<pre><code>os.system(""dir"")
</code></pre>

<p>runs the command just as if it was run from a batch file</p>
"
115379,"<p>To expand upon nosklo's explanation:</p>

<pre><code>a = {}
b = ['some', 'list']
a[b] = 'some' # this won't work
a[tuple(b)] = 'some' # this will, same as a['some', 'list']
</code></pre>
"
290577,"<p>I would suggest <a href=""http://www.djangoproject.com/"" rel=""nofollow"">Django</a>, but given that you ask for something <em>""as easy as it is with php""</em> then you must take a look at PSP (<a href=""http://www.modpython.org/live/current/doc-html/pyapi-psp.html"" rel=""nofollow"">Python Server Pages</a>).
While Django is a complete framework for doing websites, PSP can be used in the same way than PHP, without any framework.</p>
"
85642,"<p>The difference is very platform-specific.</p>

<p>clock() is very different on Windows than on Linux, for example.</p>

<p>For the sort of examples you describe, you probably want the ""timeit"" module instead.</p>
"
327612,"<p>Generally if elif will be fine, but if you have lots of cases, please consider using a dict.</p>

<pre><code>actions = {1: doSomething, 2: doSomethingElse}
actions.get(n, doDefaultThing)()
</code></pre>
"
154725,"<p>It doesn't look particularly familiar, but ""smart"" mergesorts are pretty common out in the wide world of software. </p>

<p>As for whether it makes sense, that depends on what you're sorting, and the relative cost of comparisons vs. memory allocation. A sort that requires up to 2*N bytes of extra memory isn't going to be a good choice in a memory-constrained environment.</p>
"
271252,"<p>To have a default Foreign Key in a model:</p>

<pre><code>mydefault = Type.objects.get(pk=3)

class P(models.Model):
   type = models.ForeignKey(Type, default=mydefault) # Type is another models.Model class
   name = models.CharField()
</code></pre>

<p>Note that using <code>pk=x</code> is pretty ugly, as ideally you shouldn't care what the primary key is equal to.  Try to get to the object you want by some other attribute.</p>

<p><a href=""http://docs.djangoproject.com/en/dev/topics/http/urls/#notes-on-capturing-text-in-urls"" rel=""nofollow"">Here</a>'s how you put defaults in your urls:</p>

<pre><code># URLconf
urlpatterns = patterns('',
    (r'^blog/$', 'blog.views.page'),
    (r'^blog/page(?P&lt;num&gt;\d+)/$', 'blog.views.page'),
)

# View (in blog/views.py)
def page(request, num=""1""):
    # Output the appropriate page of blog entries, according to num.
</code></pre>

<blockquote>
  <p>In the above example, both URL patterns point to the same view -- blog.views.page -- but the first pattern doesn't capture anything from the URL. If the first pattern matches, the page() function will use its default argument for num, ""1"". If the second pattern matches, page() will use whatever num value was captured by the regex.</p>
</blockquote>
"
272363,"<p>If you choose Perl there are plenty of resources for interfacing other languages.</p>

<p><a href=""http://search.cpan.org/dist/Inline/C/C.podI"" rel=""nofollow"">Inline::C</a><br>
<a href=""http://search.cpan.org/dist/Inline-CPP/"" rel=""nofollow"">Inline::CPP</a><br>
<a href=""http://search.cpan.org/dist/Inline-Java/Java.pod"" rel=""nofollow"">Inline::Java</a></p>

<p>From <a href=""http://search.cpan.org/dist/Inline/C/C-Cookbook.pod"" rel=""nofollow"">Inline::C-Cookbook</a>:</p>

<pre><code>use Inline C =&gt; &lt;&lt;'END_C';

  void greet() {
    printf(""Hello, world\n"");
  }
END_C

greet;
</code></pre>

<hr>

<p>With PerlÂ 6 it gets even easier to import subroutine from native library code using <a href=""https://doc.perl6.org/language/nativecall"" rel=""nofollow"">NativeCall</a>.</p>

<pre class=""lang-perl6 prettyprint-override""><code>use v6.c;

sub c-print ( Str() $s ){
  use NativeCall;

  # restrict the function to inside of this subroutine because printf is
  # vararg based, and we only handle '%s' based inputs here

  # it should be possible to handle more but it requires generating
  # a Signature object based on the format string and then do a
  # nativecast with that Signature, and a pointer to printf

  sub printf ( str, str --&gt; int32 ) is native('libc:6') {}

  printf '%s', $s
}

c-print 'Hello World';
</code></pre>

<p>This is just a simple example, you can create a class that has a representation of a Pointer, and have some of the methods be C code from the library you are using. ( only works if the first argument of the C code is the pointer, otherwise you would have to wrap it )</p>

<p>If you need the PerlÂ 6 subroutine/method name to be different you can use the <code>is symbol</code> trait modifier.</p>

<p>There are also Inline modules for PerlÂ 6 as well.</p>
"
342168,"<p><a href=""http://www.madebysofa.com"" rel=""nofollow"">Made By Sofa</a> had a <a href=""http://www.madebysofa.com/#blog/appengine_hosting"" rel=""nofollow"">blog post</a> about their workflow with Google App Engine. In the second last paragraph they have <a href=""http://www.madebysofa.com/media/downloads/appengine_deploy.sh"" rel=""nofollow"">attached a subversion hook</a> that when when someone commits code it will automatically deploy to Google App Engine. It would take a little bit of tweaking (because it works on the server side not the client) but you could do the same.</p>
"
294535,"<p>Never directly scan <code>/etc/passwd</code>.</p>

<p>For instance, on a Linux system I administer, the user accounts are not on <code>/etc/passwd</code>, but on a LDAP server.</p>

<p>The correct way is to use <code>getpwent</code>/<code>getgrent</code> and related C functions (as in @TFKyle's answer), which will get the information on the correct way for each system (on Linux glibc, it reads <code>/etc/nsswitch.conf</code> to know which NSS dynamic libraries to load to get the information).</p>
"
293095,"<p>From [<a href=""http://code.google.com/appengine/docs/python/theenvironment.html"">http://code.google.com/appengine/docs/python/theenvironment.html</a>][1]</p>

<pre><code>from google.appengine.ext import webapp
import os

class PrintEnvironmentHandler(webapp.RequestHandler):
  def get(self):
    for name in os.environ.keys():
      self.response.out.write(""%s = %s&lt;br /&gt;\n"" % (name, os.environ[name]))


  [1]: http://code.google.com/appengine/docs/python/theenvironment.html
</code></pre>
"
321845,"<p>Use <a href=""http://www.logilab.org/859"">xmldiff</a>, a python tool that figures out the differences between two similar XML files, the same way that diff does it.</p>
"
111267,"<p><code>__call__</code> makes any object be callable as a function.</p>

<p>This example will output 8:</p>

<pre><code>class Adder(object):
  def __init__(self, val):
    self.val = val

  def __call__(self, val):
    return self.val + val

func = Adder(5)
print func(3)
</code></pre>
"
273111,"<p>Yes, you can do this kind of thing:</p>

<pre><code>(gdb) print PyRun_SimpleString(""import traceback; traceback.print_stack()"")
  File ""&lt;string&gt;"", line 1, in &lt;module&gt;
  File ""/var/tmp/foo.py"", line 2, in &lt;module&gt;
    i**2
  File ""&lt;string&gt;"", line 1, in &lt;module&gt;
$1 = 0
</code></pre>

<p>It should also be possible to use the <code>pystack</code> command defined in the python <a href=""http://svn.python.org/view/python/trunk/Misc/gdbinit?view=auto"">gdbinit</a> file, but it's not working for me.  It's discussed <a href=""http://wiki.python.org/moin/DebuggingWithGdb"">here</a> if you want to look into it.</p>

<p>Also, if you suspect memory issues, it's worth noting that you can use <a href=""http://valgrind.org/""><code>valgrind</code></a> with python, if you're prepared to recompile it.  The procedure is described <a href=""http://svn.python.org/projects/python/trunk/Misc/README.valgrind"">here.</a></p>
"
289784,"<pre><code>from distutils.core import setup
import py2exe
setup(
        windows=[{""script"": 'app.py', ""icon_resources"": [(1, ""icon.ico"")]}],
        options={""py2exe"":{""unbuffered"": True,
                        ""optimize"": 2,
                        ""bundle_files"" : 1,
                        ""dist_dir"": ""bin""}},
                        zipfile = ""lib.zip"", 
)
</code></pre>
"
215042,"<p>I've found a guide on adding new statements, converted from PDF to HTML by Google:</p>

<p><a href=""http://209.85.173.104/search?q=cache:IjUb82taSq0J:www.troeger.eu/teaching/pythonvm08lab.pdf+python+add+statement&amp;hl=en&amp;ct=clnk&amp;cd=10"">http://209.85.173.104/search?q=cache:IjUb82taSq0J:www.troeger.eu/teaching/pythonvm08lab.pdf+python+add+statement&amp;hl=en&amp;ct=clnk&amp;cd=10</a></p>

<p>Basically, to add new statements, you must edit <code>Python/ast.c</code> (among other things) and recompile the python binary.</p>

<p>While it's possible, don't. You can achieve almost everything via functions and classes (which wont require people to recompile python just to run your script..)</p>
"
156630,"<p>Besides that:</p>

<ol>
<li><a href=""http://wiki.zope.org/zope3/ComponentArchitectureApproach"">Zope component architekture</a></li>
<li><a href=""http://pypi.python.org/pypi/PyContainer"">pyContainer</a></li>
</ol>
"
156851,"<p>Here is a alternative solution in Python 3.0 which allows non-string list items:</p>

<pre><code>&gt;&gt;&gt; alist = ['a', 1, (2, 'b')]
</code></pre>

<ul>
<li><p>a standard way</p>

<pre><code>&gt;&gt;&gt; "", "".join(map(str, alist))
""a, 1, (2, 'b')""
</code></pre></li>
<li><p>the alternative solution</p>

<pre><code>&gt;&gt;&gt; import io
&gt;&gt;&gt; s = io.StringIO()
&gt;&gt;&gt; print(*alist, file=s, sep=', ', end='')
&gt;&gt;&gt; s.getvalue()
""a, 1, (2, 'b')""
</code></pre></li>
</ul>

<p>NOTE: The space after comma is intentional.</p>
"
157023,"<p>Your saving loop is wrong. You save Product outside of the loop. It should be:</p>

<pre><code>if request.method == 'POST':
    PostEntries = len(request.POST)
    x = 1           
    while x &lt; PostEntries:
            p = Product.objects.get(pk=x)
            p.order = int(request.POST.get(str(x),''))
            print ""Itr: "" + str(x)
            x = x + 1
            p.save() # NOTE HERE &lt;- saving in loop instead of outside
    print ""Product Order saved""             
    return HttpResponse(""Saved"")
</code></pre>
"
10778,"<p>OK, what you need is <code>classobj</code> from new module. That would allow you to construct exception classes dynamically (<code>classobj</code> takes a string as an argument for the class name). </p>

<pre><code>import new
myexc=new.classobj(""ExcName"",(Exception,),{})
i=myexc(""This is the exc msg!"")
raise i
</code></pre>

<p>this gives you:</p>

<pre><code>Traceback (most recent call last):
File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
__main__.ExcName: This is the exc msg!
</code></pre>

<p>remember that you can always get the class name through:</p>

<pre><code>self.__class__.__name__
</code></pre>

<p>So, after some string mangling and concatenation, you should be able to obtain appropriate exception class name and construct a class object using that name and then raise that exception.</p>

<p>P.S. - you can also raise strings, but this is deprecated.</p>

<pre><code>raise(self.__class__.__name__+""Exception"")
</code></pre>
"
190078,"<p>Most of the answers given won't deal with lighting levels.</p>

<p>I would first normalize the image to a standard light level before doing the comparison.</p>
"
271918,"<p>For performance you are looking at two things: latency (the responsiveness of the application) and throughput (how many ops per interval). For latency you need to have an acceptable benchmark. For throughput you need to have a minimum acceptable throughput.</p>

<p>These are you starting points. For telling a client how many xyz's you can do per interval then you are going to need to know the hardware and software configuration. Knowing the production hardware is important to getting accurate figures. If you do not know the hardware configuration then you need to devise a way to map your figures from the test hardware to the eventual production hardware.</p>

<p>Without knowledge of hardware then you can really only observe trends in performance over time rather than absolutes.</p>

<p>Knowing the software configuration is equally important. Do you have a clustered server configuration, is it load balanced, is there anything else running on the server? Can you scale your software or do you have to scale the hardware to meet demand.</p>

<p>To know how many clients you can support you need to understand what is a standard set of operations. A quick test is to remove the client and write a stub client and the spin up as many of these as you can. Have each one connect to the server. You will eventually reach the server connection resource limit. Without connection pooling or better hardware you can't get higher than this. Often you will hit a architectural issue before here but in either case you have an upper bounds.</p>

<p>Take this information and design a script that your client can enact. You need to map how long your script takes to perform the action with respect to how long it will take the expected user to do it. Start increasing your numbers as mentioned above to you hit the point where the increase in clients causes a greater decrease in performance. </p>

<p>There are many ways to stress test but the key is understanding expected load. Ask your client about their expectations. What is the expected demand per interval? From there you can work out upper loads.</p>

<p>You can do a soak test with many clients operating continously for many hours or days. You can try to connect as many clients as you can as fast you can to see how well your server handles high demand (also a DOS attack). </p>

<p>Concurrent searches should be done through your standard behaviour searches acting on behalf of the client or, write a script to establish a semaphore that waits on many threads, then you can release them all at once. This is fun and punishes your database. When performing searches you need to take into account any caching layers that may exist. You need to test both caching and without caching (in scenarios where everyone makes unique search requests).</p>

<p>Database storage is based on physical space; you can determine row size from the field lengths and expected data population. Extrapolate this out statistically or create a data generation script (useful for your load testing scenarios and should be an asset to your organisation) and then map the generated data to business objects. Your clients will care about how many ""business objects"" they can store while you will care about how much raw data can be stored.</p>

<p>Other things to consider: What is the expected availability? What about how long it takes to bring a server online. 99.9% availability is not good if it takes two days to bring back online the one time it does go down. On the flip side a lower availablility is more acceptable if it takes 5 seconds to reboot and you have a fall over.</p>
"
84315,"<p>So far I've found the following Python solution:</p>

<pre><code>&gt;&gt;&gt; import wmi; c=wmi.WMI()
&gt;&gt;&gt; o=c.query(""select * from Win32_NetworkAdapter where NetConnectionID='wifi'"")[0]
&gt;&gt;&gt; o.EnableDevice(1)
(-2147217407,)
</code></pre>

<p>which is translated, AFAIU, to the generic WMI error 0x80041001. Could be permissions.</p>
"
292498,"<blockquote>
  <p>Where is x found?</p>
</blockquote>

<p>x is not found as you haven't defined it. :-) It could be found in code1 (global) or code3 (local) if you put it there.</p>

<p>code2 (class members) aren't visible to code inside methods of the same classâââyou would usually access them using self. code4/code5 (loops) live in the same scope as code3, so if you wrote to x in there you would be changing the x instance defined in code3, not making a new x.</p>

<p>Python is statically scoped, so if you pass âspamâ to another function spam will still have access to globals in the module it came from (defined in code1), and any other containing scopes (see below). code2 members would again be accessed through self.</p>

<p>lambda is no different to def. If you have a lambda used inside a function, it's the same as defining a nested function. In Python 2.2 onwards, nested scopes are available. In this case you can bind x at any level of function nesting and Python will pick up the innermost instance:</p>

<pre><code>x= 0
def fun1():
    x= 1
    def fun2():
        x= 2
        def fun3():
            return x
        return fun3()
    return fun2()
print fun1(), x

2 0
</code></pre>

<p>fun3 sees the instance x from the nearest containing scope, which is the function scope associated with fun2. But the other x instances, defined in fun1 and globally, are not affected.</p>

<p>Before nested_scopesâââin Python pre-2.1, and in 2.1 unless you specifically ask for the feature using a from-future-importâââfun1 and fun2's scopes are not visible to fun3, so S.Lott's answer holds and you would get the global x:</p>

<pre><code>0 0
</code></pre>
"
232243,"<p>The Django permission system totally rules.  Each model has a default set of permissions. You can add new permissions to your models, also.</p>

<p>Each User has a set of permissions as well as group memberships.  Individual users can have individual permissions.  And they inherit permissions from their group membership.</p>

<p>Your view functions (and templates) can easily check the presence of absence of those permissions at any level of granularity you need to use.  </p>

<p>And if this isn't enough for you, the Profile add-on gives you yet more options for defining a ""User"" and their capabilities, permissions, roles, responsibilities, etc.</p>

<p>And if this isn't enough for you, you can define your own authentication schemes.</p>

<p><hr /></p>

<p>What's important is not to try and define groups that are actual subsets of users, not <em>casually</em> defined titles or roles.  You never need to ""set permissions for a sub-set of a group"".  You need to have smaller groups.   Groups defined around subsets of people.</p>

<p>Django's default permissions are around model access, not row access within a model.  On the other hand, your problem is about subsets of rows in several models: Client, Store, Employee, Manager.</p>

<p>You'll need a basic set of FK's among these items, and some filters to subset the rows.  You may have trouble doing this with default admin pages.  You may need your own version of admin to make use of specialized filters.</p>

<p><hr /></p>

<p>If you can't do it with the Django permission system, you should rethink your use cases.  Seriously.</p>

<p>[The Django-REST Interface, however, is another beast entirely, and requires some care and feeding.]</p>
"
64471,"<p><a href=""http://pyro.sf.net"">Pyro</a> (Python Remote Objects) is fairly clever if all your server/clients are going to be in Python. I use <a href=""http://www.xmpp.org"">XMPP</a> alot though since I'm communicating with hosts that are not always Python. XMPP lends itself to being extended fairly easily too.</p>

<p>There is an excellent XMPP library for python called <a href=""http://pyxmpp.jajcus.net"">PyXMPP</a> which is reasonably up to date and has no dependancy on Twisted.</p>
"
311597,"<p>For me that's too much. Maybe it's just a terrible example, since ""type"" and ""deleted"" would clearly be part of the db query.</p>

<p>I tend to think that if a list comprehension spans multiple lines it probably shouldn't be a list comprehension. Having said that, I usually just split the thing at ""if"" like other people have and will answer here.</p>
"
246417,"<p>As an architecture, the main claim to fame of BASIC is that you could make BASIC interpreters very small - just a few KB.  In the days of a DG Nova this was a win as you could use systems like Business BASIC to build a multiuser application on a machine with 64K of RAM (or even less).</p>

<p>BASIC (VB in particular) is a legacy system and has a large existing code-base.  Arguably VB is really a language (some would say a thin wrapper over COM) that has a BASIC-like syntax.  These days, I see little reason to keep the language around apart from people's familiarity with it and to maintain the existing code base.  I certainly would not advocate new development in it (note that VB.Net is not really BASIC but just has a VB-like syntax.  The type system is not broken in the way that VB's was.)</p>

<p>What <em>is</em> missing from the computing world is a <em>relevant</em> language that is easy to learn and tinker with and has mind-share in mainstream application development.  I grew up in the days of 8-bit machines, and the entry barrier to programming on those systems was very low.  The architecture of the machines was very simple, and you could learn to program and write more-or-less relevant applications on these machines very easily.</p>

<p>Modern architectures are much more complex and have a bigger hump to learn.  You can see people pontificating on how kids can't learn to program as easily as they could back in the days of BASIC and 8-bit computers and I think that argument has some merit.  There is something of a hole left that makes programming just that bit harder to get into.  Toy languages are not much use here - for programming to be attractive it has to be possible to aspire to build something relevant with the language you are learning.</p>

<p>This leads to the problem of a language that is easy for kids to learn but still allows them to write relevant programmes (or even games) that they might actually want.  It also has to be widely perceived as relevant.</p>

<p>The closest thing I can think of to this is Python.  It's not the only example of a language of that type, but it is the one with the most mind-share - and (IMO) a perception of relevance is necessary to play in this niche.  It's also one of the easiest languages to learn that I've experienced (of the 30 or so that I've used over the years).</p>
"
165574,"<p>Despite webmat's claim, Guido <a href=""http://markmail.org/message/n6fs5pec5233mbfg"">wrote</a> that explicit self is ""not an implementation hack -- it is a semantic device"".</p>

<blockquote>
  <p>The reason for explicit self in method
  definition signatures is semantic
  consistency. If you write</p>
  
  <p>class C: def foo(self, x, y): ...</p>
  
  <p>This really <em>is</em> the same as writing</p>
  
  <p>class C: pass</p>
  
  <p>def foo(self, x, y): ... C.foo = foo</p>
</blockquote>

<p>This was an intentional design decision, not a result of introducing OO behaviour at a latter date.</p>

<p>Everything in Python -is- an object, including literals.</p>

<p>See also <a href=""http://effbot.org/pyfaq/why-must-self-be-used-explicitly-in-method-definitions-and-calls.htm"">Why must 'self' be used explicitly in method definitions and calls?</a></p>
"
214162,"<p>It's hard to say without knowing more about your setup, but one easy win is to make sure that Trac is running in something like <code>mod_python</code>, which keeps the Python runtime in memory. Otherwise, every HTTP request will cause Python to run, import all the modules, and then finally handle the request. Using <code>mod_python</code> (or FastCGI, whichever you prefer) will eliminate that loading and skip straight to the good stuff.</p>

<p>Also, as your Trac database grows and you get more people using the site, you'll probably outgrow the default SQLite database. At that point, you should think about migrating the database to PostgreSQL or MySQL, because they'll be able to handle concurrent requests much faster.</p>
"
214287,"<p>@BKB definitely has a valid concern. Here's a couple links you'll want to check if you run into any issues that can't be solved with the standard library:</p>

<ul>
<li><a href=""http://sourceforge.net/projects/pywin32/"">Pywin32</a> is a package for working with low-level win32 APIs (advanced file system modifications, COM interfaces, etc.)</li>
<li><a href=""http://timgolden.me.uk/python/"">Tim Golden's Python page</a>: he maintains a WMI wrapper package that builds off of Pywin32, but be sure to also check out his <a href=""http://timgolden.me.uk/python/win32_how_do_i.html"">""Win32 How Do I""</a> page for details on how to accomplish typical Windows tasks in Python.</li>
</ul>
"
110777,"<p>@<a href=""#92710"">efotinis</a>: You're right.  </p>

<p>Here is a workaround until py2exe gets fixed and you don't want to include the same icon twice:</p>

<pre><code>hicon = win32gui.CreateIconFromResource(win32api.LoadResource(None, win32con.RT_ICON, 1), True)
</code></pre>

<p>Be aware that <strong>1</strong> is not the ID you gave the icon in setup.py (which is the icon group ID), but the resource ID <em>automatically</em> assigned by py2exe to each icon in each icon group. At least that's how I understand it.</p>

<p>If you want to create an icon with a specified size (as CreateIconFromResource uses the system default icon size), you need to use CreateIconFromResourceEx, which isn't available via PyWin32:</p>

<pre><code>icon_res = win32api.LoadResource(None, win32con.RT_ICON, 1)
hicon = ctypes.windll.user32.CreateIconFromResourceEx(icon_res, len(icon_res), True,
    0x00030000, 16, 16, win32con.LR_DEFAULTCOLOR)
</code></pre>
"
110808,"<p>I second olt's pointer to <a href=""http://www.diveintopython.org/http_web_services/redirects.html"">Dive into Python</a>. Here's an implementation using urllib2 redirect handlers, more work than it should be? Maybe, shrug.</p>

<pre><code>import sys
import urllib2

class RedirectHandler(urllib2.HTTPRedirectHandler):
	def http_error_301(self, req, fp, code, msg, headers):  
		result = urllib2.HTTPRedirectHandler.http_error_301( 
			self, req, fp, code, msg, headers)              
		result.status = code                                 
		raise Exception(""Permanent Redirect: %s"" % 301)

	def http_error_302(self, req, fp, code, msg, headers):
		result = urllib2.HTTPRedirectHandler.http_error_302(
			self, req, fp, code, msg, headers)              
		result.status = code                                
		raise Exception(""Temporary Redirect: %s"" % 302)

def main(script_name, url):
   opener = urllib2.build_opener(RedirectHandler)
   urllib2.install_opener(opener)
   print urllib2.urlopen(url).read()

if __name__ == ""__main__"":
	main(*sys.argv)
</code></pre>
"
111084,"<p>For working code to do this, check out <a href=""http://www.djangosnippets.org/snippets/1053/"">snippet 1053</a> at <a href=""http://www.djangosnippets.org"">djangosnippets.org</a>.</p>
"
272071,"<p>Logged in twice is ambiguous over HTTP.  There's no ""disconnecting"" signal that's sent.  You can frustrate people if you're not careful.</p>

<p>If I shut down my browser and drop the cookies -- accidentally -- I might be prevented from logging in again.  </p>

<p>How would the server know it was me trying to re-login vs. me trying to login twice?  </p>

<p>You can try things like checking the IP address.  And what if the accidental disconnect was my router crashing, releasing my DHCP lease?  Now I'm trying to re-login, but I have a new address and no established cookie.  I'm not trying to create a second session, I'm  just trying to get back on after my current session got disconnected.</p>

<p>the point is that there's no well-established rule for ""single session"" that can be installed in a framework. You have to make up a rule appropriate to your application and figure out how to enforce it.</p>
"
272283,"<p>try:</p>

<pre><code>ipy '-X:ColorfulConsole'
</code></pre>

<p>Or whatever quoting mechanism is supported in Windows PowerShell - the shell is splitting your argument. </p>

<p>Typing</p>

<pre><code>ipy -X: ColorfulConsole
</code></pre>

<p>in MS-DOS command prompt window returns same response <code>File -X: does not exist</code>.</p>
"
157121,"<p>Alt 4! But maybe you should refactor the code to a function that takes an argument which should contain the divisible number (two and three). And then you could have a better functionname.</p>

<pre><code>def methodName(divNumber, r):
  return sum(1 for v in r if v % divNumber == 0)


print methodName(2, xrange(1, 10))
print methodName(3, xrange(1, 10))
</code></pre>
"
214901,"<p>Ok it terns out python always loads the dll in the same directory as the pyd file, regardless of what the python and os paths are set to.</p>

<p>So I needed to copy the _sqlite3.pyd from python/v2.5/DLLS to my apps directory where the new sqlite3.dll is, making it load my new dll, rather than the one that comes with python (since the pyd files seem to follow the PYTHONPATH, even though the actaul dlls themselves dont).</p>
"
214932,"<p>Look at <a href=""http://www.makotemplates.org/"">Mako</a>.</p>

<p>Here's how I cope with web designers.</p>

<ol>
<li>Ask them to mock up the page.  In HTML.</li>
<li>Use the HTML as the basis for the template, replacing the mocked-up content with <code>${...}</code> replacements.</li>
<li>Fold in loops to handle repeats.</li>
</ol>

<p>The use of if-statements requires negotiation, since the mock-up is one version of the page, and there are usually some explanations for conditional presentation of some material.</p>
"
35572,"<p>Try tidylib. You can get some really basic bindings as part of the elementtidy module (builds elementtrees from HTML documents). <a href=""http://effbot.org/downloads/#elementtidy"">http://effbot.org/downloads/#elementtidy</a></p>

<pre><code>&gt;&gt;&gt; import _elementtidy
&gt;&gt;&gt; xhtml, log = _elementtidy.fixup(""&lt;html&gt;&lt;/html&gt;"")
&gt;&gt;&gt; print log
line 1 column 1 - Warning: missing &lt;!DOCTYPE&gt; declaration
line 1 column 7 - Warning: discarding unexpected &lt;/html&gt;
line 1 column 14 - Warning: inserting missing 'title' element
</code></pre>

<p>Parsing the log should give you pretty much everything you need.</p>
"
87658,"<p><a href=""http://effbot.org/zone/elementtree-13-intro.htm"">ElementTree 1.3</a> (unfortunately not 1.2 which is the one included with Python) <a href=""http://effbot.org/zone/element-xpath.htm"">supports XPath</a> like this:</p>

<pre><code>import elementtree.ElementTree as xml

def getValues(tree, category):
    parent = tree.find("".//parent[@name='%s']"" % category)
    return [child.get('value') for child in parent]
</code></pre>

<p>Then you can do </p>

<pre><code>&gt;&gt;&gt; tree = xml.parse('data.xml')
&gt;&gt;&gt; getValues(tree, 'CategoryA')
['a1', 'a2', 'a3']
&gt;&gt;&gt; getValues(tree, 'CategoryB')
['b1', 'b2', 'b3']
</code></pre>

<p><code>lxml.etree</code> (which also provides the ElementTree interface) will also work in the same way.</p>
"
273246,"<p>We use this <a href=""http://www.djangosnippets.org/snippets/705/"" rel=""nofollow"">Django coverage integration</a>, but instead of using the default coverage.py reporting, we generate some simple HTML: 
<a href=""http://code.activestate.com/recipes/52298/"" rel=""nofollow"">Colorize Python source using the built-in tokenizer</a>.</p>
"
111225,"<p>Twisted has an <a href=""http://twistedmatrix.com/documents/8.1.0/api/twisted.internet.interfaces.IReactorProcess.html"">asynchronous process-spawning API</a> which works on Windows.  There are actually several different implementations, many of which are not so great, but you can switch between them without changing your code.</p>
"
111252,"<p>Quite simply, a ""callable"" is something that can be called like a method.  The built in function ""callable()"" will tell you whether something appears to be callable, as will checking for a <strong>call</strong> property.  Functions are callable as are classes, class instances can be callable.  See more about this <a href=""http://docs.python.org/lib/built-in-funcs.html"">here</a> and <a href=""http://www.peterbe.com/plog/callable-python-objects"">here</a>.</p>
"
111876,"<p>Although not directly an answer to the OP question, there is a pretty sweet way of finding out what variables are in scope in a function. take a look at this code:</p>

<pre><code>&gt;&gt;&gt; def f(x, y):
    z = x**2 + y**2
    sqrt_z = z**.5
    return sqrt_z

&gt;&gt;&gt; f.func_code.co_varnames
('x', 'y', 'z', 'sqrt_z')
&gt;&gt;&gt;
</code></pre>

<p>The func_code attribute has all kinds of interesting things in it. It allows you todo some cool stuff. Here is an example of how I have have used this:</p>

<pre><code>def exec_command(self, cmd, msg, sig):

    def message(msg):
        a = self.link.process(self.link.recieved_message(msg))
        self.exec_command(*a)

    def error(msg):
        self.printer.printInfo(msg)

    def set_usrlist(msg):
        self.client.connected_users = msg

    def chatmessage(msg):
        self.printer.printInfo(msg)

    if not locals().has_key(cmd): return
    cmd = locals()[cmd]

    try:
        if 'sig' in cmd.func_code.co_varnames and \
                       'msg' in cmd.func_code.co_varnames: 
            cmd(msg, sig)
        elif 'msg' in cmd.func_code.co_varnames: 
            cmd(msg)
        else:
            cmd()
    except Exception, e:
        print '\n-----------ERROR-----------'
        print 'error: ', e
        print 'Error proccessing: ', cmd.__name__
        print 'Message: ', msg
        print 'Sig: ', sig
        print '-----------ERROR-----------\n'
</code></pre>
"
273677,"<p>There are two usual approaches, both already mentioned, which amount to:</p>

<pre><code>while True:
    do_stuff() # and eventually...
    break; # break out of the loop
</code></pre>

<p>or</p>

<pre><code>x = True
while x:
    do_stuff() # and eventually...
    x = False # set x to False to break the loop
</code></pre>

<p>Both will work properly. From a ""sound design"" perspective it's best to use the second method because 1) <code>break</code> can have counterintuitive behavior in nested scopes in some languages; 2) the first approach is counter to the intended use of ""while""; 3) your routines should always have a single point of exit</p>
"
64163,"<p>A class is a template, it allows you to create a blueprint, you can then have multiple instances of a class each with different numbers, like so.</p>

<pre><code>class dog(object):
	def __init__(self, height, width, lenght):
		self.height = height
		self.width = width
		self.length = length

	def revert(self):
		self.height = 1
		self.width = 2
		self.length = 3

dog1 = dog(5, 6, 7)
dog2 = dog(2, 3, 4)

dog1.revert()
</code></pre>
"
311678,"<pre><code>allUuids = [x.id 
            for x in self.db.query(schema.allPostsUuid).execute(timeout = 20) 
            if x.type == ""post"" and x.deleted is not False]
</code></pre>
"
235412,"<p>To complete Bryan post and match exactly the answer :</p>

<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; txt = 'this is [bracket test] ""and quotes test ""'
&gt;&gt;&gt; [x[1:-1] if x[0] in '[""' else x for x in re.findall('\[[^\]]*\]|\""[^\""]*\""|\S+', txt)]
['this', 'is', 'bracket test', 'and quotes test ']
</code></pre>

<p>Don't misunderstand the whole syntax used : This is not several statments on a single line but a single functional statment (more bugproof).</p>
"
318864,"<p>So what's wrong with pickle?  If you structure your data as a list of dicts, then everything should work as you want it to (if I understand your problem).</p>

<pre><code>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; d1 = {1:'one', 2:'two', 3:'three'}
&gt;&gt;&gt; d2 = {1:'eleven', 2:'twelve', 3:'thirteen'}
&gt;&gt;&gt; d3 = {1:'twenty-one', 2:'twenty-two', 3:'twenty-three'}
&gt;&gt;&gt; data = [d1, d2, d3]
&gt;&gt;&gt; out = open('data.pickle', 'wb')
&gt;&gt;&gt; pickle.dump(data, out)
&gt;&gt;&gt; out.close()
&gt;&gt;&gt; input = open('data.pickle')    
&gt;&gt;&gt; data2 = pickle.load(input)
&gt;&gt;&gt; data == data2
True
</code></pre>
"
200702,"<p>Replacing the above said command line with the one bellow helps.</p>

<p>tracd --port 8000 --auth=Trac,D:\My_Test_Project\Documents\Trac\digest.txt,Trac D:\My_Test_Project\Documents\Trac</p>

<p>The string after --auth= should be the environment name and not the project name.</p>
"
198348,"<p>web2py does most of what you ask:</p>

<p>Based on a field type and its validators it will render the field with the appropriate widget. You can override with</p>

<pre><code>db.table.field.widget=...
</code></pre>

<p>and use a third party widget.</p>

<p>web2py has js to blocks the user from entering a non-integer in a integer field or a non-double in a double field. time, date and datetime fields have their own pickers. These js validation work with (not instead) of server side validation.</p>

<p>There is <code>IS_EMPTY_OR(...)</code> validator.</p>

<p>The DAL prevents SQL injections since everthing is escaped when goes in the DB.</p>

<p>web2py prevents XSS because in {{=variable}}, 'variable' is escaped unless specified otherwise {{=XML(variable)}} or {{=XML(variable,sanitize=True)}}</p>

<p>Error messages are arguments of validators for example</p>

<pre><code>db.table.field.requires=IS_NOT_EMPTY(error_message=T('hey! write something in here'))
</code></pre>

<p>T is for internationalization.</p>
"
311682,"<p>You may have overwritten the system framework but it is more likely that you just overwrote the symlinks in <code>/usr/bin</code> to point to the new version.  Try going to <code>/usr/bin</code> and seeing (with something like <code>ls -alsh</code>) where the <code>python</code> symlink points to.  It may be <code>python2.6</code> or <code>3.0</code>, which is in turn a ln to <code>/System/Library/Frameworks/Python.framework/Versions ...</code> etc.  First try resetting the python symlink to the stable or expected version, ie, <code>sudo ln -s /usr/bin/python2.5 python</code> (from the <code>/usr/bin</code> dir.)</p>
"
133022,"<p><a href=""https://docs.python.org/library/stdtypes.html#comparisons"" rel=""nofollow"">https://docs.python.org/library/stdtypes.html#comparisons</a></p>

<p><code>is</code> tests for identity
<code>==</code> tests for equality</p>

<p>Each (small) integer value is mapped to a single value, so every 3 is identical and equal. This is an implementation detail, not part of the language spec though</p>
"
133035,"<p>Your answer is correct. The <code>is</code> operator compares the identity of two objects.  The <code>==</code> operator compares the values of two objects.</p>

<p>An object's identity never changes once it has been created; you may think of it as the object's address in memory.</p>

<p>You can control comparison behaviour of object values by defining a <code>__cmp__</code> method or a <a href=""https://docs.python.org/reference/datamodel.html#basic-customization"" rel=""nofollow"">rich comparison</a> method like <code>__eq__</code>.</p>
"
133983,"<p>It sounds like the environment you apache process is running under is a little unusual.  For whatever reason, svn seems to think the user configuration files it needs are in /root.  You can avoid having svn use the root versions of the files by specifying on the command line which config directory to use, like so:</p>

<pre><code>svn --config-dir /home/myuser/.subversion checkout http://example.com/path
</code></pre>

<p>While not fixing your enviornment, it will at least allow you to have your script run properly...</p>
"
138720,"<p>Yes it is. There are several extensions on <a href=""http://www.vim.org/scripts/index.php"" rel=""nofollow"">http://www.vim.org/scripts/index.php</a> </p>

<p>It can be done with python as well if the support for python is compiled in. </p>

<p>Article about it: <a href=""http://www.techrepublic.com/article/extending-vim-with-python/"" rel=""nofollow"">http://www.techrepublic.com/article/extending-vim-with-python/</a> </p>

<p>Google is our friend.</p>

<p>HTH</p>
"
55401,"<p>Parsing is one of those areas where you really don't want to roll your own if you can avoid it, as you'll be chasing down the edge-cases and bugs for years go come</p>

<p>I'd recommend using <a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">BeautifulSoup</a>. It has a very good reputation and looks from the docs like it's pretty easy to use.</p>
"
288617,"<p>With Java hosting you don't need to do all the stupid tricks with apache, or nginx. Jetty itself can host everything you need, that's how the guys at www.mor.ph do it, and they find it to be pretty fast.</p>

<p>The memory usage that way is pretty minimal, I host mine on a 256MB Ubuntu server from RapidXen, so it's about $10/month.</p>

<p>I tried developing in Django, and while it runs all the scripts faster (like bootstrapping, or test cases) it's not as well-crafted in my oppinion</p>
"
164769,"<p><code>SetEnv proxy-nokeepalive 1</code> would probably tell you right away if the problem is keepalive between Apache and CP. See the <a href=""http://httpd.apache.org/docs/2.2/mod/mod_proxy.html#envsettings"">mod_proxy docs</a> for more info.</p>
"
319878,"<p>The standard deviation of a mean-zero gaussian distribution with Pr(-a &lt; X &lt; a) = P is</p>

<pre><code>a/(sqrt(2)*inverseErf(P))
</code></pre>

<p>which is the expression you're looking for, where inverseErf is the inverse of the error function (commonly known as erf).</p>

<p>For C, the Gnu Scientific Library (GSL) is a good resource.  However it only has erf, not inverseErf, so you'd have to invert it yourself (a simple binary search would do the trick).  Alternatively, here's a nice way to approximate erf and inverseErf: </p>

<p><a href=""http://homepages.physik.uni-muenchen.de/~Winitzki/erf-approx.pdf"" rel=""nofollow"">http://homepages.physik.uni-muenchen.de/~Winitzki/erf-approx.pdf</p>

<p>For Python, inverseErf is available as <code>erfinv</code> in the SciPy</a> library, so the following gives the standard deviation:</p>

<pre><code>a/(math.sqrt(2)*erfinv(P))
</code></pre>

<p>PS: There's some kind of bug in Stackoverflow's URL rendering and it wouldn't let me link to GSL above:  <a href=""http://www.gnu.org/software/gsl"" rel=""nofollow"">http://www.gnu.org/software/gsl</a>.
It also renders wrong when I make the URL above with a pdf a proper link.</p>
"
139880,"<p>The lambda captures variables, not values, hence the code</p>

<pre><code>lambda : i
</code></pre>

<p>will always return the value i is <strong>currently</strong> bound to in the closure.  By the time it gets called, this value has been set to -1.</p>

<p>To get what you want, you'll need to capture the actual binding at the time the lambda is created, by:</p>

<pre><code>&gt;&gt;&gt; f(*(lambda i=i: i for i in t)) # -&gt; [-1, -1]
[1, -1]
&gt;&gt;&gt; f(*[lambda i=i: i for i in t]) # -&gt; [-1, -1]
[1, -1]
</code></pre>
"
135450,"<p>@<a href=""#135342"">Dan</a></p>

<blockquote>
<pre><code>if otherString:
   stringValue = otherString
else:
   stringValue = defaultString
</code></pre>
  
  <p>This type of code is longer and more expressive, but also more readable</p>
</blockquote>

<p>Well yes, it's longer. Not so sure about âmore expressiveâ and âmore readableâ. At the very least, your claim is disputable. I would even go as far as saying it's downright wrong, for two reasons.</p>

<p>First, your code emphasizes the decision-making (rather extremely). Onthe other hand, the conditional operator emphasizes something else, namely the value (resp. the assignment of said value). And this is <em>exactly</em> what the writer of this code wants. The decision-making is really rather a by-product of the code. The important part here is the assignment operation. Your code hides this assignment in a lot of syntactic noise: the branching.</p>

<p>Your code is less expressive because it shifts the emphasis from the important part.</p>

<p>Even then your code would probably trump some obscure ASCII art like <code>?:</code>. An inline-<code>if</code> would be preferable. Personally, I don't like the variant introduced with Python 2.5 because it's backwards. I would prefer something that reads in the same flow (direction) as the C ternary operator but uses words instead of ASCII characters:</p>

<pre><code>C = if cond then A else B
</code></pre>

<p>This wins hands down.</p>

<p>C and C# unfortunately don't have such an expressive statement. But (and this is the second argument), the ternary conditional operator of C languages is so long established that it has become an idiom in itself. The ternary operator is as much part of the language as the âconventionalâ <code>if</code> statement. Because it's an idiom, anybody who knows the language immediately reads this code right. Furthermore, it's an extremely short, concise way of expressing these semantics. In fact, it's the shortest imaginable way. It's extremely expressive because it doesn't obscure the essence with needless noise.</p>

<p>Finally, Jeff Atwood has written the perfect conclusion to this: <a href=""http://www.codinghorror.com/blog/archives/000878.html""><strong>The best code is no code at all</strong></a>.</p>
"
245013,"<p>PyDev was acquired by <a href=""http://www.aptana.com"">Aptana</a>, so you might want to check that one out as well.</p>
"
312802,"<p>The article you quoted contains a link to <a href=""http://www.ps.uni-sb.de/~duchier/python/continuations.html"">Continuations Made Simple And Illustrated</a> in the Resources section, which talks about continuations in the Python language.</p>
"
313015,"<p>Sounds like a page template possibility.</p>

<ol>
<li><p>You could pass a <code>LINK_VIA</code> (or something) that you provide as <code>onClick=""return popup(this, 'arg')""</code> or <code>None</code>.  Each link would be <code>&lt;A HREF=""link"" {{LINK_VIA}}&gt;some text&lt;/a&gt;</code>.</p>

<ul>
<li>For anonymous sessions, <code>LINK_VIA</code> has a value.</li>
<li>For logged in sessions, <code>LINK_VIA</code> is None</li>
</ul></li>
<li><p>You could use an <code>{% if %}</code> statement around your <code>&lt;A HREF=...&gt;</code> tags.  This seems wordy.</p></li>
<li><p>You could write your own custom tag with for <code>{% link_via %}</code>.  I'm not familiar enough with this, but you can provide the link and text as strings and your tag can generate one of two kinds of links. </p></li>
</ol>
"
312698,"<p>Constructors in Python are called <code>__init__</code>. You must also use ""self"" as the first argument for all methods in your class, and use that to set instance variables in the class.</p>

<pre><code>class Computer:

    def __init__(self, compName = ""Computer1"", compIp = ""0.0.0.0"", compScreenSize = 22):
        self.name = compName
        self.ip = compIp
        self.screenSize = compScreenSize

        self.printStats()

    def printStats(self):
        print ""Computer Statistics: --------------------------------""
        print ""Name:"", self.name
        print ""IP:"", self.ip
        print ""ScreenSize:"", self.screenSize
        print ""-----------------------------------------------------""


comp1 = Computer()
comp2 = Computer(""The best computer in the world"", ""27.1.0.128"",22)
</code></pre>
"
63119,"<p>All of the whitespace issues I had when I was starting Python were the result mixing tabs and spaces.  Once I configured everything to just use one or the other, I stopped having problems.</p>

<p>In my case I configured UltraEdit &amp; vim to use spaces in place of tabs.</p>
"
314771,"<pre><code>def split_seq(seq, num_pieces):
    start = 0
    for i in xrange(num_pieces):
        stop = start + len(seq[i::num_pieces])
        yield seq[start:stop]
        start = stop
</code></pre>

<p>usage:</p>

<pre><code>seq = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

for seq in split_seq(seq, 3):
    print seq
</code></pre>
"
328947,"<p>It seems that, when Windows wants to start the screen saver or turn the monitor off, it will send a <code>WM_SYSCOMMAND</code> to the topmost window with a <code>wParam</code> of <code>SC_SCREENSAVE</code> (to start the screen saver) or a <code>wParam</code> of <code>SC_MONITORPOWER</code> and a <code>lParam</code> of 1 or 2 (to turn the monitor off). This message will then be passed to <code>DefWindowProc</code>, which will actually do the action. So, if your window happens to be the topmost one, you can intercept these events and ignore them (or do anything else you want before passing them to <code>DefWindowProc</code>).</p>

<p>On Windows Vista, there seems to be a more intuitive, and more reliable, way to know the monitor power state. You call <code>RegisterPowerSettingNotification</code> to tell the system to send your window a <code>WM_POWERBROADCAST</code> message with a <code>wParam</code> of <code>PBT_POWERSETTINGCHANGE</code> and a <code>lParam</code> pointing to a <code>POWERBROADCAST_SETTING</code> structure.</p>

<p>I cannot test either of them since I currently do not have any computer with Windows nearby. I hope, however, they point you in the right direction.</p>

<p>References:</p>

<ul>
<li><a href=""http://blogs.msdn.com/oldnewthing/archive/2006/06/13/629451.aspx"" rel=""nofollow"">The Old New Thing : Fumbling around in the dark and stumbling across the wrong solution</a></li>
<li><a href=""http://groups.google.com/group/borland.public.delphi.nativeapi.win32/browse_thread/thread/81afbb4aff7503d4"" rel=""nofollow"">Recursive hook ... - borland.public.delphi.nativeapi.win32 | Google Groups</a></li>
<li><a href=""http://msdn.microsoft.com/en-us/library/aa373195(VS.85).aspx"" rel=""nofollow"">Registering for Power Events (Windows)</a></li>
</ul>
"
212975,"<p><code>Queue</code> objects have this behavior because they lock using <code>Condition</code> objects form the <code>threading</code> module.  So your solution is really the only way to go.</p>

<p>However, if you really want a <code>Queue</code> method that does this, you can monkeypatch the <code>Queue</code> class.  For example:</p>

<pre><code>def interruptable_get(self):
    while True:
        try:
            return self.get(timeout=1000)
        except Queue.Empty:
            pass
Queue.interruptable_get = interruptable_get
</code></pre>

<p>This would let you say</p>

<pre><code>q.interruptable_get()
</code></pre>

<p>instead of</p>

<pre><code>interruptable_get(q)
</code></pre>

<p>although monkeypatching is generally discouraged by the Python community in cases such as these, since a regular function seems just as good.</p>
"
37218,"<blockquote>
  <p>It works. I have no idea why, but it does.</p>
</blockquote>

<p>For future reference:</p>

<p>It works because Apache processes alias directives in order, and uses the first match. It was always hitting <code>Alias /</code>, which will match anything, before <code>WSGIScriptAlias</code>.</p>

<p>From the <a href=""http://httpd.apache.org/docs/2.2/mod/mod_alias.html"" rel=""nofollow""><code>mod_alias</code> documentation</a>:</p>

<blockquote>
  <p>First, all Redirects are processed before Aliases are processed, and therefore a request that matches a <code>Redirect</code> or <code>RedirectMatch</code> will never have Aliases applied. Second, the Aliases and Redirects are processed in the order they appear in the configuration files, with the first match taking precedence.</p>
</blockquote>
"
346260,"<p>Michael Foord, aka Voidspace has an excellent tutorial on urllib2 which you can find here: 
<a href=""http://www.voidspace.org.uk/python/articles/urllib2.shtml"">urllib2 - The Missing Manual</a></p>

<p>What you are doing should be pretty straightforward, observe this sample code:</p>

<pre><code>import urllib2
import re
response = urllib2.urlopen(""http://www.voidspace.org.uk/python/articles/urllib2.shtml"")
html = response.read()
pattern = '(V.+space)'
wordPattern = re.compile(pattern, re.IGNORECASE)
results = wordPattern.search(html)
print results.groups()
</code></pre>
"
346276,"<p>I would try <code>findall</code> or <code>finditer</code> instead of <code>match</code>.</p>

<p>Edit by Oli: Yeah <code>findall</code> work brilliantly but I had to simplify the regex to:</p>

<pre><code>r""'(?P&lt;main&gt;\d+)\[(?P&lt;thumb&gt;\d+)\]',?""
</code></pre>
"
287009,"<p>In Python, aspect-oriented programming typically consists of dynamically modifying classes and instances at runtime, which is commonly referred to as monkeypatching.  In an answer to another AOP question, I summarized some of these <a href=""http://stackoverflow.com/questions/20663/do-you-use-aop-aspect-oriented-programming-in-production-software#20758"">use cases for AOP in Python</a>.</p>
"
275945,"<p>Overkill?  Perhaps.  But on almost any system, Linux, Mac, and With a quick wxWidgets install on Windows, you can have the real deal, with pause and cancel buttons in a gui setup.  Macs ship with wxWidgets these days, and it's a common package on Linux.</p>

<p>A single file is very quick (it will immediately finish and look broken) so you might consider creating a fileSet job that ticks along once per file instead of once per block.  Enjoy!</p>

<p>-Jim Carroll</p>

<pre><code>""""""
Threaded Jobs.

Any class that does a long running process can inherit
from ThreadedJob.  This enables running as a background
thread, progress notification, pause and cancel.  The
time remaining is also calculated by the ThreadedJob class.
""""""
import wx.lib.newevent
import thread
import exceptions
import time

(RunEvent, EVT_RUN) = wx.lib.newevent.NewEvent()
(CancelEvent, EVT_CANCEL) = wx.lib.newevent.NewEvent()
(DoneEvent, EVT_DONE) = wx.lib.newevent.NewEvent()
(ProgressStartEvent, EVT_PROGRESS_START) = wx.lib.newevent.NewEvent()
(ProgressEvent, EVT_PROGRESS) = wx.lib.newevent.NewEvent()

class InterruptedException(exceptions.Exception):
    def __init__(self, args = None):
        self.args = args
    #
#

class ThreadedJob:
    def __init__(self):
        # tell them ten seconds at first
        self.secondsRemaining = 10.0
        self.lastTick = 0

        # not running yet
        self.isPaused = False
        self.isRunning = False
        self.keepGoing = True

    def Start(self):
        self.keepGoing = self.isRunning = True
        thread.start_new_thread(self.Run, ())

        self.isPaused = False
    #

    def Stop(self):
        self.keepGoing = False
    #

    def WaitUntilStopped(self):
        while self.isRunning:
            time.sleep(0.1)
            wx.SafeYield()
        #
    #

    def IsRunning(self):
        return self.isRunning
    #

    def Run(self):
        # this is overridden by the
        # concrete ThreadedJob
        print ""Run was not overloaded""
        self.JobFinished()

        pass
    #

    def Pause(self):
        self.isPaused = True
        pass
    #

    def Continue(self):
        self.isPaused = False
        pass
    #

    def PossibleStoppingPoint(self):
        if not self.keepGoing:
            raise InterruptedException(""process interrupted."")
        wx.SafeYield()

        # allow cancel while paused
        while self.isPaused:
            if not self.keepGoing:
                raise InterruptedException(""process interrupted."")

            # don't hog the CPU
            time.sleep(0.1)
        #
    #

    def SetProgressMessageWindow(self, win):
        self.win = win
    #

    def JobBeginning(self, totalTicks):

        self.lastIterationTime = time.time()
        self.totalTicks = totalTicks

        if hasattr(self, ""win"") and self.win:
            wx.PostEvent(self.win, ProgressStartEvent(total=totalTicks))
        #
    #

    def JobProgress(self, currentTick):
        dt = time.time() - self.lastIterationTime
        self.lastIterationTime = time.time()
        dtick = currentTick - self.lastTick
        self.lastTick = currentTick

        alpha = 0.92
        if currentTick &gt; 1:
            self.secondsPerTick = dt * (1.0 - alpha) + (self.secondsPerTick * alpha)
        else:
            self.secondsPerTick = dt
        #

        if dtick &gt; 0:
            self.secondsPerTick /= dtick

        self.secondsRemaining = self.secondsPerTick * (self.totalTicks - 1 - currentTick) + 1

        if hasattr(self, ""win"") and self.win:
            wx.PostEvent(self.win, ProgressEvent(count=currentTick))
        #
    #

    def SecondsRemaining(self):
        return self.secondsRemaining
    #

    def TimeRemaining(self):

        if 1: #self.secondsRemaining &gt; 3:
            minutes = self.secondsRemaining // 60
            seconds = int(self.secondsRemaining % 60.0)
            return ""%i:%02i"" % (minutes, seconds)
        else:
            return ""a few""
    #

    def JobFinished(self):
        if hasattr(self, ""win"") and self.win:
            wx.PostEvent(self.win, DoneEvent())
        #

        # flag we're done before we post the all done message
        self.isRunning = False
    #
#

class EggTimerJob(ThreadedJob):
    """""" A sample Job that demonstrates the mechanisms and features of the Threaded Job""""""
    def __init__(self, duration):
        self.duration = duration
        ThreadedJob.__init__(self)
    #

    def Run(self):
        """""" This can either be run directly for synchronous use of the job,
        or started as a thread when ThreadedJob.Start() is called.

        It is responsible for calling JobBeginning, JobProgress, and JobFinished.
        And as often as possible, calling PossibleStoppingPoint() which will 
        sleep if the user pauses, and raise an exception if the user cancels.
        """"""
        self.time0 = time.clock()
        self.JobBeginning(self.duration)

        try:
            for count in range(0, self.duration):
                time.sleep(1.0)
                self.JobProgress(count)
                self.PossibleStoppingPoint()
            #
        except InterruptedException:
            # clean up if user stops the Job early
            print ""canceled prematurely!""
        #

        # always signal the end of the job
        self.JobFinished()
        #
    #

    def __str__(self):
        """""" The job progress dialog expects the job to describe its current state.""""""
        response = []
        if self.isPaused:
            response.append(""Paused Counting"")
        elif not self.isRunning:
            response.append(""Will Count the seconds"")
        else:
            response.append(""Counting"")
        #
        return "" "".join(response)
    #
#

class FileCopyJob(ThreadedJob):
    """""" A common file copy Job. """"""

    def __init__(self, orig_filename, copy_filename, block_size=32*1024):

        self.src = orig_filename
        self.dest = copy_filename
        self.block_size = block_size
        ThreadedJob.__init__(self)
    #

    def Run(self):
        """""" This can either be run directly for synchronous use of the job,
        or started as a thread when ThreadedJob.Start() is called.

        It is responsible for calling JobBeginning, JobProgress, and JobFinished.
        And as often as possible, calling PossibleStoppingPoint() which will 
        sleep if the user pauses, and raise an exception if the user cancels.
        """"""
        self.time0 = time.clock()

        try:
            source = open(self.src, 'rb')

            # how many blocks?
            import os
            (st_mode, st_ino, st_dev, st_nlink, st_uid, st_gid, st_size, st_atime, st_mtime, st_ctime) = os.stat(self.src)
            num_blocks = st_size / self.block_size
            current_block = 0

            self.JobBeginning(num_blocks)

            dest = open(self.dest, 'wb')

            while 1:
                copy_buffer = source.read(self.block_size)
                if copy_buffer:
                    dest.write(copy_buffer)
                    current_block += 1
                    self.JobProgress(current_block)
                    self.PossibleStoppingPoint()
                else:
                    break

            source.close()
            dest.close()

        except InterruptedException:
            # clean up if user stops the Job early
            dest.close()
            # unlink / delete the file that is partially copied
            os.unlink(self.dest)
            print ""canceled, dest deleted!""
        #

        # always signal the end of the job
        self.JobFinished()
        #
    #

    def __str__(self):
        """""" The job progress dialog expects the job to describe its current state.""""""
        response = []
        if self.isPaused:
            response.append(""Paused Copy"")
        elif not self.isRunning:
            response.append(""Will Copy a file"")
        else:
            response.append(""Copying"")
        #
        return "" "".join(response)
    #
#

class JobProgress(wx.Dialog):
    """""" This dialog shows the progress of any ThreadedJob.

    It can be shown Modally if the main application needs to suspend
    operation, or it can be shown Modelessly for background progress
    reporting.

    app = wx.PySimpleApp()
    job = EggTimerJob(duration = 10)
    dlg = JobProgress(None, job)
    job.SetProgressMessageWindow(dlg)
    job.Start()
    dlg.ShowModal()


    """"""
    def __init__(self, parent, job):
        self.job = job

        wx.Dialog.__init__(self, parent, -1, ""Progress"", size=(350,200))

        # vertical box sizer
        sizeAll = wx.BoxSizer(wx.VERTICAL)

        # Job status text
        self.JobStatusText = wx.StaticText(self, -1, ""Starting..."")
        sizeAll.Add(self.JobStatusText, 0, wx.EXPAND|wx.ALL, 8)

        # wxGague
        self.ProgressBar = wx.Gauge(self, -1, 10, wx.DefaultPosition, (250, 15))
        sizeAll.Add(self.ProgressBar, 0, wx.EXPAND|wx.ALL, 8)

        # horiz box sizer, and spacer to right-justify
        sizeRemaining = wx.BoxSizer(wx.HORIZONTAL)
        sizeRemaining.Add((2,2), 1, wx.EXPAND)

        # time remaining read-only edit
        # putting wide default text gets a reasonable initial layout.
        self.remainingText = wx.StaticText(self, -1, ""???:??"")
        sizeRemaining.Add(self.remainingText, 0, wx.LEFT|wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 8)

        # static text: remaining
        self.remainingLabel = wx.StaticText(self, -1, ""remaining"")
        sizeRemaining.Add(self.remainingLabel, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 8)

        # add that row to the mix
        sizeAll.Add(sizeRemaining, 1, wx.EXPAND)

        # horiz box sizer &amp; spacer
        sizeButtons = wx.BoxSizer(wx.HORIZONTAL)
        sizeButtons.Add((2,2), 1, wx.EXPAND|wx.ADJUST_MINSIZE)

        # Pause Button
        self.PauseButton = wx.Button(self, -1, ""Pause"")
        sizeButtons.Add(self.PauseButton, 0, wx.ALL, 4)
        self.Bind(wx.EVT_BUTTON, self.OnPauseButton, self.PauseButton)

        # Cancel button
        self.CancelButton = wx.Button(self, wx.ID_CANCEL, ""Cancel"")
        sizeButtons.Add(self.CancelButton, 0, wx.ALL, 4)
        self.Bind(wx.EVT_BUTTON, self.OnCancel, self.CancelButton)

        # Add all the buttons on the bottom row to the dialog
        sizeAll.Add(sizeButtons, 0, wx.EXPAND|wx.ALL, 4)

        self.SetSizer(sizeAll)
        #sizeAll.Fit(self)
        sizeAll.SetSizeHints(self)

        # jobs tell us how they are doing
        self.Bind(EVT_PROGRESS_START, self.OnProgressStart)
        self.Bind(EVT_PROGRESS, self.OnProgress)
        self.Bind(EVT_DONE, self.OnDone)

        self.Layout()
    #

    def OnPauseButton(self, event):
        if self.job.isPaused:
            self.job.Continue()
            self.PauseButton.SetLabel(""Pause"")
            self.Layout()
        else:
            self.job.Pause()
            self.PauseButton.SetLabel(""Resume"")
            self.Layout()
        #
    #

    def OnCancel(self, event):
        self.job.Stop()
    #

    def OnProgressStart(self, event):
        self.ProgressBar.SetRange(event.total)
        self.statusUpdateTime = time.clock()
    #

    def OnProgress(self, event):
        # update the progress bar
        self.ProgressBar.SetValue(event.count)

        self.remainingText.SetLabel(self.job.TimeRemaining())

        # update the text a max of 20 times a second
        if time.clock() - self.statusUpdateTime &gt; 0.05:
            self.JobStatusText.SetLabel(str(self.job))
            self.statusUpdateTime = time.clock()
            self.Layout()
        #
    #

    # when a job is done
    def OnDone(self, event):
        self.ProgressBar.SetValue(0)
        self.JobStatusText.SetLabel(""Finished"")
        self.Destroy()
    #
#

if __name__ == ""__main__"":
    app = wx.PySimpleApp()
    #job = EggTimerJob(duration = 10)
    job = FileCopyJob(""VeryBigFile.mp4"", ""/tmp/test_junk.mp4"", 1024*1024*10)
    dlg = JobProgress(None, job)
    job.SetProgressMessageWindow(dlg)
    job.Start()
    dlg.ShowModal()
#
</code></pre>
"
335106,"<p>There is no other way to compute the size than recursively invoking stat. This is independent of Python; the operating system just provides no other way.</p>

<p>The algorithm doesn't have to be recursive; you can use os.walk.</p>

<p>There might be two exceptions to make it more efficient:</p>

<ol>
<li>If all the files you want to measure fill a partition, and the partition has no other files, then you can look at the disk usage of the partition.</li>
<li>If you can continuously monitor all files, or are responsible for creating all the files yourself, you can generate an incremental disk usage.</li>
</ol>
"
28568,"<p>It depends a bit what you want to do. To match your example as far as possible, I would make next a generator and iterate over it:</p>

<pre><code>def next():
   for num in range(10):
      yield num

for x in next():
   print x
</code></pre>
"
28692,"<p>It has been a <strong>really</strong> long time since I did anything with FileMaker Pro, but I know that it does have capabilities for an ODBC (and JDBC) connection to be made to it (however, I don't know how, or if, that translates to the linux/perl/python world though).  </p>

<p>This article shows how to share/expose your FileMaker data via ODBC &amp; JDBC:<br />
<a href=""http://www.filemaker.com/help/15-Using%20ODBC2.html"">Sharing FileMaker Pro data via ODBC or JDBC</a>   </p>

<p>From there, if you're able to create an ODBC/JDBC connection you could query out data as needed.</p>
"
313074,"<p>I would agree with <a href=""http://stackoverflow.com/questions/312925/django-authentication-and-ajax-urls-that-require-login#313015"">S.Lott</a></p>

<p>Make a check in the template, if the user is logged in, just put the link as usual, if not, put something like </p>

<pre><code>&lt;a href=""{{link}}"" onclick=""return login_popup()""&gt;
</code></pre>

<p>where login_popup would return false if the user says cancel.</p>

<p>This could be probably be done much easier in <a href=""http://jinja.pocoo.org/2/"">Jinja2</a> through its <a href=""http://jinja.pocoo.org/2/documentation/templates#macros"">macros</a>.</p>

<p>If the template doesn't know which urls require the user to login, you probably need to re-consider your design.</p>

<p>If you must, I guess you can do the same thing that the django url dispatcher does to discover the view function. <br>
see: <code>django.core.urlresolvers</code></p>

<p>once you've grabbed the view function you can check if it's decorated with @login_required. </p>

<p>This would be done in a custom tag probably. <br>
If you use Jinja2, you won't need the tag, just implement the function and expose it to the Environment, it's simple but you'll have to do a bit of reading on the API of Jinja2)</p>
"
136749,"<p><a href=""http://docs.python.org/library/pydoc.html"" rel=""nofollow"">pydoc</a>?</p>

<p>I'm not sure if you're looking for something more sophisticated, but it does the trick.</p>
"
136759,"<p><a href=""http://www.autohotkey.com/"" rel=""nofollow"">AutoHotKey</a> is perfect for this kind of tasks (keyboard automation / remapping)</p>

<p>Script to send ""A"" 100 times:</p>

<pre><code>Send {A 100}
</code></pre>

<p>That's all</p>

<p><strong>EDIT</strong>: to send the keys to an specific application:</p>

<pre><code>WinActivate Word
Send {A 100}
</code></pre>
"
314719,"<p>ForeignKey(Animal) is just that, a foreign key reference to a row in the Animal table. There's nothing in the underlying SQL schema that indicates that the table is being used as a superclass, so you get back an Animal object.</p>

<p>To work around this:</p>

<p>First, you want the base class to be non-abstract. This is necessary for the ForeignKey anyway, and also ensures that Dog and Cat will have disjunct primary key sets.</p>

<p>Now, Django implements inheritance using a OneToOneField. Because of this, <strong>an instance of a base class that has a subclass instance gets a reference to that instance, named appropriately.</strong> This means you can do:</p>

<pre><code>class Animal(models.Model):
    def __unicode__(self):
        if hasattr(self, 'dog'):
            return self.dog.__unicode__()
        elif hasattr(self, 'cat'):
            return self.cat.__unicode__()
        else:
            return 'Animal'
</code></pre>

<p>This also answers your question to Ber about a <strong>unicode</strong>() that's dependent on other subclass attributes. You're actually calling the appropriate method on the subclass instance now.</p>

<p>Now, this does suggest that, since Django's already looking for subclass instances behind the scenes, the code could just go all the way and return a Cat or Dog instance instead of an Animal. You'll have to take up that question with the devs. :)</p>
"
182790,"<p>If you use the <code>shell</code> argument to the <code>manage.py</code> script in your project directory, you don't have to import the settings manually:</p>

<pre><code>$ cd mysite/
$ ./manage.py shell
Python 2.5.2 (r252:60911, Jun 10 2008, 10:35:34) 
[GCC 4.0.1 (Apple Inc. build 5465)] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; from myapp.models import *
&gt;&gt;&gt;
</code></pre>

<p>For non-interactive use you could implement a <a href=""http://docs.djangoproject.com/en/dev/howto/custom-management-commands/"" rel=""nofollow"">custom command</a> and run it with <code>manage.py</code>.</p>
"
211562,"<p>As @diciu pointed out, the database file will be created by <a href=""http://docs.python.org/library/sqlite3.html#module-sqlite3"">sqlite3.connect</a>.
If you want to take a special action when the file is not there, you'll have to explicitly check for existance:</p>

<pre><code>import os
import sqlite3
if not os.path.exists(mydb_path):
    #create new DB, create table stocks
    con = sqlite3.connect(mydb_path)
    con.execute('''create table stocks
      (date text, trans text, symbol text, qty real, price real)''')
else:
    #use existing DB
    con = sqlite3.connect(mydb_path)
...
</code></pre>
"
160017,"<p>Well, I don't know much about Ruby. But the obvious point about Python's ""self"" is that it's not a ""keyword"" ...it's just the name of an argument that's sent to your method.</p>

<p>You can use any name you like for this argument. ""Self"" is just a convention.</p>

<p>For example :</p>

<pre><code>class X :
    def __init__(a,val) :
        a.x = val
    def p(b) :
        print b.x

x = X(6)
x.p()
</code></pre>

<p>Prints the number 6 on the terminal. In the constructor the self object is actually called a. But in the p() method, it's called b.</p>

<p>Update : In October 2008, Guido pointed out that having an explicit self was also necessary to allow Python decorators to be general enough to work on pure functions, methods or classmethods : <a href=""http://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html"" rel=""nofollow"">http://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html</a></p>
"
160064,"<p>self is used only as a convention, you can use spam, bacon or sausage instead of self and get the same result. It's just the first argument passed to bound methods. But stick to using self as it will confuse others and some editors.</p>
"
160208,"<p>Thank you all for your contributions - they've all be very useful. Brian's answer seems closest to what I eventually went with (i.e. deal with it but use a sort of unique identifier - see below) so I've accepted his answer. I managed to consolidate all the various data receivers into a single thread which is where the timestamping is now done using my new <strong>AccurrateTimeStamp</strong> class. What I've done works as long as the time stamp is the first thing to use the clock.</p>

<p>As S.Lott stipulates, without a realtime OS, they're never going to be absolutely perfect. I really only wanted something that would let me see relative to each incoming chunk of data, when things were being received so what I've got below will work well.</p>

<p>Thanks again everyone!</p>

<pre><code>import time

class AccurateTimeStamp():
    """"""
    A simple class to provide a very accurate means of time stamping some data
    """"""

    # Do the class-wide initial time stamp to synchronise calls to 
    # time.clock() to a single time stamp
    initialTimeStamp = time.time()+ time.clock()

    def __init__(self):
        """"""
        Constructor for the AccurateTimeStamp class.
        This makes a stamp based on the current time which should be more 
        accurate than anything you can get out of time.time().
        NOTE: This time stamp will only work if nothing has called clock() in
        this instance of the Python interpreter.
        """"""
        # Get the time since the first of call to time.clock()
        offset = time.clock()

        # Get the current (accurate) time
        currentTime = AccurateTimeStamp.initialTimeStamp+offset

        # Split the time into whole seconds and the portion after the fraction 
        self.accurateSeconds = int(currentTime)
        self.accuratePastSecond = currentTime - self.accurateSeconds


def GetAccurateTimeStampString(timestamp):
    """"""
    Function to produce a timestamp of the form ""13:48:01.87123"" representing 
    the time stamp 'timestamp'
    """"""
    # Get a struct_time representing the number of whole seconds since the 
    # epoch that we can use to format the time stamp
    wholeSecondsInTimeStamp = time.localtime(timestamp.accurateSeconds)

    # Convert the whole seconds and whatever fraction of a second comes after
    # into a couple of strings 
    wholeSecondsString = time.strftime(""%H:%M:%S"", wholeSecondsInTimeStamp)
    fractionAfterSecondString = str(int(timestamp.accuratePastSecond*1000000))

    # Return our shiny new accurate time stamp   
    return wholeSecondsString+"".""+fractionAfterSecondString


if __name__ == '__main__':
    for i in range(0,500):
        timestamp = AccurateTimeStamp()
        print GetAccurateTimeStampString(timestamp)
</code></pre>
"
211918,"<p>I use <a href=""http://code.activestate.com/recipes/361668/"">attrdict</a>:</p>

<pre><code>class attrdict(dict):
    def __init__(self, *args, **kwargs):
        dict.__init__(self, *args, **kwargs)
        self.__dict__ = self
</code></pre>

<p>Depending on your point of view, you probably think it's either a big kludge or quite clever. But whatever you think, it does make for nice looking code, and is compatible with a dict:</p>

<pre><code>&gt;&gt;&gt; ad = attrdict({'foo': 100, 'bar': 200})
&gt;&gt;&gt; ad.foo
100
&gt;&gt;&gt; ad.bar
200
&gt;&gt;&gt; ad.baz = 'hello'
&gt;&gt;&gt; ad.baz
'hello'
&gt;&gt;&gt; ad
{'baz': 'hello', 'foo': 100, 'bar': 200}
&gt;&gt;&gt; isinstance(ad, dict)
True
</code></pre>
"
92296,"<p>Depending on exactly what you mean by ""gotten to grips with the basics"", I'd suggest reading through <a href=""http://www.diveintopython.net/"" rel=""nofollow"">Dive Into Python</a> and typing/executing all the chapter code, then get something like <a href=""http://www.amazon.co.uk/Programming-Collective-Intelligence-Building-Applications/dp/0596529325/"" rel=""nofollow"">Programming Collective Intelligence</a> and working through it - you'll learn python quite well, not to mention some quite excellent algorithms that'll come in handy to a web developer.</p>
"
276697,"<p>Even better, I think <a href=""http://docs.djangoproject.com/en/dev/topics/forms/formsets/"">formsets</a> is exactly what you're looking for. </p>

<pre><code>class GeneralForm(forms.Form):
    field1 = forms.IntegerField(required=False)
    field2 = forms. IntegerField(required=False)

from django.forms.formsets import formset_factory

# GeneralSet is a formset with 2 occurrences of GeneralForm 
# ( as a formset allows the user to add new items, this enforces
#   2 fixed items, no less, no more )
GeneralSet = formset_factory(GeneralForm, extra=2, max_num=2)

# example view

def someview(request):
    general_set = GeneralSet(request.POST)
    if general_set.is_valid():
        for form in general_set.forms:
            # do something with data
    return render_to_response(""template.html"", {'form': general_set}, RequestContext(request))
</code></pre>

<p>You can even have a formset automatically generated from a model with <a href=""http://docs.djangoproject.com/en/dev/topics/forms/modelforms/#id1"">modelformset_factory</a> , which are used by the automated django admin. FormSet handle even more stuff than simple forms, like adding, removing and sorting items.</p>
"
109783,"<p>Your larger problem is blocking in signal handlers.</p>

<p>This is usually discouraged since it can lead to strange timing conditions.  But it's not quite the cause of your problem since the timing condition you're vulnerable to exists because of your choice of signal handlers.</p>

<p>Anyway, here's how to at least minimize the timing condition by only setting flags in your handlers and leaving the main while loop to do the actual work.  The explanation for why your code is behaving strangely is described after the code.</p>

<pre><code>#!/usr/bin/python

from signal import *
from time import sleep
from sys import stdout

print_Qs = 0
print_Zs = 0

def write(text):
    stdout.write(text)
    stdout.flush()

def process_quit(signum, frame):
     global print_Qs
     print_Qs = 10

def process_tstp(signum, frame):
     global print_Zs
     print_Zs = 10

signal(SIGQUIT, process_quit)
signal(SIGTSTP, process_tstp)

while 1:
    if print_Zs:
        print_Zs -= 1
        c = 'Z'
    elif print_Qs:
        print_Qs -= 1
        c = 'Q'
    else:
        c = '.'
    write(c)
    sleep(0.5)
</code></pre>

<p>Anyway, here's what's going on.</p>

<p>SIGTSTP is more special than SIGQUIT.</p>

<p>SIGTSTP masks the other signals from being delivered while its signal handler is running.  When the kernel goes to deliver SIGQUIT and sees that SIGTSTP's handler is still running, it simply saves it for later.  Once another signal comes through for delivery, such as SIGINT when you <kbd>CTRL</kbd>+<kbd>C</kbd> (aka KeyboardInterrupt), the kernel remembers that it never delivered SIGQUIT and delivers it now.</p>

<p>You will notice if you change <code>while 1:</code> to <code>for i in range(60):</code> in the main loop and do your test case again, the program will exit without running the SIGTSTP handler since exit doesn't re-trigger the kernel's signal delivery mechanism.</p>

<p>Good luck!</p>
"
103886,"<p>There's a couple choices. First, you can just create a new list and add the contents of each list to it:</p>

<pre><code>li2 = []
for sublist in li:
    li2.extend(sublist)
</code></pre>

<p>Alternately, you can use the <code>itertools</code> module's <code>chain</code> function, which produces an iterable containing all the items in multiple iterables:</p>

<pre><code>import itertools
li2 = list(itertools.chain(*li))
</code></pre>

<p>If you take this approach, you can produce the string without creating an intermediate list:</p>

<pre><code>s = "","".join(itertools.chain(*li))
</code></pre>
"
348214,"<p>Create a new instance each time, where each new instance has the correct state, rather than continually modifying the state of the same instance.</p>

<p>Alternately, store an explicitly-made copy of the object (using the hint <a href=""http://docs.python.org/library/copy.html"">at this page</a>) at each step, rather than the original.</p>
"
101207,"<p>Nope, there is no such function in .NET. You have roll out your own. Note that C# doesn't support tuples, so python-like syntax sugar is missing too.</p>

<p>You can use something like this:</p>

<pre><code>class Pair&lt;T1, T2&gt;
{
    public T1 First { get; set;}
    public T2 Second { get; set;}
}

static IEnumerable&lt;Pair&lt;T1, T2&gt;&gt; Zip&lt;T1, T2&gt;(IEnumerable&lt;T1&gt; first, IEnumerable&lt;T2&gt; second)
{
    if (first.Count() != second.Count())
        throw new ArgumentException(""Blah blah"");

    using (IEnumerator&lt;T1&gt; e1 = first.GetEnumerator())
    using (IEnumerator&lt;T2&gt; e2 = second.GetEnumerator())
    {
        while (e1.MoveNext() &amp;&amp; e2.MoveNext())
        {
            yield return new Pair&lt;T1, T2&gt;() {First = e1.Current, Second = e2.Current};
        }
    }
}

...

var ints = new int[] {1, 2, 3};
var strings = new string[] {""A"", ""B"", ""C""};

foreach (var pair in Zip(ints, strings))
{
    Console.WriteLine(pair.First + "":"" + pair.Second);
}
</code></pre>
"
37009,"<p>What happens if you remove the <code>Alias /</code> directive?</p>
"
330278,"<p>No one here seems to mention older CMS frameworks, like <a href=""http://plone.org/"" rel=""nofollow"">Plone</a>.</p>

<p>Quoting <a href=""http://en.wikipedia.org/wiki/Plone%5F%28software%29"" rel=""nofollow"">Wikipedia</a>:</p>

<blockquote>
  <p>Plone is a free and open source content management system built on top of the Zope application server. It is suited for an internal website or may be used as a server on the Internet, playing such roles as a document publishing system and groupware collaboration tool.</p>
</blockquote>

<p>Started at 1999, the latest release is Plone 3.1.7, dated November 2008. Plone is doing fine - the site is <a href=""http://plone.net/sites"" rel=""nofollow"">currently listing</a> 1420 sites powered by Plone.</p>

<p>Status update December 2009: Version 3.3.2 (November 2009) is current. <a href=""http://plone.net/sites"" rel=""nofollow"">1904 sites are listed</a> as powered by Plone.</p>
"
160896,"<p>Sounds like you really just want to parse HTML, I recommend looking at any of the wonderful packages for doing so:</p>

<ul>
<li><a href=""http://crummy.com/software/BeautifulSoup"" rel=""nofollow"">BeautifulSoup</a></li>
<li><a href=""http://codespeak.net/lxml/lxmlhtml.html"" rel=""nofollow"">lxml.html</a></li>
<li><a href=""http://code.google.com/p/html5lib/"" rel=""nofollow"">html5lib</a></li>
</ul>

<p>Or! You can use a parser like one of the following:</p>

<ul>
<li><a href=""http://pyparsing.wikispaces.com"" rel=""nofollow"">PyParsing</a></li>
<li><a href=""http://dparser.sourceforge.net/"" rel=""nofollow"">DParser</a> - A GLR parser with good python bindings.</li>
<li><a href=""http://www.antlr.org"" rel=""nofollow"">ANTLR</a> - A recursive decent parser generator that can generate python code.</li>
</ul>

<p>This example is from the BeautifulSoup <a href=""http://www.crummy.com/software/BeautifulSoup/documentation.html"" rel=""nofollow"">Documentation</a>:</p>

<pre><code>from BeautifulSoup import BeautifulSoup, SoupStrainer
import re

links = SoupStrainer('a')
[tag for tag in BeautifulSoup(doc, parseOnlyThese=links)]
# [&lt;a href=""http://www.bob.com/""&gt;success&lt;/a&gt;, 
#  &lt;a href=""http://www.bob.com/plasma""&gt;experiments&lt;/a&gt;, 
#  &lt;a href=""http://www.boogabooga.net/""&gt;BoogaBooga&lt;/a&gt;]

linksToBob = SoupStrainer('a', href=re.compile('bob.com/'))
[tag for tag in BeautifulSoup(doc, parseOnlyThese=linksToBob)]
# [&lt;a href=""http://www.bob.com/""&gt;success&lt;/a&gt;, 
#  &lt;a href=""http://www.bob.com/plasma""&gt;experiments&lt;/a&gt;]
</code></pre>
"
210417,"<p>It's not a typo, it's a deliberate error in a test module.</p>

<pre><code>met% pwd
/home/coventry/src/Python-3.0rc1
met% rgrep uft-8 .
./Lib/test/bad_coding.py:# -*- coding: uft-8 -*-
./py3k/Lib/test/bad_coding.py:# -*- coding: uft-8 -*-
</code></pre>

<p>Removing this module causes the <code>help</code> command to fall over in a different way.</p>

<p>It is a bug, however.  Someone should file a report.</p>
"
284800,"<p>While wxPython is unavailable for the reasons listed by @Ali, you may want to take a look at <a href=""http://wxnet.sourceforge.net/"">wx.NET</a>. You could use IronPython to call these assemblies instead, and it should be cross-platform (I'm assuming that's what you're after, or you would just use WinForms). If all you're looking for is API compatibility, I think you're out of luck  :(</p>
"
285280,"<p>Python has urllib2, which is extensible library for opening URLs</p>

<p>Full-featured easy to use library.</p>

<p><a href=""https://docs.python.org/library/urllib2.html"" rel=""nofollow"">https://docs.python.org/library/urllib2.html</a></p>
"
106851,"<p>It looks like there is a <a href=""http://en.wikipedia.org/wiki/Curses_(programming_library)"" rel=""nofollow"">curses</a> port/library for Python:</p>

<p><a href=""https://docs.python.org/library/curses.html"" rel=""nofollow"">https://docs.python.org/library/curses.html</a></p>
"
335640,"<p>You may want to look at the <a href=""http://twistedmatrix.com/trac/"">twisted</a> implementation as that will give you access to the full range of interaction with the client.  I believe (though I have never used it in production) that twisted can be trusted in a production environment.</p>
"
237170,"<p>Yes.  I know of at least one program that does this, <a href=""http://www.cs.umd.edu/hcil/kiddesign/introduction.shtml"" rel=""nofollow"">KidPad</a>.  I think it's written in Java and was developed by <a href=""http://www.cs.uiowa.edu/~hourcade/"" rel=""nofollow"">Juan Pablo Hourcade</a>, now at the University of Iowa.  You'd have to ask him how it was implemented.</p>
"
313427,"<p>Does numpy.dstack do what you want? The first two indexes are the same as the original array, and the new third index is ""depth"".</p>

<pre><code>&gt;&gt;&gt; import numpy as N
&gt;&gt;&gt; a = N.array([[1,2,3],[4,5,6],[7,8,9]])
&gt;&gt;&gt; a
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&gt;&gt;&gt; b = N.dstack((a,a,a))
&gt;&gt;&gt; b
array([[[1, 1, 1],
        [2, 2, 2],
        [3, 3, 3]],

       [[4, 4, 4],
        [5, 5, 5],
        [6, 6, 6]],

       [[7, 7, 7],
        [8, 8, 8],
        [9, 9, 9]]])
&gt;&gt;&gt; b[1,1]
array([5, 5, 5])
</code></pre>
"
313431,"<p>Those are comma separated values, so using a csv library is the easiest solution.</p>

<p>I threw that sample data you have into /var/tmp/sampledata, then I did this:</p>

<pre><code>&gt;&gt;&gt; import csv
&gt;&gt;&gt; for line in csv.reader(open('/var/tmp/sampledata')):
...   print line
['$GPRMC', '092204.999', '**4250.5589', 'S', '14718.5084', 'E**', '1', '12', '24.4', '**89.6**', 'M', '', '', '0000\\*1F']
['$GPRMC', '093345.679', '**4234.7899', 'N', '11344.2567', 'W**', '3', '02', '24.5', '**1000.23**', 'M', '', '', '0000\\*1F']
['$GPRMC', '044584.936', '**1276.5539', 'N', '88734.1543', 'E**', '2', '04', '33.5', '**600.323**', 'M', '', '', '\\*00']
['$GPRMC', '199304.973', '**3248.7780', 'N', '11355.7832', 'W**', '1', '06', '02.2', '**25722.5**', 'M', '', '', '\\*00']
['$GPRMC', '066487.954', '**4572.0089', 'S', '45572.3345', 'W**', '3', '09', '15.0', '**35000.00**', 'M', '', '', '\\*1F']
</code></pre>

<p>You can then process the data however you wish. It looks a little odd with the '**' at the start and end of some of the values, you might want to strip that stuff off, you can do:</p>

<pre><code>&gt;&gt; eastwest = 'E**'
&gt;&gt; eastwest = eastwest.strip('*')
&gt;&gt; print eastwest
E
</code></pre>

<p>You will have to cast some values as floats. So for example, the 3rd value on the first line of sample data is:</p>

<pre><code>&gt;&gt; data = '**4250.5589'
&gt;&gt; print float(data.strip('*'))
4250.5589
</code></pre>
"
242700,"<p>New-style classes inherit from <code>object</code> and must be written as such in Python 2.2 onwards (i.e. <code>class Classname(object):</code> instead of <code>class Classname:</code>). The core change is to unify types and classes, and the nice side-effect of this is that it allows you to inherit from built-in types.</p>

<p>Read <a href=""http://www.python.org/download/releases/2.2.3/descrintro/"" rel=""nofollow"">descrintro</a> for more details.</p>
"
243397,"<p>Store the text somewhere (e.g. a database) and then pass through the primary key.</p>
"
20983,"<p>You would also need to then save the message.  Then it that should work.</p>
"
224800,"<p>Here is a simple example. This way you can make your ""wizard"" work like a finite state machine where states are different pages that are initialized on demand. Also, the data is shared between pages.</p>

<pre><code>import wx
import wx.lib.newevent


(PageChangeEvent, EVT_PAGE_CHANGE) = wx.lib.newevent.NewEvent()


class Data:
    foo = None
    bar = None


class Page1(wx.Panel):
    def __init__(self, parent, data):
        wx.Panel.__init__(self, parent)
        self.parent = parent
        self.data = data

        sizer = wx.BoxSizer(wx.VERTICAL)
        self.SetSizer(sizer)
        label = wx.StaticText(self, label=""Page 1 - foo"")
        self.foo = wx.TextCtrl(self)
        goto_page2 = wx.Button(self, label=""Go to page 2"")

        for c in (label, self.foo, goto_page2):
            sizer.Add(c, 0, wx.TOP, 5)

        goto_page2.Bind(wx.EVT_BUTTON, self.OnPage2)

    def OnPage2(self, event):
        self.data.foo = self.foo.Value
        wx.PostEvent(self.parent, PageChangeEvent(page=Page2))


class Page2(wx.Panel):
    def __init__(self, parent, data):
        wx.Panel.__init__(self, parent)
        self.parent = parent
        self.data = data

        sizer = wx.BoxSizer(wx.VERTICAL)
        self.SetSizer(sizer)
        label = wx.StaticText(self, label=""Page 2 - bar"")
        self.bar = wx.TextCtrl(self)
        goto_finish = wx.Button(self, label=""Finish"")

        for c in (label, self.bar, goto_finish):
            sizer.Add(c, 0, wx.TOP, 5)

        goto_finish.Bind(wx.EVT_BUTTON, self.OnFinish)

    def OnFinish(self, event):
        self.data.bar = self.bar.Value
        wx.PostEvent(self.parent, PageChangeEvent(page=finish))


def finish(parent, data):
    wx.MessageBox(""foo = %s\nbar = %s"" % (data.foo, data.bar))
    wx.GetApp().ExitMainLoop()


class Test(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None)
        self.data = Data()
        self.current_page = None

        self.Bind(EVT_PAGE_CHANGE, self.OnPageChange)
        wx.PostEvent(self, PageChangeEvent(page=Page1))

    def OnPageChange(self, event):
        page = event.page(self, self.data)
        if page == None:
            return
        if self.current_page:
            self.current_page.Destroy()
        self.current_page = page
        page.Layout()
        page.Fit()
        page.Refresh()


app = wx.PySimpleApp()
app.TopWindow = Test()
app.TopWindow.Show()
app.MainLoop()
</code></pre>
"
301537,"<p>In your case, just use split:</p>

<pre><code>&gt;&gt;&gt; d1=""2007-07-18 10:03:19""
&gt;&gt;&gt; d1.split()[0]
'2007-07-18'
&gt;&gt;&gt;
</code></pre>

<p>(The 1st part after splitting with whitespace)</p>

<p>If you insist on using <code>strptime</code>, the format is <code>""%Y-%m-%d %H:%M:%S""</code> :</p>

<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.strptime(d1,""%Y-%m-%d %H:%M:%S"")
time.struct_time(tm_year=2007, tm_mon=7, tm_mday=18, tm_hour=10, tm_min=3, tm_sec=19, tm_wday=2, tm_yday=199, tm_isdst=-1)
&gt;&gt;&gt; time.strftime(""%Y-%m-%d"", _)
'2007-07-18'
&gt;&gt;&gt;
</code></pre>
"
255570,"<p>Regarding performance: if using psyco, lists can be quite a bit faster than generators. In the example below, lists are almost 50% faster when using psyco.full()</p>

<pre><code>import psyco
import time
import cStringIO

def time_func(func):
    """"""The amount of time it requires func to run""""""
    start = time.clock()
    func()
    return time.clock() - start

def fizzbuzz(num):
    """"""That algorithm we all know and love""""""
    if not num % 3 and not num % 5:
        return ""%d fizz buzz"" % num
    elif not num % 3:
        return ""%d fizz"" % num
    elif not num % 5:
        return ""%d buzz"" % num
    return None

def with_list(num):
    """"""Try getting fizzbuzz with a list comprehension and range""""""
    out = cStringIO.StringIO()
    for fibby in [fizzbuzz(x) for x in range(1, num) if fizzbuzz(x)]:
        print &gt;&gt; out, fibby
    return out.getvalue()

def with_genx(num):
    """"""Try getting fizzbuzz with generator expression and xrange""""""
    out = cStringIO.StringIO()
    for fibby in (fizzbuzz(x) for x in xrange(1, num) if fizzbuzz(x)):
        print &gt;&gt; out, fibby
    return out.getvalue()

def main():
    """"""
    Test speed of generator expressions versus list comprehensions,
    with and without psyco.
    """"""

    #our variables
    nums = [10000, 100000]
    funcs = [with_list, with_genx]

    # first, try without psyco
    print ""without psyco""
    for num in nums:
        print ""  number:"", num
        for func in funcs:
            print func.__name__, time_func(lambda : func(num)), ""seconds""
        print

    # now with pscyo
    print ""with psyco""
    psyco.full()
    for num in nums:
        print ""  number:"", num
        for func in funcs:
            print func.__name__, time_func(lambda : func(num)), ""seconds""
        print

if __name__ == ""__main__"":
    main()
</code></pre>

<p>Results:</p>

<pre><code>without psyco
  number: 10000
with_list 0.0519102208309 seconds
with_genx 0.0535933367509 seconds

  number: 100000
with_list 0.542204280744 seconds
with_genx 0.557837353115 seconds

with psyco
  number: 10000
with_list 0.0286369007033 seconds
with_genx 0.0513424889137 seconds

  number: 100000
with_list 0.335414877839 seconds
with_genx 0.580363490491 seconds
</code></pre>
"
303673,"<p><a href=""http://www.python.org/doc/2.5.2/tut/node7.html#SECTION007300000000000000000"" rel=""nofollow"">http://www.python.org/doc/2.5.2/tut/node7.html</a></p>

<p>Look for ""sequence unpacking"" in section 5.3.</p>
"
252329,"<p>I think Google are just trying to drive their point home - here are a bunch of different representations of the same page, test them, see which is best.</p>

<p>Which block do you like best?</p>
"
99347,"<p>Alexandru's suggestion of using class constants for enums works quite well. </p>

<p>I also like to add a dictionary for each set of constants to lookup a human-readable string representation. </p>

<p>This serves two purposes: a) it provides a simple way to pretty-print your enum and b) the dictionary logically groups the constants so that you can test for membership.</p>

<pre><code>class Animal:    
  TYPE_DOG = 1
  TYPE_CAT = 2

  type2str = {
    TYPE_DOG: ""dog"",
    TYPE_CAT: ""cat""
  }

  def __init__(self, type_):
    assert type_ in self.type2str.keys()
    self._type = type_

  def __repr__(self):
    return ""&lt;%s type=%s&gt;"" % (
        self.__class__.__name__, self.type2str[self._type].upper())
</code></pre>
"
97635,"<p>I use Komodo Edit, which might be a little less sophisticated than full Komodo.</p>

<p>I create a ""New Command"" with <code>%(python) -i %f</code> as the text of the command.  I have this run in a ""New Console"".  I usually have the starting directory as %p, the top of the project directory.</p>

<p>The -i option runs the file and drops into interactive Python.</p>
"
279596,"<pre>
_counter = 0
def foo():
   global _counter
   _counter += 1
   print 'counter is', _counter
</pre>

<p>Python customarily uses underscores to indicate private variables. The only reason in C to declare the static variable inside the function is to hide it outside the function, which is not really idiomatic Python.</p>
"
164293,"<p>You might run the netstat command and see if you have a bunch of sockets in the TIME_WAIT state. Depending on your MaxUserPort setting you might be severly limited in the number of ports available to use. In addition the TcpTimedWaitDelay is usually set to 240 seconds so any sockets that are used cannot be reused for four minutes.</p>

<p>There's more good information here --> <a href=""http://smallvoid.com/article/winnt-tcpip-max-limit.html"">http://smallvoid.com/article/winnt-tcpip-max-limit.html</a></p>
"
209303,"<p>Python 3 is just <strong>not that different</strong> from Python 2.x.  In terms of syntax <em>per se</em>, things that will actually need to be handled differently by the parser, the only major change is in the replacement of the <code>print</code> statement with the <code>print</code> function.</p>

<p>Most of the features of Python can be easily probed via introspection (online help, method completion, function signatures, etc.), so there's no reason why any Python IDE will require major changes to work with Python 3.0.  I expect IDLE and SPE and the other open-source IDEs will be support it before the final release.</p>
"
162854,"<p>Not conveniently, without further breaking encapsulation. The double-underscore attribute is name-mangled by prepending '_ClassName' for the class it is being accessed in. So, if you have a 'ContainerThing' class that has a '__value' attribute, the attribute is actually being stored as '<code>_ContainerThing__value</code>'. Changing the class name (or refactoring where the attribute is assigned to) would mean breaking all subclasses that try to access that attribute.</p>

<p>This is exactly why the double-underscore name-mangling (which is not really ""private"", just ""inconvenient"") is a bad idea to use. Just use a <em>single</em> leading underscore. Everyone will know not to touch your 'private' attribute and you will still be able to access it in subclasses and other situations where it's darned handy. The name-mangling of double-underscore attributes is useful only to avoid name-clashes for attributes that are truly specific to a particular class, which is extremely rare. It provides no extra 'security' since even the name-mangled attributes are trivially accessible.</p>

<p>For the record, '<code>__value</code>' and '<code>value</code>' (and '<code>_value</code>') are not the same name. The underscores are part of the name.</p>
"
349020,"<p>On my system (Debian lenny) its in /usr/lib/python2.5/mimetypes.py
in the list <code>knownfiles</code> you can supply your own files for the <code>init()</code> function.</p>
"
777,"<p>I don't have any experience with <a href=""http://www.SiteGround.com"" rel=""nofollow"">http://www.SiteGround.com</a> as a web host personally.  </p>

<p>This is just a guess, but it's common for a shared host to support Python and MySQL with the MySQLdb module (e.g., GoDaddy does this).  Try the following CGI script to see if MySQLdb is installed.</p>

<pre><code>#!/usr/bin/python<br><br>module_name = 'MySQLdb'<br>head = '''Content-Type: text/html<br><br>%s is ''' % module_name<br><br>try:<br>    __import__(module_name)<br>    print head + 'installed'<br>except ImportError:<br>    print head + 'not installed'<br></code></pre>"
280224,"<pre><code>l.sort(key=sum_nested)
</code></pre>

<p>Where <code>sum_nested()</code> is:</p>

<pre><code>def sum_nested(astruct):
    try: return sum(map(sum_nested, astruct))
    except TypeError:
        return astruct


assert sum_nested([[([8, 9], 10), 11], 12]) == 50
</code></pre>
"
285726,"<p>Why no give <a href=""http://code.google.com/p/parsedatetime/"" rel=""nofollow"">parsedatetime</a> a try?</p>
"
4162,"<p><code>/dev/cu.xxxxx</code> is the ""callout"" device, it's what you use when you establish a connection to the serial device and start talking to it. <code>/dev/tty.xxxxx</code> is the ""dialin"" device, used for monitoring a port for incoming calls for e.g. a fax listener.</p>"
348403,"<p>poplib and smtplib will be your friends when developing your app.</p>
"
802,"<p>I uploaded it and got an internal error</p>

<pre><code>Premature end of script headers<br></code></pre>

<p>After much playing around, I found that if I had</p>

<pre><code>import cgi<br>import cgitb; cgitb.enable()<br>import MySQLdb<br></code></pre>

<p>It would give me a much more useful answer and say that it was not installed, you can see it yourself -> <a href=""http://woarl.com/db.py"" rel=""nofollow"">http://woarl.com/db.py</a></p>

<p>Oddly enough, this would produce an error</p>

<pre><code>import MySQLdb<br>import cgi<br>import cgitb; cgitb.enable()<br></code></pre>

<p>I looked at some of the other files I had up there and it seems that library was one of the ones I had already tried.</p>"
497,"<p>open up a terminal (Applications-&gt;Utilities-&gt;Terminal) and type this in:</p>

<pre><code>locate InsertFontHere<br></code></pre>

<p>This will spit out every file that has the name you want.</p>

<p>Warning: there may be alot to wade through.</p>"
280332,"<p>In those instances, if you do not use <code>self</code> then you will create only a local variable of that name. In the first example, <code>panel</code> is created as a local variable and then referenced later in the function, but it won't be available outside that function. The act of passing <code>self</code> to the wx.Panel constructor associated it with the current object in some fashion, so it doesn't just disappear when the function returns.</p>
"
186927,"<p>You don't need a regular expression, you can use glob, which takes wildcards e.g. Run*.py</p>

<p>For example, to get those files in your current directory...</p>

<pre><code>import os, glob
files = glob.glob( """".join([ os.getcwd(), ""\\Run*.py""]) )
</code></pre>
"
186813,"<p>There are uses for both cases, so I don't think this is an either-or issue.
I'd consider using from module <code>import x,y,z</code> when:</p>

<ul>
<li><p>There are a fairly small number of things to import</p></li>
<li><p>The purpose of the functions imported is obvious when divorced from the module name.  If the names are fairly generic, they may clash with others and tell you little.  eg. seeing <code>remove</code> tells you little, but <code>os.remove</code> will probably hint that you're dealing with files.</p></li>
<li><p>The names don't clash.  Similar to the above, but more important.  <strong>Never</strong> do something like:</p>

<pre><code> from os import open
</code></pre></li>
</ul>

<p><code>import module [as renamed_module]</code> has the advantage that it gives a bit more context about what is being called when you use it.  It has the disadvantage that this is a bit more cluttered when the module isn't really giving more information, and is slightly less performant (2 lookups instead of 1).</p>

<p>It also has advantages when testing however (eg. replacing os.open with a mock object, without having to change every module), and should be used when using mutable modules, e.g.</p>

<pre><code>import config
config.dburl = 'sqlite:///test.db'
</code></pre>

<p>If in doubt, I'd always go with the <code>import module</code> style.</p>
"
186295,"<p>Your example can be rewritten slightly to construct the first dictionary using a generator expression and to remove necessity of construction of another mappings. Just reuse the old ones:</p>

<pre><code>def unique_mapping(mappings):
    return dict((m['id'], m) for m in mappings).values()
</code></pre>

<p>Although this came out as a one-liner, I still think it's quite readable.</p>

<p>There are two things you have to keep in mind when using your original solution and mine:</p>

<ul>
<li>the items will not always be returned in the same order they were originally</li>
<li>the later entry will overwrite previous entries with the same id</li>
</ul>

<p>If you don't mind, then I suggest the solution above. In other case, this function preserves order and treats first-encountered ids with priority:</p>

<pre><code>def unique_mapping(mappings):
    addedIds = set()
    for m in mappings:
        mId = m['id']
        if mId not in addedIds:
            addedIds.add(mId)
            yield m
</code></pre>

<p>You might need to call it with <code>list(unique_mappings(mappings))</code> if you need a list and not a generator.</p>
"
348696,"<p>Within gmail, you can filter on ""has:attachment"", use it to identify the messages you should be getting when testing. Note this appears to give both messages with attached files (paperclip icon shown), as well as inline attached images (no paperclip shown).</p>

<p>There is no Gmail API, so IMAP or POP are your only real options. The <a href=""http://www.nakov.com/inetjava/lectures/part-1-sockets/InetJava-1.9-JavaMail-API.html"" rel=""nofollow"">JavaMail API</a> may be of some assistance as well as this very terse article on <a href=""http://www.perlmonks.org/?node_id=697321"" rel=""nofollow"">downloading attachments from IMAP using Perl</a>. Some <a href=""http://stackoverflow.com/questions/61176/getting-mail-from-gmail-into-java-application-using-imap"">previous questions</a> here on SO may also help.</p>

<p>This <a href=""http://petewarden.typepad.com/searchbrowser/2008/03/how-to-use-imap.html"" rel=""nofollow"">PHP example</a> may help too. Unfortunately from what I can see, there is no attachment information contained within the imap_header, so downloading the body is required to be able to see the X-Attachment-Id field. (someone please prove me wrong).</p>
"
36238,"<p>One way to judge what python is used for is to look at what products use python at the moment.  This <a href=""http://en.wikipedia.org/wiki/Python_software"" rel=""nofollow"">wikipedia page</a> has a long list including various web frameworks, content management systems, version control systems, desktop apps and IDEs.</p>

<p>As it says <a href=""http://en.wikipedia.org/wiki/Python_%28programming_language%29#Usage"" rel=""nofollow"">here</a> - ""Some of the largest projects that use Python are the Zope application server, YouTube, and the original BitTorrent client. Large organizations that make use of Python include Google, Yahoo!, CERN and NASA. ITA uses Python for some of its components.""</p>

<p>So in short, yes, it is ""proper for production use in the development of stand-alone complex applications"".  So are many other languages, with various pros and cons.  Which is the best language for your particular use case is too subjective to answer, so I won't try, but often the answer will be ""the one your developers know best"".</p>
"
94206,"<p>You could always use <em>shutil.copyfileobj</em>, in your example:</p>

<pre><code>new_file = open('bar.txt', 'rw')
shutil.copyfileobj(f, new_file)
</code></pre>
"
5302,"<p>I won't help much but I remember that I was able to wrap MATLAB simulation into DLL and then call it from Delphi app. It work really well.</p>

<p>Anyway: good luck!!!</p>"
5938,"<p>Also if the server you are connecting to supports it, look at <a href=""http://en.wikipedia.org/wiki/HTTP_ETag"" rel=""nofollow"">Etags</a> and the <a href=""http://en.wikipedia.org/wiki/List_of_HTTP_headers#Requests"" rel=""nofollow"">If-Modified-Since</a> and <a href=""http://en.wikipedia.org/wiki/List_of_HTTP_headers#Requests"" rel=""nofollow"">If-None-Match</a> headers.</p>

<p>Using these will take advantage of the webserver's caching rules and will return a <a href=""http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#3xx_Redirection"" rel=""nofollow"">304 Not Modified</a> status code if the content hasn't changed.</p>"
347175,"<p>You could use a metaclass to dynamically insert the tests.  This works fine for me:</p>

<pre><code>import unittest

class UnderTest(object):

    def f1(self, i):
        return i + 1

    def f2(self, i):
        return i + 2

class TestMeta(type):

    def __new__(cls, name, bases, attrs):
        funcs = [t for t in dir(UnderTest) if t[0] == 'f']

        def doTest(t):
            def f(slf):
                ut=UnderTest()
                getattr(ut, t)(3)
            return f

        for f in funcs:
            attrs['test_gen_' + f] = doTest(f)
        return type.__new__(cls, name, bases, attrs)

class T(unittest.TestCase):

    __metaclass__ = TestMeta

    def testOne(self):
        self.assertTrue(True)

if __name__ == '__main__':
    unittest.main()
</code></pre>
"
347181,"<p>You identified that your initial problem was trying to write C semantics in Lisp. Is it not repeating the mistake to try to write scheme semantics in python? I always try to learn language X as a paradigm as much as a language and write in the most x-ish way.</p>

<p>It might be justifiable if this was a business app you knew was going to be migrated, but otherwise I'd just write it in scheme to begin with.</p>
"
347271,"<p>One way to do this would be to ""normalise"" the difference between the minimum and maximum and do a case distinction on that value. In python:</p>

<pre><code>delta = maximum - minimum
factor = 10**math.ceil(math.log(delta,10))  # smallest power of 10 greater than delta
normalised_delta = delta / factor           # 0.1 &lt;= normalised_delta &lt; 1
if normalised_delta/5 &gt;= 0.1:
  step_size = 0.1
elif normalised_delta/5 &gt;= 0.05:
  step_size = 0.05
elif normalised_delta/20 &lt;= 0.01:
  step_size = 0.01
step_size = step_size * factor
</code></pre>

<p>The above code assumes you want the biggest possible gap. For the smallest you would use the following if:</p>

<pre><code>if normalised_delta/20 == 0.005:
  step_size = 0.005
elif normalised_delta/20 &lt;= 0.01:
  step_size = 0.01
elif normalised_delta/5 &gt;= 0.05:
  step_size = 0.05
</code></pre>

<p>Besides the possibility that there are more than one suitable values, there is also the somewhat worrisome possibility that there are none. Take for example the range [0,24] where a gap of 12.5p would give a step size of 1.2 and a gap of 50p would give step size 4.8. There is no ""unit"" or ""half unit"" in between. The problem is that the difference between a gap of 12.5p and one of 50p is a factor 4 while the difference between 0.01 and 0.05 is a factor 5. So you will have to widen the range of allowable gaps a bit and adjust the code accordingly.</p>

<p>Clarification of some of the magic numbers: divisions by 20 and 5 correspond to the number of segments with the minimal and maximal gap size, respectively (ie. 250/12.5 and 250/50). As the normalised delta is in the range [0.1,1), you get that dividing it by 20 and 5 gives you [0.005,0.05) and [0.02,0.2), respectively. These ranges result in the possible (normalised) step sizes of 0.005 and 0.01 for the first range and 0.05 and 0.1 for the second.</p>
"
107746,"<p>One way to get unbuffered output would be to use <code>sys.stderr</code> instead of <code>sys.stdout</code> or to simply call <code>sys.stdout.flush()</code> to explicitly force a write to occur.</p>

<p>You could easily redirect everything printed by doing:</p>

<pre><code>import sys; sys.stdout = sys.stderr
print ""Hello World!""
</code></pre>

<p>Or to redirect just for a particular <code>print</code> statement:</p>

<pre><code>print &gt;&gt;sys.stderr, ""Hello World!""
</code></pre>

<p>To reset stdout you can just do:</p>

<pre><code>sys.stdout = sys.__stdout__
</code></pre>
"
105764,"<p>You can probably restrict access to the entire site via apache with htaccess, taking the problem out of the django's project space entirely.</p>
"
106640,"<p><code>unicode</code> does not guess the encoding of your text. If your object can print itself as <code>unicode</code>, define the <code>__unicode__()</code> method that returns a Unicode string.</p>

<p><hr /></p>

<p>The secret is that <code>unicode(r)</code> is not actually calling <code>__str__()</code> itself. Instead, it's looking for a <code>__unicode__()</code> method. The default implementation of <code>__unicode__()</code> will call <code>__str__()</code> and then attempt to decode it using the <code>ascii</code> charset. When you pass the encoding, <code>unicode()</code> expects the first object to be something that can be decoded -- that is, an instance of <code>basestring</code>.</p>

<p><hr /></p>

<blockquote>
  <p>Behavior is weird because it tries to decode as ascii if I don't pass 'utf-8'. But if I pass 'utf-8' it gives a different error...</p>
</blockquote>

<p>That's because when you specify ""utf-8"", it treats the first parameter as a string-like object to be decoded. Without it, it treats the parameter as an object to be coerced to unicode.</p>

<p>I do not understand the confusion. If you know that the object's <code>text</code> attribute will always be UTF-8 encoded, just define <code>__unicode__()</code> and then everything will work fine.</p>
"
92509,"<p>This function uses list comprehensions and str.join, so it runs in linear time instead of O(n^2):</p>

<pre><code>from curses.ascii import isprint

def printable(input):
    return ''.join(char for char in input if isprint(char))
</code></pre>
"
285494,"<p>Also for PyGTK, there is <a href=""http://gazpacho.sicem.biz/"" rel=""nofollow"">Gazpacho</a>, it's pure python which makes adding your own custom widgets easier, and already has gtkbuilder support.</p>

<p>I took over maintenance of the project a few months ago, and we plan to release it under the umbrella of the <a href=""http://pida.co.uk/"" rel=""nofollow"">PIDA IDE</a>, in a more Visual Studio-like setup. Patches accepted!</p>
"
286019,"<p>Looks like you have two issues there:</p>

<ol>
<li>link.content**s**, not link.content</li>
<li>attrs is a dictionary, not a string. It holds key value pairs for each attribute in an HTML element. link.attrs['href'] will get you what you appear to be looking for, but you'd want to wrap that in a check in case you come across an a tag without an href attribute.</li>
</ol>
"
286119,"<p>First, your input can be simplified a lot.  You don't need to read and parse a file.  You can just declare your objects in Python notation.  Eval the file.</p>

<pre><code>b = [
    [4.0, -2.0,  1.0],
    [1.0, +5.0, -3.0],
    [2.0, +2.0, +5.0],
]
y = [ 11.0, -6.0, 7.0 ]
</code></pre>

<p>Second, y=-1.2-0.20000000000000001x+0.59999999999999998z isn't unusual. There's no exact representation in binary notation for 0.2 or 0.6.  Consequently, the values displayed are the decimal approximations of the original not exact representations.  Those are true for just about every kind of floating-point processor there is.</p>

<p>You can try the Python 2.6 <a href=""http://docs.python.org/library/fractions.html"" rel=""nofollow"">fractions</a> module.  There's an older <a href=""http://infohost.nmt.edu/tcc/help/lang/python/examples/rational/"" rel=""nofollow"">rational</a> package that might help.</p>

<p>Yes, raising floating-point numbers to powers increases the errors.  Consequently, you have to be sure to avoid using the right-most positions of the floating-point number, since those bits are mostly noise.</p>

<p>When displaying floating-point numbers, you have to appropriately round them to avoid seeing the noise bits.</p>

<pre><code>&gt;&gt;&gt; a
0.20000000000000001
&gt;&gt;&gt; ""%.4f"" % (a,)
'0.2000'
</code></pre>
"
106889,"<p>I started out using glade, but soon moved to just doing everything in code. Glade is nice for simple things, and it's good when you're learning how GTK organizes the widgets (how things are packed, etc). Constructing everything in code, however, you have much more flexibility. Plus, you don't have the glade dependency.</p>
"
107207,"<p><a href=""http://pygments.org/"" rel=""nofollow"">pygments</a> is a source code syntax highlighter written in python.  It has lexers and formatters, and may be interesting to peek at the source.</p>
"
108885,"<p>There is a variety of Python music software, you can find a catalog <a href=""http://wiki.python.org/moin/PythonInMusic"" rel=""nofollow"">here</a>.</p>

<p>If you scroll down the linked page, you find a section on <strong>Music Programming in Python</strong> describing several music creation packages including <a href=""http://musickit.sourceforge.net/"" rel=""nofollow"">MusicKit</a> and <a href=""http://sndobj.sourceforge.net/#python"" rel=""nofollow"">PySndObj</a>.</p>
"
328078,"<p>Use a <a href=""http://docs.wxwidgets.org/stable/wx_wxgrid.html"" rel=""nofollow"">wxGrid</a> with a <a href=""http://docs.wxwidgets.org/stable/wx_wxgridtablebase.html"" rel=""nofollow"">wxGridTableBase</a> instead</p>

<p>Here is a simple example:</p>

<pre><code>import wx, wx.grid

class GridData(wx.grid.PyGridTableBase):
    _cols = ""a b c"".split()
    _data = [
        ""1 2 3"".split(),
        ""4 5 6"".split(),
        ""7 8 9"".split()
    ]

    def GetColLabelValue(self, col):
        return self._cols[col]

    def GetNumberRows(self):
        return len(self._data)

    def GetNumberCols(self):
        return len(self._cols)

    def GetValue(self, row, col):
        return self._data[row][col]

    def SetValue(self, row, col, val):
        self._data[row][col] = val

class Test(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None)
        self.data = GridData()
        grid = wx.grid.Grid(self)
        grid.SetTable(self.data)
        self.Bind(wx.EVT_CLOSE, self.OnClose)
        self.Show()

    def OnClose(self, event):
        print self.data._data
        event.Skip()

app = wx.PySimpleApp()
app.TopWindow = Test()
app.MainLoop()
</code></pre>
"
214782,"<p>This seems to do the trick, at least comparing two windows, one running a straight ngrep (e.g. ngrep whatever) and one being piped into the following program (with ngrep whatever | ngrephl target-string).</p>

<pre><code>#! /usr/bin/perl

use strict;
use warnings;

$| = 1; # autoflush on

my $keyword = shift or die ""No pattern specified\n"";
my $cache   = '';

while (read STDIN, my $ch, 1) {
    if ($ch eq '#') {
        $cache =~ s/($keyword)/\e[31m$1\e[0m/g;
        syswrite STDOUT, ""$cache$ch"";
        $cache = '';
    }
    else {
        $cache .= $ch;
    }
}
</code></pre>
"
206866,"<p>Well, you could try <a href=""http://en.wikipedia.org/wiki/Named_pipe"" rel=""nofollow"">named pipes</a> or something similar but I really think that XML-RPC would be the most headache-free way.</p>
"
207106,"<p>Selenium IDE, a tool for testing, is something I've used for a lot of screen-scraping. There are a few things it doesn't handle well (Javascript window.alert() and popup windows in general), but it does its work on a page by actually triggering the click events and typing into the text boxes. Because the IDE portion runs in Firefox, you don't have to do all of the management of sessions, etc. as Firefox takes care of it. The IDE records and plays tests back.</p>

<p>It also exports C#, PHP, Java, etc. code to build compiled tests/scrapers that are executed on the Selenium server. I've done that for more than a few of my Selenium scripts, which makes things like storing the scraped data in a database much easier.</p>

<p>Scripts are fairly simple to write and alter, being made up of things like (""clickAndWait"",""submitButton""). Worth a look given what you're describing.</p>
"
166053,"<p>The Resource Kit has always included this. At least since Windows 2000.</p>

<p>Also, the cygwin package has a <code>sleep</code> - plop that into your PATH and include the <code>cygwin.dll</code> (or whatever it's called) and way to go!</p>
"
38287,"<p>Honestly?  I've never found a use for staticmethod or classmethod.  I've yet to see an operation that can't be done using a global function or an instance method.</p>

<p>It would be different if python used private and protected members more like Java does.  In Java, I need a static method to be able to access an instance's private members to do stuff.  In Python, that's rarely necessary.</p>

<p>Usually, I see people using staticmethods and classmethods when all they really need to do is use python's module-level namespaces better.</p>
"
328374,"<p><a href=""http://pypi.python.org/pypi/webstemmer/0.5.0"" rel=""nofollow"">http://pypi.python.org/pypi/webstemmer/0.5.0</a></p>

<p><a href=""http://atropine.sourceforge.net/documentation.html"" rel=""nofollow"">http://atropine.sourceforge.net/documentation.html</a></p>

<p><hr /></p>

<p>alternatively, i think you can drive lynx from python, search on that</p>
"
213832,"<p>Anything is a good replacement for the Batch file system in windows.  Perl, Python, Powershell are all good choices.</p>
"
158450,"<p>This is a pretty common problem.  Typically the best you can do is to either </p>

<p>A) create some kind of ceasar cipher function to encode/decode (just not rot13)
or 
B) the preferred method is to use an encryption key, within reach of your program, encode/decode the password.  In which you can use file protection to protect access the key.
  Along those lines if your app runs as a service/daemon (like a webserver) you can put your key into a password protected keystore with the password input as part of the service startup. It'll take an admin to restart your app, but you will have really good pretection for your configuration passwords.</p>
"
214574,"<p>See the <a href=""http://csc.ucdavis.edu/~chaos/courses/nlp/Software/NumPyBook.pdf"" rel=""nofollow"">Guide to NumPy</a>, section 13.3.10.  There's lots of different ways to make a descriptor, although it's not nearly as easy as writing <code>[('a', 'i4'), ('b', 'U5')]</code>.</p>
"
328007,"<p>Unless the file is huge, you'll probably find it easier to read the entire file into a data structure (which might just be a list of lines), and then modify the data structure in memory, and finally write it back to the file.</p>

<p>On the other hand maybe your file <em>is</em> really huge - multiple GBs at least. In which case: the last line is probably terminated with a new line character, if you seek to that position you can overwrite it with the new text at the end of the last line. </p>

<p>So perhaps:</p>

<pre><code>f = open(""foo.file"", ""wb"")
f.seek(-len(os.linesep), os.SEEK_END) 
f.write(""new text at end of last line"" + os.linesep)
f.close()
</code></pre>

<p>(Modulo line endings on different platforms)</p>
"
328967,"<p>You want the struct module.</p>

<pre><code>packed = struct.pack('l', 123456)
assert struct.unpack('l', packed)[0] == 123456
</code></pre>
"
213695,"<p>You probably want to use memcached instead. It's very fast, very stable, very popular, has good python libraries, and will allow you to grow to a distributed cache should you need to:</p>

<p><a href=""http://www.danga.com/memcached/"" rel=""nofollow"">http://www.danga.com/memcached/</a></p>
"
213812,"<p>Are you aware of <a href=""http://www.microsoft.com/windowsserver2003/technologies/management/powershell/default.mspx"" rel=""nofollow"">PowerShell</a>?</p>
"
328142,"<p>Here's another approach:  </p>

<ul>
<li>Lets assume the two points be A (x1,y1) and B (x2,y2)</li>
<li>The equation of the line passing through those points is (x-x1)/(y-y1)=(x2-x1)/(y2-y1) .. (just making equating the slopes)</li>
</ul>

<p>Point C (x3,y3) will lie between A &amp; B if:</p>

<ul>
<li>x3,y3 satisfies the above equation.</li>
<li>x3 lies between x1 &amp; x2 and y3 lies between y1 &amp; y2 (trivial check)</li>
</ul>
"
328807,"<p>If you convert the character to a unicode then you can use unicodedata:</p>

<pre><code>&gt;&gt;&gt; unicodedata.category(u'Ä')[0] in 'LNPS'
True
</code></pre>
"
331826,"<p>IMHO, the python way is to pass the list as *list. As in:</p>

<pre><code>myfunc(item)
myfunc(*items)
</code></pre>
"
331906,"<p>The third option looks the most natural to me, although your use of spaces in side parentheses and superfluous parentheses contradict the <a href=""http://www.python.org/dev/peps/pep-0008/"" rel=""nofollow"">Python style guide</a>.</p>

<p>That guide also answers the to_copy question, but I would probably use clearer names altogether.</p>

<p>I would write it as:</p>

<pre><code>import filecmp
import shutil

local = ""local.txt""
remote = ""remote.txt""

destination = r""C:\some\path\file.txt""
source = remote if filecmp.cmp(local, destination) else local

shutil.copyfile(source, destination)
</code></pre>
"
205674,"<p><a href=""http://www.jquery.com/"" rel=""nofollow"">jQuery</a>? Though its <a href=""http://ui.jquery.com/"" rel=""nofollow"">UI</a> components are perhaps not up to the very best (but lots of work appears to be done in that area), jQuery itself seems to be on track to become the de facto JS standard library. It is both MIT or GPL licensed so commercial use is ok (and costless).</p>
"
35110,"<p>I hear you, I've followed the Pylons mailing list for a while looking for something similar. There have been some attempts in the past (see <a href=""http://adminpylon.devjavu.com/"" rel=""nofollow"">AdminPylon</a> and <a href=""http://code.google.com/p/restin/"" rel=""nofollow"">Restin</a>) but none have really kept up with SQLAlchemy's rapidly developing orm api.</p>

<p>Since DBSprockets is likely to be incorporated into TurboGears it will likely be maintained. I'd bite the bullet and go with that.</p>
"
42516,"<p>Pretty hackish solution - if your check fails, use this function (which probably could be significantly improved) to determine the best interpreter available, determine if it is acceptable, and if so relaunch your script with os.system or something similar and your sys.argv using the new interpreter.</p>

<pre><code>import os
import glob
def best_python():
    plist = []
    for i in os.getenv(""PATH"").split("":""):
        for j in glob.glob(os.path.join(i, ""python2.[0-9]"")):
             plist.append(os.path.join(i, j))
    plist.sort()
    plist.reverse()
    if len(plist) == 0: return None
    return plist[0]
</code></pre>
"
216453,"<p>As best practices go, you're really better off with one of the options in <a href=""http://stackoverflow.com/questions/211695/what-is-an-easy-way-to-create-a-trivial-one-off-python-object#212299"">David Eyk's answer</a>. </p>

<p>However, to answer your question, you can create a one-off class using the <code>type</code> function:</p>

<pre><code>options = type('Options', (object,), { 'VERBOSE': True })()
options.IGNORE_WARNINGS = False
</code></pre>

<p>Note that you can provide an initial dictionary, or just leave it empty   .</p>

<pre><code>Options = type('Options', (object,), {})
options = Options()
options.VERBOSE = True
options.IGNORE_WARNINGS = False
</code></pre>

<p>Not very pythonic.</p>
"
216719,"<p>This may not apply to your use case at all. But I've successfully used this pattern in several cases: (sketchy and likely buggy, but you get the point).</p>

<pre><code>STOP = object()

def consumer(q):
    while True:
        x = q.get()
        if x is STOP:
            return
        consume(x)

def main()
    q = Queue()
    c=threading.Thread(target=consumer,args=[q])

    try:
        run_producer(q)
    except KeybordInterrupt:
        q.enqueue(STOP)
    c.join()
</code></pre>
"
153032,"<p>I think the cool thing about using a dynamic language like python is you really shouldn't have to check something like that.</p>

<p>I would just call the required methods on your object and catch an <code>AttributeError</code>. Later on this will allow you to call your methods with other (seemingly unrelated) objects to accomplish different tasks, such as mocking an object for testing.</p>

<p>I've used this alot when getting data off the web with <code>urllib2.urlopen()</code> which returns a <em>file like</em> object. This can in turn can be passed to almost any method that reads from a file, because is implements the same <code>read()</code> method as a real file.</p>

<p>But I'm sure there is a time and place for using <code>isinstance()</code>, otherwise it probably wouldn't be there :)</p>
"
327063,"<p>using Claudiu's code, on my machine even with ""from math import sqrt"" x**.5 is faster but using psyco.full() sqrt(x) becomes much faster, at least by 200%</p>
"
327072,"<p>Here's an example code (Python 2.6, Linux):</p>

<pre><code>#!/usr/bin/env python
from itertools import cycle
import curses, contextlib, time

@contextlib.contextmanager
def curses_screen():
    """"""Contextmanager's version of curses.wrapper().""""""
    try:
        stdscr=curses.initscr()
        curses.noecho()
        curses.cbreak()
        stdscr.keypad(1)
        try: curses.start_color()
        except: pass

        yield stdscr
    finally:
        stdscr.keypad(0)
        curses.echo()
        curses.nocbreak()
        curses.endwin()

if __name__==""__main__"":
    with curses_screen() as stdscr:
        c = curses.A_BOLD
        if curses.has_colors():
            curses.init_pair(1, curses.COLOR_GREEN, curses.COLOR_BLACK)
            c |= curses.color_pair(1)

        curses.curs_set(0) # make cursor invisible

        y, x = stdscr.getmaxyx()
        for col in cycle((c, curses.A_BOLD)):
            stdscr.erase()
            stdscr.addstr(y//2, x//2, 'abc', col)
            stdscr.refresh()
            time.sleep(1)
</code></pre>

<p>All seems to be working.</p>
"
327464,"<p>In this case, <a href=""http://www.zope.org/Products/StandaloneZODB"" rel=""nofollow"">ZODB</a>Â¹ BTrees might be helpful, since they are much less memory-hungry. Use a BTrees.OOBtree (Object keys to Object values) or BTrees.OIBTree (Object keys to Integer values), and use 3-word tuples as your key.</p>

<p>Something like:</p>

<pre><code>from BTrees.OOBTree import OOBTree as BTree
</code></pre>

<p>The interface is, more or less, dict-like, with the added bonus (for you) that <code>.keys</code>, <code>.items</code>, <code>.iterkeys</code> and <code>.iteritems</code> have two <code>min, max</code> optional arguments:</p>

<pre><code>&gt;&gt;&gt; t=BTree()
&gt;&gt;&gt; t['a', 'b', 'c']= 10
&gt;&gt;&gt; t['a', 'b', 'z']= 11
&gt;&gt;&gt; t['a', 'a', 'z']= 12
&gt;&gt;&gt; t['a', 'd', 'z']= 13
&gt;&gt;&gt; print list(t.keys(('a', 'b'), ('a', 'c')))
[('a', 'b', 'c'), ('a', 'b', 'z')]
</code></pre>

<p>Â¹ Note that if you are on Windows and work with Python >2.4, I know there are packages for more recent python versions, but I can't recollect where.</p>

<p>PS They exist in the <a href=""http://pypi.python.org/pypi/ZODB3"" rel=""nofollow"">CheeseShop</a> âº</p>
"
156736,"<p>I'd be very surprised if the <code>get_nowait()</code> call caused the pause by not returning if the list was empty.</p>

<p>Could it be that you're posting a large number of (maybe big?) items between checks which means the receiving thread has a large amount of data to pull out of the <code>Queue</code>? You could try limiting the number you retrieve in one batch:</p>

<pre><code>def queue_get_all(q):
    items = []
    maxItemsToRetreive = 10
    for numOfItemsRetrieved in range(0, maxItemsToRetreive):
        try:
            if numOfItemsRetrieved == maxItemsToRetreive:
                break
            items.append(q.get_nowait())
        except Empty, e:
            break
    return items
</code></pre>

<p>This would limit the receiving thread to pulling up to 10 items at a time.</p>
"
215529,"<p><a href=""http://chandlerproject.org/bin/view/Projects/MeTooCrypto"" rel=""nofollow"">M2Cypto</a> has a FTPS module.  From the <a href=""http://eikkitoivonen.net/m2crypto/api/M2Crypto.ftpslib-module.html"" rel=""nofollow"">documentation</a>:</p>

<pre><code>&gt;&gt;&gt; from M2Crypto import ftpslib
&gt;&gt;&gt; f = ftpslib.FTP_TLS()
&gt;&gt;&gt; f.connect('', 9021)
'220 spinnaker.dyndns.org M2Crypto (Medusa) FTP/TLS server v0.07 ready.'
&gt;&gt;&gt; f.auth_tls()
&gt;&gt;&gt; f.set_pasv(0)
&gt;&gt;&gt; f.login('ftp', 'ngps@')
'230 Ok.'
&gt;&gt;&gt; f.retrlines('LIST')
-rw-rw-r--   1 0        198          2326 Jul  3  1996 apache_pb.gif
drwxrwxr-x   7 0        198          1536 Oct 10  2000 manual
drwxrwxr-x   2 0        198           512 Oct 31  2000 modpy
drwxrwxr-x   2 0        198           512 Oct 31  2000 bobo
drwxr-xr-x   2 0        198         14336 May 28 15:54 postgresql
drwxr-xr-x   4 100      198           512 May 16 17:19 home
drwxr-xr-x   7 100      100          3584 Sep 23  2000 openacs
drwxr-xr-x  10 0        0             512 Aug  5  2000 python1.5
-rw-r--r--   1 100      198           326 Jul 29 03:29 index.html
drwxr-xr-x  12 0        0             512 May 31 17:08 python2.1
'226 Transfer complete'
&gt;&gt;&gt; f.quit()
'221 Goodbye.'
&gt;&gt;&gt;
</code></pre>

<p>Alternatively, if you wanted to minimise use of third-party modules, you should be able to subclass the standard library's <a href=""http://docs.python.org/library/ftplib.html#module-ftplib"" rel=""nofollow"">ftplib</a>.FTP class with the built-in (to Python) SSL support.  M2Crypto (or <a href=""http://twistedmatrix.com/trac/"" rel=""nofollow"">Twisted</a>, if you want to go that way) is the easier solution, though.</p>
"
327317,"<p>It is a hash table.  You can read about it some in the <a href=""http://wiki.python.org/moin/DictionaryKeys"" rel=""nofollow"">python wiki</a>.  Otherwise, the code is well-written and should be easy to understand.</p>
"
39295,"<p>That's probably the way to do it, without resorting to something more advanced like using setuptools to install the files where they belong.</p>

<p>Notice there's a problem with that approach, because on OSes with real a security framework (UNIXes, etc.) the user running your script might not have the rights to access the DB in the system directory where it gets installed.</p>
"
39982,"<p>Well, I don't think that there is something like that in js. You can always use eval instead of locals(). Like this: </p>

<pre><code>eval(s+""()"");
</code></pre>

<p>You just have to know that actually function <em>foo</em> exists.</p>

<p><strong>Edit:</strong></p>

<p>Don't use eval:) Use:</p>

<pre><code>var functionName=""myFunctionName"";
window[functionName]();
</code></pre>
"
218974,"<p>I don't know of a generic SQLAlchemy answer.  Most databases support some form of date formatting, typically via functions.  SQLAlchemy supports calling functions via sqlalchemy.sql.func.  So for example, using SQLAlchemy over a Postgres back end, and a table  my_table(foo varchar(30), when timestamp)  I might do something like</p>

<pre><code>my_table = metadata.tables['my_table']
foo = my_table.c['foo']
the_date = func.date_trunc('month', my_table.c['when'])
stmt = select(foo, the_date).group_by(the_date)
engine.execute(stmt)
</code></pre>

<p>To group by date truncated to month.  But keep in mind that in that example, date_trunc() is a Postgres datetime function.  Other databases will be different.  You didn't mention the underlyig database.  If there's a database independent way to do it I've never found one.  In my case I run production and test aginst Postgres and unit tests aginst SQLite and have resorted to using SQLite user defined functions in my unit tests to emulate Postgress datetime functions.   </p>
"
219236,"<p>SOAP with Python is pretty easy. <a href=""http://www.diveintopython.net/soap_web_services/index.html"" rel=""nofollow"">Here's a tutorial</a> from Dive Into Python.</p>
"
150318,"<p><code>__reduce_ex__</code> is what <code>__reduce__</code> should have been but never became.  <code>__reduce_ex__</code> works like <code>__reduce__</code> but the pickle protocol is passed.</p>
"
150586,"<p>Why write your own?  (Assuming you haven't checked out these other options.)  There's a couple options out there for reading in ID3 tag info from MP3s in Python.  Check out my <a href=""http://stackoverflow.com/questions/8948/accessing-mp3-meta-data-with-python#102285"">answer</a> over at <a href=""http://stackoverflow.com/questions/8948/accessing-mp3-meta-data-with-python"">this</a> question.</p>
"
150732,"<p><a href=""http://wiki.python.org/moin/PyQt"" rel=""nofollow"">PyQt</a> with <a href=""http://doc.trolltech.com/4.4/stylesheet.html"" rel=""nofollow"">Qt style sheets</a> might be a good fit. Naturally, you'd need to re-write quite a bit of your GUI layer for the toolkit change.</p>
"
151006,"<p><a href=""http://cens.ioc.ee/projects/f2py2e/usersguide/index.html#the-quick-and-smart-way"" rel=""nofollow"">f2py</a> (part of <code>numpy</code>) is a simpler alternative to SWIG and boost.python for wrapping C/Fortran number-crunching code.</p>
"
219824,"<p>For the heck of it I also implemented an asynchronous version:</p>

<pre><code>import socket, Queue, select

class Request(object):
    def __init__(self, conn):
        self.conn = conn
        self.fileno = conn.fileno
        self.perform = self._perform().next

    def _perform(self):
        data = self.conn.recv(4048)
        while '\r\n\r\n' not in data:
            msg = self.conn.recv(4048)
            if msg:
                data += msg
                yield
            else:
                break
        reading.remove(self)
        writing.append(self)

        data = 'HTTP/1.1 200 OK\r\n\r\nHello World'
        while data:
            sent = self.conn.send(data)
            data = data[sent:]
            yield
        writing.remove(self)
        self.conn.close()

class Acceptor:
    def __init__(self):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        sock.bind(('', 1234))
        sock.listen(10)
        self.sock = sock
        self.fileno = sock.fileno

    def perform(self):
        conn, addr = self.sock.accept()
        reading.append(Request(conn))

if __name__ == '__main__':
    reading = [Acceptor()]
    writing = list()

    while 1:
        readable, writable, error = select.select(reading, writing, [])
        for action in readable + writable:
            try: action.perform()
            except StopIteration: pass
</code></pre>

<p>which performs:</p>

<pre><code>ab -n 10000 -c 10 http://127.0.0.1:1234/ --&gt; 16822.13 [#/sec]
ab -n 10000 -c 11 http://127.0.0.1:1234/ --&gt; 15704.41 [#/sec]
</code></pre>
"
326614,"<p>Your question shows a sequence of integers, but says ""array of bytes"" and also says ""when written to file, will give 0x269d as the binary (raw) contents"".   These are three very different things.  I think you've over-specified.  From your various comments it looks like you only want the file output, and the other descriptions were not what you wanted.</p>

<p>If you want a sequence of integers, look at Greg Hewgill's answer.</p>

<p>If you want a sequence of bytes (as in a string) -- which can be written to a file -- look at Martin v. LÃ¶wis answer.</p>

<p>If you wanted an array of bytes, you have to do this.</p>

<pre><code>import array
intList= [int(s[x:x+8], 2) for x in range(0, len(s), 8)]
byteArray= array.array('B', intList)
</code></pre>
"
204981,"<pre><code>import re

r = re.compile(""[ab]"")
text = ""abcdedfe falijbijie bbbb laifsjelifjl""

matches = []
replaced = []
pos = 0
for m in r.finditer(text):
    matches.append(m.group(0))
    replaced.append(text[pos:m.start()])
    pos = m.end()
replaced.append(text[pos:])

print matches
print ''.join(replaced)
</code></pre>

<p>Outputs:</p>

<pre><code>['a', 'b', 'a', 'b', 'b', 'b', 'b', 'b', 'a']
cdedfe flijijie  lifsjelifjl
</code></pre>
"
205072,"<p>What about this:</p>

<pre><code>import re

text = ""abcdedfe falijbijie bbbb laifsjelifjl""
matches = []

ab_re = re.compile( ""[ab]"" )

def verboseTest( m ):
    matches.append( m.group(0) )
    return ''

textWithoutMatches = ab_re.sub( verboseTest, text )

print matches
# ['a', 'b', 'a', 'b', 'b', 'b', 'b', 'b', 'a']
print textWithoutMatches
# cdedfe flijijie  lifsjelifjl
</code></pre>

<p>The 'repl' argument of the <strong>re.sub</strong> function can be a function so you can report or save the matches from there and whatever the function returns is what 'sub' will substitute.</p>

<p>The function could easily be modified to do a lot more too! Check out <a href=""http://docs.python.org/library/re.html#module-contents"" rel=""nofollow"">the re module documentation</a> on docs.python.org for more information on what else is possible.</p>
"
34266,"<p>I've not heard of a direct equivalent either. You could probably achieve the same effect with macros, especially in a language like Lisp which has extremely powerful macros.</p>

<p>I wouldn't be at all surprised if other languages start to incorporate something similar because it is so powerful.</p>
"
331489,"<p>You could try <code>freeze.py</code>, see <a href=""http://wiki.python.org/moin/Freeze"" rel=""nofollow"">http://wiki.python.org/moin/Freeze</a> for more details.</p>
"
331775,"<p>The most common naming I've seen is underscode separated words, to_copy.</p>

<p>As for the format style, I've seen no such agreement. I find </p>

<pre><code>source = remote if filecmp.cmp(local, config_file) else local

shutil.copyfile(source, config_file)
</code></pre>

<p>to be the clearest among your options.</p>

<p>And seeing that everyone prefers to split the if I'd, at the very least, encapsulate the copyfile call in case you someday wish to change it:</p>

<pre><code>def copy_to(source, destination):
    shutil.copyfile(source,destination)

if filecmp.cmp(local, config_file):
    copy_to(remote, config_file)
else:
    copy_to(local, config_file)
</code></pre>
"
327005,"<p>Most likely math.sqrt(x), because it's optimized for square rooting.</p>

<p>Benchmarks will provide you the answer you are looking for.</p>
"
152035,"<p>You should also check out <a href=""http://pypi.python.org/pypi/bitarray/0.2.3"" rel=""nofollow"">BitArray</a>, which is a nice interface for dealing with sequences of bits.</p>
"
218489,"<p>It's probably best to start off with the given <code>unittest</code> example. Some standard best practices: </p>

<ul>
<li>put all your tests in a <code>tests</code> folder at the root of your project.</li>
<li>write one test module for each python module you're testing.</li>
<li>test modules should start with the word <code>test</code>.</li>
<li>test methods should start with the word <code>test</code>. </li>
</ul>

<p>When you've become comfortable with <code>unittest</code> (and it shouldn't take long), there are some nice extensions to it that will make life easier as your tests grow in number and scope:</p>

<ul>
<li><a href=""http://somethingaboutorange.com/mrl/projects/nose/"" rel=""nofollow"">nose</a> -- easily find and run all your tests, and more.</li>
<li><a href=""http://testoob.sourceforge.net/"" rel=""nofollow"">testoob</a> -- colorized output (and more, but that's why I use it).</li>
<li><a href=""http://pythoscope.org/"" rel=""nofollow"">pythoscope</a> -- haven't tried it, but this will automatically generate (failing) test stubs for your application. Should save a lot of time writing boilerplate code.</li>
</ul>
"
324468,"<p>PyDev seems to allow code coverage from within Eclipse. </p>

<p>I've yet to find how to integrate that with my own (rather complex) build process, so I use Ned Batchelder's coverage.py at the command line.</p>
"
332575,"<p>Subclassing <code>object</code> yields a new-style class. Two well known advantages of new-style classes are:</p>

<ul>
<li>Metaclasses (like class factories, but works transparently)</li>
<li>Properties (getters &amp; setters...)</li>
</ul>
"
204024,"<p>I suspect it's the same problem as when you use shortcuts in Windows... Try this:</p>

<pre><code>import os;
os.system(""\""C:\\Temp\\a b c\\Notepad.exe\"" C:\\test.txt"");
</code></pre>
"
47032,"<p>Can I suggest that neither of the answers from Chris AtLee and zacherates fulfill the requirements?
I think this modification to zacerates answer is better:</p>

<pre><code>def find_subclasses(module, clazz):
    for name in dir(module):
    	o = getattr(module, name)
    	try:
    		if (o != clazz) and issubclass(o, clazz):
    			yield name, o
    	except TypeError: pass
</code></pre>

<p>The reason I disagree with the given answers is that the first does not produce classes that are a distant subclass of the given class, and the second includes the given class.</p>
"
47201,"<p>I've not seen a system with less than 2.3 installed for some time.  Mostly 2.4+ is installed by default for most OS I use now.  2.3 is just on an older Solaris machine.  Linux distros tend to have 2.4+, as does OS X.</p>

<p>IIRC, 2.4 has a lot of the features 2.5 does, but usable only with</p>

<pre><code>from __future__ import *
</code></pre>
"
149327,"<p>Twisted on Windows will perform an active wait under the covers. If you don't want to use threads, you will have to use the win32 API to avoid polling. Something like this:</p>

<pre><code>import win32process
import win32event

# Note: CreateProcess() args are somewhat cryptic, look them up on MSDN
proc1, thread1, pid1, tid1 = win32process.CreateProcess(...)
proc2, thread2, pid2, tid2 = win32process.CreateProcess(...)
thread1.close()
thread2.close()

processes = {proc1: ""proc1"", proc2: ""proc2""}

while processes:
    handles = processes.keys()
    # Note: WaitForMultipleObjects() supports at most 64 processes at a time
    index = win32event.WaitForMultipleObjects(handles, False, win32event.INFINITE)
    finished = handles[index]
    exitcode = win32process.GetExitCodeProcess(finished)
    procname = processes.pop(finished)
    finished.close()
    print ""Subprocess %s finished with exit code %d"" % (procname, exitcode)
</code></pre>
"
222307,"<p>First of all, it sounds like you may be reinventing the wheel a little bit... most Python web frameworks (CherryPy/TurboGears is what I know) already include a way to dispatch requests to specific classes based on the contents of the URL, or the user input.</p>

<p>There is nothing <strong>wrong</strong> with the way that you do it, really, but in my experience it tends to indicate some kind of ""missing abstraction"" in your program.  You're basically relying on the Python interpreter to store a list of the objects you might need, rather than storing it yourself.</p>

<p>So, as a first step, you might want to just make a dictionary of all the classes that you might want to call:</p>

<pre><code>dispatch = {'Foo': Foo, 'Bar': Bar, 'Bizbaz': Bizbaz}
</code></pre>

<p>Initially, this won't make much of a difference.  But as your web app grows, you may find several advantages: (a) you won't run into namespace clashes, (b) using <code>globals()</code> you may have security issues where an attacker can, in essence, access any global symbol in your program if they can find a way to inject an arbitrary <code>classname</code> into your program, (c) if you ever want to have <code>classname</code> be something other than the actual exact classname, using your own dictionary will be more flexible, (d) you can replace the <code>dispatch</code> dictionary with a more-flexible user-defined class that does database access or something like that if you find the need.</p>

<p>The security issues are particularly salient for a web app.  Doing <code>globals()[variable]</code> where <code>variable</code> is input from a web form is just <strong>asking for trouble</strong>.</p>
"
222586,"<p>This is an extension in the regular expression syntax in the re module of Python. The ""i"" means ""ignore case"". This means a case insensitive search for ""password"" is done.</p>

<p>from <a href=""https://docs.python.org/library/re.html#regular-expression-syntax"" rel=""nofollow"">https://docs.python.org/library/re.html#regular-expression-syntax</a></p>

<blockquote>
  <p>(?iLmsux)
  (One or more letters from the set ""i"", ""L"", ""m"", ""s"", ""u"", ""x"".) The
  group matches the empty string; the
  letters set the corresponding flags
  (re.I, re.L, re.M, re.S, re.U, re.X)
  for the entire regular expression.
  This is useful if you wish to include
  the flags as part of the regular
  expression, instead of passing a flag
  argument to the compile() function.</p>
  
  <p>Note that the (?x) flag changes how the expression is parsed. It
  should be used first in the expression
  string, or after one or more
  whitespace characters. If there are
  non-whitespace characters before the
  flag, the results are undefined.</p>
</blockquote>
"
223137,"<p>I imagine you're storing (in-memory) some piece of data which has a reference to the socket; if you store the request objects anywhere, for instance, that would likely do it.</p>

<p>The last-ditch chance for sockets to be closed is when they're garbage-collected; if you're doing anything that would prevent garbage collection from reaching them, there's your problem. I suggest that you try to reproduce with a Hello World program written in CherryPy; if you can't reproduce there, you know it's in your code -- look for places where you're persisting information which could (directly or otherwise) reference the socket.</p>
"
223904,"<p>Using multiline, commented regexs can mitigate the maintainance problem somewhat. Try and avoid the one line super regex!</p>

<p>Also, consider breaking the regex down into individual tasks, one for each 'thing' you want to get. eg.</p>

<pre><code>visitor = text.find(/Visitor:(.*)/)
operator = text.find(/Operator:(.*)/)
body = text.find(/whatever....)
</code></pre>

<p>instead of </p>

<pre><code>text.match(/Visitor:(.*)\nOperator:(.*)...whatever to giant regex/m) do
  visitor = $1
  operator = $2
  etc.
end
</code></pre>

<p>Then it makes it easy to change how any particular item is parsed. As far as parsing through a file with many ""chat blocks"", just have a single simple regex that matches a single chat block, iterate over the text and pass the match data from this to your group of other matchers.</p>

<p>This will obviously affect performance, but unless you processing <em>enormous</em> files i wouldnt worry.</p>
"
43785,"<p>Well, 0 % 5 should be 0, right?</p>

<p>-1 % 5 should be 4 because that's the next allowed digit going in the reverse direction (i.e., it can't be 5, since that's out of range).</p>

<p>And following along by that logic, -2 must be 3.</p>

<p>The easiest way to think of how it will work is that you keep adding or subtracting 5 until the number falls between 0 (inclusive) and 5 (exclusive).</p>

<p>I'm not sure about machine dependence - I've never seen an implementation that was, but I can't say it's never done.</p>
"
43863,"<p>As explained in other answers, there are many choices for a modulo operation with negative values. In general different languages (and different machine architectures) will give a different result.</p>

<p>According to the <a href=""http://docs.python.org/ref/binary.html"" rel=""nofollow"">Python reference manual</a>,</p>

<blockquote>
  <p>The modulo operator always yields a result with the same sign as its second operand (or zero); the absolute value of the result is strictly smaller than the absolute value of the second operand.</p>
</blockquote>

<p>is the choice taken by Python. Basically modulo is defined so that this always holds:</p>

<pre><code>x == (x/y)*y + (x%y)
</code></pre>

<p>so it makes sense that (-2)%5 = -2 - (-2/5)*5 = 3</p>
"
42689,"<p>This document seems to go into quite a bit of detail (and I think a complete description is out of scope for a stackoverflow answer):</p>

<ul>
<li><a href=""http://codespeak.net/pypy/dist/pypy/doc/translation.html"" rel=""nofollow"">http://codespeak.net/pypy/dist/pypy/doc/translation.html</a></li>
</ul>

<p>The general idea of translating from one language to another isn't particularly revolutionary, but it has only recently been gaining popularity / applicability in ""real-world"" applications.  <a href=""http://code.google.com/webtoolkit/"" rel=""nofollow"">GWT</a> does this with Java (generating Javascript) and there is a library for translating Haskell into various other languages as well (called <a href=""http://www.haskell.org/haskellwiki/Yhc"" rel=""nofollow"">YHC</a>)</p>
"
221113,"<p>Use <a href=""http://docs.python.org/library/subprocess"" rel=""nofollow"">subprocess</a>, it superseeds os.popen, though it is not much more of an abstraction:</p>

<pre><code>from subprocess import Popen, PIPE
output = Popen([""mycmd"", ""myarg""], stdout=PIPE).communicate()[0]

#this is how I'd mangle the arguments together
output = Popen([
    self._ghostscriptPath, 
   'gswin32c',
   '-q',
   '-dNOPAUSE',
   '-dBATCH',
   '-sDEVICE=tiffg4',
   '-r196X204',
   '-sPAPERSIZE=a4',
   '-sOutputFile=""%s %s""' % (tifDest, pdfSource),
], stdout=PIPE).communicate()[0]
</code></pre>

<p>If you have only python 2.3 which has no subprocess module, you can still use os.popen</p>

<pre><code>os.popen(' '.join([
    self._ghostscriptPath, 
   'gswin32c',
   '-q',
   '-dNOPAUSE',
   '-dBATCH',
   '-sDEVICE=tiffg4',
   '-r196X204',
   '-sPAPERSIZE=a4',
   '-sOutputFile=""%s %s""' % (tifDest, pdfSource),
]))
</code></pre>
"
221851,"<p>If you don't have the memory to do <code>open(""big.file"").read()</code>, then numpy wont really help.. It uses the same memory as python variables do (if you have 1GB of RAM, you can only load 1GB of data into numpy)</p>

<p>The solution is simple - read the file in chunks.. <code>f = open(""big.file"", ""rb"")</code>, then do a series of <code>f.read(500)</code>, remove the sequence and write it back out to another file object. Pretty much how you do file reading/writing in C..</p>

<p>The problem then is if you miss the pattern you are replacing.. For example:</p>

<pre><code>target_seq = ""567""
input_file = ""1234567890""

target_seq.read(5) # reads 12345, doesn't contain 567
target_seq.read(5) # reads 67890, doesn't contain 567
</code></pre>

<p>The obvious solution is to start at the first character in the file, check <code>len(target_seq)</code> characters, then go forward one character, check forward again.</p>

<p>For example (pseudo code!):</p>

<pre><code>while cur_data != """":
    seek_start = 0
    chunk_size = len(target_seq)

    input_file.seek(offset = seek_start, whence = 1) #whence=1 means seek from start of file (0 + offset)
    cur_data = input_file.read(chunk_size) # reads 123
    if target_seq == cur_data:
        # Found it!
        out_file.write(""replacement_string"")
    else:
        # not it, shove it in the new file
        out_file.write(cur_data)
    seek_start += 1
</code></pre>

<p>It's not exactly the most efficient way, but it will work, and not require keeping a copy of the file in memory (or two).</p>
"
218943,"<p>This is pretty much Python-independent!  It's a classic example of Unix interprocess communication.  One good option is to use <code>popen()</code> to open a pipe between the parent and child processes, and pass data/messages back and forth along the pipe.</p>

<p>Take a look at the <a href=""http://www.python.org/doc/2.5.2/lib/module-subprocess.html"" rel=""nofollow""><code>subprocess</code> module</a>, which can set up the necessary pipes automatically while spawning child processes.</p>
"
168658,"<pre><code>sorted(filter(os.path.isfile, os.listdir('.')), 
    key=lambda p: os.stat(p).st_mtime)
</code></pre>

<p>You could use <code>os.walk('.').next()[-1]</code> instead of filtering with <code>os.path.isfile</code>, but that leaves dead symlinks in the list, and <code>os.stat</code> will fail on them.</p>
"
323894,"<p>The getopt function is very common for C programming. It can parse parameters for you. Here is a question (and answer) where to get it for C#: <a href=""http://stackoverflow.com/questions/172443/getopt-library-for-c"">http://stackoverflow.com/questions/172443/getopt-library-for-c</a> .</p>

<p>Especially <a href=""http://stackoverflow.com/questions/172443/getopt-library-for-c#172533"">lappies</a> implementation looks like rather modern C# with attributes and such.</p>
"
50507,"<p>I think you can avoid a commit hook script in this case by using the <code>svn:eol-style</code> property as described in the SVNBook:</p>

<ul>
<li><p><a href=""http://svnbook.red-bean.com/en/1.7/svn.advanced.props.file-portability.html#svn.advanced.props.special.eol-style"" rel=""nofollow"">End-of-Line Character Sequences</a></p></li>
<li><p><a href=""http://svnbook.red-bean.com/en/1.7/svn.ref.properties.html"" rel=""nofollow"">Subversion Properties</a></p></li>
</ul>

<p>This way SVN can worry about your line endings for you.</p>

<p>Good luck!</p>
"
142821,"<p>NumPy has a <a href=""http://numpy.scipy.org/array_interface.shtml"" rel=""nofollow"">array interface</a> module that you can use to make a bitfield.</p>
"
228785,"<p>Try this function:</p>

<pre><code>'%#4x' % (-1 &amp; 0xffffffff)
</code></pre>
"
49837,"<p>One key difference in Python is <a href=""http://weblog.hotales.org/cgi-bin/weblog/nb.cgi/view/python/2005/02/19/1"" rel=""nofollow"">significant whitespace</a>.  This puts a lot of people off - me too for a long time - but once you get going it seems natural and makes much more sense  than <code>;</code>s everywhere.</p>

<p>From a personal perspective, Python has the following benefits over Java:</p>

<ul>
<li>No <a href=""http://en.wikipedia.org/wiki/Exception_handling#Checked_exceptions"" rel=""nofollow"">Checked Exceptions</a></li>
<li>Optional Arguments</li>
<li>Much less boilerplate and less verbose generally</li>
</ul>

<p>Other than those, <a href=""http://wiki.python.org/moin/LanguageComparisons"" rel=""nofollow"">this page on the Python Wiki</a> is a good place to look with lots of links to interesting articles.</p>
"
143643,"<p>I use the binary bit-wise operators !, &amp;, |, ^, >>, and &lt;&lt;.  They work really well and are implemented directly in the underlying C, which is usually directly on the underlying hardware.</p>
"
323810,"<p>Never think that 'a = b' in Python means 'copy b to a'. If there are variables on both sides, you can't really know that. Instead, think of it as 'give b the additional name a'.</p>

<p>If b is an immutable object (like a number, tuple or a string), then yes, the effect is that you get a copy. But that's because when you deal with immutables (which maybe should have been called <em>read only</em>, <em>unchangeable</em> or <em>WORM</em>) you <em>always</em> get a copy, by definition. </p>

<p>If b is a mutable, you <em>always have to do something extra to be sure you have a true copy</em>. <em>Always</em>. With lists, it's as simple as a slice:Â a = b[:]. </p>

<p>Mutability is also the reason that this:</p>

<pre><code>def myfunction(mylist=[]): 
    pass
</code></pre>

<p>... doesn't quite do what you think it does.</p>

<p>If you're from a C-background: what's left of the '=' is a pointer, always. All variables are pointers, always. If you put variables in a list:Â a = [b, c], you've put pointers to the values pointed to by b and c in a list pointed to by a. If you then set a[0] = d, the pointer in position 0 is now pointing to whatever d points to.  </p>

<p>See also the copy-module:Â <a href=""http://docs.python.org/library/copy.html"" rel=""nofollow"">http://docs.python.org/library/copy.html</a></p>
"
324680,"<p>If your application is performance-sensitive and likely to encounter large files (like you said, > 1GB) then I'd <strong>strongly</strong> advise against using the code you're showing in your question for the simple reason that <em>it loads the entire document into RAM</em>.  I would encourage you to rethink your design (if at all possible) to avoid holding the whole document tree in RAM at once.  Not knowing what your application's requirements are, I can't properly suggest any specific approach, other than the generic piece of advice to try to use an ""event-based"" design.</p>
"
324989,"<p>Try:</p>

<pre><code>enc = msg['Content-Transfer-Encoding']
</code></pre>

<p>It's a header so you won't be able to get it looking at the body.  You should be able to get at the same place you find out the Subject.</p>
"
227746,"<p>I would go for elegance a different way:  implement your file-reading and filtering operations as generators,  You'll write more lines of code, but it will be more flexible, maintainable, and performant code.</p>

<p>See David M. Beazley's <a href=""http://www.dabeaz.com/generators/"" rel=""nofollow"">Generator Tricks for Systems Programmers</a>, which is a really important thing for anyone who's writing this kind of code to read.</p>
"
48806,"<p><code>core.exceptions</code> is part of django; what version of django do you have installed? The AppEngine comes with the appropriate version for whatever release you've downloaded (in the lib/django directory). It can be installed by going to that directory and running <strong><code>python setup.py install</code></strong></p>
"
224951,"<p><a href=""http://www.htmltopdf.org/"" rel=""nofollow"">pisa/xhtml2pdf</a> should get you covered for PDF.  It even includes an example Django project.</p>
"
225755,"<p>Try: <a href=""http://www.mattweber.org/2007/03/04/python-script-renamepy/"" rel=""nofollow"">http://www.mattweber.org/2007/03/04/python-script-renamepy/</a></p>

<blockquote>
  <p>I like to have my music, movie, and
  picture files named a certain way.
  When I download files from the
  internet, they usually donât follow my
  naming convention. I found myself
  manually renaming each file to fit my
  style. This got old realy fast, so I
  decided to write a program to do it
  for me.</p>
  
  <p>This program can convert the filename
  to all lowercase, replace strings in
  the filename with whatever you want,
  and trim any number of characters from
  the front or back of the filename.</p>
</blockquote>

<p>The program's source code is also available.</p>
"
225834,"<p>The events &lt;FocusIn&gt; and &lt;FocusOut&gt; are what you want. Run the following example and you'll see you get focus in and out bindings whether you click or press tab (or shift-tab) when focus is in one of the entry widgets.</p>

<pre><code>from Tkinter import *

def main():
    global text

    root=Tk()

    l1=Label(root,text=""Field 1:"")
    l2=Label(root,text=""Field 2:"")
    t1=Text(root,height=4,width=40)
    e1=Entry(root)
    e2=Entry(root)
    l1.grid(row=0,column=0,sticky=""e"")
    e1.grid(row=0,column=1,sticky=""ew"")
    l2.grid(row=1,column=0,sticky=""e"")
    e2.grid(row=1,column=1,sticky=""ew"")
    t1.grid(row=2,column=0,columnspan=2,sticky=""nw"")

    root.grid_columnconfigure(1,weight=1)
    root.grid_rowconfigure(2,weight=1)

    root.bind_class(""Entry"",""&lt;FocusOut&gt;"",focusOutHandler)
    root.bind_class(""Entry"",""&lt;FocusIn&gt;"",focusInHandler)

    text = t1
    root.mainloop()

def focusInHandler(event):
    text.insert(""end"",""FocusIn %s\n"" % event.widget)
    text.see(""end"")

def focusOutHandler(event):
    text.insert(""end"",""FocusOut %s\n"" % event.widget)
    text.see(""end"")


if __name__ == ""__main__"":
    main();
</code></pre>
"
226793,"<p>In your admin, go to ""sites"" and set the domain.</p>

<p>Pass <code>context_instance=RequestContext(request)</code> to the templates in question.</p>

<p>Now use <code>{{ SITE_URL }}</code> in any of those templates and you're golden. </p>

<p><a href=""http://www.djangobook.com/en/1.0/chapter10/"" rel=""nofollow"">Chapter 10 of the Django Book</a> has more information than you'll need regading that context processor bit.</p>
"
201496,"<p>A lot of the short sudoku solvers just recursively try every possible legal number left until they have successfully filled the cells.  I haven't taken this apart, but just skimming it, it looks like that's what it does.</p>
"
201881,"<p>You should avoid naming your python files with standard library module names.</p>
"
170409,"<p>The Mac already has the underlying infrastructure to support USB, so you'll need a Python library that can take advantage of it.  For any Python project that needs serial support, whether it's USB, RS-232 or GPIB, I'd recommend the PyVisa library at SourceForge.  See <a href=""http://pyvisa.sourceforge.net/"" rel=""nofollow"">http://pyvisa.sourceforge.net/</a>.</p>

<p>If your device doesn't have a VISA driver, you'll have to deal with the USB system directly.  You can use another library on SourceForge for that: <a href=""http://pyusb.berlios.de/"" rel=""nofollow"">http://pyusb.berlios.de/</a></p>
"
334109,"<p>Short answer: the string module was the only way to perform these operations before python 1.6 - they've since been added to strings as methods.</p>
"
334876,"<p>Do you mnean something like this?  <a href=""http://code.activestate.com/recipes/412982/"" rel=""nofollow"">Use PIL to make a ""contact sheet"" of images</a>?</p>

<p>Perhaps there are others here that are closer to what you want: <a href=""http://code.activestate.com/recipes/tags/graphics/"" rel=""nofollow"">http://code.activestate.com/recipes/tags/graphics/</a></p>
"
141505,"<p>For pre-1.0:</p>

<pre><code>slug = models.SlugField(prepopulate_from=('title',))
</code></pre>

<p>should work just fine</p>

<p>For 1.0, use <a href=""http://stackoverflow.com/questions/141487/is-there-an-easy-way-to-populate-slugfield-from-charfield#141554"">camflan's</a></p>
"
231857,"<pre><code>class X(object):
    def some_function(self):
        do_some_stuff()

class Y(object):
    some_function = None
</code></pre>

<p>This may lead to some nasty and hard to find exceptions being thrown though, so you might try this:</p>

<pre><code>class X(object):
    def some_function(self):
        do_some_stuff()

class Y(object):
    def some_function(self):
        raise NotImplementedError(""function some_function not implemented"")
</code></pre>
"
320099,"<p>I'm not sure if you can reduce the overhead much on a <em>full</em> in-order traversal of a tree, if you use recursion the call stack will grow some, otherwise you must manually use a stack to push references of the children while visiting each node. Which way is fastest and uses less memory, depends on the expensiveness of the call stack vs. a normal stack. (I would guess the callstack is faster since it should be optimized for its use, and recursion is much easier to implement)</p>

<p>If you don't care about the order you visit the nodes, some implementations of trees is actually stored in a dynamic array or linked list or stack wich you can traverse linearly if you don't care about the order it's traversed.</p>

<p>But why is it important to have a fast traversal anyway? Trees are good for searching, arrays/linked lists is good for full traversal. If you often need full in-order traversal but few searches and insertions/deletions, an ordered linked list might be best, if searching is what you do most you use a tree. If the data is really massive, so that memory overhead may render recursion impossible, you should use a database.</p>
"
53533,"<p>I prefer the following:</p>

<pre><code>if a == []:
   print ""The list is empty.""
</code></pre>

<p>Readable and you don't have to worry about calling a function like <code>len()</code> to iterate through the variable. Although I'm not entirely sure what the BigO notation of something like this is... but Python's so blazingly fast I doubt it'd matter unless <code>a</code> was gigantic.</p>
"
55041,"<p>There is no reason why you shouldn't use GAE and Google Web Toolkit (GWT) together. You write your backend code in Python and the frontend code in Java (and possibly some JavaScript), which is then compiled to JavaScript. When using another AJAX framework you will also have this difference between server and client side language.</p>

<p>GWT has features that make remote invocation of java code on the server easier, but these are entirely optional. You can just use JSON or XML interfaces, just like with other AJAX frameworks.</p>

<p>GWT 1.5 also comes with JavaScript Overlay Types, that basically allow you to treat a piece of JSON data like a Java object when developing the client side code. You can read more about this <a href=""http://googlewebtoolkit.blogspot.com/2008/08/getting-to-really-know-gwt-part-2.html"" rel=""nofollow"">here</a>.</p>

<p><strong>Update:</strong></p>

<p>Now that Google has added Java support for Google App Engine, you can develop both backend and frontend code in Java on a full Google stack - if you like. There is a nice <a href=""http://code.google.com/eclipse/"" rel=""nofollow"">Eclipse plugin</a> from Google that makes it very easy to develop and deploy applications that use GAE, GWT or both.</p>
"
321613,"<p>Someone recently asked <a href=""http://stackoverflow.com/questions/301924/python-urlliburllib2httplib-confusion"">the same question you're asking</a>.  If you read through the answers to that question you'll see code examples showing you how to stay logged in while browsing a site in a Python script using only stuff in the standard library.</p>

<p>The accepted answer might not be as useful to you as <a href=""http://stackoverflow.com/questions/301924/python-urlliburllib2httplib-confusion#302184"">this other answer</a>, since the accepted answer deals with a specific problem involving redirection.  However, I recommend reading through all of the answers regardless.</p>
"
141826,"<p>There is no builtin way other than aborting (with os.abort(), causing the coredump if resource limits allow it) -- although you can certainly build your own 'dump' function that dumps relevant information about the data you care about. There are no ready-made tools for it.</p>

<p>As for handling the corefile of a Python process, the <a href=""http://svn.python.org/projects/python/trunk/Misc/gdbinit"" rel=""nofollow"">Python source has a gdbinit file</a> that contains useful macros. It's still a lot more painful than somehow getting into the process itself (with pdb or the interactive interpreter) but it makes life a little easier.</p>
"
230907,"<p>Your original list <code>[foo, bar, baz]</code> doesn't contain the variable <em>names</em>, it just contains elements that refer to the same <em>values</em> as the variables you listed. This is because you can have two different variable names that refer to the same value.</p>

<p>So, the list by itself doesn't contain information about what other names refer to the objects. The first element in your array has the name <code>foo</code> but it also has the name <code>a[0]</code> (assuming your array is called <code>a</code>). After executing the following code, <code>quux</code> also refers to the same object:</p>

<pre><code>quux = a[0]
</code></pre>

<p>Update: You're right that you can use <code>eval()</code> for that, but its use is generally discouraged. Python provides a special member named <a href=""http://www.python.org/doc/1.5.2p2/lib/typesother.html"" rel=""nofollow""><code>__dict__</code></a> that contains the symbol table for the current module. So you can:</p>

<pre><code>import __main__
d = dict((x, __main__.__dict__[x]) for x in list_of_variable_names)
</code></pre>

<p>Having to <code>import __main__</code> when your code is in the unnamed main module is a quirk of Python.</p>
"
142306,"<p>Building a DSL to be interpreted by Python.</p>

<p>Step 1.  Build the run-time classes and objects.  These classes will have all the cursor loops and SQL statements and all of that algorithmic processing tucked away in their methods.  You'll make heavy use of the <a href=""http://exciton.cs.rice.edu/javaresources/DesignPatterns/command.htm"" rel=""nofollow"">Command</a> and <a href=""http://exciton.cs.rice.edu/javaresources/DesignPatterns/StrategyPattern.htm"" rel=""nofollow"">Strategy</a> design patterns to build these classes.  Most things are a command, options and choices are plug-in strategies.  Look at the design for Apache Ant's <a href=""http://ant.apache.org/manual/develop.html"" rel=""nofollow"">Task</a> API -- it's a good example.</p>

<p>Step 2.  Validate that this system of objects actually works.  Be sure that the design is simple and complete.  You're tests will construct the Command and Strategy objects, and then execute the top-level Command object.  The Command objects will do the work. </p>

<p>At this point you're largely done.  Your run-time is just a configuration of objects created from the above domain.  [This isn't as easy as it sounds.  It requires some care to define a set of classes that can be instantiated and then ""talk among themselves"" to do the work of your application.]</p>

<p>Note that what you'll have will require nothing more than declarations.  What's wrong with procedural?  One you start to write a DSL with procedural elements, you find that you need more and more features until you've written Python with different syntax.  Not good.</p>

<p>Further, procedural language interpreters are simply hard to write.  State of execution, and scope of references are simply hard to manage.</p>

<p>You can use native Python -- and stop worrying about ""getting out of the sandbox"".  Indeed, that's how you'll unit test everything, using a short Python script to create your objects.  Python will be the DSL.  </p>

<p>[""But wait"", you say, ""If I simply use Python as the DSL people can execute arbitrary things.""  Depends on what's on the PYTHONPATH, and sys.path.  Look at the <a href=""http://docs.python.org/lib/module-site.html"" rel=""nofollow"">site</a> module for ways to control what's available.]</p>

<p>A declarative DSL is simplest.  It's entirely an exercise in representation.  A block of Python that merely sets the values of some variables is nice.  That's what Django uses.</p>

<p>You can use the <a href=""http://docs.python.org/lib/module-ConfigParser.html"" rel=""nofollow"">ConfigParser</a> as a language for representing your run-time configuration of objects.</p>

<p>You can use <a href=""http://pypi.python.org/pypi/python-json/"" rel=""nofollow"">JSON</a> or <a href=""http://pyyaml.org/"" rel=""nofollow"">YAML</a> as a language for representing your run-time configuration of objects.  Ready-made parsers are totally available.</p>

<p>You can use XML, too.  It's harder to design and parse, but it works fine.  People love it.  That's how Ant and Maven (and lots of other tools) use declarative syntax to describe procedures.  I don't recommend it, because it's a wordy pain in the neck.  I recommend simply using Python.</p>

<p>Or, you can go off the deep-end and invent your own syntax and write your own parser.</p>
"
229430,"<p>Use [r]strip to remove trailing slashes:</p>

<pre><code>url.rstrip('/').rsplit('/', 1)[-1]
</code></pre>

<p>If a wider range of possible URLs is possible, including URLs with ?queries, #anchors or without a path, do it properly with urlparse:</p>

<pre><code>path= urlparse.urlparse(url).path
return path.rstrip('/').rsplit('/', 1)[-1] or '(root path)'
</code></pre>
"
51214,"<p>If you use the <code>curses</code>  package, you have much greater control of the console. It also comes at a higher cost in code complexity and is probably unnecessary unless you are developing a large console-based app.</p>

<p>For a simple solution, you can always put the spinning wheel at the end of the status messge (the sequence of characters <code>|, \, -, /</code> which actually looks nice under blinking cursor.</p>
"
28714,"<p>Short answer: there's no way to do inline variable assignment in a while loop in Python. Meaning that I <strong>cannot</strong> say:</p>

<pre><code>while x=next():
    // do something here!
</code></pre>

<p>Since that's not possible, there are a number of ""idiomatically correct"" ways of doing this:</p>

<pre><code>while 1:
    x = next()
    if x != END:
        // Blah
    else:
        break
</code></pre>

<p>Obviously, this is kind of ugly. You can also use one of the ""iterator"" approaches listed above, but, again, that may not be ideal. Finally, you can use the ""pita pocket"" approach that I actually just found while googling:</p>

<pre><code>class Pita( object ):
    __slots__ = ('pocket',)
    marker = object()
    def __init__(self, v=marker):
        if v is not self.marker:
            self.pocket = v
    def __call__(self, v=marker):
        if v is not self.marker:
            self.pocket = v
        return self.pocket
</code></pre>

<p>Now you can do:</p>

<pre><code>p = Pita()
while p( next() ) != END:
    // do stuff with p.pocket!
</code></pre>

<p>Thanks for this question; learning about the <code>__call__</code> idiom was really cool! :)</p>

<p>EDIT: I'd like to give credit where credit is due. The 'pita pocket' idiom was found <a href=""http://mail.python.org/pipermail/python-list/2003-July/216789.html"" rel=""nofollow"">here</a></p>
"
335887,"<p>This is extremely contrived and not pythonic at all, but here's my attempt at a semi-literal translation using the new ""with"" statement.</p>

<pre><code>with Shoes():
  t = Para(""Not clicked!"")
  with Button(""The Label""):
    Alert(""You clicked the button!"")
    t.replace(""Clicked!"")
</code></pre>

<p>The hardest part is dealing with the fact that python will not give us anonymous functions with more than one statement in them.  To get around that, we could create a list of commands and run through those...</p>

<p>Anyway, here's the backend code I ran this with:</p>

<pre><code>context = None

class Nestable(object):
  def __init__(self,caption=None):
    self.caption = caption
    self.things = []

    global context
    if context:
      context.add(self)

  def __enter__(self):
    global context
    self.parent = context
    context = self

  def __exit__(self, type, value, traceback):
    global context
    context = self.parent

  def add(self,thing):
    self.things.append(thing)
    print ""Adding a %s to %s"" % (thing,self)

  def __str__(self):
    return ""%s(%s)"" % (self.__class__.__name__, self.caption)


class Shoes(Nestable):
  pass

class Button(Nestable):
  pass

class Alert(Nestable):
  pass

class Para(Nestable):
  def replace(self,caption):
    Command(self,""replace"",caption)

class Command(Nestable):
  def __init__(self, target, command, caption):
    self.command = command
    self.target  = target
    Nestable.__init__(self,caption)

  def __str__(self):
    return ""Command(%s text of %s with \""%s\"")"" % (self.command, self.target, self.caption)

  def execute(self):
    self.target.caption = self.caption
</code></pre>
"
335909,"<p>Try using launchd.  More info at <a href=""http://www.macgeekery.com/tips/all_about_launchd_items_and_how_to_make_one_yourself"" rel=""nofollow"">http://www.macgeekery.com/tips/all_about_launchd_items_and_how_to_make_one_yourself</a></p>
"
171297,"<p>Wouldn't it be great if DRM made sense like other API's?  </p>

<p>Sadly, you'll have to research each DRM scheme and locate a client API for that DRM scheme.</p>

<p>See this <a href=""http://www.linuxdevices.com/news/NS2351492178.html"" rel=""nofollow"">article</a> for a proposal to try and cope with the various inane DRM ""solutions"".</p>
"
171672,"<p><a href=""http://mentat.za.net/numpy/refguide/routines.bitwise.xhtml#bit-packing"" rel=""nofollow"">Bit-Packing</a> numpy ( <a href=""http://www.scipy.org/"" rel=""nofollow"">SciPY</a> ) arrays does what you are looking for.
The example shows 4x3 bit (Boolean) array packed into 4 8-bit bytes. <em>unpackbits</em> unpacks uint8 arrays into a Boolean output array that you can use in computations.</p>

<pre><code>&gt;&gt;&gt; a = np.array([[[1,0,1],
...                [0,1,0]],
...               [[1,1,0],
...                [0,0,1]]])
&gt;&gt;&gt; b = np.packbits(a,axis=-1)
&gt;&gt;&gt; b
array([[[160],[64]],[[192],[32]]], dtype=uint8)
</code></pre>

<p>If you need 1-bit pixel images, PIL is the place to look.</p>
"
200630,"<p>Here's the simplest way.  Use simple variables and <code>import</code> the settings file.</p>

<p>Call the file userprefs.py</p>

<pre><code># a user prefs file
color = 0x010203
font = ""times new roman""
position = ( 12, 13 )
size = ( 640, 480 )
</code></pre>

<p>In your application, you need to be sure that you can import this file.  You have <em>many</em> choices.</p>

<ol>
<li><p>Using <code>PYTHONPATH</code>.  Require <code>PYTHONPATH</code> be set to include the directory with the preferences files.</p>

<p>a.  An explicit command-line parameter to name the file (not the best, but simple)</p>

<p>b.  An environment variable to name the file.</p></li>
<li><p>Extending <code>sys.path</code> to include the user's home directory</p></li>
</ol>

<p>Example</p>

<pre><code>import sys
import os
sys.path.insert(0,os.path.expanduser(""~""))
import userprefs 
print userprefs.color
</code></pre>
"
58299,"<p>The only way I can think of that's guaranteed to give it to you is to hit a service like <a href=""http://whatismyip.com/"" rel=""nofollow"">http://whatismyip.com/</a> to get it.</p>
"
237217,"<p>Another possibility is to use pdb, or some other python debugger instead, and change os.environ at the python level, rather than the C level.  <a href=""http://stackoverflow.com/questions/132058/getting-stack-trace-from-a-running-python-application#133384"">Here's</a> a small recipe I posted to interrupt a running python process and provide access to a python console on receiving a signal.  Alternatively, just stick a pdb.set_trace() at some point in your code you want to interrupt.  In either case, just run the statement ""<code>import os; os.environ['SOME_VARIABLE']='my_value'</code>"" and you should be updated as far as python is concerned.  </p>

<p>I'm not sure if this will also update the C environment with setenv, so if you have C modules using getenv directly you may have to do some more work to keep this in sync.</p>
"
56262,"<p>don't you actually want something like:</p>

<pre><code>html(head(script(type='text/javascript', content='var a = ...')),
body(h1('And I like the fact that 3 &lt; 1'), p('just some paragraph'))
</code></pre>

<p>I think I saw something like that somewhere. This would be wonderful.</p>

<p><strong>EDIT:</strong> Actually, I went and wrote a library today to do <em>just that</em>: <a href=""http://pypi.python.org/pypi/magictree"" rel=""nofollow"">magictree</a></p>

<p>You can use it like this:</p>

<pre><code>from magictree import html, head, script, body, h1, p
root = html(
         head(
           script('''var a = 'I love &amp;amp;aacute; letters''', 
                  type='text/javascript')),
         body(
           h1('And I like the fact that 3 &gt; 1')))

# root is a plain Element object, like those created with ET.Element...
# so you can write it out using ElementTree :)
tree = ET.ElementTree(root)
tree.write('foo.xhtml')
</code></pre>

<p>The magic in <code>magictree</code> lies in how the importing works: The <code>Element</code> factories are created when needed. Have a <a href=""http://code.google.com/p/pymagictree/source/browse/trunk/magictree.py"" rel=""nofollow"">look at the source</a>, it is <a href=""http://stackoverflow.com/questions/2447353/getattr-on-a-module"">based on an answer to another StackOverflow question</a>.</p>
"
236802,"<p>You're trying to do <a href=""http://en.wikipedia.org/wiki/Color_quantization"" rel=""nofollow"">quantization</a> of the image.  There's some tips here for that sort of thing here:</p>

<p><a href=""https://web.archive.org/web/20080825200550/http://nadiana.com/pil-tips-converting-png-gif"" rel=""nofollow"">https://web.archive.org/web/20080825200550/http://nadiana.com/pil-tips-converting-png-gif</a></p>
"
236044,"<p>I'm still not entirely convinced why in some languages this works one way, and in some another way. In Common Lisp it's like Python:</p>

<pre><code>(defvar *flist* '())

(dotimes (i 3 t)
  (setf *flist* 
    (cons (lambda (x) (* x i)) *flist*)))

(dolist (f *flist*)  
  (format t ""~a~%"" (funcall f 2)))
</code></pre>

<p>Prints ""6 6 6"" (note that here the list is from 1 to 3, and built in reverse"").
While in Scheme it works like in Perl:</p>

<pre><code>(define flist '())

(do ((i 1 (+ 1 i)))
    ((&gt;= i 4))
  (set! flist 
    (cons (lambda (x) (* i x)) flist)))

(map 
  (lambda (f)
    (printf ""~a~%"" (f 2)))
  flist)
</code></pre>

<p>Prints ""6 4 2""</p>

<p>And as I've mentioned already, Javascript is in the Python/CL camp. It appears there is an implementation decision here, which different languages approach in distinct ways. I would love to understand what is the decision, exactly.</p>
"
317459,"<p>""but how should one do it instead?""</p>

<p>Tough call.  The issue is that they are plugging in metadata (specifically column names) on the fly into a SQL statement.  I'm not a big fan of this kind of thing.  The <code>sourcedest</code> variable has two column names that are going to be updated. </p>

<p>Odds are good that there is only one (or a few few) pairs of column names that are actually used.  My preference is to do this.</p>

<pre><code>if situation1:
    stmt= ""INSERT INTO mastertickets (this, that) VALUES (?, ?)""
elif situation2:
    stmt= ""INSERT INTO mastertickets (foo, bar) VALUES (?, ?)""
else:
    raise Exception( ""Bad configuration -- with some explanation"" )
cursor.execute( stmt, (self.tkt.id, n) )
</code></pre>

<p>When there's more than one valid combination of columns for this kind of thing, it indicates that the data model has merged two entities into a single table, which is a common database design problem.  Since you're working with a product and a plug-in, there's not much you can do about the data model issues.</p>
"
320248,"<p>Recursive function calls are not incredibly inefficient, that is an old programming myth. (If they're badly implemented, they may incur a larger overhead than necessary, but calling them ""incredibly inefficient"" is plain wrong.)</p>

<p>Remember: don't optimize prematurely, and <em>never</em> optimize without benchmarking first.</p>
"
320251,"<blockquote>
  <p>poll( ) </p>
  
  <p>Check if child process has terminated.
  Returns returncode attribute.</p>
</blockquote>
"
55354,"<p>Or rather, you should always use new-style classes, <em>unless</em> you have code that needs to work with versions of Python older than 2.2.</p>
"
55385,"<p>There's nothing wrong with using a command line utility to do what you want. If you put a nice wrapper around the service, you can implement the internals however you want! For example:</p>

<pre><code>class Whois(object):
    _whois_by_query_cache = {}

    def __init__(self, query):
        """"""Initializes the instance variables to defaults. See :meth:`lookup`
        for details on how to submit the query.""""""
        self.query = query
        self.domain = None
        # ... other fields.

    def lookup(self):
        """"""Submits the `whois` query and stores results internally.""""""
        # ... implementation
</code></pre>

<p>Now, whether or not you roll your own using urllib, wrap around a command line utility (like you're doing), or import a third party library and use that (like <a href=""http://stackoverflow.com/questions/50394#50423"" rel=""nofollow"">you're saying</a>), this interface stays the same.</p>

<p>This approach is generally not considered ugly at all -- <strong>sometimes command utilities do what you want and you should be able to leverage them</strong>. If speed ends up being a bottleneck, your abstraction makes the process of switching to a native Python implementation transparent to your client code.</p>

<p><a href=""http://www.python.org/dev/peps/pep-0020/"" rel=""nofollow"">Practicality beats purity</a> -- that's what's Pythonic. :)</p>
"
200255,"<p>I guess the best way is to set the expiration to a date of the cookie to some date in the past.</p>
"
335132,"<p>I was never satisfied with David Mertz's articles at IBM on metaclsses so I recently wrote my own <a href=""http://askawizard.blogspot.com/2008/09/metaclasses-python-saga-part-4_30.html"" rel=""nofollow"">metaclass article</a>.  Enjoy.</p>
"
314913,"<p>I've managed to fix this now.</p>

<p>In <code>Window&gt;Preferences&gt;Pydev&gt;Interpreter-Python</code> remove the python interpreter and reload it (select <code>New</code>) after installing pylons.</p>

<p>In the Terminal cd into the projects directory. Then type <code>sudo python setup.py develop</code> 
Not sure what this does, but it does the trick (if any one wants to fill me in, please do)</p>

<p>In <code>Run&gt;Open Debug Dialog</code> enter the location of paster in <code>Main Module</code>. For me this is <code>/usr/bin/paster</code> . Then in the <code>Arguments</code> tab in <code>Program arguments</code> enter <code>serve /locationOfYourProject/development.ini</code></p>

<p>All set to go.
It took a lot of search for me to find out that it does not work if the arguments includes <code>--reload</code></p>
"
242110,"<p>The regular expression cases will fall down in some situations, like where a string literal contains a subsequence which matches the comment syntax.  You really need a parse tree to deal with this.</p>
"
136152,"<p>Depends on the size of the project. If you had only a few previous php-scripts which called your stand alone application then I'd probably go for a cgi-app.</p>

<p>If you have use for databases, url rewriting, templating, user management and such, then using a framework is a good idea.</p>

<p>And of course, before you port it, consider if it's worth it just to switch the language or if there are specific Python features you need.</p>

<p>Good luck!</p>
"
242159,"<p>I had this problem so much when I first got my Mac. The best solution I found was to delete everything I'd installed and just go with the <a href=""http://pythonmac.org"" rel=""nofollow"">pythonmac.org</a> version of Python (2.6). I then installed setuptools from the same site, and then used easy_install to install every other package.</p>

<p>Oh, and I got the GNU C Compiler from the Xcode developer tools CD (which you can download from Apple's website), so that I can compile C extensions.</p>
"
61140,"<p>I use a utility function I wrote.  Its name is somewhat misleading because it kind of implies it might be a random item or something like that.</p>

<pre><code>def anyitem(iterable):
    try:
        return iter(iterable).next()
    except StopIteration:
        return None
</code></pre>
"
239098,"<p>For Python, you could compile an extension which links to the DLL, so that in Python you could just import it like a normal module. You could do this by hand, by using a library like Boost.Python, or by using a tool such as SWIG (which also supports Perl and other scripting languages) to generate a wrapper automatically.</p>
"
240456,"<p>Quickest solution: subclass from ATFolder instead of BaseFolder. That gives you all the ""normal"" reordering and other commmon plone folder capabilities (which I suspect you also want).</p>

<p>If you want to be more selective, look into Products/ATContentTypes/content/base.py: ATCTOrderedFolder and OrderedBaseFolder.</p>
"
241809,"<p>I just discovered that the <a href=""http://www.voidspace.org.uk/python/mock.html"" rel=""nofollow"">Mock library</a> provides an assertRaisesWithMessage() method (in its unittest.TestCase subclass), which will check not only that the expected exception is raised, but also that it is raised with the expected message:</p>

<pre><code>from testcase import TestCase

import mymod

class MyTestCase(TestCase):
    def test1(self):
        self.assertRaisesWithMessage(SomeCoolException,
                                     'expected message',
                                     mymod.myfunc)
</code></pre>
"
60506,"<p>Is there a reason you want to <em>avoid</em> putting empty <code>__init__.py</code> files in version control? If you do this you won't be able to <code>import</code> your packages from the source directory wihout first running distutils.</p>

<p>If you really want to, I suppose you can create <code>__init__.py</code> in <code>setup.py</code>. It has to be <em>before</em> running <code>distutils.setup</code>, so <code>setup</code> itself is able to find your packages:</p>

<pre><code>from distutils import setup
import os

for path in [my_package_directories]:
    filename = os.path.join(pagh, '__init__.py')
    if not os.path.exists(filename):
        init = open(filename, 'w')
        init.close()

setup(
...
)
</code></pre>

<p>but... what would you gain from this, compared to having the empty <code>__init__.py</code> files there in the first place? </p>
"
60668,"<p>It doesn't get more simple than using pipes, which are supported on every OS I know of, and can be accessed in pretty much every language.</p>

<p>Check out <a href=""http://web.archive.org/web/20080919054639/http://www.utdallas.edu/~kcooper/teaching/3375/Tutorial6a/tutorial6.htm"" rel=""nofollow"">this</a> tutorial.</p>
"
238123,"<p>That's a very much a 'pure functional' approach and as such is a sensible idiom in Haskell but it's probably not so appropriate to Python.  Python only has a very limited concept of <a href=""http://www.haskell.org/tutorial/patterns.html"" rel=""nofollow"">patterns</a> in this way - and I suspect you might need a somewhat more rigid type system to implement that sort of construct (<a href=""http://www.erlang.org/"" rel=""nofollow"">erlang</a> buffs invited to disagree here).</p>

<p>What you have is probably as close as you would get to that idiom, but you are probably better off using a list comprehension or imperative approach rather than recursively calling a function with the tail of the list.  </p>

<p>As has been <a href=""http://www.oreillynet.com/onlamp/blog/2005/10/pythons_weak_functional_progra.html"" rel=""nofollow"">stated</a> <a href=""http://www.artima.com/weblogs/viewpost.jsp?thread=4550"" rel=""nofollow"">on a few occasions</a> <a href=""http://blog.ianbicking.org/functional-python.html"" rel=""nofollow"">before</a>, Python is not actually a functional language.  It just borrows ideas from the FP world.  It is not inherently <a href=""http://en.wikipedia.org/wiki/Tail_recursion"" rel=""nofollow"">Tail Recursive</a> in the way you would expect to see embedded in the architecture of a functional language, so you would have some difficulty doing this sort of recursive operation on a large data set without using a lot of stack space.</p>
"
238263,"<p>There are two alternative Python bindings for libsvn:</p>

<ul>
<li><a href=""http://pysvn.tigris.org/"" rel=""nofollow"">pysvn</a>.</li>
<li><a href=""https://launchpad.net/subvertpy"" rel=""nofollow"">subvertpy</a>. </li>
</ul>

<p>Subvertpy is quite new and is written by the author of <a href=""http://bazaar-vcs.org/BzrForeignBranches/Subversion"" rel=""nofollow"">bzr-svn</a>: the transparent <a href=""http://subversion.apache.org/"" rel=""nofollow"">svn</a> inter-operation bridge for <a href=""http://bazaar-vcs.org/"" rel=""nofollow"">bzr</a>.</p>

<p>For a while, bzr-svn used the upstream <a href=""http://www.swig.org/"" rel=""nofollow"">SWIG</a> Python bindings, and the author contributed a lot of bug fixes. It helped move the upstream python support for ""horribly broken"" to ""painfully aggravating and unpythonic"". So after wasting too many hours of his life to SWIG, the author decided to make his own bindings.</p>
"
238453,"<p>There is no built-in dictionary method that would return your desired result.</p>

<p>You can, however, achieve your goal by creating a helper function that will format the dictionary, e.g.:</p>

<pre><code>def getNiceDictRepr(aDict):
    return '\n'.join('%s %s' % t for t in aDict.iteritems())
</code></pre>

<p>This will produce your exact desired output:</p>

<pre><code>&gt;&gt;&gt; myDict = dict([(u'BC',45), (u'CHM',25), (u'CPM',30)])
&gt;&gt;&gt; print getNiceDictRepr(myDict)
BC 45
CHM 25
CPM 30
</code></pre>

<p>Then, in your application code, you can use it by passing it to <code>SetValue</code>:</p>

<pre><code>self.textCtrl.SetValue(getNiceDictRepr(myDict))
</code></pre>
"
315454,"<p>Reversi is an elegantly simple game. I'm going to use a psuedo C#/Java langauge to explain some concepts, but you can transpose them to Python.</p>

<p>To break it down into its most simple compnents, you have two basic things:</p>

<p>A 2 dimensional array that represents the game board:</p>

<pre><code>gameBoard[10,10]
</code></pre>

<p>And some form of enumaration that stores the state of each tile in the gameboard:</p>

<pre><code>enum tile
{
    none,
    white,
    black
}
</code></pre>

<p>To render the board, you loop through the gameBoard array, increasing by an offset of the piece size:</p>

<pre><code>for (int i = 0; i &lt; 10; i++)
{
    for (int j = 0; j &lt; 10; j++)
    {
        // The Piece to draw would be at gameBoard[i,j];
        // Pixel locations are calculated by multiplying the array location by an offset.
        DrawPiece(gameBoard[i,j],i * Width of Tile, j * width of tile);
    }
}
</code></pre>

<p>Likewise, resolving a mouse click back to a location in the array would be similar, use the mouse location and offset to calculate the actual tile you are on.</p>

<p>Each time a tile is placed, you scan the entire array, and apply a simple rules based engine on what the new colors should be. (This is the real challenge, and I'll leave it up to you.)</p>

<p>The AI can take advantage of doing this array scan with hypothetical moves, have it scan 10 or so possible moves, then choose the one that produces the best outcome. Try to not make it to smart, as its easy to make an unbeatable AI when you let it play out the entire game in its head.</p>

<p>When there are no longer any free locations in the array, You end the game.</p>
"
309327,"<p>Following <a href=""#290414"" rel=""nofollow"">Jeb's suggeston in a comment</a>, I created a <a href=""http://docs.djangoproject.com/en/dev/howto/custom-template-tags/#writing-custom-template-tags"" rel=""nofollow"">custom template tag</a>.</p>

<p>I replaced <code>{{ forloop.counter }}</code> with <code>{% counter %}</code>, a tag that simply prints how many times it's been called.</p>

<p>Here's the code for my counter tag. </p>

<pre><code>class CounterNode(template.Node):

  def __init__(self):
    self.count = 0

  def render(self, context):
    self.count += 1
    return self.count

@register.tag
def counter(parser, token):
  return CounterNode()
</code></pre>
"
310211,"<p>To avoid confusion, read the following, in order.</p>

<p>First, you have the <a href=""http://www.python.org/doc/2.5.2/lib/module-glob.html"" rel=""nofollow"">glob</a> module, which handles file name regular expressions just like the Windows and unix shells.</p>

<p>Second, you have the <a href=""http://www.python.org/doc/2.5.2/lib/module-fnmatch.html"" rel=""nofollow"">fnmatch</a> module, which just does pattern matching using the unix shell rules.</p>

<p>Third, you have the <a href=""http://www.python.org/doc/2.5.2/lib/module-re.html"" rel=""nofollow"">re</a> module, which is the complete set of regular expressions.</p>

<p>Then ask another, more specific question.</p>
"
310273,"<p>What's wrong with this?</p>

<pre><code>class ConstraintFailure( Exception ):
    def __init__( self, **failures ):
        self.failures= failures # already a dict, don't need to do anything
    def __getitem__( self, key ):
        return self.failures.get(key)
</code></pre>

<p>This is an Exception, and it contains other exceptions in an internal dictionary named <code>failures</code>.</p>

<p>Could you update your problem to list some some specific thing this can't do?</p>

<pre><code>try:
    raise ConstraintFailure( x=ValueError, y=Exception )
except ConstraintFailure, e:
    print e['x']
    print e['y']


&lt;type 'exceptions.ValueError'&gt;
&lt;type 'exceptions.Exception'&gt;
</code></pre>
"
26963,"<p>@<a href=""http://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none#26698"" rel=""nofollow"">Jason</a>:</p>

<blockquote>
  <p>I recommend using something more along the lines of</p>

<pre><code>if foo:
    #foo isn't None
else:
    #foo is None
</code></pre>
</blockquote>

<p>I don't like using ""if foo:"" unless foo truly represents a boolean value (i.e. 0 or 1). If foo is a string or an object or something else, ""if foo:"" may work, but it looks like a lazy shortcut to me. If you're checking to see if x is None, say ""if x is None:"".</p>
"
28247,"<pre><code>function subst($str, $dict){
    return preg_replace(array_map(create_function('$a', 'return ""/%\\($a\\)s/"";'), array_keys($dict)), array_values($dict), $str);
 }
</code></pre>

<p>You call it like so:</p>

<pre><code>echo subst('The %(site)s site %(adj)s because it %(adj)s', array('site'=&gt;'Stackoverflow', 'adj'=&gt;'rocks'));
</code></pre>
"
172437,"<p>Assuming the use of symmetric crypto, then AES should be your default choice, unless you have a good very reason to select otherwise. </p>

<p>There was a long, involved competition to select AES, and the winner was carefully chosen. Even Bruce Schneier, crypto god, has said that the AES winner is a better choice than the algorithm (TwoFish) that he submitted to the competition.</p>
"
172734,"<p>This won't necessarily speed up any of your code, but is critical knowledge when programming in Python if you want to avoid slowing your code down.  The ""Global Interpreter Lock"" (GIL), has the potential to drastically reduce the speed of your multi-threaded program if its behavior is not understood (yes, this bit me ... I had a nice 4 processor machine that wouldn't use more than 1.2 processors at a time).  There's an introductory article with some links to get you started at <a href=""http://smoothspan.wordpress.com/2007/09/14/guido-is-right-to-leave-the-gil-in-python-not-for-multicore-but-for-utility-computing/"" rel=""nofollow"">SmoothSpan</a>.</p>
"
172737,"<p>Run your app through the Python profiler.
Find a serious bottleneck.
Rewrite that bottleneck in C.
Repeat.</p>
"
172766,"<p>People have given some good advice, but you have to be aware that when high performance is needed, the python model is: punt to c.  Efforts like psyco may in the future help a bit, but python just isn't a fast language, and it isn't designed to be.  Very few languages have the ability to do the dynamic stuff really well and still generate very fast code; at least for the forseeable future (and some of the design works against fast compilation) that will be the case.</p>

<p>So, if you really find yourself in this bind, your best bet will be to isolate the parts of your system that are unacceptable slow in (good) python, and design around the idea that you'll rewrite those bits in C.  Sorry.  Good design can help make this less painful.  Prototype it in python first though, then you've easily got a sanity check on your c, as well.</p>

<p>This works well enough for things like numpy, after all.  I can't emphasize enough how much good design will help you though.  If you just iteratively poke at your python bits and replace the slowest ones with C, you may end up with a big mess.  Think about exactly where the C bits are needed, and how they can be minimized and encapsulated sensibly.</p>
"
311880,"<p>You should also first check the checksum of the data. It is calculated by XORing the characters between the $ and the * (not including them) and comparing it to the hex value at the end.</p>

<p>Your pastebin looks like it has some corrupt lines in it. Here is a simple check, it assumes that the line starts with $ and has no CR/LF at the end. To build a more robust parser you need to search for the '$' and work through the string until hitting the '*'.</p>

<pre><code>def check_nmea0183(s):
    """"""
    Check a string to see if it is a valid NMEA 0183 sentence
    """"""
    if s[0] != '$':
        return False
    if s[-3] != '*':
        return False

    checksum = 0
    for c in s[1:-3]:
        checksum ^= ord(c)

    if int(s[-2:],16) != checksum:
        return False

    return True
</code></pre>
"
311968,"<p>Have you looked at the try statement?</p>

<pre><code>try:
    x = int(rowColumn[1][3].replace(',','').strip('$'))
except ValueError, e:
    x = None # rowColumn[1][3] was not an integer
</code></pre>
"
133898,"<p>This is exactly what generators are suited to handle:</p>

<pre><code>result = (expensive(x) for x in mylist)
result = (do_something(x) for x in result if some_condition(x))
...
result = [x for x in result if x]  # finally, a list
</code></pre>

<ol>
<li>This makes it totally clear what is happening during each stage of the pipeline.</li>
<li>Explicit over implicit</li>
<li>Uses generators everywhere until the final step, so no large intermediate lists</li>
</ol>

<p>cf:  <a href=""http://www.dabeaz.com/generators/"" rel=""nofollow"">'Generator Tricks for System Programmers' by David Beazley</a></p>
"
63357,"<blockquote>
  <p>I'm currently using NotePad++. Is
  there maybe an IDE that would take
  care of the tabs and indenting?</p>
</blockquote>

<p>I liked <a href=""http://pydev.sourceforge.net/"" rel=""nofollow"">pydev</a> extensions of eclipse for that.</p>
"
312746,"<p>dude get yourself a python book. Dive into Python is pretty good. </p>
"
62094,"<p>If your idea is to compare the languages, I'd say anything outside them is not relevant for comparison purposes. </p>

<p>Nonetheless you can use the time command to measure everything and can compare it with the timing within a script.</p>

<p>Like this:</p>

<pre><code>$ time script.php
HI!

real    0m3.218s
user    0m0.080s
sys     0m0.064s
</code></pre>

<p>It will give you clock time, user time (php interpreter) and sys time (OS time)</p>

<p>If you are thinking web, then it gets a lot harder because you would be mixing webserver overhead and that is not always easy to compare if, say, you are using WSGI v/s mod_php. Then you'd have to hook probes into the webserving parts of the chain as well</p>
"
60754,"<p>Not easily. You could have two ThreadingHTTPServer instances, write your own serve_forever() function (don't worry it's not a complicated function).</p>

<p>The existing function:</p>

<pre><code>def serve_forever(self, poll_interval=0.5):
    """"""Handle one request at a time until shutdown.

    Polls for shutdown every poll_interval seconds. Ignores
    self.timeout. If you need to do periodic tasks, do them in
    another thread.
    """"""
    self.__serving = True
    self.__is_shut_down.clear()
    while self.__serving:
        # XXX: Consider using another file descriptor or
        # connecting to the socket to wake this up instead of
        # polling. Polling reduces our responsiveness to a
        # shutdown request and wastes cpu at all other times.
        r, w, e = select.select([self], [], [], poll_interval)
        if r:
            self._handle_request_noblock()
    self.__is_shut_down.set()
</code></pre>

<p>So our replacement would be something like:</p>

<pre><code>def serve_forever(server1,server2):
    while True:
        r,w,e = select.select([server1,server2],[],[],0)
        if server1 in r:
            server1.handle_request()
        if server2 in r:
            server2.handle_request()
</code></pre>
"
129172,"<p>If they're simple one-line commands, you can wrap them in <code>lambda</code>s:</p>

<pre><code>for cmd in [
    (lambda: foo (a, b)),
    (lambda: bar (c, d)),
]:
    try:
        cmd ()
    except StandardError, e:
        baz (e)
</code></pre>

<p>You could wrap that whole thing up in a function, so it looked like this:</p>

<pre><code>ignore_errors (baz, [
    (lambda: foo (a, b)),
    (lambda: bar (c, d)),
])
</code></pre>
"
307018,"<p>Have you tried using ctypes?</p>

<pre><code>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; ctypes.windll.user32.RegisterRawInputDevices
&lt;_FuncPtr object at 0x01FCFDC8&gt;
</code></pre>

<p>It would be a little work setting up the Python version of the necessary structures, but you may be able to query the Win32 API directly this way without going through wxPython.</p>
"
197846,"<p>There's no built-in functionality for decoding a string like this, since it is really its own custom codec.  You simply need to split up the string on those control characters and decode it accordingly.</p>

<p>Here's a (very slow) example of such a function that handles latin1 and shift-JIS:</p>

<pre><code>latin1 = ""latin-1""
japanese = ""Shift-JIS""

control_l = ""\x0c""
control_j = ""\n""

encodingMap = {
    control_l: latin1,
    control_j: japanese}

def funkyDecode(s, initialCodec=latin1):
    output = u""""
    accum = """"
    currentCodec = initialCodec
    for ch in s:
        if ch in encodingMap:
            output += accum.decode(currentCodec)
            currentCodec = encodingMap[ch]
            accum = """"
        else:
            accum += ch
    output += accum.decode(currentCodec)
    return output
</code></pre>

<p>A faster version might use str.split, or regular expressions.</p>

<p>(Also, as you can see in this example, ""^J"" is the control character for ""newline"", so your input data is going to have some interesting restrictions.)</p>
"
25151,"<p>I don't do web development much any longer, but when I did, I did something like so:</p>

<p>When no parsing is supposed to happen, I usually just escape the data to not interfere with the database when I store it, and escape everything I read up from the database to not interfere with html when I display it (cgi.escape() in python).</p>

<p>Chances are, if someone tried to input html characters or stuff, they actually wanted that to be displayed as text anyway. If they didn't, well tough :)</p>

<p>In short always escape what can affect the current target for the data.</p>

<p>When I did need some parsing (markup or whatever) I usually tried to keep that language in a non-intersecting set with html so I could still just store it suitably escaped (after validating for syntax errors) and parse it to html when displaying without having to worry about the data the user put in there interfering with your html.</p>

<p>See also <a href=""http://wiki.python.org/moin/EscapingHtml"" rel=""nofollow"">Escaping HTML</a></p>
"
25213,"<p>There's also the way <code>psyco-pg</code> seems to do it... From what I gather, it seems to create dictionary-like row-proxies to map key lookup into the memory block returned by the query. In that case, fetching the whole answer and working with a similar proxy-factory over the rows seems like useful idea. Come to think of it though, it feels more like Lua than Python.</p>

<p>Also, this should be applicable to all <a href=""http://www.python.org/dev/peps/pep-0249/"" rel=""nofollow"">PEP-249 DBAPI2.0</a> interfaces, not just Oracle, or did you mean just <em>fastest</em> using <em>Oracle</em>?</p>
"
336239,"<p>launchd is one of the best parts of MacOS X, and it causes me great pain to not be able to find it on other systems.</p>

<p>Edit and place this in <code>/Library/LaunchDaemons</code> as <code>com.you.wiki.plist</code></p>

<pre><code>&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;
&lt;!DOCTYPE plist PUBLIC ""-//Apple Computer//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd""&gt;
&lt;plist version=""1.0""&gt;
&lt;dict&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;com.you.wiki&lt;/string&gt;
    &lt;key&gt;LowPriorityIO&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;KeepAlive&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;RunAtLoad&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;Nice&lt;/key&gt;
    &lt;integer&gt;1&lt;/integer&gt;
    &lt;key&gt;WorkingDirectory&lt;/key&gt;
    &lt;string&gt;/Users/stuartcw/Documents/Wiki/moin-1.7.2&lt;/string&gt; 
    &lt;key&gt;UserName&lt;/key&gt;
    &lt;string&gt;user to run this as&lt;/string&gt;
    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;/usr/bin/python&lt;/string&gt;
        &lt;string&gt;wikiserver.py&lt;/string&gt;
    &lt;/array&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre>
"
249279,"<p><code>os.rename()</code> to move, and <code>os.unlink()</code> to delete -- just like Python pre-<code>shutil</code>.</p>
"
249342,"<p>One way is to add the paths to your code using sys.path.</p>

<pre><code>import sys

sys.path.append(somepath)
</code></pre>

<p>Another way is to use site, which processes .pth files in addition to adding to sys.path.</p>

<pre><code>import site

site.addsitedir(sitedir, known_paths=None)
</code></pre>

<p><a href=""https://docs.python.org/library/site.html"" rel=""nofollow"">https://docs.python.org/library/site.html</a></p>

<p>But you probably don't want to add this to all your related code.  </p>

<p>I've seen mention of sitecustomize.py being used to perform something like this, but after some testing I couldn't get it to work as might be expected. </p>

<p>Here it mentions that auto-import of sitecustomize.py ended in 2.5, if your not on 2.5 try it out.  (just add one of the path add methods above to the file and drop it in the directory your program is run)
A work around method is mentioned in the post for users of 2.5 and up. </p>

<p><a href=""http://code.activestate.com/recipes/552729/"" rel=""nofollow"">http://code.activestate.com/recipes/552729/</a></p>
"
307622,"<p>Python has nothing called pointers, but your code works as written.  Function are first-class objects, assigned to names, and used as any other value.</p>

<p>You can use this to implement a Strategy pattern, for example:</p>

<pre><code>def the_simple_way(a, b):
    # blah blah

def the_complicated_way(a, b):
    # blah blah

def foo(way):
    if way == 'complicated':
        doit = the_complicated_way
    else:
        doit = the_simple_way

    doit(a, b)
</code></pre>

<p>Or a lookup table:</p>

<pre><code>def do_add(a, b):
    return a+b

def do_sub(a, b):
    return a-b

handlers = {
    'add': do_add,
    'sub': do_sub,
}

print handlers[op](a, b)
</code></pre>

<p>You can even grab a method bound to an object:</p>

<pre><code>o = MyObject()
f = o.method
f(1, 2) # same as o.method(1, 2)
</code></pre>
"
307741,"<p><em>doh</em></p>

<p>I just figured out why.</p>

<p>In the above case, the a is a class attribute, not a data attribute - those are shared by all Balls(). Commenting out the a=[] and placing it into the <strong>init</strong> block means that it's a data attribute instead. (And, I couldn't access it then with foo.a, which I shouldn't do anyhow.) It seems like the class attributes act like static attributes of the class, they're shared by all instances. </p>

<p>Whoa. </p>

<p>One question though : CodeCompletion sucks like this. In the foo class, I can't do self.(variable), because it's not being defined automatically - it's being defined by a function. Can I define a class variable and replace it with a data variable?</p>
"
308210,"<p>Here's an exact translation of that function (except, like your case, using <code>bin</code> instead of reserved keyword <code>in</code>).</p>

<pre><code>from jarray import zeros
from java.io import BufferedInputStream, FileInputStream, FileOutputStream
from java.util.zip import ZipEntry, ZipOutputStream

def test(file):
    zos = ZipOutputStream(FileOutputStream(file + "".zip""))
    buf = zeros(1024, 'b')
    zipEntry = ZipEntry(file)
    fin = FileInputStream(file)
    bin = BufferedInputStream(fin)
    zos.putNextEntry(zipEntry)
    len = bin.read(buf)
    while len &gt;= 0:
        zos.write(buf, 0, len)
        len = bin.read(buf)
    bin.close()
    zos.closeEntry()
</code></pre>
"
66069,"<p>If you're willing to try something a little different, there's the <a href=""http://zeroc.com/ice.html"" rel=""nofollow"">ICE</a> platform from <a href=""http://zeroc.com"" rel=""nofollow"">ZeroC</a>. It's open source, and is supported on pretty much every OS you can think of, as well as having language support for C++, C#, Java, Ruby, Python and PHP. Finally, it's very easy to drive (the language mappings are tailored to fit naturally into each language). It's also fast and efficient. There's even a cut-down version for devices.</p>
"
310299,"<p>For accessing and setting environment variables, read up on the os.environ dictionary. You can also use os.putenv to set an environment variable.</p>
"
65326,"<p>I've used StableDict before with good success.</p>

<p><a href=""http://pypi.python.org/pypi/StableDict/0.2"" rel=""nofollow"">http://pypi.python.org/pypi/StableDict/0.2</a></p>
"
311623,"<pre><code>import subprocess

proc = subprocess.Popen(['unison', 'profile'], stderr=subprocess.PIPE,      
                        stdout=subprocess.PIPE, stdin=subprocess.PIPE)

proc.stdin.write('user input')
print proc.stdout.read()
</code></pre>

<p>This should help you get started. Please edit your question with more information if you want a more detailed answer!</p>
"
132532,"<pre><code>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup, Comment
&gt;&gt;&gt; html = '&lt;html&gt;&lt;!--[if IE]&gt; bloo blee&lt;![endif]--&gt;&lt;/html&gt;'
&gt;&gt;&gt; soup = BeautifulSoup(html)
&gt;&gt;&gt; comments = soup.findAll(text=lambda text:isinstance(text, Comment) 
               and text.find('if') != -1) #This is one line, of course
&gt;&gt;&gt; [comment.extract() for comment in comments]
[u'[if IE]&gt; bloo blee&lt;![endif]']
&gt;&gt;&gt; print soup.prettify()
&lt;html&gt;
&lt;/html&gt;
&gt;&gt;&gt;
</code></pre>

<p>If your data gets BeautifulSoup confused, you can <a href=""http://www.crummy.com/software/BeautifulSoup/documentation.html#Sanitizing%20Bad%20Data%20with%20Regexps"" rel=""nofollow"">fix</a> it before hand or <a href=""http://www.crummy.com/software/BeautifulSoup/documentation.html#Customizing%20the%20Parser"" rel=""nofollow"">customize</a> the parser, among other solutions.</p>

<p>EDIT: Per your comment, you just modify the lambda passed to findAll as you need (I modified it)</p>
"
301859,"<p>For quick turnaround I've found <a href=""http://groovy.codehaus.org/Processing+XML"" rel=""nofollow"">Groovy</a> very useful.</p>
"
24190,"<p>The first thing that jumps to mind is the possibility of your git history having a nonlinear history. You might have difficulty determining a sensible sequence of commits.</p>

<p>Having said that, it seems like you could keep a log of commit ids and the corresponding lines of code in that commit. In a post-commit hook, starting from the HEAD revision, work backwards (branching to multiple parents if necessary) until all paths reach a commit that you've already seen before. That should give you the total lines of code for each commit id.</p>

<p>Does that help any? I have a feeling that I've misunderstood something about your question.</p>
"
174184,"<p>Have a look at this question <a href=""http://stackoverflow.com/questions/169897/how-to-package-twisted-program-with-py2exe"">how-to-package-twisted-program-with-py2exe</a> it seems to be the same problem.</p>

<p>The answer given there is to explicitly include the modules on the command line to py2exe.</p>
"
197025,"<p>Within the directory, there should be a directory called '.svn'. Within this, a file named 'locked' indicates that the directory is locked.</p>
"
252920,"<p>Based upon code from <a href=""http://www.cocoadev.com/index.pl?MoveToTrash"" rel=""nofollow"">http://www.cocoadev.com/index.pl?MoveToTrash</a> I have came up with the following:</p>

<pre><code>def get_trash_path(input_file):
    path, file = os.path.split(input_file)
    if path.startswith(""/Volumes/""):
        # /Volumes/driveName/.Trashes/&lt;uid&gt;
        s = path.split(os.path.sep)
        # s[2] is drive name ([0] is empty, [1] is Volumes)
        trash_path = os.path.join(""/Volumes"", s[2], "".Trashes"", str(os.getuid()))
        if not os.path.isdir(trash_path):
            raise IOError(""Volume appears to be a network drive (%s could not be found)"" % (trash_path))
    else:
        trash_path = os.path.join(os.getenv(""HOME""), "".Trash"")
    return trash_path
</code></pre>

<p>Fairly basic, and there's a few things that have to be done seperatly, particularly checking if the filename already exist in trash (to avoid overwriting) and the actual moving to trash, but it seems to cover most things (internal, external and network drives)</p>

<p><strong>Update:</strong> I wanted to trash a file in a Python script, so I re-implemented Dave Dribin's solution in Python:</p>

<pre><code>from AppKit import NSURL
from ScriptingBridge import SBApplication

def trashPath(path):
    """"""Trashes a path using the Finder, via OS X's Scripting Bridge.
    """"""
    targetfile = NSURL.fileURLWithPath_(path)
    finder = SBApplication.applicationWithBundleIdentifier_(""com.apple.Finder"")
    items = finder.items().objectAtLocation_(targetfile)
    items.delete()
</code></pre>

<p>Usage is simple:</p>

<pre><code>trashPath(""/tmp/examplefile"")
</code></pre>
"
125226,"<p>Take a look at <a href=""http://stackoverflow.com/questions/124869/how-does-the-doc-format-work"" rel=""nofollow"" title=""how the doc format works"">how the doc format works</a> and <a href=""http://stackoverflow.com/questions/124959/create-word-document-using-php-in-lunux"" rel=""nofollow"" title=""create word document using php in linux"">create word document using PHP in linux</a>. The former is especially useful. <a href=""http://www.abisource.com/"" rel=""nofollow"" title=""abiword"">Abiword</a> is my recommended tool. There are <a href=""http://www.abisource.com/wiki/Microsoft_Word_documents"" rel=""nofollow"" title=""Abiword limitations"">limitations</a> though:</p>

<blockquote>
  <p>However, if the document has complicated tables, text boxes, embedded spreadsheets, and so forth, then it might not work as expected. Developing good MS Word filters is a very difficult process, so please bear with us as we work on getting Word documents to open correctly. If you have a Word document which fails to load, please open a Bug and include the document so we can improve the importer. </p>
</blockquote>
"
303597,"<pre><code>env=Environment(CPPPATH='/usr/include/glib-2.0/:/usr/lib/glib-2.0/include:include',
                CPPDEFINES=[],
                LIBS=['glib-2.0']) 

if ARGUMENTS.get('debug', 0):
    env.Append(CCFLAGS = ' -g')

env.Program('template', Glob('src/*.cc'))
</code></pre>

<p>Worked a treat. Thanks.</p>
"
305587,"<p>Sequences are described here:
<a href=""https://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange"" rel=""nofollow"">https://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange</a></p>

<p>So sequences are not the same as iterable objects. I think sequence must implement
<code>__getitem__</code>, whereas iterable objects must implement <code>__iter__</code>.
So for example string are sequences and don't implement <code>__iter__</code>, xrange objects are sequences and don't implement <code>__getslice__</code>.</p>

<p>But from what you seen to want to do, I'm not sure you want sequences, but rather iterable objects.
So go for <code>hasattr(""__getitem__"", X)</code> you want sequences, but go rather <code>hasattr(""__iter__"", X)</code> if you don't want strings for example.</p>
"
128641,"<p>Here's an example where all the imports are at the very top (this is the only time I've needed to do this).  I want to be able to terminate a subprocess on both Un*x and Windows.</p>

<pre><code>import os
# ...
try:
    kill = os.kill  # will raise AttributeError on Windows
    from signal import SIGTERM
    def terminate(process):
        kill(process.pid, SIGTERM)
except (AttributeError, ImportError):
    try:
        from win32api import TerminateProcess  # use win32api if available
        def terminate(process):
            TerminateProcess(int(process._handle), -1)
    except ImportError:
        def terminate(process):
            raise NotImplementedError  # define a dummy function
</code></pre>

<p>(On review: what <a href=""http://stackoverflow.com/questions/128478/should-python-import-statements-always-be-at-the-top-of-a-module#128577"">John Millikin</a> said.)</p>
"
127651,"<p>Build something cool in Python and share it with others.  Small values of cool are still cool.  Not everyone gets to write epic, world-changing software.  </p>

<p>Every problem solved well using Python is a way of showing how cool Python is.</p>
"
251984,"<h2><strong>Likes</strong></h2>

<p>The excellent Documentation. Together with help from stackoverflow I have learned a lot in only a few days.
It writting in Python.
It has the wonderful contrib.admin which is even modular and extensible to embed it into the web app proper.</p>

<h2>Dislikes</h2>

<p>None so far. I am still enchanted</p>

<h2>Switch</h2>

<p>Its my first web framework, so no switch. After using Python for some years Django seemed the natural selection to me, mainly for its clean design.</p>
"
252100,"<p>I would choose to go with Pexpect. </p>

<pre><code>import pexpect
child = pexpect.spawn ('sudo mod -p -c noresource -u dtt -Q')
child.expect ('First question:')
child.sendline ('Y')
child.expect ('Second question:')
child.sendline ('Yup')
</code></pre>
"
250402,"<p>if you install putty on win32 you get an pscp (putty scp).</p>

<p>so you can use the os.system hack on win32 too.</p>

<p>(and you can use the putty-agent for key-managment)</p>

<p><hr /></p>

<p>sorry it is only a hack 
(but you can wrap it in a python class)</p>
"
128534,"<p>It's a tradeoff, that only the programmer can decide to make. </p>

<p>Case 1 saves some memory and startup time by not importing the datetime module (and doing whatever initialization it might require) until needed.  Note that doing the import 'only when called' also means doing it 'every time when called', so each call after the first one is still incurring the additional overhead of doing the import. </p>

<p>Case 2 save some execution time and latency by importing datetime beforehand so that not_often_called() will return more quickly when it <em>is</em> called, and also by not incurring the overhead of an import on every call.</p>

<p>Besides efficiency, it's easier to see module dependencies up front if the import statements are ... up front. Hiding them down in the code can make it more difficult to easily find what modules something depends on.</p>

<p>Personally I generally follow the PEP except for things like unit tests and such that I don't want always loaded because I <em>know</em> they aren't going to be used except for test code.</p>
"
66883,"<p>Here is how:</p>

<pre><code>import gobject

class MyGObjectClass(gobject.GObject):
    ...

gobject.signal_new(""signal-name"", MyGObjectClass, gobject.SIGNAL_RUN_FIRST,
    None, (str, int))
</code></pre>

<p>Where the second to last argument is the return type and the last argument is a tuple of argument types.</p>
"
308984,"<p>That code and window and signal connection work fine here.</p>

<p>There is a small bug though when calling the signal handler. The signal handler should not have a data argument, since only the widget is passed as an argument.</p>

<pre><code>def on_TestClass_destroy(self, widget):
    gtk.main_quit()
</code></pre>

<p>The data argument(s) are only those provided on connect in case you need extra state for a signal handler.</p>
"
258274,"<p>Here is the solution I and my colleagues came up with:</p>

<pre><code>from types import MethodType

class PrePostCaller:
    def __init__(self, other):
        self.other = other

    def pre(self): print 'pre'
    def post(self): print 'post'

    def __getattr__(self, name):
        if hasattr(self.other, name):
            func = getattr(self.other, name)
            return lambda *args, **kwargs: self._wrap(func, args, kwargs)
        raise AttributeError(name)

    def _wrap(self, func, args, kwargs):
        self.pre()
        if type(func) == MethodType:
            result = func( *args, **kwargs)
        else:
            result = func(self.other, *args, **kwargs)
        self.post()
        return result

#Examples of use
class Foo:
    def stuff(self):
        print 'stuff'

a = PrePostCaller(Foo())
a.stuff()

a = PrePostCaller([1,2,3])
print a.count()
</code></pre>

<p>Gives:</p>

<pre><code>pre
stuff
post
pre
post
0
</code></pre>

<p>So when creating an instance of your object, wrap it with the PrePostCaller object. After that you continue using the object as if it was an instance of the wrapped object. With this solution you can do the wrapping on a per instance basis.</p>
"
176047,"<p>Array can only be used for specific types, whereas lists can be used for any object.</p>

<p>Arrays can also only data of one type, whereas a list can have entries of various object types.</p>

<p>Arrays are also more efficient for some numerical computation.</p>
"
23422,"<p>Have a look at the process management functions in the <a href=""http://python.org/doc/2.5/lib/os-process.html"" rel=""nofollow"">os module</a>. There are function for starting new processes in many different ways, both synchronously and asynchronously.</p>

<p>I should note also that Windows doesn't provide functionality that is exactly like fork() on other systems. To do multiprocessing on Windows, you will need to use the <a href=""http://python.org/doc/2.5/lib/module-threading.html"" rel=""nofollow"">threading</a> module.</p>
"
256419,"<p><a href=""http://www.perforce.com/perforce/loadsupp.html#api"" rel=""nofollow"">Perforce's P4 Python module</a> mentioned in another answer is the way to go, but if installing this module isn't an option you can use the -G flag to help parse p4.exe output:</p>

<pre><code>p4 [ options ] command [ arg ... ]
    options:
            -c client -C charset -d dir -H host -G -L language
            -p port -P pass -s -Q charset -u user -x file
    The -G flag causes all output (and batch input for form commands
    with -i) to be formatted as marshalled Python dictionary objects.
</code></pre>
"
256610,"<p><a href=""http://pycurl.sourceforge.net/doc/curlobject.html"" rel=""nofollow"">The pycurl doc</a> explicitly says:</p>

<blockquote>
  <p>perform() -> None</p>
</blockquote>

<p>So the expected result is what you observe.</p>

<p>looking at an example from the pycurl site:</p>

<pre><code>import sys
import pycurl

class Test:
   def __init__(self):
       self.contents = ''

   def body_callback(self, buf):
       self.contents = self.contents + buf

print &gt;&gt;sys.stderr, 'Testing', pycurl.version

t = Test()
c = pycurl.Curl()
c.setopt(c.URL, 'http://curl.haxx.se/dev/')
c.setopt(c.WRITEFUNCTION, t.body_callback)
c.perform()
c.close()

print t.contents
</code></pre>

<p>The interface requires a class instance - <code>Test()</code> - with a specific callback to save the content. Note the call <code>c.setopt(c.WRITEFUNCTION, t.body_callback)</code> - something like this is missing in your code, so you do not receive any data (<code>buf</code> in the example). The example shows how to access the content:</p>

<pre><code>print t.contents
</code></pre>
"
122345,"<p>Alternatively, something not using regular expressions at all:</p>

<pre><code>prefix, data = var[:3], var[3:]
if prefix == 'foo':
    # do something with data
elif prefix == 'bar':
    # do something with data
elif prefix == 'baz':
    # do something with data
else:
    # do something with var
</code></pre>

<p>Whether that is suitable depends on your actual problem. Don't forget, regular expressions aren't the swiss army knife that they are in Perl; Python has different constructs for doing string manipulation.</p>
"
122364,"<pre><code>def find_first_match(string, *regexes):
    for regex, handler in regexes:
        m = re.search(regex, string):
        if m:
            handler(m)
            return
    else:
        raise ValueError

find_first_match(
    foo, 
    (r'foo(.+)', handle_foo), 
    (r'bar(.+)', handle_bar), 
    (r'baz(.+)', handle_baz))
</code></pre>

<p>To speed it up, one could turn all regexes into one internally and create the dispatcher on the fly. Ideally, this would be turned into a class then.</p>
"
256826,"<p>I suggest you look at 1. XMLRPC 2. JSONRPC 3. SOAP 4. REST/ATOM
XMLRPC is a valid choice. Don't worry it is too old. That is not a problem. It is so simple that little needed changing since original specification. The pro is that in every programming langauge I know there is a library for a client to be written in. Certainly for python. I made it work with mod_python and had no problem at all.
The big problem with it is its verbosity. For simple values there is a lot of XML overhead. You can gzip it of cause, but then you loose some debugging ability with the tools like Fiddler.</p>

<p>My personal preference is JSONRPC. It has all of the XMLRPC advantages and it is very compact. Further, Javascript clients can ""eval"" it so no parsing is necessary. Most of them are built for version 1.0 of the standard. I have seen diverse attempts to improve on it, called 1.1 1.2 and 2.0 but they are not built one on top of another and, to my knowledge, are not widely supported yet. 2.0 looks the best, but I would still stick with 1.0 for now (October 2008)</p>

<p>Third candidate would be REST/ATOM. REST is a principle, and ATOM is how you convey bulk of data when it needs to for POST, PUT requests and GET responses.
For a very nice implementation of it, look at GData, Google's API. Real real nice.</p>

<p>SOAP is old, and lots lots of libraries / langauges support it. IT is heeavy and complicated, but if your primary clients are .NET or Java, it might be worth the bother.
Visual Studio would import your WSDL file and create a wrapper and to C# programmer it would look like local assembly indeed.</p>

<p>The nice thing about all this, is that if you architect your solution right, existing libraries for Python would allow you support more then one with almost no overhead. XMLRPC and JSONRPC are especially good match.</p>

<p>Regarding authentication. XMLRPC and JSONRPC don't bother defining one. It is independent thing from the serialization. So you can implement Basic Authentication, Digest Authentication or your own with any of those. I have seen couple of examples of client side Digest Authentication for python, but am yet to see the server based one. If you use Apache, you might not need one, using mod_auth_digest Apache module instead. This depens on the nature of your application</p>

<p>Transport security. It is obvously SSL (HTTPS). I can't currently remember how XMLRPC deals with, but with JSONRPC implementation that I have it is trivial - you merely change http to https in your URLs to JSONRPC and it shall be going over SSL enabled transport.</p>
"
72249,"<p>Be aware that using <code>reverse()</code> requires that your urlconf module is 100% error free and can be processed - iow no <code>ViewDoesNotExist</code> errors or so, or you get the dreaded <code>NoReverseMatch</code> exception (errors in templates usually fail silently resulting in <code>None</code>).</p>
"
72596,"<p>Well, if you don't mind copying the original method in the subclass, you can use the following technique.</p>

<pre><code>import new

def copyfunc(func):
    return new.function(func.func_code, func.func_globals, func.func_name,
                        func.func_defaults, func.func_closure)

class Metaclass(type):
    def __new__(meta, name, bases, attrs):
        for key in attrs.keys():
            if key[0] == '_':
                skey = key[1:]
                for base in bases:
                    original = getattr(base, skey, None)
                    if original is not None:
                        copy = copyfunc(original)
                        copy.__doc__ = attrs[key].__doc__
                        attrs[skey] = copy
                        break
        return type.__new__(meta, name, bases, attrs)

class Class(object):
    __metaclass__ = Metaclass
    def execute(self):
        '''original doc-string'''
        return self._execute()

class Subclass(Class):
    def _execute(self):
        '''sub-class doc-string'''
        pass
</code></pre>
"
302964,"<p>This question: <a href=""http://stackoverflow.com/questions/279860/how-do-i-get-projects-to-place-their-build-output-into-the-same-directory-with"">http://stackoverflow.com/questions/279860/...</a> 
gives a pretty flexible scons skeleton which should serve your needs with a few tweaks to the path variables.</p>
"
255491,"<p>When it comes to simple data entry using user-entry forms, I'd argue that using a browser-based solution would probably be easier and faster to develop.</p>

<p>Unless your core feature is the interface itself (""<em>If it's a core business function -- do it yourself, no matter what.</em>"" , see <a href=""http://www.joelonsoftware.com/articles/fog0000000007.html"" rel=""nofollow"">In Defense of Not-Invented-Here Syndrome</a> from <a href=""http://www.joelonsoftware.com/"" rel=""nofollow"">Joel on Software</a>), I feel that the browser will be able to perform the form rendering and handling better than having to develop a GUI from scratch. Also, not to mention the it would take a much longer time to code a GUI as opposed to generating HTML forms and processing them after they are POSTed by the browser.</p>

<p>What I found in the past was that I was asked by a friend to write an application to enter results from a survey. At first, I was writing a Java applet to display the survey itself with all the radio boxes, when it hit me that I would be better off writing a simple HTTP server which would generate the forms and process them.</p>

<p>What it really comes down is to whether you are either developing:</p>

<ol>
<li>the user interface</li>
<li>data-entry application</li>
</ol>

<p>If you are making a data-entry application, then leave the user interface to the browser, and focus on your core functionality.</p>
"
71176,"<p>I would recommend using <a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">Beautiful Soup</a> module instead and it has <a href=""http://www.crummy.com/software/BeautifulSoup/documentation.html"" rel=""nofollow"">good documentation</a>.</p>
"
71614,"<p>You should also look at <a href=""http://code.google.com/p/html5lib/"" rel=""nofollow"">html5lib</a> for Python as it tries to parse HTML in a way that very much resembles what web browsers do, especially when dealing with invalid HTML (which is more than 90% of today's web).</p>
"
303693,"<p>The comma serves to unpack the tuple, i.e. it extracts the single item of the tuple, and binds it to <code>error</code>. Without the comma, you would bind the tuple itself, rather than its content.</p>
"
301847,"<p>I'll toss in a suggestion for <a href=""http://code.whytheluckystiff.net/hpricot/"" rel=""nofollow"">Hpricot</a>, a popular Ruby XML parser (although there are many similar options).</p>

<p>Example:</p>

<p>Given the following XML:</p>

<pre><code>&lt;Export&gt;
  &lt;Product&gt;
    &lt;SKU&gt;403276&lt;/SKU&gt;
    &lt;ItemName&gt;Trivet&lt;/ItemName&gt;
    &lt;CollectionNo&gt;0&lt;/CollectionNo&gt;
    &lt;Pages&gt;0&lt;/Pages&gt;
  &lt;/Product&gt;
&lt;/Export&gt;
</code></pre>

<p>You parse simply by:</p>

<pre><code>FIELDS = %w[SKU ItemName CollectionNo Pages]

doc = Hpricot.parse(File.read(""my.xml"")) 
(doc/:product).each do |xml_product|
  product = Product.new
  for field in FIELDS
    product[field] = (xml_product/field.intern).first.innerHTML
  end
  product.save
end
</code></pre>

<p>It sounds like your application would be very fit for a <a href=""http://www.rubyonrails.org"" rel=""nofollow"">Rails</a> application,  You could quickly prototype what you need, you've got direct interaction with your database of choice and you can output the data however you need to.</p>

<p>Here's another great resource page for <a href=""http://code.whytheluckystiff.net/hpricot/wiki/HpricotXML"" rel=""nofollow"">parsing XML with Hpricot</a> that might help as well as the <a href=""http://code.whytheluckystiff.net/doc/hpricot/"" rel=""nofollow"">documentation</a>.</p>
"
259818,"<p>There is no XSLT processor in Python 2.5.</p>
"
260077,"<p>This is not possible to do with a regular hash table in any language.  You'll either have to iterate through the entire keyset, attempting to match the key to your regex, or use a different data structure.</p>

<p>You should choose a data structure that is appropriate to the problem you're trying to solve.  If you have to match against any arbitrary regular expression, I don't know of a good solution.  If the class of regular expressions you'll be using is more restrictive, you might be able to use a data structure such as a <a href=""http://en.wikipedia.org/wiki/Trie"" rel=""nofollow"">trie</a> or <a href=""http://en.wikipedia.org/wiki/Suffix_tree"" rel=""nofollow"">suffix tree</a>.</p>
"
260114,"<p>In the general case, what you need is a lexer generator.  It takes a bunch of regular expressions and compiles them into a recognizer.  ""lex"" will work if you are using C.  I have never used a lexer generator in Python, but there seem to be a few to choose from.  Google shows <a href=""http://www.dabeaz.com/ply/"" rel=""nofollow"">PLY</a>, <a href=""http://www.lava.net/~newsham/pyggy/"" rel=""nofollow"">PyGgy</a> and <a href=""http://margolis-yateley.org.uk/python/various/index.php"" rel=""nofollow"">PyLexer</a>.</p>

<p>If the regular expressions all resemble each other in some way, then you may be able to take some shortcuts.  We would need to know more about the ultimate problem that you are trying to solve in order to come up with any suggestions.  Can you share some sample regular expressions and some sample data?</p>

<p>Also, how many regular expressions are you dealing with here?  Are you sure that the naive approach <em>won't</em> work?  As Rob Pike <a href=""http://www.lysator.liu.se/c/pikestyle.html"" rel=""nofollow"">once said</a>, ""Fancy algorithms are slow when n is small, and n is usually small.""  Unless you have thousands of regular expressions, and thousands of things to match against them, and this is an interactive application where a user is waiting for you, you may be best off just doing it the easy way and looping through the regular expressions.</p>
"
19668,"<p>If the mandate of the new lead is to put the house in order, the current situation should likely be simplified as much as possible prior.  If I had to bring things to order, I wouldn't want to have to manage an ongoing language conversion project on top of everything else, or at least I'd like some choice when initiating the project.  When making your recommendation, did you think about the additional managerial complexity that coming into the middle of a conversion would entail?</p>
"
20169,"<p>Just in case you might need to, this may help if you need to <strong>grab</strong> unicode arguments on Win32 (2K, XP etc):</p>

<pre><code>
from ctypes import *

def wmain(argc, argv):
    print argc
    for i in argv:
        print i
    return 0

def startup():
    size = c_int()
    ptr = windll.shell32.CommandLineToArgvW(windll.kernel32.GetCommandLineW(), byref(size))
    ref = c_wchar_p * size.value
    raw = ref.from_address(ptr)
    args = [arg for arg in raw]
    windll.kernel32.LocalFree(ptr)
    exit(wmain(len(args), args))
startup()
</code></pre>
"
340174,"<p>Will's answer is good - you're introducing a new requirement for developers.</p>

<p>In addition, what's the tool support like? I haven't tried any of this myself, but I'd want to know:</p>

<ul>
<li>How easy is it to debug into failing unit tests?</li>
<li>How easy is it to run unit tests from the IDE? (e.g. with ReSharper)</li>
<li>How easy is it to automate the unit tests from a continuous build server?</li>
</ul>

<p>It could be that all of these are fine - but you should make check them, and document the results.</p>

<p>There are other options as well as IronPython, of course - <a href=""http://boo.codehaus.org/"" rel=""nofollow"">Boo</a> being a fairly obvious choice.</p>
"
194306,"<p>Let's think.  We're describing objects (locations and pieces) with states and behaviors.  We need to note a current state and an ever-changing set of allowed state changes from a current state.</p>

<p>This is programming.  You don't want some ""meta-language"" that you can then parse in a regular programming language.  Just use a programming language.</p>

<p>Start with ordinary class definitions in an ordinary language.  Get it all to work.  Then, those class definitions are the definition of chess.  </p>

<p>With only miniscule exceptions, <strong>all</strong> programming languages are</p>

<ul>
<li>Textual</li>
<li>Human readable</li>
<li>Reasonably standardized</li>
<li>Easily parsed by their respective compilers or interpreters.</li>
</ul>

<p>Just pick a language, and you're done.  Since it will take a while to work out the nuances, you'll probably be happier with a dynamic language like Python or Ruby than with a static language like Java or C#.</p>

<p>If you want portability.  Pick a portable language.  If you want the language embedded in a ""larger"" application, then, pick the language for your ""larger"" application.</p>

<p><hr /></p>

<p>Since the original requirements were incomplete, a secondary minor issue is how to have code that runs in conjunction with multiple clients.</p>

<ol>
<li><p>Don't have clients in multiple languages.  Pick one.  Java, for example, and stick with it.  </p></li>
<li><p>If you must have clients in multiple languages, then you need a language you can embed in all three language run-time environments.  You have two choices.</p>

<ul>
<li><p>Embed an interpreter.  For example Python, Tcl and JavaScript are lightweight interpreters that you can call from C or C# programs.  This approach works for browsers, it can work for you.  Java, via JNI can make use of this, also.  There are BPEL rules engines that you can try this with.</p></li>
<li><p>Spawn an interpreter as a separate subprocess.  Open a named pipe or socket or something between your app and your spawned interpreter.  Your Java and C# clients can talk with a Python subprocess.  Your Python server can simply use this code.</p></li>
</ul></li>
</ol>
"
176287,"<p>The flooding approach can cause a bad situation to get worse. If messages are dropped due to high network load, having every node resend every message will only make the situation worse.</p>

<p>The best approach to take depends on the nature of the data you are sending. For example:</p>

<ol>
<li>Multimedia data: no retries, a dropped packet is a dropped frame, which won't matter when the next frame gets there anyway.</li>
<li>Fixed period data: Recipient node keeps a timer that is reset each time an update is received. If the time expires, it requests the missing update from the master node. Retries can be unicast to the requesting node.</li>
</ol>

<p>If neither of these situations applies (every packet has to be received by every node, and the packet timing is unpredictable, so recipients can't detect missed packets on their own), then your options include:</p>

<ol>
<li>Explicit ACK from every node for each packet. Sender retries (unicast) any packet that is not ACKed.</li>
<li>TCP-based grid approach, where each node is manually repeats received packets to neighbor nodes, relying on TCP mechanisms to ensure delivery.</li>
</ol>

<p>You could possibly rely on recipients noticing a missed packet upon reception of one with a later sequence number, but this requires the sender to keep the packet around until at least one additional packet has been sent. Requiring positive ACKs is more reliable (and provable).</p>
"
176305,"<p>What version of Python are you using?  If you are using 2.5 or 2.6, then you should be doing your import like:</p>

<pre><code>import string,time,sys,os,smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email.mime.text import MIMEText
from email import Encoders
</code></pre>

<p>I'm pretty certain that py2exe's modulefinder can correctly find the email package if you use it correctly (i.e. use the above names in Python 2.5+, or use the old names in Python 2.4-).  Certainly the SpamBayes setup script does not need to explicitly include the email package, and it includes the email modules without problem.</p>

<p>The other answers are correct in that if you do need to specifically include a module, you use the ""includes"" option, either via the command-line, or passing them in when you call setup.</p>
"
74452,"<p>We are using <a href=""http://bitten.edgewall.org/"" rel=""nofollow"">Bitten</a> wich is integrated with trac. And it's python based.</p>
"
258800,"<p>The quick and dirty solution is this:</p>

<pre><code>&gt;&gt;&gt; ""http://something.com/page?CONTENT_ITEM_ID=1234&amp;param3"".split(""&amp;"")[0]
'http://something.com/page?CONTENT_ITEM_ID=1234'
</code></pre>
"
259077,"<p>Hmm... and what about explicitly write <em>id</em> field in the model definition? Like this for example:</p>

<pre><code>class Entry(models.Model):
   id = models.AutoField(verbose_name=""custom name"")
   # and other fields...
</code></pre>

<p>It doesn't require any underlying database changes.</p>
"
259432,"<p>login() was introduced in Python 2.2, unluckily for you! The only way to do it in Python 2.1's own smtplib would be to issue the AUTH commands manually, which wouldn't be much fun.</p>

<p>I haven't tested it fully but it seems Python 2.2's smtplib should more or less work on 2.1 if you copy it across as you describe (perhaps call it smtplib2.py). It's only a Python module, no C compilation should be necessary. However you will at least need to copy the hmac.py library it relies on from 2.2's lib as well. If you use a later Python version to steal from it starts requiring the email package too which might be more work.</p>
"
259521,"<p>What you want is probably the Fourier transform of the audio data. There is several packages that can calculate that for you. <code>scipy</code> and <code>numpy</code> is two of them. It is often named ""Fast Fourier Transform"" (FFT), but that is just the name of the algorithm.</p>

<p>Here is an example of it's usage: <a href=""https://svn.enthought.com/enthought/browser/Chaco/trunk/examples/advanced/spectrum.py"" rel=""nofollow"">https://svn.enthought.com/enthought/browser/Chaco/trunk/examples/advanced/spectrum.py</a></p>
"
298833,"<p>See <a href=""http://stackoverflow.com/questions/15798/how-do-i-validate-xml-against-a-dtd-file-in-python"">this question</a> - the accepted answer is to use <a href=""http://codespeak.net/lxml/validation.html"" rel=""nofollow"">lxml validation</a>.</p>
"
257570,"<pre><code> cursor.execute(""INSERT INTO releases (date, cat, name) values (timestring, y[4], y[7]"")
</code></pre>

<p>should be</p>

<pre><code> cursor.execute(""INSERT INTO releases (date, cat, name) values (timestring, '%s', '%s')"" % (y[4], y[7]))
</code></pre>

<p>Your best bet to debug things like this is to put the query into a variable and use that:</p>

<pre><code>query = ""INSERT INTO releases (date, cat, name) values (timestring, '%s', '%s')"" % (y[4], y[7])
print query
cursor.execute(query)
</code></pre>

<p>That print statement would make it very obvious what the problem is.</p>

<p>If you're going to be using list variables a lot like this it can get very confusing, consider using the list just once and putting the variables into a dictionary.  It's a bit longer to type, but is much, much easier to keep track of what's going on.</p>
"
296677,"<p>One of the things near the top of my ""to-do"" list for PBs is to port Google's internal Protocol Buffer performance benchmark - it's mostly a case of taking confidential message formats and turning them into entirely bland ones, and then doing the same for the data.</p>

<p>When that's been done, I'd imagine you could build the same messages in Thrift and then compare the performance.</p>

<p>In other words, I don't have the data for you yet - but hopefully in the next couple of weeks...</p>
"
261070,"<p>This is definitely possible, as long as you're using 'real' regular expressions.  A textbook regular expression is something that can be recognized by a <a href=""http://en.wikipedia.org/wiki/Deterministic_finite_state_machine"" rel=""nofollow"">deterministic finite state machine</a>, which primarily means you can't have back-references in there.</p>

<p>There's a property of regular languages that ""the union of two regular languages is regular"", meaning that you can recognize an arbitrary number of regular expressions at once with a single state machine.  The state machine runs in O(1) time with respect to the number of expressions (it runs in O(n) time with respect to the length of the input string, but hash tables do too).</p>

<p>Once the state machine completes you'll know which expressions matched, and from there it's easy to look up values in O(1) time.</p>
"
341369,"<p>found it </p>

<p>win32api.InitiateSystemShutdown(""localhost"", ""Maintenance Reboot"", 60, 1, 1)</p>
"
341621,"<p>django channel in IRC saved me here.  The problem was that the URLField.clean() does two things I wasn't expecting:</p>

<ol>
<li>If no URL scheme is present (eg, http://) the method prepends 'http://' to the url</li>
<li>the method also appends a trailing slash.</li>
</ol>

<p>The results are returned and stored in the form's cleaned_data.  So I was checking <code>cleaned_data['url']</code> expecting something like <code>example.com</code> and actually getting <code>http://example.com/</code>.  Suffice to say, changing my <code>clean_url()</code> method to the following works:</p>

<pre><code>def clean_url(self):
        url = self.cleaned_data['url']        
        bits = urlparse(url)
        dom = bits[1]
        try:
            site=Site.objects.get(domain__iexact=dom)
        except Site.DoesNotExist:
            return dom
        raise forms.ValidationError(u'That domain is already taken.  Please choose another')
</code></pre>
"
177237,"<p><em>Ephemient</em>: each child in your code will stay in the for loop after his job ends. He will fork again and again. Moreover, the children that start when children[] is not empty will try to wait for some of their brothers at the end of the loop. Eventually someone will crash. This is a workaround:</p>

<pre><code>import os, time

def doTheJob(job):
    for i in xrange(10):
    	print job, i
    	time.sleep(0.01*ord(os.urandom(1)))
    	# random.random() would be the same for each process

jobs = [""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J""]
imTheFather = True
children = []

for job in jobs:
    child = os.fork()
    if child:
    	children.append(child)
    else:
    	imTheFather = False
    	doTheJob(job)
    	break

# in the meanwhile 
# ps aux|grep python|grep -v grep|wc -l == 11 == 10 children + the father

if imTheFather:
    for child in children:
    	os.waitpid(child, 0)
</code></pre>
"
177652,"<p>You should really post:</p>

<ol>
<li>The complete source code of your example</li>
<li>The <strong>actual</strong> result of it, not a summary</li>
</ol>

<p>Here is my code, which works:</p>

<pre><code>import socket, sys

def alert(msg):
    print &gt;&gt;sys.stderr, msg
    sys.exit(1)

(family, socktype, proto, garbage, address) = \
         socket.getaddrinfo(""::1"", ""http"")[0] # Use only the first tuple
s = socket.socket(family, socktype, proto)

try:
    s.connect(address) 
except Exception, e:
    alert(""Something's wrong with %s. Exception type is %s"" % (address, e))
</code></pre>

<p>When the server listens, I get nothing (this is normal), when it
doesn't, I get the expected message:</p>

<pre><code>Something's wrong with ('::1', 80, 0, 0). Exception type is (111, 'Connection refused')
</code></pre>
"
193827,"<p>A metaprogramming example <a href=""http://www.ibm.com/developerworks/linux/library/l-pymeta.html"" rel=""nofollow"">Dump object with magic</a>:</p>

<pre>
$ cat dump.py
</pre>

<pre><code>#!/usr/bin/python
import sys
if len(sys.argv) &gt; 2:
    module, metaklass  = sys.argv[1:3]
    m = __import__(module, globals(), locals(), [metaklass])
    __metaclass__ = getattr(m, metaklass)

class Data:
    def __init__(self):
        self.num = 38
        self.lst = ['a','b','c']
        self.str = 'spam'
    dumps   = lambda self: repr(self)
    __str__ = lambda self: self.dumps()

data = Data()
print data
</code></pre>

<p>Without arguments:</p>

<pre>
$ python dump.py
</pre>

<pre><code>&lt;__main__.Data instance at 0x00A052D8&gt;
</code></pre>

<p>With <a href=""http://www.gnosis.cx/download/Gnosis%5FUtils.More/"" rel=""nofollow"">Gnosis Utils</a>:</p>

<pre>
$ python dump.py gnosis.magic MetaXMLPickler
</pre>    

<pre><code>&lt;?xml version=""1.0""?&gt;
&lt;!DOCTYPE PyObject SYSTEM ""PyObjects.dtd""&gt;
&lt;PyObject module=""__main__"" class=""Data"" id=""11038416""&gt;
&lt;attr name=""lst"" type=""list"" id=""11196136"" &gt;
  &lt;item type=""string"" value=""a"" /&gt;
  &lt;item type=""string"" value=""b"" /&gt;
  &lt;item type=""string"" value=""c"" /&gt;
&lt;/attr&gt;
&lt;attr name=""num"" type=""numeric"" value=""38"" /&gt;
&lt;attr name=""str"" type=""string"" value=""spam"" /&gt;
&lt;/PyObject&gt;
</code></pre>

<p>It is a bit outdated but still working.</p>
"
194197,"<p>ElementTree has more pythonic API. It also is in standard library now so using it reduces dependencies.</p>

<p>I actually prefer <a href=""http://codespeak.net/lxml/"" rel=""nofollow"">lxml</a> as it has API like ElementTree, but has also nice additional features and performs well.</p>
"
339471,"<p>The problem is that mod_python doesn't go well together with mod_wsgi. I got into similar issue few weeks ago and everything started working for me shortly after I commented out mod_python inclusion.</p>

<p>Try to search <a href=""http://modwsgi.org"" rel=""nofollow"">modwsgi.org</a> wiki for ""mod_python"", I believe there was someone talking about this somewhere in comments</p>
"
339574,"<p>What's wrong with your code?  I find it to be quite elegant and simple.  The only problem is that if the file doesn't end in a newline, the last line returned won't have a <code>'\n'</code> as the last character, and therefore doing <code>line = line[:-1]</code> would incorrectly strip off the last character of the line.</p>

<p>The most elegant way to solve this problem would be to define a generator which took the lines of the file and removed the last character from each line only if that character is a newline:</p>

<pre><code>def strip_trailing_newlines(file):
    for line in file:
        if line[-1] == '\n':
            yield line[:-1]
        else:
            yield line

f = open(""myFile.txt"", ""r"")
for line in strip_trailing_newlines(f):
    # do something with line
</code></pre>
"
339886,"<p>You may find <a href=""http://stackoverflow.com/questions/285408/python-module-to-extract-probable-dates-from-strings"">this</a> question useful.  I'll give the answer I gave there, which is to use the <a href=""http://labix.org/python-dateutil"" rel=""nofollow"">dateutil</a> module.  This accepts a fuzzy parameter which will ignore any text that doesn't look like a date. ie:</p>

<pre><code>&gt;&gt;&gt; from dateutil.parser import parse
&gt;&gt;&gt; parse(""Some Random text of undetermined length Jan 28, 1986"", fuzzy=True)
datetime.datetime(1986, 1, 28, 0, 0)
</code></pre>
"
297193,"<p>If the raw net performance is the target, then nothing beats IIOP (see RMI/IIOP).
Smallest possible footprint -- only binary data, no markup at all. Serialization/deserialization is very fast too.</p>

<p>Since it's IIOP (that is CORBA), almost all languages have bindings.</p>

<p>But I presume the performance is not the <strong>only</strong> requirement, right?</p>
"
75923,"<p>If you add this method to your form class:</p>

<pre><code>def get_cleaned_or_initial(self, fieldname):
        if hasattr(self, 'cleaned_data'):
            return self.cleaned_data.get(fieldname)
        else:
            return self[fieldname].field.initial
</code></pre>

<p>you could then re-write your code as:</p>

<pre><code>if request.method == 'GET':
    form = MyForm()
else:
    form = MyForm(request.method.POST)
    form.is_valid()

do_query(form.get_cleaned_or_initial('start_date'), form.get_cleaned_or_initial('end_date'))
</code></pre>
"
300035,"<p>""where I just can't figure out what model I need to produce the HTML form I want, which seems such a basic thing that I fear for my chances of doing anything more complex""  </p>

<p>Common problem.</p>

<p>Root cause: Too much programming.</p>

<p>Solution.  Do less programming.  Seriously.</p>

<p>Define the Django model.  Use the default admin pages to see if it's right.  Fix the model.  Regenerate the database.  Look at the default admin pages.  Repeat until the default admin pages work correctly and simply.</p>

<p>Once it's right in the default admin pages, you have a model that works.  It's testable.  And the automatic stuff is hooked up correctly.  Choices are defined correctly.  Computations are in the model mmethods.  Queries work.  Now you can start working on other presentations of the data.</p>

<p>Django generally starts (and ends) with the model.  The forms, view and templates are derived from the model.</p>
"
300204,"<p>The advice to use <code>os.chdir(owd)</code> is good.  It would be wise to put the code which needs the changed directory in a <code>try:finally</code> block (or in python 2.6 and later, a <code>with:</code> block.)  That reduces the risk that you will accidentally put a <code>return</code> in the code before the change back to the original directory.</p>

<pre><code>def run(): 
    owd = os.getcwd()
    try:
        #first change dir to build_dir path
        os.chdir(testDir)
        #run jar from test directory
        os.system(cmd)
    finally:
        #change dir back to original working directory (owd)
        os.chdir(owd)
</code></pre>
"
120924,"<p>If you're doing any sort of manipulation of this huge dataset, you'll probably want to use <a href=""http://numpy.scipy.org/"" rel=""nofollow"" title=""Numpy Home Page"">Numpy</a>, which has support for a wide variety of numeric types, and efficient operations on arrays of them.</p>
"
179306,"<p>Use Python's <a href=""http://docs.python.org/library/xml.dom.minidom.html"" rel=""nofollow"">minidom</a></p>

<p>Basically you will take the following steps:</p>

<ol>
<li>Read XML data into DOM object</li>
<li>Use DOM methods to modify the document</li>
<li>Save new DOM object to new XML document</li>
</ol>

<p>The python spec should hold your hand rather nicely though this process. </p>
"
178511,"<p>The standard library arrays are useful for binary I/O, such as translating a list of ints to a string to write to, say, a wave file.  That said, as many have already noted, if you're going to do any real work then you should consider using NumPy.</p>
"
340329,"<p>Be sure to resist the <a href=""http://en.wikipedia.org/wiki/Second-system_effect"" rel=""nofollow"">Second-system effect</a> and you should be safe.</p>

<p>Rewriting an existing project gives you a reachable goal. You know which way you are heading. But don't try to do too much at once.</p>
"
14420,"<p>In Mastering Regular Expressions from Jeffrey Friedl (great book) it is mentioned that you could use \p{Letter} which will match unicode stuff that is considered a letter.</p>
"
15296,"<p>It's one of the preferred languages over at Google - It's several years ahead of Ruby in terms of ""maturity"" (what ever that really means - but managers like that). Since it's prefered by Google you can also run it on the Google App Engine.</p>

<p>Mircosoft is also embracing Python, and will have a v2.0 of IronPython coming out shortly. They are working on a Ruby implementation as well, but the Python version is way ahead, and is actually ""ready for primetime"". That give you the possibility for easy integration with .NET code, as well as being able to write client side RIAs in Python when Silverlight 2 ships.</p>
"
78990,"<p>You've got a couple options. One is to write a supressions file for valgrind that turns off reporting of stuff that you're not working on. Python has such a file, for example: 
<a href=""http://svn.python.org/projects/python/trunk/Misc/valgrind-python.supp"" rel=""nofollow"">http://svn.python.org/projects/python/trunk/Misc/valgrind-python.supp</a></p>

<p>If valgrind doesn't like your setup, another possibility is using <code>libmudflap</code>; you compile your program with <code>gcc -fmudflap -lmudflap</code>, and the resulting code is instrumented for pointer debugging. Described in the gcc docs, and here: <a href=""http://gcc.gnu.org/wiki/Mudflap_Pointer_Debugging"" rel=""nofollow"">http://gcc.gnu.org/wiki/Mudflap_Pointer_Debugging</a></p>
"
118676,"<p>I appreciate your problem, but think you are specifying the implementation instead of the problem you need solved.  Instead of converting to braces, how about working on a way for your screen reader to tell you the indentation level?
<p>
For example, <a href=""http://viming.blogspot.com/2007/02/indent-level-highlighting.html"" rel=""nofollow"">some people</a> have worked on vim syntax coloring to represent python indentation levels.  Perhaps a modified syntax coloring could produce something your screen reader would read?</p>
"
118821,"<p>Instead of uninstalling the built-in Python, install the MacPorts version and then modify your <code>$PATH</code> to have the MacPorts version first.</p>

<p>For example, if MacPorts installs <code>/usr/local/bin/python</code>, then modify your <code>.bashrc</code> to include <code>PATH=/usr/local/bin:$PATH</code> at the end.</p>
"
118828,"<p>The <a href=""http://groups.google.com/group/google-appengine/browse_thread/thread/ec0800a3ca92fe69#"" rel=""nofollow"">official answer</a> from Google is that you have to delete in chunks spread over multiple requests. You can use AJAX, <a href=""http://en.wikipedia.org/wiki/Meta_refresh"" rel=""nofollow"">meta refresh</a>, or request your URL from a script until there are no entities left.</p>
"
118350,"<p>I believe that when IronPython 2.0 is complete, it will have LINQ support (see <a href=""http://groups.google.com/group/ironpy/browse_thread/thread/eb6b9eb2241cc68e"" rel=""nofollow"">this thread</a> for some example discussion).  Right now you should be able to write something like:</p>

<pre><code>Queryable.Select(Queryable.Where(someInputSequence, somePredicate), someFuncThatReturnsTheSequenceElement)
</code></pre>

<p>Something better might have made it into IronPython 2.0b4 - there's a lot of <a href=""http://ironpython-urls.blogspot.com/2008/09/dlr-namespace-change-fire-drill.html"" rel=""nofollow"">current discussion</a> about how naming conflicts were handled.</p>
"
261723,"<p>I have looked at software protection in general for my own projects and the general philosophy is that complete protection is impossible.  The only thing that you can hope to achieve is to add protection to a level that would cost your customer more to bypass than it would to purchase another license.</p>

<p>With that said I was just checking google for python obsfucation and not turning up a lot of anything.  In a .Net solution, obsfucation would be a first approach to your problem on a windows platform, but I am not sure if anyone has solutions on Linux that work with Mono.  </p>

<p>The next thing would be to write your code in a compiled language, or if you really want to go all the way, then in assembler.  A stripped out executable would be a lot harder to decompile than an interpreted language.</p>

<p>It all comes down to tradeoffs.  On one end you have ease of software development in python, in which it is also very hard to hide secrets.  On the other end you have software written in assembler which is much harder to write, but is much easier to hide secrets.</p>

<p>Your boss has to choose a point somewhere along that continuum that supports his requirements.  And then he has to give you the tools and time so you can build what he wants.   However my bet is that he will object to real development costs versus potential monetary losses.</p>
"
261839,"<p>All PyGTK extensions use autotools, so if the PyGTK aspects don't kill the whole thing for you, it might be worth having a look at the <a href=""http://svn.gnome.org/viewvc/pygtk/trunk/"" rel=""nofollow"">PyGTK source code</a>. Additionally, <a href=""http://bazaar.launchpad.net/~poppler-python/poppler-python/trunk/files"" rel=""nofollow"">here is one I wrote which is more simple.</a></p>
"
295469,"<p>The simplest way is to change your function so that it doesn't necessarily use urllib.urlopen.  Let's say this is your original function:</p>

<pre><code>def my_grabber(arg1, arg2, arg3):
    # .. do some stuff ..
    url = make_url_somehow()
    data = urllib.urlopen(url)
    # .. do something with data ..
    return answer
</code></pre>

<p>Add an argument which is the function to use to open the URL.  Then you can provide a mock function to do whatever you need:</p>

<pre><code>def my_grabber(arg1, arg2, arg3, urlopen=urllib.urlopen):
    # .. do some stuff ..
    url = make_url_somehow()
    data = urlopen(url)
    # .. do something with data ..
    return answer

def test_my_grabber():
    my_grabber(arg1, arg2, arg3, urlopen=my_mock_open)
</code></pre>
"
295560,"<p>Another issue that the other comments haven't addressed yet is the empty string, which is obviously not a valid filename. You can also end up with an empty string from stripping too many characters.</p>

<p>What with the Windows reserved filenames and issues with dots, the safest answer to the question âhow do I normalise a valid filename from arbitrary user input?â is âdon't even bother tryâ: if you can find any other way to avoid it (eg. using integer primary keys from a database as filenames), do that.</p>

<p>If you must, and you really need to allow spaces and â.â for file extensions as part of the name, try something like:</p>

<pre><code>import re
badchars= re.compile(r'[^A-Za-z0-9_. ]+|^\.|\.$|^ | $|^$')
badnames= re.compile(r'(aux|com[1-9]|con|lpt[1-9]|prn)(\.|$)')

def makeName(s):
    name= badchars.sub('_', s)
    if badnames.match(name):
        name= '_'+name
    return name
</code></pre>

<p>Even this can't be guaranteed right especially on unexpected OSsâââfor example RISC OS hates spaces and uses â.â as a directory separator.</p>
"
78072,"<pre><code>from BeautifulSoup import BeautifulSoup 

soup = BeautifulSoup(your_html)
for a in soup.findAll('a', href=True):
    # do something with `a` w/ href attribute
    print a['href']
</code></pre>
"
296528,"<p>It sounds like what you really want is a temp file:
<a href=""http://docs.python.org/library/tempfile.html"" rel=""nofollow"">http://docs.python.org/library/tempfile.html</a></p>
"
82117,"<p>You may be interested in <a href=""http://codespeak.net/lxml/"" rel=""nofollow"">lxml</a>. It is a separate package and has C components, but is the fastest. It has also very nice API, allowing you to easily list links in HTML documents, or list forms, sanitize HTML, and more. It also has capabilities to parse not well-formed HTML (it's configurable).</p>
"
82717,"<p>James Bennett has an <a href=""http://www.b-list.org/weblog/2007/nov/29/django-blog"" rel=""nofollow"">interesting take</a> on this question:</p>

<blockquote>
  <p>âwhere can I find a good Django-powered blogging applicationâ is probably at the top of the frequently-asked questions list both on django-users and in the IRC; part of this is simply that, right now, there is no âdefinitiveâ Django blogging application; there are a bunch of them available if you go looking, but youâre not likely to get anyone to recommend one of them as âtheâ Django blogging app (unless the person doing the recommending happens to be the author of one of them). </p>
</blockquote>

<p>The <a href=""http://www.b-list.org/weblog/2007/nov/29/django-blog"" rel=""nofollow"">blog entry</a> also has a list.</p>
"
342356,"<p>Python does support Decimal creation from a float. You just cast it as a string first. But the precision loss doesn't occur with string conversion. The float you are converting doesn't have that kind of precision in the first place. (Otherwise you wouldn't need Decimal)</p>

<p>I think the confusion here is that <em>we can create float literals in decimal format</em>, but as soon as the interpreter consumes that literal the inner representation becomes a floating point number.</p>
"
342442,"<p>""explicitly tested against App1,2,3 every time there was a new library"" actually isn't that onerous.</p>

<p>Two things.</p>

<ul>
<li><p>You need a formal set of API unit tests that the library <em>must</em> pass.  This is just the API, not every nuance of functionality.  If this passes, then your changes are good to go.  If this fails, your changes broke the API.</p></li>
<li><p>You also need a set of unit tests for functionality, separate from the API.  This is bigger, and might be classified as ""onerous"".</p></li>
</ul>

<p>Once you start unit testing, you get addicted.  Once you have reasonably complete tests, this problem is easy to manage.</p>
"
342713,"<p>I didn't experiment with multi-processing in 2.6 yet, but I played a lot with pyprocessing (as it was called in 2.5).</p>

<p>I can see that you are looking for a number of processes with each spawning a set of threads respectively.</p>

<p>Since you are using the multiprocessing module, I will suggest use multi process and not multi thread approach, you will hit less problems like deadlocks, etc.</p>

<p>Create a queue object. <a href=""http://pyprocessing.berlios.de/doc/queue-objects.html"" rel=""nofollow"">http://pyprocessing.berlios.de/doc/queue-objects.html</a></p>

<p>For creating a multi process environment use a pool: <a href=""http://pyprocessing.berlios.de/doc/pool-objects.html"" rel=""nofollow"">http://pyprocessing.berlios.de/doc/pool-objects.html</a> which will manage the worker processes for you. You can then apply asynchronous/synchronous to the workers and can also add a callback for each worker if required. But remember call back is a common code block and it should return immediately (as mentioned in documentation)</p>

<p>Some additional info:
If required create a manager <a href=""http://pyprocessing.berlios.de/doc/manager-objects.html"" rel=""nofollow"">http://pyprocessing.berlios.de/doc/manager-objects.html</a> to manage the the access to the queue object. You will have to make the queue object shared for this. But the advantage is that, once shared and managed you can access this shared queue all over the network by creating proxy objects. This will enable you to call methods of a centralized shared queue object as (apparently) native  methods on any network node.</p>

<p><strong>here is a code example from the documentation</strong></p>

<p><em>It is possible to run a manager server on one machine and have clients use it from other machines (assuming that the firewalls involved allow it).
Running the following commands creates a server for a shared queue which remote clients can use:</em></p>

<pre><code>&gt;&gt;&gt; from processing.managers import BaseManager, CreatorMethod
&gt;&gt;&gt; import Queue
&gt;&gt;&gt; queue = Queue.Queue()
&gt;&gt;&gt; class QueueManager(BaseManager):
...     get_proxy = CreatorMethod(callable=lambda:queue, typeid='get_proxy')
...
&gt;&gt;&gt; m = QueueManager(address=('foo.bar.org', 50000), authkey='none')
&gt;&gt;&gt; m.serve_forever()
</code></pre>

<p><em>One client can access the server as follows:</em></p>

<pre><code>&gt;&gt;&gt; from processing.managers import BaseManager, CreatorMethod
&gt;&gt;&gt; class QueueManager(BaseManager):
...     get_proxy = CreatorMethod(typeid='get_proxy')
...
&gt;&gt;&gt; m = QueueManager.from_address(address=('foo.bar.org', 50000), authkey='none')
&gt;&gt;&gt; queue = m.get_proxy()
&gt;&gt;&gt; queue.put('hello')
</code></pre>

<p>If you insist on safe threaded stuff, PEP371 (multiprocessing) references this <a href=""http://code.google.com/p/python-safethread/"" rel=""nofollow"">http://code.google.com/p/python-safethread/</a></p>
"
13959,"<p>I had to turn off the ""Silence terminal bell"" option in my active Terminal Profile in iTerm for <code>print('\a')</code> to work. It seemed to work fine by default in Terminal.</p>

<p>You can also use the Mac module <code>Carbon.Snd</code> to play the system beep:</p>

<pre><code>&gt;&gt;&gt; import Carbon.Snd
&gt;&gt;&gt; Carbon.Snd.SysBeep(1)
&gt;&gt;&gt;
</code></pre>

<p>The Carbon modules don't have any documentation, so I had to use <code>help(Carbon.Snd)</code> to see what functions were available. It seems to be a direct interface onto Carbon, so the docs on Apple Developer Connection probably help.</p>
"
191899,"<p>Appended is a not hugely-elegant, but working solution - it uses feedparser to parse the feed, you can then modify the entries, and it passes the data to PyRSS2Gen. It preserves <em>most</em> of the feed info (the important bits anyway, there are somethings that will need extra conversion, the parsed_feed['feed']['image'] element for example).</p>

<p>I put this together as part of a <a href=""http://github.com/dbr/py-feedproc/tree/master/"" rel=""nofollow"">little feed-processing framework</a> I'm fiddling about with.. It may be of some use (it's pretty short - should be less than 100 lines of code in total when done..)</p>

<pre><code>#!/usr/bin/env python
import datetime

# http://www.feedparser.org/
import feedparser
# http://www.dalkescientific.com/Python/PyRSS2Gen.html
import PyRSS2Gen

# Get the data
parsed_feed = feedparser.parse('http://reddit.com/.rss')

# Modify the parsed_feed data here

items = [
    PyRSS2Gen.RSSItem(
        title = x.title,
        link = x.link,
        description = x.summary,
        guid = x.link,
        pubDate = datetime.datetime(
            x.modified_parsed[0],
            x.modified_parsed[1],
            x.modified_parsed[2],
            x.modified_parsed[3],
            x.modified_parsed[4],
            x.modified_parsed[5])
        )

    for x in parsed_feed.entries
]

# make the RSS2 object
# Try to grab the title, link, language etc from the orig feed

rss = PyRSS2Gen.RSS2(
    title = parsed_feed['feed'].get(""title""),
    link = parsed_feed['feed'].get(""link""),
    description = parsed_feed['feed'].get(""description""),

    language = parsed_feed['feed'].get(""language""),
    copyright = parsed_feed['feed'].get(""copyright""),
    managingEditor = parsed_feed['feed'].get(""managingEditor""),
    webMaster = parsed_feed['feed'].get(""webMaster""),
    pubDate = parsed_feed['feed'].get(""pubDate""),
    lastBuildDate = parsed_feed['feed'].get(""lastBuildDate""),

    categories = parsed_feed['feed'].get(""categories""),
    generator = parsed_feed['feed'].get(""generator""),
    docs = parsed_feed['feed'].get(""docs""),

    items = items
)


print rss.to_xml()
</code></pre>
"
192032,"<p>I'm not a python expert but after a brief perusing of the <a href=""http://www.python.org/dev/peps/pep-0249/"" rel=""nofollow"">DB-API 2.0</a> I believe you should use the ""callproc"" method of the cursor like this:</p>

<pre><code>cur.callproc('my_stored_proc', (first_param, second_param, an_out_param))
</code></pre>

<p>Then you'll have the result in the returned value (of the out param) in the ""an_out_param"" variable.</p>
"
79094,"<p>There is really no benefit to doing this, except if you are dealing with metaclasses.</p>

<p>the class: suite really isn't what you think it is. It is a weird scope, and it does strange things. It really doesn't even make a class! It is just a way of collecting some variables - the name of the class, the bases, a little dictionary of attributes, and a metaclass.</p>

<p>The name, the dictionary and the bases are all passed to the function that is the metaclass, and then it is assigned to the variable 'name' in the scope where the class: suite was.</p>

<p>What you can gain by messing with metaclasses, and indeed by nesting classes within your stock standard classes, is harder to read code, harder to understand code, and odd errors that are terribly difficult to understand without being intimately familiar with why the 'class' scope is entirely different to any other python scope.</p>
"
263761,"<p>Nothing to add to the other answers, <em>besides</em> that if you choose python you <strong>must</strong> use something like <a href=""http://pypi.python.org/pypi/pylint"" rel=""nofollow"">pylint</a> which nobody mentioned so far.</p>
"
263859,"<p>Instead of <code>chmod u+s</code>ing the shutdown command, allowing passwordless sudo access to that command would be better..</p>

<p>As for allowing shutdown at the end of the script, I suppose you could run the entire script with sudo, then drop privileges to the initial user at the start of the script?</p>
"
118181,"<p>I would suggest that using a regex for decimal range validation is not necessarily the correct answer for this problem. This is far more readable:</p>

<pre><code>def valid_ip(s):
    m = re.match(r""(\d+)\.(\d+)\.(\d+)\.(\d+)$"", s)
    if m is None:
        return False
    parts = [int(m.group(1+x)) for x in range(4)]
    if max(parts) &gt; 255:
        return False
    return True
</code></pre>
"
295147,"<p>You could use the re.sub() method to replace anything not ""filelike"". But in effect, every character could be valid; so there are no prebuilt functions (I believe), to get it done.</p>

<pre><code>import re

str = ""File!name?.txt""
f = open(os.path.join(""/tmp"", re.sub('[^-a-zA-Z0-9_.() ]+', '', str))
</code></pre>

<p>Would result in a filehandle to /tmp/filename.txt.</p>
"
263440,"<h2>What do you like about it?</h2>

<ul>
<li>the templates, specifically the inheritance feature, was amazing after dealing with jsps</li>
<li>not having to write sql anymore</li>
</ul>

<h2>What made you switch/use it?</h2>

<p>A friend had been following its progress before it was publicly released, and I've been using it for personal projects ever since.</p>

<h2>What features you would like it to have that aren't there?</h2>

<p>I realize this isn't a trivial problem, and I think Google summer of codes have been spent on this, but I would like to see better ways to evolve the db (which rails seems to do a pretty good job of).</p>

<h2>What would make you switch to it?</h2>

<p>I already use it at home, and I don't make those decisions at work.</p>

<h2>How fast is it in production?</h2>

<p>I've never run into issues, though for the most part django seems to stay out of the way, so performance seems based more on python or the db.</p>

<h2>How hard is it to master it? </h2>

<p>The documentation is pretty amazing, and enough people use it that answers are often available when that doesn't help. Additionally, when I've had to go into the source code, its been clean and documented as well, so I would say its easier to master than most frameworks, web based or otherwise.</p>
"
263583,"<p>From what i think i've understood you have two options</p>

<p>you could either use an XML style ""markup"" to let them define entities and their groupings, but that may not be best.</p>

<p>Your alternatives are yes, yoou could embedd a language, but do you really need to, wouldnt that be overkill, and how can you control it?</p>

<p>If you only need really simple syntax then perhaps write your own language. Its actually not that hard to create a simple interpreter, as long as you have a strict, unambiguous language. Have a look for some examples of compilers in whatever youre using, c#?</p>

<p>I wrote a very simple interperter in java at uni, it wasnt as hard as you'd think.</p>
"
294550,"<p>See <a href=""http://homepage.mac.com/s_lott/iblog/architecture/C20071019092637/E20080830091128/index.html"" rel=""nofollow"">Tooling to Build Test Cases</a>.</p>

<p>It's not clear what your problem is.</p>

<p>If you question is ""how do I handle all the special cases in my generating classes?"" then here's some advice.  If your question is something else, then update your question.</p>

<ol>
<li><p>Use a template generator.  <a href=""http://www.makotemplates.org/"" rel=""nofollow"">Mako</a>, for example, will make your life simpler.</p>

<p>Write an example of your result.  Replace parts with <code>${thing}</code> placeholders.  Since you started with something that worked, turning it into a template is easy.</p></li>
<li><p>When generating code in another language, you need to have all of the class definitions in other other language designed for flexible assembly.  You want to generate as little fresh, new code as possible.  You want to tweak and customize a bit, but you don't want to generate a lot of stuff from scratch.</p></li>
<li><p>Special cases are best handled with ordinary polymorphism.  Separate subclasses of a common superclass can implement the various exceptions and special cases.  Really complex situations are handled well by the <strong>Strategy</strong> design pattern.  </p>

<p>In essence, you have Python classes that represent the real-world objects.  Those classes have attributes that can be fit into a C++ template to generate the C++ version of those objects. </p></li>
</ol>
"
116194,"<p>A docx is just a zip archive with lots of files inside. Maybe you can look at some of the contents of those files? Other than that you probably have to find a lib that understands the word format so that you can filter out things you're not interested in.</p>

<p>A second choice would be to interop with word and do the search through it.</p>
"
114717,"<p>My company uses the free InnoSetup tool.  It is a moderately complex program that has tons of flexibility for building installers for windows.  I believe that it creates .exe and not .msi files, however.  InnoSetup is not python specific but we have created an installer for one of our products that installs python along with dependencies to locations specified by the user at install time.</p>
"
292213,"<p>I don't think your regex is doing what you want.</p>

<pre><code>&lt;a\s*href=['|""](http:\/\/(.*?)\S['|""]&gt;
</code></pre>

<p>This captures anything non-greedily from http:// up to the first non-space character before a quote, single quote, or pipe.  For that matter, I'm not sure how it parses, as it doesn't seem to have enough close parens.</p>

<p>If you are trying to capture the href, you might try something like this:</p>

<pre><code>&lt;a .*?+href=['""](http:\/\/.*?)['""].*?&gt;
</code></pre>

<p>This uses the .*? (non-greedy match anything) to allow for other attributes (target, title, etc.).  It matches an href that begins and ends with either a single or double quote (it does not distinguish, and allows the href to open with one and close with the other).</p>
"
84205,"<p>This way fits in better with the rest of the language. The convention in python is that you add <code>__foo__</code> special methods to objects to make them have certain capabilities (rather than e.g. deriving from a specific base class). For example, an object is </p>

<ul>
<li>callable if it has a <code>__call__</code> method  </li>
<li>iterable if it has an <code>__iter__</code> method, </li>
<li>supports access with [] if it has <code>__getitem__</code> and <code>__setitem__</code>. </li>
<li>...</li>
</ul>

<p>One of these special methods is <code>__len__</code> which makes it have a length accessible with <code>len()</code>.</p>
"
180617,"<pre><code>l = [83, 84, 65, 67, 75]

s = """".join([chr(c) for c in l])

print s
</code></pre>
"
181001,"<p>Have you had a look at the <a href=""http://docs.python.org/library/re.html#matching-vs-searching"" rel=""nofollow"">documentation</a>?</p>

<blockquote>
  <p>Python offers two different primitive operations based on regular expressions: match checks for a match only at the beginning of the string, while search checks for a match anywhere in the string (this is what Perl does by default).</p>
</blockquote>
"
343284,"<p>I'm guessing that this line:</p>

<pre><code>digester.update(self._options.get('code'))
</code></pre>

<p>should become:</p>

<pre><code>digester.update(self._options.get('code').encode(""utf-8""))
</code></pre>

<p>The actual desired encoding could be different in your case, but UTF-8 will work in all cases.</p>
"
11443,"<p>Recall that ""unit testing"" is only one kind of testing.  You should be able to unit test the <strong>internal</strong> pieces of your code generator.  What you're really looking at here is system level testing (a.k.a. regression testing).  It's not just semantics... there are different mindsets, approaches, expectations, etc.  It's certainly more work, but you probably need to bite the bullet and set up an end-to-end regression test suite: fixed C++ files -> SWIG interfaces -> python modules -> known output.  You really want to check the known input (fixed C++ code) against expected output (what comes out of the final Python program).  Checking the code generator results directly would be like diffing object files...</p>
"
13435,"<p>The increment in the original <code>foreach</code> loop will not affect the contents of the array, the only way to do this remains a <code>for</code> loop:</p>

<pre><code>for(int i = 0; i &lt; intArray.Length; ++i)
{
    if(intArray[i] &gt; 3) ++intArray[i];
}
</code></pre>

<p>Linq is not intended to modify existing collections or sequences. It creates new sequences based on existing ones. It is possible to achieve the above code using Linq, though it is slightly against its purposes:</p>

<pre><code>var newArray1 = from i in intArray select ((i &gt; 3) ? (i + 1) : (i));
var newArray2 = intArray.Select(i =&gt; (i &gt; 3) ? (i + 1) : (i));
</code></pre>

<p>Using <code>where</code> (or equivalent), as shown in some of the other answers, will exclude any values less than or equal to 3 from the resulting sequence.</p>

<pre><code>var intArray = new int[] { 10, 1, 20, 2 };
var newArray = from i in intArray where i &gt; 3 select i + 1;
// newArray == { 11, 21 }
</code></pre>

<p>There is a <code>ForEach</code> method on arrays that will allow you to use a lambda function instead of a <code>foreach</code> block, though for anything more than a method call I would stick with <code>foreach</code>.</p>

<pre><code>intArray.ForEach(i =&gt; DoSomething(i));
</code></pre>
"
265746,"<p>Regarding your second question, not all scripting languages use this, but it only makes them less powerful. For instance, the threads in Ruby are <a href=""http://en.wikipedia.org/wiki/Green_threads"" rel=""nofollow"">green</a> and not native.</p>

<p>In Python, the threads are native and the GIL only prevents them from running on different cores.</p>

<p>In Perl, the threads are even worse. They just copy the whole interpreter, and are far from being as usable as in Python.</p>
"
265839,"<p>The problem is that because you're allowing spaces in filenames and using spaces to separate fields, the solution is ambiguous.  You either need to use a different field separator character that can't appear in filenames, or use some other method of representing filenames with spaces in them, e.g. putting them in quotation marks.</p>
"
266620,"<p>What you want to do is very similar to what is supported by xrdb. They only support a fairly minimal notion of globbing however.</p>

<p>Internally you can implement a larger family of regular languages than theirs by storing your regular expressions as a character trie. </p>

<ul>
<li>single characters just become trie nodes. </li>
<li>.'s become wildcard insertions covering all children of the current trie node. </li>
<li>*'s become back links in the trie to node at the start of the previous item. </li>
<li>[a-z] ranges insert the same subsequent child nodes repeatedly under each of the characters in the range. With care, while inserts/updates may be somewhat expensive the search can be linear in the size of the string. With some placeholder stuff the common combinatorial explosion cases can be kept under control. </li>
<li>(foo)|(bar) nodes become multiple insertions</li>
</ul>

<p>This doesn't handle regexes that occur at arbitrary points in the string, but that can be modeled by wrapping your regex with .* on either side.</p>

<p>Perl has a couple of Text::Trie -like modules you can raid for ideas. (Heck I think I even wrote one of them way back when)</p>
"
293249,"<p>From the comments:</p>

<pre><code>import msvcrt # built-in module

def kbfunc():
    return ord(msvcrt.getch()) if msvcrt.kbhit() else 0
</code></pre>

<p><hr /></p>

<p>Thanks for the help.  I ended up writing a C DLL called PyKeyboardAccess.dll and accessing the crt conio functions, exporting this routine:</p>

<pre><code>#include &lt;conio.h&gt;

int kb_inkey () {
   int rc;
   int key;

   key = _kbhit();

   if (key == 0) {
      rc = 0;
   } else {
      rc = _getch();
   }

   return rc;
}
</code></pre>

<p>And I access it in python using the ctypes module (built into python 2.5):</p>

<pre><code>import ctypes
import time

#
# first, load the DLL
#


try:
    kblib = ctypes.CDLL(""PyKeyboardAccess.dll"")
except:
    raise (""Error Loading PyKeyboardAccess.dll"")


#
# now, find our function
#

try:
    kbfunc = kblib.kb_inkey
except:
    raise (""Could not find the kb_inkey function in the dll!"")


#
# Ok, now let's demo the capability
#

while 1:
    x = kbfunc()

    if x != 0:
        print ""Got key: %d"" % x
    else:
        time.sleep(.01)
</code></pre>
"
293333,"<p>You'll have to show your models to get real help, but it looks like your Idea table doesn't have a user_id column?  Did you modify the SQL table structure?</p>
"
264579,"<p>What are x_past and x_present? I don't know much Python, but from a .NET/Java perspective, if they're references to some data structure (a map or whatever) then making them references to the same object (as you do at the start) will mean that any changes made through one variable will be visible through the other. It sounds like you need to take a copy of the data structure instead of just doing a reference assignment. Does the data structure you're working with have any kind of ""clone"" functionality available?</p>

<p>As I say though, I don't know much Python so this could be totally wrong...</p>
"
294335,"<p>You should use the call_user_func_array</p>

<pre><code>call_user_func_array(array(CLASS, METHOD), array(arg1, arg2, ....))
</code></pre>

<p><a href=""http://www.php.net/call_user_func_array"" rel=""nofollow"">http://www.php.net/call_user_func_array</a></p>

<p>or use the reflection api <a href=""http://www.php.net/oop5.reflection"" rel=""nofollow"">http://www.php.net/oop5.reflection</a></p>
"
288983,"<p>AFIK <a href=""http://en.wikipedia.org/wiki/PCRE"" rel=""nofollow"">PCRE</a> has named group capturing as:</p>

<pre><code>(?'NAME'pattern)
(?&lt;NAME&gt;pattern)
</code></pre>

<p>You can find info <a href=""http://perldoc.perl.org/perlre.html#Extended-Patterns"" rel=""nofollow"">here</a>.</p>
"
273543,"<p>C# and the .NET framework broke compatibility between versions 1.0 and 1.1 as well as between 1.1 and 2.0.  Running applications in different versions required having multiple versions of the .NET runtime installed.</p>

<p>At least they did include an upgrade wizard to upgrade source from one version to the next (it worked for most of our code).</p>
"
272163,"<p>Perl has several ways to use other languages. Look at the <a href=""http://search.cpan.org/perldoc?Inline"" rel=""nofollow"">Inline::<em></a> family of modules on CPAN. Following the advice from others in this question, I'd write the whole thing in a single dynamic language (Perl, Python, Ruby, etc) and then optimize the bits that need it. With Perl and Inline::</em> you can optimize in C, C++, or Java. Or you could look at <a href=""http://search.cpan.org/perldoc?AI::Prolog"" rel=""nofollow"">AI::Prolog</a> which allows you to embed Prolog for AI/Logic programming.</p>
"
272470,"<p>A site I did last year was concerned that usernames/passwords might be posted to a forum. I dealt with this by adding a model and a check to the login view that looked at how many unique IPs the name had been used from in the last X hours. I gave the site admins two values in settings.py to adjust the number of hours and the number of unique IPs. If a name was being ""overused"" it was blocked for logins from new IPs until enough time had passed to fall below the threshold.</p>

<p>Much to their surprise, they have had only one name trigger the blocking in the last year and that turned out to be the company president who was on a business trip and kept logging in from new locations.</p>

<p>Ps. The code is straightforward. Email me at peter at techbuddy dot us if you would like it.</p>
"
112587,"<pre><code>egrep `read input &amp;&amp; echo ^$input` /usr/share/dict/words
</code></pre>

<p>oh I didn't see the Python edit, here is the same thing in python</p>

<pre><code>my_input = raw_input(""Enter beginning of word: "")
my_words = open(""/usr/share/dict/words"").readlines()
my_found_words = [x for x in my_words if x[0:len(my_input)] == my_input]
</code></pre>
"
112598,"<p>If you really want speed, use a trie/automaton. However, something that will be faster than simply scanning the whole list, given that the list of words is sorted:</p>

<pre><code>from itertools import takewhile, islice
import bisect

def prefixes(words, pfx):
    return list(
             takewhile(lambda x: x.startswith(pfx), 
                       islice(words, 
                              bisect.bisect_right(words, pfx), 
                              len(words)))
</code></pre>

<p>Note that an automaton is O(1) with regard to the size of your dictionary, while this algorithm is O(log(m)) and then O(n) with regard to the number of strings that actually start with the prefix, while the full scan is O(m), with n &lt;&lt; m.</p>
"
112860,"<p>It's not possible to build an entire page using just <code>genshi.builder.tag</code> -- you would need to perform some surgery on the resulting stream to insert the doctype. Besides, the resulting code would look horrific. The recommended way to use Genshi is to use a separate template file, generate a stream from it, and then render that stream to the output type you want.</p>

<p><code>genshi.builder.tag</code> is mostly useful for when you need to generate simple markup from within Python, such as when you're building a form or doing some sort of logic-heavy modification of the output.</p>

<p>See documentation for:</p>

<ul>
<li><a href=""http://genshi.edgewall.org/wiki/Documentation/0.5.x/templates.html"" rel=""nofollow"">Creating and using templates</a></li>
<li><a href=""http://genshi.edgewall.org/wiki/Documentation/0.5.x/xml-templates.html"" rel=""nofollow"">The XML-based template language</a></li>
<li><a href=""http://genshi.edgewall.org/wiki/ApiDocs/0.5.x/genshi.builder"" rel=""nofollow""><code>genshi.builder</code> API docs</a></li>
</ul>

<p>If you really want to generate a full document using only <code>builder.tag</code>, this (completely untested) code could be a good starting point:</p>

<pre><code>from itertools import chain
from genshi.core import DOCTYPE, Stream
from genshi.output import DocType
from genshi.builder import tag as t

# Build the page using `genshi.builder.tag`
page = t.html (t.head (t.title (""Hello world!"")), t.body (t.div (""Body text"")))

# Convert the page element into a stream
stream = page.generate ()

# Chain the page stream with a stream containing only an HTML4 doctype declaration
stream = Stream (chain ([(DOCTYPE, DocType.get ('html4'), None)], stream))

# Convert the stream to text using the ""html"" renderer (could also be xml, xhtml, text, etc)
text = stream.render ('html')
</code></pre>

<p>The resulting page will have no whitespace in it -- it'll look normal, but you'll have a hard time reading the source code because it will be entirely on one line. Implementing appropriate filters to add whitespace is left as an exercise to the reader.</p>
"
112982,"<p>Functionally, the two are the same; <code>open</code> will call <code>file</code> anyway, so currently the difference is a matter of style. The <a href=""http://docs.python.org/lib/built-in-funcs.html"" rel=""nofollow"">Python docs</a> recommend using <code>open</code>. </p>

<blockquote>
  <p>When opening a file, it's preferable to use open() instead of invoking the file constructor directly. </p>
</blockquote>

<p>The reason is that in future versions they is not guaranteed to be the same (<code>open</code> will become a factory function, which returns objects of  different types depending on the path it's opening).</p>
"
288568,"<p>Another option - start a debugger where the test fails.</p>

<p>Try running your tests with Testoob (it will run your unittest suite without changes), and you can use the '--debug' command line switch to open a debugger when a test fails.</p>

<p>Here's a terminal session on windows:</p>

<pre><code>C:\work&gt; testoob tests.py --debug
F
Debugging for failure in test: test_foo (tests.MyTests.test_foo)
&gt; c:\python25\lib\unittest.py(334)failUnlessEqual()
-&gt; (msg or '%r != %r' % (first, second))
(Pdb) up
&gt; c:\work\tests.py(6)test_foo()
-&gt; self.assertEqual(x, y)
(Pdb) l
  1     from unittest import TestCase
  2     class MyTests(TestCase):
  3       def test_foo(self):
  4         x = 1
  5         y = 2
  6  -&gt;     self.assertEqual(x, y)
[EOF]
(Pdb)
</code></pre>
"
289723,"<p>I haven't tried this, but here's a link I found:</p>

<p><a href=""http://www.py2exe.org/index.cgi/CustomIcons"" rel=""nofollow"">http://www.py2exe.org/index.cgi/CustomIcons</a></p>
"
86050,"<p>The web service is the best way, but there are some caveats:</p>

<ol>
<li>You should always ask the user if it is ok to send error feedback information.</li>
<li>You should be prepared to fail gracefully if there are network errors. Don't let a failure to report a crash impede recovery!</li>
<li>You should avoid including user identifying or sensitive information unless the user knows (see #1) and you should either use SSL or otherwise protect it. Some jurisdictions impose burdens on you that you might not want to deal with, so it's best to simply not save such information.</li>
<li>Like any web service, make sure your service is not exploitable by miscreants.</li>
</ol>
"
87048,"<p>If you want to go big, choose Django and you are set. But if you want just to learn, roll your own framework using already mentioned <a href=""http://pythonpaste.org/webob/"" rel=""nofollow"">WebOb</a> - this can be really fun and I am sure you'll learn much more (plus you can use components you like: template system, url dispatcher, database layer, sessions, et caetera).</p>

<p>In last 2 years I built few large sites using Django and all I can say, Django will fill 80% of your needs in 20% of time. Remaining 20% of work will take 80% of the time, no matter which framework you'd use.</p>
"
113558,"<p>I don't think there is a function in the standard library that does that by itself, but ""partition"" comes close</p>

<p>The best way is probably to use regular expressions (which is how I'd do this in any language!)</p>

<pre><code>import re
print re.split(r""(\s+)"", ""Your string here"")
</code></pre>
"
114250,"<p>method_two won't work because you're defining a member function but not telling it what the function is a member of. If you execute the last line you'll get:</p>

<pre><code>&gt;&gt;&gt; a_test.method_two()
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: method_two() takes no arguments (1 given)
</code></pre>

<p>If you're defining member functions for a class the first argument must always be 'self'.</p>
"
268369,"<p>The most recent discussion I've seen on it was in the <a href=""http://groups.google.com/group/django-developers/browse_thread/thread/9f0353fe0682b73"" rel=""nofollow"">Proposal: user-friendly API for multi-database support</a> django-developers thread, which also has an example of one way to use multiple databases using Managers in the original message.</p>
"
115985,"<p><a href=""http://en.wikipedia.org/wiki/Nohup"" rel=""nofollow"">nohup</a> </p>

<p><a href=""http://code.activestate.com/recipes/278731/"" rel=""nofollow"">Creating a daemon the Python way</a></p>
"
275333,"<p>I think you can't freely execute any allocated memory without first setting it as executable. I never tried myself, but you might want to check the unix function <code>mprotect</code>:</p>

<p><a href=""http://linux.about.com/library/cmd/blcmdl2_mprotect.htm"" rel=""nofollow"">http://linux.about.com/library/cmd/blcmdl2_mprotect.htm</a></p>

<p><code>VirtualProtect</code> seems to do the same thing on windows :</p>

<p><a href=""http://msdn.microsoft.com/en-us/library/aa366898"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/aa366898</a>(VS.85).aspx</p>
"
91238,"<p>If you want <a href=""http://en.wikipedia.org/wiki/Cryptographic_hash_function"" rel=""nofollow"">message digests</a> (cryptographic hashes), use the <a href=""http://docs.python.org/lib/module-hashlib.html"" rel=""nofollow"">hashlib</a> library. Here's an example (<a href=""http://ipython.scipy.org/"" rel=""nofollow"">IPython</a> session):</p>

<pre>
 In [1]: import hashlib

 In [2]: md = hashlib.sha256(open('/tmp/Calendar.xls', 'rb').read())

 In [3]: md.hexdigest()
 Out[3]: '8517f1eae176f1a20de78d879f81f23de503cfd6b8e4be1d798fb2342934b187'
</pre>
"
91249,"<p>You might try the following papers to get started with the concept of fingerprinting:</p>

<ul>
<li><a href=""http://theory.stanford.edu/~aiken/publications/papers/sigmod03.pdf"" rel=""nofollow"">Winnowing: Local Algorithms for Document Fingerprinting</a></li>
<li><a href=""http://www.cs.cmu.edu/afs/cs/user/nch/www/koala/main.html"" rel=""nofollow"">Scalable Document Fingerprinting</a></li>
</ul>
"
8332,"<p>You could try setting up your own python installation using <a href=""http://peak.telecommunity.com/DevCenter/EasyInstall#creating-a-virtual-python"" rel=""nofollow"">Virtual Python</a>.  Check out how to setup Django using it <a href=""http://forums.site5.com/showthread.php?t=10236"" rel=""nofollow"">here</a>.  That was written a long time ago, but it shows how I got MySQLdb setup without having root access or anything like it.  Once you've got the basics going, you can install any python library you want.</p>
"
189870,"<p><a href=""http://www.python.org/doc/2.5.2/lib/re-objects.html"" rel=""nofollow"">pattern</a></p>
"
345334,"<p>You should re-read the <a href=""http://docs.djangoproject.com/en/dev/topics/testing/"" rel=""nofollow"">documentation about Django's testing framework</a>, specifically the part about testing views (and forms) with <a href=""http://docs.djangoproject.com/en/dev/topics/testing/#module-django.test.client"" rel=""nofollow"">the test client</a>.</p>

<p>The test client acts as a simple web browser, and lets you make <code>GET</code> and <code>POST</code> requests to your Django views. You can read the response HTML or get the same <code>Context</code> object the template received. Your <code>Context</code> object should contain the actual <code>forms.Form</code> instance you're looking for.</p>

<p>As an example, if your view at the URL <code>/form/</code> passes the context <code>{'myform': forms.Form()}</code> to the template, you could get to it this way:</p>

<pre><code>from django.test.client import Client
c = Client()

# request the web page:
response = c.get('/form/')

# get the Form object:
form = response.context['myform']

form_data = form.cleaned_data
my_form_data = {} # put your filled-out data in here...
form_data.update(my_form_data)

# submit the form back to the web page:
new_form = forms.Form(form_data)
if new_form.is_valid():
    c.post('/form/', new_form.cleaned_data)
</code></pre>

<p>Hopefully that accomplishes what you want, without having to mess with parsing HTML.</p>

<p><strong>Edit</strong>: After I re-read the Django docs about Forms, it turns out that forms are immutable. That's okay, though, just create a new <code>Form</code> instance and submit that; I've changed my code example to match this.</p>
"
273994,"<p>Wouldn't VB6 to VB.net be the biggest example of this?  Or do you all consider them two separate languages?  </p>
"
110830,"<p>Note on the ""It would be best if i didn't have to add any extra fields to the model, but if i really have to i can.""  </p>

<p>Sorry, but order of information in a database is determined by the information itself:  you always have to add a column for ordering.  There's really no choice about that.  </p>

<p>Further, to retrieve things in this order, you'll need to specifically add <code>.order_by(x)</code> to your queries or add <code>ordering</code> to your model.</p>

<pre><code>class InOrder( models.Model ):
    position = models.IntegerField()
    data = models.TextField()
    class Meta:
        ordering = [ 'position' ]
</code></pre>

<p>Without the additional field ordering cannot happen.  It's one of the rules of relational databases.</p>
"
274403,"<p>Your first error 'chr() arg not in range(256)' probably means you have underflowed the value, because chr cannot take negative numbers. I don't know what the encryption algorithm is supposed to do when the inputcounter + 33 is more than the actual character representation, you'll have to check what to do in that case.</p>

<p>About the second error. you must decode() and not encode() a regular string object to get a proper representation of your data. encode() takes a unicode object (those starting with u') and generates a regular string to be output or written to a file. decode() takes a string object and generate a unicode object with the corresponding code points. This is done with the unicode() call when generated from a string object, you could also call a.decode('latin-1') instead.</p>

<pre><code>&gt;&gt;&gt; a = '\222\222\223\225'
&gt;&gt;&gt; u = unicode(a,'latin-1')
&gt;&gt;&gt; u
u'\x92\x92\x93\x95'
&gt;&gt;&gt; print u.encode('utf-8')
ÃÃÃÃ
&gt;&gt;&gt; print u.encode('utf-16')
Ã¿Ã¾
&gt;&gt;&gt; print u.encode('latin-1')

&gt;&gt;&gt; for c in u:
...   print chr(ord(c) - 3 - 0 -30)
...
q
q
r
t
&gt;&gt;&gt; for c in u:
...   print chr(ord(c) - 3 -200 -30)
...
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 2, in &lt;module&gt;
ValueError: chr() arg not in range(256)
</code></pre>
"
89666,"<p>Another solution to this would be to avoid writing a calculator like that altogether. Writing an RPN parser is much simpler, and doesn't have any of the ambiguity inherent in writing math with infix notation.</p>

<pre><code>import operator, math
calc_operands = {
    '+': (2, operator.add),
    '-': (2, operator.sub),
    '*': (2, operator.mul),
    '/': (2, operator.truediv),
    '//': (2, operator.div),
    '%': (2, operator.mod),
    '^': (2, operator.pow),
    '**': (2, math.pow),
    'abs': (1, operator.abs),
    'ceil': (1, math.ceil),
    'floor': (1, math.floor),
    'round': (2, round),
    'trunc': (1, int),
    'log': (2, math.log),
    'ln': (1, math.log),
    'pi': (0, lambda: math.pi),
    'e': (0, lambda: math.e),
}

def calculate(inp):
    stack = []
    for tok in inp.split():
        if tok in self.calc_operands:
            n_pops, func = self.calc_operands[tok]
            args = [stack.pop() for x in xrange(n_pops)]
            args.reverse()
            stack.append(func(*args))
        elif '.' in tok:
            stack.append(float(tok))
        else:
            stack.append(int(tok))
    if not stack:
        raise ValueError('no items on the stack.')
    return stack.pop()
    if stack:
        raise ValueError('%d item(s) left on the stack.' % len(stack))

calculate('24 38 * 32 / 2 +')
</code></pre>
"
90095,"<p>Parsing things with regular expressions works for regular languages. HTML is not a regular language, and the stuff you find on web pages these days is absolute crap. <a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">BeautifulSoup</a> deals with tag-soup HTML with browser-like heuristics so you get parsed HTML that resembles what a browser would display.</p>

<p>The downside is it's not very fast. There's <a href=""http://codespeak.net/lxml/"" rel=""nofollow"">lxml</a> for parsing well-formed html, but you should really use BeautifulSoup if you're not 100% certain that your input will always be well-formed.</p>
"
287886,"<p>The simple answer is to put your reusable code in your site-packages directory, which is in your sys.path.</p>

<p>You can also extend the search path by adding .pth files somewhere in your path.
See <a href=""https://docs.python.org/2/install/#modifying-python-s-search-path"" rel=""nofollow"">https://docs.python.org/2/install/#modifying-python-s-search-path</a> for more details</p>

<p>Oh, and python 2.6/3.0 adds support for PEP370, <a href=""http://docs.python.org/whatsnew/2.6.html#pep-370-per-user-site-packages-directory"" rel=""nofollow"">Per-user site-packages Directory</a></p>
"
88587,"<p>You generally shouldn't use <code>input()</code> in production code. If you want an int and then a float, try this:
<code><pre>
&gt;&gt;&gt; line = raw_input().split()
&gt;&gt;&gt; a = int(line[0])
&gt;&gt;&gt; b = float(line[1])
&gt;&gt;&gt; c = "" "".join(line[2:])
</pre></code></p>

<p>It all depends on what exactly you're trying to accomplish, but remember that readability counts. Obscure one-liners may seem cool but in the face of maintainability, try to choose something sensible :)</p>

<p>(P.S.: Don't forget to check for errors with try: ... except (ValueError, IndexError):)</p>
"
88639,"<p>Regular expressions:</p>

<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; splitter = re.compile(r'([+*/])')
&gt;&gt;&gt; splitter.split(""2+24*48/32"")
</code></pre>

<p>You can expand the regular expression to include any other characters you want to split on.</p>
"
88661,"<blockquote>
  <blockquote>
    <blockquote>
      <p>s = ""2+24*48/32""</p>
      
      <p>p = re.compile(r'(\W+)')</p>
      
      <p>p.split(s)</p>
    </blockquote>
  </blockquote>
</blockquote>
"
88369,"<p>How about this:</p>

<pre><code>class MyClass:
    def __init__(self, foo):
        if foo != 1:
            raise Exception(""foo is not equal to 1!"")

import unittest

class Tests(unittest.TestCase):
    def testSufficientArgs(self):
        foo = 1
        MyClass(foo)

    def testInsufficientArgs(self):
        foo = 2
        self.assertRaises(Exception, MyClass, foo)

if __name__ == '__main__':
    unittest.main()
</code></pre>
"
276322,"<p>Have you looked at pymedia? It looks as easy as this to play a WAV file:</p>

<pre><code>import time, wave, pymedia.audio.sound as sound
f= wave.open('YOUR FILE NAME', 'rb')
sampleRate= f.getframerate()
channels= f.getnchannels()
format= sound.AFMT_S16_LE
snd= sound.Output(sampleRate, channels, format)
s= f.readframes(300000)
snd.play(s)
while snd.isPlaying(): time.sleep(0.05)
</code></pre>

<p>Ref: <a href=""http://pymedia.org/tut/play_wav.html"" rel=""nofollow"">http://pymedia.org/tut/play_wav.html</a></p>

<p>Of course, you can have a look at the Python wiki under Audio (<a href=""http://wiki.python.org/moin/Audio/"" rel=""nofollow"">http://wiki.python.org/moin/Audio/</a>) for other libraries such as <a href=""https://docs.python.org/library/wave.html"" rel=""nofollow"">https://docs.python.org/library/wave.html</a> or again in Python's wiki under Game Libraries (<a href=""http://wiki.python.org/moin/PythonGameLibraries"" rel=""nofollow"">http://wiki.python.org/moin/PythonGameLibraries</a>) that will point you to bindings to OpenAL or Pygame that has sound modules.</p>

<p>And finally, although I don't know the limitations of pyaudio, your error message sounds more like the library is not able to find the default output device more than the device is in use by another process. Maybe have a look at what output device is returned by the <code>get_default_output_device_info</code> of pyaudio and compare it to whatever's your default setting in Ubuntu.</p>
"
107959,"<p>I usually start with Glade until I come to a point where it doesn't have the features I need, e.g. creating a wizard. As long as I'm using the standard widgets that Glade provides, there's really no reason to hand-code the GUI.</p>

<p>The more comfortable I become with how Glade formats the code, the better my hand-coding becomes. Not to mention, it's real easy to use Glade to make the underlying framework so you don't have to worry about all the initializations.</p>
"
276692,"<p>The easiest answer is to put the code you are trying to run inside a function like this</p>

<p>(inside your module that you are importing now):</p>

<pre><code>def main():
    # All the code that currently does work goes in here 
    # rather than just in the module
</code></pre>

<p>(The module that does the importing)</p>

<pre><code>import your_module #used to do the work

your_module.main() # now does the work (and you can call it multiple times)
# some other code
your_module.main() # do the work again
</code></pre>
"
285752,"<p>Operating system commands have exit codes.  Look for <a href=""http://steve-parker.org/sh/exitcodes.shtml"" rel=""nofollow"">linux exit codes</a> to see some material on this.  The shell uses the exit codes to decide if the program worked, had problems, or failed.  There are some efforts to create standard (or at least commonly-used) exit codes.  See this <a href=""http://www.linuxtopia.org/online_books/advanced_bash_scripting_guide/exitcodes.html"" rel=""nofollow"">Advanced Shell Script</a> posting.</p>
"
184107,"<p>I would go with Django, if you are comfortable with a Python solution. It's at version 1.0 now, and is maturing nicely, with a large user base and many contributors. Integrating jQuery is no problem, and I've done it without any issues.</p>

<p>The only thing is, as far as I can tell, Ruby is much more popular for web development nowadays, so it's easier to find Ruby developers. I get this impression from browsing recent job advertisements - there aren't that many for Python or Django. I don't know much about Merb, so I can't give a fair comparison.</p>

<p>I've done enough PHP to not recommend starting a new project with it.</p>
"
182195,"<p><strong>Bundle</strong>: go with Activestate's Python, which bundles many useful win32-related libraries. It has no version 2.6 yet, but most code you'll find online refers to 2.5 and lower anyway.</p>

<p><strong>Database</strong>: any of the popular open-source DBs are simple to configure. But as John already suggested, for simple beginning stuff just use SQLite which already comes bundled with Python.</p>

<p><strong>Web server</strong>: depends on the scale. You can configure Apache, yes, but for trying simple things the following is a quite complete web server in Python that will also serve CGI scripts writte in Python:</p>

<pre><code>import CGIHTTPServer
import BaseHTTPServer

class Handler(CGIHTTPServer.CGIHTTPRequestHandler):
    cgi_directories = [""/cgi""]

PORT = 9999

httpd = BaseHTTPServer.HTTPServer(("""", PORT), Handler)
print ""serving at port"", PORT
httpd.serve_forever()
</code></pre>
"
182441,"<p>Well, since you are using Python, you can just open a file and keep reading lines from it.</p>

<pre><code>f = open('file.log')
</code></pre>

<p>If the line read is <strong>not empty</strong>, you process it.</p>

<pre><code>line = f.readline()
if line:
    // Do what you want with the line
</code></pre>

<p>You may be missing that it is ok to keep calling <code>readline</code> at the EOF. It will just keep returning an empty string in this case. And when something is appended to the log file, the reading will continue from where it stopped, as you need.</p>

<p>If you are looking for a solution that uses events, or a particular library, please specify this in your question. Otherwise, I think this solution is just fine.</p>
"
346435,"<p><a href=""http://code.djangoproject.com/ticket/7680"" rel=""nofollow"">http://code.djangoproject.com/ticket/7680</a></p>

<p>parse_lookup has been removed. Not sure how this will affect tagging. Might want to do some searching.  </p>

<p>Update: apparently it's been fixed in the trunk version of tagging. Download the latest SVN build of tagging.</p>
"
8114,"<p>I seriously doubt you're going to find a markup language for GIU's that's <em>not</em> tied to a specific library.  For such a thing to exist, there would need to be a standardized GUI markup language, with several implementations.</p>
"
91564,"<p>As an alternative to using regex you could do it in Sets:</p>

<pre><code>from sets import Set

allowed_chars = Set('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-')

if Set(my_little_sting).issubset(allowed_chars):
    # your action
    print True
</code></pre>
"
286802,"<p>Simple answer: You work out the absolute path based on the environment.</p>

<p>What you really need is a few pointers. There are various bits of runtime and environment information that you can glean from various places in the standard library (and they certainly help me when I want to deploy an application on windows).</p>

<p>So, first some general things:</p>

<ol>
<li><code>os.path</code> - standard library module with lots of cross-platform path manipulation. Your best friend. ""Follow the os.path"" I once read in a book.</li>
<li><code>__file__</code> - The location of the current module.</li>
<li><code>sys.executable</code> - The location of the running Python.</li>
</ol>

<p>Now you can fairly much glean anything you want from these three sources. The functions from os.path will help you get around the tree:</p>

<ul>
<li><code>os.path.join('path1', 'path2')</code> - join path segments in a cross-platform way</li>
<li><code>os.path.expanduser('a_path')</code> - find the path <code>a_path</code> in the user's home directory</li>
<li><code>os.path.abspath('a_path')</code> - convert a relative path to an absolute path</li>
<li><code>os.path.dirname('a_path')</code> - get the directory that a path is in</li>
<li>many many more...</li>
</ul>

<p>So combining this, for example:</p>

<pre><code># script1.py
# Get the path to the script2.py in the same directory
import os
this_script_path = os.path.abspath(__file__)
this_dir_path = os.path.dirname(this_script_path)
script2_path = os.path.join(this_dir_path, 'script2.py')
print script2_path
</code></pre>

<p>And running it:</p>

<pre><code>ali@work:~/tmp$ python script1.py 
/home/ali/tmp/script2.py
</code></pre>

<p>Now for your specific case, it seems you are slightly confused between the concept of a ""working directory"" and the ""directory that a script is in"". These can be the same, but they can also be different. For example the ""working directory"" can be changed, and so functions that use it might be able to find what they are looking for sometimes but not others. <code>subprocess.Popen</code> is an example of this.</p>

<p>If you always pass paths absolutely, you will never get into working directory issues.</p>
"
287079,"<p>I'd caution against the decimal module for tasks like this.  Its purpose is really more dealing with real-world decimal numbers (eg. matching human bookkeeping practices), with finite precision, not performing exact precision math.  There are numbers not exactly representable in decimal just as there are in binary, and performing arithmetic in decimal is also much slower than alternatives.</p>

<p>Instead, if you want exact results you should use rational arithmetic.  These will represent numbers as a numerator/denomentator pair, so can exactly represent all rational numbers.  If you're only using multiplication and division (rather than operations like square roots that can result in irrational numbers), you will never lose precision.</p>

<p>As others have mentioned, python 2.6 will have a built-in rational type, though note that this isn't really a high-performing implementation - for speed you're better using libraries like <a href=""http://gmpy.sourceforge.net/"" rel=""nofollow"">gmpy</a>.  Just replace your calls to float() to gmpy.mpq() and your code should now give exact results (though you may want to format the results as floats for display purposes).</p>

<p>Here's a slightly tidied version of your code to load a matrix that will use gmpy rationals instead:</p>

<pre><code>def read_matrix(f):
    b,y = [], []
    for line in f:
        bits = line.split("","")
        b.append( map(gmpy.mpq, bits[:-1]) )
        y.append(gmpy.mpq(bits[-1]))
    return b,y
</code></pre>
"
108606,"<p>Try this:</p>

<pre><code>#!/usr/bin/env python

def get_all(D, k):
    yield k
    for ii in D.get(k, []):
        for jj in get_all(D, ii):
            yield jj

A = { 'a' : dict(b=1, c=1),
    'c' : dict(d=1),
    'd' : dict(e=1,f=1,g=1),
    'h' : dict(j=1)
    }

for ii in get_all(A,'a'):
    print ii
</code></pre>

<p>Gives me </p>

<pre>
steve@rei:~/code/tmp
$ python recur.py
a
c
d
e
g
f
b
</pre>
"
108816,"<p>The most common enum case is enumerated values that are part of a State or Strategy design pattern.  The enums are specific states or specific optional strategies to be used.  In this case, they're almost always part and parcel of some class definition</p>

<pre><code>class DoTheNeedful( object ):
    ONE_CHOICE = 1
    ANOTHER_CHOICE = 2 
    YET_ANOTHER = 99
    def __init__( self, aSelection ):
        assert aSelection in ( self.ONE_CHOICE, self.ANOTHER_CHOICE, self.YET_ANOTHER )
        self.selection= aSelection
</code></pre>

<p>Then, in a client of this class.</p>

<pre><code>dtn = DoTheNeeful( DoTheNeeful.ONE_CHOICE )
</code></pre>
"
287392,"<p>Have you looked at <a href=""http://www.boost.org/libs/wave"" rel=""nofollow"">Boost.Wave</a>?</p>
"
109127,"<p>Your example shows ""instance variables"",  not really class variables.</p>

<p>Look in <code>hi_obj.__class__.__dict__.items()</code> for the class variables, along with other other class members like member functions and the containing module.</p>

<pre><code>class Hi( object ):
    class_var = ( 23, 'skidoo' ) # class variable
    def __init__( self ):
        self.ii = ""foo"" # instance variable
        self.jj = ""bar""
</code></pre>

<p>Class variables are shared by all instances of the class.</p>
"
162707,"<p>Yes, provide a different API for getting different versions. Either a single methodcall for doing a retrieval of a particular item of a particular revision, or a methodcall for getting a 'view' of a particular revision, which you could then access like a normal dict, depending on whether such a 'view' would see much use. Or both, considering the dict-view solution would need some way to get a particular revision's item anyway:</p>

<pre><code>class RevisionView(object):
    def __init__(self, db, revid):
        self.db = db
        self.revid = revid
    def __getitem__(self, item):
        self.db.getrev(item, self.revid)
</code></pre>
"
4600,"<p>What you're looking for is <code>setattr</code> I believe.
Use this to set an attribute on an object.</p>

<pre><code>&gt;&gt;&gt; def printme(s): print repr(s)<br>&gt;&gt;&gt; class A: pass<br>&gt;&gt;&gt; setattr(A,'printme',printme)<br>&gt;&gt;&gt; a = A()<br>&gt;&gt;&gt; a.printme() # s becomes the implicit 'self' variable<br>&lt; __ main __ . A instance at 0xABCDEFG&gt;<br></code></pre>"
186937,"<p>I think you want the <a href=""http://docs.python.org/library/configparser.html#module-ConfigParser"" rel=""nofollow"">ConfigParser</a> module in the standard library. It reads and writes INI style files. The examples and documentation in the standard documentation I've linked to are very comprehensive.</p>
"
187011,"<p>If you are the only one that has access to the configuration file, you can use a simple, low-level solution. Keep the ""dictionary"" in a text file as a list of tuples (regexp, message) exactly as if it was a python expression:
<pre><code>[
(""file .* does not exist"", ""file not found""),
(""user .* not authorized"", ""authorization error"")
]
</pre></code>
In your code, load it, then eval it, and compile the regexps in the result:
<pre><code>f = open(""messages.py"")
messages = eval(f.read()) # caution: you must be <em>sure</em> of what's in that file
f.close()
messages = [(re.compile(r), m) for (r,m) in messages]
</pre></code>
and you end up with a list of tuples (compiled_regexp, message).</p>
"
280238,"<p>This will get you the contents of the message</p>

<pre><code>self.currentEmailParsedInstance.get_payload()
</code></pre>

<p>As for the text only part you will have to strip HTML on your own, for example using BeautifulSoup.</p>

<p>Check <a href=""http://www.python.org/doc/2.2.3/lib/module-email.Message.html"" rel=""nofollow"">this link</a> for more information about the Message class the Parser returns. If you mean getting the text part of messages containing both HTML and plain text version of themselves, you can specify an index to get_payload() to get the part you want.</p>

<p>I tried with a different MIME email because what you pasted seems malformed, hopefully it got malformed when you edited it.</p>

<pre><code>&gt;&gt;&gt; parser = email.parser.Parser()
&gt;&gt;&gt; message = parser.parse(open('/home/vinko/jlm.txt','r'))
&gt;&gt;&gt; message.is_multipart()
True
&gt;&gt;&gt; parts = message.get_payload()
&gt;&gt;&gt; len(parts)
2
&gt;&gt;&gt; parts[0].get_content_type()
'text/plain'
&gt;&gt;&gt; parts[1].get_content_type()
'message/rfc822'
&gt;&gt;&gt; parts[0].get_payload()
'Message Text'
</code></pre>

<p>parts will contain all parts of the multipart message, you can check their content types as shown and get only the text/plain ones, for instance.</p>

<p>Good luck.</p>
"
102572,"<p>You can't use relative paths, as Toni suggests, because you have no guarantee that the path from your working directory to your app's directory will remain the same.</p>

<p>The correct solution is to either use os.path.split, as you are, or to use something like:</p>

<pre><code>path = os.path.join(os.path.dirname(__file__), '..', 'templates', 'myPage.html')
</code></pre>

<p>My usual approach is to generate a path to the template directory using the above method, and store it as a member of my controller object, and provide a ""getTemplatePath"" method that takes the provided filename and joins it with the basename.</p>
"
279733,"<p>Here's a few things to get you started (roughly from simplest-to-most-complex, least-to-most-powerful):</p>

<p><a href=""http://en.wikipedia.org/wiki/Recursive_descent_parser"" rel=""nofollow"">http://en.wikipedia.org/wiki/Recursive_descent_parser</a></p>

<p><a href=""http://en.wikipedia.org/wiki/Top-down_parsing"" rel=""nofollow"">http://en.wikipedia.org/wiki/Top-down_parsing</a></p>

<p><a href=""http://en.wikipedia.org/wiki/LL_parser"" rel=""nofollow"">http://en.wikipedia.org/wiki/LL_parser</a></p>

<p><a href=""http://effbot.org/zone/simple-top-down-parsing.htm"" rel=""nofollow"">http://effbot.org/zone/simple-top-down-parsing.htm</a></p>

<p><a href=""http://en.wikipedia.org/wiki/Bottom-up_parsing"" rel=""nofollow"">http://en.wikipedia.org/wiki/Bottom-up_parsing</a></p>

<p><a href=""http://en.wikipedia.org/wiki/LR_parser"" rel=""nofollow"">http://en.wikipedia.org/wiki/LR_parser</a></p>

<p><a href=""http://en.wikipedia.org/wiki/GLR_parser"" rel=""nofollow"">http://en.wikipedia.org/wiki/GLR_parser</a></p>

<p>When I learned this stuff, it was in a semester-long 400-level university course.  We did a number of assignments where we did parsing by hand; if you want to really understand what's going on under the hood, I'd recommend the same approach.</p>

<p>This isn't the book I used, but it's pretty good: <a href=""http://rads.stackoverflow.com/amzn/click/0201000229"" rel=""nofollow"">Principles of Compiler Design</a>.</p>

<p>Hopefully that's enough to get you started :)</p>
"
95417,"<p>PySec is another monadic parser, I don't know much about it, but it's worth looking at <a href=""http://www.valuedlessons.com/2008/02/pysec-monadic-combinatoric-parsing-in.html"" rel=""nofollow"">here</a></p>
"
96797,"<p>After the handshake is complete, you can get the client certificate.  While the client certificate is also available in the verify callback (verify_cb), there's not really any reason to try to do anything aside from verify the certificate in that callback.  Setting up an application-specific mapping is better done after the handshake has completely successfully.  So, consider using the OpenSSL.SSL.Connection instance returned by the accept method to get the certificate (and from there, the commonName) and associate it with the connection object at that point.  For example,</p>

<pre><code>client, clientAddress = self.server.accept()
client.do_handshake()
commonNamesToConnections[client.get_peer_certificate().commonName] = client
</code></pre>

<p>You might want to check the mapping to make sure you're not overwriting any existing connection (perhaps using a list of connections instead of just mapping each common name to one).  And of course you need to remove entries when connections are lost.</p>

<p>The `do_handshakeÂ´ call forces the handshake to actually happen.  Without this, the handshake will happen when application data is first transferred over the connection.  That's fine, but it would make setting up this mapping slightly more complicated.</p>
"
283204,"<p>Perhaps the problem is not with the firewall per se, but with the fact that you need to use an HTTP proxy. If you do need to use a proxy, try setting the http_proxy environment variable. It might be that your firewall uses NTLM proxy authentication (which Python doesn't support); in this case, try setting up an <a href=""http://ntlmaps.sourceforge.net/"" rel=""nofollow"">APS proxy server</a> on your local machine, and point http_proxy to localhost.</p>
"
283545,"<p>From the error message, it looks like you need to pass the full path of ""foo.py"" to your Popen call. Normally just having ""foo.py"" will search in your current working directory, but this can be a bit unpredictable on Windows, I have found. Yours seems to be jumping around with the open file dialog.</p>

<p>Secondly, just for good measure, it would seem like you would need to pass foo.py as an argument to python.exe executable, rather than executing foo.py itself. Again, I would specify this by path.</p>

<p>So to be safe, something like:</p>

<pre><code>subprocess.Popen([r'C:\Python2.5\python.exe', r'C:\path\to\foo.py'])
</code></pre>
"
285174,"<p>The short answer is ""no"".  There is not a swiss-army-knife like IDE that is both a full-featured Python code-editor and a full-featured WYSIWYG GUI editor.  However, there are several stand-alone tools that make creating a GUI easier and there are a myriad of code editors, so if you can handle having two windows open, then you can accomplish what you are trying to.</p>

<p>As for stand-alone GUI editors, which you choose is going to depend on what library you choose to develop your GUI with.  I would recommend using <a href=""http://www.gtk.org/"" rel=""nofollow"">GTK+</a>, which binds to Python via <a href=""http://www.pygtk.org/"" rel=""nofollow"">PyGtk</a> and has the <a href=""http://glade.gnome.org/"" rel=""nofollow"">Glade</a> GUI designer.  I believe that there are other GUI libraries for Python that have WYSIWYG designers (Qt, Tkinter, wxWindows, etc.), but GTK+ is the one I have the most experience with so I will leave the others for other commentators.</p>

<p>Note, however, that the designer in this case is not at all language dependent.  It just spits out a .glade file that could be loaded into any language that has GTK+ bindings.  If you are looking for a designer that produces raw Python code (like the Code-Behind model that VS.Net uses), then I am not aware of any.</p>

<p>As for general code-editing IDE's (that do not include a GUI designer), there are <a href=""http://wiki.python.org/moin/IntegratedDevelopmentEnvironments"" rel=""nofollow"">many</a>, of which <a href=""http://pydev.sourceforge.net/"" rel=""nofollow"">PyDev</a>/<a href=""http://www.eclipse.org/"" rel=""nofollow"">Eclipse</a> is probably the most Visual Studio-like.</p>

<p>(Revised for clarity.)</p>
"
285186,"<p>For GUI only, I find VisualWx (<a href=""http://visualwx.altervista.org/"" rel=""nofollow"">http://visualwx.altervista.org/</a>) to be very good for designing wxPython apps under Windows.</p>

<p>For GUI + database, dabo (<a href=""http://dabodev.com/"" rel=""nofollow"">http://dabodev.com/</a>) is probably a good answer.</p>
"
285260,"<p>I wholeheartedly recommend <a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""nofollow"">mechanize</a> for python. It's exactly a programmable web browser that you can use from python, which handles forms and cookies as well! It makes any kind of site crawling a breeze.</p>

<p>Take a look at the examples on that link to see what it can do.</p>
"
283718,"<p>If you have the file descriptor, you can use <code>fstat</code> to find out the size, if any. A more generic solution is to seek to the end of the file, and read its location there.</p>
"
93865,"<p>Oft overlooked modules, uses and tricks:</p>

<p>collections.defaultdict(): for when you want missing keys in a dict to have a default value.</p>

<p>functools.wraps(): for writing decorators that play nicely with introspection.</p>

<p>posixpath: the os.path module for POSIX systems. You can use it for manipulating POSIX paths (including URI elements) even on Windows and other non-POSIX systems.</p>

<p>ntpath: the os.path module for Windows; usable for manipulation of Windows paths on non-Windows systems.</p>

<p>(also: macpath, for MacOS 9 and earlier, os2emxpath for OS/2 EMX, but I'm not sure if anyone still cares.)</p>

<p>pprint: more structured printing of the repr() of containers makes debugging much easier.</p>

<p>imp: all the tools you need to write your own plugin system or make Python import modules from arbitrary archives.</p>

<p>rlcompleter: getting tab-completion in the normal interactive interpreter. Just do ""import readline, rlcompleter; readline.parse_and_bind('tab: complete')""</p>

<p>the PYTHONSTARTUP environment variable: can be set to the path to a file that will be executed (in the main namespace) when entering the interactive interpreter; useful for putting things in like the rlcompleter recipe above.</p>
"
37496,"<p>How about parsing the HTML data and extracting the data with the help of the parser ?</p>

<p>I'd try something like the author described in <a href=""http://diveintopython.net/html_processing/extracting_data.html"" rel=""nofollow"">chapter 8.3 in the Dive Into Python book</a> </p>
"
330335,"<p>Fun fact about the nested comprehension: it mimics nested ""for"" loops, so the inner ones can use values from outer ones. This isn't useful in the cartesian product case, but good to know. For example:</p>

<pre><code>[ (i,j) for i in range(10) for j in range(i) ]
</code></pre>

<p>generates all pairs <code>(i,j)</code> where <code>0&gt;=i&gt;j&gt;10</code>.</p>
"
330433,"<p>Take an XML parser, make it generate a DOM (Document Object Model) and then build a recursive algorithm that traverses all the nodes, calls ""text()"" in each node (that should give you the text in the current node and all children) and puts that as a key in the dictionary.</p>
"
330463,"<p>Use expat or another XML parser; it's more explicit than anything else, considering you're dealing with XML data anyway.</p>

<p>However, note that XML element names can't start with a number as your example has them.</p>

<p>Here's a parser that will do what you need, although you'll need to tweak it to combine duplicate elements into one dict key:</p>

<pre><code>from xml.parsers.expat import ParserCreate

open_elements = {}
result_dict = {}

def start_element(name, attrs):
    open_elements[name] = True

def end_element(name):
    del open_elements[name]

def char_data(data):
    for element in open_elements:
        cur = result_dict.setdefault(element, '')
        result_dict[element] = cur + data

if __name__ == '__main__':
    p = ParserCreate()

    p.StartElementHandler = start_element
    p.EndElementHandler = end_element
    p.CharacterDataHandler = char_data

    p.Parse(u'&lt;_133_3&gt;&lt;_135_3&gt;&lt;_116_2&gt;The other system worked for about 1 month&lt;/_116_2&gt; got some good images &lt;_137_3&gt;on it then it started doing the same thing as the first one&lt;/_137_3&gt; so then I quit using either camera now they are just sitting and collecting dust.&lt;/_135_3&gt;&lt;/_133_3&gt;', 1)

    print result_dict
</code></pre>
"
208049,"<p>Add the following (a small extension of <a href=""http://www.djangosnippets.org/snippets/937/"" rel=""nofollow"">this code</a>) to your admin.py:</p>

<pre><code>from django import forms

class ReadOnlyWidget(forms.Widget):
    def __init__(self, original_value, display_value):
        self.original_value = original_value
        self.display_value = display_value

        super(ReadOnlyWidget, self).__init__()

    def render(self, name, value, attrs=None):
        if self.display_value is not None:
            return unicode(self.display_value)
        return unicode(self.original_value)

    def value_from_datadict(self, data, files, name):
        return self.original_value

class ReadOnlyAdminFields(object):
    def get_form(self, request, obj=None):
        form = super(ReadOnlyAdminFields, self).get_form(request, obj)
        fields = getattr(self, 'readonly', [])
        if obj is not None:
            fields += getattr(self, 'readonly_on_edit', [])

        for field_name in fields:
            if field_name in form.base_fields:
                if hasattr(obj, 'get_%s_display' % field_name):
                    display_value = getattr(obj, 'get_%s_display' % field_name)()
                else:
                    display_value = None

                form.base_fields[field_name].widget = ReadOnlyWidget(getattr(obj, field_name, ''), display_value)
                form.base_fields[field_name].required = False

        return form
</code></pre>

<p>You can then specify that certain fields should by readonly when the object is edited:</p>

<pre><code>class PersonAdmin(ReadOnlyAdminFields, admin.ModelAdmin):
    readonly_on_edit = ('home',)

admin.site.register(Person, PersonAdmin)
</code></pre>
"
210510,"<p>Using NSIS is great (i use it too) but i would suggest using a ""packager"" like pyinstaller (my personal fav, alternatives bb_freeze, py2exe) to create an exe before the using NSIS</p>

<p>The primary benefit you get by doing this is;
Your download is smaller as you're not bundling the whole Python Standard Lib and extra stuff your app wont need and you get an exe file to boot!</p>
"
160421,"<p>Model itself doesn't know anything about current user but you can give this user in a view to the form which operates models objects (and in form reset <code>choices</code> for necessary field). </p>

<p>If you need this on admin site - you can try <code>raw_id_admin</code> along with <code>django-granular-permissions</code> (<a href=""http://code.google.com/p/django-granular-permissions/"" rel=""nofollow"">http://code.google.com/p/django-granular-permissions/</a> but I couldn't rapidly get it working on my django but it seems to be fresh enough for 1.0 so...). </p>

<p>At last, if you heavily need a selectbox in admin - then you'll need to hack <code>django.contrib.admin</code> itself.</p>
"
211541,"<ul>
<li>Sqlite doesn't throw an exception if you create a new database with the same name, it will just connect to it. Since sqlite is a file based database, I suggest you just check for the existence of the file.</li>
<li>About your second problem, to check if a table has been already created, just catch the exception. An exception ""sqlite3.OperationalError: table TEST already exists"" is thrown if the table already exist.</li>
</ul>

<pre class=""lang-python prettyprint-override""><code>import sqlite3
import os
database_name = ""newdb.db""
if not os.path.isfile(database_name):
    print ""the database already exist""
db_connection = sqlite3.connect(database_name)
db_cursor = db_connection.cursor()
try:
    db_cursor.execute('CREATE TABLE TEST (a INTEGER);')
except sqlite3.OperationalError, msg:
    print msg
</code></pre>
"
36978,"<p>Have a look at the standard module <a href=""http://docs.python.org/lib/module-shlex.html"" rel=""nofollow"">shlex</a> and modify one copy of it to match the syntax you use for your shell, it is a good starting point</p>

<p>If you want all the power of a complete solution for lexing/parsing, <a href=""http://www.antlr.org/wiki/display/ANTLR3/Antlr3PythonTarget"" rel=""nofollow"">ANTLR</a> can generate python too.</p>
"
37153,"<p>I'm not totally sure which problem you want so solve, but if you deploy your python/django application via an apache prefork MPM using mod_python apache will start several worker processes for handling different requests.</p>

<p>If one request needs so much resources, that you want to use multiple cores have a look at <a href=""http://pyprocessing.berlios.de/"" rel=""nofollow"">pyprocessing</a>. But I don't think that would be wise.</p>
"
37203,"<p>The 'standard' way to do this with rails is to run a ""pack"" of Mongrel instances (ie: 4 copies of the rails application) and then use apache or nginx or some other piece of software to sit in front of them and act as a load balancer. </p>

<p>This is probably how it's done with other ruby frameworks such as merb etc, but I haven't used those personally.</p>

<p>The OS will take care of running each mongrel on it's own CPU.</p>

<p>If you install <a href=""http://www.modrails.com/"" rel=""nofollow"">mod_rails aka phusion passenger</a> it will start and stop multiple copies of the rails process for you as well, so it will end up spreading the load across multiple CPUs/cores in a similar way.</p>
"
210158,"<p>Try the following.  It is a modification of the original <code>FTP.dir</code> command which uses ""dir"" instead of ""LIST"".  It gives a ""DIR not understood"" error with the ftp server I tested it on, but it does send the command you're after.  (You will want to remove the print command I used to check that.)</p>

<pre><code>import ftplib

class FTP(ftplib.FTP):

    def shim_dir(self, *args):
        '''List a directory in long form.
        By default list current directory to stdout.
        Optional last argument is callback function; all
        non-empty arguments before it are concatenated to the
        LIST command.  (This *should* only be used for a pathname.)'''
        cmd = 'dir'
        func = None
        if args[-1:] and type(args[-1]) != type(''):
            args, func = args[:-1], args[-1]
        for arg in args:
            if arg:
                cmd = cmd + (' ' + arg)
        print cmd
        self.retrlines(cmd, func)

if __name__ == '__main__':
    f = FTP('ftp.ncbi.nih.gov')
    f.login()
    f.shim_dir('""blast""')
</code></pre>
"
161082,"<p>Have you tried sorting the list first? The algorithm you proposed should work, albeit with lots of database hits.</p>

<pre><code>import itertools

cars = [
    {'car': 'X2', 'mods': [1,2]},
    {'car': 'Y2', 'mods': [2]},
    {'car': 'W2', 'mods': [1]},
    {'car': 'X1', 'mods': [1,2]},
    {'car': 'W1', 'mods': [1]},
    {'car': 'Y1', 'mods': [2]},
    {'car': 'Z1', 'mods': [1,2,3]},
    {'car': 'X3', 'mods': [1,2]},
]

cars.sort(key=lambda car: car['mods'])

cars_by_common_mods = {}
for k, g in itertools.groupby(cars, lambda car: car['mods']):
    cars_by_common_mods[frozenset(k)] = [car['car'] for car in g]

print cars_by_common_mods
</code></pre>

<p>Now, about those queries:</p>

<pre><code>import collections
import itertools
from operator import itemgetter

from django.db import connection

cursor = connection.cursor()
cursor.execute('SELECT car_id, mod_id FROM someapp_car_mod ORDER BY 1, 2')
cars = collections.defaultdict(list)
for row in cursor.fetchall():
    cars[row[0]].append(row[1])

# Here's one I prepared earlier, which emulates the sample data we've been working
# with so far, but using the car id instead of the previous string.
cars = {
    1: [1,2],
    2: [2],
    3: [1],
    4: [1,2],
    5: [1],
    6: [2],
    7: [1,2,3],
    8: [1,2],
}

sorted_cars = sorted(cars.iteritems(), key=itemgetter(1))
cars_by_common_mods = []
for k, g in itertools.groupby(sorted_cars, key=itemgetter(1)):
    cars_by_common_mods.append({'mods': k, 'cars': map(itemgetter(0), g)})

print cars_by_common_mods

# Which, for the sample data gives me (reformatted by hand for clarity)
[{'cars': [3, 5],    'mods': [1]},
 {'cars': [1, 4, 8], 'mods': [1, 2]},
 {'cars': [7],       'mods': [1, 2, 3]},
 {'cars': [2, 6],    'mods': [2]}]
</code></pre>

<p>Now that you've got your lists of car ids and mod ids, if you need the complete objects to work with, you could do a single query for each to get a complete list for each model and create a lookup <code>dict</code> for those, keyed by their ids  - then, I believe, Bob is your proverbial father's brother.</p>
"
210429,"<p>I have built semi-long shell scripts (300-500 lines) and Python code which does similar functionality.  When many external commands are being executed, I find the shell is easier to use.  Perl is also a good option when there is lots of text manipulation.</p>
"
208342,"<p>I think what you miss is how to retrieve all the files in that directory.
To do so, use the glob module.
Here is an example which will duplicate all the files with extension *.txt to files with extension *.out</p>

<pre><code>import glob

list_of_files = glob.glob('./*.txt')           # create the list of file
for file_name in list_of_files:
  FI = open(file_name, 'r')
  FO = open(file_name.replace('txt', 'out'), 'w') 
  for line in FI:
    FO.write(line)

  FI.close()
  FO.close()
</code></pre>
"
208960,"<p>Actually, after some more digging, it looks like the <code>xmlrpclib module may have the piece I need with it's <code>Binary</code> helper class:</p>

<pre>
binary_obj = xmlrpclib.Binary( open('foo.pdf').read() )
</code></pre>

<p>Here's an example from the <a href=""http://trac-hacks.org/wiki/XmlRpcPlugin"" rel=""nofollow"">Trac XML-RPC documentation</a></p>

<pre><code>
import xmlrpclib 
server = xmlrpclib.ServerProxy(""http://athomas:password@localhost:8080/trunk/login/xmlrpc"") 
server.wiki.putAttachment('WikiStart/t.py', xmlrpclib.Binary(open('t.py').read())) 
</code></pre>
"
701,"<p>No, you were not dreaming.  Python has a pretty excellent list comprehension system that lets you manipulate lists pretty elegantly, and depending on exactly what you want to accomplish, this can be done a couple of ways.  In essence, what you're doing is saying ""For item in list if criteria.matches"", and from that you can just iterate through the results or dump the results into a new list.</p>

<p>I'm going to crib an example from <a href=""http://diveintopython.net/functional_programming/filtering_lists.html"" rel=""nofollow"">Dive Into Python</a> here, because it's pretty elegant and they're smarter than I am.  Here they're getting a list of files in a directory, then filtering the list for all files that match a regular expression criteria.</p>

<blockquote>
<pre><code>    files = os.listdir(path)                               
    test = re.compile(""test\.py$"", re.IGNORECASE)          
    files = [f for f in files if test.search(f)]
</code></pre>
</blockquote>

<p>You could do this without regular expressions, for your example, for anything where your expression at the end returns true for a match.  There are other options like using the filter() function, but if I were going to choose, I'd go with this.</p>

<p>Eric Sipple</p>
"
349001,"<p>The sending part has been covered, for the receiving you can use <a href=""http://docs.python.org/library/poplib.html"" rel=""nofollow"">pop</a> or <a href=""http://docs.python.org/library/imaplib.html"" rel=""nofollow"">imap</a></p>
"
185505,"<p>Setuptools may be capable of more of what you're looking for than you realize -- if you need a custom version of lxml to work correctly on MacOS X, for instance, you can put a URL to an appropriate egg inside your setup.py and have setuptools download and install that inside your developers' environments as necessary; it also can be told to download and install a specific version of a dependency from revision control.</p>

<p>That said, I'd lean towards using a scriptably generated virtual environment. It's pretty straightforward to build a kickstart file which installs whichever packages you depend on and then boot virtual machines (or production hardware!) against it, with puppet or similar software doing other administration (adding users, setting up services [where's your database come from?], etc). This comes in particularly handy when your production environment includes multiple machines -- just script the generation of multiple VMs within their handy little sandboxed subnet (I use libvirt+kvm for this; while kvm isn't available on all the platforms you have developers working on, qemu certainly is, or you can do as I do and have a small number of beefy VM hosts shared by multiple developers).</p>

<p>This gets you out of the headaches of supporting N platforms -- you only have a single virtual platform to support -- and means that your deployment process, as defined by the kickstart file and puppet code used for setup, is source-controlled and run through your QA and review processes just like everything else.</p>
"
347545,"<p>you could use that idea of returning a dict or a string, but add a new decorator, so the 'evolution' for a user would be:</p>

<p>simple html:</p>

<pre><code>@GET(""/"")
def index():
return ""&lt;html&gt;&lt;body&gt;...&lt;/body&gt;&lt;/html&gt;""
</code></pre>

<p>with constant headers (one @HEADER for each one, or a dict with all of them):</p>

<pre><code>@GET(""/"")
@HEADER(""Location"",""http://google.com"")
def index():
return ""&lt;html&gt;&lt;body&gt;...&lt;/body&gt;&lt;/html&gt;""
</code></pre>

<p>with complex, maybe calculated headers:</p>

<pre><code>@GET(""/"")
def index():
return {
    ""html"": ""&lt;html&gt;&lt;body&gt;...&lt;/body&gt;&lt;/html&gt;"",
    ""headers"": {""Location"":""http://google.com""}
}
</code></pre>

<p>the @HEADER() decorator would simply change the returned value, so the 'framework' code would stay simple.</p>
"
5340,"<P>Not sure if this is what you're looking for, but there's <A href=""http://glade.gnome.org/"" rel=""nofollow"">Glade</A> (or <A href=""http://gladewin32.sourceforge.net/"" rel=""nofollow"">Windows download</A>) which is a designer for GTK+. It generates an XML file which can then be used to build the GUI in a number of different languages.</P>"
250149,"<p>Another way is the âbetter to ask forgiveness than permissionâ approachâjust try to rename it, and if that fails, catch the appropriate <code>OSError</code> and try the copy approach.  ie:</p>

<pre><code>import errno
try:
    os.rename(source, dest):
except IOError, ex:
    if ex.errno == errno.EXDEV:
        # perform the copy instead.
</code></pre>

<p>This has the advantage that it will also work on Windows, where st_dev is always 0 for all partitions.</p>

<p>Note that if you actually want to copy and then delete the source file (ie. perform a move), rather than just copy, then shutil.move will already do what you want:</p>

<pre>
Help on function move in module shutil:

move(src, dst)
    Recursively move a file or directory to another location.

    If the destination is on our current filesystem, then simply use
    rename.  Otherwise, copy src to the dst and then remove src.
</pre>

<p>[Edit] Updated due to Matthew Schinckel's comment to mention that shutil.move will delete the source after the copy, which isn't necessarily what is wanted, as the question just mentions copying.</p>
"
250294,"<p>Looks pretty tight to me.</p>

<p>I see one thing that may make a small improvement.
Your calling, ""self.request.get('links')"" twice.</p>

<p>So adding:</p>

<pre><code>unsplitlinks = self.request.get('links')
</code></pre>

<p>And referencing, ""unsplitlinks"" could help.</p>

<p>Other than that the loop is the only area I see that would be a target for optimization.
Is it possible to prep the data and then add it to the db at once, instead of doing a db add per link?  (I assume the .put() command adds the link to the database)</p>
"
250409,"<pre><code>def smart_truncate(s, width):
    if s[width].isspace():
        return s[0:width];
    else:
        return s[0:width].rsplit(None, 1)[0]
</code></pre>

<p>Testing it:</p>

<pre><code>&gt;&gt;&gt; smart_truncate('The quick brown fox jumped over the lazy dog.', 23) + ""...""
'The quick brown fox...'
</code></pre>
"
250487,"<p>I haven't had had the opportunity to use it much.  That said, my absolute favorite part of django is the built in administration console.</p>
"
250819,"<p>I think you should remove the <code>sudo</code> in your <code>Popen</code> call and require the user of <em>your</em> script to type <code>sudo</code>.</p>

<p>This additionally makes more explicit the need for elevated privileges in your script, instead of hiding it inside <code>Popen</code>.</p>
"
189270,"<p>As a slight style change, you could use enumerate:</p>

<pre><code>for i, arow in enumerate(alist):
    for j, aval in enumerate(arow):
        if aval.isWhatever():
            blist[i][j].doSomething()
</code></pre>

<p>I don't think you'll get anything significantly simpler unless you rearrange your data structures as Federico suggests.  So that you could turn the last line into something like ""aval.b.doSomething()"".</p>
"
344694,"<p>The quickest way would be to match strings (with, e.g., regular expressions) instead of parsing XML - depending on your XMLs this could actually work.</p>

<p>But the most important thing is this: instead of thinking through several options, just implement them and time them on a small set. This will take roughly the same amount of time, and will give you real numbers do drive you forward.</p>

<p>EDIT:</p>

<ul>
<li>Are the files on a local drive or network drive? Network I/O will kill you here.</li>
<li>The problem parallelizes trivially - you can split the work among several computers (or several processes on a multicore computer).</li>
</ul>
"
346292,"<p>I think I will not go for regex for this task. Python list comprehension is quite powerful for this</p>

<pre><code>In [27]: s = ""'813702104[813702106]','813702141[813702143]','813702172[813702174]'""

In [28]: d=[[int(each1.strip(']\'')) for each1 in each.split('[')] for each in s.split(',')]

In [29]: d[0][1]
Out[29]: 813702106

In [30]: d[1][0]
Out[30]: 813702141

In [31]: d
Out[31]: [[813702104, 813702106], [813702141, 813702143], [813702172, 813702174]]
</code></pre>
"
346474,"<p>You could get around your problem by checking for the number of handlers when you are doing your init.</p>

<pre><code>def init_logging():
    stdoutHandler = logging.StreamHandler( sys.stdout )
    stdoutHandler.setLevel( DEBUG )
    stdoutHandler.setFormatter( logging.Formatter( LOG_FORMAT_WITH_TIME ) )
    logger = logging.getLogger( LOG_AREA1 )
    if len(logger.handlers) &lt; 1:
        logger.addHandler( stdoutHandler )
</code></pre>

<p>I don't think this is a great way to handle it.  Personally, for logging in django with the python logging module, I create a logger in views.py for each application I'm interested in, then grab the logger in each view function.</p>

<pre><code>from django.http import HttpResponse
from magic import makeLogger
from magic import getLogger

makeLogger('myLogName', '/path/to/myLogName.log')
def testLogger(request):
    logger = getLogger('myLogName')
    logger.debug('this worked')
    return HttpResponse('TEXT, HTML or WHATEVER')
</code></pre>

<p>This is a pretty good article about debugging django and covers some logging:
<a href=""http://simonwillison.net/2008/May/22/debugging/"" rel=""nofollow"">http://simonwillison.net/2008/May/22/debugging/</a></p>
"
6125,"<p>Why not use SQLite? There is good support in Python and you can write SQL queries to get the data out. Here is the Python docs for <a href=""http://docs.python.org/lib/module-sqlite3.html"" rel=""nofollow"">sqlite3</a></p>

<hr>

<p>If you don't want to use SQLite you could do an array of dicts.</p>

<pre><code>episodes = []<br>episodes.append({'season':1, 'episode': 2, 'name':'Something'})<br>episodes.append({'season':1, 'episode': 2, 'name':'Something', 'actors':['Billy Bob', 'Sean Penn']})<br></code></pre>

<p>That way you add metadata to any record and search it very easily</p>

<pre><code>season_1 = [e for e in episodes if e['season'] == 1]<br>billy_bob = [e for e in episodes if 'actors' in e and 'Billy Bob' in e['actors']]<br><br>for episode in billy_bob:<br>    print ""Billy bob was in Season %s Episode %s"" % (episode['season'], episode['episode'])<br></code></pre>"
6616,"<p><a href=""http://www.mozilla.org/projects/xul/"" rel=""nofollow"">XML User Interface Language</a>. Don't know much about it so not sure if it meets your desires. Post back with your experience if you play with it.</p>"
185411,"<p>Generally, we put it all in one file. This isn't Java or C++.</p>

<p>Start with a single file until you get some more experience with Python.  Unless your files are gargantuan, it will work fine.  </p>

<p>For example, Django encourages this style, so copy their formula for success.  One module for the model.  A module for each application; each application imports a common model.</p>

<p>Your Database and superclass stuff can be in your <code>__init__.py</code> file, since it applies to the entire package.  That may reduce some of the circularity.</p>
"
128483,"<p>Upgrade. For me it was very simple: change <code>__str__()</code> to <code>__unicode__()</code>, write basic <code>admin.py</code>, and done. Just start running your app on 1.0, test it, and when you encounter an error use the documentation on <a href=""http://code.djangoproject.com/wiki/BackwardsIncompatibleChanges"" rel=""nofollow"">backwards-incompatible changes</a> to see how to fix the issue.</p>
"
128525,"<p>I wouldn't worry about the efficiency of loading the module up front too much.  The memory taken up by the module won't be very big (assuming it's modular enough) and the startup cost will be negligible.</p>

<p>In most cases you want to load the modules at the top of the source file.  For somebody reading your code, it makes it much easier to tell what function or object came from what module.</p>

<p>One good reason to import a module elsewhere in the code is if it's used in a debugging statement.</p>

<p>For example:</p>

<pre><code>do_something_with_x(x0
</code></pre>

<p>I could debug this with:</p>

<pre><code>from pprint import pprint
pprint(x)
do_something_with_x(x)
</code></pre>

<p>Of course, the other reason to import modules elsewhere in the code is if you need to dynamically import them.  This is because you pretty much don't have any choice.</p>

<p>I wouldn't worry about the efficiency of loading the module up front too much.  The memory taken up by the module won't be very big (assuming it's modular enough) and the startup cost will be negligible.</p>
"
248759,"<p>What you want is a ""Group""</p>

<p>You create a group, specify that the account wanting to do the action belongs to the group, then you specify that the resource you want access to is a member of that group.</p>

<p>Sometimes group management can be kind of irritating, but it should allow you to do anything you want, and it's the user that is authorized, not your program.</p>

<p>(If you want your program authorized, you can create a specific user to run it as and give that user the proper group membership, then su to that group within your program to execute the operation without giving the running user the ability.)</p>
"
128655,"<p>This is like many other optimizations - you sacrifice some readability for speed.  As John mentioned, if you've done your profiling homework and found this to be a significantly useful enough change <strong>and</strong> you need the extra speed, then go for it.  It'd probably be good to put a note up with all the other imports:</p>

<pre><code>from foo import bar
from baz import qux
# Note: datetime is imported in SomeClass below
</code></pre>
"
127493,"<p>I guess one way would be to help with documentation (translation, updating), until you are aware enough about the language. Also following the devs and users mail groups would give you a pretty good idea of what is being done and needs to be done by the community.</p>
"
251077,"<p>Assuming you are referring to <a href=""http://www.sqlalchemy.org/docs/04/plugins.html#plugins_declarative"" rel=""nofollow"">the declarative plugin</a>, where everything I am about to say is documented with examples:</p>

<pre><code>class User(Base):
    __tablename__ = 'users'

    id = Column('id', Integer, primary_key=True)
    addresses = relation(""Address"", backref=""user"")

class Address(Base):
    __tablename__ = 'addresses'

    id = Column('id', Integer, primary_key=True)
    user_id = Column('user_id', Integer, ForeignKey('users.id'))
</code></pre>
"
251253,"<p>I agree with Adam, but I think the pattern in urls.py should be:</p>

<pre><code>... r'^browse/(?P&lt;match&gt;.+)/$' ...
</code></pre>

<p>The '\w' will only match 'word' characters, but the '.' will match anything.</p>
"
252150,"<p>It sounds as if this is an opportunity for you to develop some C extension modules for the PythonCE project.</p>
"
126399,"<p>Why is pyFacebook django centric?  Looks like it works perfectly fine with all kinds of WSGI apps or Python applications in general.  No need to use Django.</p>
"
189579,"<p>Not screaming-fast, but straightforward:</p>

<pre><code>&gt;&gt;&gt; def bin(x):
...     sign = '-' if x &lt; 0 else ''
...     x = abs(x)
...     bits = []
...     while x:
...             x, rmost = divmod(x, 2)
...             bits.append(rmost)
...     return sign + ''.join(str(b) for b in reversed(bits or [0]))
</code></pre>

<p>It is also faster than <code>num_bin</code>:</p>

<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; t_bin = timeit.Timer('bin(0xf0)', 'from __main__ import bin')
&gt;&gt;&gt; print t_bin.timeit(number=100000)
4.19453350997
&gt;&gt;&gt; t_num_bin = timeit.Timer('num_bin(0xf0)', 'from __main__ import num_bin')
&gt;&gt;&gt; print t_num_bin.timeit(number=100000)
4.70694716882
</code></pre>

<p>Even more, it actually works correctly (for my definition of ""correctness"" :)):</p>

<pre><code>&gt;&gt;&gt; bin(1)
'1'
&gt;&gt;&gt; num_bin(1)
'10000000'
</code></pre>
"
343926,"<p>check out the interwiki page in moinmoin, (most wikis have them) we use trac for example and you can set up different link paths to point to your different web resources.  So in our Trac you can go [[SSGWiki:Some Topic]] and it will point to another internal wiki.</p>
"
13406,"<p>In C# you can apply selective processing on anything that lives inside an IEnumerable like this:  </p>

<pre><code>intArray.Where(i =&gt; i &gt; 3).ConvertAll();
DoStuff(intArray.Where(i =&gt; i 3));
</code></pre>

<p>Etc..</p>
"
188854,"<p>It seems to be impossible in Django admin site itself (you should not include inlined fields in ""fields"" at all) but you can use JS to move inlined fields wherever you want.</p>
"
189234,"<p><a href=""http://www.python.org/doc/2.5.2/ref/genexpr.html"" rel=""nofollow"">Generator expressions</a> and <code>izip</code> from <a href=""http://www.python.org/doc/2.5.2/lib/itertools-functions.html"" rel=""nofollow"">itertools module</a> will do very nicely here:</p>

<pre><code>from itertools import izip
for a, b in (pair for (aline, bline) in izip(alist, blist) 
             for pair in izip(aline, bline)):
    if a.isWhatever:
        b.doSomething()
</code></pre>

<p>The line in <code>for</code> statement above means:</p>

<ul>
<li>take each line from combined grids <code>alist</code> and <code>blist</code> and make a tuple from them <code>(aline, bline)</code></li>
<li>now combine these lists with <code>izip</code> again and take each element from them (<code>pair</code>).</li>
</ul>

<p>This method has two advantages:</p>

<ul>
<li>there are no indices used anywhere</li>
<li>you don't have to create lists with <code>zip</code> and use more efficient generators with <code>izip</code> instead.</li>
</ul>
"
247612,"<p>It's often possible to achieve near-C speeds (close enough for any project using Python in the first place!) by replacing explicit algorithms written out longhand in Python with an implicit algorithm using a built-in Python call.  This works because most Python built-ins are written in C anyway. Well, in CPython of course ;-) <a href=""https://www.python.org/doc/essays/list2str/"" rel=""nofollow"">https://www.python.org/doc/essays/list2str/</a>  </p>
"
253659,"<p>I think the answer about it being a ""marketing"" thing is probably correct, along with the lack of a large set of libraries to choose from. I would like to point out another case of this: Ruby.  Ruby is meant to be a general purpose scripting language. The problem is that since Ruby on Rails has risen to be so popular, it is becoming hard to find something that is unrelated to Rails.  I'm afraid Lua will suffer this as well, being popular because of a few major things using it, but never able to break free of that stigma.</p>
"
245591,"<p>+1 for xlwt. See Matt Harrison's blog for posts on <a href=""http://panela.blog-city.com/pyexcelerator_xlwt_cheatsheet_create_native_excel_from_pu.htm"" rel=""nofollow"">how to use xlwt</a> and <a href=""http://panela.blog-city.com/creating_large_excel_spreadsheets_xlwt_in_python.htm"" rel=""nofollow"">how to deal with large spreadsheets</a>. Also, check out the <a href=""http://groups.google.com.au/group/python-excel?lnk=li&amp;hl=en"" rel=""nofollow"">python-excel</a> group on Google ""If you use Python to read, write or otherwise manipulate Excel files"".</p>
"
245821,"<p>That is quite a few questions. </p>

<p>Handling the file upload is pretty straight-forward with Django, see the <a href=""http://docs.djangoproject.com/en/dev/topics/http/file-uploads/"" rel=""nofollow"">File Uploads documentation</a> for examples. In short you can access the uploaded file via <code>request.FILES['file']</code>.</p>

<p>To call the scribd api you can use urllib2; see this <a href=""http://www.hackorama.com/python/upload.shtml"" rel=""nofollow"">Hackoarama page</a> for instructions. urllib2 can be a little convoluted but it works once you get a hang of it.</p>

<p>You can call the scribd api directly from within your Django view, but it'd be better practice to separate it out: from within your Django view save the file somewhere on disk and put an ""upload this"" message on messaging system (eg. <a href=""http://xph.us/software/beanstalkd/"" rel=""nofollow"">beanstalkd</a>). Have a separate process pick up the message and upload the file to scribd. That way you shield your http process and user from any issues accessing the API and the associated delays.</p>
"
246155,"<p>As you mention, ""This especially makes sense for large datasets"", I think this answers your question.</p>

<p>If your not hitting any walls, performance-wise, I would stick to lists and standard functions.  Then when you run into problems with performance make the switch.</p>
"
246449,"<p>See <a href=""http://vnoel.wordpress.com/2008/05/03/bye-matlab-hello-python-thanks-sage/"" rel=""nofollow"">Bye MATLAB, hello Python, thanks Sage</a> for a first-hand experience of migrating from <a href=""http://en.wikipedia.org/wiki/MATLAB"" rel=""nofollow"">MATLAB</a> to Python.</p>
"
132493,"<p>The fastest way (in terms of programmer effort, not efficiency) would probably involve using an existing compiler to compile C to something simple (for example LLVM) and either:</p>

<ul>
<li>interpret that in Python (exorbitant performance penalty)</li>
<li>translate that to Python (huge performance penalty)</li>
<li>translate that to Python bytecode (big performance penalty)</li>
</ul>

<p>Translating C to Python directly is possible (and probably yields faster code than the above approaches), but you'd be essentially writing a C compiler backend, which is a huge task.</p>

<p>Edit, afterthought: A perhaps even more quick-and-dirty way of doing that is to take the parse tree for the C code, transform that to a Python data structure and interpret that in Python.</p>
"
126346,"<p>Native looking widgets is quite complicated.
There's a beginning of quartz engine (for theming) found here <a href=""http://git.gnome.org/browse/gtk+/tree/gdk/quartz"" rel=""nofollow"">http://git.gnome.org/browse/gtk+/tree/gdk/quartz</a>
For self-contained applications check out the newly released bundle on <a href=""http://live.gnome.org/GTK%2B/OSX"" rel=""nofollow"">http://live.gnome.org/GTK%2B/OSX</a></p>
"
125122,"<p>How about this:</p>

<pre><code>Python 2.5.1 (r251:54863, Apr 18 2007, 08:51:08) [MSC v.1310 32 bit (Intel)] on
win32
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; def makeSpecial(mystring, special_substr):
...     return mystring.replace(special_substr, '&lt;span class=""special""&gt;%s&lt;/span&gt;
' % special_substr)
...
&gt;&gt;&gt; makeSpecial(""I am the most foo h4ck3r ever!!"", ""foo"")
'I am the most &lt;span class=""special""&gt;foo&lt;/span&gt; h4ck3r ever!!'
&gt;&gt;&gt;
</code></pre>
"
255501,"<p>Benefits of browser-based interface:</p>

<ul>
<li>Easier to manage: no installation required on user machines, upgrades need only be performed on server side and are immediately available to all users.  Data backup can be performed on a single machine as data won't be spread out across multiple clients.</li>
<li>Application can be accessed from any machine with a browser.</li>
<li>Can easily support multiple platforms consistently.</li>
<li>Memory and CPU requirements may be considerably less on the client side as intensive operations can be performed on the server.</li>
<li>Increased security: data is stored on a single server instead of multiple client machines and access can be better controlled.</li>
<li>Many other benefits of a centralized environment including logging, data entered from multiple sources can immediately be available from other clients, etc.</li>
<li>In my experience, it is often easier to debug and faster to develop web-based solutions.</li>
</ul>

<p>Benefits of GUI-based interface:</p>

<ul>
<li>May be easier to design a more responsive, fluid interface.</li>
<li>Can take advantage of OS-specific functionality that may not be available via a browser.</li>
<li>Doesn't necessarily require network access.</li>
<li>Don't need to worry about browser compatibility issues.</li>
<li>No single point of failure if server goes down or becomes unavailable.</li>
</ul>
"
123093,"<p>From your brief description, it sounds like protocol buffers is not the right fit.  The phrase ""structured content created by hand in a text editor"" pretty much screams for XML.</p>

<p>But if you want efficient, low latency communications with data structures that are not shared outside your organization, binary serialization such as protocol buffers can offer a huge win.</p>
"
134961,"<p>Use a format string - <a href=""http://docs.python.org/lib/typesseq-strings.html"" rel=""nofollow"">http://docs.python.org/lib/typesseq-strings.html</a></p>

<p>For example:</p>

<pre><code>python -c 'print ""%(num)02d"" % {""num"":5}'
</code></pre>
"
245314,"<p>I think the <a href=""http://www.python.org/doc/2.5.2/lib/module-traceback.html"" rel=""nofollow""><code>traceback</code></a> module might have what you're looking for. In particular, the <code>extract_stack</code> function looks like it will do the job.</p>
"
190904,"<p>When you are operating with grids of numbers and want really good performance, you should consider using <a href=""http://numpy.scipy.org"" rel=""nofollow"">Numpy</a>. It's surprisingly easy to use and lets you think in terms of operations with grids instead of loops over grids. The performance comes from the fact that the operations are then run over whole grids with optimised SSE code.</p>

<p>For example here is some numpy using code that I wrote that does brute force numerical simulation of charged particles connected by springs. This code calculates a timestep for a 3d system with 100 nodes and 99 edges in 31ms. That is over 10x faster than the best pure python code I could come up with.</p>

<pre><code>from numpy import array, sqrt, float32, newaxis
def evolve(points, velocities, edges, timestep=0.01, charge=0.1, mass=1., edgelen=0.5, dampen=0.95):
    """"""Evolve a n body system of electrostatically repulsive nodes connected by
       springs by one timestep.""""""
    velocities *= dampen

    # calculate matrix of distance vectors between all points and their lengths squared
    dists = array([[p2 - p1 for p2 in points] for p1 in points])
    l_2 = (dists*dists).sum(axis=2)

    # make the diagonal 1's to avoid division by zero
    for i in xrange(points.shape[0]):
        l_2[i,i] = 1

    l_2_inv = 1/l_2
    l_3_inv = l_2_inv*sqrt(l_2_inv)

    # repulsive force: distance vectors divided by length cubed, summed and multiplied by scale
    scale = timestep*charge*charge/mass
    velocities -= scale*(l_3_inv[:,:,newaxis].repeat(points.shape[1], axis=2)*dists).sum(axis=1)

    # calculate spring contributions for each point
    for idx, (point, outedges) in enumerate(izip(points, edges)):
        edgevecs = point - points.take(outedges, axis=0)
        edgevec_lens = sqrt((edgevecs*edgevecs).sum(axis=1))
        scale = timestep/mass
        velocities[idx] += (edgevecs*((((edgelen*scale)/edgevec_lens - scale))[:,newaxis].repeat(points.shape[1],axis=1))).sum(axis=0)

    # move points to new positions
    points += velocities*timestep
</code></pre>
"
180142,"<p>Python doesn't care why type you return.</p>

<pre><code>def DatabaseConnection( str ):   
    if ( IsOracle( str ) ):   
        return OracleConnection( str )  
    else: 
        return SomeOtherConnection( str )
</code></pre>
"
341683,"<p>Python being a much less verbose language than C# might actually lower the barrier to writing unit tests since there is still a lot of developers that are resistant to doing automated unit testing in general. Introducing and having them use a language like IronPython that typically tends to take less time to write the equivalent code in C# might actually encourage more unit tests to be written which is always a good thing.</p>

<p>Plus, by using IronPython for your test code, you might end up with less lines of code (LOC) for your project overall meaning that your unit tests might be more likely to be maintained in the long run versus being ignored and/or discarded.</p>
"
342490,"<p>Actually testing is a great opportunity to try integrating a new language. Languages like Python shine especially well in testing, and it's a low risk project to try - the worst case is not too bad at all.</p>

<p>As far as experience testing another language in Python, I've tested C and C++ systems like this and it was excellent. I think it's definitely worth a shot.</p>

<p>What Jon says is true, though - the level of tooling for Python in general, and IronPython in particular, is nowhere near that of C#. How much that affects you is something you'll find out in your pilot.</p>
"
13844,"<p>Well, I think you might have missed the r or miscounted the backslashes...</p>

<pre><code>""\\n"" == r""\n""

&gt;&gt;&gt; import re
&gt;&gt;&gt; mystring = r""This is \\n a test \\r""
&gt;&gt;&gt; p = re.compile( r""[\\][\\](.)"" )
&gt;&gt;&gt; print p.sub( r""\\\1"", mystring )
This is \n a test \r
&gt;&gt;&gt;
</code></pre>

<p>Which, if I understood is what was requested.</p>

<p>I suspect the more common request is this:</p>

<pre><code>&gt;&gt;&gt; d = {'n':'\n', 'r':'\r', 'f':'\f'}
&gt;&gt;&gt; p = re.compile(r""[\\]([nrfv])"")
&gt;&gt;&gt; print p.sub(lambda mo: d[mo.group(1)], mystring)
This is \
 a test \
&gt;&gt;&gt;
</code></pre>

<p>The interested student should also read Ken Thompson's <a href=""http://cm.bell-labs.com/who/ken/trust.html"" rel=""nofollow"" title=""Cherry G80-11900"">Reflections on Trusting Trust""</a>, wherein our hero uses a similar example to explain the perils of trusting compilers you haven't bootstrapped from machine code yourself.</p>
"
342831,"<p>Learning Win32 API is 5% of initial understanding of concepts and the patterns used and 95% of RTFM.  </p>

<p>For those initial 5% the Petzold book is really good but I suspect that there ought to be some online tutorials which you can find in google as good as I can to find.</p>

<p>Really, once you get the hang of it it's really straight forward do to be able to do anything. Once you get there it would probably be time to move on to something better like QT and never touch Win32 API ever again. Nowadays no one really uses bare Win32 API for anything more than trivial due to the sheer overhead it involves and the extreme lack of comfort.</p>
"
343534,"<p><a href=""http://www.python.org/doc/2.5.2/tut/node8.html#SECTION008420000000000000000"" rel=""nofollow"">Relative imports</a> (<a href=""http://www.python.org/dev/peps/pep-0328/"" rel=""nofollow"">PEP 328</a>) might help:</p>

<pre><code>eggs/
  __init__.py
  foo.py
  bar.py

# foo.py
from __future__ import absolute_import
from . import bar
</code></pre>

<p>See <a href=""http://stackoverflow.com/questions/171785/how-do-you-organize-python-modules"">How do you organize Python modules?</a> for other options.</p>

<p>EDIT:</p>

<p>Yet another option is to use S.Lott's and Jim's suggestions i.e, restructure your package to factor out a <code>eggs.foo</code> part used by <code>eggs.bar.a</code> and use <code>git</code> to work on experimental branches (see <a href=""http://book.git-scm.com/"" rel=""nofollow"">Git Community Book</a>).</p>

<p>Here's an example:</p>

<pre><code>$ git status
# On branch master
nothing to commit (working directory clean)
</code></pre>

<p>[just to make sure that all is good]</p>

<pre><code>$ git checkout -b experimental
Switched to a new branch ""experimental""
</code></pre>

<p>[work on experimental stuff]</p>

<pre><code>$ git commit -a
</code></pre>

<p>[commit to experimental branch]</p>

<pre><code>$ git checkout master
Switched to branch ""master""
</code></pre>

<p>[work on master branch]</p>

<pre><code>$ git commit -a
</code></pre>

<p>To merge changes into master branch:  </p>

<pre><code>$ git merge experimental
</code></pre>

<p>See chapter <a href=""http://book.git-scm.com/3_basic_branching_and_merging.html"" rel=""nofollow"">Basic Branching and Merging</a> from the above book.</p>
"
343544,"<p><a href=""http://cgal-python.gforge.inria.fr/"" rel=""nofollow"">CGAL-Python</a> has been inert for over a year but the code (available through the ""Download"" link) seems to work fine, though not with Python 3.</p>
"
182282,"<p>From a <code>os.path</code> documentation:</p>

<p><strong>os.path.splitdrive(path)</strong><br />
Split the pathname path into a pair (drive, tail) where drive is either a drive specification or the empty string. On systems which do not use drive specifications, drive will always be the empty string. In all cases, drive + tail will be the same as path.</p>

<p>If you running this on unix, it doesnt use drive specifications, hence - drive will be empty string. </p>

<p>If you want to solve windows paths on any platform, you can just use a simple regexp:</p>

<pre><code>import re
(drive, tail) = re.compile('([a-zA-Z]\:){0,1}(.*)').match(filepath).groups()
</code></pre>

<p><code>drive</code> will be a drive letter followed by <code>:</code> (eg. <code>c:</code>, <code>u:</code>) or <code>None</code>, and <code>tail</code> the whole rest :)</p>
"
134065,"<p><code>re.match</code> is anchored.  You can give it a position argument:</p>

<pre><code>pos = 0
end = len(text)
while pos &lt; end:
    match = regexp.match(text, pos)
    # do something with your match
    pos = match.end()
</code></pre>

<p>Have a look for pygments which ships a shitload of lexers for syntax highlighting purposes with different implementations, most based on regular expressions.</p>
"
255906,"<p>Calling the handler from initialize isn't the right way anyway - if you do that, the webapp will then call the original handler as well.</p>

<p>Instead, you have a couple of options:</p>

<ul>
<li>You can subclass webapp.WSGIApplication and override <strong>call</strong> to select the method based on _method when it exists.</li>
<li>You can check for the existence of _method in initialize, and if it exists, modify the request object's 'REQUEST_METHOD' environment variable accordingly. That will cause the WSGIApplication class to execute the method you choose.</li>
</ul>

<p>Either way, take a look at google/appengine/ext/webapp/<strong>init</strong>.py in the SDK so you can see how it works.</p>
"
135353,"<p>The primary use of lambda has always been for simple callback functions, and for map, reduce, filter, which require a function as an argument. With list comprehensions becoming the norm, and the added allowed if as in:</p>

<pre><code>x = [f for f in range(1, 40) if f % 2]
</code></pre>

<p>it's hard to imagine a real case for the use of lambda in daily use. As a result, I'd say, avoid lambda and create nested functions.</p>
"
135421,"<p>It's possible that combining the token regexes will work, but you'd have to benchmark it. Something like:</p>

<pre><code>x = re.compile('(?P&lt;NUMBER&gt;[0-9]+)|(?P&lt;VAR&gt;[a-z]+)')
a = x.match('9999').groupdict() # =&gt; {'VAR': None, 'NUMBER': '9999'}
if a:
    token = [a for a in a.items() if a[1] != None][0]
</code></pre>

<p>The filter is where you'll have to do some benchmarking...</p>

<p><strong>Update:</strong> I tested this, and it seems as though if you combine all the tokens as stated and write a function like:</p>

<pre><code>def find_token(lst):
    for tok in lst:
        if tok[1] != None: return tok
    raise Exception
</code></pre>

<p>You'll get roughly the same speed (maybe a teensy faster) for this. I believe the speedup must be in the number of calls to match, but the loop for token discrimination is still there, which of course kills it.</p>
"
244664,"<p>It's not pretty but here's a one-liner using a list comprehension, zip and stepping:</p>

<pre><code>[dict(zip(keys, a)) for a in zip(values[::2], values[1::2])]
</code></pre>
"
244817,"<p>AjaxTerm has a terminal, with mostly felicitous terminal emulation, done on the Python backend (it just pushes display updates to the client Javascript).</p>

<p>The <a href=""http://antony.lesuisse.org/qweb/trac/wiki/AjaxTerm"" rel=""nofollow"">AjaxTerm</a> website has been down for some time, but you can still find it <a href=""http://packages.debian.org/etch/ajaxterm"" rel=""nofollow"">packaged</a> in Debian.</p>
"
245042,"<p>I'm not sure what your application is, but you might find the enumerate() function more useful.</p>

<pre><code>&gt;&gt;&gt; items = ['foo', 'bar', 'baz']
&gt;&gt;&gt; for i, item in enumerate(items):
...  print item
...  print i
... 
foo
0
bar
1
baz
2
</code></pre>
"
15938,"<p>For the GUI itself:</p>

<p><a href=""http://wiki.python.org/moin/PyQt"" rel=""nofollow"">PyQT</a> is pretty much the reference.</p>

<p>Another way to develop a rapid user interface is to write a web app,
have it run locally and display the app in the browser.</p>

<p>Plus, if you go for the Tkinter option suggested by lubos hasko
you may want to try portablepy to have your app run on Windows environment
without Python.</p>
"
257582,"<p>Yes, this should work.  There are no convenience functions for the model class in the python wrapper right now but they would be similar to what you wrote:</p>

<pre><code>class Model(object):
  ...
  def transaction_start(self):
    return Redland.librdf_model_transaction_start(self._model)
</code></pre>
"
257853,"<p>Simple message boxes and input boxes can be created using EasyGui, a small library using Tkinter, which Python comes with.</p>

<p>You can get EasyGui here: <a href=""http://easygui.sourceforge.net/"" rel=""nofollow"">http://easygui.sourceforge.net/</a></p>
"
258234,"<p>NOT VALID. Check Brian anwser.</p>

<p>Ok, I just got it :</p>

<pre><code>for x in Exception(""test"") :
    print x
   ....:     
   ....:     
test
</code></pre>

<p>Don't bother ;-)</p>

<p>Anyway, it's good to know.</p>

<p>EDIT : looking to the comments, I feel like adding some explanations.</p>

<p>An exception contains a message you passed to during instantiation :</p>

<pre><code>raise Exception(""test"") 

Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
Exception: test
</code></pre>

<p>It's fair to say that the message is what defines the Exception the best, so str() returns it :</p>

<pre><code>print Exception(""test"") 
test
</code></pre>

<p>Now, it happens that Exceptions are implicitly converted to string when used in something else than an Exception context.</p>

<p>So when I do :</p>

<pre><code>for x in Exception(""test"") :
    print x
</code></pre>

<p>I am iterating over the string ""test"".</p>

<p>And when I do : </p>

<pre><code>for x in Exception() :
    print x
</code></pre>

<p>I do iterate over an empty string. Tricky. Because when it comes to my issue :</p>

<pre><code>try :
    thing.merge(ExceptionLikeObject)
except TypeError :
    ...
</code></pre>

<p>This won't raise anything since ExceptionLikeObject is considered as a string.</p>

<p>Well now, we know the HOW, but I still not the WHY. Maybe the built-in Exception inherit from the built-in String ? Because as far as I know :</p>

<ul>
<li>adding <strong>str</strong> does not make any object iterable.</li>
<li>I bypassed the problem by overloding <strong>iter</strong>, making it raising TypeError !</li>
</ul>

<p>Not a problem anymore, but still a mystery.</p>
"
258329,"<p>I'd recommend modifying your design to include some status field on A.</p>

<p>The issue is one of ""why?""  Why does A have &lt; 2 B's and why does A have >= 2 B's.  Is it because user's didn't enter something?  Or is because they tried and their input had errors.  Or is it because the &lt; 2 rule doesn't apply in this case.</p>

<p>Using presence or absence of a Foreign Key limits the meaning to -- well -- present or absent.  You don't have any way to represent ""why?""</p>

<p>Also, you have the following option</p>

<pre><code>[ a for a in A.objects.all() if a.b_set.count() &lt; 2 ]
</code></pre>

<p>This can be pricey because it does fetch all the A's rather than force the database to do the work.</p>

<p><hr /></p>

<p>Edit: From the comment ""would require me to watch for user join / user leaving the pool events"".</p>

<p>You don't ""watch"" anything -- you provide an API which does what you need.  That's the central benefit of the Django model.  Here's one way, with explict methods in the <code>A</code> class.</p>

<pre><code>class A( models.Model ):
    ....
    def addB( self, b ):
        self.b_set.add( b )
        self.changeFlags()
    def removeB( self, b ):
        self.b_set.remove( b )
        self.changeFlags()
    def changeFlags( self ):
        if self.b_set.count() &lt; 2: self.show= NotYet
        else: self.show= ShowNow
</code></pre>

<p>You can also define a special <code>Manager</code> for this, and replace the default <code>b_set</code> Manager with your manager that counts references and updates <code>A</code>.</p>
"
121651,"<p>I realise this doesn't exactly answer your question, but there's a library called <a href=""http://www.supereffective.org/?p=14"" rel=""nofollow"">Squirtle</a> that will render SVG files using either Pyglet or PyOpenGL.</p>
"
122093,"<p>Hmm... How about (Python):</p>

<pre><code>s = set()
while len(s) &lt;= N: s.update((random.random(),))
</code></pre>
"
135311,"<p>Explicitly specify that your data types (e.g. integers) are 32-bit. Otherwise if you have two integers next to each other when you read them they will be read as one 64-bit integer.</p>

<p>When you are dealing with cross-platform issues, the two main things to watch out for are:</p>

<ol>
<li>Bitness. If your packed data is written with 32-bit ints, then all of your code must explicitly specify 32-bit ints when reading <em>and</em> writing.</li>
<li>Byte order. If you move your code from Intel chips to PPC or SPARC, your byte order will be wrong. You will have to import your data and then byte-flip it so that it matches up with the current architecture. Otherwise 12 (<code>0x0000000C</code>) will be read as 201326592 (<code>0x0C000000</code>).</li>
</ol>

<p>Hopefully this helps.</p>
"
258810,"<p>Another option would be to use the split function, with &amp; as a parameter. That way, you'd extract both the base url and both parameters.</p>

<pre><code>   url.split(""&amp;"")
</code></pre>

<p>returns a list with</p>

<pre><code>  ['http://www.domainname.com/page?CONTENT_ITEM_ID=1234', 'param2', 'param3']
</code></pre>
"
121065,"<p>Some years ago I was looking for the same thing and found this:
<a href=""http://cvs.atamai.com/cgi-bin/viewvc.cgi/atamai/dicom/"" rel=""nofollow"">Python DICOM lib</a></p>

<p>I wasn't too impressed with the code, but it is native Python reading DICOM files.</p>
"
120794,"<p>You can use <a href=""http://www.cairographics.org/"" rel=""nofollow"">Cairo</a> (with PyCairo), which has support for rendering SVGs. The PyGame webpage has a <a href=""http://www.pygame.org/wiki/CairoPygame"" rel=""nofollow"">HOWTO</a> for rendering into a buffer with a Cairo, and using that buffer directly with PyGame.</p>
"
259809,"<p>An easy way to do exactly what you asked in python is </p>

<pre><code>name = ""Thomas Winter""
LastName = name.split()[1]
</code></pre>

<p>(note the parantheses on the function call split.)</p>

<p>split() creates a list where each element is from your original string, delimited by whitespace. You can now grab the second element using name.split()[1] or the last element using name.split()[-1]</p>

<p>However, as others said, unless you're SURE you're just getting a string like ""First_Name  Last_Name"", there are a lot more issues involved. </p>
"
243088,"<p>Stolen directly from django:</p>

<pre><code>def get_svn_revision(path=None):
    rev = None
    if path is None:
        path = MODULE.__path__[0]
    entries_path = '%s/.svn/entries' % path

    if os.path.exists(entries_path):
        entries = open(entries_path, 'r').read()
        # Versions &gt;= 7 of the entries file are flat text.  The first line is
        # the version number. The next set of digits after 'dir' is the revision.
        if re.match('(\d+)', entries):
            rev_match = re.search('\d+\s+dir\s+(\d+)', entries)
            if rev_match:
                rev = rev_match.groups()[0]
        # Older XML versions of the file specify revision as an attribute of
        # the first entries node.
        else:
            from xml.dom import minidom
            dom = minidom.parse(entries_path)
            rev = dom.getElementsByTagName('entry')[0].getAttribute('revision')

    if rev:
        return u'SVN-%s' % rev
    return u'SVN-unknown'
</code></pre>

<p>Adapt as appropriate. YOu might want to change MODULE for the name of one of your codemodules.</p>

<p>This code has the advantage of working even if the destination system does not have subversion installed.</p>
"
339300,"<p>Yes, there are many -- too many -- parsing tools, but none in the standard library.</p>

<p>From what what I saw PLY and SPARK are popular. <a href=""http://www.dabeaz.com/ply/"" rel=""nofollow"">PLY</a> is like yacc, but you do everything in Python because you write your grammar in docstrings.</p>

<p>Personally, I like the concept of parser combinators (taken from functional programming), and I quite like <a href=""http://pyparsing.wikispaces.com/"" rel=""nofollow"">pyparsing</a>: you write your grammar and actions directly in python and it is easy to start with. I ended up producing my own tree node types with actions though, instead of using their default <code>ParserElement</code> type.</p>

<p>Otherwise, you can also use existing declarative language like <a href=""http://www.dabeaz.com/ply/"" rel=""nofollow"">YAML</a>.</p>
"
339893,"<p>Don't try to use strptime to capture the non-date text.  For good fuzzy matching,  dateutil.parser is great, but if you know the format of the date, you could use a regular expression to find the date within the string, then use strptime to turn it into a datetime object, like this:</p>

<pre><code>import datetime
import re

pattern = ""((Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) [0-9]+, [0-9]+)""
datestr = re.search(, s).group(0)
d = datetime.datetime.strptime(datestr, ""%b %d, %Y"")
</code></pre>
"
20843,"<p>Can I mention testing for hardlinks without python? /bin/test has the FILE1 -ef FILE2 condition that is true when files share an inode.</p>

<p>Therefore, something like <code>find . -type f -exec test \{} -ef /path/to/file \; -print</code> works for hard link testing to a specific file.</p>

<p>Which brings me to reading <code>man test</code> and the mentions of <code>-L</code> and <code>-h</code> which both work on one file and return true if that file is a symbolic link, however that doesn't tell you if the target is missing.</p>

<p>I did find that <code>head -0 FILE1</code> would return an exit code of <code>0</code> if the file can be opened and a <code>1</code> if it cannot, which in the case of a symbolic link to a regular file works as a test for whether it's target can be read.</p>
"
180378,"<p><code>SIGPIPE</code> (although I think maybe  you mean <code>EPIPE</code>?) occurs on sockets when you shut down a socket and then send data to it.  The simple solution is not to shut the socket down before trying to send it data.  This can also happen on pipes, but it doesn't sound like that's what you're experiencing, since it's a network server.</p>

<p>You can also just apply the band-aid of catching the exception in some top-level handler in each thread.</p>

<p>Of course, if you used <a href=""http://twistedmatrix.com/"" rel=""nofollow"">Twisted</a> rather than spawning a new thread for each client connection, you probably wouldn't have this problem.  It's really hard (maybe impossible, depending on your application) to get the ordering of close and write operations correct if multiple threads are dealing with the same I/O channel.</p>
"
180433,"<p>This is what I wrote based on <a href=""http://stackoverflow.com/questions/179287/what-is-the-best-way-to-change-text-contained-in-an-xml-file-using-python#179306"">@Ryan's answer</a>:</p>

<pre class=""lang-python prettyprint-override""><code>from xml.dom.minidom import parse
import os

# create a backup of original file
new_file_name = 'MyData.xml'
old_file_name = new_file_name + ""~""
os.rename(new_file_name, old_file_name)

# change text value of element
doc = parse(old_file_name)
node = doc.getElementsByTagName('myElement')
node[0].firstChild.nodeValue = 'bar'

# persist changes to new file
xml_file = open(new_file_name, ""w"")
doc.writexml(xml_file, encoding=""utf-8"")
xml_file.close()
</code></pre>

<p>Not sure if this was the easiest and simplest approach but it does work. (<a href=""http://stackoverflow.com/questions/179287/what-is-the-best-way-to-change-text-contained-in-an-xml-file-using-python#179305"">@Javier's answer</a> has less lines of code but requires non-standard library)</p>
"
191591,"<p>Well, probably the simplest way is just parse the XML into dictionaries and then serialize that with simplejson. </p>
"
179305,"<p>For quick, non-critical XML manipulations, i really like <a href=""http://ponderer.org/p4x"" rel=""nofollow"">P4X</a>. It let's you write like this:</p>

<pre class=""lang-python prettyprint-override""><code>import p4x
doc = p4x.P4X (open(file).read)
doc.myElement = 'bar'
</code></pre>
"
244066,"<p>If you are getting started, I would recommend you <a href=""http://www.easyeclipse.org/site/distributions/python.html"" rel=""nofollow"">python easyeclipse</a>.</p>

<p>Pydev can give some incompatibilities when using it together with other extensions.</p>
"
120214,"<p>From your comment, perhaps what you're really looking for is something like a bunch object:</p>

<pre><code>class Bunch(object):
    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)

b=Bunch(**form.cleaned_data)

print b.first_name, b.last_name
</code></pre>

<p>(The ** syntax is because Bunch-type objects are usually used like Bunch(foo=12, bar='blah') - not used in your case but I've left it for consistency with normal usage)</p>

<p>This does require a ""b."" prefix to access your variables, but if you think about it, this is no bad thing.  Consider what would happen if someone crafted a POST request to overwrite variables you <em>aren't</em> expecting to be overwritten - it makes it easy to produce crashes and DOS attacks, and could easily introduce more serious security vulnerabilities.</p>
"
242254,"<p>Universal Feed Parser is really nice for most feeds, but for extended feeds, you might wanna try something called <a href=""http://crummy.com/software/BeautifulSoup"" rel=""nofollow"">BeautifulSoup</a>. It's an XML/HTML/XHTML parsing library which is originally designed for screenscraping; turns out it's also brilliant for this sort of thing. The documentation is pretty good, and it's got a self-explanatory API, so if you're thinking of using anything else, that's what I'd recommend.</p>

<p>I'd probably use it like this:</p>

<pre><code>&gt;&gt;&gt; import BeautifulSoup
&gt;&gt;&gt; import urllib2

# Fetch HTML data from url
&gt;&gt;&gt; connection = urllib2.urlopen('http://kuler.adobe.com/path/to/rss.xml')
&gt;&gt;&gt; html_data = connection.read()
&gt;&gt;&gt; connection.close()

# Create and search the soup
&gt;&gt;&gt; soup = BeautifulSoup.BeautifulSoup(html_data)
&gt;&gt;&gt; themes = soup.findAll('kuler:themeitem') # Note: all lower-case element names

# Get the ID of the first theme
&gt;&gt;&gt; themes[0].find('kuler:themeid').contents[0]
u'123456'

# Get an ordered list of the hex colors for the first theme
&gt;&gt;&gt; themeswatches = themes[0].find('kuler:themeswatches')
&gt;&gt;&gt; colors = [color.contents[0] for color in
... themeswatches.findAll('kuler:swatchhexcolor')]
&gt;&gt;&gt; colors
[u'FFFFFF', u'000000']
</code></pre>

<p>So you can probably get the idea that this is a very cool library. It wouldn't be too good if you were parsing any old RSS feed, but because the data is from Adobe Kuler, you can be pretty sure that it's not going to vary enough to break your app (i.e. it's a trusted enough source).</p>

<p>Even worse is trying to parse Adobe's goddamn .ASE format. I tried writing a parser for it and it got really horrible, really quickly. Ug. So, yeah, the RSS feeds are probably the easiest way of interfacing with Kuler.</p>
"
242515,"<p>There is a command called <code>svnversion</code> which comes with subversion and is meant to solve exactly that kind of problem.</p>
"
242774,"<p>I don't use <em>pydev</em>, but to drop to python's interactive REPL from code:</p>

<pre><code>import code
code.interact(local=locals())
</code></pre>

<p>To drop to python's debugger from code:</p>

<pre><code>import pdb
pdb.set_trace()
</code></pre>

<p>Finally, to run a interactive REPL after running some code, you can use python's <code>-i</code> switch:</p>

<pre><code>python -i script.py
</code></pre>

<p>That will give you a python prompt after the code, even if it throws an exception.</p>

<p>You may be able to hook some of those solutions into <em>pydev</em>, I think.</p>
"
119718,"<p>See <a href=""http://en.wikipedia.org/wiki/Longest_common_substring_problem"" rel=""nofollow"">the longest common substring problem</a>. I guess difflib uses the DP solution, which is certainly too slow to compare executables. You can do much better with suffix trees/arrays.</p>

<p>Using perl <a href=""http://search.cpan.org/~gray/Tree-Suffix-0.20/lib/Tree/Suffix.pm"" rel=""nofollow"">Tree::Suffix</a> might be easiest solution. Apparently it gives all common substrings in a specified length range:</p>

<pre><code>@lcs = $tree-&gt;lcs;
@lcs = $tree-&gt;lcs($min_len, $max_len);
@lcs = $tree-&gt;longest_common_substrings;
</code></pre>
"
119963,"<p>XML-RPC doesn't really have a concept of 'keyword arguments', so xmlrpclib doesn't try to support them. You would need to pick a convention, then modify xmlrpclib._Method to accept keyword arguments and pass them along using that convention.</p>

<p>For instance, I used to work with an XML-RPC server that passed keyword arguments as two arguments, '-KEYWORD' followed by the actual argument, in a flat list. I no longer have access to the code I wrote to access that XML-RPC server from Python, but it was fairly simple, along the lines of:</p>

<pre><code>import xmlrpclib

_orig_Method = xmlrpclib._Method

class KeywordArgMethod(_orig_Method):     
    def __call__(self, *args, **kwargs):
        if args and kwargs:
            raise TypeError, ""Can't pass both positional and keyword args""
        args = list(args) 
        for key in kwargs:
            args.append('-%s' % key.upper())
            args.append(kwargs[key])
       return _orig_Method.__call__(self, *args)     

xmlrpclib._Method = KeywordArgMethod
</code></pre>

<p>It uses monkeypatching because that's by far the easiest method to do this, because of some clunky uses of module globals and name-mangled attributes (__request, for instance) in the ServerProxy class.</p>
"
261008,"<p>For numeric data, <a href=""http://numpy.scipy.org/"" rel=""nofollow"">Numpy Arrays</a>:</p>

<pre><code>&gt;&gt;&gt; matrix1 = array(([0,1],[1,3]))
&gt;&gt;&gt; print matrix1
[[0 1]
[1 3]]
</code></pre>

<p>For general data (e.g. strings), you can use a list of lists, list of tuples, ...</p>

<pre><code>matrix2 = [['a','b'], ['x','y']]
</code></pre>
"
118879,"<pre><code>import subprocess
subprocess.call(['find', '~/podcasts/current', '-mindepth', '2', '-mtime', '+5',
                 '-exec', 'mv', '{}', '~/podcasts/old', ';'], shell=True)
</code></pre>

<p>That is not a joke. This python script will do exactly what the bash one does.</p>

<p><strong>EDIT</strong>: Dropped the backslash on the last param because it is not needed.</p>
"
119224,"<p>It can't hurt to learn Python, especially considering some of the heavy weights (Google) are really getting behind it.</p>

<p>As for the actual use, it all depends on the application.  Use the best tool for the job.</p>
"
241557,"<pre><code># Given two lists of strings, return a list of all ways to concatenate
# one from each.
def combos(xs, ys):
    return [x + y for x in xs for y in ys]

digits = ['0', '1']
for c in combos(digits, combos(digits, digits)):
    print c

#. 000
#. 001
#. 010
#. 011
#. 100
#. 101
#. 110
#. 111
</code></pre>
"
241652,"<p>The Python <strong>Py_InitModule</strong> API function allows you to create a module from c/c++ functions which can then be call from Python. </p>

<p>It takes about a dozen or so lines of c/c++ code to achieve but it is pretty easy code to write:</p>

<p><a href=""https://python.readthedocs.org/en/v2.7.2/extending/extending.html#the-module-s-method-table-and-initialization-function"" rel=""nofollow"">https://python.readthedocs.org/en/v2.7.2/extending/extending.html#the-module-s-method-table-and-initialization-function</a></p>

<p>The <a href=""http://www.zeusedit.com"" rel=""nofollow"">Zeus</a> editor that I wrote, uses this appoach to allow <a href=""http://www.zeusedit.com"" rel=""nofollow"">Zeus</a> macros to be written in Python and it works very well.</p>
"
242141,"<p>A naÃ¯ve solution which solves the problem and is general enough for any application you might have is this:</p>

<pre><code>def combinations(words, length):
    if length == 0:
        return []
    result = [[word] for word in words]
    while length &gt; 1:
        new_result = []
        for combo in result:
            new_result.extend(combo + [word] for word in words)
        result = new_result[:]
        length -= 1
    return result
</code></pre>

<p>Basically, this gradually builds up a tree in memory of all the combinations, and then returns them. It is memory-intensive, however, and so is impractical for large-scale combinations.</p>

<p>Another solution for the problem is, indeed, to use counting, but then to transform the numbers generated into a list of words from the wordlist. To do so, we first need a function (called <code>number_to_list()</code>):</p>

<pre><code>def number_to_list(number, words):
    list_out = []
    while number:
        list_out = [number % len(words)] + list_out
        number = number // len(words)
    return [words[n] for n in list_out]
</code></pre>

<p>This is, in fact, a system for converting decimal numbers to other bases. We then write the counting function; this is relatively simple, and will make up the core of the application:</p>

<pre><code>def combinations(words, length):
    numbers = xrange(len(words)**length)
    for number in numbers:
        combo = number_to_list(number, words)
        if len(combo) &lt; length:
            combo = [words[0]] * (length - len(combo)) + combo
        yield combo
</code></pre>

<p>This is a Python generator; making it a generator allows it to use up less RAM. There is a little work to be done after turning the number into a list of words; this is because these lists will need padding so that they are at the requested length. It would be used like this:</p>

<pre><code>&gt;&gt;&gt; list(combinations('01', 3))
[['0', '0', '0'], ['0', '0', '1'],
['0', '1', '0'], ['0', '1', '1'],
['1', '0', '0'], ['1', '0', '1'],
['1', '1', '0'], ['1', '1', '1']]
</code></pre>

<p>As you can see, you get back a list of lists. Each of these sub-lists contains a sequence of the original words; you might then do something like <code>map(''.join, list(combinations('01', 3)))</code> to retrieve the following result:</p>

<pre><code>['000', '001', '010', '011', '100', '101', '110', '111']
</code></pre>

<p>You could then write this to disk; a better idea, however, would be to use the built-in optimizations that generators have and do something like this:</p>

<pre><code>fileout = open('filename.txt', 'w')
fileout.writelines(
    ''.join(combo) for combo in combinations('01', 3))
fileout.close()
</code></pre>

<p>This will only use as much RAM as necessary (enough to store one combination). I hope this helps.</p>
"
177308,"<p>Words listed by absolute value of big:</p>

<pre><code>select word, big from myTable order by abs(big)
</code></pre>

<p>totals for each category:</p>

<pre><code>select sum(abs(big)) as sumbig, 
       sum(abs(expensive)) as sumexpensive,   
       sum(abs(smart)) as sumsmart,
       sum(abs(fast)) as sumfast
  from MyTable;
</code></pre>
"
22525,"<p>What Jason Pratt posted is correct.</p>

<pre><code>&gt;&gt;&gt; class Test(object):
...   def a(self):
...     pass
... 
&gt;&gt;&gt; def b(self):
...   pass
... 
&gt;&gt;&gt; Test.b = b
&gt;&gt;&gt; type(b)
&lt;type 'function'&gt;
&gt;&gt;&gt; type(Test.a)
&lt;type 'instancemethod'&gt;
&gt;&gt;&gt; type(Test.b)
&lt;type 'instancemethod'&gt;
</code></pre>

<p>As you can see, Python doesn't consider b() any different than a(). In Python all methods are just variables that happen to be functions. </p>
"
338287,"<p>There doesn't seem to be a way. You can, however, use <code>wxWindow::GetTextExtent</code>. This is C++ code, but can be easily adapted to wxPython:</p>

<pre><code>int x, y;
textCtrl-&gt;GetTextExtent(wxT(""T""), &amp;x, &amp;y);
textCtrl-&gt;SetMinSize(wxSize(x * N + 10, -1));
textCtrl-&gt;SetMaxSize(wxSize(x * N + 10, -1));

/* re-layout the children*/
this-&gt;Layout(); 

/*  alternative to Layout, will resize the parent to fit around the new 
 *  size of the text control. */
this-&gt;GetSizer()-&gt;SetSizeHints(this);
this-&gt;Fit();
</code></pre>

<p>This is, you take the size of a reasonable width character (fonts may have variable width characters) and multiply it properly, adding some small value to account for native padding (say, 10px).</p>
"
177939,"<p>I am somewhat new to Python as well, but from what I understand: </p>

<p>Although you can install multiple versions of the ""same"" egg (having the same name), only one of them will be available to any particular piece of code at runtime (based on your discovery method).  So if your egg is the one calling this code, it must have already been selected as <em>the</em> version of <code>my_project</code> for this code, and your access will be to your own version.</p>
"
178185,"<h2>The basic Algorithm</h2>

<p>I'd sort the players by their rank, as the high ranked ones always push away the low ranked ones. Then you start with the player with the highest rank, give him what he asked for (if he really is the highest, he will always win, thus you can as well give him whatever he requested). Then I would start with the second highest one. If he requested something already taken by the highest, try to find a slot nearby and assign this slot to him. Now comes the third highest one. If he requested something already taken by the highest one, move him to a slot nearby. If this slot is already taken by the second highest one, move him to a slot some further away. Continue with all other players.</p>

<h3>Some tunings to consider:</h3>

<p>If multiple players can have the same rank, you may need to implement some ""fairness"". All players with equal rank will have a random order to each other if you sort them e.g. using QuickSort. You can get some some fairness, if you don't do it player for player, but rank for rank. You start with highest rank and the first player of this rank. Process his first request. However, before you process his second request, process the first request of the next player having highest rank and then of the third player having highest rank. The algorithm is the same as above, but assuming you have 10 players and player 1-4 are highest rank and players 5-7 are low and players 8-10 are very low, and every player made 3 requests, you process them as</p>

<pre><code>Player 1 - Request 1
Player 2 - Request 1
Player 3 - Request 1
Player 4 - Request 1
Player 1 - Request 2
Player 2 - Request 2
:
</code></pre>

<p>That way you have some fairness. You could also choose randomly within a ranking class each time, this could also provide some fairness.</p>

<p>You could implement fairness even across ranks. E.g. if you have 4 ranks, you could say</p>

<pre><code>Rank 1 - 50%
Rank 2 - 25%
Rank 3 - 12,5%
Rank 4 - 6,25%
</code></pre>

<p>(Just example values, you may use a different key than always multiplying by 0.5, e.g. multiplying by 0.8, causing the numbers to decrease slower)</p>

<p>Now you can say, you start processing with Rank 1, however once 50% of all Rank 1 requests have been fulfilled, you move on to Rank 2 and make sure 25% of their requests are fulfilled and so on. This way even a Rank 4 user can win over a Rank 1 user, somewhat defeating the initial algorithm, however you offer some fairness. Even a Rank 4 player can sometimes gets his request, he won't ""run dry"". Otherwise a Rank 1 player scheduling every request on the same time as a Rank 4 player will make sure a Rank 4 player has no chance to ever get a single request. This way there is at least a small chance he may get one.</p>

<p>After you made sure everyone had their minimal percentage processed (and the higher the rank, the more this is), you go back to top, starting with Rank 1 again and process the rest of their requests, then the rest of the Rank 2 requests and so on.</p>

<p><strong>Last but not least:</strong> You may want to define a maximum slot offset. If a slot is taken, the application should search for the nearest slot still free. However, what if this nearest slot is very far away? If I request a slot Monday at 4 PM and the application finds the next free one to be Wednesday on 9 AM, that's not really helpful for me, is it? I might have no time on Wednesday at all. So you may limit slot search to the same day and saying the slot might be at most 3 hours off. If no slot is found within that range, cancel the request. In that case you need to inform the player ""We are sorry, but we could not find any nearby slot for you; please request a slot on another date/time and we will see if we can find a suitable slot there for you"".</p>
"
136234,"<p>I recently ported a PHP app to Python using <a href=""http://webpy.org/"" rel=""nofollow"">web.py</a>.  As frameworks go it is extremely lightweight with minimal dependencies, and it tends to stay out of your way, so it might be the compromise you're looking for. </p>

<p>It all depends on your initial application though, because with a large application the advantages of having a full-featured framework handling the plumbing tend to outweigh the disadvantages involved in having to drag around all the framework code.</p>
"
118823,"<p>I wouldn't uninstall it since many scripts will expect python to be in the usual places when they do not follow  convention and use <code>#!/usr/bin/env python</code>. You should simply edit your <code>.profile</code> or <code>.bash_profile</code> so the macports binaries are the first in your path.</p>

<p>Your <code>.profile</code> should have this line: </p>

<pre><code>export PATH=/opt/local/bin:/opt/local/sbin:$PATH
</code></pre>

<p>If not, add it in, and now your shell will search macport's <code>bin/</code> first, and should find macports python before system python.</p>
"
118236,"<p>If you don't want to have MySQL do the work for some reason, then you can do this in Python easily enough.  When you get a datetime column back from MySQLdb, you get a Python datetime.datetime object.  To convert one of these, you can use time.mktime.  For example:</p>

<pre><code>import time
# Connecting to database skipped (also closing connection later)
c.execute(""SELECT my_datetime_field FROM my_table"")
d = c.fetchone()[0]
print time.mktime(d.timetuple())
</code></pre>
"
263804,"<p>gksudo should have a timeout, I believe it's from the time you last executed a gksudo command.</p>

<p>So I think I'd just throw out a ""gksudo echo meh"" or something every minute.  Should reset the timer and keep you active until you reboot.</p>
"
241169,"<p><a href=""http://www.python.org/doc/2.5.2/ref/new-style-attribute-access.html"" rel=""nofollow""><code>__getattribute__</code></a></p>
"
241333,"<p>you may be able to leverage <a href=""http://www.language-binding.net/pyplusplus/pyplusplus.html"" rel=""nofollow"">py++</a> to parse the C++ source with GCC.</p>

<blockquote>
  <p>Py++ does not reinvent the wheel. It
  uses GCC C++ compiler to parse C++
  source files. To be more precise, the
  tool chain looks like this:</p>
  
  <p>source code is passed to GCC-XML
  GCC-XML passes it to GCC C++ compiler
  GCC-XML generates an XML description
  of a C++ program from GCC's internal
  representation. Py++ uses pygccxml
  package to read GCC-XML generated
  file. The bottom line - you can be
  sure, that all your declarations are
  read correctly.</p>
</blockquote>

<p>or, maybe not.  regardless, this is not a trivial parse.</p>

<p>@ RE based solutions - you are unlikely to find a RE that handles all possible 'awkward' cases correctly, unless you constrain input (e.g. no macros).  for a bulletproof solution, you really have no choice than leveraging the real grammar.</p>
"
28349,"<p>@<a href=""http://stackoverflow.com/questions/28165/does-php-have-an-equivalent-to-this-type-of-python-string-substitution#28199"" rel=""nofollow"">Marius</a></p>

<p>I don't know if it's faster, but you can do it without regexes:</p>

<pre><code>function subst($str, $dict)
{
  foreach ($dict AS $key, $value)
  {
    $str = str_replace($key, $value, $str);
  }

  return $str;
}
</code></pre>
"
336583,"<p>If you use <a href=""http://www.pygtk.org/"" rel=""nofollow"">PyGTK</a> with <a href=""http://glade.gnome.org/"" rel=""nofollow"">glade</a> and <a href=""http://www.pixelbeat.org/libs/libglade.py"" rel=""nofollow"">this glade wrapper</a>, then PyGTK actually becomes somewhat pythonic. A little at least.</p>

<p>Basically, you create the GUI layout in Glade. You also specify event callbacks in glade. Then you write a class for your window like this:</p>

<pre><code>class MyWindow(GladeWrapper):
    GladeWrapper.__init__(self, ""my_glade_file.xml"", ""mainWindow"")
    self.GtkWindow.show()

    def button_click_event (self, *args):
        self.button1.set_label(""CLICKED"")
</code></pre>

<p>Here, I'm assuming that I have a GTK Button somewhere called <em>button1</em> and that I specified *button_click_event* as the <em>clicked</em> callback. The glade wrapper takes a lot of effort out of event mapping.</p>

<p>If I were to design a Pythonic GUI library, I would support something similar, to aid rapid development. The only difference is that I would ensure that the widgets have a more pythonic interface too. The current PyGTK classes seem very C to me, except that I use foo.bar(...) instead of bar(foo, ...) though I'm not sure exactly what I'd do differently. Probably allow for a Django models style declarative means of specifying widgets and events in code and allowing you to access data though iterators (where it makes sense, eg widget lists perhaps), though I haven't really thought about it.</p>
"
25123,"<p>Look at the struct package: <a href=""https://docs.python.org/library/struct.html"" rel=""nofollow"">https://docs.python.org/library/struct.html</a>, it allows you to interpret strings as packed binary data.</p>

<p>Not sure if this will completely answer your question but you can use struct.unpack() to convert binary data to python objects.</p>

<pre>
<code>
import struct
f = open(filename, ""rb"")
s = f.read(8)
x, y = struct.unpack("">hl"", s)
</code>
</pre>

<p>int this example, the "">"" tells to read big-endian the ""h"" reads a 2-byte short, and the ""l"" is for a 4-byte long. you can obviously change these to whatever you need to read out of the binary data...</p>
"
22630,"<p>You can use C style string formatting:</p>

<pre><code>""%d:%d:d"" % (hours, minutes, seconds)
</code></pre>

<p>See here, especially: <a href=""https://web.archive.org/web/20120415173443/http://diveintopython3.ep.io/strings.html"" rel=""nofollow"">https://web.archive.org/web/20120415173443/http://diveintopython3.ep.io/strings.html</a></p>
"
23510,"<p>In addition to the process management code in the os module that Greg pointed out, you should also take a look at the threading module: <a href=""https://docs.python.org/library/threading.html"" rel=""nofollow"">https://docs.python.org/library/threading.html</a></p>

<pre><code>from threading import Thread

def separate_computations(x, y):
    print sum(x for i in range(y))  # really expensive multiplication

Thread(target=separate_compuations, args=[57, 83]).start()
print ""I'm continuing while that other function runs in another thread!""
</code></pre>
"
193217,"<p>What's wrong with the following?</p>

<pre><code>class Cancellation( models.Model ):
    blah
    blah
    def save( self, **kw ):
        for a in self.activity_set.all():
            a.somethingChanged( self )
        super( Cancellation, self ).save( **kw )
</code></pre>

<p>It would allow you to to control the notification among models very precisely.  In a way, this is the canonical ""Why is OO so good?"" question.  I think OO is good precisely because your collection of Cancellation and Activity objects can cooperate fully.</p>
"
136870,"<p>Use bind variables instead of literal values in the sql statements and create a cursor for 
each unique sql statement so that the statement does not need to be reparsed the next time it is used.  From the python db api doc:</p>

<blockquote>
  <p>Prepare and execute a database
  operation (query or command). 
  Parameters may be provided as sequence
  or mapping and will be bound to
  variables in the operation. Variables
  are specified in a database-specific
  notation (see the module's paramstyle
  attribute for details). [5]</p>
  
  <p>A reference to the operation will be
  retained by the cursor.  If the same
  operation object is passed in again,
  then the cursor can optimize its
  behavior.  This is most effective for
  algorithms where the same operation is
  used, but different parameters are
  bound to it (many times).</p>
</blockquote>

<p>ALWAYS ALWAYS ALWAYS use bind variables.</p>
"
137002,"<p>In the for loop, you're inserting into the 'chats' table repeatedly, so you only need a single sql statement with bind variables, to be executed with different values.  So you could put this before the for loop:</p>

<pre><code>insert_statement=""""""
    INSERT INTO chats(person_id, message_type, created_at, channel)
    VALUES(:person_id,:message_type,:created_at,:channel)
""""""
</code></pre>

<p>Then in place of each sql statement you execute put this in place:</p>

<pre><code>cursor.execute(insert_statement, person_id='person',message_type='msg',created_at=some_date, channel=3)
</code></pre>

<p>This will make things run faster because:</p>

<ol>
<li>The cursor object won't have to reparse the statement each time</li>
<li>The db server won't have to generate a new execution plan as it can use the one it create previously.</li>
<li>You won't have to call santitize() as special characters in the bind variables won't part of the sql statement that gets executed.</li>
</ol>

<p>Note: The bind variable syntax I used is Oracle specific.  You'll have to check the psycopg2 library's documentation for the exact syntax.</p>

<p>Other optimizations:</p>

<ol>
<li>You're incrementing with the ""UPDATE people SET chatscount"" after each loop iteration.  Keep a dictionary mapping user to chat_count and then execute the statement of the total number you've seen.  This will be faster then hitting the db after every record.</li>
<li>Use bind variables on ALL your queries.  Not just the insert statement, I choose that as an example.</li>
<li>Change all the find_*() functions that do db look ups to cache their results so they don't have to hit the db every time.</li>
<li>psycho optimizes python programs that perform a large number of numberic operation.  The script is IO expensive and not CPU expensive so I wouldn't expect to give you much if any optimization.</li>
</ol>
"
264715,"<p>As others pointed out the answer is to replace: <code>x_past = x_present</code> by <code>x_past = x_present[:]</code>. In general you could use a <code>copy</code> module to copy an object in Python.</p>

<pre><code>&gt;&gt;&gt; import copy
&gt;&gt;&gt; a = range(10)
&gt;&gt;&gt; a
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; a += 10, 11
&gt;&gt;&gt; a
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
&gt;&gt;&gt; b
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
&gt;&gt;&gt; c = copy.copy(a) # shallow copy
&gt;&gt;&gt; c
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
&gt;&gt;&gt; del a[3:]
&gt;&gt;&gt; a
[0, 1, 2]
&gt;&gt;&gt; b
[0, 1, 2]
&gt;&gt;&gt; c
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
</code></pre>

<p>Your code is unpythonic to say the least.</p>

<p>It could be replaced by something like the following code:</p>

<pre><code>import copy
# assert(len(x_present) &gt;= len(eqn))

first = True
while True:
    x_past = copy.copy(x_present) # copy

    for j, eqj in enumerate(eqn):
        x_present[j] = sum(x_present[k] * eqj[k] 
                           for k in range(j if first else len(eqj)) 
                           if k != j)
        x_present[j] += eqj[j] 

    print ""X_PAST\n%s\nX_PRESENT\n%s"" % (x_past, x_present)
    if allequal(x_past, x_present, tolerance=10**-2):
        break
    first = False
</code></pre>

<p>Here's a definition of <code>allequal()</code> (using an absolute error. It might or might not be a good idea in your case (you could use a relative error instead)):</p>

<pre><code>def allequal(x, y, tolerance):
    return (len(x) == len(y) and 
            all(-tolerance &lt; (xx - yy) &lt; tolerance
                for xx, yy in zip(x, y)))
</code></pre>
"
117712,"<p>TeamCity has some Python <a href=""http://www.jetbrains.net/confluence/display/TW/Python+Unit+Test+Reporting"" rel=""nofollow"">integration</a>.</p>

<p>But TeamCity is:</p>

<ul>
<li>not open-source</li>
<li>is not small, but rather feature rich</li>
<li>is free for small-mid teams.</li>
</ul>
"
264913,"<p>Likes:</p>

<ul>
<li>Pythonic (I can easily grok the language) and thus extend any part easily</li>
<li>Documentation,</li>
<li>community (I belong to the french one and they're very nice)</li>
<li>a full load of projects around it</li>
<li>full-integrated test engine. You can almost test a whole application without firing a web browser, just by writing tests.</li>
<li>the custom commands just rock. It allows you to perform custom tasks very easily, in a snap. I often use it to run batch tasks (cleanup a database, for example, or check for integrity on a production server - tests use their own database, not the actual data in your application).</li>
</ul>

<p>Why switch?</p>

<ul>
<li>got bored of PHP-from-scratch.</li>
<li>had a RSI at the back of my hand, very painful. after switching to a semicolon-free language, it vanished (it's TRUE!)</li>
<li>much more solid developpement (TDD), and faster (you can buid a CMS in minutes) - as many other web framework, though.</li>
</ul>

<p>Dislikes:</p>

<ul>
<li>no smooth data model migration. You often have to change your model because of an unexpected feature. That is painful, and you have to build it by hand, and it may be risky sometimes.</li>
</ul>

<p>How hard to master?</p>

<ul>
<li>If you already have Python skills, you can build up things in a few hours.</li>
<li>If you don't, first dive into Python (heh) - that'd take a few days.</li>
<li>""Mastering"" it may take some time... And you often discover gems in Django documentation that will make you yell ""I love Django!"" (well, it works for me)</li>
</ul>
"
265884,"<p>it is theoretically possible, but you are making things incredibly difficult for yourself.  You have a number of problems here:</p>

<p>1) You are using space as a separator and you are also allowing spaces in the path names.  You can avoid this by forcing the application to use paths without spaces in them.</p>

<p>2) You have 2 optional parameters on the end.  This means that with the line ending ""C:\LogTo Path 256 300"" you have no idea if the path is C:\LogTo Path 256 300 with no optional parameters or C:\Log To Path 256 with one optional parameter or C:\LogTo Path with 2 optional parameters.</p>

<p>This would be easily remedied with a replacement algorithm on the output.  Replacing spaces with underscore and underscore with double underscore.  Therefore you could reverse this reliably after you have split the log file on spaces.</p>

<p>Even as a human you could not reliably perform this function 100%.  </p>

<p>If you presume that all paths either end with a asterisk, a backslash or .log you could use positive lookahead to find the end of the paths, but without some kind of rules regarding this you are stuffed.</p>

<p>I get the feeling that a single regex would be too difficult for this and would make anyone trying to maintain the code insane.  I am a regex whore, using them whenever possible and I would not attempt this. </p>
"
238479,"<p>The Tigris.org's pre-complied python bindings for libsvn are a separate download. The latest as of Oct 27 could be found <a href=""http://subversion.tigris.org/files/documents/15/44104/svn-win32-1.5.4_py25.zip"" rel=""nofollow"">here</a>.</p>

<p>There are other binary SVN distributions listed <a href=""http://subversion.tigris.org/getting.html#windows"" rel=""nofollow"">here</a>, and they probably have different policy for bundling the python bindings.</p>
"
238564,"<p>Well, there is a system called <a href=""http://pypi.python.org/pypi/virtualenv"" rel=""nofollow"">virtualenv</a> which allows you to run Python in a sort of safe environment, and configure/load/shutdown these environments on the fly. I don't know much about it, but you should take a serious look into it; here is the description from its web page (just Google it and you'll find it):</p>

<blockquote>
  <p>The basic problem being addressed is one of dependencies and versions, and indirectly permissions. Imagine you have an application that needs version 1 of LibFoo, but another application requires version 2. How can you use both these applications? If you install everything into /usr/lib/python2.4/site-packages (or whatever your platform's standard location is), it's easy to end up in a situation where you unintentionally upgrade an application that shouldn't be upgraded.</p>
  
  <p>Or more generally, what if you want to install an application and leave it be? If an application works, any change in its libraries or the versions of those libraries can break the application.</p>
  
  <p>Also, what if you can't install packages into the global site-packages directory? For instance, on a shared host.</p>
  
  <p>In all these cases, virtualenv can help you. It creates an environment that has its own installation directories, that doesn't share libraries with other virtualenv environments (and optionally doesn't use the globally installed libraries either).</p>
</blockquote>
"
176825,"<p>Supply your own authentication routine, then you can check (or not check) anything you like. We do this so if they fail on normal username, we can also let them in on email/password (although that's not what I'm showing below).</p>

<p>in settings.py:</p>

<pre><code>AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'userprofile.my_authenticate.MyLoginBackend', # if they fail the normal test
 )
</code></pre>

<p>in userprofile/my_authenticate.py:</p>

<pre><code>from django.contrib.auth.backends import ModelBackend
from django.contrib.auth.models import User

class MyLoginBackend(ModelBackend):
    """"""Return User record if username + (some test) is valid.
       Return None if no match.
    """"""

    def authenticate(self, username=None, password=None, request=None):
        try:
            user = User.objects.get(username=username)
            # plus any other test of User/UserProfile, etc.
            return user # indicates success
        except User.DoesNotExist:
            return None
    # authenticate
# class MyLoginBackend
</code></pre>
"
29169,"<p>Actually, you definitely can, and it's beautiful, ugly, and crazy at the same time!</p>

<p>You can replace sys.stdout and sys.stderr with StringIO objects that collect the output.</p>

<p>Here's an example, save it as evil.py:</p>

<pre><code>import sys
import StringIO

s = StringIO.StringIO()

sys.stdout = s

print ""hey, this isn't going to stdout at all!""
print ""where is it ?""

sys.stderr.write('It actually went to a StringIO object, I will show you now:\n')
sys.stderr.write(s.getvalue())
</code></pre>

<p>When you run this program, you will see that:</p>

<ul>
<li>nothing went to stdout (where print usually prints to)</li>
<li>the first string that gets written to stderr is the one starting with 'It'</li>
<li>the next two lines are the ones that were collected in the StringIO object</li>
</ul>

<p>Replacing sys.stdout/err like this is an application of what's called monkeypatching.  Opinions may vary whether or not this is 'supported', and it is definitely an ugly hack, but it has saved my bacon when trying to wrap around external stuff once or twice.</p>

<p>Tested on Linux, not on Windows, but it should work just as well.  Let me know if it works on Windows!</p>
"
29264,"<p>I found a <a href=""http://www.boddie.org.uk/python/XML_intro.html"" rel=""nofollow"">pretty verbose tutorial on the minidom method</a></p>

<p>Here's a <a href=""http://drfox.com/cgi-bin/topic_display.py?name=climbing_etree"" rel=""nofollow"">tutorial for the etree method</a>. It's much nicer to read, and seems quite simple. It also goes over parsing of xml (briefly)</p>
"
335922,"<p>Some helpful links:</p>

<p><a href=""http://support.apple.com/kb/HT2420"" rel=""nofollow"">Mac OS X: Creating a login hook</a></p>

<p><a href=""http://www.informit.com/library/content.aspx?b=Mac_OS_X_Unleashed&amp;seqNum=153"" rel=""nofollow""> Making Shell Scripts Start at Login or System Startup</a></p>

<p>See also <a href=""http://tuppis.com/lingon/"" rel=""nofollow"">Lingon</a> for a front end, should you decide to use Launchd instead.</p>
"
336229,"<p>Note that the ""^"" symbol in the error points exactly to the erroneous column. Together with the line number it points exactly on the digit 8. This can help lead you to what Jeremy suggested.</p>
"
26654,"<p>For None there shouldn't be a difference between equality (==) and identity (is). The NoneType probably returns identity for equality. Since None is the only instance you can make of NoneType (I think this is true), the two operations are the same. In the case of other types this is not always the case. For example:</p>

<pre><code>list1 = [1, 2, 3]
list2 = [1, 2, 3]
if list1==list2: print ""Equal""
if list1 is list2: print ""Same""
</code></pre>

<p>This would print ""Equal"" since lists have a comparison operation that is not the default returning of identity.</p>
"
193823,"<p>Best way to go about it would be to use the ctypes library and use WinMM from that.  mixerOpen will open a microphone device and you can read the data easily from there.  Should be very straightforward.</p>
"
194085,"<p>Others have covered most of the ground here but I just wanted to add one case where I will use <code>import X as Y</code> (temporarily), when I'm trying out a new version of a class or module.</p>

<p>So if we were migrating to a new implementation of a module, but didn't want to cut the code base over all at one time, we might write a <code>xyz_new</code> module and do this in the source files that we had migrated:</p>

<pre><code>import xyz_new as xyz
</code></pre>

<p>Then, once we cut over the entire code base, we'd just replace the <code>xyz</code> module with <code>xyz_new</code> and change all of the imports back to</p>

<pre><code>import xyz
</code></pre>
"
194096,"<p>DON'T do this:</p>

<pre><code>from X import *
</code></pre>

<p>unless you are absolutely sure that you will use each and every thing in that module.  And even then, you should probably reconsider using a different approach.</p>

<p>Other than that, it's just a matter of style.</p>

<pre><code>from X import Y
</code></pre>

<p>is good and saves you lots of typing.  I tend to use that when I'm using something in it fairly frequently  But if you're importing a lot from that module, you could end up with an import statement that looks like this:</p>

<pre><code>from X import A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P
</code></pre>

<p>You get the idea.  That's when imports like</p>

<pre><code>import X
</code></pre>

<p>become useful.  Either that or if I'm not really using anything in X very frequently.</p>
"
238906,"<p>Silly me:</p>

<pre><code>[lib/postgresql83] &gt; variants postgresql83
 postgresql83 has the variants:
    universal
    python: add support for python
    krb5: add support for Kerberos 5 authentication
    perl: add Perl support
</code></pre>

<p>(I'd had <code>universal</code>.)</p>

<p>This means that you have to install the right variant of PostgreSQL to make your python functions fly.</p>

<pre><code>$ sudo port install postgresql83 +python postgresql-server +python
</code></pre>
"
239326,"<p>A set is good way to deal with that:</p>

<pre><code>&gt;&gt;&gt; a = ['google.com', 'livejournal.com', 'livejournal.com', 'google.com', 'stackoverflow.com']
&gt;&gt;&gt; b = set(a)
&gt;&gt;&gt; b
set(['livejournal.com', 'google.com', 'stackoverflow.com'])
&gt;&gt;&gt;
</code></pre>

<p>One suggestion w/r/t the first answer, is that sets and dicts are better at retrieving unique results quickly, membership in lists is O(n) versus O(1) for the other types, so if you want to store additional data, or do something like create the mentioned <code>unique_results</code> list, it may be better to do something like:</p>

<pre><code>unique_results = {}
&gt;&gt;&gt; for item in a:
    unique_results[item] = ''


&gt;&gt;&gt; unique_results
{'livejournal.com': '', 'google.com': '', 'stackoverflow.com': ''}
</code></pre>
"
117258,"<p>You need to tell Python to use floating point values, not integers. You can do that simply by using a decimal point yourself in the inputs:</p>

<pre><code>&gt;&gt;&gt; 4/100.0
0.040000000000000001
</code></pre>
"
268054,"<p>From the  <a href=""http://peak.telecommunity.com/DevCenter/EasyInstall#command-line-options"" rel=""nofollow"">EasyInstall</a> doc, command line options:</p>

<blockquote>
  <p>--always-unzip, -Z</p>
  
  <p>Don't install any packages as zip files, even if the packages are marked as safe for running as a zipfile. </p>
</blockquote>

<p>Can you use <em>easyinstall</em> instead of calling setup.py ? </p>

<p>calling  <code>easy_install -Z mysql_python</code> from the command prompt, finds the egg on the net and installs it.</p>
"
268303,"<p>Thanks, very elegant, I didn't remember that max allows a ""key"" parameter.</p>

<p>BTW, to get the right answer ('b') it has to be:</p>

<pre><code>import operator
stats = {'a':1000, 'b':3000, 'c': 100}
max(stats.iteritems(), key=operator.itemgetter(1))[0]
</code></pre>
"
138053,"<p>Use reflection for this.</p>

<p><a href=""http://msdn.microsoft.com/en-us/library/system.type.getproperty.aspx"" rel=""nofollow""><code>Type.GetProperty()</code></a> and <a href=""http://msdn.microsoft.com/en-us/library/system.type.getproperty.aspx"" rel=""nofollow""><code>Type.GetProperties()</code></a> each return <a href=""http://msdn.microsoft.com/en-us/library/system.reflection.propertyinfo.aspx"" rel=""nofollow""><code>PropertyInfo</code></a> instances, which can be used to read a property value on an object.</p>

<pre><code>var result = typeof(DateTime).GetProperty(""Year"").GetValue(dt, null)
</code></pre>

<p><a href=""http://msdn.microsoft.com/en-us/library/system.type.getmethod.aspx"" rel=""nofollow""><code>Type.GetMethod()</code></a> and <a href=""http://msdn.microsoft.com/en-us/library/system.type.getmethods.aspx"" rel=""nofollow""><code>Type.GetMethods()</code></a> each return <a href=""http://msdn.microsoft.com/en-us/library/system.reflection.methodinfo.aspx"" rel=""nofollow""><code>MethodInfo</code></a> instances, which can be used to execute a method on an object.</p>

<pre><code>var result = typeof(DateTime).GetMethod(""ToLongDateString"").Invoke(dt, null);
</code></pre>

<p>If you don't necessarily know the type (which would be a little wierd if you new the property name), than you could do something like this as well.</p>

<pre><code>var result = dt.GetType().GetProperty(""Year"").Invoke(dt, null);
</code></pre>
"
116622,"<p>Unfortunately there's no nice way to write ""space but not a newline"".</p>

<p>I think the best you can do is add some space with the <code>x</code> modifier and try to factor out the ugliness a bit, but that's questionable: <code>(?x)  (?: [ \t\r\f\v]*? \n ){2}  [ \t\r\f\v]*?</code></p>

<p>You could also try creating a subrule just for the character class and interpolating it three times.</p>
"
114128,"<p>Each page of a Wizard -- by itself -- shouldn't actually be the container for the information you're gathering.</p>

<p>Read up on the <a href=""http://en.wikipedia.org/wiki/Model-view-controller"" rel=""nofollow"">Model-View-Control</a> design pattern.  Your pages have the View and Control parts of the design.  They aren't the data model, however.</p>

<p>You'll be happier if you have a separate object that is ""built"" by the pages.  Each page will set some attributes of that underlying model object.  Then, the pages are independent of each other, since the pages all get and set values of this underlying model object.</p>

<p>Since you're building a character, you'd have some class like this</p>

<pre><code>class Character( object ):
    def __init__( self ):
        self.intelligence= 10
        &lt;default values for all attributes.&gt;
</code></pre>

<p>Then your various Wizard instances just need to be given the underlying Character object as a place to put and get values.</p>
"
237599,"<p>Red Hat's Emerging Technologies group has <A HREF=""http://augeas.net/"" rel=""nofollow"">Augeas</A> (written in C, but with Python bindings available), a generic system configuration tool with ""lenses"" for reading and writing several different configuration file formats. I would consider investigating the availability of a lens for Apache.</p>
"
237769,"<h2>This best answer</h2>

<p>You may want to use ftp.nlst() instead of ftp.retrlines(). It will give you exactly what you want.</p>

<p>If you cant, read the following :</p>

<h2>Generators for sysadmin processes</h2>

<p>In his now famous review, <a href=""http://www.dabeaz.com/generators/Generators.pdf"" rel=""nofollow"">Generator Tricks For Systems Programmers An Introduction</a>, David M. Beazley gives a lot of receipes to answer to this kind of data problem with wuick and reusable code.</p>

<p>E.G :</p>

<pre><code># empty list that will receive all the log entry
log = [] 
# we pass a callback function bypass the print_line that would be called by retrlines
# we do that only because we cannot use something better than retrlines
ftp.retrlines('LIST', callback=log.append)
# we use rsplit because it more efficient in our case if we have a big file
files = (line.rsplit(None, 1)[1] for line in log)
# get you file list
files_list = list(files)
</code></pre>

<p>Why don't we generate immediately the list ?</p>

<p>Well, it's because doing it this way offer you much flexibility : you can apply any intermediate generator to filter files before turning it into files_list : it's just like pipe, add a line, you add a process without overheat (since it's generators). And if you get rid off retrlines, it still work be it's even better because you don't store the liste even one time.</p>

<p>EDIT : well, I read the comment to the other answer and it says that this won't work if there is any space in the name.</p>

<p>Cool, this will illustrate why this method is handy. If you want to change something in the process, you just change a line. Swap :</p>

<pre><code>files = (line.rsplit(None, 1)[1] for line in log)
</code></pre>

<p>and</p>

<pre><code># join split the line, get all the item from the field 8 then join them
files = (' '.join(line.split()[8:]) for line in log)
</code></pre>

<p>Ok, this may no be obvious here, but for huge batch process scripts, it's nice :-)</p>
"
334013,"<p>An extra note: <code>str</code> is the string type, as S.Lott points out above. That means that these two forms:</p>

<pre><code>'a b c'.split()
str.split('a b c')

# both return ['a', 'b', 'c']
</code></pre>

<p>...are equivalent, because <code>str.split</code> is the unbound method, while <code>s.split</code> is a bound method of a <code>str</code> object. In the second case, the string that gets passed in to <code>str.split</code> is used as <code>self</code> in the method.</p>

<p>This doesn't make much difference here, but it's an important feature of how Python's object system works.</p>

<p><a href=""http://www.python.org/doc/2.6/library/stdtypes.html#methods"" rel=""nofollow"">More info about bound and unbound methods.</a></p>
"
334938,"<p>The only attempt to do this that I know of is <a href=""http://zephyrfalcon.org/labs/dope_on_wax.html"" rel=""nofollow"">Hans Nowak's Wax</a> (which is unfortunately dead).</p>
"
335077,"<p>The closest you can get to rubyish blocks is the with statement from pep343: </p>

<p><a href=""http://www.python.org/dev/peps/pep-0343/"" rel=""nofollow"">http://www.python.org/dev/peps/pep-0343/</a></p>
"
335299,"<p><strong>Essential Libraries</strong></p>

<p>The main challenge for an experienced programmer coming from another language to Python is figuring out how one language maps to another. Here are a few essential libraries and how they relate to Java equivalents.</p>

<pre><code>os, os.path
</code></pre>

<p>Has functionality like in java.io.File, java.lang.Process, and others. But cleaner and more sophisticated, with a Unix flavor. Use os.path instead of os for higher-level functionality.</p>

<pre><code>sys
</code></pre>

<p>Manipulate the sys.path (which is like the classpath), register exit handlers (like in java Runtime object), and access the standard I/O streams, as in java.lang.System. </p>

<pre><code>unittest
</code></pre>

<p>Very similar (and based on) jUnit, with test fixtures and runnable harnesses.</p>

<pre><code>logging
</code></pre>

<p>Functionality almost identical to log4j with loglevels and loggers. ( logging is also in the standard java.util.Logging library)</p>

<pre><code>datetime
</code></pre>

<p>Allows parsing and formatting dates and times, like in java.text.DateFormat, java.util.Date and related.</p>

<pre><code>ConfigParser
</code></pre>

<p>Allows persistant configuration as in a java Properties file (but also allows nesting). Use this when you don't want the complexity of XML or a database backend.</p>

<pre><code>socket, urllib
</code></pre>

<p>Similar functionality to what is in java.net, for working with either sockets, or retrieving content via URLs/URIs.</p>

<p>Also, keep in mind that a lot of basic functionality, such as reading files, and working with collections, is in the core python language, whereas in Java it lives in packages. </p>
"
335312,"<p>I'd do this with a subclass of Django's PositiveIntegerField:</p>

<pre><code>from django.db import models

class Card(object):
    """"""The ``Card`` class you described.""""""
    ...

class CardField(models.PositiveIntegerField):
    __metaclass__ = models.SubfieldBase

    def get_db_prep_value(self, value):
        """"""Return the ``int`` equivalent of ``value``.""""""
        if value is None: return None
        try:
            int_value = value.as_number()
        except AttributeError:
            int_value = int(value)
        return int_value

    def to_python(self, value):
        """"""Return the ``Card`` equivalent of ``value``.""""""
        if value is None or isinstance(value, Card):
            return value
        return Card(int(value))
</code></pre>

<p>The <code>get_db_prep_value</code> method is responsible for converting <code>value</code> into something suitable for interacting with the database, in this case either an <code>int</code> or <code>None</code>.</p>

<p>The <code>to_python</code> method does the reverse, converting <code>value</code> into a <code>Card</code>.  Just like before, you'll need to handle the possibility of <code>None</code> as a value.  Using the <code>SubfieldBase</code> ensures that <code>to_python</code> is called every time a value is assigned to the field.</p>
"
176549,"<p>Here's an original idea:</p>

<p><em>Don't</em> build an index.  Seriously.</p>

<p>I was faced with a similar progblem some time ago.  I needed a fast method to search megs and megs of text that came from documentation.  I needed to match not just words, but word proximity in large documents (is this word <em>near</em> that word).  I just ended up writing it in C, and the speed of it surprised me.  It was fast enough that it didn't need any optimizing or indexing.</p>

<p>With the speed of today's computers, if you write code that runs straight on the metal (compiled code), you often don't need an order log(n) type algorithm to get the performance you need.</p>
"
271988,"<p>The authoritative registry is <a href=""http://www.iana.org/assignments/media-types/"" rel=""nofollow"">at IANA</a> and, no, there is no standard subtype for Python. So, do not use type like ""application/python"" but you may use private subtypes such as ""text/x-python"" (the one I find in the mime-support package on my Debian).</p>
"
272170,"<p>xlrd support for Office 2007/2008 (OpenXML) format is in alpha test - see the following post in the python-excel newsgroup:
<a href=""http://groups.google.com/group/python-excel/msg/0c5f15ad122bf24b?hl=en"" rel=""nofollow"">http://groups.google.com/group/python-excel/msg/0c5f15ad122bf24b?hl=en</a> </p>
"
272522,"<p>If you read a few of the many (<em>many</em>) threads on this subject in django-dev, you will see that what <em>looks</em> straightforward, isn't. If you pick a single use case, then it looks easy, but as soon as you start to generalize in any way you start to run into trouble.</p>

<p>To use the above-referenced thread as an example, when you say ""multiple databases"", which of the following are you talking about?</p>

<ul>
<li>All DB on the same machine under the same engine.</li>
<li>All DB on same machine, different engines (E.g. MySQL + PostgreSQL)</li>
<li>One Master DB with N read-only slaves on different machines.</li>
<li>Sharding of tables across multiple DB servers.</li>
</ul>

<p>Will you need:</p>

<ul>
<li>Foreign keys across DBs</li>
<li>JOINs across machines and/or engines</li>
<li>etc. etc.</li>
</ul>

<p>One of the problems with a slick ORM like Django's is that it hides all of those messy details under a nice paint job. To continue to do that, but to then add in any of the above, is Not Easy (tm).</p>
"
112990,"<p>Only ever use open() for opening files. file() is actually being removed in 3.0, and it's deprecated at the moment. They've had a sort of strange relationship, but file() is going now, so there's no need to worry anymore.</p>

<p>The following is from the Python 2.6 docs. [bracket stuff] added by me.</p>

<blockquote>
  <p>When opening a file, itâs preferable to use open() instead of invoking this [file()] constructor directly. file is more suited to type testing (for example, writing isinstance(f, file)</p>
</blockquote>
"
138300,"<p>There's a really good article on wiki.wxpython.org entitled <a href=""http://wiki.wxpython.org/index.cgi/WorkingWithImages"" rel=""nofollow"">Working With Images</a>. The article mentions the possiblity of using wxWidgets (wxImage), PIL or PythonMagick. Personally, I've used PIL and wxWidgets and both make image manipulation fairly easy.</p>
"
236523,"<p>I don't believe many programs EVER expect to have their environment externally modified, so loading a copy of the passed environment at startup is equivalent.  You have simply stumbled on an implementation choice.</p>

<p>If you are seeing all the set-at-startup values and putenv/setenv from within your program works, I don't think there's anything to be concerned about.  There are far cleaner ways to pass updated information to running executables.</p>
"
236957,"<p>I use eclipse with the pydev extensions since it's an IDE I have a lot of experience with. I also appreciate the smart indentation it offers for coding if statements, loops, etc. I have configured the pindent.py script as an external tool that I can run on the currently focused python module which makes my life easier so I can see what is closed where with out having to constantly check indentation.</p>
"
237010,"<p>The REST or ""Query"" APIs are definitely easier to use than SOAP, but unfortunately at least once service (EC2) doesn't provide any alternatives to SOAP. As you've already discovered, Python's existing SOAP implementations are woefully inadequate for most purposes; one workaround approach is to just generate the XML for the SOAP envelope/body directly, instead of going through an intermediate SOAP layer. If you're somewhat familiar with XML / SOAP, this isn't too hard to do in most cases, and allows you to work around any particular idiosyncrasies with the SOAP implementation on the other end; this can be quite important, as just about every SOAP stack out there has its own flavour of bugginess / weirdness to contend with.</p>
"
111300,"<p>You probably want <a href=""http://twistedmatrix.com/trac/"" rel=""nofollow"">Twisted</a>.  There is a P2P framework for Twisted called ""<a href=""http://divmod.org/trac/wiki/DivmodVertex"" rel=""nofollow"">Vertex</a>"".  While not actively maintained, it does allow you to tunnel through NATs and make connections directly between users in a very abstract way; if there were more interest in this sort of thing I'm sure it would be more actively maintained.</p>
"
31926,"<p>If I have to expose APIs, I prefer doing it as JSON. Python has excellent support for JSON objects (JSON Objects are infact python dictionaries)</p>
"
33486,"<blockquote>
<pre><code>s = p.stderr.readline()
</code></pre>
</blockquote>

<p>I suspect it's the above line.  When you invoke a command directly through ssh, you don't get your full pty (assuming Linux), and thus no stderr to read from.</p>

<p>When you log in interactively, stdin, stdout, and stderr are set up for you, and so your script works.</p>
"
177030,"<p>I would not build it yourself, if possible.</p>

<p>App Engine includes the basics of a Full Text searching engine, and there is a <a href=""http://appengineguy.com/2008/06/how-to-full-text-search-in-google-app.html"" rel=""nofollow"">great blog post here</a> that describes how to use it.</p>

<p>There is also a <a href=""http://code.google.com/p/googleappengine/issues/detail?id=217"" rel=""nofollow"">feature request in the bug tracker</a> that seems to be getting some attention lately, so you may want to hold out, if you can, until that is implemented.</p>
"
195739,"<p>Calculate your global var on the first use.</p>

<pre><code>class Proxy:
    @property
    def global_name(self):
        # calculate your global var here, enable cache if needed
        ...

_proxy_object = Proxy()
GLOBAL_NAME = _proxy_object.global_name
</code></pre>

<p>Or better yet, access necessery data via special data object.</p>

<pre><code>class Data:
    GLOBAL_NAME = property(...)

data = Data()
</code></pre>

<p>Example:</p>

<pre><code>from some_module import data

print(data.GLOBAL_NAME)
</code></pre>

<p>See <a href=""http://docs.djangoproject.com/en/dev/topics/settings/"" rel=""nofollow"">Django settings</a>.</p>
"
196072,"<p>Probably the <a href=""http://www.sqlalchemy.org/docs/04/ormtutorial.html"" rel=""nofollow"" title=""SQLAlchemy ORM Tutorial"">SQLAlchemy ORM Tutorial</a>? I started with it.</p>
"
196208,"<p>Following up Roger Lipscombe's comment, I've used a manifest file in py2exe without any real knowledge of what I was doing.  So this <em>might</em> work:</p>

<pre><code># in setup.py
# manifest copied from http://blogs.msdn.com/shawnfa/archive/2006/04/06/568563.aspx
manifest = '''
&lt;assembly xmlns=""urn:schemas-microsoft-com:asm.v1"" manifestVersion=""1.0""&gt;
       &lt;asmv3:trustInfo xmlns:asmv3=""urn:schemas-microsoft-com:asm.v3""&gt;
         &lt;asmv3:security&gt;
           &lt;asmv3:requestedPrivileges&gt;
             &lt;asmv3:requestedExecutionLevel
               level=""asInvoker""
               uiAccess=""false"" /&gt;
           &lt;/asmv3:requestedPrivileges&gt;
         &lt;/asmv3:security&gt;
       &lt;/asmv3:trustInfo&gt;
     &lt;/assembly&gt;
'''

setup(name='MyApp',
      #...
      windows=[ { #...
                  'other_resources':[(24, 1, manifest)],
                 }]
     )
</code></pre>

<p>You may need to do some fiddling though..</p>
"
273992,"<p>If you want shell commands to be interactive, use:</p>

<pre><code>system(""mysql -uroot -p db_name &gt; `tty`"");
</code></pre>

<p>That will work for most cases, but will break if you aren't in a terminal.</p>
"
140795,"<p>Try ""listdir()"" in the os module (<a href=""http://docs.python.org/lib/os-file-dir.html"" rel=""nofollow"">docs</a>):</p>

<pre><code>import os
print os.listdir('.')
</code></pre>
"
235438,"<ol>
<li>Pick a name for your encoding, maybe ""led_display"", whatever.</li>
<li>Implement and register a <a href=""http://docs.python.org/library/codecs.html"" rel=""nofollow"">codec</a> with the standard library.</li>
<li>Pythonic profit!</li>
</ol>
"
235686,"<p>It's not ""wrong"" to do this, and it can be nicer if your dictionaries have a strong possibility of turning into objects at some point, but be wary of the reasons for having bracket access in the first place:</p>

<ol>
<li>Dot access can't use keywords as keys.</li>
<li>Dot access has to use Python-identifier-valid characters in the keys.</li>
<li>Dictionaries can hold any hashable element -- not just strings.</li>
</ol>

<p>Also keep in mind you can always make your objects access like dictionaries if you decide to switch to objects later on.</p>

<p>For a case like this I would default to the ""readability counts"" mantra: presumably other Python programmers will be reading your code and they probably won't be expecting dictionary/object hybrids everywhere. If it's a good design decision for a particular situation, use it, but I wouldn't use it without necessity to do so.</p>
"
236402,"<pre><code>use no underscores for the external API,
one underscore for the subclassable API,
and two underscores for the private/internal API
</code></pre>

<p>This is a reasonable and relatively common way of doing it, yes. The double-underline-for-actually-private (as opposed to âprotectedâ in C++ terms) is in practice pretty rare. You never really know what behaviours a subclass might want to override, so assuming âprotectedâ is generally a good bet unless there's a really good reason why messing with a member might be particularly dangerous.</p>

<pre><code>However, that would become unwieldy because then the internal API would
need to be invoked as self._EventMixin__somePrivateMethod()
</code></pre>

<p>Nope, you can just use the double-underlined version and it will be munged automatically. It's ugly but it works.</p>
"
111011,"<p>The usual method to exit a Python program:</p>

<pre><code>sys.exit()
</code></pre>

<p>(to which you can also pass an exit status) or </p>

<pre><code>raise SystemExit
</code></pre>

<p>will work fine in a Tkinter program.</p>
"
111144,"<p><a href=""http://appyframework.org/pod.html"" rel=""nofollow"">Pod</a> is my favorite solution to your problem.</p>
"
108557,"<p>There's a lot of good discussion <a href=""http://stackoverflow.com/questions/36932/whats-the-best-way-to-implement-an-enum-in-python"">here</a>. </p>
"
108599,"<p>Python has pytz (<a href=""http://pytz.sourceforge.net"" rel=""nofollow"">http://pytz.sourceforge.net</a>) module which can be used for arithmetic of 'time' objects. It takes care of DST offsets as well. The above page has a number of examples that illustrate the usage of pytz.</p>
"
234325,"<p>@Ber: I have added validation to the model similar to this</p>

<pre><code>class Parent(models.Model):
  name = models.CharField(max_length=255)
  favoritechild = models.ForeignKey(""Child"", blank=True, null=True)
  def save(self, force_insert=False, force_update=False):
    if self.favoritechild is not None and self.favoritechild.myparent.id != self.id:
      raise Exception(""You must select one of your own children as your favorite"")
    super(Parent, self).save(force_insert, force_update)
</code></pre>

<p>which works exactly how I want, but it would be really nice if this validation could restrict choices in the dropdown in the admin interface rather than validating after the choice.</p>
"
35089,"<p>The <code>core</code> attribute isn't used anymore.</p>

<p>From <a href=""http://oebfare.com/blog/2008/jul/20/newforms-admin-migration-and-screencast/"" rel=""nofollow"">Brian Rosner's Blog</a>:</p>

<blockquote>
  <p>You can safely just remove any and all <code>core</code> arguments. They are no longer used. <em>newforms-admin</em> now provides a nice delete checkbox for exisiting instances in inlines.</p>
</blockquote>
"
35562,"<p>I think that <a href=""http://tidy.sourceforge.net/"" rel=""nofollow"">HTML tidy</a> will do what you want. There is a Python binding for it.</p>
"
35633,"<p>To get rid of ""This field is required,"" you need to make it not required, by using blank=True (and possibly null=True as well, if it's not a CharField).</p>
"
34011,"<p>I haven't any personal experience with either of the following, but a simple search for a ""Python [memory] profiler"" yield:</p>

<ul>
<li><p>PySizer, ""a memory profiler for Python,"" found at <a href=""http://pysizer.8325.org/"" rel=""nofollow"">http://pysizer.8325.org/</a>.  However the page seems to indicate that the project hasn't been updated for a while, and refers to...</p></li>
<li><p>Heapy, ""support[ing] debugging and optimization regarding memory related issues in Python programs,"" found at <a href=""http://guppy-pe.sourceforge.net/#Heapy"" rel=""nofollow"">http://guppy-pe.sourceforge.net/#Heapy</a>.</p></li>
</ul>

<p>Hope that helps.</p>
"
34031,"<p>As far as I know there are no real bugs, but the performance when threading in cPython is really bad (compared to most other threading implementations, but usually good enough if all most of the threads do is block) due to the <a href=""http://docs.python.org/api/threads.html"" rel=""nofollow"">GIL</a> (Global Interpreter Lock), so really it is implementation specific rather than language specific. Jython, for example, does not suffer from this due to using the Java thread model.</p>

<p>See <a href=""http://www.artima.com/weblogs/viewpost.jsp?thread=214235"" rel=""nofollow"">this</a> post on why it is not really feasible to remove the GIL from the cPython implementation, and <a href=""http://www.pyzine.com/Issue001/Section_Articles/article_ThreadingGlobalInterpreter.html"" rel=""nofollow"">this</a> for some practical elaboration and workarounds.</p>

<p>Do a quick google for <a href=""http://www.google.com/search?q=python+gil"" rel=""nofollow"">""Python GIL""</a> for more information.</p>
"
34418,"<p>As with most ""aware"" things in Windows, the answer is ""Registry"".</p>

<p>Take a look at this Microsoft Knowledge Base article: <a href=""http://support.microsoft.com/kb/103000"" rel=""nofollow"">http://support.microsoft.com/kb/103000</a></p>

<p>Search for ""A Win32 program that can be started by the Service Controller and that obeys the service control protocol."" This is the kind of service you're interested in.</p>

<p>The service registration (contents of KEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services
\myservice) carries information about the service, including things like its executable location, what to do when it fails (halt the OS?), what services must be started before this one, what user it runs as.</p>

<p>As to service control protocol, main() of your program is supposed to invoke a Windows API call, setting up callbacks for start, stop, pause for your service. What you do in those callbacks is all up to you.</p>
"
331410,"<p>Try <a href=""http://www.py2exe.org/"" rel=""nofollow"">py2exe</a>.</p>
"
109018,"<p>Unfortunately, there's no way to easily do a bulk delete. Your best bet is to write a script that deletes a reasonable number of entries per invocation, and then call it repeatedly - for example, by having your delete script return a 302 redirect whenever there's more data to delete, then fetching it with ""wget --max-redirect=10000"" (or some other large number).</p>
"
275851,"<p>3) Is quite an interesting question. In general, SQLite is pretty useless for web-based stuff. It scales fairly well for size, but scales terribly for concurrency, and so if you are planning to hit it with a few requests at the same time, you will be in trouble.</p>

<p>Now your idea in part 3) of the question is to use multiple SQLite databases (eg one per user group, or even one per user). Unfortunately, SQLite will give you no help in this department. But it is possible. The one project I know that has done this before is <a href=""http://www.divmod.org/trac/wiki/DivmodAxiom"" rel=""nofollow""><strong>Divmod's Axiom</strong></a>. So I would certainly check that out.</p>

<p>Of course, it would probably be much easier to just use a good concurrent DB like the ones you mention (Firebird, PG, etc).</p>

<p>For completeness:</p>

<p>1 and 2) It should be straightforward without you actually writing <strong>much</strong> code. I find SQLObject a bit restrictive in this department, and would strongly recommend <a href=""http://www.sqlalchemy.org/"" rel=""nofollow""><strong>SQLAlchemy</strong></a> instead. This is far more flexible, and if I was starting a new project today, I would certainly use it over SQLObject. It won't be moving ""Objects"" anywhere. There is no magic involved here, it will be transferring rows in tables in a database. Which as mentioned you could do by hand, but this might save you some time.</p>
"
276304,"<p>""... current system status (current CPU, RAM, free disk space, etc.)""  And ""*nix and Windows platforms"" can be a difficult combination to achieve.</p>

<p>The operating systems are fundamentally different in the way they manage these resources.  Indeed, they differ in core concepts like defining what counts as system and what counts as application time.</p>

<p>""Free disk space""?  What counts as ""disk space?""  All partitions of all devices?  What about foreign partitions in a multi-boot environment?</p>

<p>I don't think there's a clear enough consensus between Windows and *nix that makes this possible.  Indeed, there may not even be any consensus between the various operating systems called Windows.  Is there a single Windows API that works for both XP and Vista?</p>
"
276323,"<p>You can't.</p>

<p>301 is an HTTP return code that is directly acted upon by the browser. Many sites handle these two issues by first sending the user to a redirect-er page that tells the user about the change and then X seconds later sends them to the new page. But the redirect-er page <em>must</em> have a 200 code.</p>

<p>One small variant is to detect search engine spiders (by IP and/or user agent) and give <em>them</em> the 301. That way the search results point to your new page.</p>
"
108054,"<p>Not sure why you're doing that level of analysis in your lexer.</p>

<p>Lexical analysis should probably be used to separate the input stream into lexical tokens (number, line-change, keyword and so on).  It's the parsing phase that should be doing that level of analysis, including table lookups for typedefs and such.</p>

<p>That's the way I've always separated the duties between lexx and yacc, my tools of choice.</p>
"
141113,"<p>Expression <code>f = lambda: i</code> is equivalent to:</p>

<pre><code>def f():
    return i
</code></pre>

<p>Expression <code>g = lambda i=i: i</code> is equivalent to:</p>

<pre><code>def g(i=i):
    return i
</code></pre>

<p><code>i</code> is a <a href=""http://docs.python.org/ref/naming.html"" rel=""nofollow"">free variable</a> in the first case and it is bound to the function parameter in the second case i.e., it is a local variable in that case. Values for default parameters are evaluated at the time of function definition. </p>

<p>Generator expression is the nearest enclosing scope (where <code>i</code> is defined) for <code>i</code> name in the <code>lambda</code> expression, therefore <code>i</code> is resolved in that block:</p>

<pre><code>f(*(lambda: i for i in (1, -1)) # -&gt; [-1, -1]
</code></pre>

<p><code>i</code> is a local variable of the <code>lambda i: ...</code> block, therefore the object it refers to is defined in that block:</p>

<pre><code>f(*map(lambda i: lambda: i, (1,-1))) # -&gt; [1, -1]
</code></pre>
"
232051,"<p><a href=""http://code.djangoproject.com/browser/django/trunk/django/contrib/admin/options.py#L154"" rel=""nofollow"">ModelAdmin</a> objects have <code>has_add_permission</code>, <code>has_change_permission</code>, <code>has_delete_permission</code> and <code>queryset</code> methods which can be used to enforce permissions around what the logged-in user can see and modify - you could create a subclass which uses these to enforce whatever permissions you want to implement and register all your models with the <code>admin</code> application using your subclass.</p>

<p>However, it all depends how exactly your permissions system will work - what are the exact requirements which fall out of your fine-grained permissions? The more you move away from what the <code>admin</code> application was designed to do, the more work it'll take, but there are a lot of hooks in there which you can use to implement your custom requirements. Here's a <a href=""http://lukeplant.me.uk/blog.php?id=1107301686"" rel=""nofollow"">blog post from Luke Plant</a> which gives examples of some of the fine-tuning you can do without having to dig too deep.</p>

<p>Does it absolutely have to be based around the <code>admin</code> application? <a href=""https://docs.djangoproject.com/en/1.4/ref/generic-views/#create-update-delete-generic-views"" rel=""nofollow"">Generic views</a> and <a href=""https://docs.djangoproject.com/en/1.4/topics/forms/modelforms/"" rel=""nofollow"">ModelForms</a> can take care of a lot of the tedious bits involved in implementing CRUD , so <a href=""http://www.jonathanbuchanan.plus.com/images/admin.jpg"" rel=""nofollow"">be wary</a> of getting too hung up on customising <code>admin</code> - it's almost a Django tradition to start by getting hung up on the <code>admin</code> app and what it can and can't do, initially thinking you'll never have to write any code again ;)</p>
"
232385,"<p><a href=""http://docs.python.org/library/modulefinder.html"" rel=""nofollow"">modulefinder</a> can be used to <a href=""http://www.tarind.com/depgraph.html"" rel=""nofollow"">get the dependency graph</a>.</p>
"
232565,"<p>Well, I had to look into a solution.  This works (ugly, and w/o Javascript validation) -- using the smtplib lib.  Also, note that I stole Jeff's captcha for this example.  Anyone using this will need to change it.  </p>

<p><strong>EDIT:</strong> I added validation.</p>

<pre><code>#!/usr/local/bin/python2.4 
import smtplib 
import cherrypy

class InputExample:
   @cherrypy.expose
   def index(self):
       return ""&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;a href=""contactus""&gt;Contact Us&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;""


        @cherrypy.expose
        def contactus(self,message=''):
                return """"""
&lt;html&gt;
&lt;head&gt;&lt;title&gt;Contact Us&lt;/title&gt;
&lt;script type=""text/javascript""&gt;

   function isNotEmpty(elem)
   {
      var str = elem.value;
      var re = /.+/;
      if (!str.match(re))
      {
         elem.focus();
         return false;
      }
      else
      {
         return true;
      }

   }

   function isEMailAddr(elem)
   {
      var str = elem.value;
      var re = /^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,7}$/;
      if (!str.match(re))
      {
         return false;
      }
      else
      {
         return true;
      }
   }

   function validateForm(form)
   {
      if (isNotEmpty(form.firstName) &amp;&amp; isNotEmpty(form.lastName))
      {
         if (isNotEmpty(form.email))
         {
         if (isEMailAddr(form.email))
         {
            if (isNotEmpty(form.captcha))
            {
               if ( form.captcha.value=='egnaro'.split("""").reverse().join(""""))
               {
                   if (isNotEmpty(form.subject))
                     {
                        alert(""All required fields are found.  We will respond shortly."");
                        return true;
                     }
               }
               else
               {
                   alert(""Please enter the word as displayed in the image."");
                   return false;
               }
            }//captcha empty
            }
         else
         {
            alert(""Please enter a valid email address."");
            return false;
         } //email
         } //email
      } //first and last name
      alert(""Please fill in all required fields."");
      return false;
   }

&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;%(message)s&lt;/p&gt;
&lt;form method='POST' action='contactUsSubmitted' onsubmit='return validateForm(this)'&gt;
   &lt;label for=""firstName""&gt;First Name: &lt;/label&gt;
   &lt;input type=""text"" id=""firstName"" name=""firstName"" /&gt; (required)&lt;br/&gt;
   &lt;label for=""lastName""&gt;Last Name: &lt;/label&gt;
   &lt;input type=""text"" id=""lastName"" name=""lastName"" /&gt; (required)&lt;br/&gt;
   &lt;label for=""email""&gt;E-mail address: &lt;/label&gt;
   &lt;input type=""text"" id=""email"" name=""email"" /&gt; (required)&lt;br/&gt;
  &lt;label for=""phone""&gt;Phone number: &lt;/label&gt;
   &lt;input type=""text"" id=""phone"" name=""phone"" /&gt; &lt;br/&gt;&lt;br/&gt;

   &lt;!--THIS NEEDS TO BE CHANGED TO MATCH YOUR OWN CAPTCHA SCHEME!! --&gt;
   &lt;label for=""captcha""&gt;Enter the word&lt;br /&gt;&lt;img alt=""rhymes with.."" src=""http://www.codinghorror.com/blog/images/word.png"" width=""99"" height=""26"" border=""0"" /&gt;&lt;/label&gt;&lt;br /&gt;
(&lt;a href=""http://www.codinghorror.com/blog/sounds/captcha-word-spoken.mp3""&gt;hear it spoken&lt;/a&gt;)&lt;br /&gt;
   &lt;input tabindex=""3"" id=""captcha"" name=""captcha"" /&gt;&lt;br /&gt;&lt;br /&gt;

   &lt;label for=""subject""&gt;Subject: &lt;/label&gt;
   &lt;input type=""text"" id=""subject"" name=""subject"" /&gt; (required)&lt;br/&gt;
   &lt;label for=""body""&gt;Details: &lt;/label&gt;
   &lt;textarea id=""body"" name=""body""&gt;&lt;/textarea&gt;&lt;br/&gt;

&lt;input type='submit' value='Contact Us' /&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
""""""%{'message':message}


        @cherrypy.expose
        def contactUsSubmitted(self, firstName, lastName, email, phone, captcha, subject, body ):
                if captcha[::-1] != 'egnaro':
                        return self.contactus(""Please reenter the word you see in the image."" )
                self.sendEmail('mail2.example.com','mailbox_account','mailbox_pwd','me@example.com',email,
                     'Website Contact: '+subject, 'Sender Email: ' + email + '\r\n'
                     'Name: ' + firstName + ' ' + lastName + '\r\n' + 'Phone: ' + phone + '\r\n' + body)
                return self.index()

        def sendEmail(self,smtpServer, mailboxName, mailboxPassword, contactEmail,senderEmail,subject,body):
                server = smtplib.SMTP(smtpServer) #'smtp1.example.com')
                server.login(mailboxName, mailboxPassword)

                msg = ""To: %(contactEmail)s\r\nFrom: %(senderEmail)s\r\nSubject: %(subject)s\r\nContent-type: text/plain\r\n\r\n%(body)s""
                msg = msg%{'contactEmail':contactEmail,'senderEmail':mailboxName + '@example.com','subject':subject,'body':body}

                server.sendmail(contactEmail, contactEmail, msg) #This is to send it from an internal account to another internal account.
                server.quit()


cherrypy.root = InputExample()
cherrypy.config.update ( file = 'development.conf' )
cherrypy.server.start()
</code></pre>
"
232969,"<p>Do you want to restrict the choices available in the admin interface when creating/editing a model instance?</p>

<p>One way to do this is validation of the model. This lets you raise an error in the admin interface if the foreign field is not the right choice.</p>

<p>Of course, Eric's answer is correct: You only really need one foreign key, from child to parent here.</p>
"
197786,"<p>I would write a codec that incrementally scanned the string and decoded the bytes as they came along. Essentially, you would have to separate strings into chunks with a consistent encoding and decode those and append them to the strings that followed them.</p>
"
197811,"<p>One egg by itself is not better than a proper source release. The good part is the dependency handling. Like debian or rpm packages, you can say you depend on other eggs and they'll be installed automatically (through <a href=""http://pypi.python.org"" rel=""nofollow"">pypi.python.org</a>).</p>

<p>A second comment: the egg format itself is a binary packaged format. Normal python packages that consist of just python code are best distributed as ""source releases"", so ""python setup.py sdist"" which result in a .tar.gz. These are also commonly called ""eggs"" when uploaded to pypi.</p>

<p>Where you need binary eggs: when you're bundling some C code extension. You'll need several binary eggs (a 32bit unix one, a windows one, etc.) then.</p>
"
174358,"<p>I've just started to look into this myself. I've purchased the Mobile Python book above. It looks good so far. </p>

<p>This site has a few tutorials as well:
<a href=""http://croozeus.com/tutorials.htm"" rel=""nofollow"">http://croozeus.com/tutorials.htm</a></p>

<p>I'm using putools to code/sync over bluetooth from linux:
<a href=""http://people.csail.mit.edu/kapu/symbian/python.html"" rel=""nofollow"">http://people.csail.mit.edu/kapu/symbian/python.html</a></p>

<p>There are advantages/disadvantages to the python dev on S60. Obviously, using Python is a major plus. There are some extra tricks you need in order to get your app built into a distributed form where you don't need to require the end user to first go download the python runtime for their phone. </p>

<p>The other disadvantage is simply in UI. You have three forms of ui available via the appuifw API. Let's say you want to draw images on the screen as well as have a text entry field in the ui, you really can't. You'll have to split the ui into parts that fit what the python api gives you. </p>

<p>As for IDE/Emulator, I'm just using VIM on Ubuntu with the bluetooth sync tools in putools. I've seen that you can get the C++ or Java environments, and then use the emulators in them, but not seen how it works since it seems to be a windows only option at this point.</p>
"
196905,"<p>Turns out what happened was that ruby-aes automatically pads data to fill up 16 chars and sticks a null character on the end of the final string as a delimiter. PyCrypto requires you to do multiples of 16 chars so that was how we figured out what ruby-aes was doing.</p>
"
196997,"<p>Extending DzinX's answer:</p>

<pre><code>argnames = example.func_code.co_varnames[:func.func_code.co_argcount]
args = dict((key, val) for key,val in d_args.iteritems() if key in argnames)
example(**args)
</code></pre>
"
197001,"<p>Try n-gram based statistical language recognition. This is a <a href=""http://odur.let.rug.nl/~vannoord/TextCat/Demo/"" rel=""nofollow"">link</a> to a demo of an algorithm using this technique, there is also a link to a paper describing the algorithm there. Try the demo, it performs quite well even on very short texts (3-4 words).</p>
"
330580,"<p>I think that the <a href=""http://docs.python.org/library/multiprocessing.html"" rel=""nofollow"">multiprocessing</a> framework has what might be applicable here - namely  the shared ctypes module. </p>

<p>Multiprocessing is fairly new to Python, so it might have some oddities. I am not quite sure whether the solution works with processes not spawned via <code>multiprocessing</code>.</p>
"
108556,"<p>What I see more often is this, in top-level module context:</p>

<pre><code>FOO_BAR = 'FOO_BAR'
FOO_BAZ = 'FOO_BAZ'
FOO_QUX = 'FOO_QUX'
</code></pre>

<p>...and later...</p>

<pre><code>if something is FOO_BAR: pass # do something here
elif something is FOO_BAZ: pass # do something else
elif something is FOO_QUX: pass # do something else
else: raise Exception('Invalid value for something')
</code></pre>

<p>Note that the use of <code>is</code> rather than <code>==</code> is taking a risk here -- it assumes that folks are using <code>your_module.FOO_BAR</code> rather than the string <code>'FOO_BAR'</code> (which will <I>normally</I> be interned such that <code>is</code> will match, but that certainly can't be counted on), and so may not be appropriate depending on context.</p>

<p>One advantage of doing it this way is that by looking anywhere a reference to that string is being stored, it's immediately obvious where it came from; <code>FOO_BAZ</code> is much less ambiguous than <code>2</code>.</p>

<p>Besides that, the other thing that offends my Pythonic sensibilities re the class you propose is the use of <code>split()</code>. Why not just pass in a tuple, list or other enumerable to start with?</p>
"
276395,"<p>I don't see why you'd get ""NoneType object is not callable"".  That should mean that somewhere on the line is an expression like ""foo(...)"", and it means foo is None.</p>

<p>BTW: You are trying to extend the embed_list, and it's easier to do it like this:</p>

<pre><code>embed_list = []
for embed in embeds:
    embed_list.append(embed.replace(""&amp;lt;"", ""&lt;"")) #this is line 35
return render_to_response(""scanvideos.html"", {""embed_list"":embed_list})
</code></pre>

<p>and even easier to use a list comprehension:</p>

<pre><code>embed_list = [embed.replace(""&amp;lt;"", ""&lt;"") for embed in embeds]
</code></pre>
"
276708,"<p>Perhaps you can create and use a custom model field; it would be a subclass of CharField but providing a <a href=""http://docs.djangoproject.com/en/dev/howto/custom-model-fields/#db_type"" rel=""nofollow"">db_type</a> method returning ""text collate nocase""</p>
"
141571,"<p>You should use isinstance</p>

<pre><code>isinstance(...)
    isinstance(object, class-or-type-or-tuple) -&gt; bool

    Return whether an object is an instance of a class or of a subclass thereof.
    With a type as second argument, return whether that is the object's type.
    The form using a tuple, isinstance(x, (A, B, ...)), is a shortcut for
    isinstance(x, A) or isinstance(x, B) or ... (etc.).
</code></pre>
"
141767,"<p>Fixed in Python 3 via the <a href=""https://docs.python.org/3/reference/simple_stmts.html?#nonlocal"" rel=""nofollow""><code>nonlocal</code></a> statement:</p>

<blockquote>
  <p>The <code>nonlocal</code> statement causes the listed identifiers to refer to previously bound variables in the nearest enclosing scope excluding globals. This is important because the default behavior for binding is to search the local namespace first. The statement allows encapsulated code to rebind variables outside of the local scope besides the global (module) scope.</p>
</blockquote>
"
230862,"<p>Use <a href=""http://www.python.org/doc/2.5.2/lib/module-subprocess.html"" rel=""nofollow"">subprocess</a>.  Call Popen() to create your process and use communicate() to send it text.  Sorry, forgot to include the PIPE..</p>

<pre><code>from subprocess import Popen, PIPE

proc = Popen(['server', 'stop'], stdin=PIPE)

proc.communicate('password')
</code></pre>

<p>You would do better do avoid the password and try a scheme like sudo and sudoers.  Pexpect, mentioned elsewhere, is not part of the standard library.</p>
"
230955,"<p>You can use list or generator comprehensions to build a list of key, value tuples used to directly instantiate a dict.  The best way is below:</p>

<pre><code>dict((name, eval(name)) for name in list_of_variable_names)
</code></pre>

<p>In addition, if you know, for example, that the variables exist in the local symbol table you can save yourself from the dangerous eval by looking the variable directly from locals:</p>

<pre><code>dict((name, locals()[name]) for name in list_of_variable_names)
</code></pre>

<p>After your final update, I think the answer below is really what you want.  If you're just using this for string expansion with strings that you control, just pass locals() directly to the string expansion and it will cherry-pick out the desired values</p>

<p>If, however, these strings could ever come from an outside source (e.g. translation files), than it's a good idea to filter locals()</p>
"
231613,"<p>Mind if i refactor this a bit?</p>

<pre><code>def digit(n):
    for i in itertools.count():
        yield (i%n+1, not i%n)
</code></pre>

<p>But actually you don't need that one, if you implement the whole thing as a simple iterator:</p>

<pre><code>def counter(digits, base):
    counter = [0] * digits

    def iterator():
        for total in itertools.count(1):
            for i in range(len(counter)):
                counter[i] = (counter[i] + 1) % base
                if counter[i]:
                    break
            print total, list(reversed(counter))
            yield list(reversed(counter))

    return iterator()

c = counter(2, 4)
print list(itertools.islice(c, 10))
</code></pre>

<p>If you want to get rid of the print (debugging, is it?), go with a while-loop.</p>

<p>This incindentally also solves your initial problem, because <code>reversed</code> returns a copy of the list.</p>

<p>Oh, and it's zero-based now ;)</p>
"
36852,"<p>You'll need the FileMaker Pro installation CD to get the drivers. <a href=""http://www.filemaker.com/downloads/pdf/fm9_odbc_jdbc_guide_en.pdf"" rel=""nofollow"">This document</a> details the process for FMP 9 - it is similar for versions 7.x and 8.x as well. Versions 6.x and earlier are completely different and I wouldn't bother trying (xDBC support in those previous versions is ""minimal"" at best).</p>

<p>FMP 9 supports SQL-92 standard syntax (mostly). Note that rather than querying tables directly you query using the ""table occurrence"" name which serves as a table alias of sorts. If the data tables are stored in multiple files it is possible to create a single FMP file with table occurrences/aliases pointing to those data tables. There's an ""undocumented feature"" where such a file must have a table defined in it as well and that table ""related"" to any other table on the relationships graph (doesn't matter which one) for ODBC access to work. Otherwise your queries will always return no results.</p>

<p>The PDF document details all of the limitations of using the xDBC interface FMP provides. Performance of simple queries is reasonably fast, ymmv. I have found the performance of queries specifying the ""LIKE"" operator to be less than stellar.</p>

<p>FMP also has an XML/XSLT interface that you can use to query FMP data over an HTTP connection. It also provides a PHP class for accessing and using FMP data in web applications.</p>
"
329995,"<p>You're misunderstanding the documentation; it says that since the length of the salt may vary depending on the underlying crypt() implementation, you should provide the entire crypted password as the salt value <em>when checking passwords</em>. That is, instead of pulling the first two chars off to be the salt, just toss in the whole thing.</p>

<p>Your idea of having the initial salt be based on the username seems okay. </p>
"
330000,"<p>For the use of the crypt module:</p>

<p>When GENERATING the crypted password, you provide the salt.  It might as well be random to increase resistance to brute-forcing, as long as it meets the listed conditions.  When CHECKING a password, you should provide the value from getpwname, in case you are on a system that supports larger salt sizes and didn't generate it yourself.</p>

<p>General comments:</p>

<p>If this has nothing to do w/ actual system logins, there is nothing preventing you from using a stronger method than crypt.  You could randomly generate N characters of per-user salt, to be combined with the user's password in a SHA-1 hash.</p>

<pre><code>string_to_hash = user.stored_salt + entered_password
successful_login = (sha1(string_to_hash) == user.stored_password_hash)
</code></pre>

<p>UPDATE: While this is far more secure against rainbow tables, the method above still has cryptographic weaknesses.  Correct application of an HMAC algorithm can yet further increase your security, but is beyond my realm of expertise.</p>
"
330016,"<p>Here's some general advice on salting passwords:</p>

<ol>
<li>In general, salts are used to make <a href=""http://en.wikipedia.org/wiki/Rainbow_table"" rel=""nofollow"">ranbow tables</a> too costly to compute. So, you should add a little randomized salt to all your password hashes, and just store it in plaintext next to the hashed password value.</li>
<li>Use <a href=""http://en.wikipedia.org/wiki/HMAC"" rel=""nofollow"">HMAC</a> - it's a good standard, and it's more secure than concatenating the password and salt.</li>
<li>Use SHA1: MD5 is broken. No offense intended if you knew this, just being thorough. ;)</li>
</ol>

<p>I <strong>would not</strong> have the salt be a function of the password. An attacker would have to generate a rainbow table to have an instant-lookup database of passwords, but they'd only have to do that once. If you choose a random 32-bit integer, they'd have to generate 2^32 tables, which (unlike a deterministic salt) costs way, way too much memory (and time).</p>
"
35831,"<p>I believe that os.system just invokes whatever command shell is configured for the user, so I don't think you can do it in a platform independent way.  My command shell could be anything from bash, emacs, ruby, or even quake3.  Some of these programs aren't expecting the kind of arguments you are passing to them and even if they did there is no guarantee they do their escaping the same way.</p>
"
172991,"<p>This is the procedure that I try to follow:<br></p>

<ul>
 <li> import psyco; psyco.full()
 <li> If it's not fast enough, run the code through a profiler, see where the bottlenecks are. (DISABLE psyco for this step!)
 <li> Try to do things such as other people have mentioned to get the code at those bottlenecks as fast as possible.
 <ul><li>Stuff like [str(x) for x in l] or [x.strip() for x in l] is much, much slower than map(str, x) or map(str.strip, x). </ul>
 <li> After this, if I still need more speed, it's actually really easy to get PyRex up and running. I first copy a section of python code, put it directly in the pyrex code, and see what happens. Then I twiddle with it until it gets faster and faster.
</ul>
"
173340,"<p>I have successfully used the <a href=""http://msdn.microsoft.com/en-us/library/bb448854.aspx"" rel=""nofollow"">OpenXML Format SDK</a> in a project to modify an Excel spreadsheet via code. This would require .NET and I'm not sure about how well it would work under Mono.</p>
"
173774,"<p>Have you checked out the <a href=""http://www.mobilepythonbook.com/"" rel=""nofollow"">Mobile Python Book</a>?</p>

<blockquote>
  <p>This practical hands-on book effectively teaches how to program your own powerful and fun applications easily on Nokia smartphones based on Symbian OS and the S60 platform.</p>
</blockquote>

<p><img src=""http://www.mobilenin.com/mobilepythonbook/book-cover.png"" alt=""Mobile Python Book cover"" /></p>
"
173823,"<p>It's long-winded, so I'll break it into two parts.</p>

<pre><code>def columns( skills_defs, cols=2 ):
    pairs = [ ""\t"".join(skills_defs[i:i+cols]) for i in range(0,len(skills_defs),cols) ]
    return ""\n"".join( pairs )
</code></pre>

<p>It can, obviously, be done as a single loooong statement.</p>

<p>This works for an odd number of skills, also.</p>
"
197064,"<p>You are already doing NLP, if your module doesn't understand what language the text was then either the module doesn't work or the input was not in the correct language.</p>
"
277390,"<p>Here is a modified version of your algorithm. <em>zip</em> is used to iterate over <strong>short</strong> lengths and headers and a <em>class object</em> is used to count and iterate the <strong>long</strong> items, as well as combine the headers. <em>while</em> is more appropriate for the inner loop.
(forgive the too short names).</p>

<pre><code>class collector(object):
    def __init__(self, header):
        self.longHeader = header
        self.combinedHeader = []
        self.longHeaderCount = 0
    def combine(self, shortValue):
        self.combinedHeader.append(
            [self.longHeader[self.longHeaderCount]+' '+shortValue] )
        self.longHeaderCount += 1
        return self.longHeaderCount

def main():
    longHeader = [ 
       '','','bananas','','','','','','','','','','trains','','planes','','','','']
    shortHeader = [
    '','','bunches','','cars','','trucks','','freight','','cargo','','all other','','']
    spanShort=[1,1,3,1,3,1,3,1,3,1,3,1,3,1,3]
    spanLong=[1,1,3,1,1,1,1,1,1,1,1,1,3,1,3,1,3,1,3]
    sumSpanLong=0
    sumSpanShort=0

    combiner = collector(longHeader)
    for sLen,sHead in zip(spanShort,shortHeader):
        sumSpanLong += spanLong[combiner.longHeaderCount]
        sumSpanShort += sLen
        while sumSpanShort - sumSpanLong &gt; 0:
            combiner.combine(sHead)
            sumSpanLong += spanLong[combiner.longHeaderCount]
        combiner.combine(sHead)

    return combiner.combinedHeader
</code></pre>
"
277800,"<p>My experience debugging multi-threaded programs in PyDev (Eclipse on Windows XP) is, threads created using thread.start_new_thread could not be hooked, but thread created using threading.Thread could be hooked. Hope the information is helpful.</p>
"
278322,"<p><a href=""http://www.loria.fr/~rougier/pub/Software/pylab"" rel=""nofollow"">Interactive pylab console</a>.</p>
"
278710,"<p>The and_() function is the correct way to do logical conjunctions in SQLAlchemy, together with the &amp; operator, but be careful with the latter as it has surprising precedence rules, i.e. higher precedence than comparison operators. </p>

<p>You could also use a string as a primary join with the text() constructor, but that will make your code break with any table aliasing that comes with eagerloading and joins.</p>

<p>For logical deletion, it might be better to map the whole class over a select that ignores deleted values:</p>

<pre><code>mapper(Something, select([sometable], sometable.c.deleted == False))
</code></pre>
"
279120,"<p>You can find an example on <a href=""http://www.boddie.org.uk/python/COM.html"" rel=""nofollow"">this website</a>. OLE and is related to COM and ActiveX so you should look out for those terms. Do you have access this book from O'Reilly - <a href=""http://oreilly.com/catalog/9781565926219/"" rel=""nofollow"">Python Programming on Win32</a>?</p>

<p>There is also a <a href=""http://mail.python.org/pipermail/python-win32/"" rel=""nofollow"">Python Win32</a> mailing list.</p>
"
142500,"<p>Could you record the traffic (via a log) on your production site, then re-play it on your development server instrumented with a python memory debugger? (I recommend dozer: <a href=""http://pypi.python.org/pypi/Dozer"" rel=""nofollow"">http://pypi.python.org/pypi/Dozer</a>)</p>
"
329509,"<p>The Python Global Module Index (<a href=""http://docs.python.org/modindex.html"" rel=""nofollow"">http://docs.python.org/modindex.html</a>) lists out every module included in Python 2.6.  </p>

<p>Sourceforge has all sorts of good Python modules - one that came in handy for me recently was PyExcelerator, a module for writing straight to MS Excel workbooks.  The Python Package Index, (<a href=""http://pypi.python.org/"" rel=""nofollow"">http://pypi.python.org/</a>) is also a good source of Python modules.</p>
"
37245,"<p>I suggest <a href=""http://www.canonware.com/Parsing/"" rel=""nofollow"">http://www.canonware.com/Parsing/</a>, since it is pure python and you don't need to learn a grammar, but it isn't widely used, and has comparatively little documentation. The heavyweight is ANTLR and PyParsing. ANTLR can generate java and C++ parsers too, and AST walkers but you will have to learn what amounts to a new language.</p>
"
198553,"<p><code>csv.writer</code> is a ""builtin"" function.  That is, it is written in compiled C code rather than Python.  So its internal variables can't be accessed from Python code.</p>

<p>That being said, I'm not sure <strong>why</strong> you would need to inspect the csv.writer object to find out the file object.  That object is specified when creating the object:</p>

<pre><code>w = csv.writer(fileobj, dialect, ...)
</code></pre>

<p>So if you need to access that object later, just save it in another variable.</p>
"
198767,"<p>Pickle has both text and binary output formats. If you use the text-based format you can store it in a TEXT field, but it'll have to be a BLOB if you use the (more efficient) binary format.</p>
"
198795,"<pre><code> class Template

  def %(h)
    ""Hi!  I'm #{h[:name]}s, and I'm #{h[:age]}d years old.""


  end
end
</code></pre>

<p>Then call it with </p>

<pre><code>t=Template.new
t%({:name =&gt; ""Peter"", :age =&gt; 18})
</code></pre>

<p>This is not exactly what you asked for but could give you a hint.</p>
"
198882,"<p>Just because you <em>can</em> do it with regex, doesn't mean you should.  It would be much better to write instructions like: split the string on the period, make sure each group is numeric and within a certain range of numbers.</p>

<p>If you want to use a regex, just verify that it kind of ""looks like"" an IP address, as with Greg's regex.</p>
"
172420,"<p>AES 256 is generally the preferred choice, but depending on your location (or your customers' location) you may have legal constraints, and will be forced to use something weaker.</p>

<p>Also note that you should use a random IV for each communication and pass it along with the message (this will also save the need for a timestamp).</p>

<p>If possible, try not to depend on the algorithm, and pass the algorithm along with the message. The node will then look at the header, and decide on the algorithm that will be used for decryption. That way you can easily switch algorithms when a certain deployment calls for it.</p>
"
229842,"<p>It tells you that it can't find sr1 in scapy. Not sure just how newbite you are, but the interpreter is always your friend. Fire up the interpreter (just type ""python"" on the commandline), and at the prompt (>>>) type (but don't type the >'s, they'll show up by themselves):</p>

<pre><code>&gt;&gt;&gt; import scapy
&gt;&gt;&gt; from pprint import pformat
&gt;&gt;&gt; pformat(dir(scapy))
</code></pre>

<p>The last line should print a lot of stuff. Do you see 'sr1', 'IP', and 'ICMP' there anywhere? If not, the example is at fault.</p>

<p>Try also help(scapy)</p>

<p>That's about how much I can help you without installing scapy and looking at your actual source-file myself.</p>
"
230561,"<p>If you're more familiar with a GUI debugger, there's winpdb ('win' in this case does not refer to Windows). I actually use it on Linux.</p>

<p>On debian/ubuntu:</p>

<pre><code>sudo aptitude install winpdb
</code></pre>

<p>Then just put this in your code where you want it to break:</p>

<pre><code>import rpdb2; rpdb2.start_embedded_debugger_interactive_password()
</code></pre>

<p>Then start winpdb and attach to your running script.</p>
"
279942,"<p>pyglet has a lot of nice extras included with it (like image loading and sound).  If you're starting out, I'd try pyglet first, and then switch to PyOpenGL if you feel like you want to get closer to the metal.</p>

<p>The real important question though is: what are you trying to accomplish?  </p>
"
100974,"<p>If you ask</p>

<pre><code>if not spam:
    print ""Sorry. No SPAM.""
</code></pre>

<p>the <em>__nonzero__</em> method of <em>spam</em> gets called. From the Python manual:</p>

<blockquote>
  <p><strong>__nonzero__</strong>(<em>self</em>)
    Called to implement truth value testing, and the built-in operation bool(); should return False or True, or their integer equivalents 0 or 1. When this method is not defined, __len__() is called, if it is defined (see below). If a class defines neither __len__() nor __nonzero__(), all its instances are considered true.</p>
</blockquote>

<p>If you ask</p>

<pre><code>if spam == None:
    print ""Sorry. No SPAM here either.""
</code></pre>

<p>the <em>__eq__</em> method of <em>spam</em> gets called with the argument <em>None</em>.</p>

<p>For more information of the customization possibilities have a look at the Python documenation at <a href=""https://docs.python.org/reference/datamodel.html#basic-customization"" rel=""nofollow"">https://docs.python.org/reference/datamodel.html#basic-customization</a></p>
"
101143,"<p>Try win32clipboard from the win32all package (that's probably installed if you're on ActiveState Python).</p>

<p>See sample here: <a href=""http://code.activestate.com/recipes/474121/"" rel=""nofollow"">http://code.activestate.com/recipes/474121/</a></p>
"
99603,"<p>The data management features for LCDS described here are certainly valid, however I believe they do not let you actually develop a solution faster. A developer still has to write ALL the data access code, query execution, extracting data from datareaders into value objects. ALL of this has been solved a dozen of times with code generators. For instance the data management approach in WebORB for Java (much like in WebORB for .NET and PHP) is based on code generation which creates code for both client side AND server-side. You get all the ActionScript APIs out of the code generator to do full CRUD. </p>

<p>Additionally, WebORB provides video streaming and real-time messaging features and goes WAY beyond what both BlazeDS and LCDS offer combined, especially considering that the product is free. Just google it.</p>
"
100464,"<p>One thing that has to be considered when choosing session backend is ""how often session data is modified""? Even sites with moderate traffic will suffer if session data is modified on each request, making many database trips to store and retrieve data.</p>

<p>In my previous work we used memcache as session backend exclusively and it worked really well. Our administrative team put really great effort in making two special memcached instances stable as a rock, but after bit of twiddling with initial setup, we did not have any interrupts of session backends operations.</p>
"
280287,"<p>You're looking for <a href=""http://www.reinteract.org/"" rel=""nofollow"">Reinteract</a>, which is a Python-based shell that <a href=""http://tirania.org/blog/archive/2008/Nov-02.html"" rel=""nofollow"">at least partially inspired</a> the C# shell you found. It's definitely still in-development, but already very useful.</p>
"
97760,"<p>With much thanks to Jim, the exact solution I was looking for is:</p>

<pre><code>p.properties()[s].get_value_for_datastore(p)
</code></pre>

<p>To all the other respondents, thank you for your help. I also would have expected the Model class to implement the python standard way of doing this, but for whatever reason, it doesn't.</p>
"
171290,"<p>Tclsh is pretty nice (assuming you like Tcl, of course).</p>
"
38760,"<p>Throwing an exception for failure is one good way to proceed, and if you're returning a lot of different values, you can return a tuple.  For the specific case you're citing, I often take an intermediate approach: return the modified string on success, and return None on failure.  I'm enough of an unreconstructed C programmer to want to return a NULL pointer to char on failure.</p>

<p>If I were writing a routine to be used as part of a larger library and consumed by other developers, I'd throw an exception on failure.  When I'm eating my own dogfood, I'll probably return different types and test on return.</p>
"
328647,"<p>Ok, lots of mentions of linear algebra (cross product of vectors) and this works in a real (ie continuous or floating point) space but the question specifically stated that the two points were expressed as <strong>integers</strong> and thus a cross product is not the correct solution although it can give an approximate solution.</p>

<p>The correct solution is to use <a href=""http://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm"" rel=""nofollow"">Bresenham's Line Algorithm</a> between the two points and to see if the third point is one of the points on the line.  If the points are sufficiently distant that calculating the algorithm is non-performant (and it'd have to be really large for that to be the case) I'm sure you could dig around and find optimisations.</p>
"
328856,"<p>Same as almost all other OO languages, keep all instances of the class in a collection of some kind.</p>

<p>You can try this kind of thing.</p>

<pre><code>class MyClassFactory( object ):
    theWholeList= []
    def __call__( self, *args, **kw ):
         x= MyClass( *args, **kw )
         self.theWholeList.append( x )
         return x
</code></pre>

<p>Now you can do this.</p>

<pre><code>object= MyClassFactory( args, ... )
print MyClassFactory.theWholeList
</code></pre>
"
172782,"<p>Just a note on using psyco: In some cases it can actually produce slower run-times. Especially when trying to use psyco with code that was written in C. I can't remember the the article I read this, but the  <code>map()</code> and <code>reduce()</code> functions were mentioned specifically. Luckily you can tell psyco not to handle specified functions and/or modules.</p>
"
172053,"<p>I'm also looking into this.  I too am working on a Django project that might utilize Open Id.  For references, check out:</p>

<ul>
<li><a href=""http://siege.org/projects/phpMyID/"" rel=""nofollow"">PHPMyId</a></li>
<li><a href=""http://openid.net/get/"" rel=""nofollow"">OpenId's page</a></li>
</ul>

<p>Hopefully someone here has tackled this issue.</p>
"
172058,"<p>I'm using <a href=""http://siege.org/projects/phpMyID/"" rel=""nofollow"">phpMyID</a> to authenticate at StackOverflow right now. Generates a standard HTTP auth realm and works perfectly. It should be exactly what you need.</p>
"
172137,"<p>You could probably use the django OpenID library to write a provider to test against. Have one that always authenticates and one that always fails.</p>
"
142324,"<p>Or if you want to install it, so that it is always used with urllib2.urlopen (so you don't need to keep a reference to the opener around):</p>

<pre><code>import urllib2
url = 'www.proxyurl.com'
username = 'user'
password = 'pass'
password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
# None, with the ""WithDefaultRealm"" password manager means
# that the user/pass will be used for any realm (where
# there isn't a more specific match).
password_mgr.add_password(None, url, username, password)
auth_handler = urllib2.HTTPBasicAuthHandler(password_mgr)
opener = urllib2.build_opener(auth_handler)
urllib2.install_opener(opener)
print urllib2.urlopen(""http://www.example.com/folder/page.html"").read()
</code></pre>
"
97778,"<p>The ""good deployment"" issue -- for Python -- doesn't have the Deep Significance that it has for Java.</p>

<p>Python deployment for Django is basically ""move the files"".  You can run straight out of the subversion trunk directory if you want to.</p>

<p>You can, without breaking much of a sweat, using the Python <a href=""http://docs.python.org/dist/dist.html"" rel=""nofollow"">distutils</a> and build yourself a distribution kit that puts your Django apps into Python's site-packages.  I'm not a big fan of it, but it's really easy to do.  </p>

<p>Since my stuff runs in Linux, I have simple ""install.py"" scripts that move stuff out of the Subversion directories into <code>/opt/this</code> and <code>/opt/that</code> directories.  I use an explicit path settings in my Apache configuration to name those directories where the applications live.</p>

<p>Patching can be done by editing the files in place.  (A bad policy.)  I prefer to edit in the SVN location and rerun my little install to be sure I actually have all the files under control.</p>
"
98180,"<p>Other than NIO (RTMP) channels, LCDS include also the ""data management"" features. </p>

<p>Using this feature, you basically implement, in an ActionScript class, a CRUD-like interface defined by LCDS, and you get:</p>

<ul>
<li>automatic progressive list loading (large lists/datagrids loads while scrolling)</li>
<li>automatic crud management (you get object locally in flash, modify it, send it back and DB will get updated automatically)</li>
<li>feature for conflict resolution (if multiple user try to updated the same record at the same time)</li>
<li>if I remember well, also some improved integration with the LiveCycle ES workflow engine</li>
</ul>

<p>IMO, it can be very fast to develop this way, but only if you have only basic requirements and a simple architecture (forget SOA, that otherwise works so well with Flex). I'm fine with BlazeDS.</p>
"
98313,"<p>If you want some hand-on examples, <a href=""http://codespeak.net/pypy/dist/pypy/doc/getting-started.html"" rel=""nofollow"">PyPy's Getting Started</a> document has a section titled ""Trying out the translator"".</p>
"
281395,"<p>I promote pyglet because it has the nicest API I've yet seen on stuff like this.</p>

<p>Pyglet has opengl API as well. But it's often nicer to use the recently added vertex list support.</p>

<p>pyglet.gl</p>
"
144087,"<p>You might want to try <a href=""http://www.keyczar.org/"" rel=""nofollow"">keyczar</a> as mentioned by me in your other post, since that library actually has implementations for both python and java. That would make it easier to use it in both contexts.</p>

<p>A word of warning: I have not actually used this library 8(, so please take this with a grain of salt.</p>
"
144139,"<p>Java 5 has support of revocation checking via <a href=""http://java.sun.com/j2se/1.5.0/docs/guide/security/pki-tiger.html#OCSP"" rel=""nofollow"">OCSP built in</a>. If you want to build an OCSP responder, or have finer control over revocation checking, check out <a href=""http://www.bouncycastle.org/docs/docs1.5/overview-summary.html"" rel=""nofollow"">Bouncy Castle</a>. You can use this to implement your own <a href=""http://java.sun.com/javase/6/docs/api/java/security/cert/PKIXCertPathChecker.html"" rel=""nofollow"">CertPathChecker</a> that, for example, uses non-blocking I/O in its status checks.</p>
"
227945,"<p>See the <a href=""http://oreilly.com/catalog/9781565926219/"" rel=""nofollow"">Python Programming On Win32</a> for details on this package.</p>
"
228662,"<p>There is a python debugger that is part of the core distribution of python called 'pdb'. I rarely use it myself, but find it useful sometimes.</p>

<p>Given this program:</p>

<pre><code>def foo():
    a = 0
    print ""hi""

    a += 1

    print ""bye""

foo()
</code></pre>

<p>Here is a session debugging it:</p>

<pre><code>$ python /usr/lib/python2.5/pdb.py /var/tmp/pdbtest.py         ~
&gt; /var/tmp/pdbtest.py(2)&lt;module&gt;()
-&gt; def foo():
(Pdb) s
&gt; /var/tmp/pdbtest.py(10)&lt;module&gt;()
-&gt; foo()
(Pdb) s
--Call--
&gt; /var/tmp/pdbtest.py(2)foo()
-&gt; def foo():
(Pdb) s
&gt; /var/tmp/pdbtest.py(3)foo()
-&gt; a = 0
(Pdb) s
&gt; /var/tmp/pdbtest.py(4)foo()
-&gt; print ""hi""
(Pdb) print a
0
(Pdb) s
hi
&gt; /var/tmp/pdbtest.py(6)foo()
-&gt; a += 1
(Pdb) s
&gt; /var/tmp/pdbtest.py(8)foo()
-&gt; print ""bye""
(Pdb) print a
1
(Pdb) s
bye
--Return--
&gt; /var/tmp/pdbtest.py(8)foo()-&gt;None
-&gt; print ""bye""
(Pdb) s
--Return--
&gt; /var/tmp/pdbtest.py(10)&lt;module&gt;()-&gt;None
-&gt; foo()
(Pdb) s
</code></pre>
"
228734,"<p>Something like this?</p>

<pre><code>for letter in range(ord('a'), ord('z') + 1):
  print chr(letter) + "":"", lowertext.count(chr(letter))
</code></pre>

<p>(I don't speak Python; please forgive my syntax errors)</p>
"
228766,"<p>Do you mean using:</p>

<pre><code>import string
string.ascii_lowercase
</code></pre>

<p>then,</p>

<pre><code>counters = dict()
for letter in string.ascii_lowercase:
    counters[letter] = lowertext.count(letter)
</code></pre>

<p>All lowercase letters are accounted for, missing counters will have zero value.</p>

<p>using generators:</p>

<pre><code>counters = 
    dict( (letter,lowertext.count(letter)) for letter in string.ascii_lowercase )
</code></pre>
"
41721,"<p>Perhaps this is overkill for your case, but I would be tempted to create a ""Job"" class that takes the tuple as its constructor argument and has respective properties on it.  I'd then pass instances of this class around instead.</p>
"
40012,"<p>I seem to remember Brendan Eich commented on this in a recent podcast; if i recall correctly, it's not being considered, as it adds unreasonable restrictions to optimization. He compared it to the <code>arguments</code> local in that, while useful for varargs, its very existence removes the ability to guess at what a function will touch just by looking at its definition. </p>

<p>BTW: i believe JS <em>did</em> have support for accessing locals through the arguments local at one time - <a href=""http://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Functions/arguments"" rel=""nofollow"">a quick search</a> shows this has been deprecated though.</p>
"
328051,"<p>I was getting the same error.  </p>

<p>After some googling found this link to <a href=""http://www.microsoft.com/downloads/details.aspx?familyid=9B2DA534-3E03-4391-8A4D-074B9F2BC1BF&amp;displaylang=en"" rel=""nofollow"">MSVC++ 2008 Redestributable</a> and installed it.  </p>

<p>That solved the problem.</p>
"
328154,"<p>Using a more geometric approach, calculate the following distances:</p>

<pre><code>ab = sqrt((a.x-b.x)**2 + (a.y-b.y)**2)
ac = sqrt((a.x-c.x)**2 + (a.y-c.y)**2)
bc = sqrt((b.x-c.x)**2 + (b.y-c.y)**2)
</code></pre>

<p>and test whether <strong>ac+bc</strong> equals <strong>ab</strong>:</p>

<pre><code>is_on_segment = abs(ac + bc - ab) &lt; EPSILON
</code></pre>

<p>That's because there are three possibilities:</p>

<ul>
<li>The 3 points form a triangle => <strong>ac+bc > ab</strong></li>
<li>They are collinear and <strong>c</strong> is outside the <strong>ab</strong> segment => <strong>ac+bc > ab</strong></li>
<li>They are collinear and <strong>c</strong> is inside the <strong>ab</strong> segment => <strong>ac+bc = ab</strong></li>
</ul>
"
172313,"<p>Speaking as a library author:</p>

<p>I'm waiting for the final version to be released. My belief, like that of most of the Python community, is that 2.x will continue to be the dominant version for a period of weeks or months. That's plenty of time to release a nice, polished 3.x release.</p>

<p>I'll be maintaining separate 2.x and 3.x branches. 2.x will be backwards compatible to 2.4, so I can't use a lot of the fancy syntax or new features in 2.6 / 3.0. In contrast, the 3.x branch will use every one of those features that results in a nicer experience for the user. The test suite will be modified so that 2to3 will work upon it, and I'll maintain the same tests for both branches.</p>
"
95159,"<p>I use itertools (especially cycle, repeat, chain) to make python behave more like R and in other functional / vector applications.  Often this lets me avoid the overhead and complication of Numpy.  </p>

<pre><code># in R, shorter iterables are automatically cycled
# and all functions ""apply"" in a ""map""-like way over lists
&gt; 0:10 + 0:2
 [1]  0  2  4  3  5  7  6  8 10  9 11
</code></pre>

<p>Python
    #Normal python
    In [1]: range(10) + range(3)
    Out[1]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2]</p>

<pre><code>## this code is terrible, but it demos the idea.
from itertools import cycle
def addR(L1,L2):
    n = max( len(L1), len(L2))
    out = [None,]*n
    gen1,gen2 = cycle(L1), cycle(L2)
    ii = 0
    while ii &lt; n:
        out[ii] = gen1.next() + gen2.next()
        ii += 1
    return out

In [21]: addR(range(10), range(3))
Out[21]: [0, 2, 4, 3, 5, 7, 6, 8, 10, 9]
</code></pre>
"
283174,"<p>You can run TG <a href=""http://docs.turbogears.org/1.0/InstallWindows"" rel=""nofollow"">locally from windows</a>. The <code>tgsetup.py</code> method of installation uses <a href=""http://pypi.python.org/pypi/setuptools/0.6c9"" rel=""nofollow"">setuptools</a> which depends on being able to bring in <code>.egg</code> files from the internet. The best approach would be to open the firewall to eggs, as others suggested. TG has a <a href=""http://www.turbogears.org/download/filelist.html"" rel=""nofollow"">list of egg files</a> that you can try to bring manually (maybe from an open internet connection).
Installing an egg manually is possible, but <a href=""http://www.turbogears.org/download/filelist.html"" rel=""nofollow"">not recommended</a>.</p>

<p>If changing the firewall rules is not possible, you can use a Linux (bootable or virtual) installation that has a pre-configured TG package. For example, <a href=""http://mirror.isoc.org.il/pub/fedora/releases/9/Everything/i386/os/Packages/TurboGears-1.0.4.4-2.fc9.noarch.rpm"" rel=""nofollow"">Fedora has one</a>. This way, the TG package crosses (hopefully) the firewall as an <code>.rpm</code> file.</p>
"
145162,"<p>Python has extensions for accessing the Win32 API, but good luck trying to re-write explorer in <em>that</em> by yourself. Your best bet is to use a toolkit like <a href=""http://doc.trolltech.com/4.4/gallery-windowsxp.html"" rel=""nofollow"">Qt</a>, but you'll still have to write the vast majority of the application from scratch.</p>

<p>Is there any way you can re-use explorer itself in your project?</p>

<p><hr /></p>

<p>Updated for edited question:</p>

<p><a href=""http://www.gtk.org/"" rel=""nofollow"">GTK+</a> has an <a href=""http://library.gnome.org/devel/gtk/unstable/GtkIconView.html"" rel=""nofollow"">icon grid widget</a> that you could use. See a reference for <a href=""http://www.pygtk.org/"" rel=""nofollow"">PyGTK+</a>: <a href=""http://www.pygtk.org/docs/pygtk/class-gtkiconview.html"" rel=""nofollow""><code>gtk.IconView</code></a></p>
"
227325,"<p>Go Get Microsoft's <a href=""http://www.microsoft.com/downloads/details.aspx?familyid=09dfc342-648b-4119-b7eb-783b0f7d1178&amp;displaylang=en"" rel=""nofollow"">Scriptomatic</a></p>

<p>Run it, Select the appropriate class from the dropdown (WIN32_BIOS)</p>

<p>It will produce the necessary Python/WMI code for you.
(It will also generate VBScript, Perl, and JScript)</p>
"
227614,"<p>Have a look at the <a href=""http://en.wikipedia.org/wiki/Integer_programming#Integer_unknowns"" rel=""nofollow"">wikipedia</a> entry on linear programming. The integer programming section is what you're searching for (the constraint of the x[i] being integers is not an easy one). </p>

<p>Search python libraries for branch&amp;bound, branch&amp;cut and the like (I don't think they have been implemented in scipy yet).</p>

<p>Other interesting links:</p>

<ul>
<li><a href=""http://www.gnu.org/software/glpk/"" rel=""nofollow"">GNU Linear Programming Kit</a></li>
<li><a href=""http://www-128.ibm.com/developerworks/linux/library/l-glpk1/"" rel=""nofollow"">IBM article on GLPK</a></li>
</ul>
"
227721,"<p>This seems to work:</p>

<pre><code>with open(filename, ""r+"") as f:
    new_txt = process(f.read())
    f.truncate(0)
    f.write(new_txt)
</code></pre>
"
95014,"<p>An option you may consider, if an LL parser is ok to you, is to give <a href=""http://www.antlr.org/wiki/display/ANTLR3/Antlr3PythonTarget"" rel=""nofollow"">ANTLR</a> a try, it can generate python too (actually it is LL(*) as they name it, * stands for the quantity of lookahead it can cope with).</p>
"
146530,"<p>There are a number of distance metrics, as paradoja mentioned there is the Levenshtein distance, but there is also <a href=""http://en.wikipedia.org/wiki/New_York_State_Identification_and_Intelligence_System"" rel=""nofollow"">NYSIIS</a> and <a href=""http://en.wikipedia.org/wiki/Soundex"" rel=""nofollow"">Soundex</a>.  In terms of Python implementations, I have used <a href=""http://www.mindrot.org/projects/py-editdist/"" rel=""nofollow"">py-editdist</a> and <a href=""http://advas.sourceforge.net/"" rel=""nofollow"">ADVAS</a> before.  Both are nice in the sense that you get a single number back as a score.  Check out ADVAS first, it implements a bunch of algorithms.</p>
"
226141,"<p>The standard way to do this in Tcl/Tk is trivial: you use the same bind command but without the final argument. </p>

<pre><code>bind .b &lt;Button-1&gt; doSomething
puts ""the function is [bind .b &lt;Button-1&gt;]""
=&gt; the function is doSomething
</code></pre>

<p>You can do something similar with Tkinter but the results are, unfortunately, not quite as usable:</p>

<pre><code>e1.bind(""&lt;Button-1&gt;"",doSomething)
e1.bind(""&lt;Button-1&gt;"")
=&gt; 'if {""[-1208974516doSomething %# %b %f %h %k %s %t %w %x %y %A %E %K %N %W %T %X %Y %D]"" == ""break""} break\n'
</code></pre>

<p>Obviously, Tkinter is doing a lot of juggling below the covers. One solution would be to write a little helper procedure that remembers this for you:</p>

<pre><code>def bindWidget(widget,event,func=None):
    '''Set or retrieve the binding for an event on a widget'''

    if not widget.__dict__.has_key(""bindings""): widget.bindings=dict()

    if func:
        widget.bind(event,func)
        widget.bindings[event] = func
    else:
        return(widget.bindings.setdefault(event,None))
</code></pre>

<p>You would use it like this:</p>

<pre><code>e1=Entry()
print ""before, binding for &lt;Button-1&gt;: %s"" % bindWidget(e1,""&lt;Button-1&gt;"")
bindWidget(e1,""&lt;Button-1&gt;"",doSomething)
print "" after, binding for &lt;Button-1&gt;: %s"" % bindWidget(e1,""&lt;Button-1&gt;"")
</code></pre>

<p>When I run the above code I get:</p>

<pre><code>before, binding for &lt;Button-1&gt;: None
 after, binding for &lt;Button-1&gt;: &lt;function doSomething at 0xb7f2e79c&gt;
</code></pre>

<p>As a final caveat, I don't use Tkinter much so I'm not sure what the ramifications are of dynamically adding an attribute to a widget instance. It seems to be harmless, but if not you can always create a global dictionary to keep track of the bindings.</p>
"
226168,"<p>Try ReportLab for PDF output:</p>

<p><a href=""http://www.reportlab.org/"" rel=""nofollow"">http://www.reportlab.org/</a></p>
"
170368,"<p>If the watch supports a <a href=""http://www.usb.org/developers/devclass_docs#approved"" rel=""nofollow"">standard USB device class specification</a> such as HID or serial communication, there might already be a Macintosh driver for it built into the OS. Otherwise, you're going to have to get information about the vendor commands used to communicate with it from one of three sources: the manufacturer; reverse engineering the protocol used by the Windows driver; or from others who have already reverse engineered the protocol in order to support the device on Linux or BSD.</p>

<p>USB is a packet-based bus and it's very important to understand the various transaction types. Reading the <a href=""http://www.usb.org/developers/docs/"" rel=""nofollow"">USB specification</a> is a good place to start.</p>

<p>You can see what data is being transmitted to the device using a USB bus analyzer, which is an expensive proposition for a hobbyist but is well within the reach of most businesses doing USB development. For example, the <a href=""http://www.getcatalyst.com/product-conquest.html"" rel=""nofollow"">Catalyst Conquest</a> is $1199. Another established manufacturer is <a href=""http://www.lecroy.com/tm/products/ProtocolAnalyzers/usb.asp?menuid=67"" rel=""nofollow"">LeCroy (formerly CATC)</a>. There are also software USB analyzers that hook into the OS's USB stack, but they don't show all of the traffic on the bus, and may not be as reliable.</p>

<p>I'm not a Mac expert, so take this paragraph with a grain of salt: Apple has a driver development kit called the <a href=""http://developer.apple.com/referencelibrary/GettingStarted/GS_HardwareDrivers/index.html"" rel=""nofollow"">I/O Kit</a>, which apparently requires you to write your driver in C++, unless they also have some sort of user-mode driver framework. If you're writing it in Python, it will probably be more like a Python library that interfaces to someone else's (Apple's?) generic USB driver.</p>
"
327262,"<p>It's not shipped in OS X because of licensing issues (restrictions brought to you by the GPL).</p>

<p>Macports python should be fine if you have the readline package installed.</p>
"
327285,"<p>A couple attempts:</p>

<p>I figure you're doing something similar to this:</p>

<pre><code>from __future__ import with_statement

import time
from collections import deque, defaultdict

# Just used to generate some triples of words
def triplegen(words=""/usr/share/dict/words""):
    d=deque()
    with open(words) as f:
        for i in range(3):
            d.append(f.readline().strip())

        while d[-1] != '':
            yield tuple(d)
            d.popleft()
            d.append(f.readline().strip())

if __name__ == '__main__':
    class D(dict):
        def __missing__(self, key):
            self[key] = D()
            return self[key]
    h=D()
    for a, b, c in triplegen():
        h[a][b][c] = 1
    time.sleep(60)
</code></pre>

<p>That gives me ~88MB.</p>

<p>Changing the storage to</p>

<pre><code>h[a, b, c] = 1
</code></pre>

<p>takes ~25MB</p>

<p>interning a, b, and c makes it take about 31MB.  My case is a bit special because my words never repeat on the input.  You might try some variations yourself and see if one of these helps you.</p>
"
41574,"<p>A print statement does its IO through ""sys.stdout.write"" so you can override sys.stdout if you want to manipulate the print stream.</p>
"
171611,"<p>No need to create this yourself.</p>

<p>Use the very good <a href=""http://www.pythonware.com/products/pil/"" rel=""nofollow"">Python Imaging Library</a> (PIL)</p>
"
201019,"<p>If you can avoid creating the lists in the first place, you'll be happier.</p>

<p>Rather than</p>

<pre><code>aBigList = someListMakingFunction()
filter( lambda x:x&gt;10, aBigList )
</code></pre>

<p>You might want to look at your function that makes the list.</p>

<pre><code>def someListMakingGenerator( ):
    for x in some source:
        yield x
</code></pre>

<p>Then your filter doesn't involve a giant tract of memory</p>

<pre><code>def myFilter( aGenerator ):
    for x in aGenerator:
        if x &gt; 10: 
            yield x
</code></pre>

<p>By using generators, you don't keep much stuff in memory.</p>
"
285912,"<p>If your into QT <a href=""http://die-offenbachs.de/eric/index.html"" rel=""nofollow"">EricIDE</a> is a good choice</p>
"
91972,"<p>Another good option is to use <a href=""http://ipython.scipy.org/moin/"" rel=""nofollow"">IPython</a>, which is an interactive environment with a lot of extra features, including automatic pretty printing, tab-completion of methods, easy shell access, and a lot more.  It's also very easy to install.  </p>

<p><a href=""http://ipython.scipy.org/doc/manual/html/interactive/tutorial.html"" rel=""nofollow"">IPython tutorial</a></p>
"
92269,"<p>Something great to play around with, though not a project, is <a href=""http://pythonchallenge.com"" rel=""nofollow"">The Python Challenge</a>.  I've found it quite useful in improving my python skills, and it gives your brain a good workout at the same time.</p>
"
285943,"<p>I think you want <code>url_pattern.sub(getExpandedURL, text)</code>.</p>

<blockquote>
  <p>re.sub(pattern, repl, string, count=0)</p>
  
  <p>Return the string obtained by replacing the leftmost non-overlapping occurrences of the pattern in string by the replacement repl.  repl can be either a string or a callable; if a callable, it's passed the match object and must return a replacement string to be used.</p>
</blockquote>
"
285963,"<p>Though I suppose the others <em>might</em> be correct in pointing you to using Beautiful Soup, they <em>might</em> not, and using an external library might be massively over-the-top for your purposes. Here's a regex which will do what you ask.</p>

<pre><code>/&lt;a\s+[^&gt;]*?href=""([^""]*)"".*?&gt;(.*?)&lt;\/a&gt;/
</code></pre>

<p>Here's what it matches:</p>

<pre><code>'&lt;a href=""url"" close=""true""&gt;text&lt;/a&gt;'
// Parts: ""url"", ""text""

'&lt;a href=""url"" close=""true""&gt;text&lt;span&gt;something&lt;/span&gt;&lt;/a&gt;'
// Parts: ""url"", ""text&lt;span&gt;something&lt;/span&gt;""
</code></pre>

<p>If you wanted to get <em>just</em> the text (eg: ""textsomething"" in the second example above), I'd just run another regex over it to strip anything between pointed brackets.</p>
"
286222,"<p>It seems the question could be more precisely stated as ""<em>How to convert HTML to XML so that XPath expressions can be evaluated against it</em>"".</p>

<p>Here are two good tools:</p>

<ol>
<li><p><a href=""http://home.ccil.org/~cowan/XML/tagsoup/"" rel=""nofollow""><strong>TagSoup</strong></a>, an open-source program, is a Java and SAX - based tool, developed by <a href=""http://home.ccil.org/~cowan/"" rel=""nofollow""><strong>John Cowan</strong></a>. This is 
a SAX-compliant parser written in Java that, instead of parsing well-formed or valid XML, parses HTML as it is found in the wild: poor, nasty and brutish, though quite often far from short. TagSoup is designed for people who have to process this stuff using some semblance of a rational application design. By providing a SAX interface, it allows standard XML tools to be applied to even the worst HTML. TagSoup also includes a command-line processor that reads HTML files and can generate either clean HTML or well-formed XML that is a close approximation to XHTML.<br>
<a href=""http://www.jezuk.co.uk/arabica/log?id=3591"" rel=""nofollow"">Taggle</a> is a commercial C++ port of TagSoup.</p></li>
<li><p><a href=""http://code.msdn.microsoft.com/SgmlReader"" rel=""nofollow""><strong>SgmlReader</strong></a> is a tool developed by Microsoft's <a href=""http://www.lovettsoftware.com/"" rel=""nofollow""><strong>Chris Lovett</strong></a>.<br />
SgmlReader is an XmlReader API over any SGML document (including built in support for HTML). A command line utility is also provided which outputs the well formed XML result.<br />
Download the zip file including the standalone executable and the full source code: <a href=""http://code.msdn.microsoft.com/SgmlReader/Release/ProjectReleases.aspx?ReleaseId=1442"" rel=""nofollow""><strong>SgmlReader.zip</strong></a></p></li>
</ol>
"
147718,"<p>Have you tried copying and pasting your code into the Python REPL to see what will happen?</p>

<pre><code>&gt;&gt;&gt; value = 0xdeadbeef
&gt;&gt;&gt; value &amp;= ~(1&lt;&lt;10)
&gt;&gt;&gt; hex (value)
'0xdeadbaef'
</code></pre>
"
147721,"<p>Omit the 'unsigned long', and the semi-colons are not needed either:</p>

<pre><code>value = 0xDEADBEEF
value &amp;= ~(1&lt;&lt;10)
print value
""0x%08X"" % value
</code></pre>
"
203266,"<p>DanJ, here's a pretty good list of all the known Python frameworks: <a href=""http://wiki.python.org/moin/WebFrameworks"" rel=""nofollow"">http://wiki.python.org/moin/WebFrameworks</a></p>

<p>I would recommend looking at the wikipedia articles for <a href=""http://en.wikipedia.org/wiki/Django_(web_framework)"" rel=""nofollow"">Django</a>, <a href=""http://en.wikipedia.org/wiki/Turbogears"" rel=""nofollow"">Turbogears</a>, <a href=""http://en.wikipedia.org/wiki/Pylons"" rel=""nofollow"">Pylons</a>, etc.  [I wrote an article on web.py once, but it got deleted :-(]  They explain the philosophical and component differences between the frameworks pretty well.</p>

<p>Personally, I like TurboGears a lot since it is based on well-known components, CherryPy (for web serving and URL routing), Kid (for templates), and SQLObject (for object-relational mapping).  I like that they've resisted the urge to ""roll your own"" for all the components, and I feel that the result is very Pythonic and easy to get started with.</p>

<p>But you should look at some code samples and tutorials, and decide what suits you best.</p>
"
169079,"<pre><code>def preserve_cwd(function):
   def decorator(*args, **kwargs):
      cwd = os.getcwd()
      result = function(*args, **kwargs)
      os.chdir(cwd)
      return result
   return decorator
</code></pre>

<p>Here's how it's used:</p>

<pre><code>@preserve_cwd
def test():
  print 'was:',os.getcwd()
  os.chdir('/')
  print 'now:',os.getcwd()

&gt;&gt;&gt; print os.getcwd()
/Users/dspitzer
&gt;&gt;&gt; test()
was: /Users/dspitzer
now: /
&gt;&gt;&gt; print os.getcwd()
/Users/dspitzer
</code></pre>
"
43386,"<p>You should have a look at django and especially its <a href=""http://www.djangoproject.com/documentation/forms/"" rel=""nofollow"">newforms</a> and <a href=""http://docs.djangoproject.com/en/dev/ref/contrib/admin/#ref-contrib-admin"" rel=""nofollow"">admin</a> modules. The newforms module provides a nice possibility to do server side validation with automated generation of error messages/pages for the user. Adding ajax validation is also <a href=""http://lukeplant.me.uk/blog.php?id=1107301681"" rel=""nofollow"">possible</a> </p>
"
326932,"<p>The Python convention is to name ""private"" functions and methods with a leading underscore. When you see a leading underscore, you know not to try and use it.</p>

<p>Remember, <a href=""http://dirtsimple.org/2004/12/python-is-not-java.html"">Python is not Java</a>.</p>
"
327049,"<p>For what it's worth (see Jim's answer). On my machine, running python 2.5:</p>

<pre><code>PS C:\&gt; python -m timeit -n 100000 10000**.5
100000 loops, best of 3: 0.0543 usec per loop
PS C:\&gt; python -m timeit -n 100000 -s ""import math"" math.sqrt(10000)
100000 loops, best of 3: 0.162 usec per loop
PS C:\&gt; python -m timeit -n 100000 -s ""from math import sqrt"" sqrt(10000)
100000 loops, best of 3: 0.0541 usec per loop
</code></pre>
"
201298,"<p>For a database-driven website, of course, your best option is a db table. I'm assuming that you are not doing the database thing.</p>

<p>If you don't care about human-readable formats, then <code>pickle</code> is a simple and straightforward way to go. I've also heard good reports about <code>simplejson</code>.</p>

<p>If human readability is important, two simple options present themselves:</p>

<p><strong>Module:</strong> Just use a module. If all you need are a few globals and nothing fancy, then this is the way to go. If you really got desperate, you could define classes and class variables to emulate sections. The downside here: if the file will be hand-edited by a user, errors could be hard to catch and debug.</p>

<p><strong>INI format:</strong> I've been using <a href=""http://www.voidspace.org.uk/python/configobj.html"" rel=""nofollow"">ConfigObj</a> for this, with quite a bit of success. ConfigObj is essentially a replacement for ConfigParser, with support for nested sections and much more. Optionally, you can define expected types or values for a file and validate it, providing a safety net (and important error feedback) for users/administrators.</p>
"
147722,"<p>Python has C style bit manipulation operators, so your example is literally the same in Python except without type keywords.</p>

<pre><code>value = 0xdeadbeef
value &amp;= ~(1 &lt;&lt; 10)
</code></pre>
"
286703,"<p>Here's something I found last night that will do exactly what you want when the program crashes:</p>

<p><a href=""http://code.google.com/p/django-command-extensions/"" rel=""nofollow"">http://code.google.com/p/django-command-extensions/</a></p>

<p>Once you install that you can run:</p>

<blockquote>
  <p>python manage.py runserver_plus</p>
</blockquote>

<p>and you will have an interactive <code>AJAX console</code> on your <code>Error</code> page.  (Obviously, be careful with the amount of access people have to this web server when running in that mode.)</p>

<p>GitHub: <a href=""https://github.com/django-extensions/django-extensions"" rel=""nofollow"">https://github.com/django-extensions/django-extensions</a></p>

<p>You can get Django Extensions by using pip or easy_install:</p>

<blockquote>
  <p>$ pip install django-extensions or $ easy_install django-extensions</p>
</blockquote>

<p>If you want to install it from source, grab the git repository from GitHub and run setup.py:</p>

<blockquote>
  <p>$ git clone git://github.com/django-extensions/django-extensions.git<br>
  $ cd django-extensions<br>
  $ python setup.py install</p>
</blockquote>
"
287234,"<p>This is good practice. First, it clearly marks your module entry point (assuming you don't have any other executable code at toplevel - yuck). Second, it makes your module importable by other modules without executing, which some tools like code checkers, packagers etc. need to do.</p>
"
224051,"<p>As far as I know, Python classes use dictionaries to store their attributes anyway (that's hidden from the programmer), so it looks to me that what you've done there is effectively emulate a Python class... using a python class. </p>
"
224713,"<p>I don't see anything significant wrong with that code -- is it behaving incorrectly, or are you just looking for general style guidelines?</p>

<p>A few notes:</p>

<ol>
<li>Instead of <code>logger.info (""foo %s %s"" % (bar, baz))</code>, use <code>""foo %s %s"", bar, baz</code>. This avoids the overhead of string formatting if the message won't be printed.</li>
<li>Put a <code>try...finally</code> around opening <code>emailpath</code>.</li>
<li>Use <code>'\n'.join (body)</code>, instead of <code>string.join (body, '\n')</code>.</li>
<li>Instead of <code>msg.getaddr(""From"")</code>, just <code>msg.From</code>.</li>
</ol>
"
146683,"<p><a href=""http://docs.python.org/lib/node46.html"" rel=""nofollow""><code>sub</code></a> can take a callable as it's argument rather than a simple string. Using that, you can replace all variables with one function call:</p>

<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; var_matcher = re.compile(r'&lt;%(.*?)%&gt;', re.LOCALE)
&gt;&gt;&gt; string = '&lt;%""TITLE""%&gt; &lt;%""SHMITLE""%&gt;'
&gt;&gt;&gt; values = {'""TITLE""': ""I am a title."", '""SHMITLE""': ""And I am a shmitle.""}
&gt;&gt;&gt; var_matcher.sub(lambda m: vars[m.group(1)], string)
'I am a title. And I am a shmitle.
</code></pre>

<p>Follow <a href=""#146646"" rel=""nofollow"">eduffy.myopenid.com</a>'s advice and keep the compiled regexes around. </p>

<p>The same recipe can be applied to the first loop, only there you need to store the value of the variable first, and always return <code>""""</code> as replacement.</p>
"
89809,"<p><a href=""http://www.larsen-b.com/Article/206.html"" rel=""nofollow"">This article</a>, ""Send hand-crafted Ethernet Frames in Python (ARP for example)"", seems to be exactly what you are looking for.</p>
"
89937,"<pre><code> pat = re.compile ('[^\w-]')

 def onlyallowed(s):
    return not pat.search (s)
</code></pre>
"
287515,"<p>I have noticed too the lack of Python documentation. The docs I've found are only these that come up first as Google searches (with the <a href=""http://tix.sourceforge.net/docs/html/TixUser/TixUser.html"" rel=""nofollow"">Python Tix User Guide</a> being the most prominent.</p>

<p>So far, I've done exactly what you describe: mentally convert the Tcl docs.</p>
"
287791,"<p>There are actually <strong>two</strong> libraries that solve this, the older <a href=""https://docs.python.org/library/curses.html"" rel=""nofollow"">curses</a> and the newer <a href=""http://www.jedsoft.org/slang/"" rel=""nofollow"">S-Lang</a>. Curses has a tendency to make buggy line art, especially on Windows and on unicode consoles (it's unicode support is shit). S-Lang's <a href=""http://www.jedsoft.org/slang/doc/html/cslang-8.html"" rel=""nofollow"">screen management functions</a> are better.</p>

<p>While I haven't used either of them in Python, and it seems curses is better supported, in C at least I'm switching my code to S-Lang because of those issues, and because deep down I never really liked the curses API.</p>
"
287884,"<p>If your reusable files are packaged (that is, they include an <code>__init__.py</code> file) and the path to that package is part of your PYTHONPATH or sys.path then you should be able to do just</p>

<pre><code>import Foo
</code></pre>

<p><a href=""http://stackoverflow.com/questions/279237/python-import-a-module-from-a-folder#279287"">This question</a> provides a few more details.</p>

<p>(Note: As Jim said, you could also drop your reusable code into your <code>site-packages</code> directory.)</p>
"
88714,"<p>Since the C++ cin reads from sys.stdin, you'll often do something more like the following.</p>

<pre><code>import sys
tokens= sys.stdin.read().split()
try:
   a= int(token[0])
   b= float(token[1])
except ValueError, e:
   print e # handle the invalid input
</code></pre>
"
223002,"<p>Depending on what exactly you're trying to do, <a href=""http://www.autoitscript.com/autoit3/index.shtml"" rel=""nofollow"">AutoIt</a> may meet your needs.  In fact, I'm sure it will do anything you need it to do.</p>

<p>Taken from my <a href=""http://stackoverflow.com/questions/151846/get-other-running-processes-window-sizes-in-python#155587"">other post</a> about how to use AutoIt with Python:</p>

<pre><code>import win32com.client
oAutoItX = win32com.client.Dispatch( ""AutoItX3.Control"" )

oAutoItX.Opt(""WinTitleMatchMode"", 2) #Match text anywhere in a window title

width = oAutoItX.WinGetClientSizeWidth(""Firefox"")
height = oAutoItX.WinGetClientSizeHeight(""Firefox"")

print width, height
</code></pre>

<p>You can of course use any of the <a href=""http://www.autoitscript.com/autoit3/docs/functions.htm"" rel=""nofollow"">AutoItX functions</a> (note that that link goes to the AutoIt function reference, the com version of AutoIt - AutoItX has a subset of that list...the documentation is included in the download) in this way.  I don't know what you're wanting to do, so I can't point you towards the appropriate functions, but this should get you started.</p>
"
223584,"<p>If you have this:</p>

<pre><code>class MyClass:
    def __init__(self):
        print ""MyClass""
</code></pre>

<p>Then you usually do this:</p>

<pre><code>&gt;&gt;&gt; x = MyClass()
MyClass
</code></pre>

<p>But you could also do this, which is what I think you're asking:</p>

<pre><code>&gt;&gt;&gt; a = ""MyClass""
&gt;&gt;&gt; y = eval(a)()
MyClass
</code></pre>

<p>But, be very careful about where you get the string that you use ""eval()"" on -- if it's come from the user, you're essentially creating an enormous security hole.</p>
"
223886,"<p>I don't know if this will help you with 2008, but with Visual Studio 2005 and win32com I'm able to do this:</p>

<pre><code>&gt;&gt;&gt; import win32com.client
&gt;&gt;&gt; b = win32com.client.Dispatch('VisualStudio.DTE')
&gt;&gt;&gt; b
&lt;COMObject VisualStudio.DTE&gt;
&gt;&gt;&gt; b.name
u'Microsoft Visual Studio'
&gt;&gt;&gt; b.Version
u'8.0'
</code></pre>

<p>Unfortunately I don't have 2008 to test with though.</p>
"
288151,"<p>While it may not help you at the moment, tk 8.5 comes with an extended set of widgets. This extended set is available with tk 8.4 by way of an extension known as ""tile"". Included in the extended set of widgets is a notebook widget. Unfortunately, at this time Tkinter by default uses a fairly old version of Tk that doesn't come with these widgets.</p>

<p>There have been efforts to make tile available to Tkinter. Check out <a href=""http://tkinter.unpythonic.net/wiki/TileWrapper"" rel=""nofollow"">http://tkinter.unpythonic.net/wiki/TileWrapper</a>. For another similar effort see <a href=""http://pypi.python.org/pypi/pyttk"" rel=""nofollow"">http://pypi.python.org/pypi/pyttk</a>. Also, for a taste of how these widgets look (in Ruby, Perl and Tcl) see <a href=""http://www.tkdocs.com/"" rel=""nofollow"">http://www.tkdocs.com/</a>. </p>

<p>Tk 8.5 is a <em>huge</em> improvement over stock Tk. It introduces several new widgets, native widgets, and a theming engine. Hopefully it will be available by default in Tkinter some day soon. Too bad the Python world is lagging behind other languages.</p>

<p>*update: The latest versions of Python now include support for the themed widgets out of the box. _*</p>
"
325270,"<p>It looks like an SxS (""side-by-side"") issue. Probably the runtime libraries PIL is linked against are missing. Try installing a redistributable package of a compiler which was used to build PIL.</p>

<p><a href=""http://www.microsoft.com/downloads/details.aspx?familyid=200B2FD9-AE1A-4A14-984D-389C36F85647&amp;displaylang=en"" rel=""nofollow"">MSVC 2005 redist</a></p>

<p><a href=""http://www.microsoft.com/downloads/details.aspx?familyid=D5692CE4-ADAD-4000-ABFE-64628A267EF0&amp;displaylang=en"" rel=""nofollow"">MSVC 2008 redist</a></p>
"
45564,"<p>You could perhaps take a look at the <a href=""http://www.alexmac.cc/tablet-apps/tablet-apps-0.3.1.tar.bz2"" rel=""nofollow"">software</a> described <a href=""http://www.alexmac.cc/tablet-apps/"" rel=""nofollow"">here</a>. It is a gnome applet, written in Python.</p>

<p>From the web site:</p>

<p>""The gnome wacom applet is a small gnome panel applet that shows how much pressure is being applied to your wacom tablet by the current device. Clicking on the panel icon brings up a dialog allowing you to select a different device and check what pressure and tilt information is being recieved from it. This dialog also contains a small drawing test area to give your pen a quick test.""</p>

<p><a href=""http://www.google.com/search?q=wacom+tablet+python"" rel=""nofollow"">Google is your friend</a></p>
"
46028,"<p>I don't know of any, but if all else fails you could use <a href=""http://docs.python.org/lib/module-ctypes.html"" rel=""nofollow"">ctypes</a> to directly use libdwarf, libelf or libbfd.</p>
"
326594,"<pre><code>py&gt; data = ""0010011010011101""
py&gt; data = [data[8*i:8*(i+1)] for i in range(len(data)/8)]
py&gt; data
['00100110', '10011101']
py&gt; data = [int(i, 2) for i in data]
py&gt; data
[38, 157]
py&gt; data = ''.join(chr(i) for i in data)
py&gt; data
'&amp;\x9d'
</code></pre>
"
170792,"<p>There isn't any built in support for mod_python logging to Apache currently. If you really want to work within the Apache logs you can check out this thread (make sure you get the second version of the posted code, rather than the first):</p>

<ul>
<li><a href=""http://www.dojoforum.com/node/13239"" rel=""nofollow"">http://www.dojoforum.com/node/13239</a></li>
<li><a href=""http://www.modpython.org/pipermail/mod_python/2005-October/019295.html"" rel=""nofollow"">http://www.modpython.org/pipermail/mod_python/2005-October/019295.html</a></li>
</ul>

<p>If you're just looking to use a more structured logging system, the Python standard logging module referred to by Blair is very feature complete. Aside from the Python.org docs Blair linked, here's a more in-depth look at the module's features from onLamp: </p>

<ul>
<li><a href=""http://www.onlamp.com/pub/a/python/2005/06/02/logging.html"" rel=""nofollow"">http://www.onlamp.com/pub/a/python/2005/06/02/logging.html</a></li>
</ul>

<p>And for a quickie example usage: </p>

<ul>
<li><a href=""http://hackmap.blogspot.com/2007/06/note-to-self-using-python-logging.html"" rel=""nofollow"">http://hackmap.blogspot.com/2007/06/note-to-self-using-python-logging.html</a></li>
</ul>
"
203148,"<p>Django is amazingly good.  Guido uses it (working at Google).  It's the main reason why i find myself working more in Python than in Lua.</p>
"
87562,"<p>Use this as an opportunity to remove unused features!  Definitely go with the new language.  Call it 2.0.  It will be a lot less work to rebuild the 80% of it that you really need.</p>

<p>Start by wiping your brain clean of the whole application.  Sit down with a list of its overall goals, then decide which features are needed based on which ones are used.  Then redesign it with those features in mind, and build.</p>

<p>(I love to delete code.)</p>
"
87651,"<p>Using a standard W3 DOM such as the stdlib's minidom, or pxdom:</p>

<pre><code>def getValues(category):
    for parent in document.getElementsByTagName('parent'):
        if parent.getAttribute('name')==category:
            return [
                el.getAttribute('value')
                for el in parent.getElementsByTagName('child')
            ]
    raise ValueError('parent not found')
</code></pre>
"
87998,"<p>It works out better than you'd believe. </p>

<p>Recently I did a large reverse-engineering job on a hideous old collection of C code.  Function by function I reallocated the features that were still relevant into classes, wrote unit tests for the classes, and built up what looked like a replacement application.  It had some of the original ""logic flow"" through the classes, and some classes were poorly designed [Mostly this was because of a subset of the global variables that was too hard to tease apart.]</p>

<p>It passed unit tests at the class level and at the overall application level.  The legacy source was mostly used as a kind of ""specification in C"" to ferret out the really obscure business rules.</p>

<p>Last year, I wrote a project plan for replacing 30-year old COBOL.  The customer was leaning toward Java.  I prototyped the revised data model in Python using Django as part of the planning effort.  I could demo the core transactions before I was done planning.</p>

<p><strong>Note</strong>:  It was quicker to build a the model and admin interface in Django than to plan the project as a whole.</p>

<p>Because of the ""we need to use Java"" mentality, the resulting project will be larger and more expensive than finishing the Django demo.  With no real value to balance that cost.</p>

<p>Also, I did the same basic ""prototype in Django"" for a VB desktop application that needed to become a web application.  I built the model in Django, loaded legacy data, and was up and running in a few weeks.  I used that working prototype to specify the rest of the conversion effort.</p>

<p><strong>Note</strong>:  I had a working Django implementation (model and admin pages only) that I used to plan the rest of the effort.</p>

<p>The best part about doing this kind of prototyping in Django is that you can mess around with the model, unit tests and admin pages until you get it <strong>right</strong>.    Once the model's right, you can spend the rest of your time fiddling around with the user interface until everyone's happy.</p>
"
222159,"<p>It's always worth doing something the hard way - once - as a learning exercise. Once you understand how it works, pick a framework that suits your application, and use that. You don't need to reinvent the wheel once you understand angular velocity. :-)</p>

<p>It's also worth making sure that you have a fairly robust understanding of the programming language behind the framework <em>before</em> you jump in -- trying to learn both Django and Python at the same time (or Ruby and Rails, or X and Y), can lead to even more confusion. Write some code in the language first, then add the framework.</p>

<p>We learn to develop, not by using tools, but by solving problems. Run into a few walls, climb over, and find some higher walls!</p>
"
222427,"<p>I think <a href=""http://nedbatchelder.com/code/cog/"" rel=""nofollow"">Cog</a> does what you want.</p>
"
222466,"<p>Looks like findall only supports a subset XPath.  See the mailing list discussion <a href=""http://codespeak.net/pipermail/lxml-dev/2006-May/001294.html"" rel=""nofollow"">here</a></p>
"
205056,"<p>My revised answer, using <strong>re.split()</strong>, which does things in one regex pass:</p>

<pre><code>import re
text=""abcdedfe falijbijie bbbb laifsjelifjl""
ab_re = re.compile(""([ab])"")
tokens = ab_re.split(text)
non_matches = tokens[0::2]
matches = tokens[1::2]
</code></pre>

<p>(edit: here is a complete function version)</p>

<pre><code>def split_matches(text,compiled_re):
    ''' given  a compiled re, split a text 
    into matching and nonmatching sections
    returns m, n_m, two lists
    '''
    tokens = compiled_re.split(text)
    matches = tokens[1::2]
    non_matches = tokens[0::2]
    return matches,non_matches

m,nm = split_matches(text,ab_re)
''.join(nm) # equivalent to ab_re.sub('',text)
</code></pre>
"
49175,"<p>Also, if you need to get an .egg package off a single .py file app, check this link: <a href=""http://peak.telecommunity.com/DevCenter/EasyInstall#packaging-others-projects-as-eggs"" rel=""nofollow"">EasyInstall - Packaging others projects as eggs</a>.</p>
"
49911,"<p>With <a href=""http://www.jython.org/Project/"" rel=""nofollow"">Jython</a> you can have both. It's only at Python 2.2, but still very useful if you need an embedded interpreter that has access to the Java runtime.</p>
"
324236,"<p>Registering callbacks slows down the parsing tremendously. [EDIT]This is because the (fast) C code has to invoke the python interpreter which is just not as fast as C. Basically, you're using the C code to read the file (fast) and then build the DOM in Python (slow).[/EDIT]</p>

<p>Try to use xml.etree.ElementTree which is implemented 100% in C and which can parse XML without any callbacks to python code.</p>

<p>After the document has been parsed, you can filter it to get what you want.</p>

<p>If that's still too slow and you don't need a DOM another option is to read the file into a string and use simple string operations to process it.</p>
"
47958,"<p>Eggs are a pretty good way to distribute python apps.  Think of it as a platform independent .deb file that will install all dependencies and whatnot.  The advantage is that it's easy to use for the end user.  The disadvantage are that it can be cumbersome to package your app up as a .egg file.</p>

<p>You should also offer an alternative means of installation in addition to .eggs.  There are some people who don't like using eggs because they don't like the idea of a software program installing whatever software it wants.  These usually tend to be sysadmin types.</p>
"
204460,"<p>The memory location given by the <code>repr()</code> function is an address in virtual memory, not an address in the system's global memory.  Each of your processes returned by fork() has its own virtual memory space which is completely distinct from other processes.  They do not share memory.</p>

<p><strong>Edit:</strong> Per brian's comments below, technically they do share memory until the kernel decides to segregate them (when a child writes to a portion of shared memory).  The behavior, though, is effectively the same.</p>

<p>The structure of your programs is the same, so python uses the same virtual memory location <strong>in each processes' distinct virtual memory store</strong>  for each of your identical objects for each child.</p>

<p>If you actually modify the content of the objects and test them, you will see that even though the memory location looks the same, the two are completely distinct objects, because they belong to two distinct processes.  In reality you can't modify one from the other (without some kind of interprocess communication to mediate).</p>
"
148055,"<p>You can use in:</p>

<pre><code>if job  in [""mechanic"", ""tech""]:
    print ""awesome""
</code></pre>

<p>When checking very large numbers, it may also be worth storing off a set of the items to check, as this will be faster.  Eg.</p>

<pre><code>AwesomeJobs = set([""mechanic"", ""tech"", ... lots of others ])
...

def func():
    if job in AwesomeJobs:
        print ""awesome""
</code></pre>
"
289748,"<p>Two improvements come to mind:</p>

<ul>
<li>40 is spelled ""forty"", not ""fourty""</li>
<li>your program needs unit tests</li>
</ul>

<p>Have a look at the Python <a href=""http://python.org/doc/2.5/lib/module-doctest.html"" rel=""nofollow"">doctest</a> and <a href=""http://python.org/doc/2.5/lib/module-unittest.html"" rel=""nofollow"">unittest</a> modules.</p>
"
290105,"<p>I also successfully use <a href=""http://pymssql.sourceforge.net/"" rel=""nofollow"">pymssql</a> with CPython. (With and without SQLAlchemy).</p>
"
86167,"<blockquote>
  <p>I can't think of a way to do this without including a username and password for the smtp server in the application...</p>
</blockquote>

<p>You only need a username and password for authenticating yourself to a smarthost.  You don't need it to send mail directly, you need it to send mail through a relay, e.g. your ISP's mail server.  It's perfectly possible to send email without authentication - that's why spam is so hard to stop.</p>

<p>Having said that, some ISPs block outbound traffic on port 25, so the most robust alternative is an HTTP POST, which is unlikely to be blocked by anything.  Be sure to pick a URL that you won't feel restricted by later on, or better yet, have the application periodically check for updates, so if you decide to change domains or something, you can push an update in advance.</p>

<p>Security isn't really an issue.  You can fairly easily discard junk data, so all that really concerns you is whether or not somebody would go to the trouble of constructing fake tracebacks to mess with you, and that's a very unlikely situation.</p>

<p>As for the payload, <a href=""http://pycrash.sourceforge.net/"" rel=""nofollow"">PyCrash</a> can help you with that.</p>
"
86186,"<p>All of the implementations are listed here:</p>

<p><a href=""https://wiki.python.org/moin/PythonImplementations"" rel=""nofollow"">https://wiki.python.org/moin/PythonImplementations</a></p>

<p>CPython is the ""reference implementation"" and developed by Guido and the core developers.</p>
"
290609,"<p>It is easier to write web-apps in python than it's in php. Particularly because python is not a broken language.</p>

<p>Pick up some web framework that supports mod_wsgi or roll out your own. WSGI apps are really easy to deploy after you get a hold from doing it.</p>

<p>If you want templates then genshi is about the best templating engine I've found for python and you can use it however you like.</p>
"
85586,"<p>On Unix time.clock() measures the amount of CPU time that has been used by the current process, so it's no good for measuring elapsed time from some point in the past. On Windows it will measure wall-clock seconds elapsed since the first call to the function. On either system time.time() will return seconds passed since the epoch. </p>

<p>If you're writing code that's meant only for Windows, either will work (though you'll use the two differently - no subtraction is necessary for time.clock()). If this is going to run on a Unix system or you want code that is guaranteed to be portable, you will want to use time.time().</p>
"
166462,"<p>I'm not sure why you're worried about the fact that you're referencing a new, empty list in memory instead of the same ""pointer"".</p>

<p>Your other list is going to be collected sooner or later and one of the big perks about working in a high level, garbage-collected language is that you don't normally need to worry about stuff like this.</p>
"
205425,"<p>On the DB question, I'd say PostgreSQL scales better and has better data integrity than MySQL. For a small site MySQL might be faster, but from what I've heard it slows significantly as the size of the database grows. (<em>Note: I've never used MySQL for a large database, so you should probably get a second opinion about its scalability.</em>) But PostgreSQL definitely scales well, and would be a good choice for a high traffic site.</p>
"
206839,"<p>Please be advised that I don't speak from personal experience here, but I imagine JRuby and Jython (The ruby and python implementations in the JVM) would be able to to easily talk to each other, as well as Java code. You may want to look into that.</p>
"
51933,"<p>Those are very detailed answers, but they mostly beg the question, how do I get these benefits without leaving Postgres given that the data easily fits into memory, requires concurrent reads but no writes and is queried with the same query over and over again.</p>

<p>Is it possible to precompile the query and optimization plan? I would have thought the stored procedure would do this, but it doesn't really help.</p>

<p>To avoid disk access it's necessary to cache the whole table in memory, can I force Postgres to do that?  I think it's already doing this though, since the query executes in just 200 ms after repeated runs.</p>

<p>Can I tell Postgres that the table is read only, so it can optimize any locking code?</p>

<p>I think it's possible to estimate the query construction costs with an empty table (timings range from 20-60 ms) </p>

<p>I still can't see why the Java/Python tests are invalid.  Postgres just isn't doing that much more work (though I still haven't addressed the concurrency aspect, just the caching and query construction)</p>

<p>UPDATE: 
I don't think it's fair to compare the SELECTS as suggested by pulling 350,000 through the driver and serialization steps into Python to run the aggregation, nor even to omit the aggregation as the overhead in formatting and displaying is hard to separate from the timing.  If both engines are operating on in memory data, it should be an apples to apples comparison, I'm not sure how to guarantee that's already happening though.</p>

<p>I can't figure out how to add comments, maybe i don't have enough reputation?</p>
"
322359,"<pre><code>def insenStringCompare(s1, s2):
    """""" Method that takes two strings and returns True or False, based
        on if they are equal, regardless of case.""""""
    try:
        return s1.lower() == s2.lower()
    except AttributeError:
        print ""Please only pass strings into this method.""
        print ""You passed a %s and %s"" % (s1.__class__, s2.__class__)
</code></pre>
"
51137,"<p>Tested only in octave... (no matlab license). Variations of arrayfun() exist, check the documentation.</p>

<pre><code>#!/usr/bin/octave -qf

function result = dostuff(my_ten, my_one)
  result = my_ten + my_one
endfunction

tens = [ 10 20 30 ];
ones = [ 1 2 3];

x = arrayfun(@dostuff, tens, ones);

x
</code></pre>

<p>Yields...</p>

<pre><code>x =

   11   22   33
</code></pre>
"
49930,"<p><a href=""http://www.gnu.org/software/octave/"" rel=""nofollow"">GNU Octave</a> is another MATLAB clone that might have what you need.</p>
"
50986,"<p>You can use <code>inspect.stack()</code></p>

<pre><code>import inspect,os
inspect.stack()[0]  =&gt; (&lt;frame object at 0x00AC2AC0&gt;, 'g:\\Python\\Test\\_GetCurrentProgram.py', 15, '&lt;module&gt;', ['print inspect.stack()[0]\n'], 0)
os.path.abspath (inspect.stack()[0][1]) =&gt; 'g:\\Python\\Test\\_GetCurrentProgram.py'
</code></pre>
"
167167,"<pre><code>a = dict((key,value) for (key,value) in a.iteritems() if key not in exclusion)
</code></pre>
"
221609,"<p>This isn't exactly what you're looking for but it might be able to get you started:</p>

<p><a href=""http://code.djangoproject.com/wiki/TextMate"" rel=""nofollow"">Using TextMate with Django</a></p>

<p>They appear to be somewhat Django specific but some snippets may assist with your needs.  You also may be able to build on top of that with PySmells.</p>
"
149295,"<p>For this particular case you can override your save method to slugify (it's built-in method, look at django source) the title and store it in slug field. Also from there you can easily check if this slug is indeed unique and change it somehow if it's not.</p>

<p>Consider this example:</p>

<pre><code>def save(self):
    from django.template.defaultfilters import slugify

    if not self.slug:
        self.slug = slugify(self.title)

    super(Your_Model_Name,self).save()
</code></pre>
"
291838,"<p>You can use <code>wc</code> and <code>split</code> (see the respective manpages) to get the desired effect.  In <code>bash</code>:</p>

<pre><code>split -dl$((`wc -l 'filename'|sed 's/ .*$//'` / 3 + 1)) filename filename-chunk.
</code></pre>

<p>produces 3 parts of the same linecount (with a rounding error in the last, of course), named <code>filename-chunk.00</code> to <code>filename-chunk.02</code>.</p>
"
81274,"<p>My guess is as follows.  The PythonWin editor offers autocomplete for an object, i.e. when you type <code>myobject.</code> it offers a little popup of all the availble method names.  So I think when you type <code>X().</code> it's creating an instance of <code>X</code> in the background and doing a <code>dir</code> or similar to find out the attributes of the object.</p>

<p>So the constructor is only being run <em>once for each object</em> but to give you the interactivity it's creating objects silently in the background without telling you about it.</p>
"
82258,"<p>Qt's own OpenGL based surfaces (using QPainter) are known to be much faster than Cairo. Might you explain why you want specifically Cairo in Qt?</p>

<p>For the basics of using QPainter see <a href=""http://www.informit.com/articles/article.aspx?p=1174421"" rel=""nofollow"">this excerpt</a> from the book ""C++ GUI Programming with Qt4"", and while it's C++ code, the PyQt implementation will be parallel.</p>

<p>As for joining Cairo with Qt... <a href=""http://arstechnica.com/news.ars/post/20080818-nokia-helps-port-firefox-to-qt.html"" rel=""nofollow"">This article in ArsTechnica</a> sheds some light - it seems nothing that could help you exists currently (iow., nobody tried such marriage).</p>
"
82690,"<p><b>Byteflow</b> is a blog engine, written on Python, using Django</p>
"
82753,"<p>Django's powerful admin interface and easy ORM makes it a 30 minute job to build a blog that propably fits your needs; Why look for a 3rd party product when you can make it yourself very quickly?</p>
"
294384,"<p>I've written the program and it seems to work fine.  So thanks to Kamil Kisiel for getting me started.<br />
(Note that FileSizeParts() is a function not shown here)<br />
Later I may get round to doing a version that does a binary read to see if its any quicker.</p>

<pre><code>def Split(inputFile,numParts,outputName):
    fileSize=os.stat(inputFile).st_size
    parts=FileSizeParts(fileSize,numParts)
    openInputFile = open(inputFile, 'r')
    outPart=1
    for part in parts:
        if openInputFile.tell()&lt;fileSize:
            fullOutputName=outputName+os.extsep+str(outPart)
            outPart+=1
            openOutputFile=open(fullOutputName,'w')
            openOutputFile.writelines(openInputFile.readlines(part))
            openOutputFile.close()
    openInputFile.close()
    return outPart-1
</code></pre>
"
294612,"<p>What you have should work (it does for me).  Make sure it's in the top <code>urls.py</code>, and it should also be at the top of the list.</p>
"
294968,"<p>For higher level (method, class) wise, <a href=""http://www.python.org/doc/2.5.2/lib/module-dis.html"" rel=""nofollow"">dis module</a> should help.</p>

<p>But if one needs finer grain, <a href=""http://www.python.org/doc/2.5.2/lib/debugger-hooks.html"" rel=""nofollow"">tracing</a> will be unavoidable. Tracing does operate line by line basis but <a href=""http://nedbatchelder.com/blog/200804/wicked_hack_python_bytecode_tracing.html"" rel=""nofollow"">explained here</a> is a great hack to dive deeper at the bytecode level. Hats off to Ned Batchelder.</p>
"
295038,"<p>test.ini:</p>

<pre><code>[head]
var: self.post.id
</code></pre>

<p>python:</p>

<pre><code>import ConfigParser

class Test:
  def __init__(self):
      self.post = TestPost(5)
  def getPost(self):
      config = ConfigParser.ConfigParser()
      config.read('/path/to/test.ini')
      newvar = config.get('head', 'var')
      print eval(newvar) 

class TestPost:
  def __init__(self, id):
      self.id = id

test = Test()
test.getPost()   # prints 5
</code></pre>
"
80362,"<p>These may be a bit heavy for you depending on your needs but:
<a href=""http://www.nservicebus.com/"" rel=""nofollow"">http://www.nservicebus.com/</a>
<a href=""http://blog.phatboyg.com/masstransit/"" rel=""nofollow"">http://blog.phatboyg.com/masstransit/</a></p>
"
219175,"<p>SharePoint exposes several web services which you can use to query and update data.</p>

<p>I'm not sure what web service toolkits there are for Python but they should be able to build proxies for these services without any issues.</p>

<p>This article should give you enough information to get started.</p>

<p><a href=""http://www.developer.com/tech/article.php/3104621"" rel=""nofollow"">http://www.developer.com/tech/article.php/3104621</a></p>
"
219353,"<p>Maybe you could look at the problem the other way around.</p>

<p>Maybe you could try <a href=""http://code.google.com/p/django-queue-service/"" rel=""nofollow"">DjangoQueueService</a>, and have a ""daemon"" listening to the queue, seeing if there's something new and process it.</p>
"
165590,"<p>The answer is ""dtrace"", but it won't work on sufficiently old macs.</p>

<p><a href=""http://tech.marshallfamily.com.au/archives/python-dtrace-on-os-x-leopard-part-1/"" rel=""nofollow"">http://tech.marshallfamily.com.au/archives/python-dtrace-on-os-x-leopard-part-1/</a></p>

<p><a href=""http://tech.marshallfamily.com.au/archives/python-dtrace-on-os-x-leopard-part-2/"" rel=""nofollow"">http://tech.marshallfamily.com.au/archives/python-dtrace-on-os-x-leopard-part-2/</a></p>
"
165892,"<p>I think most just access them directly, no need for get/set methods.</p>

<pre><code>&gt;&gt;&gt; class myclass:
...     x = 'hello'
...
&gt;&gt;&gt;
&gt;&gt;&gt; class_inst = myclass()
&gt;&gt;&gt; class_inst.x
'hello'
&gt;&gt;&gt; class_inst.x = 'world'
&gt;&gt;&gt; class_inst.x
'world'
</code></pre>

<p>BTW, you can use the dir() function to see what attributes/methods are attached to your instance:</p>

<pre><code>&gt;&gt;&gt; dir(class_inst)
['__doc__', '__module__', 'x']
</code></pre>

<p>Two leading underbars, ""__"" are used to make a attribute or function private.
For other conventions refer to PEP 08:
<a href=""http://www.python.org/dev/peps/pep-0008/"" rel=""nofollow"">http://www.python.org/dev/peps/pep-0008/</a></p>
"
54015,"<p>I'd recommend looking into a pure javascript framework (probably Jquery) for your client-side code, and write JSON services in python- that seems to be the easiest / bestest way to go.</p>

<p>Google Web Toolkit lets you write the UI in Java and compile it to javascript. As Dave says, it may be a better choice where the backend is in Java, as it has nice RPC hooks for that case.</p>
"
321013,"<p>Oh, that's an interesting beast.</p>

<p>I've spent considerable time of getting that right, there are three main issues that differs from locale to locale:
 - currency symbol and direction
 - thousand separator
 - decimal point</p>

<p>I've written my own rather extensive implementation of this which is part of the kiwi python framework, check out the LGPL:ed source here:</p>

<p><a href=""http://svn.async.com.br/cgi-bin/viewvc.cgi/kiwi/trunk/kiwi/currency.py?view=markup"" rel=""nofollow"">http://svn.async.com.br/cgi-bin/viewvc.cgi/kiwi/trunk/kiwi/currency.py?view=markup</a></p>

<p>The code is slightly Linux/Glibc specific, but shouldn't be too difficult to adopt to windows or other unixes.</p>

<p>Once you have that installed you can do the following:</p>

<pre><code>&gt;&gt;&gt; from kiwi.datatypes import currency
&gt;&gt;&gt; v = currency('10.5').format()
</code></pre>

<p>Which will then give you:</p>

<pre><code>'$10.50'
</code></pre>

<p>or</p>

<pre><code>'10,50 kr'
</code></pre>

<p>Depending on the currently selected locale.</p>

<p>The main point this post has over the other is that it will work with older versions of python. locale.currency was introduced in python 2.5.</p>
"
53237,"<p><a href=""http://docs.python.org/ref/types.html"" rel=""nofollow""><strong>im_self</strong> attribute</a></p>
"
53255,"<p>Sometimes you can get away with the <em>tee</em> function from <a href=""https://docs.python.org/3/library/itertools.html"" rel=""nofollow"">itertools</a>, it returns multiple iterators for the same generator that can be used independently.</p>
"
321601,"<p>You probably want to look into preserving cookies from the server.</p>

<p><a href=""http://pycurl.sourceforge.net/"" rel=""nofollow"">Pycurl</a> or <a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""nofollow"">Mechanize</a> will make this much easier for you</p>
"
51531,"<p>Perhaps the best thing would be to turn on ""show whitespace"" in your editor.  Then you would have a visual indication of how far in each line is tabbed (usually a bunch of dots), and it will be more apparent when that changes.</p>
"
166144,"<p>Windows MFC, including GUI programming, is accessible with python using the <a href=""http://sourceforge.net/projects/pywin32/"" rel=""nofollow"">Python for Windows extensions</a> by Mark Hammond. <a href=""http://www.onlamp.com/lpt/a/217"" rel=""nofollow"">An O'Reilly Book Excerpt</a> from Hammond's and Robinson's <a href=""http://oreilly.com/catalog/9781565926219/"" rel=""nofollow"">book</a> shows how to hook mouse messages, .e.g:</p>

<pre><code>self.HookMessage(self.OnMouseMove,win32con.WM_MOUSEMOVE)
</code></pre>

<p>Raw MFC is not easy or obvious, but searching the web for python examples may yield some usable examples.</p>
"
166187,"<p>The usage of <a href=""http://en.wikipedia.org/wiki/Ping_%28networking_utility%29"" rel=""nofollow"">ping</a> is good, as long as you just want to ""wait for a bit"". This since you are dependent on other functions underneath, like your network working and the fact that there is nothing answering on 127.0.0.1. ;-)  Maybe it is not very likely it fails, but it is not impossible... </p>

<p>If you want to be sure that you are waiting exactly the specified time, you should use the <code>sleep</code> functionality (which also have the advantage that it doesn't use CPU power or wait for a network to become ready).</p>

<p>To find an already made executable for sleep is the most convenient way. Just drop it into your Windows folder or any other part of your standard path and it is always available.</p>

<p>Otherwise, if you have a compiling environment you can easily make one yourself.
The <code>Sleep</code> function is available in <code>kernel32.dll</code>, so you just need to use that one. :-)
For VB / VBA declare the following in the beginning of your source to declare a sleep function:</p>

<pre><code>private Declare Sub Sleep Lib ""kernel32"" Alias ""Sleep"" (byval dwMilliseconds as Long)
</code></pre>

<p>For C#:</p>

<pre><code>[DllImport(""kernel32.dll"")]
static extern void Sleep(uint dwMilliseconds);
</code></pre>

<p>You'll find here more about this functionality (available since Windows 2000) in <em><a href=""http://msdn.microsoft.com/en-us/library/ms686298%28VS.85%29.aspx"" rel=""nofollow"">Sleep function</a></em> (MSDN).</p>

<p>In standard C, <code>sleep()</code> is included in the standard library and in Microsoft's Visual Studio C the function is named <code>Sleep()</code>, if memory serves me. ;-) Those two takes the argument in seconds, not in milliseconds as the two previous declarations.</p>
"
163892,"<p>You might want to look at <a href=""http://www.pygtk.org/"" rel=""nofollow"">pygtk</a> and <a href=""http://glade.gnome.org/"" rel=""nofollow"">glade</a>. <a href=""http://www.learningpython.com/2006/05/07/creating-a-gui-using-pygtk-and-glade/"" rel=""nofollow"">Here</a> is a tutorial.</p>

<p>There is a long <a href=""http://wiki.python.org/moin/GuiProgramming"" rel=""nofollow"">list of alternatives</a> on the <a href=""http://wiki.python.org/moin/FrontPage"" rel=""nofollow"">Python Wiki</a>.</p>
"
56849,"<p><strong>printf</strong> the sucker.</p>

<pre><code>print '%.1f' % 5.59  # returns 5.6
</code></pre>
"
317980,"<p><a href=""http://www.scipy.org/"" rel=""nofollow"">SciPy</a> has a <a href=""http://docs.scipy.org/doc/scipy/reference/tutorial/#scipy-organization"" rel=""nofollow"">stats</a> sub-package.</p>
"
318419,"<p>Cygwin comes with its own version of Python, so it's likely that you have two Python installs on your system; one that installed under Windows and one which came with Cygwin.</p>

<p>To test this, try opening a bash prompt in Cygwin and typing <code>which python</code> to see where the Python executable is located.  If it says <code>/cygdrive/c/Python25/python.exe</code> or something similar then you'll know you're running the Windows executable.  If you see <code>/usr/local/bin/python</code> or something like that, then you'll know that you're running the Cygwin version.</p>

<p>I recommend opening a DOS prompt and running Python from there when you need interactive usage.  This will keep your two Python installs nicely separate (it can be very useful to have both; I do this on my own machine).  Also, you may have some problems running a program designed for Windows interactive console use from within a Cygwin shell.</p>
"
319439,"<p>How about converting to lowercase first? you can use <code>string.lower()</code>.</p>
"
319947,"<p>Instead of doing this manually I would take a look at the storage backend David Larlet has written for Django, it's here: <a href=""http://code.larlet.fr/django-storages/"" rel=""nofollow"">http://code.larlet.fr/django-storages/</a></p>
"
320061,"<p>If you have a lot of RAM and the tree doesn't change often, you can cache the result of the call:</p>

<pre><code>def children(self):
    if self._children_cache is not None:
        return self._children_cache
    # Put your code into collectChildren()
    self._children_cache = self.collectChildren()
    return self._children_cache
</code></pre>

<p>Whenever the tree changes, set the cache to None. In this case, using recursive calls might be more effective since the results will accumulate faster.</p>
"
206913,"<p>Adam Davis's advice is solid.</p>

<p>I would additionally suggest that you try to ""reverse-engineer"" what the JavaScript is doing, and instead of trying to scrape the page, you issue the HTTP requests that the JavaScript is issuing and interpret the results yourself (most likely in JSON format, nice and easy to parse).  This strategy could be anything from trivial to a total nightmare, depending on the complexity of the JavaScript.</p>

<p>The best possibility, of course, would be to convince the website's maintainers to implement a developer-friendly API.  All the cool kids are doing it these days 8-)  Of course, they might not  want their data scraped in an automated fashion... in which case you can expect a cat-and-mouse game of making their page increasingly difficult to scrape :-(</p>
"
207018,"<p>At first, after you do the deletion, the event goes on with its normal processing, i.e. the character gets inserted. You need to signal to Tkinter that the event should be ignored.</p>

<p>So in your code above, add the marked line:</p>

<pre><code>if len(self.__value) &gt; 2:
    widgetName.delete(2,4)
    return ""break"" # add this line
</code></pre>

<p>On the other hand, why do you go through the lambda? An event has a .widget attribute which you can use. So you can change your code into:</p>

<pre><code>    self.__aEntry.bind('&lt;Key&gt;', self.callback) # â» here!
    self.__aEntry.pack(side=LEFT)

def callback(self, event):
    self.__value = event.widget.get()+event.char # â» here!
    print self.__value
    if len(self.__value)&gt;2:
        event.widget.delete(2,4) # â» here!
        return ""break""
</code></pre>

<p>All the changed lines are marked with ""here!""</p>
"
80992,"<p>Depending on just how dependency-averse you are, and what kind of text editor you're building, <a href=""http://projects.gnome.org/gtksourceview/"" rel=""nofollow"">GtkSourceView</a> adds undo/redo among many other things. Very worth looking at if you want some of the other <a href=""http://projects.gnome.org/gtksourceview/features.html"" rel=""nofollow"">features</a> it offers.</p>
"
79670,"<p>There are some pretty serious concerns here for how to send email automatically, and here are a few:</p>

<p>Use an email library. Python includes one called 'email'. This is your friend, it will stop you from doing anything tragically wrong. Read an example from <a href=""http://docs.python.org/lib/node161.html"" rel=""nofollow"">the Python Manual</a>.</p>

<p>Some points that will stop you from getting blocked by spam filters:</p>

<p>Always send from a valid email address. You must be able to send email to this address and have it received (it can go into /dev/null after it's received, but it must be possible to /deliver/ there). This will stop spam filters that do Sender Address Verification from blocking your mail.</p>

<p>The email address you send from on the server.sendmail(fromaddr, [toaddr]) line will be where bounces go. The From: line in the email is a totally different address, and that's where mail will go when the user hits 'Reply:'. Use this to your advantage, bounces can go to one place, while reply goes to another.</p>

<p>Send email to a local mail server, I recommend postfix. This local server will receive your mail and be responsible for sending it to your upstream server. Once it has been delivered to the local server, treat it as 'sent' from a programmatic point of view.</p>

<p>If you have a site that is on a static ip in a datacenter of good reputation, don't be afraid to simply relay the mail directly to the internet. If you're in a datacenter full of script kiddies and spammers, you will need to relay this mail via a public MTA of good reputation, hopefully you will be able to work this out without a hassle.</p>

<p>Don't send an email in only HTML. Always send it in Plain and HTML, or just Plain. Be nice, I use a text only email client, and you don't want to annoy me.</p>

<p>Verify that you're not running SPF on your email domain, or get it configured to allow your server to send the mail. Do this by doing a TXT lookup on your domain.</p>

<pre><code>$ dig google.com txt
...snip...
;; ANSWER SECTION:
google.com. 	300	IN	TXT	""v=spf1 include:_netblocks.google.com ~all""
</code></pre>

<p>As you can see from that result, there's an SPF record there. If you don't have SPF, there won't be a TXT record. Read more about <a href=""http://en.wikipedia.org/wiki/Sender_Policy_Framework"" rel=""nofollow"">SPF on wikipedia</a>.</p>

<p>Hope that helps.</p>
"
295471,"<p><a href=""http://web.archive.org/web/20081222144252/http://www.python.org/doc/2.5.2/lib/node535.html"" rel=""nofollow"">http://www.python.org/doc/2.5.2/lib/node535.html</a> covered this pretty well. Is there some part of this you didn't understand?</p>

<p>Your program would be pretty similar, but the second <code>Popen</code> would have stdout= to a file, and you wouldn't need the output of its <code>.communicate()</code>.</p>
"
78424,"<p>I have two friends who originally started writing an application using Ruby on Rails, but ran into a number of issues and limitations.  After about 8 weeks of working on it, they decided to investigate other alternatives.</p>

<p>They settled on the <a href=""http://www.catalystframework.org"" rel=""nofollow"">Catalyst Framework</a>, and Perl.  That was about 4 months ago now, and they've repeatedly talked about how much better the application is going, and how much more flexibility they have.</p>

<p>With Perl, you have all of CPAN available to you, along with the large quantity of tools included.  I'd suggest taking a look at it, at least.</p>
"
78589,"<p>Python + Qt + OpenGL -
I surely believe any application can be written faster and better using python.
QT4 is cross-platform, beautifull, implements everything you need from widgets (acessibility, etc...), and...it integrates with OpenGL. That means, you can simply have a widget that is a viewport to openGL stuff you render in your code.</p>

<p>Another 3D capable solution  that would cover most things, but not so nioce on user interface is to extend Blender3D with a python script. It has the 3d capabilities and rendering , you script it in python all of the same, and it would be cross platform - and you get higher level tools for woriking with the 3D things than openGL alone.
There are obvious drawbacks, mainly from the UI standpoint when compared with PyQT but it could be done. </p>
"
152222,"<p><a href=""http://paul.giannaros.org/sandbox_pygamesvg"" rel=""nofollow"">pygamesvg</a> seems to do what you want (though I haven't tried it).</p>
"
59179,"<p>If you mean the pydb, there is no way to do it. There was some effort in that direction:
<a href=""http://svn.python.org/projects/sandbox/trunk/pdb/mpdb.py"" rel=""nofollow"">see the svn commit</a>, but it was abandoned. Supposedly <a href=""http://winpdb.org/docs/launch-time/"" rel=""nofollow"">winpdb supports it</a>.</p>
"
317478,"<p>Having the column names inserted using string formatting isn't so bad so long as they aren't user-provided. The values should be query parameters though:</p>

<pre><code>stmt = ""INSERT INTO mastertickets (%s, %s) VALUES (?, ?)"" % srcdest
...
cursor.execute( stmt, (self.tkt.id, n) )
</code></pre>
"
56841,"<p>You can use the string format operator <code>%</code>, similar to sprintf.</p>

<pre><code>mystring = ""%.2f"" % 5.5999
</code></pre>
"
208030,"<p><a href=""http://twistedmatrix.com/trac/wiki/TwistedProject"" rel=""nofollow"">Twisted</a> seems to have some implementation of FTPS (FTP over SSL) under the <em>conch</em> sub-project. I am no twisted expert, but <a href=""http://stackoverflow.com/users/13564/glyph"">Glyph</a>, the <em>twisted</em> man himself, is listed in this site. Maybe by following his <a href=""http://stackoverflow.com/questions/80617/asychronous-programming-in-python-twisted#81456"">answer</a> to another question, you can find more details (good luck).</p>
"
77600,"<p>It's bad to name any variable after a built in function. One of the reasons is because it can be confusing to a reader that doesn't know the name is overridden.</p>
"
78046,"<p>you can use increase accuracy summation - Kahan summation - was that what you had in mind? </p>
"
78304,"<p>This is happening because you have a random.py file in the python search path, most likely the current directory.</p>

<p>Python is searching for modules using sys.path, which normally includes the current directory before the standard site-packages, which contains the expected random.py.</p>

<p>This is expected to be fixed in Python 3.0, so that you can't import modules from the current directory without using a special import syntax.</p>

<p>Just remove the random.py + random.pyc in the directory you're running python from and it'll work fine.</p>
"
296380,"<p>It depends on how often you execute the contextual import.</p>

<p>An <code>import</code> statement requires checking to see if the module exists, which has a non-zero cost.</p>

<p>Lots of contextual imports will be a performance penalty for no real gain in simplicity.  There's very little benefit, unless you are really sure that the import will be used rarely or never.</p>

<p>Contextual imports inside <code>if</code> statements make sense, especially when it's done at the top level, which means precisely once. </p>

<pre><code>if someConfig:
    import this as bigDeal
else:
    import that as bigDeal
</code></pre>
"
296481,"<p>This is a microoptimization.  Don't worry about it.</p>
"
217114,"<p>I haven't really made much of a change - the algorithm is identical, but here are a few further micro-optimisations you can make to your python code.</p>

<ul>
<li><p>No need for !=0, 0 is false in a boolean context.</p></li>
<li><p>a if c else b is more expensive than using [a,b][c] if you don't need short-circuiting, hence you can use <code>h[ [0,A[j]][j/9.. rest of boolean condition]</code>.  Even better is to exploit the fact that you want 0 in the false case, and so multiply by the boolean value (treated as either <code>0*A[j]</code> (ie. 0)  or <code>1*A[j]</code> (ie. <code>A[j]</code>).</p></li>
<li><p>You can omit spaces between digits and identifiers.  eg ""<code>9 or</code>"" -> ""<code>9or</code>""</p></li>
<li><p>You can omit the key to sorted().  Since you're sorting on the first element, a normal sort will produce effectively the same order (unless you're relying on stability, which it doesn't look like)</p></li>
<li><p>You can save a couple of bytes by omitting the .items() call, and just assign h,i in the next line to z[l]</p></li>
<li><p>You only use s once - no point in using a variable.  You can also avoid using range() by selecting the appropriate slice of r instead (r[1:10])</p></li>
<li><p><code>j not in h</code> can become <code>(j in h)-1</code> (relying on True == 1 in integer context)</p></li>
<li><p><strong>[Edit]</strong> You can also replace the first for loop's construction of h with a dict constructor and a generator expression.  This lets you compress the logic onto one line, saving 10 bytes in total.</p></li>
</ul>

<p>More generally, you probably want to think about ways to change the algorithm to reduce the levels of nesting.  Every level gives an additional byte per line within in python, which accumulates.</p>

<p>Here's what I've got so far (I've switched to 1 space per indent so that you can get an accurate picture of required characters.  Currently it's weighing in at <strike>288</strike> 278, which is still pretty big.</p>

<pre><code>r=range(81)
def R(A):
 z={} 
 for i in r:
  if 0==A[i]:h=dict((A[j]*(j/9==i/9or j%9==i%9or j/27==i/27and j%9/3==i%9/3),1)for j in r);z[9-len(h)]=h,i
 for l in sorted(z):
  h,i=z[l]
  for j in r[1:10]:
   if(j in h)-1:
    A[i]=j
    if R(A):return A
  A[i]=0;return[]
 return A
</code></pre>
"
217373,"<p>It's possible to do this using <a href=""http://www.fiber-space.de/EasyExtend/doc/EE.html"" rel=""nofollow"">EasyExtend</a>:</p>

<blockquote>
  <p>EasyExtend (EE) is a preprocessor
  generator and metaprogramming
  framework written in pure Python and
  integrated with CPython. The main
  purpose of EasyExtend is the creation
  of extension languages i.e. adding
  custom syntax and semantics to Python.</p>
</blockquote>
"
217569,"<pre><code>r=range(81)
def R(A):
 if(0in A)-1:yield A;return
 def H(i):h=set(A[j]for j in r if j/9==i/9or j%9==i%9or j/27==i/27and j%9/3==i%9/3);return len(h),h,i
 l,h,i=max(H(i)for i in r if not A[i])
 for j in r[1:10]:
  if(j in h)-1:
   A[i]=j
   for S in R(A):yield S
  A[i]=0
</code></pre>

<p>269 characters, and it finds all solutions. Usage (not counted in char count):</p>

<pre><code>sixsol = map(int, ""300000080001093000040780003093800012000040000520006790600021040000530900030000051"")
for S in R(sixsol):
    print S
</code></pre>
"
297376,"<p>gzip.GzipFile writes the data in gzipped chunks , which you can set the size of your chunks according to the numbers of lines read from the files.</p>

<p>an example: </p>

<pre><code>file = gzip.GzipFile('blah.gz', 'wb')
sourcefile = open('source', 'rb')
chunks = []
for line in sourcefile:
  chunks.append(line)
  if len(chunks) &gt;= X: 
      file.write("""".join(chunks))
      file.flush()
      chunks = []
</code></pre>
"
297711,"<p>The essential compression is done by zlib.compressobj.  ZipFile (under Python 2.5 on MacOSX appears to be compiled).  The Python 2.3 version is as follows.</p>

<p>You can see that it builds the compressed file in 8k chunks.  Taking out the source file information is complex because a lot of source file attributes (like uncompressed size) is recorded in the zip file header.  </p>

<pre><code>def write(self, filename, arcname=None, compress_type=None):
    """"""Put the bytes from filename into the archive under the name
    arcname.""""""

    st = os.stat(filename)
    mtime = time.localtime(st.st_mtime)
    date_time = mtime[0:6]
    # Create ZipInfo instance to store file information
    if arcname is None:
        zinfo = ZipInfo(filename, date_time)
    else:
        zinfo = ZipInfo(arcname, date_time)
    zinfo.external_attr = st[0] &lt;&lt; 16L      # Unix attributes
    if compress_type is None:
        zinfo.compress_type = self.compression
    else:
        zinfo.compress_type = compress_type
    self._writecheck(zinfo)
    fp = open(filename, ""rb"")

    zinfo.flag_bits = 0x00
    zinfo.header_offset = self.fp.tell()    # Start of header bytes
    # Must overwrite CRC and sizes with correct data later
    zinfo.CRC = CRC = 0
    zinfo.compress_size = compress_size = 0
    zinfo.file_size = file_size = 0
    self.fp.write(zinfo.FileHeader())
    zinfo.file_offset = self.fp.tell()      # Start of file bytes
    if zinfo.compress_type == ZIP_DEFLATED:
        cmpr = zlib.compressobj(zlib.Z_DEFAULT_COMPRESSION,
             zlib.DEFLATED, -15)
    else:
        cmpr = None
    while 1:
        buf = fp.read(1024 * 8)
        if not buf:
            break
        file_size = file_size + len(buf)
        CRC = binascii.crc32(buf, CRC)
        if cmpr:
            buf = cmpr.compress(buf)
            compress_size = compress_size + len(buf)
        self.fp.write(buf)
    fp.close()
    if cmpr:
        buf = cmpr.flush()
        compress_size = compress_size + len(buf)
        self.fp.write(buf)
        zinfo.compress_size = compress_size
    else:
        zinfo.compress_size = file_size
    zinfo.CRC = CRC
    zinfo.file_size = file_size
    # Seek backwards and write CRC and file sizes
    position = self.fp.tell()       # Preserve current position in file
    self.fp.seek(zinfo.header_offset + 14, 0)
    self.fp.write(struct.pack(""&lt;lLL"", zinfo.CRC, zinfo.compress_size,
          zinfo.file_size))
    self.fp.seek(position, 0)
    self.filelist.append(zinfo)
    self.NameToInfo[zinfo.filename] = zinfo
</code></pre>
"
297764,"<p>I don't know anything about PyDev's integration of coverage.py (or if it even uses coverage.py), but the .coverage files are pretty simple.  They are marhsal'ed dictionaries.</p>

<p>I haven't tested this code, but you can try this to combine two .coverage files into one:</p>

<pre><code>import marshal
c1_dict = marshal.load(open(file_name_1, 'rb'))
c2_dict = marshal.load(open(file_name_2, 'rb'))
c1_dict.update(c2_dict)
marshal.dump(c1_dict, open(file_name_out, 'wb'))
</code></pre>
"
298030,"<p>You have either the:</p>

<ul>
<li><a href=""http://www.xhaus.com/alan/python/httpcomp.html"" rel=""nofollow"">gzip library</a> used here in a Jython servlet:  </li>
</ul>

<p>&nbsp;</p>

<pre><code>import  javax.servlet.http.HttpServlet

import  cStringIO
import  gzip
import  string

def compressBuf(buf):
    zbuf = cStringIO.StringIO()
    zfile = gzip.GzipFile(mode = 'wb',  fileobj = zbuf, compresslevel = 6)
    zfile.write(buf)
    zfile.close()
    return zbuf.getvalue()
</code></pre>

<ul>
<li>or the direct used of java.util.zip as illustrated <a href=""https://www.acm.org/crossroads/xrds6-3/ovp63.html"" rel=""nofollow"">here</a>, for one file, or for a all directory content.</li>
</ul>
"
298204,"<p>I would guess that performing an md5 hash on every item every time is pretty costly. Better store the gravatar email hash somewhere.</p>
"
76453,"<p>As far as I know, GTK TextView doesn't include an undo function. So while I am not familiar with Python's GTK library, I would think it doesn't have one.</p>

<p>The Ruby-GNOME2 project has a <a href=""http://ruby-gnome2.sourceforge.jp/hiki.cgi?Simple+Text+Editor"" rel=""nofollow"">sample text editor</a> that has undo/redo functionality. Basically they are connecting to the insert_text and delete_range signals of the TextView widget and recording the events and associated data in a list.</p>
"
216224,"<p>Based on Î¤ÎÎ©Î¤ÎÎÎÎ¥, Josh and Nosklo's answers i finally got it work using boost.python:</p>

<p>Python:</p>

<pre><code>import thirdparty

def MyFunc(some_arg):
    result = thirdparty.go()
    return result
</code></pre>

<p>C++:</p>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;boost/python.hpp&gt;

using namespace boost::python;

int main(int, char **) 
{
    Py_Initialize();

    try 
    {
        object module = import(""__main__"");
        object name_space = module.attr(""__dict__"");
        exec_file(""MyModule.py"", name_space, name_space);

        object MyFunc = name_space[""MyFunc""];
        object result = MyFunc(""some_args"");

        // result is a dictionary
        std::string val = extract&lt;std::string&gt;(result[""val""]);
    } 
    catch (error_already_set) 
    {
        PyErr_Print();
    }

    Py_Finalize();
    return 0;
}
</code></pre>

<p>Some important points:</p>

<ol>
<li>I changed 'exec' to 'exec_file' out of
convenience, it also works with
plain 'exec'. </li>
<li>The main reason it failed is that <strong>i
did not pass a ""local"" name_sapce to
'exec' or 'exec_file'</strong> - this is now
fixed by passing name_space twice.</li>
<li>If the python function returns
unicode strings, they are not
convertible to 'std::string', so i
had to suffix all python strings
with '.encode('ASCII', 'ignore')'.</li>
</ol>
"
216377,"<p>I'm developing djangobile, a django mobile extension: <a href=""http://code.google.com/p/djangobile/"" rel=""nofollow"">http://code.google.com/p/djangobile/</a></p>
"
315467,"<p>""Is there a way to turn this behavior off?"" - the 500 is absolutely mandatory.  The log entry is also mandatory.  </p>

<p>""Or perhaps just block the IP's doing this?"" - don't we wish.</p>

<p>Everyone has this problem.  Just about everyone uses Apache <a href=""http://httpd.apache.org/docs/1.3/logs.html#rotation"" rel=""nofollow"">log rotation</a>.  Everyone else either uses an OS rotation or rolls their own.</p>
"
315596,"<p>If you can find a pattern in UserAgent string, you may use <code>DISALLOWED_USER_AGENT</code> setting. Mine is:</p>

<pre><code>DISALLOWED_USER_AGENTS = (
    re.compile(r'Java'),
    re.compile(r'gigamega'),
    re.compile(r'litefinder'),
)
</code></pre>

<p>See the description in <a href=""http://docs.djangoproject.com/en/dev/ref/settings/#disallowed-user-agents"" rel=""nofollow"">Django docs</a>.</p>
"
315855,"<p>I'd imagine the easiest way to do that is to manage a list of clients in the protocol with connectionMade and connectionLost in the client and then use a LoopingCall to ask each client to send data.</p>

<p>That feels a little invasive, but I don't think you'd want to do it without the protocol having some control over the transmission/reception.  Of course, I'd have to see your code to really know how it'd fit in well.  Got a github link?  :)</p>
"
216543,"<p>You can define a single permanent view, as Bahadir suggests. when doing this sort of indexing, though, <em>don't</em> output the doc for each key. Instead, emit([tag, doc.published], null). In current release versions you'd then have to do a separate lookup for each doc, but SVN trunk now has support for specifying ""include_docs=True"" in the query string and CouchDB will automatically merge the docs into your view for you, without the space overhead.</p>
"
77563,"<p>Because it's the name of a builtin function.</p>
"
298835,"<p>""At first, I thought this was what formsets were for, but I can't see any way to automatically iterate over the contents of a database table to produce items to go in the form, if you see what I mean.""</p>

<p>You need to get a queryset.  And you need to provide that queryset to your form as initial data.  See <a href=""http://docs.djangoproject.com/en/dev/topics/forms/formsets/#using-initial-data-with-a-formset"" rel=""nofollow"">using initial data with a formset</a> for the code.</p>

<pre><code>initial = [ list of { dictionaries }, one per form ]
</code></pre>

<p>Interestingly, this is a direct feature of the model API through the <code>values</code> method of a queryset.</p>
"
298978,"<p>Just by way of explanation: Python xml.dom.minidom and xml.sax use the expat parser by default, which is a non-validating parser.  It may read the DTD in order to do entity replacement, but it won't validate against the DTD.</p>

<p>gimel and Tim recommend lxml, which is a nicely pythonic binding for the libxml2 and libxslt libraries.  It supports validation against a DTD.  I've been using lxml, and I like it a lot.</p>
"
215932,"<p>Look at <a href=""http://augeas.net/"" rel=""nofollow"">Augeas</a>, it's not specifically for Apache-httpd config. files it's just a generic config. file ""editor"" API. One of it's major selling points is that it will keep comments/etc. is happy for other tools to alter the files and will refuse to let you save broken files.</p>

<p>Also the fact that you can use the same API in all the languages you asked about, and that you can edit other config. files using the same APIs are both major advantages IMO.</p>
"
299685,"<p>Here is a non-recursive version with <code>os.walk</code>:</p>

<pre><code>import fnmatch, os, shutil

def copyfiles(srcdir, dstdir, filepattern):
    def failed(exc):
        raise exc

    for dirpath, dirs, files in os.walk(srcdir, topdown=True, onerror=failed):
        for file in fnmatch.filter(files, filepattern):
            shutil.copy2(os.path.join(dirpath, file), dstdir)
        break # no recursion
</code></pre>

<p>Example:</p>

<pre><code>copyfiles(""."", ""test"", ""*.ext"")
</code></pre>
"
300877,"<p>If you're working with dtd you might enjoy this <a href=""http://code.activestate.com/recipes/220472/"" rel=""nofollow"">recipe</a></p>
"
73807,"<p>It's quite common to just use the sendmail command from Python using os.popen</p>

<p>Personally, for scripts i didn't write myself, I think just using the SMTP-protocol is better, since it wouldn't require installing say an sendmail clone to run on windows.</p>

<p><a href=""https://docs.python.org/library/smtplib.html"" rel=""nofollow"">https://docs.python.org/library/smtplib.html</a></p>
"
154660,"<p>This is what I do:</p>

<p>Instead of instancing directly the class BaseHTTPServer.HTTPServer, I write a new descendant from it that publishes an ""stop"" method:</p>

<pre><code>class AppHTTPServer (SocketServer.ThreadingMixIn, BaseHTTPServer.HTTPServer):
    def serve_forever(self):
        self.stop_serving = False
        while not self.stop_serving:
            self.handle_request()

    def stop (self):
        self.stop_serving = True
</code></pre>

<p>And then, in the method SvcStop that you already have, I call that method to break the serve_forever() loop:</p>

<pre><code>def SvcStop(self):
    self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
    self.httpd.stop()
</code></pre>

<p>(self.httpd is the instance of AppHTTPServer() that implements the webserver)</p>

<p>If you use setDaemon() correctly on the background threads, and interrupt correctly all the loops in the service, then the instruction </p>

<pre><code>exit(0)
</code></pre>

<p>in SvcStop() should not be necessary </p>
"
154782,"<p>Leaving aside the fact that your text file is broken (U+2018 is a left quotation mark, not an apostrophe): iconv can be used to transliterate unicode characters to ascii.</p>

<p>You'll have to google for ""iconvcodec"", since the module seems not to be supported anymore and I can't find a canonical home page for it.</p>

<pre><code>&gt;&gt;&gt; import iconvcodec
&gt;&gt;&gt; from locale import setlocale, LC_ALL
&gt;&gt;&gt; setlocale(LC_ALL, '')
&gt;&gt;&gt; u'\u2018'.encode('ascii//translit')
""'""
</code></pre>

<p>Alternatively you can use the <code>iconv</code> command line utility to clean up your file:</p>

<pre><code>$ xxd foo
0000000: e280 980a                                ....
$ iconv -t 'ascii//translit' foo | xxd
0000000: 270a                                     '.
</code></pre>
"
312882,"<p>in addition to <a href=""http://stackoverflow.com/questions/312263/effective-keyboard-input-handling#312270"">superjoe30's answer</a>, you can use two levels of mapping (two dictionaries)</p>

<ul>
<li>key => command string</li>
<li>command string => function</li>
</ul>

<p>I think this would make it easier to allow user-defined mappings. i.e. so users can map their keys to ""commands"" rather than ""the name of a function""</p>
"
62157,"<p>I ended up using saxutils.escape(str) to generate valid XML strings and then validating it with Eli's approach to be sure I didn't miss any tag</p>

<pre><code>from xml.sax import saxutils
from xml.dom.minidom import parseString
from xml.parsers.expat import ExpatError

xml = '''&lt;?xml version=""1.0"" encoding=""%s""?&gt;\n
&lt;contents title=""%s"" crawl_date=""%s"" in_text_date=""%s"" 
url=""%s""&gt;\n&lt;main_post&gt;%s&lt;/main_post&gt;\n&lt;/contents&gt;''' %
(self.encoding, saxutils.escape(title), saxutils.escape(time), 
saxutils.escape(date), saxutils.escape(url), saxutils.escape(contents))
try:
    minidoc = parseString(xml)
catch ExpatError:
    print ""Invalid xml""
</code></pre>
"
60729,"<pre><code>start        = r""^\s*#define\s+""
continuation = r""(?:.*\\\n)+""
lastline     = r"".*$""

re_multiline_macros = re.compile(start + continuation + lastline, 
                                 re.MULTILINE)
</code></pre>
"
313102,"<p>Django (and relational data bases in general) do not work this way. Even when using an ORM like Django's you don't work with class hierarchies like this.</p>

<p>There are two possible solutions to your problem:</p>

<p>(1) give a ""name"" attibute the the Animal model, then add entities with names from ['Dog', 'Cat']. This will show the animals' names in the foreign key selection box.</p>

<p>(2) If you <strong>really need to</strong> link your foreign key to different models (which really is not the usual way to use an RDBMS) you should read about <a href=""http://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/#id1"" rel=""nofollow"">Generic Relations</a> in the docs on the contenttypes framework.</p>

<p>My advice is (1), though.</p>
"
314296,"<p>Django does <a href=""http://wiki.python.org/jython/DjangoOnJython"" rel=""nofollow"">work on Jython</a>, although you'll need to use the development release of Jython, since technically Jython 2.5 is still in beta.  However, Django 1.0 and up should work unmodified.</p>

<p>So as to whether you should use the regular Python implementation or Jython, I'd say it's a matter of whether you prefer having all the Java libraries available or all of the Python libraries.  At this point you can expect almost everything in the Python standard library to work with Jython, but there are still plenty of third-party packages which will not work, especially C extension modules.  I'd personally recommend going with regular Python, but if you've got a ton of JVM experience and want to stick with what you know, then I can respect that.</p>

<p>As for finding Python hosting, <a href=""http://wiki.python.org/moin/PythonHosting"" rel=""nofollow"">this page might be helpful</a>.</p>
"
314448,"<p>I'd say that if you like Django, you'll also like Python.  Don't make the (far too common) mistake of mixing past language's experience while you learn a new one.  Only after mastering Python, you'll have the experience to judge if a hybrid language is better than either one.</p>

<p>It's true that very few cheap hostings offer Django preinstalled; but it's quite probable that that will change, given that it's the most similar environment to Google's app engine.  (and most GAE projects can be made to run on Django)</p>
"
163212,"<p>As soon as you come across a <code>**</code>, you're going to have to recurse through the whole directory structure, so I think at that point, the easiest method is to iterate through the directory with os.walk, construct a path, and then check if it matches the pattern.  You can probably convert to a regex by something like:</p>

<pre><code>def glob_to_regex(pat, dirsep=os.sep):
    dirsep = re.escape(dirsep)
    print re.escape(pat)
    regex = (re.escape(pat).replace(""\\*\\*""+dirsep,"".*"")
                           .replace(""\\*\\*"","".*"")
                           .replace(""\\*"",""[^%s]*"" % dirsep)
                           .replace(""\\?"",""[^%s]"" % dirsep))
    return re.compile(regex+""$"")
</code></pre>

<p>(Though note that this isn't that fully featured - it doesn't support <code>[a-z]</code> style glob patterns for instance, though this could probably be added).  (The first <code>\*\*/</code> match is to cover cases like <code>\*\*/CVS</code> matching <code>./CVS</code>, as well as having just <code>\*\*</code> to match at the tail.)</p>

<p>However, obviously you don't want to recurse through everything below the current dir when not processing a <code>**</code> pattern, so I think you'll need a two-phase approach.  I haven't tried implementing the below, and there are probably a few corner cases, but I think it should work:</p>

<ol>
<li><p>Split the pattern on your directory seperator.  ie <code>pat.split('/') -&gt; ['**','CVS','*']</code></p></li>
<li><p>Recurse through the directories, and look at the relevant part of the pattern for this level.  ie. <code>n levels deep -&gt; look at pat[n]</code>.</p></li>
<li><p>If <code>pat[n] == '**'</code> switch to the above strategy:</p>

<ul>
<li>Reconstruct the pattern with <code>dirsep.join(pat[n:])</code></li>
<li>Convert to a regex with <code>glob\_to\_regex()</code></li>
<li>Recursively <code>os.walk</code> through the current directory, building up the path relative to the level you started at.  If the path matches the regex, yield it.</li>
</ul></li>
<li><p>If pat doesn't match <code>""**""</code>, and it is the last element in the pattern, then yield all files/dirs matching <code>glob.glob(os.path.join(curpath,pat[n]))</code></p></li>
<li><p>If pat doesn't match <code>""**""</code>, and it is NOT the last element in the pattern, then for each directory, check if it matches (with glob) <code>pat[n]</code>.  If so, recurse down through it, incrementing depth (so it will look at <code>pat[n+1]</code>)</p></li>
</ol>
"
301344,"<p>The internal registry of imported modules is the <code>sys.modules</code> dictionary, which maps module names to module objects. You can look there to see all the modules that are currently imported.</p>

<p>You can also pull some useful tricks (if you need to) by monkeying with <code>sys.modules</code> - for example adding your own objects as pseudo-modules which can be imported by other modules.</p>
"
73153,"<p>I'd recommend just creating an entirely separate model for this.</p>

<pre><code>class Assignment(Model):
    user = ForeignKey(User)
    role = ForeignKey(Role)
    event = ForeignKey(Event)
</code></pre>

<p>This lets you do all the usual model stuff, such as</p>

<pre><code>user.assignment_set.filter(role__name=""Chaperon"")
role.assignment_set.filter(event__name=""Silly Walkathon"")
</code></pre>

<p>The only thing left is to enforce your one-role-per-user-per-event restriction.  You can do this in the Assignment class by either overriding the save method (<a href=""http://docs.djangoproject.com/en/dev/topics/db/models/#overriding-predefined-model-methods"" rel=""nofollow"">http://docs.djangoproject.com/en/dev/topics/db/models/#overriding-predefined-model-methods</a>) or using signals (<a href=""http://docs.djangoproject.com/en/dev/topics/signals/"" rel=""nofollow"">http://docs.djangoproject.com/en/dev/topics/signals/</a>)</p>
"
72100,"<p>I don't recommend BeautifulSoup if you want speed. lxml is much, much faster, and you can fall back in lxml's BS soupparser if the default parser doesn't work.</p>
"
72501,"<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; pattern = re.compile(""url"")
&gt;&gt;&gt; string = ""   url""
&gt;&gt;&gt; pattern.match(string)
&gt;&gt;&gt; pattern.search(string)
&lt;_sre.SRE_Match object at 0xb7f7a6e8&gt;
</code></pre>
"
215216,"<p>Use the <a href=""http://docs.wxwidgets.org/stable/wx_wxlistctrl.html#wxlistctrl"" rel=""nofollow"">wxLC_REPORT</a> style.</p>

<pre><code>import wx

class Test(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None)
        self.test = wx.ListCtrl(self, style = wx.LC_REPORT | wx.LC_NO_HEADER)

        for i in range(5):
            self.test.InsertColumn(i, 'Col %d' % (i + 1))
            self.test.SetColumnWidth(i, 200)


        for i in range(0, 100, 5):
            index = self.test.InsertStringItem(self.test.GetItemCount(), """")
            for j in range(5):
                self.test.SetStringItem(index, j, str(i+j)*30)

        self.Show()

app = wx.PySimpleApp()
app.TopWindow = Test()
app.MainLoop()
</code></pre>
"
215298,"<p>That should be fixed in 0.11 according to their <a href=""http://trac.edgewall.org/ticket/7320"" rel=""nofollow"">bug tracking system</a>. </p>

<p>If that's not the case you should try to pass the environment var to apache, since doing a SetEnv in the configuration file doesn't work. Adding something like </p>

<pre><code>export PYTHON_EGG_CACHE=/tmp/python_eggs
</code></pre>

<p>to the script you use to start apache should work.</p>
"
303749,"<blockquote>
<pre><code>sock.connect((url[0] + '://' + url[1],80))
</code></pre>
</blockquote>

<p>Do not do that, instead do this:</p>

<pre><code>sock.connect((url[1], 80))
</code></pre>

<p><code>connect</code> expects a hostname, not a URL.</p>

<p>Actually, you should probably use something higher-level than sockets to do HTTP. Maybe <a href=""http://docs.python.org/library/httplib.html"" rel=""nofollow"">httplib</a>.</p>
"
303897,"<p>Please please please please please please please don't do this.</p>

<p>urllib and urllib2 are your friends.</p>

<p>Read <a href=""http://www.voidspace.org.uk/python/articles/urllib2.shtml"" rel=""nofollow"">the ""missing"" urllib2 manual</a> if you are having trouble with it.</p>
"
70051,"<p>A short search turned up <a href=""http://www.flagar.com/en/software/gtkshots"" rel=""nofollow"">gtkShots</a> looks like it might help you, as it's a GPLed python screenshot program, so should have what you need in it.</p>
"
214867,"<p>I don't know anything about Python, but I do know a bit about drivers.  You're not trying to 'open a file in kernel space' at all - you're just trying to open a handle to a device which happens to be made to look a bit like opening a file.</p>

<p>CreateFile is a user-mode function, and everything you're doing here is user-mode, not kernel mode.</p>

<p>As xenon says, your call may be failing because you haven't loaded the driver yet, or because whatever Python call you're using to do the CreateFile is not passing the write parameters in.</p>

<p>I've never used giveio.sys myself, but personally I would establish that it was loaded correctly by using 'C' or C++ (or some pre-written app) before I tried to get it working via Python.</p>
"
214946,"<p>Even with the Authentication parameter, you don't have fine-grained control over what people can do.  The current implementation of the Django-REST interface doesn't track the user information, so you don't have this information available for doing fine-grained authorization checks.</p>

<p>See <a href=""http://code.google.com/p/django-rest-interface/issues/detail?id=32"" rel=""nofollow"">Issue #32</a>.</p>

<p>However, it's relatively easy to extend it to add some features.  I use a lot of subclasses to add features.</p>

<p>Updating the request with login information, however, is tricky in Django.  Rather than do that, I leave the information in the Collection.</p>

<p>Right now, I'd estimate that between patches and subclasses, what I've written is about as big as rolling my own RESTful view functions.  </p>

<p>Django-REST, however, gracefully and neatly handles HTTP Digest Authentication.  I don't look forward to replacing theirs with some kind of decorator for my Django view functions.</p>

<p>[Maybe we should open a source forge project and work out a clean replacement?]</p>
"
159819,"<p>What fastcgi interface are you using and how.  Is it flup?  If yes, paste the way you spawn the server and how it's hooked into nginx.  Without that information it's just guessing what could go wrong.</p>

<p>Possible problems:</p>

<ul>
<li>nginx is buggy.  At least lighttpd has horrible fastcgi bugs, I wouldn't wonder if nginx has some too :)</li>
<li>Django is dying with a traceback in an internal system that is not properly catched and closes the fastcgi server which you can't see from the client.  In that situation wrap the fastcgi server application call and try/except it to print the exception.</li>
</ul>

<p>But server log and config would be great.</p>
"
159844,"<blockquote>
  <p>A new function, <code>getsizeof()</code>, takes a
  Python object and returns the amount
  of memory used by the object, measured
  in bytes. Built-in objects return
  correct results; third-party
  extensions may not, but can define a
  <code>__sizeof__()</code> method to return the objectâs size.</p>
</blockquote>

<pre><code>kveretennicov@nosignal:~/py/r26rc2$ ./python
Python 2.6rc2 (r26rc2:66712, Sep  2 2008, 13:11:55) 
[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)] on linux2
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.getsizeof(range(1000000))
4000032
&gt;&gt;&gt; sys.getsizeof(tuple(range(1000000)))
4000024
</code></pre>

<p>Obviously returned numbers don't include memory consumed by contained objects (sys.getsizeof(1) == 12).</p>
"
312472,"<p>heh, one line version</p>

<pre><code>In [48]: chunk = lambda ulist, step:  map(lambda i: ulist[i:i+step],  xrange(0, len(ulist), step))

In [49]: chunk(range(1,100), 10)
Out[49]: 
[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
 [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
 [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
 [31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
 [41, 42, 43, 44, 45, 46, 47, 48, 49, 50],
 [51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
 [61, 62, 63, 64, 65, 66, 67, 68, 69, 70],
 [71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
 [81, 82, 83, 84, 85, 86, 87, 88, 89, 90],
 [91, 92, 93, 94, 95, 96, 97, 98, 99]]
</code></pre>
"
62780,"<p>With some Metaclass magic to keep the ordering I have the following working. I'm not sure how pythonic it is but it is good fun for creating simple things. </p>

<pre><code>class w(Wndw):
  title='Hello World'
  class txt(Txt):  # either a new class
    text='Insert name here'
  lbl=Lbl(text='Hello') # or an instance
  class greet(Bbt):
    text='Greet'
    def click(self): #on_click method
      self.frame.lbl.text='Hello %s.'%self.frame.txt.text

app=w()
</code></pre>
"
63111,"<p>No, there isn't. Indentation is syntax for Python. You can:</p>

<ol>
<li>Use tabnanny.py to check your code</li>
<li>Use a syntax-aware editor that highlights such mistakes (vi does that, emacs I bet it does, and then, most IDEs do too)</li>
<li>(far-fetched) write a preprocessor of your own to convert braces (or whatever block delimiters you love) into indentation</li>
</ol>
"
160284,"<p>The cross-platform replacement for <code>commands</code> is <code>subprocess</code>. See the <a href=""http://docs.python.org/lib/module-subprocess.html"" rel=""nofollow"">subprocess module documentation</a>. The 'Replacing older modules' section includes <a href=""http://docs.python.org/lib/node534.html"" rel=""nofollow"">how to get output from a command</a>.</p>

<p>Of course, you still have to pass the right arguments to 'ps' for the platform you're on. Python can't help you with that, and though I've seen occasional mention of third-party libraries that try to do this, they usually only work on a few systems (like strictly SysV style, strictly BSD style, or just systems with /proc.)</p>
"
215084,"<p>We've had the best luck with FastCGI.  Another critical factor was to only use <code>https</code> for authentication but use <code>http</code> for all other traffic -- I was really surprised how much that made a difference.</p>
"
70712,"<p>I think you should make your own authentication method as you can make it fit your application best but use a library for encryption, such as <a href=""http://www.pycrypto.org"" rel=""nofollow"">pycrypto</a> or some other more lightweight library.</p>

<p>btw, if you need windows binaries for pycrypto you can get them <a href=""http://www.voidspace.org.uk/python/modules.shtml#pycrypto"" rel=""nofollow"">here</a></p>
"
304905,"<p>You can try <a href=""http://www.libming.org/"" rel=""nofollow"">ming</a>, a library for generating Macromedia Flash files (.swf).</p>

<p>It's written in C but it has wrappers that allow it to be used in C++, PHP, Python, Ruby, and Perl. </p>
"
305069,"<p>Extending <a href=""http://stackoverflow.com/questions/304655/the-best-way-to-invoke-methods-in-python-class-declarations#304679"">Ali A</a>'s answer,
if you really want to avoid f in the module namespace (and using a non-exported name like _f, or setting __all__ isn't sufficient), then
you could achieve this by creating the class within a closure.</p>

<pre><code>def create_C():
    def f(num):
        return '&lt;' + str(num) + '&gt;'

    class C(object):
        v = f(9)
        def method_using_f(self, x):  return f(x*2)
    return C

C=create_C()
del create_C
</code></pre>

<p>This way C has access to f within its definition and methods, but nothing else does (barring fairly involved introspection
of its methods (<code>C.method_using_f.im_func.func_closure</code>))</p>

<p>This is probably overkill for most purposes though - documenting that f is internal by using the ""_"" prefix nameing convention should
generally be sufficient.</p>

<p><strong>[Edit]</strong>  One other option is to hold a reference to the pre-wrapped function object in the methods you wish to use it in.  For example, by setting it as a default argument:</p>

<pre><code>class C(object):
    def f(num):
        return '&lt;' + str(num) + '&gt;'

    v = f(9)
    def method_using_f(self, x, f=f):  return f(x*2)

    del f
</code></pre>

<p>(Though I think the closure approach is probably better)</p>
"
305526,"<p>In cases like this, I prefer to just always take the sequence type or always take the scalar.  Strings won't be the only types that would behave poorly in this setup; rather, any type that has an aggregate use and allows iteration over its parts might misbehave.</p>
"
214383,"<p>Well, from the look of things, there's an <code>authentication</code> parameter to <code>Collection</code>. (see this example: <a href=""http://django-rest-interface.googlecode.com/svn/trunk/django_restapi_tests/examples/authentication.py"" rel=""nofollow"">authentication.py</a>)</p>

<p>Second, (even if Django doesn't have it yet,) there should probably be a middleware that does CSRF/XSRF form checking. (Oh, there seems to <a href=""http://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ref-contrib-csrf"" rel=""nofollow"">be one</a>.) You should also be able to use the <a href=""http://docs.djangoproject.com/en/dev/topics/auth/#topics-auth"" rel=""nofollow""><code>login_required</code> and <code>permission_required</code> decorators</a> in the urls.py.</p>
"
214557,"<p>You could also pipe the output through <a href=""http://petdance.com/ack/"" rel=""nofollow"">ack</a>.  The --passthru flag will help.</p>
"
157080,"<p>You could use the <a href=""http://docs.python.org/lib/built-in-funcs.html"" rel=""nofollow""><code>filter</code></a> function.</p>

<p>It filters a list (or strictly an iterable) producing a new list containing only the items for which the specified function evaluates to true.</p>

<pre><code>r = xrange(1, 10)

def is_div_two(n):
    return n % 2 == 0

def is_div_three(n):
    return n % 3 == 0

print len(filter(is_div_two,r))
print len(filter(is_div_three,r))
</code></pre>

<p>This is good as it allows you keep your statistics logic contained in a function and the intent of the <code>filter</code> should be pretty clear.</p>
"
69513,"<p>Check your path (run 'echo $PATH')</p>
"
69867,"<p>The <a href=""https://developer.mozilla.org/en/PyXPCOM"" rel=""nofollow"">PyXPCOM extension</a> is one possibility.</p>

<p>But looking at what firewatir provides, I have to 2nd the suggestion for twill. It's based on <a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""nofollow"">mechanize</a>, which might also be useful in this context.</p>
"
213253,"<p>Once I generated ctags for one of my site-packages, it started working for that package -- so I'm guessing that the omnicomplete function depends on ctags for non-sys modules.</p>

<p>EDIT: Not true at all.</p>

<p>Here's the problem -- poor testing on my part -- omnicomplete WAS working for parts of my project, just not most of it.</p>

<p>The issue was that I'm working on a django project, and in order to import django.db, you need to have an environment variable set. Since I couldn't import django.db, any class that inherited from django.db, or any module that imported a class that inherited from django.db wouldn't complete.</p>
"
64356,"<p><a href=""http://timhatch.com/projects/pybraces/"" rel=""nofollow"">pybraces</a></p>

<p>It's unsupported.</p>
"
64489,"<p><a href=""http://www.ietf.org/rfc/rfc2616.txt"" rel=""nofollow"">HTTP</a> seems to suit your requirements and is very well supported in Python. </p>

<p><a href=""http://twistedmatrix.com/"" rel=""nofollow"">Twisted</a> is good for serious asynchronous network programming in Python, but it has a steep learning curve, so it might be worth using something simpler unless you know your system will need to handle a lot of concurrency.</p>

<p>To start, I would suggest using <a href=""http://www.python.org/doc/lib/module-urllib2.html"" rel=""nofollow""><code>urllib</code></a> for the client and a <a href=""http://code.google.com/p/modwsgi/"" rel=""nofollow"">WSGI service behind Apache</a> for the server. Apache can be set up to deal with HTTPS fairly simply.</p>
"
64580,"<p>You should make sure you format the date in the correct format - <a href=""http://www.faqs.org/rfcs/rfc2822.html"" rel=""nofollow"">RFC2822</a>.</p>
"
64110,"<p>Yes, returning multiple values (i.e., a tuple) is definitely pythonic.  As others have pointed out, there are plenty of examples in the Python standard library, as well as in well-respected Python projects.  Two additional comments:</p>

<ol>
<li>Returning multiple values is sometimes very, very useful.  Take, for example, a method that optionally handles an event (returning some value in doing so) and also returns success or failure.  This might arise in a chain of responsibility pattern.  In other cases, you want to return multiple, closely linked pieces of data---as in the example given.  In this setting, returning multiple values is akin to returning a single instance of an anonymous class with several member variables.</li>
<li><p>Python's handling of method arguments necessitates the ability to directly return multiple values.  In C++, for example, method arguments can be passed by reference, so you can assign output values to them, in addition to the formal return value.  In Python, arguments are passed ""by reference"" (but in the sense of Java, not C++).  You can't assign new values to method arguments and have it reflected outside method scope.  For example:</p>

<pre><code>// C++
void test(int&amp; arg)
{
    arg = 1;
}

int foo = 0;
test(foo); // foo is now 1!
</code></pre>

<p>Compare with:</p>

<pre><code># Python
def test(arg):
    arg = 1

foo = 0
test(foo) # foo is still 0
</code></pre></li>
</ol>
"
160895,"<p>Have you looked at <a href=""http://pyparsing.wikispaces.com/"" rel=""nofollow"">PyParsing</a>?</p>

<p>From their homepage:</p>

<p>Here is a program to parse ""Hello, World!"" (or any greeting of the form "", !""):</p>

<pre><code>from pyparsing import Word, alphas
greet = Word( alphas ) + "","" + Word( alphas ) + ""!"" # &lt;-- grammar defined here
hello = ""Hello, World!""
print hello, ""-&gt;"", greet.parseString( hello )
</code></pre>

<p>The program outputs the following:</p>

<pre><code>Hello, World! -&gt; ['Hello', ',', 'World', '!']
</code></pre>
"
211539,"<p>Doing SQL in overall is horrible in any language I've picked up. SQLalchemy has shown to be easiest from them to use because actual query and committing with it is so clean and absent from troubles.</p>

<p>Here's some basic steps on actually using sqlalchemy in your app, better details can be found from the documentation.</p>

<ul>
<li>provide table definitions and create ORM-mappings</li>
<li>load database</li>
<li>ask it to create tables from the definitions (won't do so if they exist)</li>
<li>create session maker (optional)</li>
<li>create session</li>
</ul>

<p>After creating a session, you can commit and query from the database.</p>
"
305695,"<p>The simplest method would be to check if you can turn it into an iterator.  ie</p>

<pre><code>try:
    it = iter(X)
    # Iterable
except TypeError:
    # Not iterable
</code></pre>

<p>If you need to ensure that it's a restartable or random access sequence (ie not a generator etc), this approach won't be sufficient however.</p>

<p>As others have noted, strings are also iterable, so if you need so exclude them (particularly important if recursing through items, as list(iter('a')) gives ['a'] again, then you may need to specifically exclude them with:</p>

<pre><code> if not isinstance(X, basestring)
</code></pre>
"
305700,"<p>There are a number a places you can put your application files in Windows.  <a href=""http://msdn.microsoft.com/en-us/library/system.environment.specialfolder.aspx"" rel=""nofollow"">This page</a> shows a list (this enum is .Net specific but most of the special folders are standard on Windows in general).  Basically you'll need to decide if you need a cache per user, only for the local machine, per application or shared, etc.</p>

<p>I don't have much experience with python so I cannot specifically help with how to get these paths, but I'm sure someone more knowledgeable here can. </p>
"
306030,"<p>instance methods will have attributes .im_class .im_func .im_self</p>

<p><a href=""http://docs.python.org/library/inspect.html#types-and-members"" rel=""nofollow"">http://docs.python.org/library/inspect.html#types-and-members</a></p>

<p>You probably want to see if the function hasattr .im_class, and get the class info from there.</p>
"
67672,"<p>I believe you can use <a href=""https://docs.python.org/2/library/imp.html#imp.find_module"" rel=""nofollow""><code>imp.find_module()</code></a> and <a href=""https://docs.python.org/2/library/imp.html#imp.load_module"" rel=""nofollow""><code>imp.load_module()</code></a> to load the specified module.  You'll need to split the module name off of the path, i.e. if you wanted to load <code>/home/mypath/mymodule.py</code> you'd need to do:</p>

<pre><code>imp.find_module('mymodule', '/home/mypath/')
</code></pre>

<p>...but that should get the job done.</p>
"
214186,"<p>Ah, forget it. This is too much of a pain. It was a lot easier to get the source to ngrep and make it print the hash marks to stderr:</p>

<pre><code>--- ngrep.c     2006-11-28 05:38:43.000000000 -0800
+++ ngrep.c.new 2008-10-17 16:28:29.000000000 -0700
@@ -687,8 +687,7 @@
     }

     if (quiet &lt; 1) {
-        printf(""#"");
-        fflush(stdout);
+      fprintf (stderr, ""#"");
     }

     switch (ip_proto) {
</code></pre>

<p>Then, filtering is a piece of cake:</p>

<pre><code>while (&lt;CMD&gt;) {
  s/($keyword)/\e[93m$1\e[0m/g;
  print;
}
</code></pre>
"
310365,"<p>You would need a full working X environment to get it to work.  It would be much easier to just use Python and wxPython under plain vanilla Windows.  Do you have a special case?</p>
"
310792,"<p>Mp3 is lossy, but it is lossy in a very specific way.  The algorithms used as designed to discard certain parts of the audio which your ears are unable to hear (or are very difficult to hear).  Re-doing the compression process at the same level of compression over and over is likely to yield <em>nearly</em> identical results for a given piece of audio.  However, some additional losses may slowly accumulate.  If you're going to be modifying files a lot, this might be a bad idea.  It would also be a bad idea if you were concerned about quality, but then using MP3 if you are concerned about quality is a bad idea over all.</p>

<p>You could construct a test using an encoder and a decoder to re-encode a few different mp3 files a few times and watch how they change, this could help you determine the rate of deterioration and figure out if it is acceptable to you.  Sounds like you have libraries you could use to run this simple test already.</p>

<p>MP3 files are composed of ""frames"" of audio and so it should be possible, with some effort, to remove entire frames with minimal processing (remove the frame, update some minor details in the file header).  I believe frames are pretty short (a few milliseconds each) which would give the precision you're looking for.  So doing some reading on the <a href=""http://en.wikipedia.org/wiki/Image:Mp3filestructure.svg"" rel=""nofollow"">MP3 File Format</a> should give you enough information to code your own python library to do this.  This is a fair bit different than traditional ""audio processing"" (since you don't care about precision) and so you're unlikely to find an existing library that does this.  Most, as you've found, will decompress the audio first so you can have complete fine-grained control.</p>
"
311033,"<blockquote>
  <p>I would like the pattern to be as
  follows: must start with 'b', followed
  by three digits, followed by 'cv',
  followed by two digits, then an
  underscore, followed by 'release',
  followed by .'ext'</p>
</blockquote>

<pre><code>^b\d{3}cv\d{2}_release\.ext$
</code></pre>
"
311282,"<p>In defense of Kiwi:</p>

<ul>
<li>Kiwi works fine with Glade3 instead of Gazpacho. (who forced you to use Gazpacho?)</li>
<li>Kiwi is my first dependency for <em>any</em> PyGTK application commercial or open source.</li>
<li>Kiwi is very actively maintained.</li>
</ul>

<p>I have generally got to a stage where I think its irresponsible to not use Kiwi in a PyGTK application. Perhaps you can tell us what you found ""lacking"" so we can improve the framework. #kiwi on irc.gimp.net (or the Kiwi mailing list).</p>
"
212357,"<p>Just make a module called Options.py, and import it.  Put your default options values in there as global variables.</p>
"
212541,"<p>If you just want to see if it's present, try turning the list into a dict:</p>

<pre><code># Generate a list
l = [n*n for n in range(1000)]

# Convert to dict - doesn't matter what you map values to
d = dict((x, 1) for x in l)

count = 0
for n in range(1000000):
    # Compare with ""if n in l""
    if n in d:
        count += 1
</code></pre>

<p>On my machine, ""if n in l"" took 37 seconds, while ""if n in d"" took 0.4 seconds.</p>
"
307908,"<p>Building from p4python source requires downloading and extracting the p4 api recommended for that version. For example, if building the Windows XP x86 version of P4Python 2008.2 for activepython 2.5:</p>

<ul>
<li>download and extract both the <a
href=""ftp://ftp.perforce.com/perforce/r08.2/tools/p4python.tgz"">p4python</a> and <a
href=""ftp://ftp.perforce.com/perforce/r08.2/bin.ntx86/p4api_vs2005_static.zip"">p4api</a></li>
<li>fixup the setup.cfg for p4python to
point to the p4api directory.</li>
</ul>

<p>To open files for edit (do a checkout), on the command line, see 'p4 help open'.</p>

<p>You can check out files without making a changelist if you add the file to the default changelist, but it's a good idea to make a changelist first.</p>

<p>P4Python doesn't currently compile for activepython 2.6 without visual studio 2008; the provided libs are built with 2005 or 2003. Forcing p4python to build against mingw is nearly impossible, even with pexports of python26.dll and reimp/reassembly of the provided .lib files into .a files.</p>

<p>In that case, you'll probably rather use subprocess, and return p4 results as marshalled python objects. You can write your own command wrapper that takes an arg array, constructs and runs the commands, and returns the results dictionary.</p>

<p>You might try changing everything, testing, and on success, opening the files that are different with something equivalent to 'p4 diff -se //...'</p>
"
66670,"<p>What are you trying to accomplish? If I saw such a construct in live Python code, I would consider beating the original programmer.</p>
"
66847,"<p>I'm also not entirely sure what the exact behaviour you want is, but assuming its that you want bar.meth1(42) to be equivalent to foo.meth1 being a classmethod of bar (with ""self"" being the class), then you can acheive this with:</p>

<pre><code>def convert_to_classmethod(method):
    return classmethod(method.im_func)

class bar(foo):
    meth1 = convert_to_classmethod(foo.meth1)
</code></pre>

<p>The problem with classmethod(foo.meth1) is that foo.meth1 has already been converted to a method, with a special meaning for the first parameter.  You need to undo this and look at the underlying function object, reinterpreting what ""self"" means.</p>

<p>I'd also caution that this is a pretty odd thing to do, and thus liable to cause confusion to anyone reading your code.  You are probably better off thinking through a different solution to your problem.</p>
"
309196,"<p>What version of Python?</p>

<p>In 2.5.1, I can't even define a class the inherits from both <code>dict</code> and <code>Exception</code>:</p>

<pre><code>&gt;&gt;&gt; class foo(dict, Exception):
...   pass
... 
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: Error when calling the metaclass bases
    multiple bases have instance lay-out conflict
</code></pre>

<p>If you're using an older version, maybe it doesn't do this check during type definition and the conflict causes oddities later on.</p>
"
309211,"<h2>No reason but a solution</h2>

<p>For the moment I still don't know the why, but I bypass it using <code>UserDict.UserDict</code>. It's slower since it's pure Python, but I don't think on this part of the app it will be troublesome.</p>

<p>Still interested about the answer anyway ;-)</p>
"
213639,"<p>You don't want to decode the string into a Unicode representation, you just want to treat it as an array of bytes, right?</p>

<p>Just use <code>PyString_FromString</code>:</p>

<pre><code>char *cstring;
PyObject *pystring = PyString_FromString(cstring);
</code></pre>

<p>That's all.  Now you have a Python <code>str()</code> object.  See docs here: <a href=""https://docs.python.org/2/c-api/string.html"" rel=""nofollow"">https://docs.python.org/2/c-api/string.html</a></p>

<p>I'm a little bit confused about how to specify ""str"" or ""unicode.""  They are quite different if you have non-ASCII characters.  If you want to decode a C string <strong>and</strong> you know exactly what character set it's in, then yes, <code>PyString_DecodeString</code> is a good place to start.</p>
"
213742,"<p>Its hard to give a definitive answer without knowing what kind of site you are working on and what kind of load you are expecting.  Sub second performance may be a serious requirement or it may not.  If you really need to save that last millisecond then you absolutely need to keep your arrays in memory.  However as others have suggested it is more than likely that you don't and could get by with something else.  Your usage pattern of the data in the array may affect what kinds of choices you make.  You probably don't need access to the entire set of data from the array all at once so you could break your data up into smaller chunks and put those chunks in the cache instead of the one big lump.  Depending on how often your array data needs to get updated you might make a choice between memcached, local db (berkley, sqlite, small mysql installation, etc) or a remote db.  I'd say memcached for fairly frequent updates. A local db for something in the frequency of hourly and remote for the frequency of daily.  One thing to consider also is what happens after a cache miss.  If 50 clients all of a sudden get a cache miss and all of them at the same time decide to start regenerating those expensive arrays your box(es) will quickly be reduced to 8086's.  So you have to take in to consideration how you will handle that.  Many articles out there cover how to recover from cache misses.  Hope this is helpful.</p>
"
347733,"<p>Your configuration looks okay: I've got a working mod_python.publisher script with essentially the same settings.</p>

<p>A few other thoughts:</p>

<ul>
<li><p>When you tried editing the publisher source code, did you restart your web server? It only loads Python libraries once, when the server is first started.</p></li>
<li><p>Publisher's autodetection looks for a closing HTML tag: &lt;/html&gt;. Is that what you added? (I can't see it in your question, but possibly it just got stripped out when you posted it.)</p></li>
<li><p>If nothing else works, you can always set the content type explicitly. It's more code, but it's guaranteed to work consistently. Set the content_type field on your request to 'text/html'. </p></li>
</ul>

<p>For example, if your script looks like this right now:</p>

<pre><code>def index(req, an_arg='default'):
    return some_html
</code></pre>

<p>it would become:</p>

<pre><code>def index(req, an_arg='default'):
    req.content_type = 'text/html'
    return some_html
</code></pre>
"
347758,"<pre><code>pi = (square((a+b)))/4*t
</code></pre>

<p>should be</p>

<pre><code>pi = (square((a+b)))/(4*t)
</code></pre>
"
347760,"<ol>
<li>If you want to calculate PI to 1000 digits you need to use a data type that supports 1000 digits of precision (e.g., <a href=""http://www.egenix.com/products/python/mxExperimental/mxNumber/"" rel=""nofollow"">mxNumber</a>)</li>
<li>You need to calculate a,b,t, and x until |a-b| &lt; 10**-digits, not iterate digits times.</li>
<li>Calculate square and pi as @J.F. suggests.</li>
</ol>
"
348192,"<p>The reason you use caches is to improve performance.  Test the performance by running a load test against your server.  If the server's performance matches your needs, then you are all set!</p>
"
348222,"<p>If I understand correctly your question, you ask a way to execute a deep copy of an object.
What about using copy.deepcopy?</p>

<pre><code>import copy

x = SimpleClass()

for count in range(0,4):
  y = copy.deepcopy(x)
  (...)
  y.attr1= '*Bob* '* count
</code></pre>

<p>A deepcopy is a recursive copy of the entire object. For more reference, you can have a look at the python documentation: <a href=""https://docs.python.org/2/library/copy.html"" rel=""nofollow"">https://docs.python.org/2/library/copy.html</a></p>
"
249113,"<blockquote>
  <p>Can you guys help me think of
  something to finally convince my boss
  to really learn Python and start using
  it on projects?</p>
</blockquote>

<p>Unfortunately, the answer is no. As Harley said, no problem is going to <strong>require</strong> a specific language. The approach Harley suggested is also a good one. Learn on your time, build an useful app on your time, and maybe, just maybe, someone at your work will want to use it, like it, love it, then want to learn more about it.</p>

<p>Another approach you could take is to get a better understanding of why your company uses .Net (therefore, Windows Server, and probably SQL server) for nearly all development. Once you have a good understanding of why they aren't open to other languages, then you have some fire power to build a business case for the ""why not?"". </p>

<p>Why pay licensing costs when you have tools that can accomplish the same things? There are free alternatives out there, like Python, that run on free servers.</p>

<p>Why not give your team the chance to grow their professional tool-belt? This is my opinion, but a good developer is a developer that isn't afraid to learn new ways of doing the same thing they've done before.</p>

<p>But, in the end, I wouldn't get your hopes up. Bottom line, it costs money to introduce a new language/environment into an IT shop. Whether it's software, training, or employee rollover, there is a business reason behind utilizing a single language for a company, and sticking to it.</p>

<p>I'm in the exact scenario you're in. I work in a .Net shop, and that's not going to change any time soon. I get by, by working on my own projects in my ""free"" time. I enjoy it, and it makes for a good balance. </p>

<p>Hope this helps.</p>
"
249118,"<p>Take a step back, and look at your approach. ""I know what I want the answer to be, but I can't find any evidence to support it."" </p>

<p>Despite the fact that Python is my current first choice language, I am afraid I find myself on the side of your boss! Sorry.</p>

<p>I think you should open your mind and consider all the options from the stance of your organisation's best interest, and see if you don't come to a different conclusion about the best language.</p>

<p>There are many factors in the choice of language, and how pretty it is is a fairly minor one. The availability of staff is a key one. The cost of retraining, availability of the libraries and meta-tools, performance, etc. etc.</p>

<p>Once you have taken into consideration all the different factors (and not just ""Oooh! It'd be fun!"") and made a balanced assessment (rather than a predetermined answer), you may find that your boss is more willing to listen.</p>

<p>p.s. The suggestion to secretly use Python for work code, and leaving the company with a terrible code debt in a language they are not prepared for seems very unprofessional to me.</p>
"
129868,"<blockquote>
  <p>Because I need to modify an attribute that in such a way that is seen by all instances of a class, and in the scope from which these class methods are called does not have references to all instances of the class.</p>
</blockquote>

<p>Do you have access to at least one instance of the class? I can think of a way to do it then:</p>

<pre><code>class MyClass (object):
    __var = None

    def _set_var (self, value):
        type (self).__var = value

    def _get_var (self):
        return self.__var

    var = property (_get_var, _set_var)

a = MyClass ()
b = MyClass ()
a.var = ""foo""
print b.var
</code></pre>
"
130134,"<p>I always thought the time and datetime modules were a little incoherent.  Anyways, here's the inverse of mktime</p>

<pre><code>import time
def mkgmtime(t):
    """"""Convert UTC tuple to seconds since Epoch""""""
    return time.mktime(t)-time.timezone
</code></pre>
"
187135,"<p>I typically do as Daren suggested, just make your config file a Python script:</p>

<pre><code>patterns = {
    'file .* does not exist': 'file not found',
    'user .* not found': 'authorization error',
}
</code></pre>

<p>Then you can use it as:</p>

<pre><code>import config

for pattern in config.patterns:
    if re.search(pattern, log_message):
        print config.patterns[pattern]
</code></pre>

<p>This is what Django does with their settings file, by the way.</p>
"
346741,"<p>There is no difference, except for what names from re are visible in you local namespace after the import.</p>
"
5014,"<p>I would consider that using python on a new project is completely dependent on what problem you are trying to solve with python.  If you want someone to agree with you that you should use python, then show them how python's features apply specifically to that problem.</p>

<p>In the case of web development with python, talk about WSGI and other web libraries and frameworks you could use that would make your life easier.  One note for python is that most of the frameworks for python web development can be plugged right into any current project. With ruby on rails, you're practically working in a DSL that anyone who uses your project will have to learn.  If they know python, then they can figure out what you are doing with django, etc in a day.</p>

<p>I'm only talking about web development because it appears that's what you are going to be working on seeing ruby, python and PHP in the same list.  The real message that's important is applying to whatever it is you like about python <em>directly</em> to some problem you are trying to solve.</p>"
185678,"<p>I think answers should go in the ""answer"" section rather than as an addendum to the question since that marks the question as having an answer on the various question-list pages.  I'll do that for you but, if you also get around to doing it, leave a comment on my answer so I can delete it.</p>

<p>Quoting ""answer in question"":</p>

<p>Verifying everything in this question, I eventually solved the problem. The 'No such file or directory' are caused by some __db.XXX files missing. Using</p>

<pre><code>bsddb.dbtables.bsdTableDB([dbname],[folder], create=1)
</code></pre>

<p>after db4.4_recover, these files got created and everything is now working.</p>

<p>Still, it was a bit of an obscure problem, and initially hard to figure out. But thanks to the question <a href=""http://stackoverflow.com/questions/37644/examining-berkeley-db-files-from-the-cli"">Examining Berkeley DB files from the CLI</a>, I got the tools I needed. I'll just post it here if someone ends up with the same problem in the future and end up at stackoverflow.com</p>
"
518,"<p>I haven't been able to find anything that does this directly.  I think you'll have to iterate through the various font folders on the system: <code>/System/Library/Fonts</code>, <code>/Library/Fonts</code>, and there can probably be a user-level directory as well <code>~/Library/Fonts</code>.</p>
"
184238,"<p>You may want to check out the P4Python module. It's available on the perforce site and it makes things very simple.</p>
"
186738,"<p>To get a feeling of where the Django ecosystem is at currently, you might want to check out</p>

<ul>
<li><a href=""http://djangopeople.net/"" rel=""nofollow"">djangopeople.net</a> (try <a href=""http://djangopeople.net/us/ny/"" rel=""nofollow"">djangopeople.net/us/ny</a> for New York state)</li>
<li><a href=""http://djangogigs.com/"" rel=""nofollow"">djangogigs.com</a></li>
</ul>
"
186636,"<p>I prefer to <code>import X</code> and then use <code>X.a</code> as much as possible.</p>

<p>My exception centers on the deeply nested modules in a big framework like Django.  Their module names tend to get lengthy, and their examples all say <code>from django.conf import settings</code> to save you typing <code>django.conf.settings.DEBUG</code> everywhere.</p>

<p>If the module name is deeply nested, then the exception is to use <code>from X.Y.Z import a</code>.</p>
"
186485,"<p>I usually use a threshold to decide this.  If I want to use a lot of things within <code>some_module</code>, I'll use:</p>

<pre><code>import some_module as sm
x = sm.whatever
</code></pre>

<p>If there's only one or two things I need:</p>

<pre><code>from some_module import whatever
x = whatever
</code></pre>

<p>That's assuming I don't need a <code>whatever</code> from <code>some_other_module</code>, of course.</p>

<p>I tend to use the <code>as</code> clause on the imports so that I can reduce my typing <strong>and</strong> substitue another module quite easily in the future.</p>
"
186317,"<p>There are a couple of things you could improve.</p>

<ul>
<li><p>You're performing two loops, one over the original dict, and then again over the result dict.  You could build up your results in one step instead.</p></li>
<li><p>You could change to use a generator, to avoid constructing the whole list up-front.  (Use list(unique_mapping(items)) to convert to a full list if you need it)</p></li>
<li><p>There's no need to store the value when just checking for duplicates, you can use a set instead.</p></li>
<li><p>You're recreating a dictionary for each element, rather than returning the original.  This may actually be needed (eg. you're modifying them, and don't want to touch the original), but if not, its more efficient to use the dictionaries already created.</p></li>
</ul>

<p>Here's an implementation:</p>

<pre><code>def unique_mapping(items):
    s = set()
    for res in items:
        if res['id'] not in s:
            yield res
            s.add(res['id'])
</code></pre>
"
185748,"<p>What if we only insert an additional blank line between the condition and the body and do the rest in the canonical way?</p>

<pre><code>if (cond1 == 'val1' and cond2 == 'val2' and
    cond3 == 'val3' and cond4 == 'val4'):

    do_something
</code></pre>

<p>p.s. I always use tabs, not spaces; I cannot fine-tune...</p>
"
347074,"<p>One of pragmatic programmer's advice is to learn a new language per year. Possibly, a completely different one each time (see <a href=""http://martinfowler.com/bliki/OneLanguage.html"" rel=""nofollow"">Martin Fowler's opinion</a> on this matter).</p>

<p>Back to your specifics, you have chosen the way of programming because you enjoyed it (I hope :-)); if you are not satisfied by your current environment, go and change it.</p>
"
347066,"<blockquote>
  <blockquote>
    <p>The reason I settled in on Web Development as my course to learning programming is because I actually have a task to implement rather then aimlessly reading reference books etc.</p>
  </blockquote>
</blockquote>

<p>This is exactly the course to follow.  I think most of us get into programming the same way.  Find a problem and work out its solution in whatever technology is appropriate.  Keep looking for problems that are interesting to you, and you'll find your own answer (which is probably different than my own answer) to this question.</p>
"
347059,"<p>I wrote an 8-puzzle solver in Lisp about a year ago. I just used a list of 3 lists, each sublist with 3 elements being the numbers. It's not constant time, but it is portable.</p>

<p>Anyways, if you are really interested in doing this functionally (Scheme doesn't require you to) what is easiest to do is to create some helper functions that will get a specific value given row/col and 'set' a value given row/col. Instead of modifying the original data structure, the set operation will construct the new state based on the old state.</p>

<p>Then you can write a swap operation based on these get and set operations. Here's what I wrote about a year ago in Common Lisp, but it's easily convertible to Scheme:</p>

<pre><code>; getval
;
; This function takes a position (r . c) where and returns the corresponding
; number in the 8-puzzle state. For example, if you wanted (1 . 2) from
; ((1 2 3) (4 5 6) (7 8 9)), the value would be 6. The r and c values begin
; at 0.
;
; parameters:  pos    The position to get
;              state  The 8-puzzle state
; returns:     The value at pos in state
(defun getval (pos state)
  (if (null state) 'no-value
      (if (= 0 (car pos))
      (if (= 0 (cdr pos))
          (caar state)
          (getval (cons (car pos) (- (cdr pos) 1)) (list (cdar state))))
      (getval (cons (- (car pos) 1) (cdr pos)) (cdr state)))))

; setval
;
; This function returns a state where the value at pos is replaced by val.
; Like getval, this function is zero-based. Accessing beyond the size of
; the state is undefined (and probably broken)
;
; parameters:  pos    Position to set
;              val    Value to set
;              state  State to modify
; returns:     New state where pos is val
(defun setval (pos val state)
  (if (null state) '()
      (if (= 0 (car pos))
      (if (= 0 (cdr pos))
          (cons (cons val (cdar state)) (cdr state))
          (let ((temp (setval (cons (car pos) (- (cdr pos) 1)) val
    			  (cons (cdar state) (cdr state)))))
    	(cons (cons (caar state) (car temp)) (cdr temp))))
      (cons (car state) (setval (cons (- (car pos) 1) (cdr pos)) val (cdr state))))))

; state-swap
;
; This function takes a state and two positions and returns a new state with
; the values in those two positions swapped.
;
; parameters:  state  State to swap within
;              a      Position to swap with b
;              b      Position to swap with a
; return:      State with a swapped with b
(defun state-swap (state a b)
  (let ((olda (getval a state)) (oldb (getval b state)))
    (setval a oldb (setval b olda state))))
</code></pre>
"
183528,"<p>Two small changes...</p>

<pre><code>base_name, ext = os.path.splitext(file_name)
</code></pre>

<p>You get two results with distinct meaning, give them distinct names.</p>

<pre><code>file_name = ""%s_%d%s"" % (base_name, str(counter), ext)
</code></pre>

<p>It isn't faster or significantly shorter.  But, when you want to change your file name pattern, the pattern is on one place, and slightly easier to work with.</p>
"
129245,"<p>I found <a href=""http://search.cpan.org/~ssnodgra/Unix-ConfigFile-0.06/GroupFile.pm"" rel=""nofollow"">This</a> for you. It should do what you need. As far as I can tell Perl does not have any built in functions for removing users from a group. It has several for seeing the group id of a user or process.</p>
"
189367,"<p>You should take a look at the <a href=""http://code.google.com/p/django-mobileadmin/"" rel=""nofollow"">django-mobileadmin</a> source code, which solved exactly this problem.</p>
"
182199,"<p>I strongly recommend <a href=""http://www.activestate.com/Products/activepython/index.mhtml"" rel=""nofollow"">ActiveState Python</a> for python on windows development.  It comes with Win32Com and various other goodies, has a mature and clean installer, a chm version of the docs and works really well.  I use this all of the time.</p>

<p>As for a database, Activestate comes with odbc support, which plays very nicely with SQL server.  I've also had it working with Sybase and DB2/400 (although the connection strings for the latter tend to be rather convoluted).  For Oracle, I recommend <a href=""http://python.net/crew/atuining/cx_Oracle/"" rel=""nofollow"">CX_Oracle</a> as the best interface library.  Native drivers for most proprietary and open-source databases (such as <a href=""http://mysql-python.sourceforge.net/"" rel=""nofollow"">MySQL</a> and <a href=""http://www.pygresql.org/"" rel=""nofollow"">PostGreSQL</a>) also exist.  Recent versions of Python (from 2.5 onwards IIRC) come with <a href=""http://www.python.org/doc/2.5.2/lib/module-sqlite3.html"" rel=""nofollow"">SQLite</a> bundled as standard.</p>
"
344649,"<p>Are you developing the application in Python? It depends what GUI toolkit you're using.</p>

<p>If you're using wxPython, you could try <a href=""http://xoomer.alice.it/infinity77/main/ToasterBox.html"" rel=""nofollow"">ToasterBox</a>, or the wxPopupWindow.</p>
"
345360,"<p>I would say <a href=""http://jinja.pocoo.org/"" rel=""nofollow"">Jinja</a> as well. It is definitely <strong>more powerful</strong> than Django Templating Engine and it is <strong>stand alone</strong>.</p>

<p>If this was an external plug to an existing Django application, you could create <a href=""http://docs.djangoproject.com/en/dev/howto/custom-management-commands/#howto-custom-management-commands"" rel=""nofollow"">a custom command</a> and use the templating engine within your projects environment. Like this;</p>

<pre><code>manage.py generatereports --format=html
</code></pre>

<p>But I don't think it is worth just using the Django Templating Engine instead of Jinja.</p>
"
345744,"<p>If the 'shelve' solution turns out to be too slow or fiddly, there are other possibilities:</p>

<ul>
<li><a href=""http://pypi.python.org/pypi/shove"" rel=""nofollow"">shove</a></li>
<li><a href=""http://www.mems-exchange.org/software/durus/"" rel=""nofollow"">Durus</a></li>
<li><a href=""http://www.zope.org"" rel=""nofollow"">ZopeDB</a></li>
<li><a href=""http://www.pytables.org/"" rel=""nofollow"">pyTables</a></li>
</ul>
"
9171,"<p><a href=""http://pyxml.sourceforge.net"" rel=""nofollow"" title=""PyXML"">PyXML</a> works well.  </p>

<p>You didn't say what platform you're using, however if you're on Ubuntu you can get it with <code>sudo apt-get install python-xml</code>.  I'm sure other Linux distros have it as well.  </p>

<p>If you're on a Mac, xpath is already installed but not immediately accessible.  You can set <code>PY_USE_XMLPLUS</code> in your environment or do it the Python way before you import xml.xpath:</p>

<pre><code>if sys.platform.startswith('darwin'):
    os.environ['PY_USE_XMLPLUS'] = '1'
</code></pre>

<p>In the worst case you may have to build it yourself.  This package is no longer maintained but still builds fine and works with modern 2.x Pythons.  Basic docs are <a href=""http://pyxml.sourceforge.net/topics/howto/section-XPath.html"" rel=""nofollow"">here</a>.</p>
"
346330,"<p>""imports ... require your module to be on your PYTHONPATH""</p>

<p>Right.  </p>

<p>So, what's wrong with setting <code>PYTHONPATH</code>?</p>
"
346476,"<p>Well I couldn't find a Django way, but I did find a python way from inside my model:</p>

<pre><code>def format_price(self):
    import locale
    locale.setlocale(locale.LC_ALL, '')
    return locale.format('%d', self.price, True)
</code></pre>
"
7073,"<p>Is the PC likely to have Acrobat installed? I think Acrobat installs a shell extension so previews of the first page of a PDF document appear in Windows Explorer's thumbnail view. You can get thumbnails yourself via the IExtractImage COM API, which you'll need to wrap. <a href=""http://www.vbaccelerator.com/home/net/code/libraries/shell_projects/Thumbnail_Extraction/article.asp"" rel=""nofollow"" title=""Domain Specific Development with Visual Studio DSL Tools."">VBAccelerator has an example in C#</a> that you could port to Python.</p>
"
248200,"<p>Hmm... Try this:</p>

<pre><code>if authorForm.is_valid() and 'book' in authorForm.changed_data:
    new_value = authorForm.cleaned_data['book']
</code></pre>
"
252296,"<p>What if it doesn't mean anything, what if it is just a neat design they came up with?</p>
"
252299,"<p>Add import sys; print sys.path to the start of test.py.  See what it prints out in the failing case.  If ""."" isn't on the list, that may be your problem.</p>
"
252361,"<p>Sorry to answer so late. <a href=""http://async.com.br/projects/kiwi"" rel=""nofollow"">Kiwi</a> seems to me a far better solution than gtkmvc. It is my first dependency for any pygtk project.</p>
"
126494,"<p>Have you tried the <a href=""http://www.stickpeople.com/projects/python/win-psycopg/"" rel=""nofollow"">binary build</a> of psycopg2 for windows? If that works with your python then it mitigates the need to build by hand.</p>

<p>I've seen random people ask this question on various lists and it seems one recommendation is to build postgresql by hand to work around this problem.</p>
"
126843,"<p>As the author of one of the reloader mechanisms (the one in werkzeug) I can tell you that it doesn't work.  What all the reloaders do is forking one time and restarting the child process if a monitor thread notices that one module changed on the file system.</p>

<p>Inline <code>reload()</code>ing doesn't work because references to the reloaded module are not updated.</p>
"
213827,"<p>Python is certainly well suited to that. If you're going down that road, you might also want to investigate <a href=""http://scons.org"" rel=""nofollow"">SCons</a> which is a build system itself built with Python. The cool thing is the build scripts are actually full-blown Python scripts themselves, so you can do anything in the build script that you could otherwise do in Python. It makes <code>make</code> look pretty anemic in comparison.</p>

<p>Upon rereading your question, I should note that SCons is more suited to building software projects than to writing system maintenance scripts. But I wouldn't hesitate to recommend Python to you in any case.</p>
"
214066,"<p>You're question is very confusing to say the least. </p>

<p>1> The code you pasted is using a trick to communicate with the driver using its 'DOSNAME' i.e.</p>

<pre><code>\\.\DRIVERNAME
</code></pre>

<p>2> Have you created &amp; loaded the 'giveio' driver ?</p>

<p>The reason the driver handles this calls is because of this</p>

<p><a href=""http://msdn.microsoft.com/en-us/library/ms806162.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/ms806162.aspx</a></p>
"
157871,"<p>""timestamp should be accurate relative to each other ""</p>

<p>Why time?  Why not a sequence number?  If it's any client of client-server application, network latency makes timestamps kind of random.</p>

<p>Are you matching some external source of information?  Say a log on another application?  Again, if there's a network, those times won't be too close.</p>

<p>If you must match things between separate apps, consider passing GUID's around so that both apps log the GUID value.  Then you could be absolutely sure they match, irrespective of timing differences.</p>

<p>If you want the <em>relative</em> order to be exactly right, maybe it's enough for your logger to assign a sequence number to each message in the order they were received.</p>
"
307517,"<p>When compiling to exe, your going to have this issue.</p>

<p>The only option I can think of to allow users access with thier plugins to use any python library is to include all libraries in the exe package.  </p>

<p>It's probably a good idea to limit supported libraries to a subset, and list it in your documentation. Up to you.</p>

<p>I've only used py2exe.</p>

<p>In py2exe you can specify libraries that were not found in the search in the <strong>setup.py</strong> file.</p>

<p>Here's a sample:</p>

<pre><code>from distutils.core import setup
import py2exe

setup (name = ""script2compile"",
       console=['script2compile.pyw'],
       version = ""1.4"",
       author = ""me"",
       author_email=""somemail@me.com"",
       url=""myurl.com"",
       windows = [{
                    ""script"":""script2compile.pyw"",
                    ""icon_resources"":[(1,""./ICONS/app.ico"")]  # Icon file to use for display
                 }],
       # put packages/libraries to include in the ""packages"" list
       options = {""py2exe"":{""packages"": [   ""pickle"",
                                            ""csv"",
                                            ""Tkconstants"",
                                            ""Tkinter"",
                                            ""tkFileDialog"",
                                            ""pyexpat"",
                                            ""xml.dom.minidom"",
                                            ""win32pdh"",
                                            ""win32pdhutil"",
                                            ""win32api"",
                                            ""win32con"",
                                            ""subprocess"", 
                                        ]}} 

       )

import win32pdh
import win32pdhutil
import win32api
</code></pre>
"
307547,"<p>If you want Apache-style logs, try <a href=""http://svn.pythonpaste.org/Paste/trunk/paste/translogger.py"" rel=""nofollow"">paste.translogger</a></p>

<p>But for something more complete, though not in a very handy or stable location (maybe copy it into your source) is <a href=""http://svn.pythonpaste.org/Paste/WSGIFilter/trunk/wsgifilter/proxyapp.py"" rel=""nofollow"">wsgifilter.proxyapp.DebugHeaders</a></p>

<p>And writing one using <a href=""http://pythonpaste.org/webob"" rel=""nofollow"">WebOb</a>:</p>

<pre><code>import webob, sys
class LogHeaders(object):
    def __init__(self, app, stream=sys.stderr):
        self.app = app
        self.stream = stream
    def __call__(self, environ, start_response):
        req = webob.Request(environ)
        resp = req.get_response(self.app)
        print &gt;&gt; self.stream, 'Request:\n%s\n\nResponse:\n%s\n\n\n' % (req, resp)
        return resp(environ, start_response)
</code></pre>
"
310591,"<p>You should try to avoid doing your own quoting.  Not only will it be DB-specific as people have pointed out, but flaws in quoting are the source of SQL injection bugs.</p>

<p>If you don't want to pass around queries and values separately, then pass around a list of the parameters:</p>

<pre><code>def make_my_query():
    # ...
    return sql, (value1, value2)

def do_it():
    query = make_my_query()
    cursor.execute(*query)
</code></pre>

<p>(I probably have the syntax of cursor.execute wrong) The point here is that just because cursor.execute takes a number of arguments, that doesn't mean you have to handle them all separately.  You can deal with them as one list.</p>
"
65255,"<pre><code>l=['a', 1, 'b', 2]

print str(l)[1:-1]

Output: ""'a', 1, 'b', 2""
</code></pre>
"
65333,"<p>Note that each module initializes itself only once during the life of an app, no matter how many times you import it. So if you compile your expressions at the module's global scope (ie. not in a function) you should be fine.</p>
"
65682,"<p>I think what you want to do is this:</p>

<pre><code>&gt;&gt;&gt; class Foo():
...   def __init__(self, x):
...     self.x = x
... 
&gt;&gt;&gt; def bar(self):
...   print 'bar:', self.x
... 
&gt;&gt;&gt; bar.func_name = 'foobar'
&gt;&gt;&gt; Foo.foobar = bar
&gt;&gt;&gt; f = Foo(12)
&gt;&gt;&gt; f.foobar()
bar: 12
&gt;&gt;&gt; f.foobar.func_name
'foobar'
</code></pre>

<p>Now you are free to pass <code>Foo</code>s to a library that expects <code>Foo</code> instances to have a method named <code>foobar</code>.</p>

<p>Unfortunately, (1) I don't know how to use metaclasses and (2) I'm not sure I read your question correctly, but I hope this helps. </p>

<p>Note that <code>func_name</code> is only assignable in Python 2.4 and higher.</p>
"
65757,"<p>Python has its own threading module that comes standard, if it helps. You can create thread objects using the threading module.</p>

<p><a href=""http://docs.python.org/lib/module-threading.html"" rel=""nofollow"">threading Documentation</a></p>

<p><a href=""http://docs.python.org/lib/module-thread.html"" rel=""nofollow"">thread Documentation</a></p>

<p>The thread module offers low level threading and synchronization using simple Lock objects.</p>

<p>Again, not sure if this helps since you're using Python under a Delphi environment.</p>
"
310951,"<p>""mvc"" titled app:</p>

<p><a href=""http://sourceforge.net/projects/pygtkmvc/"" rel=""nofollow"">http://sourceforge.net/projects/pygtkmvc/</a></p>

<p>""avc"" titled app:</p>

<p><a href=""http://avc.inrim.it/html/"" rel=""nofollow"">http://avc.inrim.it/html/</a></p>

<p>more information:</p>

<p><a href=""http://www.pygtk.org/applications.html"" rel=""nofollow"">http://www.pygtk.org/applications.html</a></p>
"
311236,"<p>Firstly, if you're performing automated tasks on a retrieived FTP listing then you should probably be looking at <code>NLST</code> rather than <code>LIST</code> as noted in <a href=""http://tools.ietf.org/html/rfc959#page-33"" rel=""nofollow"">RFC 959 section 4.1.3</a>:</p>

<pre>
 NAME LIST (NLST)
 ...
            This command is intended to return information that
            can be used by a program to further process the
            files automatically.

</pre>

<p>The <a href=""http://twistedmatrix.com/documents/current/api/twisted.protocols.ftp.FTPClient.html#list"" rel=""nofollow"">Twisted documentation</a> for <code>LIST</code> says:</p>

<pre>
It can cope with most common file listing formats.
</pre>

<p>This make me suspicious; I do not like solutions that ""cope"". <code>LIST</code> was intended for human consumption not machine processing.</p>

<p>If your target server supports them then you should prefer <code>MLST</code> and <code>MLSD</code> as defined in <a href=""http://tools.ietf.org/html/rfc3659#section-7"" rel=""nofollow"">RFC 3659 section 7</a>:</p>

<pre>
7.  Listings for Machine Processing (MLST and MLSD)

   The MLST and MLSD commands are intended to standardize the file and
   directory information returned by the server-FTP process.  These
   commands differ from the LIST command in that the format of the
   replies is strictly defined although extensible.

</pre>

<p>However, these newer commands may not be available on your target server and I don't see  them in Twisted. Therefore <code>NLST</code> is probably your best bet.</p>

<p>As to the nub of your problem, there are three likely causes:</p>

<ol>
<li>The processing of the returned results is incorrect (Twisted may be at fault, as you suggest, or perhaps elsewhere)</li>
<li>The server is buggy and not sending a correct (complete) response</li>
<li>The wrong command is being sent (unlikely with straight <code>NLST</code>/<code>LIST</code>, but some servers react differently if arguments are supplied to these commands)</li>
</ol>

<p>You can eliminate (2) and (3) and prove that the cause is (1) by looking at what is sent over the wire. If this option is not available to you as part of the Twisted API or the Pure-FTPD server logging configuration, then you may need to break out a network sniffer such as tcpdump, snoop or WireShark (assuming you're allowed to do this in your environment). Note that you will need to trace not only the control connection (port 21) but also the data connection (since that carries the results of the <code>LIST</code>/<code>NLST</code> command). WireShark is nice since it will perform the protocol-level analysis for you.</p>

<p>Good luck.</p>
"
159992,"<p>Note that you can build your own cross-platform library in python using conditional imports.  e.g.</p>

<pre><code>import platform
if platform.system() == 'Linux':
  import LinuxMac
  mac_address = LinuxMac.get_mac_address()
elif platform.system() == 'Windows':
  # etc
</code></pre>

<p>This will allow you to use os.system calls or platform-specific libraries.</p>
"
211970,"<p>Simplifying <a href=""http://stackoverflow.com/questions/211695/what-is-an-easy-way-to-create-a-trivial-one-off-python-object#211918"">davraamides's suggestion</a>, one could use the following:</p>

<pre><code>class attrdict2(object):
    def __init__(self, *args, **kwargs):
        self.__dict__.update(*args, **kwargs)
</code></pre>

<p>which</p>

<ol>
<li><p>Isn't so kludgy.</p></li>
<li><p>Doesn't contaminate the namespace of each object with the standard methods of <code>dict</code>; for example, <code>ad.has_key</code> is not defined for objects of type <code>attrdict2</code>.</p></li>
</ol>

<p>By the way, it is even easier to initialize instances of <code>attrdict</code> or <code>attrdict2</code>:</p>

<pre><code>&gt;&gt;&gt; ad = attrdict2(foo = 100, bar = 200)
</code></pre>

<p>Granted, <code>attrdict2</code> is not compatible with a <code>dict</code>.</p>

<p>If you don't need the magic initialization behavior, you can even use</p>

<pre><code>class attrdict3(object):
    pass

ad = attrdict3()
ad.foo = 100
ad.bar = 200
</code></pre>

<p>But I was still hoping for a solution that doesn't require an auxiliary class.</p>
"
212682,"<p>Take a look at <a href=""http://code.google.com/p/googleappengine/source/browse/trunk/google/appengine/api/datastore.py"" rel=""nofollow"">google.appengine.api.datastore</a>. It's the lower level datastore API that google.appengine.ext.db builds on, and it returns Entity objects, which subclass dict. You can query it using GQL with <a href=""http://code.google.com/p/googleappengine/source/browse/trunk/google/appengine/ext/gql/__init__.py"" rel=""nofollow"">google.appengine.ext.gql</a>, or (my personal preference) use the Query class, which avoids the need for you to construct text strings for the GQL parser to parse. The Query class in api.datastore behaves exactly like the one <a href=""http://code.google.com/appengine/docs/datastore/queryclass.html"" rel=""nofollow"">documented here</a> (but returns the lower level Entity objects instead of Model instances).</p>

<p>As an example, your query above can be reformulated as ""datastore.Query(""Foo"").all()"".</p>
"
307775,"<p>What you probably want to do is:</p>

<pre><code>class Ball:
  def __init__(self):
    self.a = []
</code></pre>

<p>If you use just <code>a = []</code>, it creates a local variable in the <code>__init__</code> function, which disappears when the function returns. Assigning to <code>self.a</code> makes it an instance variable which is what you're after.</p>

<p>For a semi-related gotcha, see how you can <a href=""http://stackoverflow.com/questions/146329/what-is-the-worst-gotcha-youve-experienced#147877"">change the value of default parameters for future callers</a>.</p>
"
305667,"<p>I recommend using Glade for rapid development, but not for learning. Why? because some times you will need to tune up some widgets in order to work as you want they to work, and if you don't really know/understand the properties attributes of every widget then you will be in troubles.</p>
"
311616,"<p><code>os.execlp</code> should work. This will search your path for the command. Don't give it any args if they're not necessary:</p>

<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.execlp(""cmd"")

D:\Documents and Settings\Claudiu&gt;Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.

D:\Documents and Settings\Claudiu&gt;
</code></pre>
"
311635,"<p>You need to convert the date time object to a string.</p>

<p>The following code worked for me:</p>

<pre><code>import datetime
collection = []
dateTimeString = str(datetime.date.today())
collection.append(dateTimeString)
print collection
</code></pre>

<p>Let me know if you need any more help.</p>
"
63636,"<p>I really enjoy what I did with my custom hook.  I have it post a message to my campfire account (campfire is a group based app).  It worked out really well. Because I had my clients in there and it could show him my progress.</p>
"
63819,"<p>I find it hard to understand when people flag this as a problem with Python. I took to it immediately and actually find it's one of my favourite 'features' of the language :)</p>

<p>In other languages I have two jobs:
1. Fix the braces so the computer can parse my code
2. Fix the indentation so I can parse my code.</p>

<p>So in Python I have half as much to worry about ;-)</p>

<p>(nb the only time I ever have problem with indendation is when Python code is in a blog and a forum that messes with the white-space but this is happening less and less as the apps get smarter)</p>
"
63943,"<p>As an aside: When using functions instead of methods, you could also use functools.partial:</p>

<pre><code>import functools

def foo(arg, **kwargs):
    ...

bar = functools.partial(foo, ""argvalue"")
</code></pre>

<p>The last line will define a function ""bar"" that, when called, will call foo with the first argument set to ""argvalue"" and all other functions just passed on:</p>

<pre><code>bar(5, myarg=""value"")
</code></pre>

<p>will call</p>

<pre><code>foo(""argvalue"", 5, myarg=""value"")
</code></pre>

<p>Unfortunately that will not work with methods.</p>
"
312368,"<p>I'm new here so I don't know what's the correct way to do it. I want to answer my answers:</p>

<p>The problem with all of the above mentioned ways is that <strong><code>str</code></strong> is considered a sequence (it's iterable, has <code>__getitem__</code>, etc.) yet it's usually treated as a single item.</p>

<p>For example, a function may accept an argument that can either be a filename or a list of filenames. What's the most Pythonic way for the function to detect the first from the latter?</p>

<p>Should I post this as a new question? Edit the original one?</p>
"
160833,"<p>Typically, one follow the conventions used in the language's standard library.</p>
"
211301,"<p>I've had a lot of success using <a href=""http://cython.org/"" rel=""nofollow"">Cython</a>, which is based on and extends pyrex:</p>

<blockquote>
  <p>Cython is a language that makes
  writing C extensions for the Python
  language as easy as Python itself.
  Cython is based on the well-known
  Pyrex, but supports more cutting edge
  functionality and optimizations.</p>
  
  <p>The Cython language is very close to
  the Python language, but Cython
  additionally supports calling C
  functions and declaring C types on
  variables and class attributes. This
  allows the compiler to generate very
  efficient C code from Cython code.</p>
  
  <p>This makes Cython the ideal language
  for wrapping for external C libraries,
  and for fast C modules that speed up
  the execution of Python code.</p>
</blockquote>
"
211304,"<p>You can use <a href=""http://wxpython.org/"" rel=""nofollow"">wxPython</a> for this.</p>

<pre><code>from wx import EmptyIcon
icon = EmptyIcon()
icon.CopyFromBitmap(your_wxBitmap)
</code></pre>

<p>The <a href=""http://docs.wxwidgets.org/stable/wx_wxbitmap.html#wxbitmap"" rel=""nofollow"">wxBitmap</a> can be generated in memory using <a href=""http://docs.wxwidgets.org/stable/wx_wxmemorydc.html#wxmemorydc"" rel=""nofollow"">wxMemoryDC</a>, look <a href=""http://docs.wxwidgets.org/stable/wx_wxdc.html"" rel=""nofollow"">here</a> for operations you can do on a DC.</p>

<p>This icon can then be applied to a wxFrame (a window) or a wxTaskBarIcon using:</p>

<pre><code>frame.SetIcon(icon)
</code></pre>
"
305763,"<p>The standard location for Windows application to store their (permanent) application data is referenced by the <code>%APPDATA%</code> (current user) or <code>%ALLUSERSPROFILE%</code> (all users) environment variables. You can access them using, e.g. (only rudimentary and not very elegant error checking!):</p>

<pre><code>import os
app_path = os.getenv(""APPDATA"") + ""\\MyApplicationData""
try:
    os.mkdir(app_path)
except WindowsError:
    # already exists
</code></pre>

<p>Now you have your own directory for your app. </p>
"
305782,"<p>Have a look here: <a href=""http://en.wikipedia.org/wiki/Environment_variable#User_management_variables"" rel=""nofollow"">http://en.wikipedia.org/wiki/Environment_variable#User_management_variables</a>. Anything that's under the users directory is good. If its for all users, then it should be: %ALLUSERSPROFILE%. If its for a specific user, make sure the permissions are right.</p>

<p>Check out MSDN for more info about other Windows Versions. Environment variables can vary from systems to systems.</p>
"
306936,"<p>You can even pass that when you instantiate your wx.App():</p>

<pre><code>if __name__ == ""__main__"":
    app = wx.App(redirect=False) #or 0
    app.MainLoop()
</code></pre>

<p><a href=""http://wxpython.org/docs/api/wx.App-class.html#__init__"" rel=""nofollow"">wxPython wx.App docs</a></p>
"
307046,"<p>I believe what you are looking for is libwnck</p>
"
67705,"<p><strong>Import package modules at runtime (Python recipe)</strong> </p>

<p><a href=""http://code.activestate.com/recipes/223972/"" rel=""nofollow"">http://code.activestate.com/recipes/223972/</a></p>

<pre><code>###################
##                #
## classloader.py #
##                #
###################

import sys, types

def _get_mod(modulePath):
    try:
        aMod = sys.modules[modulePath]
        if not isinstance(aMod, types.ModuleType):
            raise KeyError
    except KeyError:
        # The last [''] is very important!
        aMod = __import__(modulePath, globals(), locals(), [''])
        sys.modules[modulePath] = aMod
    return aMod

def _get_func(fullFuncName):
    """"""Retrieve a function object from a full dotted-package name.""""""

    # Parse out the path, module, and function
    lastDot = fullFuncName.rfind(u""."")
    funcName = fullFuncName[lastDot + 1:]
    modPath = fullFuncName[:lastDot]

    aMod = _get_mod(modPath)
    aFunc = getattr(aMod, funcName)

    # Assert that the function is a *callable* attribute.
    assert callable(aFunc), u""%s is not callable."" % fullFuncName

    # Return a reference to the function itself,
    # not the results of the function.
    return aFunc

def _get_class(fullClassName, parentClass=None):
    """"""Load a module and retrieve a class (NOT an instance).

    If the parentClass is supplied, className must be of parentClass
    or a subclass of parentClass (or None is returned).
    """"""
    aClass = _get_func(fullClassName)

    # Assert that the class is a subclass of parentClass.
    if parentClass is not None:
        if not issubclass(aClass, parentClass):
            raise TypeError(u""%s is not a subclass of %s"" %
                            (fullClassName, parentClass))

    # Return a reference to the class itself, not an instantiated object.
    return aClass


######################
##       Usage      ##
######################

class StorageManager: pass
class StorageManagerMySQL(StorageManager): pass

def storage_object(aFullClassName, allOptions={}):
    aStoreClass = _get_class(aFullClassName, StorageManager)
    return aStoreClass(allOptions)
</code></pre>
"
213795,"<p>Try calling <a href=""https://docs.python.org/c-api/exceptions.html"" rel=""nofollow""><code>PyErr_Print()</code></a> in the ""<code>if (!py_string)</code>"" clause.  Perhaps the python exception will give you some more information.</p>
"
215083,"<p><code>2008-09-26T01:51:42.000Z</code> is an ISO8601 date and the format can be very diverse. If you want to parse these dates see the python wiki on <a href=""http://wiki.python.org/moin/WorkingWithTime"" rel=""nofollow"">working with time</a>. It contains some useful links to modules.</p>
"
312678,"<p>Print out args and you'll see where the other files are going...</p>

<p>They are being converted to separate arguments in argv, and optparse only takes the first one as the value for the input_filename option.</p>
"
63095,"<p>I do not believe so, as Python is a whitespace-delimited language. Perhaps a text editor or IDE with auto-indentation would be of help. What are you currently using?</p>
"
63122,"<p>You should disable tab characters in your editor when you're working with Python (always, actually, IMHO, but especially when you're working with Python). Look for an option like ""Use spaces for tabs"": any decent editor should have one.</p>
"
63196,"<p>It's possible to write a pre-processor which takes randomly-indented code with pseudo-python keywords like ""endif"" and ""endwhile"" and properly indents things. I had to do this when using python as an ""ASP-like"" language, because the whole notion of ""indentation"" gets a bit fuzzy in such an environment.</p>

<p>Of course, even with such a thing you really ought to indent sanely, at which point the conveter becomes superfluous.</p>
"
63216,"<p>I agree with justin and others -- pick a good editor and use spaces rather than tabs for indentation and the whitespace thing becomes a non-issue.  I only recently started using Python, and while I thought the whitespace issue would be a real annoyance it turns out to not be the case. For the record I'm using emacs though I'm sure there are other editors out there that do an equally fine job.</p>

<p>If you're really dead-set against it, you can always pass your scripts through a pre-processor but that's a bad idea on many levels. If you're going to learn a language, embrace the features of that language rather than try to work around them. Otherwise, what's the point of learning a new language?</p>
"
161546,"<p>Converting a traceback to the exception object wouldn't be too hard, given common exception classes (parse the last line for the exception class and the arguments given to it at instantiation.) The traceback object (the third argument returned by sys.exc_info()) is an entirely different matter, though. The traceback object actually contains the chain of frame objects that constituted the stack at the time of the exception. Including local variables, global variables, et cetera. It is impossible to recreate that just from the displayed traceback. </p>

<p>The best you could do would be to parse each 'File ""X"", line N, in Y:' line and create fake frame objects that are almost entirely empty. There would be very little value in it, as basically the only thing you would be able to do with it would be to print it. What are you trying to accomplish?</p>
"
161858,"<p><code>os.walk</code> is your friend. Look at the example in the Python manual 
(<a href=""https://docs.python.org/2/library/os.html#os.walk"" rel=""nofollow"">https://docs.python.org/2/library/os.html#os.walk</a>) and try to build something from that.</p>

<p>To match ""<code>**/CVS/*</code>"" against a file name you get, you can do something like this:</p>

<pre><code>def match(pattern, filename):
    if pattern.startswith(""**""):
        return fnmatch.fnmatch(file, pattern[1:])
    else:
        return fnmatch.fnmatch(file, pattern)
</code></pre>

<p>In <code>fnmatch.fnmatch</code>, ""*"" matches anything (including slashes).</p>
"
160496,"<p>Jinja is pretty cool and seems to work on Jython.</p>
"
160552,"<p>check <a href=""http://docs.djangoproject.com/en/dev//ref/templates/builtins/#regroup"" rel=""nofollow"">regroup</a>. it's only for templates, but i guess this kind of classification belongs to the presentation layer anyway.</p>
"
63403,"<p>Tabs and spaces confusion can be fixed by setting your editor to use spaces instead of tabs. </p>

<p>To make whitespace completely intuitive, you can use a stronger code editor or an IDE (though you don't need a full-blown IDE if all you need is proper automatic code indenting). </p>

<p>A list of editors can be found in the Python wiki, though that one is a bit too exhausting: 
- <a href=""http://wiki.python.org/moin/PythonEditors"" rel=""nofollow"">http://wiki.python.org/moin/PythonEditors</a></p>

<p>There's already a question in here which tries to slim that down a bit: </p>

<ul>
<li><a href=""http://stackoverflow.com/questions/60784/poll-which-python-ideeditor-is-the-best"">http://stackoverflow.com/questions/60784/poll-which-python-ideeditor-is-the-best</a></li>
</ul>

<p>Maybe you should add a more specific question on that: ""Which Python editor or IDE do you prefer on Windows - and why?""</p>
"
305022,"<p>This is one possibility:</p>

<pre><code>class _C:
    # Do most of the function definitions in here
    @classmethod
    def f(cls):
        return 'boo'

class C(_C):
    # Do the subsequent decoration in here
    v = _C.f()
</code></pre>
"
305241,"<p>I believe you are trying to do this:</p>

<pre><code>class C():
...     class F():
...         def __call__(self,num):
...             return ""&lt;""+str(num)+""&gt;""
...     f=F()
...     v=f(9)
&gt;&gt;&gt; C.v
'&lt;9&gt;'
&gt;&gt;&gt; C.f(25)
'&lt;25&gt;'
&gt;&gt;&gt;
</code></pre>

<p>Maybe there is better or more pythonic solution...</p>

<blockquote>
  <p>""declare a function in a class, use it during its declaration, and also use it later from within the class""</p>
  
  <p>Sorry. Can't be done.</p>
</blockquote>

<p>""Can't be done"" doesn't seem to get along with Python</p>
"
305440,"<pre><code>print [word for word in words if word.startswith(letter)]
</code></pre>
"
158180,"<p>Your operating system probably provides facilities for encrypting data securely. For instance, on Windows there is DPAPI (data protection API). Why not ask the user for their credentials the first time you run then squirrel them away encrypted for subsequent runs?</p>
"
214665,"<p>I personally found <a href=""http://www.cheetahtemplate.org/"" rel=""nofollow"">Cheetah templates</a> to be very designer-friendly. What needed some time was the idea of templates subclassing, and this was something hard to get at the beginning. But a designer creates a full template, duplicating his code... Then you can go clean things up a bit.</p>
"
72192,"<p>Is there a reason you can't override the base class's <code>execute</code> function directly?</p>

<pre><code>class Base(object):
    def execute(self):
        ...

class Derived(Base):
    def execute(self):
        """"""Docstring for derived class""""""
        Base.execute(self)
        ...stuff specific to Derived...
</code></pre>

<p>If you don't want to do the above:</p>

<p>Method objects don't support writing to the <code>__doc__</code> attribute, so you have to change <code>__doc__</code> in the actual function object. Since you don't want to override the one in the base class, you'd have to give each subclass its own copy of <code>execute</code>:</p>

<pre><code>class Derived(Base):
    def execute(self):
        return Base.execute(self)

    class _execute(self):
        """"""Docstring for subclass""""""
        ...

    execute.__doc__= _execute.__doc__
</code></pre>

<p>but this is similar to a roundabout way of redefining <code>execute</code>...</p>
"
302686,"<p>There are of course other projects out there that specifically implement single parts of django. <a href=""http://turbogears.org/"" rel=""nofollow"">TurboGears</a> for example is a collection of several projects that can work by themselves and together form a complete web development framework.</p>

<p>For the db abstraction <a href=""http://www.sqlalchemy.org/"" rel=""nofollow"">SQLAlchemy</a> comes to mind.</p>

<p>Regarding the caching part: I'm not aware of any standalone project that implements a generic caching facility.</p>

<p>On the other hand, it should be fairly easy to implement your own caching, for example by using <a href=""http://docs.python.org/library/pickle.html#module-cPickle"" rel=""nofollow"">pickles</a>. Have a look at <a href=""http://code.activestate.com/recipes/325205/"" rel=""nofollow"">this recipe for a decorator</a> for ideas and google for ""memoize"".</p>

<p>Also keep in mind that your database has its own caching mechanism, so maybe you don't even need to concern yourself with the details.</p>
"
302691,"<p>I tend to prefer a mix-and-match approach to using Python for web programming.  :-)</p>

<p>I don't have a lot of experience with Django, but I'd recommend giving <a href=""http://www.sqlalchemy.org/"" rel=""nofollow"">sqlalchemy</a> a look for the database stuff.  It works well with others and gives you several potential layers of abstraction (so you can go with something basic or tweak the hell out of it if you want).  Plus, you'll already be somewhat familiar with it if you've ever used hibernate/nhibernate.</p>

<p>My favorite part is that it has a lot of options for databases to connect to (most notably SQL Server, which django doesn't have built in last time I checked).</p>

<p>With that said, I'm told that with Django, it's pretty easy to decouple functionality (but never done so myself).</p>
"
303481,"<p>See <a href=""http://djangoplugables.com/"" rel=""nofollow"">django-plugables</a> website, there are few CMS components for Django listed (and some look really good).</p>
"
70896,"<p>I think your code looks like this at the moment:</p>

<pre><code>l = ""a very long ... text"".split()
for e in l:
    cursor.execute(""INSERT INTO yourtable (yourcol) VALUES ('"" + e + ""')"")
</code></pre>

<p>So try to change it into something like this:</p>

<pre><code>l = ""a very long ... text"".split()
for e in l:
    cursor.execute(""INSERT INTO yourtable (yourcol) VALUES (%s)"", (e,))
</code></pre>

<p>so never forget to pass your parameters in the parameters list, then you don't have to care about your quotes and stuff, it is also more secure. You can read more about it at <a href=""http://www.python.org/dev/peps/pep-0249/"" rel=""nofollow"">http://www.python.org/dev/peps/pep-0249/</a></p>

<p>also have a look there at the method .executemany() which is specially designed to execute the same statement multiple times.</p>
"
215257,"<p>In <a href=""http://wxpython.org/"" rel=""nofollow"">wxPython</a> you can use <a href=""http://docs.wxwidgets.org/stable/wx_wxgrid.html#wxgrid"" rel=""nofollow"">wxGrid</a> for this as it supports virtual mode and custom cell renderers.</p>

<p><a href=""http://docs.wxwidgets.org/stable/wx_wxgridtablebase.html#wxgridtablebase"" rel=""nofollow"">This</a> is the minimal interface you have to implement for a wxGrid ""data provider"":</p>

<pre><code>class GridData(wx.grid.PyGridTableBase):
    def GetColLabelValue(self, col):
        pass

    def GetNumberRows(self):
        pass

    def GetNumberCols(self):
        pass

    def IsEmptyCell(self, row, col):
        pass

    def GetValue(self, row, col):
        pass
</code></pre>

<p><a href=""http://docs.wxwidgets.org/stable/wx_wxgridcellrenderer.html#wxgridcellrenderer"" rel=""nofollow"">This</a> is the minimal interface you have to implement for a wxGrid cell renderer:</p>

<pre><code>class CellRenderer(wx.grid.PyGridCellRenderer):
    def Draw(self, grid, attr, dc, rect, row, col, isSelected):
        pass
</code></pre>

<p>You can find a working example that utilizes these classes in <a href=""http://wxpython.org/download.php"" rel=""nofollow"">wxPython docs and demos</a>, it's called Grid_MegaExample.</p>
"
215292,"<p>web.py has made me happy in the past. Consider checking it out.</p>

<p>But it does sound like an architectural redesign might be the proper, though more expensive, solution.</p>
"
215300,"<p>To add to @Jaime Soriano's comment, <a href=""http://genshi.edgewall.org/"" rel=""nofollow"">Genshi</a> is the template engine used in Trac post- 0.11. It's can be used as a generic templating solution, but has a focus on HTML/XHTML. It has automatic escaping for reducing XSS vulnerabilities.</p>
"
156342,"<p>The <a href=""http://docs.python.org/lib/module-time.html"" rel=""nofollow"">time module</a> in python gives you access to the clock() function, which returns time in seconds as a floating point.</p>

<p>Different systems will have different accuracy based on their internal clock setup (ticks per second) but it's generally at least under 20milliseconds, and in some cases better than a few microseconds.</p>


"
156569,"<p>There's a <a href=""http://www.python.org/download/releases/3.0/"" rel=""nofollow"">release candidate for Python 3.0</a> available, so you can always test BeautifulSoup's compatibility yourself :)</p>
"
304202,"<p>never used it myself, but I do follow the ipython mailing list, and there was a <a href=""http://lists.ipython.scipy.org/pipermail/ipython-user/2008-September/thread.html"" rel=""nofollow"">thread</a> a couple months back.</p>

<p>maybe this will help</p>

<p><a href=""http://lists.ipython.scipy.org/pipermail/ipython-user/2008-September/005791.html"" rel=""nofollow"">http://lists.ipython.scipy.org/pipermail/ipython-user/2008-September/005791.html</a></p>

<p>It's also a very responsive mailing list if you run into trouble.</p>
"
304220,"<p>You can use <a href=""http://effbot.org/zone/element-xpath.htm"" rel=""nofollow"">XPath paths</a> on the findall method:</p>

<blockquote>
  <p>The 1.2 release supports simple
  element location paths. In its
  simplest form, a location path is one
  or more tag names, separated by
  slashes (/).</p>
  
  <p>You can also use an asterisk (*)
  instead of a tag name, to match all
  elements at that level. For example,
  */subtag returns all subtag grandchildren.</p>
  
  <p>An empty tag (//) is used to search on
  all levels of the tree, beneath the
  current level. The empty tag must
  always be followed by a tag name or an
  asterisk.</p>
</blockquote>

<pre><code>etree.findall('.//*')
</code></pre>
"
304369,"<p>I'd recommend WSGI configurations; I keep meaning to ditch apache, but there is always some legacy app on the server that seems to require it. Additionally, the WSGI app ecology is very diverse, and it allows neat tricks such as daisy-chaining WSGI ""middleware"" between the server and the app.</p>

<p>However, there are currently <a href=""http://groups.google.com/group/modwsgi/browse_thread/thread/a488d2551c4c7df0"" rel=""nofollow"">known issues with some apps and apache mod_wsgi</a>, particularly some ctypes apps, so be wary if you are trying to run, say, <a href=""http://geodjango.org/"" rel=""nofollow"">geodjango</a> which uses ctypes extensively. I'm currently working around those issues by going back to  fastcgi myself.</p>
"
157362,"<p>Have you tried <a href=""http://www.cheetahtemplate.org/"" rel=""nofollow"">Cheetah</a>, I don't have direct experience running it under Jython but there seem to be some people that do. </p>
"
157656,"<p>Here is a thread about Python timing accuracy:<br><br>
<a href=""http://stackoverflow.com/questions/85451/python-timeclock-vs-timetime-accuracy"">http://stackoverflow.com/questions/85451/python-timeclock-vs-timetime-accuracy</a></p>
"
214912,"<p>Not without modifying the interpreter.  I know a lot of languages in the past several years have been described as ""extensible"", but not in the way you're describing.  You extend Python by adding functions and classes.</p>
"
215720,"<p>Is there any reason </p>

<blockquote>
  <p><code>borderCells = soup.findAll(""td"", style=re.compile(""border-bottom"")})</code></p>
</blockquote>

<p>wouldn't work?  It's kind of hard to figure out exactly what you're asking for, since your description of the original tables is pretty ambiguous, and it's not really clear what allCells is supposed to be either.</p>

<p>I would suggest giving a representative sample of the HTML you're working with, along with the ""correct"" results pulled from that table.</p>
"
215721,"<p>Best case scenario, edit the markdown and just put &lt; > around the URLs. This will make the link clickable. Only problem is it requires educating your users, or whoever writes the markdown.</p>
"
156090,"<p>Underneath the <code>CanvasEntry</code>, there's a regular old <code>gtk.Entry</code> which you need to request the focus as soon as it's made visible.  Here's a modified version of your <code>textClicked</code> function which does just that:</p>

<pre><code>def textClicked(text, event, row):
    input = hippo.CanvasEntry()
    input.set_property('text', text.get_property('text'))
    entry = input.get_property(""widget"")
    def grabit(widget):
        entry.grab_focus()
    entry.connect(""realize"", grabit)
    parent = text.get_parent()
    parent.insert_after(input, text)
    parent.remove(text)
</code></pre>
"
312701,"<p>For a start, look <a href=""http://docs.python.org/tutorial/classes.html#class-objects"" rel=""nofollow"">here</a>.</p>
"
312703,"<p>There are a number of things to point out:</p>

<ol>
<li>All instance methods in Python have an explicit self argument.</li>
<li>Constructors are called <code>__init__</code>.</li>
<li>You cannot overload methods. You can achieve a similar effect by using default method arguments.</li>
</ol>

<p><strong>C++:</strong></p>

<pre><code>class comp  {
  std::string m_name;
  foo(std::string name);
};

foo::foo(std::string name) : m_name(name) {}
</code></pre>

<p><strong>Python:</strong></p>

<pre><code>class comp:
  def __init__(self, name=None):
    if name: self.name = name
    else: self.name = 'defaultName'
</code></pre>
"
312801,"<p>take a look at the <a href=""http://www.python.org/doc/2.6/reference/simple_stmts.html#the-yield-statement"" rel=""nofollow"">yield</a> statement to make generators.</p>

<p>I don't speak any ruby, but it seems like you're looking for this:</p>

<pre><code>def loop():
    for i in xrange(1,5):
        print i
        if i == 2:
            yield


for i in loop():
    print ""pass""
</code></pre>

<p>Edit: I realize this is basically a specialization of real continuations, but it should be sufficient for most purposes. Use <code>yield</code> to return the continuation and the <code>.next()</code> message on the generator (returned by just calling <code>loop()</code>) to reenter.</p>
"
61842,"<p>You could also do it <a href=""http://www.4guysfromrolla.com/webtech/082201-1.shtml"" rel=""nofollow"">this way</a>.</p>
"
313073,"<p>Using <a href=""http://www.fiber-space.de/generator_tools/doc/generator_tools.html#mozTocId557432"" rel=""nofollow""><code>generator_tools</code></a> (to install: '<code>$ easy_install generator_tools</code>'):</p>

<pre><code>from generator_tools import copy_generator

def _callg(generator, generator_copy=None):
    for _ in generator: # run to the end
        pass
    if generator_copy is not None:
        return lambda: _callg(copy_generator(generator_copy))

def loop(c):
    c.next() # advance to yield's expression
    return _callg(c, copy_generator(c))

if __name__ == '__main__':
    def loop_gen():
        i = 1
        while i &lt;= 4:
            print i
            if i == 2:
                yield
            i += 1

    c = loop(loop_gen())
    print(""c:"", c)
    for _ in range(2):
        print(""c():"", c())
</code></pre>

<p>Output:</p>

<pre><code>1
2
3
4
('c:', &lt;function &lt;lambda&gt; at 0x00A9AC70&gt;)
3
4
('c():', None)
3
4
('c():', None)
</code></pre>
"
314000,"<p>What I do nowadays is have some sort of input gathering class/function/thread which will check a list of predefined key->event bindings.</p>

<p>Something like this:</p>

<pre><code>class InputHandler:
    def __init__ (self, eventDispatcher):
        self.keys = {}
        self.eventDispatcher = eventDispatcher
    def add_key_binding (self, key, event):
        self.keys.update((key, event,))
    def gather_input (self):
        for event in pygame.event.get():
            if event.type == KEYDOWN:
                event = self.keys.get(event.key, None)
                if not event is None:
                    self.eventDispatcher.dispatch(event)

....
inputHandler = InputHandler(EventDispatcher)
inputHandler.add_key_binding(K_q, ""quit_event"")
...
inputHandler.gather_input()
....
</code></pre>

<p>It's basically what superjoe30 is doing, except that instead of calling callbacks directly, I add another level of separation by using an event dispatching system, so that any code that cares about the keys being pressed simply listen for that event.</p>

<p>Also, keys can be easily bound to different events, which could be read from a config file or something and any key which is not bound to an event is simply ignored.</p>
"
314030,"<p>This is along the lines of what S.Lott suggested, but without the if/elif/..., which can become increasingly awkward and hard to maintain as the number of subclasses you need to support grows.</p>

<pre><code>class Cat(models.Model):
    def __unicode__(self):
        return u'A Cat!'

class Dog(models.Model):
    def __unicode__(self):
        return u'A Dog!'        

class Eel(models.Model):
    def __unicode__(self):
        return u'An Eel!'        

ANIMALS = {
    'CAT': {'model': Cat, 'name': 'Cat'},
    'DOG': {'model': Dog, 'name': 'Dog'},
    'EEL': {'model': Eel, 'name': 'Eel'},
}
KIND_CHOICES = tuple((key, ANIMALS[key]['name']) for key in ANIMALS)

class Animal(models.Model):
    kind = models.CharField(max_length=3, choices=KIND_CHOICES)
    fk = models.IntegerField()
    def get_kind(self):
        return ANIMALS[self.kind]['model'].objects.get(pk=self.fk)
    def __unicode__(self):
        return unicode(self.get_kind())
</code></pre>

<p>Something very similar can also be done with Django's multi-table inheritance (search Django's docs for it). For example:</p>

<pre><code>ANIMALS = {
    'CAT': {'model_name': 'Cat', 'name': 'Cat'},
    'DOG': {'model_name': 'Dog', 'name': 'Dog'},
    'EEL': {'model_name': 'Eel', 'name': 'Eel'},
}
KIND_CHOICES = tuple((key, ANIMALS[key]['name']) for key in ANIMALS)

class Animal(models.Model):
    kind = models.CharField(max_length=3, choices=KIND_CHOICES)
    def get_kind(self):
        return getattr(self, ANIMALS[self.kind]['model_name'].lower())
    def __unicode__(self):
        return unicode(self.get_kind())

class Cat(Animal):
    def __unicode__(self):
        return u'A Cat!'

class Dog(Animal):
    def __unicode__(self):
        return u'A Dog!'        

class Eel(Animal):
    def __unicode__(self):
        return u'An Eel!'
</code></pre>

<p>I personally prefer the second option, since the subclasses' instances will have all of the fields defined in the parent class auto-magically, which allows for clearer and more concise code. (For instace, if the Animal class had a 'gender' field, then Cat.objects.filter(gender='MALE') would work).</p>
"
163093,"<p>Do you mean <code>urllib2.urlopen</code>?  There is no function called <code>openfile</code> in the <code>urllib2</code> module.</p>

<p>Anyway, use the <code>urllib2.urlparse</code> functions:</p>

<pre><code>&gt;&gt;&gt; from urllib2 import urlparse
&gt;&gt;&gt; print urlparse.urlsplit('http://example.com/somefile.zip')
('http', 'example.com', '/somefile.zip', '', '')
</code></pre>

<p>Voila.</p>
"
209665,"<p>Your best bet is a tool that is specifically geared towards your problem.  If it's processing text files, then Sed, Awk and Perl are the top contenders.  Python is a general-purpose <em>dynamic</em> language.  As with any general purpose language, there's support for file-manipulation, but that isn't what it's core purpose is.  I would consider Python or Ruby if I had a requirement for a dynamic language in particular.</p>

<p>In short, learn Sed and Awk really well, plus all the other goodies that come with your flavour of *nix (All the Bash built-ins, grep, tr and so forth).  If it's text file processing you're interested in, you're already using the right stuff. </p>
"
301293,"<p>What Harley said, except the last point - it's not actually necessary to change the '/'s into '\'s before calling open. Windows is quite happy to accept paths with forward slashes.</p>

<pre><code>infile = open('c:/folder/subfolder/file.txt')
</code></pre>

<p>The only time you're likely to need the string normpathed is if you're passing to to another program via the shell (using <code>os.system</code> or the <code>subprocess</code> module).</p>
"
301538,"<p>either C# or VB.Net using LiNQ to XML. LiNQ to XML is very very powerful and easy to implement</p>
"
301542,"<p>Probably not what you are looking for but you could just split the string:</p>

<pre><code>post[""date""].split()[0]
</code></pre>

<p>would give you <code>'2007-07-18'</code></p>
"
302168,"<p>Check out the Deskbar source code - they do this; afaik, they call out a C library that interacts with X11 to do the job</p>
"
299464,"<p>os.chdir(owd) should do the trick (like you've done when changing to testDir)</p>
"
156339,"<pre><code>import datetime

start = datetime.datetime.now()
do_long_code()
finish = datetime.datetime.now()
delta = finish - start
print delta.seconds
</code></pre>

<p>From midnight:</p>

<pre><code>import datetime

midnight = datetime.datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
now = datetime.datetime.now()
delta = now - midnight
print delta.seconds
</code></pre>
"
216098,"<p>This has likely nothing to do with PyGTK, but rather a general code organization issue. You would probably benefit from applying some MVC (Model-View-Controller) design patterns. See <a href=""http://en.wikipedia.org/wiki/Design_Patterns"" rel=""nofollow"">Design Patterns</a>, for example.</p>
"
216132,"<p>The trick is to join <em>after</em> recursing:</p>

<pre>
def backwards(l):
  if not l:
    return
  x, y = l[0], l[1:]
  return backwards(y) + [x]
</pre>
"
216174,"<p>There is a language based on python called <a href=""http://www.livelogix.net/logix/"" rel=""nofollow"">Logix</a> with which you CAN do such things.  It hasn't been under development for a while, but the features that you asked for <b>do work</b> with the latest version. </p>
"
153822,"<p>Receiving data from a POST depends on the web browser sending data along.  When the web browser receives a redirect, it does not resend that data along.  One solution would be to URL encode the data you want to keep and use that with a GET.  In the worst case, you could always add the data you want to keep to the session and pass it that way.</p>
"
154177,"<p>Python has an embedded GUI toolkit named <a href=""http://wiki.python.org/moin/TkInter"" rel=""nofollow"">TKinter</a> which is based on Tk library from TCL programming language. It is very basic and does not have all the functionality you expect in Windows Forms or GTK for example but if you must have platform independent toolkit I see no other choice taking in mind that you also dont want to grow that much the binary.</p>

<p>Tkinter is not hard at all to use since it doesnt have millions of widgets/controls and options and is the default toolkit included in most python distributions, at least on Windows, OSX and Linux.</p>

<p><a href=""http://www.gtk.org/"" rel=""nofollow"">GTK</a> and <a href=""http://www.trolltech.com"" rel=""nofollow"">QT</a> are prettier and more powerful but they have a one big disadvantage for you: they are heavy and deppend upon third libraries, especially GTK which has a lot of dependencies that makes it a little hard to distribute it embeded in your software.</p>

<p>As for the binary creation I know there is py2exe which converts python code to win32 executable code (.exe's) but im not sure if there is something similar for OSX. Are you worried because people could see the source code or just so you can bundle all in a single package? If you just want to bundle everything you dont need to create a standalone executable, you could easily create an installer:</p>

<p><a href=""http://docs.python.org/dist/built-dist.html"" rel=""nofollow"">Creating distributable in python</a></p>

<p>That's a guide on how to distribute your software when it's done.</p>
"
154467,"<p>As far as I know python will compile all modules you ""import"". However python will NOT compile a python script run using: ""python script.py"" (it will however compile any modules that the script imports).</p>

<p>The real questions is why you don't want python to compile the modules? You could probably automate a way of cleaning these up if they are getting in the way.</p>
"
299780,"<p>There is a nice article which explains how to render the same data by different templates
<a href=""http://www.postneo.com/2006/07/26/acknowledging-the-mobile-web-with-django"" rel=""nofollow"">http://www.postneo.com/2006/07/26/acknowledging-the-mobile-web-with-django</a></p>

<p>You still need to automatically redirect the user to mobile site however and this can be done using several methods (your check_mobile trick will work too)</p>
"
299941,"<p>For an easy access of Java classes from PHP scripts you can use a php-java bridge.</p>

<p>There is a open source solution: <a href=""http://php-java-bridge.sourceforge.net/pjb/"" rel=""nofollow"">http://php-java-bridge.sourceforge.net/pjb/</a>
<br>or a solution from Zend (<a href=""http://www.zend.com/en/products/platform/product-comparison/java-bridge"" rel=""nofollow"">http://www.zend.com/en/products/platform/product-comparison/java-bridge</a>).</p>

<p>I'm more familiar with the later, and it's very easy and intuitive to use.</p>
"
300045,"<p>Do you want an event when your menu is opened? Use <code>EVT_MENU_OPEN(func)</code> (<code>wxMenuEvent</code>). But it's not in particular precise. As the documentation says, it is only sent once if you open a menu. For another event you have to close it and open another menu again. I.e in between, you can open other menus (by hovering other items in the menubar), and the event won't be sent again. </p>

<p>What do you need this for? Probably there is another way to do it, instead of listening for this kind of event. </p>

<p>If you want an event for all items of a menu, use <code>EVT_MENU_RANGE(id1, id2, func)</code> (it's using <code>wxCommandEvent</code>). All IDs starting from <code>id1</code> up to and including <code>id2</code> will be connected to the given event handler. Using a range instead of connecting each item separate will provide for better performance, as there are fewer items in the event-handler list.</p>
"
74138,"<pre><code>if hasattr(obj, '__call__'): pass
</code></pre>

<p>This also fits in better with Python's ""duck typing"" philosophy, because you don't really care <em>what</em> it is, so long as you can call it.</p>

<p>It's worth noting that <code>callable()</code> is being removed from Python and is not present in 3.0.</p>
"
74445,"<p>I think you need to give some more information.  It's not really possible to answer why it's not working based on the information in the question.  The basic documentation for random is at: 
<a href=""https://docs.python.org/library/random.html"" rel=""nofollow"">https://docs.python.org/library/random.html</a></p>

<p>You might check there.  </p>
"
157076,"<p>A small pythonic variation on Ironforggy's shlex answer:</p>

<pre><code>args = dict( arg.split('=', 1) for arg in shlex.split(cmdln_args) )
</code></pre>

<p>oops... - corrected.</p>

<p>thanks,  J.F. Sebastian 
 (got to remember those single argument generator expressions).</p>
"
215546,"<p>This is the ultimate Apache configurator:</p>

<p><a href=""http://perl.apache.org/"" rel=""nofollow"">http://perl.apache.org/</a></p>

<p>exposes many if not all Apache internals to programs written in Perl.</p>

<p>For instance: <a href=""http://perl.apache.org/docs/2.0/api/Apache2/Directive.html"" rel=""nofollow"">http://perl.apache.org/docs/2.0/api/Apache2/Directive.html</a></p>

<p>(Of course that it can do much much more than just configuring it).</p>

<p>On the other hand, it needs to be loaded and runs within Apache, it's not a config file parser/editor.</p>
"
215652,"<p>Try the <a href=""http://search.cpan.org/~nwiger/Apache-ConfigFile-1.18/ConfigFile.pm"" rel=""nofollow"">Apache::ConfigFile Perl module</a>.</p>
"
160916,"<blockquote>
  <p>I've tried adding the TechInline class to the inlines list, but that causes a</p>
  
  <p>'TechInLine' not defined</p>
</blockquote>

<p>Is that a straight copy-paste? It looks like you just made a typo -- try <code>TechInline</code> instead of <code>TechInLine</code>.</p>

<p>If your syncdb didn't create the proper table, you can do it manually. Execute this command:</p>

<pre><code>python manage.py sqlreset &lt;myapp&gt;
</code></pre>

<p>And look for the definition for the <code>projects_project_techs</code> table. Copy and paste it into the client for your database.</p>
"
161372,"<p>If your problem has anything at all to do with web scraping, I recommend looking at <a href=""http://search.cpan.org/perldoc?Web::Scraper"" rel=""nofollow"">Web::Scraper</a> , which provides easy element selection via XPath respectively CSS selectors. I have a (German) <a href=""http://datenzoo.de/pub/gpw2008/web-scraper/web-scraper-talk.html"" rel=""nofollow"">talk on Web::Scraper</a> , but if you run it through babelfish or just look at the code samples, that can help you to get a quick overview of the syntax.</p>

<p>Hand-parsing HTML is onerous and won't give you much over using one of the premade HTML parsers. If your HTML is of very limited variation, you can get by by using clever regular expressions, but if you're already breaking out hard-core parser tools, it sounds as if your HTML is far more regular than what is sane to parse with regular expressions.</p>
"
60563,"<p>This could be an oversimplification, i don't think it would be a good idea to try to make a general purpose ui library this way. On the other hand you could use this approach (metaclasses and friends) to simplify the definition of certain classes of user interfaces for an existing ui library and depending of the application that could actually save you a significant amount of time and code lines.</p>
"
60630,"<p>I use <a href=""http://selenium-rc.openqa.org/python.html"" rel=""nofollow"">Selenium RC</a>. All my tests are written in Python and are run with test suite.</p>

<p>One minor thing is that You either have to start selenium manually and point Your tests to it or start selenium from test suite which requires little bit of coding. But it's doable.</p>

<p>Generally I'm very pleased with this solution.</p>
"
60692,"<p>TCP sockets to localhost FTW.</p>
"
314751,"<p>First, we need a function to compute intersection of two dictionaries:</p>

<pre><code>def IntersectDicts( d1, d2 ) :
    return dict(filter(lambda (k,v) : k in d2 and d2[k] == v, d1.items()))
</code></pre>

<p>Then we can use it to process any number of dictionaries:</p>

<pre><code>result = reduce(IntersectDicts, MyList)
</code></pre>
"
315387,"<p>Did you forget to specify the IMAP host and port? Use something to the effect of:</p>

<pre><code>M = imaplib.IMAP4_SSL( 'imap.gmail.com' )
</code></pre>

<p>or, </p>

<pre><code>M = imaplib.IMAP4_SSL()
M.open( 'imap.gmail.com' )
</code></pre>
"
315404,"<ol>
<li><p>Read about the <a href=""http://www.python.org/doc/2.5.2/lib/module-re.html"" rel=""nofollow"">RE</a> pattern's <code>match</code> method.   </p></li>
<li><p>Read all answers to <a href=""http://stackoverflow.com/questions/296173/how-do-i-copy-files-with-specific-file-extension-to-a-folder-in-my-python-versi"">How do I copy files with specific file extension to a folder in my python (version 2.5) script</a>?</p></li>
<li><p>Pick one that uses <code>fnmatch</code>.  Replace <code>fnmatch</code> with <code>re.match</code>.  This requires careful thought.  It's not a cut-and-paste.</p></li>
<li><p>Then, ask specific questions.</p></li>
</ol>
"
315786,"<p>Further to the given answers, note that you may want to special case the empty list case as ""<code>where rec_id in ()</code>"" is not valid SQL, so you'll get an error.</p>

<p>Also be very careful of building SQL manually like this, rather than just using automatically escaped parameters.  For a list of integers, it'll work, but if you're dealing with strings received from user input, you open up a huge SQL injection vulnerability by doing this.</p>
"
315881,"<p>Why do you feel that it needs to be synchronous?</p>

<p>If you want to ensure that only one of these is happening at a time, invoke all of the calls through a DeferredSemaphore so you can rate limit the actual invocations (to any arbitrary value).</p>

<p>If you want to be able to run multiple streams of these at different times, but don't care about concurrency limits, then you should at least separate reactor startup and teardown from the invocations (the reactor should run throughout the entire lifetime of the process).</p>

<p>If you just can't figure out how to express your application's logic in a reactor pattern, you can use deferToThread and write a chunk of purely synchronous code -- although I would guess this would not be necessary.</p>
"
59662,"<p>Are you talking about doing this?</p>

<pre><code>&gt;&gt;&gt; a = [ ['a', 'b'], ['c', 'd'] ]
&gt;&gt;&gt; a[1]
['c', 'd']
&gt;&gt;&gt; a[1][1]
'd'
</code></pre>
"
59778,"<p>Would something like this work?</p>

<pre><code>from random import randint    

mcworks = []

for n in xrange(NUM_ITERATIONS):
    mctest = [randint(0, 100) for i in xrange(5)]
    if sum(mctest[:3])/3 == mcavg[2]:
        mcworks.append(mctest) # mcavg is real data
</code></pre>

<p>In the end, you are left with a list of valid <code>mctest</code> lists.</p>

<p>What I changed:</p>

<ul>
<li>Used a <a href=""http://docs.python.org/tut/node7.html#SECTION007140000000000000000"" rel=""nofollow"">list comprehension</a> to build the data instead of a for loop</li>
<li>Used <code>random.randint</code> to get random integers</li>
<li>Used <a href=""http://docs.python.org/tut/node5.html"" rel=""nofollow"">slices</a> and <code>sum</code> to calculate the average of the first three items</li>
<li>(To answer your actual question :-) ) Put the results in a list <code>mcworks</code>, instead of creating a new variable for every iteration</li>
</ul>
"
164272,"<p>Wow, there are a lot of questions in there:</p>

<ul>
<li><p>It is possible to run the bytecode (.pyc) file directly from the Python interpreter, but I haven't seen any bytecode obfuscation tools available.</p></li>
<li><p>I'm not aware of any ""all in one"" deployment solution, but:</p>

<ul>
<li><p>For Windows you could use NSIS(<a href=""http://nsis.sourceforge.net/Main_Page"" rel=""nofollow"">http://nsis.sourceforge.net/Main_Page</a>).  The problem here is that while OSX/*nix comes with python, Windows doesn't.  If you're not willing to build a binary with py2exe, I'm not sure what the licensing issues would be surrounding distribution of the Python runtime environment (not to mention the technical ones).</p></li>
<li><p>You could package up the OS X distribution using the ""bundle"" format, and *NIX has it's own conventions for installing software-- typically a ""make install"" script.</p></li>
</ul></li>
</ul>

<p>Hope that was helpful.</p>
"
216603,"<p>I've just trimmed the python a bit here:</p>

<pre><code>r=range(81);s=range(1,10)
def R(A):
    z={}
    for i in r:
        if A[i]!=0:continue
        h={}
        for j in r:h[A[j]if j/9==i/9 or j%9==i%9 or j/27==i/27 and j%9/3==i%9/3 else 0]=1
        z[9-len(h)]=h,i
    for l,(h,i)in sorted(z.items(),cmp,lambda x:x[0]):
        for j in s:
            if j not in h:
                A[i]=j
                if R(A):return A
        A[i]=0;return[]
    return A

print R(map(int, ""080007095010020000309581000500000300400000006006000007000762409000050020820400060""))
</code></pre>

<p>This is a hefty 410 characters, 250 if you don't count whitespace. If you just turn it into perl you'll undoubtedly be better than mine!</p>
"
216653,"<p>I develop with django. The production server we have is remote, so it's a pain to be using it for development. Thus, at first, I created a vm and tried to match as closely as I could the environment of the prod server. At some point that vm got hosed (due to an unrelated incident). I took stock of the situation at that time and realized there really was no good reason to be using a customized vm for development. Since the resources available to the app weren't the same as the prod server, it was no good for timing queries anyway (in an absolute sense).</p>

<p>That said, I now use django's built in dev server with sqlite for development, and apache/wsgi and postgresql for production. As long as the python dependencies are met on both sides, it's 100% compatible. The only potential problem would be writing raw sql instead of using the orm.</p>
"
299278,"<p>Just for the record, this is what my code looks like now:  </p>

<pre><code>from lxml import etree

try:
    parser = etree.XMLParser(dtd_validation=True)
    domTree = etree.parse(myXMLFileName, parser=parser)
except etree.XMLSyntaxError, e:
    return e.args[0]
</code></pre>
"
217978,"<p>.replacing() each of the wildcards is the quick way, but what if the wildcarded string contains other regex special characters? eg. someone searching for 'my.thing*' probably doesn't mean that '.' to match any character. And in the worst case things like match-group-creating parentheses are likely to break your final handling of the regex matches.</p>

<p>re.escape can be used to put literal characters into regexes. You'll have to split out the wildcard characters first though. The usual trick for that is to use re.split with a matching bracket, resulting in a list in the form [literal, wildcard, literal, wildcard, literal...].</p>

<p>Example code:</p>

<pre><code>wildcards= re.compile('([?*+])')
escapewild= {'?': '.', '*': '.*', '+': '.+'}

def escapePart((parti, part)):
    if parti%2==0: # even items are literals
        return re.escape(part)
    else: # odd items are wildcards
        return escapewild[part]

def convertWildcardedToRegex(s):
    parts= map(escapePart, enumerate(wildcards.split(s)))
    return '^%s$' % (''.join(parts))
</code></pre>
"
78968,"<p>You could be using a class as class generator. Like (in some off the cuff code :)</p>

<pre><code>class gen(object):
    class base_1(object): pass
    ...
    class base_n(object): pass

    def __init__(self, ...):
        ...
    def mk_cls(self, ..., type):
        '''makes a class based on the type passed in, the current state of
           the class, and the other inputs to the method'''
</code></pre>

<p>I feel like when you need this functionality it will be very clear to you. If you don't need to be doing something similar than it probably isn't a good use case.</p>
"
77962,"<p>via the <code>__table__</code> attribute on your declarative class</p>
"
296292,"<p>They're essentially the same. The Python interpreter will only load a used module <em>once</em>, no matter how many times you import it. Changing the location of the import statement only has an effect on where the name is bound -- for example, if your <code>import</code> statement is inside a function, the name can only be used in that function.</p>

<p>Generally, though, imports are usually done as close to the ""top"" of a file as possible.</p>
"
296620,"<p>This will walk a tree with sub-directories. You can do an os.path.isfile check to make it a little safer.</p>

<pre><code>for root, dirs, files in os.walk(srcDir):
    for file in files:
    	if file[-4:].lower() == '.jpg':
    		shutil.copy(os.path.join(root, file), os.path.join(dest, file))
</code></pre>
"
217304,"<p>I got an answer regarding mouse-clicks suggesting to use <a href=""http://www.cs.unc.edu/Research/assist/developer.shtml"" rel=""nofollow"">pyHook</a>:</p>

<p><a href=""http://stackoverflow.com/questions/165495/detecting-mouse-clicks-in-windows-using-python"">http://stackoverflow.com/questions/165495/detecting-mouse-clicks-in-windows-using-python</a></p>

<p>Here's some other code I did to detect mouse-position via ctypes:
<a href=""http://monkut.webfactional.com/blog/archive/2008/10/2/python-win-mouse-position"" rel=""nofollow"">http://monkut.webfactional.com/blog/archive/2008/10/2/python-win-mouse-position</a></p>

<p>A more round-about method to accomplish this would be via screen capture and comparing any change in images using PIL.</p>

<p><a href=""http://www.wellho.net/forum/Programming-in-Python-and-Ruby/Python-Imaging-Library-PIL.html"" rel=""nofollow"">http://www.wellho.net/forum/Programming-in-Python-and-Ruby/Python-Imaging-Library-PIL.html</a></p>
"
153028,"<p>You can also use pre_save django signal to populate slug outside of django admin code.
See <a href=""http://docs.djangoproject.com/en/dev/ref/signals/"" rel=""nofollow"">Django signals documentation</a>.</p>

<p>Ajax slug uniqueness validation will be useful too, see <a href=""http://lethain.com/entry/2008/sep/26/as-you-type-slug-uniqueness-validation/"" rel=""nofollow"">As-You-Type Slug Uniqueness Validation @ Irrational Exuberance</a></p>
"
153284,"<p>You cannot. The inspect module, which is what 'pydoc' and 'help()' use, has no way of figuring out what the exact signature of a C function is. The best you can do is what the builtin functions do: include the signature in the first line of the docstring:</p>

<pre><code>&gt;&gt;&gt; help(range)
Help on built-in function range in module __builtin__:

range(...)
    range([start,] stop[, step]) -&gt; list of integers

...
</code></pre>

<p>The reason random.shuffle's docstring looks ""correct"" is that it isn't a C function. It's a function written in Python.</p>
"
153339,"<p>I see your comment to @Johan Buret about the DN not fixing your problem, but I also believe that is what you should look into.</p>

<p>Given your example, the DN for the default administrator account in AD will be:
cn=Administrator,cn=Users,dc=mydomain,dc=co,dc=uk - please try that.</p>
"
297444,"<p>Some (many? most?) compression algorithms are based on looking at redundancies across the <em>entire</em>  file.</p>

<p>Some compression libraries will choose between several compression algorithms based on which works best on the file.</p>

<p>I believe the ZipFile module does this, so it wants to see the entire file, not just pieces at a time.</p>

<p>Hence, it won't work with generators or files to big to load in memory. That would explain the limitation of the Zipfile library.</p>
"
297747,"<p>Reasoning about a system of this complexity will rarely produce the right answer.  Measure the results, and use the setting that runs the fastest.  If as you say, testing can't measure the difference in various settings of setcheckinterval, then why bother changing it?  Only measurable differences are interesting.   If your test run is too short to provide meaningful data, then make the run longer until it does.</p>
"
77174,"<p>It's about the same. The difference shouldn't be large enough to be the reason to pick one or the other. Don't try to compare them by writing your own tiny benchmarks (<code>""hello world""</code>) because you will probably not have results that are representative of a real web site generating a more complex page.</p>
"
77220,"<p>PHP and Python are similiar enough to not warrent any kind of switching.</p>

<p>Any performance improvement you might get from switching from one language to another would be vastly outgunned by simply not spending the money on converting the code (you don't code for free right?) and just buy more hardware.</p>
"
154474,"<p>You could make the directories that your modules exist in read-only for the user that the Python interpreter is running as.</p>

<p>I don't think there's a more elegant option. <a href=""http://www.python.org/dev/peps/pep-0304/"" rel=""nofollow"">PEP 304</a> appears to have been an attempt to introduce a simple option for this, but it appears to have been abandoned.</p>

<p>I imagine there's probably some other problem you're trying to solve, for which disabling .py[co] would appear to be a workaround, but it'll probably be better to attack whatever this original problem is instead.</p>
"
216386,"<p>""holds the primary application class (most functional routines)""</p>

<p>As in singular -- one class?</p>

<p>I'm not surprised that the <strong>One Class Does Everything</strong> design isn't working.  It might not be what I'd call object-oriented.   It doesn't sound like it follows the typical MVC design pattern if your functionality is piling up in a single class.</p>

<p>What's in this massive class?  I suggest that you can probably refactor this into pieces.  You have two candidate dimensions for refactoring your application class -- if, indeed, I've guessed right that you've put everything into a single class.</p>

<ol>
<li><p>Before doing anything else, refactor into components that parallel the Real World Entities.  It's not clear what's in your ""state.py"" -- wether this is a proper model of real-world entities, or just mappings between persistent storage and some murky data structure in the application.  Most likely you'd move processing out of your application and into your model (possibly state.py, possibly a new module that is a proper model.)</p>

<p>Break your model into pieces.  It will help organize the control and view elements.  The most common MVC mistake is to put too much in control and nothing in the model.</p></li>
<li><p>Later, once your model is doing most of the work, you can look at refactor into components that parallel the GUI presentation.  Various top-level frames, for example, should probably have separate cotrol objects.  It's not clear what's in ""GUI.py"" -- this might be a proper view.  What appears to be missing is a Control component.</p></li>
</ol>
"
216495,"<p>Generally, they are same in terms of the settings which are required to run the applications which include the environment setting. <br>
However, the clients genereally have dev systems which are less powerful in terms of the processing power and other h/w resources. I have seen using them virtual servers in dev evironment since they generally have multiple projects going on in parallel an this helps them reducing the cost.</p>
"
78459,"<p>There is also the commands module:</p>

<pre><code>import commands

status, output = commands.getstatusoutput(""gvimdiff &lt;(hg cat file.txt) file.txt"")
</code></pre>

<p>There is also the popen set of functions, if you want to actually grok the data from a command as it is running.</p>
"
78923,"<p>This is actually an example in the <a href=""https://docs.python.org/2.4/lib/node242.html"" rel=""nofollow"">docs</a>:</p>

<pre><code>p1 = Popen([""dmesg""], stdout=PIPE)
p2 = Popen([""grep"", ""hda""], stdin=p1.stdout, stdout=PIPE)
output = p2.communicate()[0]
</code></pre>

<p>which means for you:</p>

<pre><code>import subprocess
import sys

file = sys.argv[1]
p1 = Popen([""hg"", ""cat"", file], stdout=PIPE)
p2 = Popen([""gvimdiff"", ""file.txt""], stdin=p1.stdout, stdout=PIPE)
output = p2.communicate()[0]
</code></pre>

<p>This removes the use of the linux-specific /proc/self/fd bits, making it probably work on other unices like Solaris and the BSDs (including MacOS) and maybe even work on Windows.</p>
"
152094,"<p>Check out the <a href=""http://www.devx.com/opensource/Article/37773/1954"" rel=""nofollow""><code>win32gui</code> module</a> in the Windows extensions for Python. It may provide some of the functionality you're looking for.</p>
"
152245,"<p>you should make a character class that would include the extra characters.  For example:</p>

<pre><code>split=re.compile('[\w&amp;;]+')
</code></pre>

<p>This should do the trick.  For your information</p>

<ul>
<li><code>\w</code> (lower case 'w') matches word characters (alphanumeric)</li>
<li><code>\W</code> (capital W) is a negated character class (meaning it matches any non-alphanumeric character)  </li>
<li><code>*</code> matches 0 or more times and <code>+</code> matches one or more times, so <code>*</code> will match anything (even if there are no characters there).</li>
</ul>
"
209051,"<p>File a bug report.</p>

<p>EDIT: I'm serious. Leaving zombies behind is a bug, and there is almost certainly nothing you can do from within Python.</p>

<p>Upgrade to the latest versions, look for bug reports, post on the mailing list, switch to another product.</p>
"
58990,"<p>Maybe not as slick as the Ruby version, but how about something like this:</p>

<pre><code>from Boots import App, Para, Button, alert

def Shoeless(App):
    t = Para(text = 'Not Clicked')
    b = Button(label = 'The label')

    def on_b_clicked(self):
        alert('You clicked the button!')
        self.t.text = 'Clicked!'
</code></pre>

<p><a href=""http://stackoverflow.com/questions/58711/how-would-you-design-a-very-pythonic-ui-framework#58917"" rel=""nofollow"">Like Justin said</a>, to implement this you would need to use a custom metaclass on class <code>App</code>, and a bunch of properties on <code>Para</code> and <code>Button</code>. This actually wouldn't be too hard.</p>

<p>The problem you run into next is: how do you keep track of the <em>order</em> that things appear in the class definition? In Python 2.x, there is no way to know if <code>t</code> should be above <code>b</code> or the other way around, since you receive the contents of the class definition as a python <code>dict</code>.</p>

<p>However, in Python 3.0 <a href=""http://www.python.org/dev/peps/pep-3115/"" rel=""nofollow"">metaclasses are being changed</a> in a couple of (minor) ways. One of them is the <code>__prepare__</code> method, which allows you to supply your own custom dictionary-like object to be used instead -- this means you'll be able to track the order in which items are defined, and position them accordingly in the window.</p>
"
316313,"<p>When you say ""preserving value as the user has entered"", why not just store the user-entered value as a string, and pass that to the Decimal constructor?</p>
"
316381,"<p>BASIC persists, particularly in the STAMP implementation, because it is lower level than most other very-easy-to-learn programming languages.  For most embedded BASIC implementations the BASIC instructions map directly to single or groups of machine instructions, with very little overhead.  The same programs written in ""higher level"" languages like Lua or Python would run far slower on those same microcontrollers.</p>

<p>PS: BASIC variants like PBASIC have very little in common with, say, Visual BASIC, despite the naming similarity.  They have diverged in very different ways.</p>
"
317050,"<p>Take a look at <a href=""http://www.python.org/~jeremy/python.html"" rel=""nofollow"">Jeremy Hylton's code</a>, if you need to do a more complex, detailed implementation in Python rather than just calling <code>ping</code>.</p>
"
317171,"<p>It is not an answer to your question, but related:</p>

<pre><code>#!/usr/bin/env python
from numpy import abs, dot, loadtxt, max
from numpy.linalg import solve

data = loadtxt('gauss.dat', delimiter=',')
a, b = data[:,:-1], data[:,-1:]
x = solve(a, b) # here you may use any method you like instead of `solve`
print(x)
print(max(abs((dot(a, x) - b) / b))) # check solution
</code></pre>

<p>Example:</p>

<pre><code>$ cat gauss.dat
4.0, 2.0, 1.0, 11.0
1.0, 5.0, 3.0, 6.0 
2.0, 2.0, 5.0, 7.0

$ python loadtxt_example.py
[[ 2.4]
 [ 0.6]
 [ 0.2]]
0.0
</code></pre>
"
317716,"<p>I think that the header files are shipped with MySQL, just make sure you check the appropriate options when installing (I think that sources and headers are under ""developer components"" in the installation dialog).</p>
"
317923,"<p>Django should be throwing a 404, not a 500, if the URL doesn't match any entries in your URLConf.</p>

<p><a href=""http://docs.djangoproject.com/en/dev/topics/http/urls/#handler404"" rel=""nofollow"">http://docs.djangoproject.com/en/dev/topics/http/urls/#handler404</a></p>

<p>You need to provide a 404 template:</p>

<blockquote>
  <p>If you don't define your own 404 view -- and simply use the default, which is recommended -- you still have one obligation: To create a 404.html template in the root of your template directory. The default 404 view will use that template for all 404 errors.</p>
</blockquote>
"
207502,"<p>I think what you're asking about is being able to insert Python code into text files to be evaluated. There are several modules that already exist to provide this kind of functionality. You can check the Python.org <a href=""http://wiki.python.org/moin/Templating"" rel=""nofollow""><strong>Templating wiki page</strong></a> for a comprehensive list.</p>

<p>Some google searching also turned up a few other modules you might be interested in:</p>

<ul>
<li><a href=""http://py-templates.sourceforge.net/texttemplate/index.html"" rel=""nofollow"">texttemplate</a> (part of py-templates project)</li>
<li><a href=""http://www.embl-heidelberg.de/~chenna/pythonpages/template.html"" rel=""nofollow"">template module</a></li>
</ul>

<p>If you're really looking just into writing this yourself for whatever reason, you can also dig into this Python cookbook solution <a href=""http://code.activestate.com/recipes/52305/"" rel=""nofollow"">Yet Another Python Templating Utility (YAPTU) </a>:</p>

<blockquote>
  <p><em>""Templating"" (copying an input file to output, on the fly inserting Python 
  expressions and statements) is a frequent need, and YAPTU is a small but 
  complete Python module for that; expressions and statements are identified 
  by arbitrary user-chosen regular-expressions.</em></p>
</blockquote>

<p><strong>EDIT</strong>: Just for the heck of it, I whipped up a severely simplistic code sample for this. I'm sure it has bugs but it illustrates a simplified version of the concept at least: </p>

<pre><code>#!/usr/bin/env python

import sys
import re

FILE = sys.argv[1]

handle = open(FILE)
fcontent = handle.read()
handle.close()

for myexpr in re.finditer(r'\${([^}]+)}', fcontent, re.M|re.S):
    text = myexpr.group(1)
    try:
        exec text
    except SyntaxError:
        print ""ERROR: unable to compile expression '%s'"" % (text)
</code></pre>

<p>Tested against the following text: </p>

<pre><code>This is some random text, with embedded python like 
${print ""foo""} and some bogus python like

${any:thing}.

And a multiline statement, just for kicks: 

${
def multiline_stmt(foo):
  print foo

multiline_stmt(""ahem"")
}

More text here.
</code></pre>

<p>Output: </p>

<pre><code>[user@host]$ ./exec_embedded_python.py test.txt
foo
ERROR: unable to compile expression 'any:thing'
ahem
</code></pre>
"
207821,"<p>This isn't what your after, but worth a read: embed Python interpreter in Ruby: this code's pretty old</p>

<p><a href=""http://www.goto.info.waseda.ac.jp/~fukusima/ruby/python/doc/index.html"" rel=""nofollow"">http://www.goto.info.waseda.ac.jp/~fukusima/ruby/python/doc/index.html</a></p>

<p>OR: why, rewriting bytecodes</p>

<p><a href=""http://github.com/why/unholy/tree/master"" rel=""nofollow"">http://github.com/why/unholy/tree/master</a></p>
"
207954,"<p>Other way would be creating your own template loader that loads templates specific to user agent. This is pretty generic technique and can be use to dynamically determine what template has to be loaded depending on other factors too, like requested language (good companion to existing Django i18n machinery).</p>

<p>Django Book has a <a href=""http://www.djangobook.com/en/1.0/chapter10/#cn234"" rel=""nofollow"">section on this subject</a>.</p>
"
163571,"<p>Not sure of where to cite it from, but the following statement in regard to access protection is Pythonic canon: ""We're all consenting adults here"".</p>

<p>Just as Thomas Wouters has stated, a single leading underscore is the idiomatic way of marking an attribute as being a part of the object's internal state.  Two underscores just provides name mangling to prevent easy access to the attribute.</p>

<p>After that, you should just expect that the client of your library won't go and shoot themselves in the foot by meddling with the ""private"" attributes.</p>
"
53303,"<p>I'm a MS-SQL guy myself, and we'd use <a href=""http://msdn.microsoft.com/en-us/library/ms178015.aspx"" rel=""nofollow"">DBCC PINTABLE</a> to keep a table cached, and <a href=""http://msdn.microsoft.com/en-us/library/ms184361.aspx"" rel=""nofollow"">SET STATISTICS IO</a> to see that it's reading from cache, and not disk. </p>

<p>I can't find anything on Postgres to mimic PINTABLE, but <a href=""http://www.postgresql.org/docs/current/static/pgbuffercache.html"" rel=""nofollow"">pg_buffercache</a> seems to give details on what is in the cache - you may want to check that, and see if your table is actually being cached.</p>

<p>A quick back of the envelope calculation makes me suspect that you're paging from disk. Assuming Postgres uses 4-byte integers, you have (6 * 4) bytes per row, so your table is a minimum of (24 * 350,000) bytes ~ 8.4MB. Assuming 40 MB/s sustained throughput on your HDD, you're looking at right around 200ms to read the data (which, <a href=""http://stackoverflow.com/questions/51553/why-are-sql-aggregate-functions-so-much-slower-than-python-and-java-or-poor-man#51668"" rel=""nofollow"">as pointed out</a>, should be where almost all of the time is being spent). </p>

<p>Unless I screwed up my math somewhere, I don't see how it's possible that you are able to read 8MB into your Java app and process it in the times you're showing - unless that file is already cached by either the drive or your OS.</p>
"
51512,"<p>Apart from what Eli Courtwright said:</p>

<ul>
<li>I find iterators in Python more concise. You can use <em>for i in something</em>, and it works with pretty much everything. Yeah, Java has gotten better since 1.5, but for example you can iterate through a string in python with this same construct.</li>
<li>Introspection: In python you can get at runtime information about an object or a module about its symbols, methods, or even its docstrings. You can also instantiate them dynamically. Java has some of this, but usually in Java it takes half a page of code to get an instance of a class, whereas in Python it is about 3 lines. And as far as I know the docstrings thing is not available in Java</li>
</ul>
"
166054,"<p>The windows way of doing it is to handle the <code>WM_LBUTTONDBLCLK</code> message.  </p>

<p>For this to be sent, your window class needs to be created with the <code>CS_DBLCLKS</code> class style.</p>

<p>I'm afraid I don't know how to apply this in Python, but hopefully it might give you some hints.</p>
"
318517,"<p>You might find it easier to ditch FastCGI altogether and just run a python webserver on a localhost port. Then just use mod_rewrite to map the apache urls to the internal webserver.</p>

<p>(I started offering FastCGI at my hosting company and to my surprise, nearly everyone ditched it in favor of just running their own web server on the ports I provided them.)</p>
"
55493,"<p>There's a program for Windows called XKeymacs that allows you to specify emacs keybindings for different programs.  It should work with IDLE.</p>

<p><a href=""http://www.cam.hi-ho.ne.jp/oishi/indexen.html"" rel=""nofollow"">http://www.cam.hi-ho.ne.jp/oishi/indexen.html</a></p>

<p>-Mark</p>
"
319274,"<p>You will want to read and understand <a href=""http://python.org/doc/2.5/ext/ext.html"" rel=""nofollow"">Extending and Embedding the Python Interpreter</a> and the <a href=""http://python.org/doc/2.5/api/api.html"" rel=""nofollow"">Python/C API Reference Manual</a>. This describes how to interface with Python from C. Everything you can do in C you can equivalently do in assembly code too, but you're on your own for this as it is not directly described from a Python perspective.</p>
"
319437,"<p>The usual approach is to uppercase the strings or lower case them for the lookups and comparisons.  For example:</p>

<pre><code>&gt;&gt;&gt; ""hello"".upper() == ""HELLO"".upper()
True
&gt;&gt;&gt;
</code></pre>
"
319970,"<pre><code>def chunk(lst):
    out = []
    for x in xrange(2, len(lst) + 1):
        if not len(lst) % x:
            factor = len(lst) / x
            break
    while lst:
        out.append([lst.pop(0) for x in xrange(factor)])
    return out
</code></pre>
"
206840,"<p>I think the easiest way to understand this (so that you can predict behavior) is to realize that your <code>somedata</code> is an attribute of the class and not the instance of that class if you define it that way.</p>

<p>There is really only one <code>somedata</code> at all times because in your example you didn't assign to that name but used it to look up a dict and then assign an item (key, value) to it. It's a gotcha that is a consequence of how the python interpreter works and can be confusing at first.</p>
"
207059,"<p>Or from emacs (or vim) you could run <code>python -c 'import x'</code> where x is the name of your file minus the <code>.py</code> extension.</p>
"
150541,"<p>I was going to recommend the <code>struct</code> package but then you said you had tried it. Try this:</p>

<pre><code>self.major_version = struct.unpack('H', self.whole_string[3:5])
</code></pre>

<p>The <code>pack()</code> function convers Python data types to bits, and the <code>unpack()</code> function converts bits to Python data types.</p>
"
150639,"<blockquote>
  <p>I am trying to read in an ID3v2 tag header</p>
</blockquote>

<p>FWIW, there's <a href=""http://id3-py.sourceforge.net/"" rel=""nofollow"">already a module</a> for this.</p>
"
79743,"<p>Some general information with regards to automated mail processing...</p>

<p>First, the mail server ""brand"" itself isn't that important for broadcasting or receiving emails.  All of them support the standard smtp / pop3 communications protocol. Most even have IMAP support and have some level of spam filtering.  That said, try to use a current generation email server.</p>

<p>Second, be aware that in an effort to reduce spam a lot of the receiving mail servers out there will simply throw a message away instead of responding back that a mail account doesn't exist.  Which means you may not receive those.</p>

<p>Bear in mind that getting past spam filters is an art.  A number of isp's watch for duplicate messages, messages that <em>look</em> like spam based on keywords or other content, etc.  This is sometimes independent of the quantity of messages sent; I've seen messages with as few as 50 copies get blocked by AOL even though they were legitimate emails.  So, testing is your friend and look into <a href=""http://en.wikipedia.org/wiki/Anti-spam_techniques_(e-mail)"" rel=""nofollow"">this article on wikipedia</a> on anti-spam techniques.  Then make sure your not doing that crap.</p>

<p>**</p>

<p>As far as processing the messages, just remember it's a queued system.  Connect to the server via POP3 to retrieve messages, open it, do some action, delete the message or archive it, and move on.</p>

<p>With regards to bouncebacks, let the mail server do most of the work.  You should be able to configure it to notify a certain email account on the server in the event that it is unable to deliver a message.  You can check that account periodically and process the Non Delivery Reports as necessary.</p>
"
79840,"<p>To avoid any potential confusion, I would like to contrast static variables and immutable objects.</p>

<p>Some primitive object types like integers, floats, strings, and touples are immutable in Python. This means that the object that is referred to by a given name cannot change if it is of one of the aforementioned object types. The name can be reassigned to a different object, but the object itself may not be changed.</p>

<p>Making a variable static takes this a step further by disallowing the variable name to point to any object but that to which it currently points. (Note: this is a general software concept and not specific to Python; please see others' posts for information about implementing statics in Python).</p>
"
295492,"<p>"" I suspect I can improve performance by modifying the sys.setcheckinterval""  </p>

<p>This rarely works.  Correct behavior can't depend on timing -- you can't control timing.  Slight changes on OS, hardware, patch level of Python or phase of the moon will change how your application behaves.</p>

<p>The <a href=""http://www.python.org/doc/2.5.2/lib/module-select.html"" rel=""nofollow"">select</a> module is what you use to wait for I/O's.  Your application can be structured as a main loop that does the select and <a href=""http://www.python.org/doc/2.5.2/lib/module-Queue.html"" rel=""nofollow"">queues</a> up work for other threads.  The other threads are waiting for an entries in their queue of requests to process.</p>
"
295713,"<p>The concept of partial types have already been explained.</p>

<p>This can be done in python. As an example, do the following in a python shell.</p>

<pre><code>class A(object):
    pass

obj = A()

def _some_method(self):
    print self.__class__
A.identify = _some_method

obj.identify()
</code></pre>
"
292505,"<p>Finding the beginning of the line will be really hard.  You'll have to either parse the Python or maybe dig into the compiled byte code.  There are modules in the standard library for parsing Python, but I can tell you from experience that interpreting their output is a black art.  And I'm not sure the compiled byte code has the answer either...</p>
"
83014,"<p>Adobe has two products: Livecycle Data Services ES (LCDS) and BlazeDS. BlazeDS contains a subset of LCDS features and was made open source. Unfortunately NIO channels (RTMP NIO/HTTP) and the DataManagement features are implemented only in LCDS, not BlazeDS.</p>

<p>BlazeDS can be used only to integrate Flex with Java backend. It offers not only remoting services using AMF serialization (as RubyAMF) but also messaging and collaboration features - take a look at this link (<a href=""http://livedocs.adobe.com/blazeds/1/blazeds_devguide/help.html?content=lcoverview_3.html"" rel=""nofollow"">http://livedocs.adobe.com/blazeds/1/blazeds_devguide/help.html?content=lcoverview_3.html</a>). Also I suppose that the support is better compared with RubyAMF/pyAMF.</p>

<p>If your backend is JAVA and you want to use only a free product you can also use GraniteDS or WebORB (BlazeDS competitors)</p>
"
84016,"<p>Maybe you're looking for <code>__len__</code>.  If that method exists, then len(a) calls it:</p>

<pre><code>&gt;&gt;&gt; class Spam:
...   def __len__(self): return 3
... 
&gt;&gt;&gt; s = Spam()
&gt;&gt;&gt; len(s)
3
</code></pre>
"
84038,"<p>Well, there actually is a length method, it is just hidden:</p>

<pre><code>&gt;&gt;&gt; a_list = [1, 2, 3]
&gt;&gt;&gt; a_list.__len__()
3
</code></pre>

<p>The len() built-in function appears to be simply a wrapper for a call to the hidden <strong>len</strong>() method of the object.</p>

<p>Not sure why they made the decision to implement things this way though.</p>
"
293486,"<p>Beautiful Soup works great for this.</p>

<p><a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">http://www.crummy.com/software/BeautifulSoup/</a></p>
"
150711,"<p>A more general (and simpler) solution which allows non-paired quotes.</p>

<ol>
<li>Find quoted string</li>
<li><p>Replace 'x' by 'P' in the string</p>

<pre><code>#!/usr/bin/env python
import re


text = ""axbx'cxdxe'fxgh'ixj'k""


s = re.sub(""'.*?'"", lambda m: re.sub(""x"", ""P"", m.group(0)), text)


print s == ""axbx'cPdPe'fxgh'iPj'k"", s
# -&gt;   True axbx'cPdPe'fxgh'iPj'k
</code></pre></li>
</ol>
"
219990,"<p>There is a bit of a learning curve, but tools like Pamie (Python) or Watir (Ruby) will let you latch into the IE web browser and get at the elements. This turns out to be easier than Mechanize and other HTTP level tools since you don't have to emulate the browser, you just ask the browser for the html elements. And it's going to be way easier than reverse engineering the Javascript/Ajax calls. If needed you can also use tools like beatiful soup in conjunction with Pamie.</p>
"
220150,"<p>If you cannot or don't want to modify the original procedure and have access to the database you can write a simple wrapper procedure that is callable from python.</p>

<p>For example, if you have a stored procedure like:</p>

<pre><code>CREATE PROC GetNextNumber
   @NextNumber int OUTPUT
AS
...
</code></pre>

<p>You could write a wrapper like so which is easily callable from python:</p>

<pre><code>CREATE PROC GetNextNumberWrap
AS
    DECLARE @RNextNumber int
    EXEC GetNextNumber @RNextNumber
    SELECT @RNextNumber
GO
</code></pre>

<p>Then you could call it from python like so:</p>

<pre><code>import pymssql
con = pymssql.connect(...)
cur = con.cursor()
cur.execute(""EXEC GetNextNumberWrap"")
next_num = cur.fetchone()[0]
</code></pre>
"
220537,"<p>It's funny, I just had a need for this the other day and I couldnt find an implementation worth using... so I wrote my own:</p>

<pre><code>import functools

class EnumValue(object):
    def __init__(self,name,value,type):
        self.__value=value
        self.__name=name
        self.Type=type
    def __str__(self):
        return self.__name
    def __repr__(self):#2.6 only... so change to what ever you need...
        return '{cls}({0!r},{1!r},{2})'.format(self.__name,self.__value,self.Type.__name__,cls=type(self).__name__)

    def __hash__(self):
        return hash(self.__value)
    def __nonzero__(self):
        return bool(self.__value)
    def __cmp__(self,other):
        if isinstance(other,EnumValue):
            return cmp(self.__value,other.__value)
        else:
            return cmp(self.__value,other)#hopefully their the same type... but who cares?
    def __or__(self,other):
        if other is None:
            return self
        elif type(self) is not type(other):
            raise TypeError()
        return EnumValue('{0.Name} | {1.Name}'.format(self,other),self.Value|other.Value,self.Type)
    def __and__(self,other):
        if other is None:
            return self
        elif type(self) is not type(other):
            raise TypeError()
        return EnumValue('{0.Name} &amp; {1.Name}'.format(self,other),self.Value&amp;other.Value,self.Type)
    def __contains__(self,other):
        if self.Value==other.Value:
            return True
        return bool(self&amp;other)
    def __invert__(self):
        enumerables=self.Type.__enumerables__
        return functools.reduce(EnumValue.__or__,(enum for enum in enumerables.itervalues() if enum not in self))

    @property
    def Name(self):
        return self.__name

    @property
    def Value(self):
        return self.__value

class EnumMeta(type):
    @staticmethod
    def __addToReverseLookup(rev,value,newKeys,nextIter,force=True):
        if value in rev:
            forced,items=rev.get(value,(force,()) )
            if forced and force: #value was forced, so just append
                rev[value]=(True,items+newKeys)
            elif not forced:#move it to a new spot
                next=nextIter.next()
                EnumMeta.__addToReverseLookup(rev,next,items,nextIter,False)
                rev[value]=(force,newKeys)
            else: #not forcing this value
                next = nextIter.next()
                EnumMeta.__addToReverseLookup(rev,next,newKeys,nextIter,False)
                rev[value]=(force,newKeys)
        else:#set it and forget it
            rev[value]=(force,newKeys)
        return value

    def __init__(cls,name,bases,atts):
        classVars=vars(cls)
        enums = classVars.get('__enumerables__',None)
        nextIter = getattr(cls,'__nextitr__',itertools.count)()
        reverseLookup={}
        values={}

        if enums is not None:
            #build reverse lookup
            for item in enums:
                if isinstance(item,(tuple,list)):
                    items=list(item)
                    value=items.pop()
                    EnumMeta.__addToReverseLookup(reverseLookup,value,tuple(map(str,items)),nextIter)
                else:
                    value=nextIter.next()
                    value=EnumMeta.__addToReverseLookup(reverseLookup,value,(str(item),),nextIter,False)#add it to the reverse lookup, but don't force it to that value

            #build values and clean up reverse lookup
            for value,fkeys in reverseLookup.iteritems():
                f,keys=fkeys
                for key in keys:
                    enum=EnumValue(key,value,cls)
                    setattr(cls,key,enum)
                    values[key]=enum
                reverseLookup[value]=tuple(val for val in values.itervalues() if val.Value == value)
        setattr(cls,'__reverseLookup__',reverseLookup)
        setattr(cls,'__enumerables__',values)
        setattr(cls,'_Max',max([key for key in reverseLookup] or [0]))
        return super(EnumMeta,cls).__init__(name,bases,atts)

    def __iter__(cls):
        for enum in cls.__enumerables__.itervalues():
            yield enum
    def GetEnumByName(cls,name):
        return cls.__enumerables__.get(name,None)
    def GetEnumByValue(cls,value):
        return cls.__reverseLookup__.get(value,(None,))[0]

class Enum(object):
    __metaclass__=EnumMeta
    __enumerables__=None

class FlagEnum(Enum):
    @staticmethod
    def __nextitr__():
        yield 0
        for val in itertools.count():
            yield 2**val

def enum(name,*args):
    return EnumMeta(name,(Enum,),dict(__enumerables__=args))
</code></pre>

<p>Take it or leave it, it did what I needed it to do :)</p>

<p>Use it like:</p>

<pre><code>class Air(FlagEnum):
    __enumerables__=('None','Oxygen','Nitrogen','Hydrogen')

class Mammals(Enum):
    __enumerables__=('Bat','Whale',('Dog','Puppy',1),'Cat')
Bool = enum('Bool','Yes',('No',0))
</code></pre>
"
220892,"<p>You can modify the setup script to copy the files explicitly:</p>

<pre><code>script = ""PyInvaders.py""    	#name of starting .PY
project_name = os.path.splitext(os.path.split(script)[1])[0]
setup(name=project_name, scripts=[script]) #this installs the program

#also need to hand copy the extra files here
def installfile(name):
    dst = os.path.join('dist', project_name)
    print 'copying', name, '-&gt;', dst
    if os.path.isdir(name):
	dst = os.path.join(dst, name)
	if os.path.isdir(dst):
	    shutil.rmtree(dst)
	shutil.copytree(name, dst)
    elif os.path.isfile(name):
	shutil.copy(name, dst)
    else:
	print 'Warning, %s not found' % name

pygamedir = os.path.split(pygame.base.__file__)[0]
installfile(os.path.join(pygamedir, pygame.font.get_default_font()))
installfile(os.path.join(pygamedir, 'pygame_icon.bmp'))
for data in extra_data:
    installfile(data)
</code></pre>

<p>etc... modify to suit your needs, of course.</p>
"
294717,"<p>To print each recipe and its ingredients:</p>

<pre><code>mybook = Book.objects.get(name=""Jason's Cookbook"")
for recipe in mybook.recipe_set.all():
    print recipe.name
    for ingredient in recipe.ingredients:
        print ingredient.text
</code></pre>

<p>And if you just want to get a list of all ingredient objects:</p>

<pre><code>mybook = Book.objects.get(name=""Jason's Cookbook"")
ingredient_list = []
for recipe in mybook.recipe_set.all():
    for ingredient in recipe.ingredients:
        ingredient_list.append(ingredient)
</code></pre>

<p><a href=""http://docs.djangoproject.com/en/dev/topics/db/queries/#related-objects"" rel=""nofollow"">Documentation</a>.</p>
"
219073,"<p>Drop mod_python in favor of <a href=""http://code.google.com/p/modwsgi/"" rel=""nofollow"">mod_wsgi</a> (is used for <a href=""http://wsgi.org/wsgi/"" rel=""nofollow"">wsgi</a>), which does not leave orphaned zombies around afaik.</p>
"
219303,"<p>I think its clear that nobody really understands your question. I would suggest putting it in context and making it shorter. As an example, here's one possible implementation of the state pattern in python, please study it to get an idea.</p>

<pre><code>class State(object):
    def __init__(self, name):
        self.name = name

    def __repr__(self):
        return self.name

class Automaton(object):
    def __init__(self, instance, start):
        self._state = start
        self.transitions = instance.transitions()

    def get_state(self):
        return self._state

    def set_state(self, target):
        transition = self.transitions.get((self.state, target))
        if transition:
            action, condition = transition
            if condition:
                if condition():
                    if action:
                        action()
                    self._state = target
            else:
                self._state = target
        else:
            self._state = target

    state = property(get_state, set_state)

class Door(object):
    open = State('open')
    closed = State('closed')

    def __init__(self, blocked=False):
        self.blocked = blocked

    def close(self):
        print 'closing door'

    def do_open(self):
        print 'opening door'

    def not_blocked(self):
        return not self.blocked

    def transitions(self):
        return {
            (self.open, self.closed):(self.close, self.not_blocked),
            (self.closed, self.open):(self.do_open, self.not_blocked),
        }

if __name__ == '__main__':
    door = Door()
    automaton = Automaton(door, door.open)

    print 'door is', automaton.state
    automaton.state = door.closed
    print 'door is', automaton.state
    automaton.state = door.open
    print 'door is', automaton.state
    door.blocked = True
    automaton.state = door.closed
    print 'door is', automaton.state
</code></pre>

<p>the output of this programm would be:</p>

<pre><code>door is open
closing door
door is closed
opening door
door is open
door is open
</code></pre>
"
164691,"<p>""I know this seems to go against the general idea of private and public""  Not really ""against"", just different from C++ and Java.</p>

<p>Private -- as implemented in C++ and Java is not a very useful concept.  It helps, sometimes, to isolate implementation details.  But it is way overused.</p>

<p>Python names beginning with two <code>__</code> are special and you should not, as a normal thing, be defining attributes with names like this.  Names with <code>__</code> are special and part of the implementation.  And exposed for your use.</p>

<p>Names beginning with one <code>_</code> are ""private"".  Sometimes they are concealed, a little.  Most of the time, the ""consenting adults"" rule applies -- don't use them foolishly, they're subject to change without notice.  </p>

<p>We put ""private"" in quotes because it's just an agreement between you and your users.  You've marked things with <code>_</code>.  Your users (and yourself) should honor that.</p>

<p>Often, we have method function names with a leading <code>_</code> to indicate that we consider them to be ""private"" and subject to change without notice.</p>

<p>The endless getters and setters that Java requires aren't as often used in Python.  Python introspection is more flexible, you have access to an object's internal dictionary of attribute values, and you have first class <a href=""http://docs.python.org/lib/built-in-funcs.html"" rel=""nofollow"">functions</a> like <code>getattr()</code> and <code>setattr()</code>.</p>

<p>Further, you have the <code>property()</code> function which is often used to bind getters and setters to a single name that behaves like a simple attribute, but is actually well-defined method function calls.</p>
"
320286,"<blockquote>
  <p>Is there a way to ensure all created subprocess are dead at exit time of a Python program? By subprocess I mean those created with subprocess.Popen().</p>
</blockquote>

<p>You could violate encapsulation and <em>test</em> that all Popen processes have terminated by doing</p>

<pre><code>subprocess._cleanup()
print subprocess._active == []
</code></pre>

<blockquote>
  <p>If not, should I iterate over all of the issuing kills and then kills -9? anything cleaner?</p>
</blockquote>

<p>You cannot ensure that all subprocesses are dead without going out and killing every survivor. But if you have this problem, it is probably because you have a deeper design problem.</p>
"
52191,"<p>The Threading example from Eli will run the thread, but not do any of the work after that line.  </p>

<p>I'm going to look into the processing module and the subprocess module.  I think the com method I'm running needs to be in another process, not just in another thread.</p>
"
85529,"<p>Short answer: use <strong>time.clock()</strong> for timing in Python.</p>

<p>On *nix systems, clock() returns the processor time as a floating point number, expressed in seconds. On Windows, it returns the seconds elapsed since the first call to this function, as a floating point number.</p>

<p>time() returns the the seconds since the epoch, in UTC, as a floating point number. There is no guarantee that you will get a better precision that 1 second (even though time() returns a floating point number). Also note that if the system clock has been set back between two calls to this function, the second function call will return a lower value.</p>
"
221381,"<p>You can always revert to good old (c)</p>
"
221407,"<p>If two copies fit in memory, then you can easily make a copy.  The second copy is the compressed version.  Sure, you can use numpy, but you can also use the <a href=""http://www.python.org/doc/2.5.2/lib/module-array.html"" rel=""nofollow"">array</a> package.  Additionally, you can treat your big binary object as a string of bytes and manipulate it directly. </p>

<p>It sounds like your file may be <em>REALLY</em> large, and you can't fit two copies into memory.  (You didn't provide a lot of details, so this is just a guess.) You'll have to do your compression in chunks.  You'll read in a chunk, do some processing on that chunk and write it out.  Again, numpy, array or simple string of bytes will work fine.</p>
"
221543,"<p>Waiting for <a href=""http://docs.python.org/dev/3.0/whatsnew/3.0.html"" rel=""nofollow"">Python 3k</a>, where the default encoding of the source will be UTF-8?</p>
"
206076,"<p><a href=""http://www.campfirenow.com/"" rel=""nofollow"">Campfire</a> from 37 signals - the rails guys.</p>

<p><strong>Edit:</strong> It doesn't meet your requirements but it has some great features...</p>
"
322088,"<p>Why are you examining the XML data at all?</p>

<p>The way to test object serialization is to create an instance of the object, serialize it, deserialize it into a new object, and compare the two objects.  When you make a change that breaks serialization or deserialization, this test will fail.</p>

<p>The only thing checking the XML data is going to find for you is if your serializer is emitting a superset of what the deserializer requires, and the deserializer silently ignores stuff it doesn't expect.</p>

<p>Of course, if something else is going to be consuming the serialized data, that's another matter.  But in that case, you ought to be thinking about establishing a schema for the XML and validating it.</p>
"
51132,"<p>If your leaning is to Python, you may be interested in checking out the Python Wrapper for Filemaker.   It provides two way access to the Filemaker data via Filemaker's built-in XML services.   You can find some quite thorough information on this at:</p>

<p><a href=""http://code.google.com/p/pyfilemaker/"" rel=""nofollow"">http://code.google.com/p/pyfilemaker/</a></p>
"
168107,"<p>If it all fits in one file, name the class Options.  Then your users can write:</p>

<pre><code>import myalg

searchOpts = myalg.Options()
searchOpts.whatever()

mySearcher = myalg.SearchAlg(searchOpts)
mySearcher.search(""where's waldo?"")
</code></pre>

<p>Note the Python Style Guide referenced in another answer suggests that packages should be named with all lowercase letters.</p>
"
166539,"<p>You are correct about how Apache handles the processes, and sometimes you'll get served by a different process.  You can see this when you make a change to your site; new processes will pick up the change, but old processes will give you the old site.  To get consistency, you have to restart Apache.</p>

<p>Assuming a restart doesn't fix the problem, I would guess it's something in the ""custom authentication backend"" storing part of the authentication in memory (which won't work very well for a web server).  I would try setting <code>MaxRequestsPerChild</code> to 1 in your Apache config and seeing if you still get the login screen.  If you do, something is being stored in memory, maybe a model not being saved?</p>

<p>Hope that helps!</p>

<p>P.S. Just out of curiosity, why are you using a custom authentication backend and a middleware to ensure the user is logged in?  It seems Django's contrib.auth and @login_required would be easier...</p>
"
167158,"<p>Why not just use the <code>keys</code> method, instead of <code>iterkeys</code>? That way you can do it in one loop because it returns a list, not an iterator.</p>
"
167466,"<p>In unicode it is 00A003. With the Unicode escape it would be u'\u00a003'. </p>

<p>Edit:
@ Patrick McElhaney said you might need to use 00A3.</p>
"
149719,"<p>You should take a look at what the guys at <a href=""http://www.digsby.com/"" rel=""nofollow"">Digsby</a> are doing. Basically, they've written a port of <a href=""http://wxwebkit.wxcommunity.com/"" rel=""nofollow"">WebKit to wxWidgets</a>, and then use WebKit to render the interface, and wxPython for writing the rest of the app. Pretty neat, but <em>very</em> alpha at the moment.</p>
"
85787,"<p>Potentially more efficient: if you're calculating this multiple times, you can speed this up quite a bit by keeping two standing variables  </p>

<pre><code>N  # number of points
sums = dict(x=0,y=0,z=0)  # sums of the locations for each point
</code></pre>

<p>then changing N and sums whenever points are created or destroyed.  This changes things from O(N) to O(1) for calculations at the cost of more work every time a point is created, moves, or is destroyed.   </p>
"
84248,"<p>Dave Webb is correct, and you can see this by adding a print statement:</p>

<pre><code>&gt;&gt;&gt; class X:
...     l = []
...     def __init__(self):
...             print 'inited'
...             self.__class__.l.append(1)
...
</code></pre>

<p>Then as soon as you type the period in <code>X().</code> it prints <code>inited</code> prior to offering you the completion popup.</p>
"
84337,"<p>there is some good info below on why certain things are functions and other are methods.  It does indeed cause some inconsistencies in the language.</p>

<p><a href=""http://mail.python.org/pipermail/python-dev/2008-January/076612.html"" rel=""nofollow"">http://mail.python.org/pipermail/python-dev/2008-January/076612.html</a></p>
"
85271,"<p>I use CherryPy as my web server (which comes bundled with Turbogears), and I simply run multiple instances of the CherryPy web server on different ports bound to localhost.  Then I configure Apache with mod_proxy and mod_rewrite to transparently forward requests to the proper port based on the HTTP request.</p>
"
222769,"<pre><code>sorted(my_tuple, key=lambda tup: tup[1])
</code></pre>

<p>In other words, when comparing two elements of the tuple you're sorting, sort based on the return value of the function passed as the key parameter.</p>
"
204854,"<p>Going to need more data.  Jeff had a few articles on the same problems and the answer was to wait till you hit a performance issue.</p>

<p>to start with - who is hosting and what do they have available ?  what's your in house talent skill sets ?  Are you going to be hiring an outside firm ? what do they recommend ?  brand new project w/ a team willing to learn a new framework ?</p>

<p>2nd thing is to do some mockups - how is the interface going to work.  what data does it need to load and persist ? the idea is to keep your traffic between the web and db side down. e.g. no chatty pages with lots of queries. etc.</p>

<p>Once you have a better idea of the data requirements and flow - then work on the database design.  there are plenty of rules to follow but one of the better ones is to follow normalization rules (yea i'm a db guy why ?)</p>

<p>Now you have a couple of pages build - run your tests. are you having a problem ? Yes, now look at what is it. Page serving or db pulls ?  Measure then pick a course of action.</p>
"
323902,"<p>In some rare situations, you might care what stdin is connected to.  Mostly, you don't care -- you just read stdin.</p>

<p>In <code>someprocess | python myprogram.py</code>, stdin is connected to a pipe; in this case, the stdout of the previous process.  You simply read from <code>sys.stdin</code> and you're reading from the other process.  [Note that in Windows, however, there's still (potentially) a ""CON"" device with a keyboard.  It just won't be <code>sys.stdin</code>.]</p>

<p>In <code>python myprogram.py &lt;someFile</code>, stdin is connected to a file.  You simply read from <code>sys.stdin</code> and you're reading from the file.</p>

<p>In <code>python myprogram.py</code>, stdin is left connected to the console (<code>/dev/ttyxx</code> in *nix).  You simple read from <code>sys.stdin</code> and you're reading from the keyboard.</p>

<p>Note the common theme in the above three cases.  You simply read from <code>sys.stdin</code> and your program's environment defines everything for you.  You don't check ""to see if data is available on stdin for reading"".  It's already available.</p>

<p>Sometimes, you want a keyboard interrupt (or other shenanigans).  Python, BTW, has a keyboard interrupt as a first-class feature of the I/O elements.  Control-C raises an interrupt during I/O (it won't break into a tight loop, but it will signal a program that prints periodically.)</p>

<p>Sometimes you need to find out what kind of file <code>stdin</code> is connected to.</p>

<p>Something like <code>os.isatty( sys.stdin.fileno() )</code>  If <code>sys.stdin</code> is a TTY, you're program was left connected to the windows ""CON"" (the keyboard).  If <code>sys.stdin</code> is not a TTY, it's connected to a file or a pipe.</p>

<p><hr /></p>

<p>Example</p>

<pre><code>Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.

C:\Documents and Settings\slott&gt;python
Python 2.5.2 (r252:60911, Feb 21 2008, 13:11:45) [MSC v.1310 32 bit (Intel)] on
win32
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; import sys
&gt;&gt;&gt; os.isatty( sys.stdin.fileno() )
True
&gt;&gt;&gt;
</code></pre>

<p>The value of <code>True</code> tells me Python is running without a file or pipe attached.  <code>sys.stdin</code> is the keyboard.  Using windows <code>kbhit</code> is needless.</p>

<p>A value of <code>False</code> tells me Python is running with a file or pipe attached.  <code>sys.stdin</code> is NOT the keyboard.  Checking <code>kbhit</code> might be meaningful.  Also, I could open the <code>CON:</code> device and read the keyboard directly, separate from <code>sys.stdin</code>.</p>

<p><hr /></p>

<p>I'm not sure why you need ""to see if data is available on stdin for reading"".  It might help to update your question with additional details of what you're trying to accomplish.</p>
"
324684,"<p>Answering the question in the topic rather than trying to analyze the example...</p>

<p>You really want to use <a href=""http://stackoverflow.com/questions/324132/split-twice-in-the-same-expression#324141"">Florians</a> solution if you want to split paths, but if you promise not to use this for path parsing...</p>

<p>You can use <a href=""https://docs.python.org/library/re.html#module-contents"" rel=""nofollow"">re.split()</a> to split using several separators by or:ing them with a '|', have a look at this:</p>

<pre><code>import re
inFile = ""/adda/adas/sdas/hello.txt""
print re.split('\.|/', inFile)[-2]
</code></pre>
"
47957,"<p>.egg files are basically a nice way to deploy your python application. You can think of it as something like .jar files for Java. </p>

<p>More info <a href=""http://peak.telecommunity.com/DevCenter/PythonEggs"" rel=""nofollow"">here</a>.</p>
"
48214,"<p>Python includes a <a href=""http://www.python.org/doc/lib/module-telnetlib.html"" rel=""nofollow"">telnet client</a>, but not a telnet server.  You can implement a telnet server using <a href=""http://twistedmatrix.com"" rel=""nofollow"">Twisted</a>.  <a href=""http://twistedmatrix.com/pipermail/twisted-python/2004-August/008335.html"" rel=""nofollow"">Here's an example</a>.  As for hooking these things together, that's up to you.</p>
"
203916,"<p>You can read about multithreading in python, and threading in general</p>

<p>Multithreading in Python:
<a href=""http://www.devshed.com/c/a/Python/Basic-Threading-in-Python/"" rel=""nofollow"">http://www.devshed.com/c/a/Python/Basic-Threading-in-Python/</a></p>
"
203921,"<p>If I understand things correctly, Python has something called the GIL (Global Interpreter Lock) that effectively makes it impossible to take advantage of multicores when doing multiple threads in Python.</p>

<p>See eg Guido van Rossum's <a href=""http://www.artima.com/weblogs/viewpost.jsp?thread=214235"" rel=""nofollow"">blog entry</a> on the topic. As far as I know, among the ""mainstream"" languages only C/C++ and Java have effective support for multicores.</p>
"
203933,"<p>Most likely you've seen code which protects against ""extra"" incoming data. This is often due to the possibility of buffer overruns, where the extra data being copied into memory overruns the pre-allocated array and overwrites executable code with attacker code. Code written in languages like C typically has a lot of length checking to prevent this type of attack. Functions such as gets, and strcpy are replaced with their safer counterparts like fgets and strncpy which have a length argument to prevent buffer overruns.</p>

<p>If you use a dynamic language like Python, your arrays resize so they won't overflow and clobber other memory, but you still have to be careful about sanitizing foreign data.</p>

<p>Chat programs likely limit the size of a message for reasons such as database field size. If 80% of your incoming messages are 40 characters or less, 90% are 60 characters or less, and 98% are 80 characters or less, why make your message text field allow 10k characters per message?</p>
"
167998,"<p><code>u'\N{pound sign}'</code></p>

<p>If you are using ipython, put</p>

<p><code>execute pound = u'\N{pound sign}'</code></p>

<p>in your ipythonrc file (in ""Section: Python code to execute"") this way you will always have ""pound"" defined as the pound symbol in the interactive shell.</p>
"
168085,"<p>Just naming it <code>Options</code> should be fine.  The Python standard library generally takes the philosophy that namespaces make it easy and manageable for different packages to have identically named things.  For example, <code>open</code> is both a builtin and a function in the <code>os</code> module, several different modules define an <code>Error</code> exception class, and so on.</p>

<p>This is why it's generally considered bad form to say <code>from some_module import *</code> since it makes it unclear to which <code>open</code> your code refers, etc.</p>
"
289590,"<p>Linking the icons is answered in other answers. Creating the thing is as easy as using <a href=""http://winterdrache.de/freeware/png2ico/"" rel=""nofollow"">png2ico</a>. It creates an ico file from 1 or more png's and handles multiple sizes etc, like:</p>

<pre><code>png2ico myicon.ico logo16x16.png logo32x32.png
</code></pre>

<p>Will create myicon.ico with sizes 16x16 and 32x32. Sizes must be multiples of 8 squares, and no larger than 256x256.</p>
"
289766,"<p>You can't group digits into ""segments"" going from left-to-right.   The <code>range(0,len(),3)</code> is not going to work out well.  You'll have to write the same algorithm for inserting digit separators.  You start from the right, picking off segments of digits.</p>

<p>What's left over (on the left, get it?) will be 1, 2 or 3 digits.  You've got convertTrio and convertDuo, which handle 3 and 2 digits, respectively.  Somewhere in there is a convert one digit function (can't see it).</p>

<p>If it's not homework, then, here's a proper digit clustering algorithm</p>

<pre><code>def segment( n ):
   segList= []
   while len(n) &gt; 3:
       segList.insert( 0, n[-3:] )
       n= n[:-3]
   segList.insert( 0, n )
   return segList
</code></pre>

<p>Edit</p>

<p>To be more Pythonic, package this as a tidy, reusable module.  The stuff inside the <code>if __name__ == ""__main__""</code> does two things, which should be separated.</p>

<p>Your command-line parsing (anything having to do with <code>sys.argv</code> is one thing.  The actual ""convert a number"" function is something else entirely.  You want to look more like this.</p>

<pre><code>if __name__ == ""__main__"":
    import sys
    for number in sys.argv[1:]:
        print number2string( number )
</code></pre>

<p>Then, your <code>number2string</code> function becomes an easily reused piece of this module.</p>
"
87039,"<p>To the best of my understanding, time.clock() has as much precision as your system will allow it.</p>
"
87503,"<p>I must admit I'm a fan of <a href=""http://www.aaronsw.com/2002/xmltramp/"" rel=""nofollow"">xmltramp</a> due to its ease of use.</p>

<p>Accessing the above becomes:</p>

<pre><code>  import xmltramp

  values = xmltramp.parse('''...''')

  def getValues( values, category ):
    cat = [ parent for parent in values['parent':] if parent(name) == category ]
    cat_values = [ child(value) for child in parent['child':] for parent in cat ]
    return cat_values

  getValues( values, ""CategoryA"" )
  getValues( values, ""CategoryB"" )
</code></pre>
"
290706,"<p>Instead of slicing digits, use modular arithmetic to separate the units.  This function will convert a number less than 100 using the given data structures.</p>

<pre><code>def convert(n):
    q, r = divmod(n, 10)
    if q &lt; 2:
    	return words[n]
    result = tens[q-1] # offset because tens is missing first null value
    if r:
    	result += '-' + words[r]
    return result
</code></pre>

<p>Then use convert recursively to support larger numbers, e.g., start with divmod(n, 100) and so on.</p>
"
44794,"<p>Unless I'm missing something, <code>','.join(foo)</code> should do what you're asking for.</p>

<pre><code>&gt;&gt;&gt; ','.join([''])
''
&gt;&gt;&gt; ','.join(['s'])
's'
&gt;&gt;&gt; ','.join(['a','b','c'])
'a,b,c'
</code></pre>

<p>(edit:  and as jmanning2k points out, </p>

<pre><code>','.join([str(x) for x in foo])
</code></pre>

<p>is safer and quite Pythonic, though the resulting string will be difficult to parse if the elements can contain commas -- at that point, you need the full power of the <code>csv</code> module, as Douglas points out in his answer.)</p>
"
45245,"<p>If your asking what I think your asking, you can find them <a href=""http://books.google.com/books?id=vpTAq4dnmuAC&amp;pg=RA1-PA476&amp;lpg=RA1-PA476&amp;dq=Big-O+of+Python+data+structures&amp;source=web&amp;ots=AOM5B5D7yA&amp;sig=deLGb6VrftTpnNYN6fILVbiirXM&amp;hl=en&amp;sa=X&amp;oi=book_result&amp;resnum=7&amp;ct=result#PRA1-PA479,M1"" rel=""nofollow"">Here</a>... page 476 and on.</p>

<p>It's written around optimization techniques for Python; It's mostly Big-O notation of time efficiencies not much memory.</p>
"
45520,"<p>I don't know if this applies for all cases, but on WinXP an .ico can be a bmp of size 16x16, 32x32 or 64x64. Just change the extension to ico from bmp and you're ready to go.</p>
"
325488,"<p>use spawn</p>

<pre><code>import os
os.spawnlp(os.P_WAIT, 'cp', 'cp', 'index.html', '/dev/null')
</code></pre>
"
326275,"<p>You need to create a <em>package</em> to do what you want.  You'd need a directory named <code>idol7stats</code> containing a file called <code>__init__.py</code> and any other library modules to package.  Also, this will affect your scripts' imports; if you put <code>idol7stats.py</code> in a package called <code>idol7stats</code>, then your scripts need to ""<code>import idol7stats.idol7stats</code>"".</p>

<p>To avoid that, you could just rename <code>idol7stats.py</code> to <code>idol7stats/__init__.py</code>, or you could put this line into <code>idol7stats/__init__.py</code> to ""massage"" the imports into the way you expect them:</p>

<pre><code>from idol7stats.idol7stats import *
</code></pre>
"
326537,"<p>Python has some advantages.</p>

<ol>
<li><p>There are several HTTP server frameworks in Python.  Look at the <a href=""http://www.python.org/doc/2.5.2/lib/module-wsgiref.html"" rel=""nofollow"">WSGI reference implementation</a>, and learn how to use the WSGI standard to handle web requests.  It's very clean and extensible.  It takes a little bit of study to see that WSGI is all about adding details to the request until you reach a stage in the processing where it's time to formulate a reply.  </p></li>
<li><p><a href=""http://www.python.org/doc/2.5.2/lib/module-email.html"" rel=""nofollow"">MIME email parsing</a> is pretty straightforward.</p></li>
<li><p>After that, you'll be using site blacklisting and content filtering for your spam detection.  </p>

<ul>
<li><p>A site blacklist can be a big, fancy RDBMS.  Or it can be simple pickled Python Set of domain names and IP addresses.  I recommend a simple pickled set object that lives in memory.  It's fast.  You can have your RESTful service reload this set from  a source file on receipt of some GET request that forces a refresh.</p></li>
<li><p>Text filtering is just hard.  I'd start with <a href=""http://spambayes.sourceforge.net/"" rel=""nofollow"">SpamBayes</a>.</p></li>
</ul></li>
</ol>
"
202421,"<p>You might try <a href=""http://code.google.com/p/pygalaxy/wiki/SWMixer"" rel=""nofollow"" title=""SWMixer"">SWMixer</a>.</p>
"
87684,"<p>Whatever you do, see if you can manage to follow a plan where you do not have to port the application all in one big bang. It is tempting to throw it all away and start from scratch, but if you can manage to do it gradually the mistakes you do will not cost so much and cause so much panic.</p>
"
87726,"<p>My preferred python xml library is <a href=""http://codespeak.net/lxml"" rel=""nofollow"">lxml</a> , which wraps libxml2.<br />
Xpath does seem the way to go here, so I'd write this as something like:</p>

<pre><code>from lxml import etree

def getValues(xml, category):
    return [x.attrib['value'] for x in 
            xml.findall('/parent[@name=""%s""]/*' % category)]

xml = etree.parse(open('filename.xml'))

&gt;&gt;&gt; print getValues(xml, 'CategoryA')
['a1', 'a2', 'a3']
&gt;&gt;&gt; print getValues(xml, 'CategoryB')
['b1', 'b2', 'b3]
</code></pre>
"
88209,"<p>Shell scripts can't modify their enviroment. </p>

<p><a href=""http://tldp.org/LDP/abs/html/gotchas.html"" rel=""nofollow"">http://tldp.org/LDP/abs/html/gotchas.html</a></p>

<blockquote>
  <p>A script may not export variables back to its parent process, the shell, or to the environment. Just as we learned in biology, a child process can inherit from a parent, but not vice versa</p>
</blockquote>

<pre><code>$ cat &gt; eg.sh 
export FOO=""bar"";
^D
$ bash eg.sh 
$ echo $FOO; 

$
</code></pre>

<p>also, the problem is greater, as you have multiple calls of bash </p>

<pre><code>bash 1 -&gt; hg -&gt; bash 2 ( shell script ) 
             -&gt; bash 3 ( env call )
</code></pre>

<p>it would be like thinking I could set a variable in one php script and then magically get it with another simply by running one after the  other. </p>
"
288734,"<p>I run my Python script from a batch file that sets the variables :-)</p>

<pre><code>call ...\vcvarsall.bat
c:\python26\python.exe myscript.py
</code></pre>

<p>But Brett's solution sounds better.</p>
"
288976,"<p>For Ruby, I highly recommend Hpricot that Jb Evain pointed out. If you're looking for a faster libxml-based competitor, Nokogiri (see <a href=""http://tenderlovemaking.com/2008/10/30/nokogiri-is-released/"" rel=""nofollow"">http://tenderlovemaking.com/2008/10/30/nokogiri-is-released/</a>) is pretty good too (it supports both XPath and CSS searches like Hpricot but is faster). There's a basic <a href=""http://github.com/tenderlove/nokogiri/wikis"" rel=""nofollow"">wiki</a> and some <a href=""http://gist.github.com/22176"" rel=""nofollow"">benchmarks</a>.</p>
"
289313,"<p>I ran the code inside Excel VBA.<br>
I am guessing that the following line is failing.<br></p>

<p><code>
Sheets(""CC"").Delete
</code></p>

<p>And that is the reason, you can't give the new sheet same name as existing (non-deleted) sheet.<br> </p>

<p>Put <code> Application.DisplayAlerts = False </code> before <code> Sheets(""CC"").Delete </code> and <br> <code> Application.DisplayAlerts = True </code>  once you are finished with the code.</p>

<p>I haven't used python but it seems the library is swallowing that error for you and letting you go ahead to the next statement.</p>

<p>Hope that helps.</p>
"
289544,"<p>I was searching for this a while ago, and found this: <a href=""http://www.mail-archive.com/pygame-users@seul.org/msg05619.html"" rel=""nofollow"">http://www.mail-archive.com/pygame-users@seul.org/msg05619.html</a></p>

<p>Quote from above link:</p>

<blockquote>
  <p>The setup.py File: PY_PROG =</p>
  
  <p>'trek10.py' APP_NAME = 'Trek_Game'</p>
  
  <p>cfg = {</p>

<pre><code>'name':APP_NAME,
'version':'1.0',
'description':'',
'author':'',
'author_email':'',
'url':'',

'py2exe.target':'',
'py2exe.icon':'icon.ico', #64x64
'py2exe.binary':APP_NAME, #leave off the .exe, it will be added

'py2app.target':'',
'py2app.icon':'icon.icns', #128x128

'cx_freeze.cmd':'~/src/cx_Freeze-3.0.3/FreezePython',
'cx_freeze.target':'',
'cx_freeze.binary':APP_NAME,
}
</code></pre>
  
  <p>--snip--</p>
</blockquote>
"
222263,"<p>Looking at your update, it looks like you need to install <a href=""http://www.cairographics.org/pycairo/"" rel=""nofollow"">Pycairo</a> since you're missing the _cairo module installed as part of Pycairo. See the <a href=""http://www.cairographics.org/download/"" rel=""nofollow"">Pycairo downloads page</a> for instructions on how to obtain/install binaries for Windows.</p>
"
222459,"<p>You can try <em>.Net</em>'s own version, <a href=""http://www.codeplex.com/ironpython"" rel=""nofollow"">IronPython</a>.
It has a <em>VS</em> addon, <a href=""http://www.codeplex.com/IronPythonStudio"" rel=""nofollow"">IronPythonStudio</a>.</p>

<p>Being a <em>.Net</em> language, you can access all the available assemblies, including <a href=""http://msdn.microsoft.com/en-us/office/aa905533.aspx"" rel=""nofollow"">Visual Studio Tools for Office</a>.</p>
"
286680,"<p>XML/JSON and a either a Web Service or directly through a socket.  It is also language and platform independent so if you decide you want to host the python portion on UNIX you can, or if you want to suddenly use Java or PHP or pretty much any other language you can.</p>

<p>As a general rule proprietary protocols/architectures like COM offer more restrictions than they do benefits.  This is why the open specifications appeared in the first place.</p>

<p>HTH</p>
"
286998,"<p>I'd start with the <a href=""http://wiki.python.org/moin/PythonDecoratorLibrary"" rel=""nofollow"">Python Decorator Library</a>.  Much of that is AOP kind of stuff.  </p>
"
147751,"<p>Actually, U+2018 is the Unicode representation of the special character â . If you want, you can convert instances of that character to U+0027 with this code:</p>

<pre><code>text = text.replace (u""\u2018"", ""'"")
</code></pre>

<p>In addition, what are you using to write the file? <code>f1.read()</code> should return a string that looks like this:</p>

<pre><code>'I don\xe2\x80\x98t like this'
</code></pre>

<p>If it's returning <em>this</em> string, the file is being written incorrectly:</p>

<pre><code>'I don\u2018t like this'
</code></pre>
"
224073,"<p>Consider using Ragel <a href=""http://www.complang.org/ragel/"" rel=""nofollow"">http://www.complang.org/ragel/</a></p>

<p>That's what powers mongrel under the hood. Parsing a string multiple times is going to slow things down dramatically. </p>
"
224154,"<p>Maybe you could use the data_files option to setup():</p>

<pre><code>import glob
setup(name='MyApp',
      # other options,
      data_files=[('.', glob.glob('*.dll')),
                  ('.', glob.glob('*.pyd'))],
     )
</code></pre>

<p>data_files should be a list of tuples, where each tuple contains:</p>

<ol>
<li>The target directory.</li>
<li>A list of files to copy.</li>
</ol>

<p>This won't put the files into library.zip, which shouldn't be a problem for dlls, but I don't know about pyd files.</p>
"
146734,"<p>Creating a templating language is all well and good, but shouldn't one of the goals of the templating language be easy readability and efficient parsing? The example you gave seems to be neither.</p>

<p>As Jamie Zawinsky famously said:</p>

<blockquote>
  <p>Some people, when confronted with a
  problem, think ""I know, I'll use
  regular expressions!"" Now they have
  two problems.</p>
</blockquote>

<p>If regular expressions are a solution to a problem you have created, the best bet is not to write a better regular expression, but to redesign your approach to eliminate their use entirely. Regular expressions are complicated, expensive, hugely difficult to maintain, and (ideally) should only be used for working around a problem someone else created.</p>
"
146829,"<p>I would use a template tag outputting data using a template html-file a k a <a href=""http://docs.djangoproject.com/en/dev/howto/custom-template-tags/#inclusion-tags"" rel=""nofollow"">inclusion-tag</a></p>
"
90064,"<p>Please, don't manually parse html in python! There are many better options available; I'd recommend the wonderful <a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">BeautifulSoup</a></p>
"
287751,"<p>+1 on the named pipes but I would also like to add that from your comments it seems that your application is very chatty.  Every time you make a remote call no matter how fast the underlying transport is you have a fixed cost of marshaling the data and making a connection.  You can save a huge amount of overhead if you change the addpoint(lat, long) method to a addpoints(point_array) method.  The idea is similar to why we have database connection pools and http-keep-alive connections.  The less actual calls you make the better.  Your existing COM solution may even be good enough if you can just limit the number of calls you make over it.</p>
"
148455,"<p>I've put together more details on how to use webservices in jython using axis.  Read about it here: <a href=""http://www.fishandcross.com/blog/?p=503"" rel=""nofollow"">How To Script Webservices with Jython and Axis</a>.</p>
"
288030,"<h2>For the characters</h2>

<p>Your terminal most probably uses Unicode (typically UTF-8 encoded) characters, so it's only a matter of the appropriate font selection to see your favorite character. Unicode char U+2588, ""Full block"" is the one I would suggest you use.</p>

<p>Try the following:</p>

<pre><code>import unicodedata
fp= open(""character_list"", ""w"")
for index in xrange(65536):
    char= unichr(index)
    try: its_name= unicodedata.name(char)
    except ValueError: its_name= ""N/A""
    fp.write(""%05d %04x %s %s\n"" % (index, index, char.encode(""UTF-8""), its_name)
fp.close()
</code></pre>

<p>Examine the file later with your favourite viewer.</p>

<h2>For the colors</h2>

<p><a href=""http://www.python.org/doc/2.5.2/lib/module-curses.html"" rel=""nofollow"">curses</a> is the module you want to use. Check this <a href=""http://docs.python.org/howto/curses.html"" rel=""nofollow"">tutorial</a>.</p>
"
288650,"<p>If you're even considering Pyro, check out <a href=""http://rpyc.wikidot.com/"" rel=""nofollow"">RPyC</a> first, and re-consider XML-RPC.</p>

<p>Regarding Twisted: try leaving the reactor up instead of stopping it, and just <code>ClientCreator(...).connectTCP(...)</code> each time.</p>

<p>If you <code>self.transport.loseConnection()</code> in your Protocol you won't be leaving open connections.</p>
"
87543,"<p>You can do this with <a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">BeautifulSoup</a></p>

<pre><code>&gt;&gt;&gt; from BeautifulSoup import BeautifulStoneSoup
&gt;&gt;&gt; soup = BeautifulStoneSoup(xml)
&gt;&gt;&gt; def getValues(name):
. . .      return [child['value'] for child in soup.find('parent', attrs={'name': name}).findAll('child')]
</code></pre>

<p>If you're doing work with HTML/XML I would recommend you take a look at BeautifulSoup. It's similar to the DOM tree but contains more functionality.</p>
"
324721,"<p>Just to complete the answer by Alastair:
There is also the <strong>get</strong> equivalent of <strong>setdefault</strong>, which is called <strong>get</strong> (and not getdefault, as one might think):</p>

<pre><code>myIndex = {}
someId = None
myList = myIndex.get(someId, []) # myList is [] now
</code></pre>
"
46780,"<p>Reference counting is particularly difficult to do efficiently in a multi-threaded environment. I don't know how you'd even start to do it without getting into hardware assisted transactions or similar (currently) unusual atomic instructions.</p>

<p>Reference counting is easy to implement. JVMs have had a lot of money sunk into competing implementations, so it shouldn't be surprising that they implement very good solutions to very difficult problems. However, it's becoming increasingly easy to target your favourite language at the JVM.</p>
"
47212,"<p>If you use <a href=""https://docs.djangoproject.com/en/1.2/topics/http/urls/#naming-url-patterns"" rel=""nofollow"">named url patterns</a> you can do the follwing in your template</p>

<pre><code>{% url create_object %}
</code></pre>
"
92691,"<p><em>The Python Cookbook</em> is absolutely essential if you want to master idiomatic Python. Besides, that's the book that made me fall in love with the language.</p>
"
285516,"<p>I'm not really a Pythonista, but I <em>am</em> a Mac user and I appreciate a good, native interface in the apps I write and use. So, if I were to use Python for a GUI app on the Mac, I'd use PyObjC with Interface Builder and Xcode, rather than a cross-platform solution.</p>
"
92288,"<p>I honestly loved the book <a href=""http://rads.stackoverflow.com/amzn/click/0596009259"" rel=""nofollow"">Programming Python.</a> It has a large assortment of small projects, most of which can be completed in an evening at a leisurely pace.  They get you acquainted with most of the standard library and will likely hold your interest.  Most importantly these small projects are actually useful in a ""day to day"" sense.  The book pretty much only assumes you know and understand the bare essentials of Python as a language, rather than knowledge of it's huge API library.</p>

<p>I think you'll find it'll be well worth working through.</p>
"
203870,"<p>This isn't a feature of Markdown -- what you should do is run a post-processor against the text looking for a URL-like pattern. There's a good example in the <a href=""http://google-app-engine-samples.googlecode.com/svn/trunk/cccwiki/wiki.py"" rel=""nofollow"">Google app engine example code</a> -- see the <code>AutoLink</code> transform.</p>
"
43301,"<p>Using the OpenOffice API, and Python, and <a href=""http://www.pitonyak.org/oo.php"" rel=""nofollow"">Andrew Pitonyak's excellent online macro book</a> I managed to do this. Section 7.16.4 is the place to start.</p>

<p>One other tip to make it work without needing the screen at all is to use the Hidden property:</p>

<pre><code>RO = PropertyValue('ReadOnly', 0, True, 0)
Hidden = PropertyValue('Hidden', 0, True, 0)
xDoc = desktop.loadComponentFromURL( docpath,""_blank"", 0, (RO, Hidden,) )
</code></pre>

<p>Otherwise the document flicks up on the screen (probably on the webserver console) when you open it.</p>
"
43736,"<p>If you've never done any CGI programming before I think it would be worth doing one project - perhaps just a sample play site just for yourself - using the DIY approach.  You'll learn a lot more about how all the various parts work than you would by using a framework.  This will help in you design and debug and so on all your future web applications however you write them.</p>

<p>Personally I now use <a href=""http://www.djangoproject.com/"" rel=""nofollow"">Django</a>.  The real benefit is very fast application deployment.  The object relational mapping gets things moving fast and the template library is a joy to use.  Also the admin interface gives you basic CRUD screens for all your objects so you don't need to write any of the ""boring"" stuff.</p>

<p>The downside of using an ORM based solution is that if you do want to handcraft some SQL, say for performance reasons, it much harder than it would have been otherwise, although still very possible. </p>
"
326700,"<p>An interesting solution could be Ruby.
Simply use XML->Object mappers and then use an object-relational-mapper (ORM) to put it inside a database.
I had to do a short talk on XML Mapping with ruby, you could look at the slides and see what you like best: <a href=""http://www.marc-seeger.de/2008/11/25/ruby-xml-mapping/"" rel=""nofollow"">http://www.marc-seeger.de/2008/11/25/ruby-xml-mapping/</a></p>

<p>As for the ORM: Active Record or Datamapper should be the way to go</p>
"
326726,"<p>ECMAScript handles XML pretty nicely using E4X (""ECMAScript for XML""). This can be seen in Adobe's latest version of ActionScript, version 3. I believe JavaScript 2 (to be released with Firefox 4, I think) will support E4X as well.</p>

<p>Not sure about the support of the standalone JavaScript interpreters (i.e. Rhino, et al) of this, which is what matters most to you I suppose... But if it looks good to you, you can always look up their support for it (and report back to us :-)).</p>

<p>See <a href=""http://en.wikipedia.org/wiki/E4X#Example"" rel=""nofollow"">http://en.wikipedia.org/wiki/E4X#Example</a> for a simple example.</p>
"
326806,"<p>There is a long list of libraries associated with XML processing on the <a href=""http://wiki.python.org/moin/PythonXml"" rel=""nofollow"">Python wiki</a>. Note that a number of them are included in the standard library. Most of them will do what you are looking for:</p>

<blockquote>
  <p>to access certain xml datas from a list object</p>
</blockquote>

<p>which is a bit vague, and perhaps some more concrete use-case might narrow down that list for you.</p>
"
326881,"<pre>
classes = [x for x in globals().values() if isinstance(x, type)]
</pre>
"
326956,"<p>I don't think that there is any chance to access inner() from the extern namespace.</p>

<p>However, in my opinion the fact that you keep inner() nested implies that the only ""contract"" that really matters is outer()'s one. inner() is part of the implementation, and you shouldn't want to test the implementation.
If you really want to test inner(), do extensive tests on outer() with data that will involve all the functionalities of inner().</p>
"
201420,"<p>I get completion for my own modules in my PYTHONPATH or site-packages. I'm not sure what version of the pythoncomplete.vim script you're using, but you may want to make sure it's the latest.</p>

<p>EDIT: Here's some examples of what I'm seeing on my system...</p>

<p>This file (mymodule.py), I puth in a directory in PYTHONPATH, and then in site-packages. Both times I was able to get the screenshot below.</p>

<pre><code>myvar = 'test'

def myfunction(foo='test'):
    pass

class MyClass(object):
    pass
</code></pre>

<p><img src=""http://i437.photobucket.com/albums/qq96/jmcantrell/screenshot.png"" alt=""screenshot"" /></p>
"
170366,"<p>I've used the builtin <a href=""http://www.python.org/doc/2.5.2/lib/module-logging.html"" rel=""nofollow"">Python logging module</a> in (non-web) projects in the past, with success - it should work in a web-hosted environment as well.</p>
"
145632,"<p>As stated, use difflib. Once you have the diffed output, you may find the <a href=""http://en.wikipedia.org/wiki/Levenshtein_distance"" rel=""nofollow"">Levenshtein distance</a> of the different strings as to give a ""value"" of how different they are.</p>
"
90104,"<p>Because of the braces around the anchor tag, that part is interpreted as a capture group. This causes only the capture group to be returned, and not the whole regex match.</p>

<p>Put the entire regex in braces and you'll see the right matches showing up as the first element in the returned tuples.</p>

<p>But indeed, you should use a real parser.</p>
"
90894,"<p>Building on the answers so far:</p>

<p>It's best to use a parsing engine. It can cover a lot of cases and in an elegant way. I've tried <a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">BeautifulSoup</a> and I like it very much. Also easy to use, with a great tutorial.</p>

<p>If sometimes it feels like shooting flies with a cannon you can use a regular expression for quick parsing. If that's what you need here is the modified code that will catch all the headers (even those over multiple lines):</p>

<pre><code>p = re.compile(r'&lt;(h[0-9])&gt;(.+?)&lt;/\1&gt;', re.IGNORECASE | re.DOTALL)
stories = re.findall(p, html)
for i in stories:
	print i
</code></pre>
"
146637,"<p>Never create your own programming language. Ever. (I used to have an exception to this rule, but not any more.)</p>

<p>There is always an existing language you can use which suits your needs better. If you elaborated on your use-case, people may help you select a suitable language.</p>
"
170369,"<p>If you'll use signals you'd be able to update Review score each time related score model gets saved. But if don't need such functionality i don't see any reason to put this into signal, that's pretty model-related stuff.</p>
"
42049,"<p>I find them useful when you always deal with two or more objects as a set.</p>
"
42060,"<p>Tuples and lists have the same uses in general. Immutable data types in general have many benefits, mostly about concurrency issues.</p>

<p>So, when you have lists that are not volatile in nature and you need to guarantee that no consumer is altering it, you may use a tuple.</p>

<p>Typical examples are fixed data in an application like company divisions, categories, etc.  If this data change, typically a single producer rebuilts the tuple.</p>
"
42485,"<p>Open Office has an <a href=""http://api.openoffice.org/"" rel=""nofollow"">API</a></p>
"
327479,"<p>Are you implementing Markovian text generation?</p>

<p>If your chains map 2 words to the probabilities of the third I'd use a dictionary mapping K-tuples to the 3rd-word histogram. A trivial (but memory-hungry) way to implement the histogram would be to use a list with repeats, and then <code>random.choice</code> gives you a word with the proper probability.</p>

<p>Here's an implementation with the K-tuple as a parameter:</p>

<pre><code>import random

# can change these functions to use a dict-based histogram
# instead of a list with repeats
def default_histogram():          return []
def add_to_histogram(item, hist): hist.append(item)
def choose_from_histogram(hist):  return random.choice(hist)

K=2 # look 2 words back
words = ...
d = {}

# build histograms
for i in xrange(len(words)-K-1):
  key = words[i:i+K]
  word = words[i+K]

  d.setdefault(key, default_histogram())
  add_to_histogram(word, d[key])

# generate text
start = random.randrange(len(words)-K-1)
key = words[start:start+K]
for i in NUM_WORDS_TO_GENERATE:
  word = choose_from_histogram(d[key])
  print word,
  key = key[1:] + (word,)
</code></pre>
"
40367,"<p>Launching a Python interpreter instance just to select the right binary to run would be much heavier than you need.  I'd distribute a shell .rc file which provides aliases.</p>

<p>In /shared/bin, you put the various binaries: /shared/bin/toolname-mac, /shared/bin/toolname-debian-x86, /shared/bin/toolname-netbsd-dreamcast, etc.  Then, in the common shared shell .rc file, you put the logic to set the aliases according to platform, so that on OSX, it gets alias toolname=/shared/bin/toolname-mac, and so forth.</p>

<p>This won't work as well if you're adding new tools all the time, because the users will need to reload the aliases.</p>

<p>I wouldn't recommend distributing tools this way, though.  Testing and qualifying new builds of the tools should be taking up enough time and effort that the extra time required to distribute the tools to the users is trivial.  You seem to be optimizing to reduce the distribution time.  Replacing tools that quickly in a live environment is all too likely to result in lengthy and confusing downtime if anything goes wrong in writing and building the tools--especially when subtle cross-platform issues creep in.</p>
"
40721,"<p>If you are running the scripts then you can set your PATH variable to point to a private bin directory first:</p>

<pre><code>$ mkdir ~/bin
$ ln -s `which python2.4` ~/bin/python
$ export PATH=~/bin:$PATH
</code></pre>

<p>Then when you execute your python script it'll use python 2.4. You'll have to change your login scripts to change your PATH.</p>

<p>Alternatively run your python script with the explicit interpreter you want:</p>

<pre><code>$ /path/to/python2.4 &lt;your script&gt;
</code></pre>
"
41555,"<p>If you can hook your authentication into the <a href=""http://www.djangoproject.com/documentation/authentication/#authentication-in-web-requests"" rel=""nofollow"">Django authentication scheme</a> you'll be able to use <code>request.user</code>.</p>

<p>I think this should just be a case of calling <code>authenticate()</code> and <code>login()</code> based on the contents of your Cookie.</p>

<p>Edit: @Staale - I always use the <a href=""http://www.djangobook.com/en/1.0/chapter04/"" rel=""nofollow""><code>locals()</code> trick</a> for my context so all my templates can see <code>request</code> and so <code>request.user</code>.  If you're not then I guess it wouldn't be so straightforward.</p>
"
41560,"<p>@Dave
To use {{user.username}} in my templates, I will then have to use 
requestcontext rather than just a normal map/hash: <a href=""http://www.djangoproject.com/documentation/templates_python/#subclassing-context-requestcontext"" rel=""nofollow"">http://www.djangoproject.com/documentation/templates_python/#subclassing-context-requestcontext</a></p>

<p>So I guess there are no globals that the template engine checks.</p>

<p>But the RequestContext has some prepopulate classes that I can look into to solve my problems. Thanks.</p>
"
200950,"<p>I would use <a href=""http://www.python.org/doc/2.5.2/lib/module-shelve.html"" rel=""nofollow"">shelve</a> or an <a href=""http://www.python.org/doc/2.5.2/lib/module-sqlite3.html"" rel=""nofollow"">sqlite</a> database if I would have to store these setting on the file system. Although, since you are building a website you probably use some kind of database so why not just use that?</p>
"
226711,"<p>I have used Paul McGuire's pyParsing class library and I continue to be impressed by it, in that it's well-documented, easy to get started, and the rules are easy to tweak and maintain. BTW, the rules are expressed in your python code. It certainly appears that the log file has enough regularity to parse each line as a stand-alone unit.</p>
"
226900,"<p>With a little bit of thought it seems like you could get the <a href=""http://blog.doughellmann.com/2007/08/pymotw-shelve.html"" rel=""nofollow"">shelve module</a> to do what you want.</p>
"
144646,"<p>For refactoring: <a href=""http://rope.sourceforge.net/ropevim.html"" rel=""nofollow"">ropevim</a></p>
"
92548,"<p>I found struct.unpack to be a godsend for unpacking binary data formats after I learned of it!</p>
"
92682,"<p>The ""sample"" editor scite uses the bookmark feature to bookmark all the lines that match the search result.</p>
"
94965,"<p>range generates the entire list and returns it.  xrange does not -- it generates the numbers in the list on demand.</p>
"
94966,"<p>xrange uses an iterator (generates values on the fly), range returns a list.</p>
"
145174,"<p>In wxPython there's a plethora of ready-made list and tree controls (CustomTreeCtrl, TreeListCtrl, and others), a mixture of which you can use to create a simple explorer in minutes. The wxPython demo even has a few relevant examples (see the demo of MVCTree).</p>
"
145347,"<p>One of the official Python documents contains details on <a href=""https://docs.python.org/3.6/extending/"" rel=""nofollow"">extending Python using C/C++</a>.
Even without the use of <a href=""http://www.swig.org/"" rel=""nofollow"">SWIG</a>, itâs quite straightforward and works perfectly well on Windows.</p>
"
227255,"<p>Solutions that come to my mind:</p>

<ol>
<li>use <a href=""http://python.net/crew/mhammond/win32/Downloads.html"" rel=""nofollow"">Win32 Python Extensions</a> and call Windows APIs to do that directly</li>
<li>Use a WMI-wrapper for Python</li>
</ol>

<p>(some <a href=""http://www.microsoft.com/technet/scriptcenter/scripts/python/misc/wmi/mswmpy01.mspx?mfr=true"" rel=""nofollow"">WMI interface code</a> for reference)</p>

<p><em>Edit</em>: I assumed your OS was MS Windows :)</p>
"
227306,"<p>It looks like this is a <a href=""http://en.wikipedia.org/wiki/Linear_programming"" rel=""nofollow"">linear programming</a> problem.</p>
"
227788,"<p>If you're looking for the python equivalent of ""perl -pi"", here's a pretty good one:</p>

<pre>
import fileinput
for line in fileinput.input():
   # process line
</pre>

<p>See <a href=""http://www.python.org/doc/2.5.2/lib/module-fileinput.html"" rel=""nofollow"">http://www.python.org/doc/2.5.2/lib/module-fileinput.html</a> for more.</p>

<p>Done this way, you would use your python script in a pipe to create the new file:</p>

<pre>
$ myscript.py infile.txt > outfile.txt
</pre>
"
227850,"<p>Other versions:</p>

<pre><code>def burninate(b):
    c = []
    for i in range(1, 4):
        c.append(b[-i])
    return c
</code></pre>

<pre><code>def burninate(b):
    c = b[-4:-1]
    c.reverse()
    return c
</code></pre>

<p>And someday you will love list comprehensions:</p>

<pre><code>def burninate(b):
    return [b[-i] for i in range(1,4)]
</code></pre>
"
284357,"<pre><code>self.file = open(self.file_name, 'w')</code></pre>

<p>Should be:</p>

<pre><code>self.file = open(self.file_name, 'wb')</code></pre>

<p>In your <code>createSaveFile</code> function, to save the file in binary mode (rather than text mode).  You should also make sure you open the file in binary mode as well (rb).</p>

<p>If you don't use binary mode then Windows will convert all new-lines to \r\n and will effectively corrupt the file (at least as far as other OS's are concerned).</p>
"
284752,"<p>I'd say use the twisted framework for building your http listener.
Twisted supports chunked encoding.</p>

<p><a href=""http://python.net/crew/mwh/apidocs/twisted.web.http._ChunkedTransferEncoding.html"" rel=""nofollow"">http://python.net/crew/mwh/apidocs/twisted.web.http._ChunkedTransferEncoding.html</a></p>

<p>Hope this helps.</p>
"
94510,"<p>You could checkout <a href=""http://pyprocessing.berlios.de/"" rel=""nofollow"">pyprocessing</a> which will be included in the standard library as of 2.6. It allows you to run tasks on multiple processes using an API similar to threading.</p>
"
284869,"<p>Apache 2.2 mod_cgi works fine for me, Apache transparently unchunks the request as it is passed to the CGI application.</p>

<p>WSGI currently disallows chunked requests, and mod_wsgi does indeed block them with a 411 response. It's on the drawing board for WSGI 2.0. But congratulations on finding something that does chunk requests, I've never seen one before!</p>
"
285252,"<p>Python has a very nice httplib module as well as a url module which together will probably accomplish most of what you need (at least with regards to wget functionality).</p>
"
285306,"<p>The exit codes only have meaning as assigned by the script author. The Unix tradition is that exit code 0 means 'success', anything else is failure. The only way to be sure what the exit codes for a given script mean is to examine the script itself.</p>
"
92491,"<p>I'll plug <a href=""http://homepage.mac.com/s_lott/books/python.html"" rel=""nofollow"">Building Skills in Python</a>.   Plus, if you want something more challenging, <a href=""http://homepage.mac.com/s_lott/books/oodesign.html"" rel=""nofollow"">Building Skills in OO Design</a> is a rather large and complex series of exercises.</p>
"
146596,"<p>After futher investigation, turns out it was an issue with how I was importing the views module:</p>

<p><a href=""http://stackoverflow.com/questions/146522/how-do-i-successfully-pass-a-function-reference-to-djangos-reverse-function"">http://stackoverflow.com/questions/146522/how-do-i-successfully-pass-a-function-reference-to-djangos-reverse-function</a></p>

<p>Thanks for the help though, guys: you inspired me to look at it properly.</p>
"
41723,"<p>I would use a dictionary. You can convert the tuple to a dictionary this way:</p>

<pre><code>values = &lt;querycode&gt;
keys = [""jobid"", ""label"", ""username""]
job = dict([[keys[i], values [i]] for i in xrange(len(values ))])
</code></pre>

<p>This will first create an array [[""jobid"", val1], [""label"", val2], [""username"", val3]] and then convert that to a dictionary. If the result order or count changes, you just need to change the list of keys to match the new result.</p>

<p>PS still fresh on Python myself, so there might be better ways off doing this.</p>
"
327601,"<p>You can use if...elif. If you have to choose a number, it would be like this:</p>

<pre><code>n = chosenOption()
if(n == 0):
    doSomething()
elif(n == 1):
    doAnyOtherThing()
else:
    doDefaultThing()
</code></pre>
"
327611,"<p>Have a look at this <a href=""http://www.network-theory.co.uk/docs/pytut/ifStatements.html"" rel=""nofollow"">topic</a> from ""An Introduction to Python"" book. Switch statement is substituted by an if..elif..elif sequence.</p>
"
328002,"<p>This should do what you're asking for:</p>

<pre><code># load the image
image = pygame.image.load(""some_image.png"")

# draw a yellow line on the image
pygame.draw.line(image, (255, 255, 0), (0, 0), (100, 100))
</code></pre>

<p>Typically you don't draw to the original image, since you'll have to reload the image to get the original back (or create a copy of it before you start drawing onto it). Perhaps what you actually need is something more like this:</p>

<pre><code># initialize pygame and screen
import pygame
pygame.init()
screen = pygame.display.set_mode((720, 576))

# Draw the image to the screen
screen.blit(image, (0, 0))

# Draw a line on top of the image on the screen
pygame.draw.line(screen, (255, 255, 255), (0, 0), (50, 50))
</code></pre>
"
328040,"<p>How's this?  (Other than slow.)</p>

<pre><code>counts= [ (c, Item.filter( category=c.id ).count()) for c in Category.objects.all() ]
</code></pre>

<p>It has the advantage of being short, even if it does fetch a lot of rows.</p>

<p><hr /></p>

<p>Edit.</p>

<p>The one query version.  BTW, this is often <em>faster</em> than SELECT COUNT(*) in the database.  Try it to see.</p>

<pre><code>counts = defaultdict(int)
for i in Item.objects.all():
    counts[i.category] += 1
</code></pre>
"
328074,"<p>Please read <a href=""http://www.python.org/dev/peps/pep-0008/"" rel=""nofollow"">PEP8</a>.  You're swaying pretty far from python conventions.</p>

<p>If you want a list of lists of each line split by comma, I'd do this:</p>

<pre><code>l = []
for line in in_file:
    l.append(line.split(','))
</code></pre>

<p>You'll get a newline on each record.  If you don't want that:</p>

<pre><code>l = []
for line in in_file:
    l.append(line.rstrip().split(','))
</code></pre>
"
199791,"<p>This sounds like a potential race condition, in that something like the following can happen:</p>

<ol>
<li>Process A checks to see if the directory exists (it doesn't yet).</li>
<li>Process B checks to see if the directory exists (it doesn't yet).</li>
<li>Process A invokes <code>svn</code>, which creates the directory.</li>
<li>Process B invokes <code>svn</code>, which subsequently fails.</li>
</ol>

<p>An easy way to avoid this is to have each process attempt to <em>create</em> the directory rather than checking for its existence.  If the other process has already created the directory, the other process is guaranteed to get a well-defined error code under a very wide variety of platforms and filesystems.  For instance, this is one of the only reliable ways to do synchronization on many implementations of NFS.  Luckily, <code>svn</code> won't care if the working directory already exists.</p>

<p>The Python code would look something like this:</p>

<pre><code>import os, errno

# ...

try:
  os.mkdir(dirName)
except OSError, e:
  if e.errno != errno.EEXIST: raise # some other error
  print 'Directory already exists.'
else:
  print 'Successfully created new directory.'
</code></pre>

<p>This technique is easy to implement, very reliable, and useful in a wide variety of situations.</p>
"
200143,"<p>I have to agree with some of the comments here.  Be careful and make sure you really want to save pickle data in a db, there's probably a better way.</p>

<p>In any case I had trouble in the past trying to save binary data in the sqlite db.
Apparently you have to use the sqlite3.Binary() to prep the data for sqlite.</p>

<p>Here's some sample code:</p>

<pre><code>query = u'''insert into testtable VALUES(?)'''
b = sqlite3.Binary(binarydata)
cur.execute(query,(b,))
con.commit()
</code></pre>
"
200311,"<p>A sting (<code>str</code>-type) in Python is a series of bytes. There is <strong>no way</strong> of telling just from looking at the string whether this series of bytes represent an ascii string, a string in a 8-bit charset like ISO-8859-1 or a string encoded with UTF-8 or UTF-16 or whatever.</p>

<p>However if you know the encoding used, then you can <code>decode</code> the str into a unicode string and then use a regular expression (or a loop) to check if it contains characters outside of the range you are concerned about.</p>
"
200315,"<p><strong>Do not</strong> try write this function in PHP.  You will inevitably get it wrong and your application will inevitably have an arbitrary remote execution exploit.</p>

<p>First, consider what problem you are actually solving.  I presume you are just trying to get data from PHP to Python.  You might try to write a .ini file rather than a .py file.  Python has an excellent ini syntax parser, <a href=""http://www.python.org/doc/2.5.2/lib/module-ConfigParser.html"" rel=""nofollow"">ConfigParser</a>.  You can write the obvious, and potentially incorrect, quoting function in PHP and nothing serious will happen if (read: when) you get it wrong.</p>

<p>You could also write an XML file.  There are too many XML parsers and emitters for PHP and Python for me to even list here.</p>

<p>If I <strong>really</strong> can't convince you that this is a <em>terrible, terrible</em> idea, then you can at least use the pre-existing function that Python has for doing such a thing: <code>repr()</code>.</p>

<p>Here's a handy PHP function which will run a Python script to do this for you:</p>

<pre><code>&lt;?php

function py_escape($input) {
    $descriptorspec = array(
        0 =&gt; array(""pipe"", ""r""),
        1 =&gt; array(""pipe"", ""w"")
        );
    $process = proc_open(
        ""python -c 'import sys; sys.stdout.write(repr(sys.stdin.read()))'"",
        $descriptorspec, $pipes);
    fwrite($pipes[0], $input);
    fclose($pipes[0]);
    $chunk_size = 8192;
    $escaped = fread($pipes[1], $chunk_size);
    if (strlen($escaped) == $chunk_size) {
        // This is important for security.
        die(""That string's too big.\n"");
    }
    proc_close($process);
    return $escaped;
}

// Example usage:
$x = ""string \rfull \nof\t crappy stuff"";
print py_escape($x);
</code></pre>

<p>The <code>chunk_size</code> check is intended to prevent an attack whereby your input ends up being two really long strings, which look like <code>(""hello "" + (""."" * chunk_size))</code> and <code>'; os.system(""do bad stuff"")</code> respectively.  Now, that naive attack won't work exactly, because Python won't let a single-quoted string end in the middle of a line, and those quotes in the <code>system()</code> call will themselves be quoted, but if the attacker manages to get a line continuation (""\"") into the right place and use something like <code>os.system(map(chr, ...))</code> then they can inject some code that will run.</p>

<p>I opted to simply read one chunk and give up if there was more output, rather than continuing to read and accumulate, because there are also limits on Python source file line length; for all I know, that could be another attack vector.  Python is not intended to be secure against arbitrary people writing arbitrary source code on your system so this area is unlikely to be audited.</p>

<p>The fact that I had to think of all this for this trivial example is just another example of why you shouldn't use python source code as a data interchange format.</p>
"
200395,"<p>I guess filter() is as fast as you can possibly get without having to code the filtering function in C (and in that case, you better code the whole filtering process in C).</p>

<p>Why don't you paste the function you are filtering on? That might lead to easier optimizations.</p>

<p>Read <a href=""http://www.python.org/doc/essays/list2str.html"" rel=""nofollow"">this</a> about optimization in Python. And <a href=""http://docs.python.org/api/api.html"" rel=""nofollow"">this</a> about the Python/C API.</p>
"
95659,"<p>Application wide handler is fine. They are great for logging. Just make sure that the application wide one is durable and is unlikely to crash itself.</p>
"
96016,"<p>sys.path is python's internal representation of the PYTHONPATH, it sounds to me like you want to modify the PATH.</p>

<p>I'm not sure that this will work, but you can try:</p>

<pre><code>import os
os.environ['PATH'] += os.pathsep + ""C:\\oracle32\\bin""
</code></pre>
"
283271,"<p>You could use the old firewall hack... try throwing ""?file.jpg"" or ""#file.jpg"" on the end (sans quotes). The firewall may see this as you're trying to download an image file which it'll allow, the responding server probably won't care that you've attached a query string, and (I think) python will just see an egg.</p>
"
94551,"<p><a href=""http://docs.python.org/lib/module-getpass.html"" rel=""nofollow"">getpass</a> is useful for determining the login name of the current user.</p>

<p><a href=""http://docs.python.org/lib/module-grp.html"" rel=""nofollow"">grp</a> allows you to lookup Unix group IDs by name, and vice versa.</p>

<p><a href=""http://docs.python.org/lib/module-dircache.html"" rel=""nofollow"">dircache</a> might be useful in situations where you're repeatedly polling the contents of a directory.</p>

<p><a href=""http://docs.python.org/lib/module-glob.html"" rel=""nofollow"">glob</a> can find filenames matching wildcards like a Unix shell does.</p>

<p><a href=""http://docs.python.org/lib/module-shutil.html"" rel=""nofollow"">shutil</a> is useful when you need to copy, delete or rename a file.</p>

<p><a href=""http://docs.python.org/lib/module-csv.html"" rel=""nofollow"">csv</a> can simplify parsing of delimited text files.</p>

<p><a href=""http://docs.python.org/lib/module-optparse.html"" rel=""nofollow"">optparse</a> provides a reliable way to parse command line options.</p>

<p><a href=""http://docs.python.org/lib/module-bz2.html"" rel=""nofollow"">bz2</a> comes in handy when you need to manipulate a bzip2-compressed file.</p>

<p><a href=""http://docs.python.org/lib/module-urlparse.html"" rel=""nofollow"">urlparse</a> will save you the hassle of breaking up a URL into component parts.</p>
"
94869,"<p>Well, it looks as if I will be answering my own question.</p>

<p>First, the documentation flat out lies where it reads ""In any style command the first row index may be set to one of the special strings 'splitlast' or 'splitfirst' to indicate that the style should be used only for the last row of a split table, or the first row of a continuation.""  In the current release, the ""splitlast"" and ""splitfirst"" row indices break with the aforementioned TypeErrors on the TEXTCOLOR and BACKGROUND commnds.</p>

<p>My suspicion, based on reading the source code, is that only the tablestyle line commands (GRID, BOX, LINEABOVE, and LINEBELOW) are currently compatible with the 'splitfirst' and 'splitlast' row indices.  I suspect that all cell commands break with the aforementioned TypeErrors.</p>

<p>However, I was able to do what I wanted by subclassing the Table class and overriding the onSplit method.  Here is my code:</p>

<pre><code>class XTable(Table):
    def onSplit(self, T, byRow=1):
        T.setStyle(TableStyle([
          ('TEXTCOLOR', (0, 1), (1, 1), colors.black)]))
</code></pre>

<p>What this does is apply the text color black to the first and second cell of the second row of each page.  (The first row is a header, repeated by the repeatRows parameter of the Table.)  More precisely, it is doing this to the first and second cell of each frame, but since I am using the SimpleDocTemplate, frames and pages are identical.</p>
"
143247,"<p>If your bitfield is short, you can probably use <a href=""http://docs.python.org/lib/module-struct.html"" rel=""nofollow"">the struct module</a>. Otherwise I'd recommend some sort of a wrapper around <a href=""http://docs.python.org/lib/module-array.html"" rel=""nofollow"">the array module</a>.</p>

<p>Also, the ctypes module does contain <a href=""http://docs.python.org/lib/ctypes-bit-fields-in-structures-unions.html"" rel=""nofollow"">bitfields</a>, but I've never used it myself. <em>Caveat emptor</em>.</p>
"
228845,"<p>Main question is ""iterate through the alphabet"":</p>

<pre><code>import string
for c in string.lowercase:
    print c
</code></pre>

<p>How get letter frequencies with some efficiency and without counting non-letter characters:</p>

<pre><code>import string

sample = ""Hello there, this is a test!""
letter_freq = dict((c,0) for c in string.lowercase)

for c in [c for c in sample.lower() if c.isalpha()]:
    letter_freq[c] += 1

print letter_freq
</code></pre>
"
228941,"<p>I was looking building an XMPP client in python a while ago.  I haven't gotten around to working on the project I was looking at it for.  I didn't see anything that used twisted but are a couple XMPP libraries I found.</p>

<ul>
<li><a href=""https://launchpad.net/python-xmpp/"" rel=""nofollow"">https://launchpad.net/python-xmpp/</a></li>
<li><a href=""http://xmpppy.sourceforge.net/"" rel=""nofollow"">http://xmpppy.sourceforge.net/</a></li>
<li><a href=""http://pyxmpp.jajcus.net/"" rel=""nofollow"">http://pyxmpp.jajcus.net/</a></li>
</ul>

<p>I also found a python program, under the GPL, that acts multi-point conference system using XMPP.</p>

<p><a href=""http://coders.meta.net.nz/~perry/jabber/confbot.php"" rel=""nofollow"">http://coders.meta.net.nz/~perry/jabber/confbot.php</a></p>
"
38718,"<p>I believe this is a bug in the Oracle ODBC driver. Basically, the Oracle ODBC driver does not support the <code>TIMESTAMP WITH (LOCAL) TIME ZONE</code> data types, only the <code>TIMESTAMP</code> data type. As you have discovered, one workaround is in fact to use the <code>TO_CHAR</code> method.</p>

<p>In your example you are not actually reading the time zone information. If you have control of the table you could convert it to a straight <code>TIMESTAMP</code> column. If you don't have control over the table, another solution may be to create a view that converts from <code>TIMESTAMP WITH TIME ZONE</code> to <code>TIMESTAMP</code> via a string - sorry, I don't know if there is a way to convert directly from <code>TIMESTAMP WITH TIME ZONE</code> to <code>TIMESTAMP</code>.</p>
"
39062,"<p>You could also use <code>__id__</code>. This gives you the objects internal ID number, which is always unique. To check if to objects are the same, try</p>

<blockquote>
  <p><code>a.__id__ = b.__id__</code></p>
</blockquote>

<p>This is how Ruby's standard library does it as far as I can tell (see <code>group_by</code> and others).</p>
"
39089,"<p>Create a new file, copy lines from the old to the new, and do the replacing before you write the lines to the new file.</p>
"
328589,"<p><a href=""http://www.python.org/doc/2.5.2/dist/dist.html"" rel=""nofollow"">Distutils</a> supports installing modules, packages, and scripts. If you create a distutils <code>setup.py</code> which refers to <code>foo</code> as a package and <code>foo.py</code> as a script, then <code>foo.py</code> should get installed to <code>/usr/local/bin</code> or whatever the appropriate script install path is on the target OS, and the <code>foo</code> package should get installed to the <code>site_packages</code> directory.</p>
"
328883,"<p>Python doesn't have an equivalent to Smallktalk's #allInstances as the architecture doesn't have this type of central object table (although modern smalltalks don't really work like that either).</p>

<p>As the other poster says, you have to explicitly manage a collection.  His suggestion of a factory method that maintains a registry is a perfectly reasonable way to do it.  You may wish to do something with <a href=""http://www.python.org/doc/2.5.2/lib/module-weakref.html"" rel=""nofollow"">weak references</a> so you don't have to explicitly keep track of object disposal.</p>
"
199233,"<p>What I've gathered from the responses so far:</p>

<p><strong>For chess board data representations:</strong></p>

<p>See the Wikipedia article on [chess board representations](http://en.wikipedia.org/wiki/Board_representation_(chess)).</p>

<p><strong>For chess move data representations:</strong></p>

<p>See the Wikipedia articles on <a href=""http://en.wikipedia.org/wiki/Portable_Game_Notation"" rel=""nofollow"">Portable Game Notation</a> and <a href=""http://en.wikipedia.org/wiki/Algebraic_chess_notation"" rel=""nofollow"">Algebraic Chess Notation</a></p>

<p><strong>For chess rules representations:</strong></p>

<p>This must be done using a programming language. If one wants to reduce the amount of code written in the case where the rules will be implemented in more than one language then there are a few options</p>

<ol>
<li>Use a language where an embedable interpreter exists for the target languages (e.g. Lua, Python).</li>
<li>Use a Virtual Machine that the common languages can compile to (e.g. IronPython for C#, JPython for Java).</li>
<li>Use a background daemon or sub-process for the rules with which the target languages can communicate.</li>
<li>Reimplement the rules algorithms in each target language.</li>
</ol>

<p>Although I would have liked a declarative syntax that could have been interpreted by mutliple languages to enforce the rules of chess my research has lead me to no likely candidate. I have a suspicion that <a href=""http://en.wikipedia.org/wiki/Constraint_programming"" rel=""nofollow"">Constraint Based Programming</a> may be a possible route given that solvers exist for many languages but I am not sure they would truly fulfill this requirement. Thanks for all the attention and perhaps in the future an answer will appear.</p>
"
199275,"<p>I write code for CPython and IronPython but tip should work for Jython as well.</p>

<p>Basically, I write all the platform specific code in separate modules/packages and then import the appropriate one based on platform I'm running on. (see cdleary's comment above)</p>

<p>This is especially important when it comes to the differences between the SQLite implementations and if you are implementing any GUI code.</p>
"
199636,"<p>Just ran across this on Python reddit tonight: <a href=""http://orestis.gr/blog/2008/10/13/pysmell-v06-released/"" rel=""nofollow"">PySmell</a>. Looks like what you're looking for.</p>

<blockquote>
  <p>PySmell is a python IDE completion helper.</p>
  
  <p>It tries to statically analyze Python source code, without executing it, and generates information about a projectâs structure that IDE tools can use. </p>
</blockquote>
"
228961,"<p>have You tried this ? :</p>

<pre><code>for item in self.inventory_names:
    t = (item,)
    self.cursor.execute(""SELECT weight FROM Equipment WHERE name = ?"", t)
    self.cursor.close()
</code></pre>

<p>cursor.execute() expects a sequence (list,tuple) as second parameter. (-> ddaa )</p>
"
98085,"<p>if you use classes, you should free the resources they allocate in their destructors instead, of course. Use the try: on entire application just if you want to free resources that aren't already liberated by your classes' destructors.</p>

<p>And instead of using a catch-all except:, you should use the following block:</p>

<pre><code>try:
    main()
finally:
    cleanup()
</code></pre>

<p>That will ensure cleanup in a more pythonic way.</p>
"
282816,"<pre><code>def original_function():
    pass

decorated_function= decorator(original_function)

if use_decorated:
    decorated_function()
else:
    original_function()
</code></pre>

<p>Decorate only once, and afterwards choose which version to call.</p>
"
144133,"<p><a href=""http://www.jwz.org/doc/tabs-vs-spaces.html"" rel=""nofollow"">JWZ says it best</a>:</p>

<blockquote>
  <p>When [people are] reading code, and when they're done writing new code, they care about how many screen columns by which the code tends to indent when a new scope (or sexpr, or whatever) opens...</p>
  
  <p>...My opinion is that the best way to solve the technical issues is to mandate that the ASCII #9 TAB character never appear in disk files: program your editor to expand TABs to an appropriate number of spaces before writing the lines to disk...</p>
  
  <p>...This assumes that you never use tabs in places where they are actually significant, like in string or character constants, but I never do that: when it matters that it is a tab, I always use '\t' instead. </p>
</blockquote>
"
144231,"<p>Decimals won't throw away decimal places like that. If you really want to limit precision to 2 d.p. then try</p>

<pre><code>decimal.getcontext().prec=2
</code></pre>

<p>EDIT: You can alternatively call quantize() every time you multiply or divide (addition and subtraction will preserve the 2 dps).</p>
"
102701,"<p>I use generators when our web server is acting as a proxy:</p>

<ol>
<li>The client requests a proxied url from the server</li>
<li>The server begins to load the target url</li>
<li>The server yields to return the results to the client as soon as it gets them</li>
</ol>
"
103187,"<pre><code>def sortedDict(dictobj):
    return (value for key, value in sorted(dictobj.iteritems()))
</code></pre>

<p>This will create a single intermediate list, the 'sorted()' method returns a real list. But at least it's only one.</p>
"
101284,"<p>There's also one in F#:</p>

<p>let zipped = Seq.zip firstEnumeration secondEnumation</p>
"
37571,"<blockquote>
  <p>Very close, but then I lose everything from ClassX. Below is something a collegue gave me that does do the trick, but it's hideous. There has to be a better way.</p>
</blockquote>

<p>Looks like you're trying to set up some sort of proxy object scheme. That's doable, and there are better solutions than your colleague's, but first consider whether it would be easier to just patch in some extra methods. This won't work for built-in classes like <code>bool</code>, but it will for your user-defined classes:</p>

<pre><code>def HTMLDecorator (obj):
    def html ():
        sep = cgi.escape (repr (obj))
        return sep.join ((""&lt;H1&gt;"", ""&lt;/H1&gt;""))
    obj.html = html
    return obj
</code></pre>

<p>And here is the proxy version:</p>

<pre><code>class HTMLDecorator(object):
    def __init__ (self, wrapped):
        self.__wrapped = wrapped

    def html (self):
        sep = cgi.escape (repr (self.__wrapped))
        return sep.join ((""&lt;H1&gt;"", ""&lt;/H1&gt;""))

    def __getattr__ (self, name):
        return getattr (self.__wrapped, name)

    def __setattr__ (self, name, value):
        if not name.startswith ('_HTMLDecorator__'):
            setattr (self.__wrapped, name, value)
            return
        super (HTMLDecorator, self).__setattr__ (name, value)

    def __delattr__ (self, name):
        delattr (self.__wraped, name)
</code></pre>
"
37619,"<p>Both of John's solutions would work.  Another option that allows HTMLDecorator to remain very simple and clean is to monkey-patch it in as a base class.  This also works only for user-defined classes, not builtin types:</p>

<pre><code>import cgi

class ClassX(object):
    pass # ... with own __repr__

class ClassY(object):
    pass # ... with own __repr__

inst_x=ClassX()
inst_y=ClassY()

class HTMLDecorator:
    def html(self): # an ""enhanced"" version of __repr__
        return cgi.escape(self.__repr__()).join((""&lt;H1&gt;"",""&lt;/H1&gt;""))

ClassX.__bases__ += (HTMLDecorator,)
ClassY.__bases__ += (HTMLDecorator,)

print inst_x.html()
print inst_y.html()
</code></pre>

<p>Be warned, though -- monkey-patching like this comes with a high price in readability and maintainability of your code.  When you go back to this code a year later, it can become very difficult to figure out how your ClassX got that html() method, especially if ClassX is defined in some other library.</p>
"
329011,"<p>How about</p>

<pre><code>from binascii import hexlify, unhexlify

def xstr(x):
    hex = '%x' % x
    return unhexlify('0'*(len(hex)%2) + hex)[::-1]

def xlong(s):
    return int(hexlify(s[::-1]), 16)
</code></pre>

<p>I didn't time it but it should be faster and also work on larger numbers, since it doesn't use recursion.</p>
"
198763,"<p>Since Pickle can dump your object graph to a string it should be possible. </p>

<p>Be aware though that TEXT fields in SQLite uses database encoding so you might need to convert it to a simple string before you un-pickle.</p>
"
198770,"<p>If a dictionary can be pickled, it can be stored in text/blob field as well.</p>

<p>Just be aware of the dictionaries that can't be pickled (aka that contain unpickable objects).</p>
"
198814,"<p>The standard python way is to create a python ""Egg"".</p>

<p>You could have a look at <a href=""http://www.ibm.com/developerworks/library/l-cppeak3.html"" rel=""nofollow"">this tutorial</a>, or <a href=""http://pypi.python.org/pypi/setuptools/"" rel=""nofollow"">this page about setuptools</a>.</p>
"
198829,"<p>Yes, you can store a pickled object in a TEXT or BLOB field in an SQLite3 database, as others have explained.</p>

<p>Just be aware that some object <strong>cannot be pickled</strong>.  The built-in container types can (dict, set, list, tuple, etc.).  But some objects, such as file handles, refer to state that is external to their own data structures, and other extension types have similar problems.</p>

<p>Since a dictionary can contain arbitrary nested data structures, it might not be pickle-able.</p>
"
199094,"<p>With regexes you can do this:</p>

<pre><code>re.sub('([A-Z])', r' \1', str)
</code></pre>

<p>Of course, that will only work for ASCII characters, if you want to do Unicode it's a whole new can of worms :-)</p>
"
172464,"<p>Users that can't login?  Just given them a totally random password.</p>

<pre><code>import random
user.set_password( str(random.random()) )
</code></pre>

<p>They'll never be able to log on.</p>
"
142561,"<p>This sounds like modifying the <code>__builtin__</code> name space.  To do it:</p>

<pre><code>import __builtin__
__builtin__.foo = 'some-value'
</code></pre>

<p>Do not use the <code>__builtins__</code> directly (notice the extra ""s"") - apparently this can be a dictionary or a module.  Thanks to Î¤ÎÎ©Î¤ÎÎÎÎ¥ for pointing this out, more can be found <a href=""http://groups.google.com/group/comp.lang.python/browse_thread/thread/1907d5e660444c08/69c29c4ec0c4d3ec"" rel=""nofollow"" title=""here"">here</a>.</p>

<p>Now <code>foo</code> is available for use everywhere.</p>

<p>I don't recommend doing this generally, but the use of this is up to the programmer.</p>

<p>Assigning to it must be done as above, just setting <code>foo = 'some-other-value'</code> will only set it in the current namespace.</p>
"
142571,"<p><a href=""http://www.gsp.com/cgi-bin/man.cgi?section=1&amp;topic=gcore"" rel=""nofollow"">Make your program dump core</a>, then clone an instance of the program on a sufficiently similar box using <a href=""http://www.gsp.com/cgi-bin/man.cgi?section=1&amp;topic=gdb"" rel=""nofollow"">gdb</a>.  There are <a href=""http://wiki.python.org/moin/DebuggingWithGdb"" rel=""nofollow"">special macros</a> to help with debugging python programs within gdb, but if you can get your program to concurrently <a href=""http://blog.vrplumber.com/index.php?/archives/1631-Minimal-example-of-using-twisted.manhole-Since-it-took-me-so-long-to-get-it-working....html"" rel=""nofollow"">serve up a remote shell</a>, you could just continue the program's execution, and query it with python.</p>

<p>I have never had to do this, so I'm not 100% sure it'll work, but perhaps the pointers will be helpful.</p>
"
102438,"<p>By far the easiest approach, and almost certainly the fastest, is something along the lines of:</p>

<pre><code>def sorted_dict(d):
    keys = d.keys()
    keys.sort()
    for key in keys:
        yield d[key]
</code></pre>

<p>You can't sort without fetching all keys. Fetching all keys into a list and then sorting that list is the most efficient way to do that; list sorting is very fast, and fetching the keys list like that is as fast as it can be. You can then either create a new list of values or yield the values as the example does. Keep in mind that you can't modify the dict if you are iterating over it (the next iteration would fail) so if you want to modify the dict before you're done with the result of sorted_dict(), make it return a list.</p>
"
100766,"<p>These two comparisons serve different purposes. The former checks for boolean value of something, the second checks for identity with None value.</p>
"
276640,"<p>The mechanize main page says:</p>

<blockquote>
  <p>mechanize.Browser is a subclass of mechanize.UserAgentBase, which is, in turn, a subclass of urllib2.OpenerDirector</p>
</blockquote>

<p>My understanding is that urllib2 is one of the sandboxed modules in GAE, with its functionality being replaced by the Google-provided urlfetch. You'd need to re-implement the mechanize.UserAgentBase class to use urlfetch, if that's at all possible.</p>
"
141744,"<p>@<a href=""#141670"" rel=""nofollow"">John Millikin</a></p>

<pre><code>def outer():
    x = 1 # local to `outer()`

    def inner():
        x = 2     # local to `inner()`
        print(x)
        x = 3
        return x

    def inner2():
        nonlocal x
        print(x)  # local to `outer()`
        x = 4     # change `x`, it is not local to `inner2()`
        return x

    x = 5         # local to `outer()`
    return (inner, inner2)

for inner in outer():
    print(inner()) 

# -&gt; 2 3 5 4
</code></pre>
"
141881,"<p><sub>comment for <a href=""http://stackoverflow.com/a/141767/4279"">@Kevin Little's answer</a> to include the code example</sub></p>

<p><code>nonlocal</code> does not solve completely this problem on python3.0:</p>

<pre><code>x = 0 # global x
def outer():
    x = 1 # local to `outer`
    def inner():
        global x
        x = 2 # change global
        print(x) 
        x = 3 # change global
        return x
    def inner2():
##        nonlocal x # can't use `nonlocal` here
        print(x)     # prints global
##        x = 4      # can't change `x` here
        return x
    x = 5
    return (inner, inner2)

for inner in outer():
    print(inner())
# -&gt; 2 3 3 3
</code></pre>

<p>On the other hand:</p>

<pre><code>x = 0
def outer():
    x = 1 # local to `outer`
    def inner():
##        global x
        x = 2
        print(x) # local to `inner` 
        x = 3 
        return x
    def inner2():
        nonlocal x
        print(x)
        x = 4  # local to `outer`
        return x
    x = 5
    return (inner, inner2)

for inner in outer():
    print(inner())
# -&gt; 2 3 5 4
</code></pre>

<p>it works on python3.1-3.3</p>
"
329742,"<p>It depends what kind of tools you're looking for.</p>

<p>As for an editor, if you like CLI stuff, then emacs or vim is the way to go (I prefer emacs).  If you choose emacs, then you may also want to use <a href=""http://pymacs.progiciels-bpi.ca/"" rel=""nofollow"">pymacs</a> for customizing it (since you'll already be familiar with python).  If you want some intellisense-like features, then eclipse is a good way to go, but I should warn you:  python can be a tricky language to do that kind of stuff for.  Thus, it may not be what you're used to with some other languages.  All the same, you may give <a href=""http://pydev.sourceforge.net/"" rel=""nofollow"">pydev</a> a shot.</p>

<p>I'd also recommend going with <a href=""http://trac.edgewall.org/"" rel=""nofollow"">trac</a> for tickets, source viewing, and for using your <a href=""http://buildbot.net/trac"" rel=""nofollow"">buildbot</a> continuous integration server.</p>

<p>And tools like <a href=""http://www.logilab.org/857"" rel=""nofollow"">pylint</a> and <a href=""http://bicyclerepair.sourceforge.net/"" rel=""nofollow"">bicycle repair man</a> are always helpful as well.</p>
"
329913,"<p>This seems to do what you describe:</p>

<p>[[a,b] for a in range(1,3) for b in range(1,5)]</p>

<p>UPDATE: Drat! Should have reloaded the page to see S.Lott's answer before posting. Hmmm... what to do for a little value-add? Perhaps a short testimony to the usefulness of interactive mode with Python. </p>

<p>I come most recently from a background with Perl so with issues like this I find it very helpful to type ""python"" at the command line and drop into interactive mode and just a)start trying things, and b)refine the niceties by hitting up-arrow and adjusting my previous attempt until I get what I want. Any time I'm hazy on some keyword, help is at hand. Just type: help(""some_keyword""), read the brief summary, then hit ""Q"" and I'm back on line in direct conversation with the python interpreter. </p>

<p>Recommended if you are a beginner and not using it.</p>
"
330086,"<p>Well, it is called curses.ascii, so using ASCII rules for what's printable should not be a surprise.  If you are using an ISO 8-bit code, or you are operating from a known code page, you will need rules that correspond to what the actual codes and their displays are.</p>

<p>I think using unicode characters and standard Unicode classifications is fine.  That just might not deal with what the curses and console arrangement are actually going to  display properly.  </p>

<p>There also needs to be some consideration for what is acceptable and unacceptable for the application, even if displayable.</p>
"
173292,"<p>You can probably check the code for <a href=""http://www.sphider.eu/"" rel=""nofollow"">Sphider</a>. They docs and pdfs, so I'm sure they can read them. Might also lead you in the right direction for other Office formats.</p>
"
173300,"<p>I think this is what you want to do:</p>

<pre><code>d = {}
for i, tag in enumerate(ithTag):
   d[tag] = i
</code></pre>
"
173301,"<p>Try</p>

<pre><code>tagDict[ithTag] = i
</code></pre>
"
277837,"<p>You've actually got a lot going on in this example.</p>

<ol>
<li><p>You've ""over-processed"" the Beautiful Soup Tag objects to make lists.  Leave them as Tags.</p></li>
<li><p>All of these kinds of merge algorithms are hard.  It helps to treat the two things being merged symmetrically.</p></li>
</ol>

<p>Here's a version that should work directly with the Beautiful Soup Tag objects.  Also, this version doesn't assume anything about the lengths of the two rows.</p>

<pre><code>def merge3( row1, row2 ):
    i1= 0
    i2= 0
    result= []
    while i1 != len(row1) or i2 != len(row2):
        if i1 == len(row1):
            result.append( ' '.join(row1[i1].contents) )
            i2 += 1
        elif i2 == len(row2):
            result.append( ' '.join(row2[i2].contents) )
            i1 += 1
        else:
            if row1[i1]['colspan'] &lt; row2[i2]['colspan']:
                # Fill extra cols from row1
                c1= row1[i1]['colspan']
                while c1 != row2[i2]['colspan']:
                    result.append( ' '.join(row2[i2].contents) )
                    c1 += 1
            elif row1[i1]['colspan'] &gt; row2[i2]['colspan']:
                # Fill extra cols from row2
                c2= row2[i2]['colspan']
                while row1[i1]['colspan'] != c2:
                    result.append( ' '.join(row1[i1].contents) )
                    c2 += 1
            else:
                assert row1[i1]['colspan'] == row2[i2]['colspan']
                pass
            txt1= ' '.join(row1[i1].contents)
            txt2= ' '.join(row2[i2].contents)
            result.append( txt1 + "" "" + txt2 )
            i1 += 1
            i2 += 1
    return result
</code></pre>
"
105774,"<p>Forgive my python illiteracy as I won't be offering the solution in python.
As I do not know what method python 2.6 uses to generate the permutations and eliben's one looks like Johnson-Trotter permutation generation, you might look for article
in Wikipedia on <a href=""http://en.wikipedia.org/wiki/Permutation#Algorithms_to_generate_permutations"" rel=""nofollow"">Permutations and their generation</a> that looks quite like unrank function in <a href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.43.4521"" rel=""nofollow"">paper by Myrvold and Ruskey</a>.</p>

<p>It would seem to me that this could be used in a generator in the same way as in other replies to lessen the memory requirement considerably. Just remember that the permutations will not be in lexicographic order.</p>
"
105945,"<p>Do what StackOverflow did.</p>

<p>They had a simple email/password form. It had a single hard-coded password (falkensmaze). When the user gets the password right set a cookie. eg. auth=1</p>

<p>Don't worry about it being unsecure. Who care's if someone hacks into the beta?</p>

<p>Apache/htaccess is also a nice and simple solution.</p>
"
106772,"<p>When I touch files in my code, I tend to prefer to mock the actual reading and writing of the file... so then I can give my classes exact contents I want in the test, and then assert that the test is writing back the contents I expect.</p>

<p>I've done this in Java, and I imagine it is quite simple in Python... but it may require designing your classes/functions in such a way that it is EASY to mock the use of an actual file.</p>

<p>For this, you can try passing in streams and then just pass in a simple string input/output stream which won't write to a file, or have a function that does the actual ""write this string to a file"" or ""read this string from a file"", and then replace that function in your tests.</p>
"
277981,"<p>With your code you're running your functions all get called.</p>

<pre>
handlers = {
'extractTitle': extractTitle, 
'extractMetaTags': extractMetaTags
}

handlers[type](dom)
</pre>

<p>Would work like your original <code>if</code> code.</p>
"
278404,"<p>I think that a combination of Pycrust with matplotlib can do exactly what you need. Pycrust is part of the wxPython installation, and matplotlib should be insalled separately. Both are simple to install in about 5 minutes.</p>

<p>Read <a href=""http://eli.thegreenplace.net/2008/07/26/matplotlib-plotting-with-python/"" rel=""nofollow"">this</a> about integrating matplotlib with Pycrust to produce dynamic plots like the ones in the link you posted.</p>
"
279117,"<p>You need the <a href=""http://python.net/crew/mhammond/win32/Downloads.html"" rel=""nofollow"">win32com</a> package. Some examples:</p>

<pre><code>from win32com.client.dynamic import Dispatch

# Excel
excel = Dispatch('Excel.Application')

# Vim
vim = Dispatch('Vim.Application')
</code></pre>

<p>And then call whatever you like on them.</p>
"
141277,"<p>I'd recommend against <code>os.path.walk</code> as it is being removed in Python 3.0.  <code>os.walk</code> is simpler, anyway, or at least <em>I</em> find it simpler.</p>
"
141570,"<p>You probably want the <code>isinstance</code> builtin function:</p>

<pre><code>self.data = data if isinstance(data, list) else self.parse(data)
</code></pre>
"
197592,"<p>I think from an operations perspective things are going to be close enough that you can base your decision on other criteria. If you can afford a virtual private server with at least 256 MB RAM you will be able to deploy Grails applications. If the cost seems like a lot check out Sun. They are really pushing hosting solutions based on their product stack and there are some greats deals available. I have free hosting from Layered Tech for a year through Ostatic.</p>
"
197982,"<p>You definitely have to split the string first into the substrings wih different encodings, and decode each one separately. Just for fun, the obligatory ""one-line"" version:</p>

<pre><code>import re

encs = {
    'L': 'latin1',
    'G': 'iso8859-7',
    ...
}

decoded = ''.join(substr[2:].decode(encs[substr[1]])
             for substr in re.findall('\^[%s][^^]*' % ''.join(encs.keys()), st))
</code></pre>

<p>(no error checking, and also you'll want to decide how to handle '^' characters in  substrings)</p>
"
174769,"<p>Use the ""includes"" option.  See: <a href=""http://www.py2exe.org/index.cgi/ListOfOptions"" rel=""nofollow"">http://www.py2exe.org/index.cgi/ListOfOptions</a></p>
"
174984,"<p>Have you looked at the <a href=""http://pyprocessing.berlios.de/"" rel=""nofollow"">pyprocessing</a> module?</p>
"
175260,"<p>Like this:</p>

<pre><code>uc = open(filename).read().decode('utf8')
ascii = uc.decode('ascii')
</code></pre>

<p>Note, however, that this will <strong>fail</strong> with a <code>UnicodeDecodeError</code> exception if there are any characters that can't be converted to ASCII.</p>

<p>EDIT: As Pete Karl just pointed out, there is no one-to-one mapping from Unicode to ASCII.  So some characters simply can't be converted in an information-preserving way.  Moreover, standard ASCII is more or less a subset of UTF-8, so you don't really even need to do any decoding.</p>
"
196896,"<p>It's hard to even guess at what's happening without more information ...  </p>

<p>If I were you, I'd check that in your Python and Ruby programs:</p>

<ol>
<li>The keys are the same (obviously).  Dump them as hex and compare each byte.</li>
<li>The initialization vectors are the same. This is the parameter <code>IV</code> in <code>AES.new()</code> in pyCrypto.  Dump them as hex too.</li>
<li>The modes are the same.  The parameter <code>mode</code> in <code>AES.new()</code> in pyCrypto.</li>
</ol>

<p>There are defaults for <code>IV</code> and <code>mode</code> in pyCrypto, but don't trust that they are the same as in the Ruby implementation.  Use one of the simpler modes, like CBC.  I've found that different libraries have different interpretations of how the mode complex modes, such as PTR, work.</p>

<p>Wikipedia has a great article about how <a href=""http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation"" rel=""nofollow"">block cipher modes</a>.</p>
"
35841,"<p>Refactoring is inevitable on larger codebases and the lack of static typing makes this much harder in python than in statically typed languages.</p>
"
330466,"<p>I don't have jython handy, but I'd expect something like this to work:</p>

<pre><code>import java
sdf = java.text.SimpleDateFormat

fmt_in = sdf('d MMM yyyy HH:mm:ss Z')
fmt_out = sdf('MM/dd/yyyy HH:mm:ssaa')

fmt_out.format(fmt_in.parse(time_str))
</code></pre>
"
330537,"<p>I think you can give ZODB a shot.</p>

<p>""A major feature of ZODB is transparency. You do not need to write any code to explicitly read or write your objects to or from a database. You just put your persistent objects into a container that works just like a Python dictionary. Everything inside this dictionary is saved in the database. This dictionary is said to be the ""root"" of the database. It's like a magic bag; any Python object that you put inside it becomes persistent.""</p>

<p>Initailly it was a integral part of Zope, but lately a standalone package is also available.</p>

<p>It has the following limitation:</p>

<p>""Actually there are a few restrictions on what you can store in the ZODB. You can store any objects that can be ""pickled"" into a standard, cross-platform serial format. Objects like lists, dictionaries, and numbers can be pickled. Objects like files, sockets, and Python code objects, cannot be stored in the database because they cannot be pickled.""</p>

<p>I have read it but haven't given it a shot myself though.</p>

<p>Other possible thing could be a in-memory sqlite db, that may speed up the process a bit - being an in-memory db, but still you would have to do the serialization stuff and all.
Note: In memory db is expensive on resources.</p>

<p>Here is a link: <a href=""http://www.zope.org/Documentation/Articles/ZODB1"" rel=""nofollow"">http://www.zope.org/Documentation/Articles/ZODB1</a></p>
"
233822,"<p>The problem is that all of the local functions bind to the same environment and thus to the same <code>i</code> variable. The solution (workaround) is to create separate environments (stack frames) for each function (or lambda):</p>

<pre><code>t = [ (lambda x: lambda y : x*y)(x) for x in range(5)]

&gt;&gt;&gt; t[1](2)
2
&gt;&gt;&gt; t[2](2)
4
</code></pre>
"
108482,"<p>With <a href=""http://groups.google.com/group/ply-hack/tree/browse_frm/thread/cf31e8334801eabd/b9cdf4a6682635c1?rnum=1&amp;_done=%2Fgroup%2Fply-hack%2Fbrowse_frm%2Fthread%2Fcf31e8334801eabd%3F#doc_5c415da045e77a6e"" rel=""nofollow"">some help</a> from Dave Beazley (PLY's creator), my problem was solved.</p>

<p>The idea is to use special sub-rules and do the actions in them. In my case, I split the <code>declaration</code> rule to:</p>

<pre><code>def p_decl_body(self, p):
    """""" decl_body : declaration_specifiers init_declarator_list_opt
    """"""
    # &lt;&lt;Handle the declaration here&gt;&gt;        

def p_declaration(self, p):
    """""" declaration : decl_body SEMI 
    """"""
    p[0] = p[1]
</code></pre>

<p><code>decl_body</code> is always reduced before the token after SEMI is shifted in, so my action gets executed at the correct time.</p>
"
108549,"<p>The builtin way to do enums is:</p>

<pre><code>(FOO, BAR, BAZ) = range(3)
</code></pre>

<p>which works fine for small sets, but has some drawbacks:</p>

<ul>
<li>you need to count the number of elements by hand</li>
<li>you can't skip values </li>
<li>if you add one name, you also need to update the range number</li>
</ul>

<p>For a complete enum implementation in python, see:
<a href=""http://code.activestate.com/recipes/67107/"" rel=""nofollow"">http://code.activestate.com/recipes/67107/</a></p>
"
276387,"<p>Django templates use their own syntax, not like <a href=""http://en.wikipedia.org/wiki/Kid%5F%28templating%5Flanguage%29"" rel=""nofollow"">Kid</a> or <a href=""http://en.wikipedia.org/wiki/Genshi%5F%28templating%5Flanguage%29"" rel=""nofollow"">Genshi</a>.</p>

<p>You have to roll your own <a href=""http://docs.djangoproject.com/en/dev/howto/custom-template-tags/"" rel=""nofollow"">Custom Template Tag</a>.</p>

<p>I guess the main reason is enforcing good practice. In my case, I've already a hard time explaining those special templates tags to the designer on our team. If it was plain Python I'm pretty sure we wouldn't have chosen Django at all. I think there's also a performance issue, Django templates benchmarks are fast, while last time I checked genshi was much slower. I don't know if it's due to freely embedded Python, though.</p>

<p>You either need to review your approach and write your own custom templates (more or less synonyms to ""helpers"" in Ruby on Rails), or try another template engine.</p>

<p>For your edit, there's a better syntax in Python:</p>

<pre><code>embed_list.append(embed.replace(""&amp;lt;"", ""&lt;""))
</code></pre>

<p>I don't know if it'll fix your error, but at least it's less JavaScriptesque ;-)</p>

<p>Edit 2: Django automatically escapes all variables. You can enforce raw HTML with |safe filter : <code>{{embed|safe}}</code>.</p>

<p>You'd better take some time reading the documentation, which is really great and useful.</p>
"
276394,"<p>Instead of using a slice assignment to grow a list</p>

<p><code>embed_list[len(embed_list):] = [foo]</code></p>

<p>you should probably just do</p>

<p><code>embed_list.append(foo)</code></p>

<p>But really you should try unescaping html with a library function rather than doing it yourself.</p>

<p>That NoneType error sounds like embed.replace is None at some point, which only makes sense if your list is not a list of strings - you might want to double-check that with some asserts or something similar.</p>
"
109007,"<p>Django's development server has a file change monitor that watches for modifications and automatically reloads itself. You could re-use this code to launch unit tests on file modification.</p>
"
109011,"<p>Maybe Nose <a href=""http://somethingaboutorange.com/mrl/projects/nose/"" rel=""nofollow"">http://somethingaboutorange.com/mrl/projects/nose/</a> has a plugin <a href=""http://somethingaboutorange.com/mrl/projects/nose/doc/writing_plugins.html"" rel=""nofollow"">http://somethingaboutorange.com/mrl/projects/nose/doc/writing_plugins.html</a></p>

<p>Found this: <a href=""http://jeffwinkler.net/2006/04/27/keeping-your-nose-green/"" rel=""nofollow"">http://jeffwinkler.net/2006/04/27/keeping-your-nose-green/</a></p>
"
140218,"<p>You want to use <a href=""https://docs.python.org/2/library/re.html#re.sub"" rel=""nofollow"">re.sub</a>:</p>

<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'aaa...bbb', 'aaaooobbb', ""hola aaaiiibbb como estas?"")
'hola aaaooobbb como estas?'
</code></pre>

<p>To re-use variable parts from the pattern, use <code>\g&lt;n&gt;</code> in the replacement string to access the n-th <code>()</code> group:</p>

<pre><code>&gt;&gt;&gt; re.sub( ""(svcOrdNbr +).."", ""\g&lt;1&gt;XX"", ""svcOrdNbr               IASZ0080"")
'svcOrdNbr               XXSZ0080'
</code></pre>
"
330591,"<pre><code>from cStringIO   import StringIO
from collections import defaultdict
####from xml.etree   import cElementTree as etree
from lxml import etree

xml = ""&lt;e133_3&gt;&lt;e135_3&gt;&lt;e116_2&gt;The other system worked for about 1 month&lt;/e116_2&gt; got some good images &lt;e137_3&gt;on it then it started doing the same thing as the first one&lt;/e137_3&gt; so then I quit using either camera now they are just sitting and collecting dust. &lt;/e135_3&gt;&lt;/e133_3&gt;""

d = defaultdict(list)
for event, elem in etree.iterparse(StringIO(xml)):
    d[''.join(elem.itertext())].append(int(elem.tag[1:-2]))

print(dict(d.items()))
</code></pre>

<p>Output:</p>

<pre><code>{'on it then it started doing the same thing as the first one': [137], 
'The other system worked for about 1 month': [116], 
'The other system worked for about 1 month got some good images on it then it started doing the same thing as the first one so then I quit using \
either camera now they are just sitting and collecting dust. ': [133, 135]}
</code></pre>
"
330691,"<p>One more thing to try is <a href=""http://svn.python.org/view/python/branches/release25-maint/Demo/classes/Rat.py?rev=51333&amp;view=markup"" rel=""nofollow"">Rat.py</a> from demo folder in Python 2.5 maintenance branch. If i understand correctly, it is the daddy of 2.6 <code>fractions</code>. It's a single module without dependencies.</p>

<pre><code>&gt;&gt;&gt; from Rat import rat
&gt;&gt;&gt; rat(1) / rat(3)
Rat(1,3)
&gt;&gt;&gt; rat(1, 3) ** 2
Rat(1,9)
</code></pre>

<p><strong>UPDATE</strong>: Nah, <code>fractions.py</code> is about 2.5 times faster for my task.</p>
"
330887,"<p>First of all your approach is not a common web development practice. Even multi threading is being used, web applications are designed to be able to run multi-processing environments, for both scalability and easier deployment .</p>

<p>If you need to just initialize a large object, and do not need to change later, you can do it easily by using a global variable that is initialized while your WSGI application is being created, or the module contains the object is being loaded etc, multi processing will do fine for you.</p>

<p>If you need to change the object and access it from every thread, you need to be sure your object is thread safe, use locks to ensure that. And use a single server context, a process. Any multi threading python server will serve you well, also FCGI is a good choice for this kind of design.</p>

<p>But, if multiple threads are accessing and changing your object the locks may have a really bad effect on your performance gain, which is likely to make all the benefits go away.</p>
"
34391,"<p>This is simple. I started getting this problems a few revisions ago. Basically, just remove the ""core=True"" parameter in the ImageField in the models, and then follow the instructions <a href=""http://docs.djangoproject.com/en/dev/ref/contrib/admin/#inlinemodeladmin-objects"" rel=""nofollow"">here</a> to convert to what the newforms admin uses.</p>
"
331283,"<p>For some added strength, you can get the crypt module to use md5 by using a salt in the format.</p>

<pre><code>$1$ABCDEFGH$
</code></pre>

<p>where ABCDEFGH is your salt string. </p>

<pre><code>&gt;&gt;&gt; p = crypt.crypt('password', '$1$s8Ty3/f$')
&gt;&gt;&gt; p
Out: '$1$s8Ty3/f$0H/M0JswK9pl3X/e.n55G1'
&gt;&gt;&gt; p == crypt.crypt('password', p)
Out: True
</code></pre>

<p>(note that this is a gnu extension to crypt, see ""man crypt"" on a linux system). MD5 (and now even SHA1) may be ""broken"", but they are still relatively good for password hashes, and md5 is still the standard for linux local passwords.</p>
"
331703,"<p>But if you make a deb with the correct dependencies listed the installer will download them for the user. That's the best way, as it's non redundant. </p>

<p>Maybe you could make a tar or zip with your deb and all the third-party deb's and an install script that just install all the debs in the correct order. This way, if the user already has some package it wouldn't be installed again.</p>
"
331739,"<p>I think you should really consider BRisa. It recently became a pure python UPnP Framework, not focused only on Media Server.</p>

<p>It provides lots of utilitary modules and functions for you to build and deploy your UPnP device.</p>

<p>The project also is lacking feedback :-). I suggest you to use the latest svn code, if you're willing to try BRisa.</p>

<p>You can also contact the developers on #brisa at irc.freenode.org, we're either online or idling.</p>
"
331846,"<p>You can have your users run the system from a startup script, and that script can fix the pythonpath ahead of time to put your versions first. For example if you put CherryPy, SQLAlchemy, etc. in an ""external"" subdirectory, you could try:</p>

<pre><code># startproj.sh
script_path=`dirname $0`
export PYTHONPATH=${script_path}/external;${PYTHONPATH}
exec ${script_path}/projstartup.py
</code></pre>
"
175697,"<p>You are describing a matching problem. Possible references are <a href=""http://www.cs.sunysb.edu/~algorith/files/matching.shtml"" rel=""nofollow"">the Stony Brook algorithm repository</a> and <a href=""http://rads.stackoverflow.com/amzn/click/0321295358"" rel=""nofollow"">Algorithm Design by Kleinberg and Tardos</a>. If the number of players is equal to the number of courts you can reach a stable matching - <a href=""http://en.wikipedia.org/wiki/Stable_marriage_problem"" rel=""nofollow"">The Stable Marriage Problem</a>. Other formulations become harder.</p>
"
140778,"<p>Straight from Python's Refererence Library</p>

<pre><code>&gt;&gt;&gt; import glob
&gt;&gt;&gt; glob.glob('./[0-9].*')
['./1.gif', './2.txt']
&gt;&gt;&gt; glob.glob('*.gif')
['1.gif', 'card.gif']
&gt;&gt;&gt; glob.glob('?.gif')
['1.gif']
</code></pre>
"
275826,"<p>Response from the IMDbPy mailing list:</p>

<blockquote>
  <p>If present, the url is accessible
  through movie['cover url']. Beware
  that it could be missing, so you must
  first test it with something like:<br />
  if 'cover url' in movie:
         ...</p>
  
  <p>After that, you can use the urllib
  module to fetch the image itself.</p>
  
  <p>To provide a complete example,
  something like that should do the
  trick:</p>

<pre><code>import urllib
from imdb import IMDb

ia = IMDb(#yourParameters)
movie = ia.get_movie(#theMovieID)

if 'cover url' in movie:
    urlObj = urllib.urlopen(movie['cover url'])
    imageData = urlObj.read()
    urlObj.close()
    # now you can save imageData in a file (open it in binary mode).
</code></pre>
  
  <p>In the same way, a person's headshot
  is stored in person['headshot'].</p>
  
  <p>Things to be aware of:</p>
  
  <ul>
  <li>covers and headshots are available only fetching the data from the web server (via the 'http' or 'mobile' data access systems), and not  in the plain text data files ('sql' or 'local').</li>
  <li>using the images, you must respect the terms of the IMDb's policy;  see <a href=""http://imdbpy.sourceforge.net/docs/DISCLAIMER.txt"" rel=""nofollow"">http://imdbpy.sourceforge.net/docs/DISCLAIMER.txt</a></li>
  <li>the images you'll get will vary in size; you can use the python-imaging module to rescale them, if needed.</li>
  </ul>
</blockquote>
"
107854,"<p>You can create an unbuffered file and assign this file to sys.stdout.</p>

<pre><code>import sys 
myFile= open( ""a.log"", ""w"", 0 ) 
sys.stdout= myFile
</code></pre>

<p>You can't magically change the system-supplied stdout; since it's supplied to your python program by the OS.</p>
"
140977,"<pre><code>#!/usr/bin/perl -w

use strict;

# Break up the string.
# The spliting uses quotes
# as the delimiter.
# Put every broken substring
# into the @fields array.

my @fields;
while (&lt;&gt;) {
    @fields = split /'/, $_;
}

# For every substring indexed with an odd
# number, search for x and replace it
# with P.

my $count;
my $end = $#fields;
for ($count=0; $count &lt; $end; $count++) {
    if ($count % 2 == 1) {
        $fields[$count] =~ s/a/P/g;
    }    
}
</code></pre>

<p>Wouldn't this chunk do the job?</p>
"
273646,"<p>In the Lisp world it has happened a few times.  of course, the language is so dynamic that usually evolution is simply deprecating part of the standard library and making standard another part.</p>

<p>also, Lua 4 to 5 was pretty significant; but the language core is so minimal that even wide-reaching changes are documented in a couple of pages.</p>
"
140805,"<p>Take a look at <code>os.walk()</code> and the examples <a href=""http://docs.python.org/lib/os-file-dir.html"" rel=""nofollow"">here</a>.  With <code>os.walk()</code> you can easily process a whole directory tree. </p>

<p>An example from the link above...</p>

<pre><code># Delete everything reachable from the directory named in 'top',
# assuming there are no symbolic links.
# CAUTION:  This is dangerous!  For example, if top == '/', it
# could delete all your disk files.
import os
for root, dirs, files in os.walk(top, topdown=False):
    for name in files:
        os.remove(os.path.join(root, name))
    for name in dirs:
        os.rmdir(os.path.join(root, name))
</code></pre>
"
140822,"<p>Use os.path.walk if you want subdirectories as well.</p>

<pre>walk(top, func, arg)

        Directory tree walk with callback function.

        For each directory in the directory tree rooted at top (including top
        itself, but excluding '.' and '..'), call func(arg, dirname, fnames).
        dirname is the name of the directory, and fnames a list of the names of
        the files and subdirectories in dirname (excluding '.' and '..').  func
        may modify the fnames list in-place (e.g. via del or slice assignment),
        and walk will only recurse into the subdirectories whose names remain in
        fnames; this can be used to implement a filter, or to impose a specific
        order of visiting.  No semantics are defined for, or required of, arg,
        beyond that arg is always passed to func.  It can be used, e.g., to pass
        a filename pattern, or a mutable object designed to accumulate
        statistics.  Passing None for arg is common.
</pre>
"
235675,"<p>The one major disadvantage of using something like your DictObj is you either have to limit allowable keys or you can't have methods on your DictObj such as <code>.keys()</code>, <code>.values()</code>, <code>.items()</code>, etc.</p>
"
236470,"<p>The usual answer to that is testing testing testing. You're supposed to have an extensive unit test suite and run it often, particularly before a new version goes online.</p>

<p>Proponents of dynamically typed languages make the case that you have to test anyway because even in a statically typed language conformance to the crude rules of the type system covers only a small part of what can potentially go wrong.</p>
"
139107,"<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; from PyQt4 import QtCore, QtGui
&gt;&gt;&gt; app = QtGui.QApplication(sys.argv)
&gt;&gt;&gt; sb = QtGui.QScrollBar()
&gt;&gt;&gt; sb.setMinimum(0)
&gt;&gt;&gt; sb.setMaximum(100)
&gt;&gt;&gt; def on_slider_moved(value): print ""new slider position: %i"" % (value, )
&gt;&gt;&gt; sb.connect(sb, QtCore.SIGNAL(""sliderMoved(int)""), on_slider_moved)
&gt;&gt;&gt; sb.show()
&gt;&gt;&gt; app.exec_()
</code></pre>

<p>Now, when you move the slider (you might have to resize the window), you'll see the slider position printed to the terminal as you the handle.</p>
"
139574,"<p>Ok, another update on the subject. It seems that the cheeseshop template is broken. I've followed the chapter you linked in the post and it seems that authkit is working fine. There are some caveats:</p>

<ol>
<li>sqlalchemy has to be in 0.5 version</li>
<li>authkit has to be the dev version from svn (easy_install authkit==dev)</li>
</ol>

<p>I managed to get it working fine.</p>
"
110936,"<p>You can build some fancy PDFs from Python with the <a href=""http://www.reportlab.com/opensource/"" rel=""nofollow"">ReportLab</a> toolkit.</p>
"
274440,"<p>As Vinko notes, Latin-1 or ISO 8859-1 doesn't have printable characters for the octal string you quote.  According to my notes for 8859-1, ""C1 Controls (0x80 - 0x9F) are from ISO/IEC 6429:1992. It does not define names for 80, 81, or 99"".  The code point names are as Vinko lists them:</p>

<pre><code>\222 = 0x92 =&gt; PRIVATE USE TWO
\223 = 0x93 =&gt; SET TRANSMIT STATE
\225 = 0x95 =&gt; MESSAGE WAITING
</code></pre>

<p>The correct UTF-8 encoding of those is (Unicode, binary, hex):</p>

<pre><code>U+0092 = %11000010 %10010010 = 0xC2 0x92
U+0093 = %11000010 %10010011 = 0xC2 0x93
U+0095 = %11000010 %10010101 = 0xC2 0x95
</code></pre>

<p>The LATIN SMALL LETTER A WITH CIRCUMFLEX is ISO 8859-1 code 0xE2 and hence Unicode U+00E2; in UTF-8, that is %11000011 %10100010 or 0xC3 0xA2.</p>

<p>The CENT SIGN is ISO 8859-1 code 0xA2 and hence Unicode U+00A2; in UTF-8, that is %11000011 %10000010 or 0xC3 0x82.</p>

<p>So, whatever else you are seeing, you do not seem to be seeing a UTF-8 encoding of ISO 8859-1.  All else apart, you are seeing but 5 bytes where you would have to see 8.</p>

<p><em>Added</em>:
The previous part of the answer addresses the 'UTF-8 encoding' claim, but ignores the rest of the question, which says:</p>

<pre><code>Now I need to pass the string into a function that does this operation:

    strdecryptedPassword + chr(ord(c) - 3 - intCounter - 30)

I get this error: chr() arg not in range(256).  If I try to encode the
string as Latin-1 first I get this error: 'latin-1' codec can't encode
characters in position 0-3: ordinal not in range(256).
</code></pre>

<p>You don't actually show us how intCounter is defined, but if it increments gently per character, sooner or later '<code>ord(c) - 3 - intCounter - 30</code>' is going to be negative (and, by the way, why not combine the constants and use '<code>ord(c) - intCounter - 33</code>'?), at which point, <code>chr()</code> is likely to complain.  You would need to add 256 if the value is negative, or use a modulus operation to ensure you have a positive value between 0 and 255 to pass to <code>chr()</code>.  Since we can't see how intCounter is incremented, we can't tell if it cycles from 0 to 255 or whether it increases monotonically.  If the latter, then you need an expression such as:</p>

<pre><code>chr(mod(ord(c) - mod(intCounter, 255) + 479, 255))
</code></pre>

<p>where 256 - 33 = 223, of course, and 479 = 256 + 223.  This guarantees that the value passed to <code>chr()</code> is positive and in the range 0..255 for any input character c and any value of intCounter (and, because the <code>mod()</code> function never gets a negative argument, it also works regardless of how <code>mod()</code> behaves when its arguments are negative).</p>
"
275117,"<p>Try this instead:</p>

<p><code>(r'^urlchecker/(?P&lt;url&gt;.+)$', 'mysite.main.views.urlchecker'),</code></p>

<p>This differs from yours in that:</p>

<ul>
<li>It will take anything after 'urlcheck/', not just ""word"" characters.</li>
<li>It does not force the url to end in a slash.</li>
</ul>
"
109724,"<p>Found example here: <a href=""http://www.answermysearches.com/generate-an-excel-formatted-file-right-in-python/122/"" rel=""nofollow"">Generate an Excel Formatted File Right in Python</a></p>

<p>Notice that you make a font object and then give it to a style object, and then provide that style object when writing to the sheet:</p>

<pre><code>import pyExcelerator as xl

def save_in_excel(headers,values):
    #Open new workbook
    mydoc=xl.Workbook()
    #Add a worksheet
    mysheet=mydoc.add_sheet(""test"")
    #write headers
    header_font=xl.Font() #make a font object
    header_font.bold=True
    header_font.underline=True
    #font needs to be style actually
    header_style = xl.XFStyle(); header_style.font = header_font
    for col,value in enumerate(headers):
        mysheet.write(0,col,value,header_style)
    #write values and highlight those that match my criteria
    highlighted_row_font=xl.Font() #no real highlighting available?
    highlighted_row_font.bold=True
    highlighted_row_font.colour_index=2 #2 is red,
    highlighted_row_style = xl.XFStyle(); highlighted_row_style.font = highlighted_row_font
    for row_num,row_values in enumerate(values):
        row_num+=1 #start at row 1
        if row_values[1]=='Manatee':
            for col,value in enumerate(row_values):
                #make Manatee's (sp) red
                mysheet.write(row_num,col,value,highlighted_row_style)
        else:
            for col,value in enumerate(row_values):
                #normal row
                mysheet.write(row_num,col,value)
    #save file
    mydoc.save(r'C:testpyexel.xlt')

headers=['Date','Name','Localatity']
data=[
['June 11, 2006','Greg','San Jose'],
['June 11, 2006','Greg','San Jose'],
['June 11, 2006','Greg','San Jose'],
['June 11, 2006','Greg','San Jose'],
['June 11, 2006','Manatee','San Jose'],
['June 11, 2006','Greg','San Jose'],
['June 11, 2006','Manatee','San Jose'],
]

save_in_excel(headers,data)
</code></pre>
"
275378,"<p>Why not give Jumentum a try and see how it works for you?</p>

<p><a href=""http://jumentum.sourceforge.net/"" rel=""nofollow"">http://jumentum.sourceforge.net/</a></p>

<p>it's an open source BASIC for micrcontrollers</p>

<p>The elua project is also lua for microcontrollers</p>

<p><a href=""http://elua.berlios.de/"" rel=""nofollow"">http://elua.berlios.de/</a></p>
"
275524,"<p>If you download one of the trial versions, you can get/install the odbc client and connect that way.</p>

<p>In our version of pervasive (older version) on the server where the database is installed, you can also find this client install.</p>
"
275676,"<p>Your success with createTable() will depend on your existing underlying table schema / data types.  In other words, how well SQLite maps to the database you choose and how SQLObject decides to use your data types.</p>

<p>The safest option may be to create the new database by hand.  Then you'll have to deal with data migration, which may be as easy as instantiating two SQLObject database connections over the same table definitions.</p>

<p>Why not just start with the more full-featured database?</p>
"
108911,"<p>Maybe buildbot would be useful <a href=""http://buildbot.net/trac"" rel=""nofollow"">http://buildbot.net/trac</a> </p>
"
108934,"<p>For your third question, maybe the <code>trace</code> module is what you need:</p>

<pre><code>&gt;&gt;&gt; def y(a): return a*a
&gt;&gt;&gt; def x(a): return y(a)
&gt;&gt;&gt; import trace
&gt;&gt;&gt; tracer = trace.Trace(countfuncs = 1)
&gt;&gt;&gt; tracer.runfunc(x, 2)
4
&gt;&gt;&gt; res = tracer.results()
&gt;&gt;&gt; res.calledfuncs
{('&lt;stdin&gt;', '&lt;stdin&gt;', 'y'): 1, ('&lt;stdin&gt;', '&lt;stdin&gt;', 'x'): 1}
</code></pre>

<p><code>res.calledfuncs</code> contains the functions that were called. If you specify <code>countcallers = 1</code> when creating the tracer, you can get caller/callee relationships. See the <a href=""http://docs.python.org/lib/trace-api.html"" rel=""nofollow"">docs of the <code>trace</code> module</a> for more information.</p>

<p>You can also try to get the calls via static analysis, but this can be dangerous due to the dynamic nature of Python. </p>
"
112540,"<pre><code>var words = from word in dictionary
            where word.key.StartsWith(""bla-bla-bla"");
            select word;
</code></pre>
"
112556,"<pre><code>def main(script, name):
	for word in open(""/usr/share/dict/words""):
		if word.startswith(name):
			print word,

if __name__ == ""__main__"":
	import sys
	main(*sys.argv)
</code></pre>
"
112560,"<p>If you really want to be efficient - use suffix trees or suffix arrays - <a href=""http://en.wikipedia.org/wiki/Suffix_tree"" rel=""nofollow"">wikipedia article</a>.</p>

<p>Your problem is what suffix trees were designed to handle.
There is even implementation for Python - <a href=""http://hkn.eecs.berkeley.edu/~dyoo/python/suffix_trees/"" rel=""nofollow"">here</a></p>
"
176073,"<p>If you're going to be using arrays, consider the numpy or scipy packages, which give you arrays with a lot more flexibility.</p>
"
196847,"<p>In a double-quoted string in Ruby, you can insert the result of a Ruby expression like this:</p>

<pre><code>puts ""Hi!  I'm #{name}, and I'm #{age} years old.""
</code></pre>

<p>Just put an expression inside the curly braces. (It could also be something more complex like #{age + 5}, or #{name + ' ' + last_name}, or a function call.)</p>
"
32402,"<p>Python's standard library provides pretty good facilities for working with Python source; note the <a href=""https://docs.python.org/2/library/tokenize.html"" rel=""nofollow"">tokenize</a> and <a href=""https://docs.python.org/2/library/parser.html"" rel=""nofollow"">parser</a> modules.</p>
"
333658,"<p>It seems that you aren't defining your decorator properly.</p>

<p>A decorator is called only <strong>once</strong> every time you wrap a function with it; from then on the function that the decorator <strong>returned</strong> will be called. It seems that you (mistakenly) believe that the decorator function <strong>itself</strong> will be called every time.</p>

<p>Try something like this instead:</p>

<pre><code>def redirect_to_login(*args, **kwargs):
    return args[0].redirect(users.create_login_url(args[0].request.path))

def admin_only(handler):
    def wrapped_handler(*args, **kwargs):    
        user = users.get_current_user()
        if user:
            if authorized(user):
                return handler(args[0])
            else:
                logging.warning('An unauthorized user has attempted '
                                'to enter an authorized page')
                return redirect_to_login(*args, **kwargs)
        else:
            return redirect_to_login(*args, **kwargs)

    return wrapped_handler
</code></pre>

<p>Note that in the above code, the decorator just defines a new function and returns it, and this new function itself does the relevant checks.</p>
"
176980,"<p>If you have the freedom to change the wiki software, I might suggest looking at <a href=""http://ikiwiki.info"" rel=""nofollow"">ikiwiki</a>. You can set it up so the pages are backed by a real VCS such as Git, in which case you can clone the whole wiki and read and even update it offline.</p>
"
195758,"<p>You could try using the <a href=""http://en.wikipedia.org/wiki/All_You_Zombies%E2%80%94"" rel=""nofollow"">marshal</a> module instead of the c?Pickle one; it could be faster. This module is used by python to store values in a binary format. Note especially the following paragraph, to see if marshal fits your needs:</p>

<blockquote>
  <p>Not all Python object types are supported; in general, only objects whose value is independent from a particular invocation of Python can be written and read by this module. The following types are supported: None, integers, long integers, floating point numbers, strings, Unicode objects, tuples, lists, sets, dictionaries, and code objects, where it should be understood that tuples, lists and dictionaries are only supported as long as the values contained therein are themselves supported; and recursive lists and dictionaries should not be written (they will cause infinite loops). </p>
</blockquote>

<p>Just to be on the safe side, before unmarshalling the dict, make sure that the Python version that unmarshals the dict is the same as the one that did the marshal, since there are no guarantees for backwards compatibility.</p>
"
196308,"<p>if the communication is such a problem, consider writing a 'proxy' that receives your SQL commands over the flaky connection and relays them to the MySQL server on a reliable channel (maybe running on the same box as the MySQL server).  This way you have total control over failure detection and retrying.</p>
"
196360,"<p>You could use the regular expression library which accepts the Posix standard [[:ASCII:]] definition.</p>
"
175286,"<p>Here's some simple (and stupid) code to do encoding translation.  I'm assuming (but you shouldn't) that the input file is in UTF-16 (Windows calls this simply 'Unicode').</p>

<pre><code>input_codec = 'UTF-16'
output_codec = 'ASCII'

unicode_file = open('filename')
unicode_data = unicode_file.read().decode(input_codec)
ascii_file = open('new filename', 'w')
ascii_file.write(unicode_data.write(unicode_data.encode(output_codec)))
</code></pre>

<p>Note that this will not work if there are any characters in the Unicode file that are not also ASCII characters.  You can do the following to turn unrecognized characters into '?'s:</p>

<pre><code>ascii_file.write(unicode_data.write(unicode_data.encode(output_codec, 'replace')))
</code></pre>

<p>Check out <a href=""http://docs.python.org/library/stdtypes.html#str.encode"" rel=""nofollow"">the docs</a> for more simple choices.  If you need to do anything more sophisticated, you may wish to check out <a href=""http://code.activestate.com/recipes/251871/"" rel=""nofollow"">The UNICODE Hammer</a> at the Python Cookbook.</p>
"
175585,"<p>This is an NP-complete problem, I think, so it'll be impossible to have a very fast algorithm for any large data sets. </p>

<p>There's also the problem where you might have a schedule that is impossible to make. Given that that's not the case, something like this pseudocode is probably your best bet:</p>

<pre><code>sort players by priority, highest to lowest
start with empty schedule
for player in players:
    for timeslot in player.preferences():
        if timeslot is free:
            schedule.fillslot(timeslot, player)
            break
    else:
        #if we get here, it means this player couldn't be accomodated at all.
        #you'll have to go through the slots that were filled and move another (higher-priority) player's time slot
</code></pre>
"
111371,"<p>In Python a callable is an object which type has a <code>__call__</code> method:</p>

<pre><code>&gt;&gt;&gt; class Foo:
...  pass
... 
&gt;&gt;&gt; class Bar(object):
...  pass
... 
&gt;&gt;&gt; type(Foo).__call__(Foo)
&lt;__main__.Foo instance at 0x711440&gt;
&gt;&gt;&gt; type(Bar).__call__(Bar)
&lt;__main__.Bar object at 0x712110&gt;
&gt;&gt;&gt; def foo(bar):
...  return bar
... 
&gt;&gt;&gt; type(foo).__call__(foo, 42)
42
</code></pre>

<p>As simple as that :)</p>

<p>This of course can be overloaded:</p>

<pre><code>&gt;&gt;&gt; class Foo(object):
...  def __call__(self):
...   return 42
... 
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f()
42
</code></pre>
"
111952,"<p>Have you taken a look at <a href=""http://inamidst.com/proj/put/put.py"" rel=""nofollow"">put.py</a>? I've used it in the past. You can also just hack up your own request with urllib.</p>
"
111968,"<p>You can of course roll your own with the existing standard libraries at any level from sockets up to tweaking urllib.</p>

<p><a href=""http://pycurl.sourceforge.net/"" rel=""nofollow"">http://pycurl.sourceforge.net/</a></p>

<p>""PyCurl is a Python interface to libcurl.""</p>

<p>""libcurl is a free and easy-to-use client-side URL transfer library, ... supports ... HTTP PUT""</p>

<p>""The main drawback with PycURL is that it is a relative thin layer over libcurl without any of those nice Pythonic class hierarchies. This means it has a somewhat steep learning curve unless you are already familiar with libcurl's C API. ""</p>
"
113201,"<p>There is no way to ``block'' signals temporarily from critical sections (since this is not supported by all Unix flavors).</p>

<p><a href=""https://docs.python.org/library/signal.html"" rel=""nofollow"">https://docs.python.org/library/signal.html</a></p>
"
113219,"<p>There are no direct bindings for this in Python. Accessing them through ctypes is easy enough; here is an example.</p>

<pre><code>import ctypes, signal
libc = ctypes.cdll.LoadLibrary(""libc.so.6"")
libc.sighold(signal.SIGKILL)
libc.sigrelse(signal.SIGKILL)
</code></pre>

<p>I'm not familiar with the use of these calls, but be aware that Python's signal handlers work differently than C. When Python code is attached to a signal callback, the signal is caught on the C side of the interpreter and queued. The interpreter is occasionally interrupted for internal housekeeping (and thread switching, etc). It is during that interrupt the Python handler for the signal will be called.</p>

<p>All that to say, just be aware that Python's signal handling is a little less asynchronous than normal C signal handlers.</p>
"
272605,"<p>There is also <a href=""http://darcs.idyll.org/~t/projects/figleaf/doc/"" rel=""nofollow"">figleaf</a> which I think is based on Ned Batchelder's coverage.py. We use <a href=""http://somethingaboutorange.com/mrl/projects/nose/"" rel=""nofollow"">nose</a> as the driver for the testing. It all works pretty well. We write our unit tests using the built-in unittest and doctest modules.</p>
"
112659,"<p>Genshi.builder is for ""programmatically generating markup streams""[1]. I believe the purpose of it is as a backend for the templating language. You're probably looking for the templating language for generating a whole page.</p>

<p>You can, however do the following:</p>

<pre><code>&gt;&gt;&gt; import genshi.output
&gt;&gt;&gt; genshi.output.DocType('html')
('html', '-//W3C//DTD HTML 4.01//EN', 'http://www.w3.org/TR/html4/strict.dtd')
</code></pre>

<p>See other Doctypes here: <a href=""http://genshi.edgewall.org/wiki/ApiDocs/genshi.output#genshi.output:DocType"" rel=""nofollow"">http://genshi.edgewall.org/wiki/ApiDocs/genshi.output#genshi.output:DocType</a></p>

<pre><code>[1] genshi.builder.__doc__
</code></pre>
"
112819,"<p>Have you tried fetching the login page first?</p>

<p>I would suggest using <a href=""https://addons.mozilla.org/en-US/firefox/addon/966"" rel=""nofollow"">Tamper Data</a> to have a peek at exactly what's being sent when you request the login page and then log in normally using a web browser from a fresh start, with no initial cookies in place, so that your script can replicate it exactly.</p>

<p>That's the approach I used when writing the following, extracted from a script which needs to login to an Invision Power Board forum, using cookielib and urllib2 - you may find it useful as a reference.</p>

<pre><code>import cookielib
import logging
import sys
import urllib
import urllib2

cookies = cookielib.LWPCookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookies))
urllib2.install_opener(opener)
headers = {
    'User-Agent': 'Mozilla/5.0 (Windows; U; Windows NT 5.0; en-GB; rv:1.8.1.12) Gecko/20080201 Firefox/2.0.0.12',
    'Accept': 'text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5',
    'Accept-Language': 'en-gb,en;q=0.5',
    'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7',
}

# Fetch the login page to set initial cookies
urllib2.urlopen(urllib2.Request('http://www.rllmukforum.com/index.php?act=Login&amp;CODE=00', None, headers))

# Login so we can access the Off Topic forum
login_headers = headers.copy()
login_headers.update({
    'Referer': 'http://www.rllmukforum.com/index.php?act=Login&amp;CODE=00',
    'Content-Type': 'application/x-www-form-urlencoded',
})
html = urllib2.urlopen(urllib2.Request('http://www.rllmukforum.com/index.php?act=Login&amp;CODE=01',
                                       urllib.urlencode({
                                           'referer': 'http://www.rllmukforum.com/index.php?',
                                           'UserName': RLLMUK_USERNAME,
                                           'PassWord': RLLMUK_PASSWORD,
                                       }),
                                       login_headers)).read()
if 'The following errors were found' in html:
    logging.error('RLLMUK login failed')
    logging.info(html)
    sys.exit(1)
</code></pre>
"
111978,"<p>There's no standard for the layout of the <code>LIST</code> response. You'd have to write code to handle the most popular layouts. I'd start with Linux <code>ls</code> and Windows Server <code>DIR</code> formats. There's a lot of variety out there, though. </p>

<p>Fall back to the <code>nlst</code> method (returning the result of the <code>NLST</code> command) if you can't parse the longer list. For bonus points, cheat: perhaps the longest number in the line containing a known file name is its length. </p>
"
112337,"<p>The answer to your specific question is no. You can't have two states or otherwise use pack two different ways in the same parent. </p>

<p>However, what I think you want to accomplish is simple. Use the built-in features of the canvas to create an image item that is part of the canvas, then pack things into the canvas as if it were a frame. </p>

<p>You can accomplish a similar thing by creating a label widget with an image, then pack your other widgets into the label.</p>

<p>One advantage to using a canvas is you can easily tile an image to fill the whole canvas with a repeating background image so as the window grows the image will continue to fill the window (of course you can just use a sufficiently large original image...)</p>
"
237094,"<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.stat('feedparser.py').st_mtime
1136961142.0
&gt;&gt;&gt; os.stat('feedparser.py').st_ctime
1222664012.233
&gt;&gt;&gt;
</code></pre>
"
138258,"<p>The associated call to do that for the tk C API would be <a href=""http://linux.about.com/library/cmd/blcmdl3_Tcl_GetCommandInfo.htm"" rel=""nofollow"">Get_GetCommandInfo</a> which</p>

<blockquote>
  <p>places information about the command
  in the Tcl_CmdInfo structure pointed
  to by infoPtr</p>
</blockquote>

<p>However this function is not used anywhere in <a href=""http://svn.python.org/projects/python/trunk/Modules/_tkinter.c"" rel=""nofollow"">_tkinter.c</a> which is the binding for tk used by python trough <a href=""http://svn.python.org/projects/python/trunk/Lib/lib-tk/Tkinter.py"" rel=""nofollow"">Tkinter.py</a>.</p>

<p>Therefore it is impossible to get the bound function out of tkinter. You need to remember that function yourself.</p>
"
138534,"<p>I'd also try ctypes first. </p>

<ol>
<li>Use the Matlab compiler to compile the code into C. </li>
<li>Compile the C code into a DLL.</li>
<li>Use ctypes to load and call code from this DLL</li>
</ol>

<p>The hardest step is probably 1, but if you already know Matlab and have used the Matlab compiler, you should not have serious problems with it.</p>
"
139802,"<p>The trick is to use non-capturing group to match the part of the string <em>following</em> the match (character <strong>x</strong>) we are searching for.
Trying to match the string up to <strong>x</strong> will only find either the first or the last occurence, depending whether non-greedy quantifiers are used.
Here's Greg's idea transposed to Tcl, with comments.</p>

<pre>
set strIn {axbx'cxdxe'fxgh'ixj'k}
set regex {(?x)                     # enable expanded syntax 
                                    # - allows comments, ignores whitespace
            x                       # the actual match
            (?=                     # non-matching group
                [^']*'              # match to end of current quoted substring
                                    ##
                                    ## assuming quotes are in pairs,
                                    ## make sure we actually were 
                                    ## inside a quoted substring
                                    ## by making sure the rest of the string 
                                    ## is what we expect it to be
                                    ##
                (
                    [^']*           # match any non-quoted substring
                    |               # ...or...
                    '[^']*'         # any quoted substring, including the quotes
                )*                  # any number of times
                $                   # until we run out of string :)
            )                       # end of non-matching group
}

#the same regular expression without the comments
set regexCondensed {(?x)x(?=[^']*'([^']|'[^']*')*$)}

set replRegex {P}
set nMatches [regsub -all -- $regex $strIn $replRegex strOut]
puts ""$nMatches replacements. ""
if {$nMatches > 0} {
    puts ""Original: |$strIn|""
    puts ""Result:   |$strOut|""
}
exit
</pre>

<p>This prints:</p>

<pre><code>3 replacements. 
Original: |axbx'cxdxe'fxgh'ixj'k|
Result:   |axbx'cPdPe'fxgh'iPj'k|
</code></pre>
"
236570,"<p>My general rule of thumb is to use dynamic languages for small non-mission-critical projects and statically-typed languages for big projects. I find that code written in a dynamic language such as python gets ""tangled"" more quickly. Partly that is because it is much quicker to write code in a dynamic language and that leads to shortcuts and worse design, at least in my case. Partly it's because I have IntelliJ for quick and easy refactoring when I use Java, which I don't have for python.</p>
"
236596,"<p>I generally find using double __ to be more trouble that they are worth, as it makes unit testing very painful.  using single _ as convention for methods/attributes that are not intended to be part of the public interface of a particular class/module is my preferred approach. </p>
"
138605,"<p>The answer is ""Yes, it is possible"". You could take Python code and attempt to compile it into the equivalent C code using the CPython API. In fact, there used to be a Python2C project that did just that, but I haven't heard about it in many years (back in the Python 1.5 days is when I last saw it.)</p>

<p>You could attempt to translate the Python code into native C as much as possible, and fall back to the CPython API when you need actual Python features. I've been toying with that idea myself the last month or two. It is, however, an awful lot of work, and an enormous amount of Python features are very hard to translate into C: nested functions, generators, anything but simple classes with simple methods, anything involving modifying module globals from outside the module, etc, etc.</p>
"
138888,"<p>Go for a framework. Basic stuffs like session handling are a nightmare if you don't use a one because Python is not web specialized like PHP.</p>

<p>If you think django is too much, you can try a lighter one like the very small but still handy web.py.</p>
"
112505,"<p>You can use <a href=""http://doc.trolltech.com/4.4/qgraphicsview.html"" rel=""nofollow"">QGraphicsView</a> in PyQt. Each state is a new <code>QGraphicsItem</code>, which is either a bitmap or a path object. You just need to provide the outlines (or bitmaps) and the positions of the states. </p>

<p>If you have SVGs of the states, you can use them, too.</p>

<p>There is no generally accepted canvas class for GTK+.</p>
"
237445,"<p>I agree with your solution, which seems an on-the-fly template method. 
<a href=""http://www.artima.com/forums/flat.jsp?forum=122&amp;thread=153649"" rel=""nofollow"">This article</a> deals with your problem and provides exactly your solution.</p>
"
237461,"<p>Something like this will work</p>

<pre><code>class HackedProperty(object):
    def __init__(self, f):
        self.f = f
    def __get__(self, inst, owner):    
        return getattr(inst, self.f.__name__)()

class Foo(object):
    def _get_age(self):
        return 11
    age = HackedProperty(_get_age)

class Bar(Foo):
    def _get_age(self):
        return 44

print Bar().age
print Foo().age
</code></pre>
"
334073,"<p>From taking a quick look at the pdb docs and source code, it doesn't look like there is a built in way to do this.  I suggest that you set an environment variable that indicates debugging is in progress and have your application respond to that.</p>

<pre><code>$ USING_PDB=1 pdb yourprog.py
</code></pre>

<p>Then in yourprog.py:</p>

<pre><code>import os
if os.environ.get('USING_PDB'):
    # debugging actions
    pass
</code></pre>
"
29839,"<p>Most Python programs will use distutils. <a href=""http://www.djangoproject.com"" rel=""nofollow"">Django</a> is a one - see <a href=""http://code.djangoproject.com/svn/django/trunk/setup.py"" rel=""nofollow"">http://code.djangoproject.com/svn/django/trunk/setup.py</a></p>

<p>You should also read <a href=""http://docs.python.org/dist/dist.html"" rel=""nofollow"">the documentation</a>, as it's very comprehensive and has some good examples.</p>
"
30973,"<p>I think the best way for larger projects is optparse, but if you are looking for an easy way, maybe <a href=""http://werkzeug.pocoo.org/documentation/script"" rel=""nofollow"">http://werkzeug.pocoo.org/documentation/script</a> is something for you.</p>

<pre><code>from werkzeug import script

# actions go here
def action_foo(name=""""):
    """"""action foo does foo""""""
    pass

def action_bar(id=0, title=""default title""):
    """"""action bar does bar""""""
    pass

if __name__ == '__main__':
    script.run()
</code></pre>

<p>So basically every function action_* is exposed to the command line and a nice
help message is generated for free. </p>

<pre><code>python foo.py 
usage: foo.py &lt;action&gt; [&lt;options&gt;]
       foo.py --help

actions:
  bar:
    action bar does bar

    --id                          integer   0
    --title                       string    default title

  foo:
    action foo does foo

    --name                        string
</code></pre>
"
31188,"<p>If you plan on searching anything of remotely decent size, your best bet is going to be to use a dictionary or a set.  Otherwise, you basically have to iterate through every element of the iterator until you get to the one you want.</p>

<p>If this isn't necessarily performance sensitive code, then the list comprehension way should work.  But note that it is fairly inefficient because it goes over every element of the iterator and then goes BACK over it again until it finds what it wants.</p>

<p>Remember, python has one of the most efficient hashing algorithms around.  Use it to your advantage.</p>
"
28563,"<p>Maybe it's not terribly idiomatic, but I'd be inclined to go with</p>

<pre><code>x = next()
while x != END:
    do_something_with_x
    x = next()
</code></pre>

<p>... but that's because I find that sort of thing easy to read</p>
"
194472,"<p>This is why you have the <a href=""http://www.python.org/doc/2.5.2/lib/module-site.html"" rel=""nofollow"">site</a> module.  It sets the internal <code>sys.path</code> to include all packages and modules from</p>

<ul>
<li><code>lib/site-packages</code> -- including directories, eggs and <code>.pth</code> files.</li>
<li><code>PYTHONPATH</code></li>
</ul>

<p>This way there is exactly one working copy of your libraries.</p>

<p>There are an unlimited ways to make use of this.  Here are two.</p>

<ol>
<li><p>In each lib, write a <code>setup.py</code> that deploys your lib properly.  When you make changes, you do an <code>svn up</code> to collect the changes and a <code>python setup.py install</code> to deploy the one working copy that every application shares.</p></li>
<li><p>In each app, either depend on things being in the <code>PYTHONPATH</code> environment variable.  Be sure that <code>projects/lib1</code> and <code>projects/lib2</code> are won the <code>PYTHONPATH</code>.  Each app then shares the one working copy of the various libraries.</p></li>
</ol>
"
195102,"<p>I've use the following structure quite effectively.
in SVN.</p>

<pre><code>Lib1/
   branches/
   tags/
   trunk/
     lib1/
     tests/
     setup.py
Lib2
   branches/
   tags/
   trunk/
     lib2/
     tests/
     setup.py
App1
   branches/
   tags/
   trunk/
     app1/
     tests/
     setup.py
App2
   branches/
   tags/
   trunk/
     app2/
     tests/
     setup.py
</code></pre>

<p>I would then create my dev workspace( I use eclipse/pydev) as follows, checking out from either trunk or a branch.</p>

<pre><code>Lib1/
   lib1/
   tests/
   setup.py
Lib2/
   lib2/
   tests/
   setup.py
App1/
   app1/
   tests/
   setup.py
App2/
   app2/
   tests/
   setup.py
</code></pre>

<p>I would then use either eclipse project dependencies setup python path, which works well with eclipse code completion.  setup.py also works but does not support having multiple workspaces well.</p>

<p>For deployment, I use create a single zip with the following structure.</p>

<pre><code>App1/
   lib1-1.1.0-py2.5.egg/
   lib2-1.1.0-py2.5.egg/
   app1/
   sitecustomize.py

App2/
   lib1-1.2.0-py2.5.egg/
   lib2-1.2.0-py2.5.egg/
   app2/
   sitecustomize.py
</code></pre>

<p>I don't use setup install because I want to support multiple versions of the app, also I have some control of the runtime environment, so I don't package python with my deployment but should be easy to add Python into the deployment package if it's needed.</p>
"
195140,"<p>You should compare <em>Decimal</em> to <em>Long Integer</em> performance, not floating point. Floating point is mostly hardware these days. <em>Decimal</em> is used for <strong>decimal precision</strong>, while <em>Floating Point</em> is for wider range. Use the <em>decimal</em> package for monetary calculations.</p>

<p>To quote the <em>decimal</em> package manual:</p>

<blockquote>
  <p>Decimal numbers can be represented exactly. In contrast, numbers like 1.1 do not have an exact representation in binary floating point. End users typically would not expect 1.1 to display as 1.1000000000000001 as it does with binary floating point. </p>
  
  <p>The exactness carries over into arithmetic. In decimal floating point, ""0.1 + 0.1 + 0.1 - 0.3"" is exactly equal to zero. In binary floating point, result is 5.5511151231257827e-017. While near to zero, the differences prevent reliable equality testing and differences can accumulate. For this reason, decimal would be preferred in accounting applications which have strict equality invariants. </p>
</blockquote>
"
195645,"<p>I assume you've pasted the dict literal into the source, and that's what's taking a minute? I don't know how to get around that, but you could probably avoid instantiating this dict upon <em>import</em>... You could lazily-instantiate it the first time it's actually used.</p>
"
176245,"<p>As always start in <a href=""http://en.wikipedia.org/wiki/Index_(search_engine)"" rel=""nofollow"">wikipedia</a>. First start is usually building an inverted index.</p>
"
114373,"<p>You could overload the <code>get_form</code> method of your model admin and add an extra checkbox to the generated form that has to be ticket.  Alternatively you can override <code>change_view</code> and intercept the request.</p>
"
271098,"<p>Just send the template a list of product types and do something like:</p>

<pre><code>{% for product_type in product_type_list %}
    {{ product_type }}
    {% for product in product_type.products.all %}
        {{ product }}
    {% endfor %}
{% endfor %}
</code></pre>

<p>It's been a little while so I can't remember exactly what the syntax is, let me know if that works.  Check the <a href=""http://docs.djangoproject.com/en/dev/topics/db/queries/#related-objects"" rel=""nofollow"">documentation</a>.</p>
"
271494,"<p>It may be a good approach to start with a script, and call a compilation-based language from that script only for more advanced needs.</p>

<p>For instance, <a href=""http://www.javaworld.com/javaworld/jw-07-2006/jw-0717-ruby.html"" rel=""nofollow"">calling java from ruby script</a> works quite well.</p>

<pre><code>require ""java""
# The next line exposes Java's String as JString
include_class(""java.lang.String"") { |pkg, name| ""J"" + name }
s = JString.new(""f"")
</code></pre>
"
271501,"<p>You can build your program in one of the higher level languages for example Python or Ruby and then call modules that are compiled in the lower level language for the parts you need performance. You can choose a platform depending on the lower level language you want.</p>

<p>For example if you want to do C++ for the speedy stuff you can just use plain Python or Ruby and call DLLs compiled in C++. If you want to use Java you can use Jython or one of the other dynamic languages on the Java platform to call the Java code this is easier than the C++ route because you've got a common virtual machine so a Java object can be used directly in Jython or JRuby. The same can be done on the .Net platform with the Iron-languages and C# although you seem to have more experience with C++ and Java so those would be better options.</p>
"
267698,"<blockquote>
  <p>The client will present this as a slide in a presentation in a windows machine</p>
</blockquote>

<p>I think this is the key to your answer. Before going to a 3d implementation and writing all the code in the world to create this feature, you need to look at the presentation software.  Chances are, your options will boil down to two things:</p>

<ol>
<li>Animated Gif</li>
<li>Custom Presentation Scripts</li>
</ol>

<p>Obviously, an animated gif is not ideal due to the fact that it repeats when it is done rendering, and to make it last a long time would make a large gif.</p>

<p>Custom Presentation Scripts would probably be the other way to allow him to bring it up in a presentation without running any side-programs, or doing anything strange. I'm not sure which presentation application is the target, but this could be valuable information.</p>

<p>He sounds like he's more non-technical and requesting something he doesn't realize will be difficult. I think you should come up with some options, explain the difficulty in implementing them, and suggest another solution that falls into the 'bang for your buck' range.</p>
"
268106,"<p>I got it working by uncompressing the .egg so it did not require the cache directory:</p>

<p><a href=""http://stackoverflow.com/questions/268025/install-mysqldb-for-python-as-non-compressed-egg"">http://stackoverflow.com/questions/268025/install-mysqldb-for-python-as-non-compressed-egg</a></p>
"
116197,"<p>a docx file is essentially a zip file with an xml inside it.<br />
the xml contains the formatting but it also contains the text.</p>
"
237976,"<p>I'd like to make the suggestion that when you find yourself encountering this kind of distinction, it may be a good idea to consider using composition instead of inheritance; in other words, instantiating <code>EventMixin</code> (presumably the name would change) instead of inheriting it.</p>
"
238126,"<p>Well, why you want it in 1-line in the first place? </p>

<p>If you really want to, you can always do a trick like this:</p>

<pre><code>def x(func):
  y = func()
  return y[0], y[1:]

# then, instead of calling my_func() call x(my_func)
(head, rest) = x(my_func) # that's one line :)
</code></pre>
"
238153,"<p>extended unpacking was introduced in 3.0
<a href=""http://www.python.org/dev/peps/pep-3132/"" rel=""nofollow"">http://www.python.org/dev/peps/pep-3132/</a></p>
"
116621,"<p>Are you trying to deduce  the structure of a document in plain test?  Are you doing what <a href=""http://docutils.sourceforge.net/"" rel=""nofollow"">docutils</a> does?</p>

<p>You might be able to simply use the <a href=""http://docutils.sourceforge.net/docs/dev/hacking.html#parsing-the-document"" rel=""nofollow"">Docutils parser</a> rather than roll your own.</p>
"
115195,"<p>Abuse of the rules, same result:
    (x for x in 'Word to split')</p>

<p>Actually an iterator, not a list. But it's likely you won't really care.</p>
"
115807,"<p>IMHO a module-level method is a cleaner solution. It hides behind the Python module system that gives it a unique namespace prefix, something the ""factory pattern"" is commonly used for. </p>
"
269043,"<pre><code>for arr in mydict.values():
    for i, s in enumerate(arr):
        if s == 'example':
            arr[i] = 'someotherword'
</code></pre>
"
269379,"<p><a href=""http://www.apps.ietf.org/rfc/rfc2919.html"" rel=""nofollow"">RFC 2919</a> has some info and more references on this.</p>
"
270143,"<p>This might work, it at least passes your demonstration test:
EDIT: I've made some modifications to deal with some string indexing issues. I believe it should be good now.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;cctype&gt;

bool starts_with(const std::string &amp;s1, const std::string &amp;s2) {
    return (s1.length() &lt;= s2.length()) &amp;&amp; (s2.substr(0, s1.length()) == s1);
}

bool ends_with(const std::string &amp;s1, const std::string &amp;s2) {
    return (s1.length() &lt;= s2.length()) &amp;&amp; (s2.substr(s2.length() - s1.length()) == s1);
}

bool is_numeric(const std::string &amp;s) {
    for(std::string::const_iterator it = s.begin(); it != s.end(); ++it) {
        if(!std::isdigit(*it)) {
                return false;
        }
    }
    return true;
}

bool varies_in_single_number_field(std::string s1, std::string s2) {

    size_t index1 = 0;
    size_t index2 = s1.length() - 1;

    if(s1 == s2) {
        return false;
    }

    if((s1.empty() &amp;&amp; is_numeric(s2)) || (s2.empty() &amp;&amp; is_numeric(s1))) {
    	return true;
    }

    if(s1.length() &lt; s2.length()) {
    	s1.swap(s2);
    }

    while(index1 &lt; s1.length() &amp;&amp; starts_with(s1.substr(0, index1), s2)) { index1++; }
    while(ends_with(s1.substr(index2), s2)) { index2--; }

    return is_numeric(s1.substr(index1 - 1, (index2 + 1) - (index1 - 1)));

}

int main() {
    std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field(""foo7bar00"", ""foo123bar00"") &lt;&lt; std::endl;
    std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field(""foo7bar00"", ""foo123bar01"") &lt;&lt; std::endl;
    std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field(""foobar00"", ""foo123bar00"") &lt;&lt; std::endl;
    std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field(""foobar00"", ""foobar00"") &lt;&lt; std::endl;
    std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field(""7aaa"", ""aaa"") &lt;&lt; std::endl;
    std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field(""aaa7"", ""aaa"") &lt;&lt; std::endl;
    std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field(""aaa"", ""7aaa"") &lt;&lt; std::endl;
    std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field(""aaa"", ""aaa7"") &lt;&lt; std::endl;
}
</code></pre>

<p>Basically, it looks for a string which has 3 parts, string2 begins with part1, string2 ends with part3 and part2 is only digits.</p>
"
270535,"<p>If you want to leave the original untouched, and just return a new dictionary with the modifications applied, you can use:</p>

<pre><code>replacements = {'example' : 'someotherword'}

newdict = dict((k, [replacements.get(x,x) for x in v]) 
                for (k,v) in mydict.iteritems())
</code></pre>

<p>This also has the advantage that its easy to extend with new words just by adding them to the replacements dict.  If you want to mutate an existing dict in place, you can use the same approach:</p>

<pre><code>for l in mydict.values():
    l[:]=[replacements.get(x,x) for x in l]
</code></pre>

<p>However it's probably going to be slower than <a href=""http://stackoverflow.com/questions/268891/replacing-multiple-occurrences-in-nested-arrays#269043"">J.F Sebastian's</a> solution, as it rebuilds the whole list rather than just modifying the changed elements in place.</p>
"
271023,"<p>By default <code>urllib2</code> gets the proxy settings from the environment variable, which is why it is using the IE settings.  This is very handy, because you don't need to setup authentication yourself.</p>

<p>You can't apply exceptions like you want to, the easiest way to do this would be to have two <code>opener</code>s and decide which one to use depending on whether the domain is in your exception list or not.</p>

<p>Use the default <code>opener</code> for when you want to use the proxy, and one without a proxy for when you don't need it:</p>

<pre><code>&gt;&gt;&gt; no_proxy = urllib2.ProxyHandler({})
&gt;&gt;&gt; opener = urllib2.build_opener(no_proxy)
&gt;&gt;&gt; urllib2.install_opener(opener)
</code></pre>

<p>From <a href=""http://docs.python.org/howto/urllib2.html?highlight=proxyhandler#proxies"" rel=""nofollow"">here</a>.</p>

<p><strong>Edit:</strong></p>

<p>Here's how I'd do it:</p>

<pre><code>exclusion_list = ['http://www.google.com/', 'http://localhost/']

no_proxy = urllib2.ProxyHandler({})
no_proxy_opener = urllib2.build_opener(no_proxy)

default_proxy_opener = urllib2.build_opener()

url = 'http://www.example.com/'

if url in exclusion_list:
    opener = no_proxy_opener
else:
    opener = default_proxy_opener

page = opener.open(url)
print page
</code></pre>

<p>Your biggest problem will be matching the url to the exclusion list, but that's a whole new question.</p>
"
138548,"<p><a href=""http://psyco.sourceforge.net/"" rel=""nofollow"">Psyco</a> is a kind of just-in-time (JIT) compiler: dynamic compiler for Python, runs code 2-100 times faster, but it needs much memory.</p>

<p>In short: it run your existing Python software much faster, with no change in your source but it doesn't compile to object code the same way a C compiler would.</p>
"
138554,"<p>Jython has a compiler targeting JVM bytecode. The bytecode is fully dynamic, just like the Python language itself! Very cool. (Yes, as Greg Hewgill's answer alludes, the bytecode does use the Jython runtime, and so the Jython jar file must be distributed with your app.)</p>
"
117806,"<p>You might want to look at Python's <a href=""http://docs.python.org/lib/module-decimal.html"" rel=""nofollow"">decimal</a> package, also.  This will provide nice decimal results.</p>

<pre><code>&gt;&gt;&gt; decimal.Decimal('4')/100
Decimal(""0.04"")
</code></pre>
"
265445,"<p>Submit a <a href=""http://www.python.org/dev/patches/"" rel=""nofollow"">patch</a> in which the computation of the time stamp is factored out.  It would almost certainly be accepted.</p>
"
266209,"<p>Most Python applications are moving away from mod_python. It can vary by framework or provider, but most development effort is going into mod_wsgi.</p>

<p>Using the <a href=""https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface"" rel=""nofollow"">WSGI</a> standard will make your Python application server agnostic, and allow for other nice additions like WSGI middleware. Other providers may only provide <a href=""http://en.wikipedia.org/wiki/Common_Gateway_Interface"" rel=""nofollow"">CGI</a> (which won't scale well performance wise), or <a href=""http://en.wikipedia.org/wiki/FastCGI"" rel=""nofollow"">FastCGI</a>.</p>
"
266426,"<p>Maybe <a href=""http://www.artima.com/weblogs/viewpost.jsp?thread=214235"" rel=""nofollow"">this</a> article by the BDFL will help.</p>
"
117025,"<p>It's not true SOAPpy does not work with Python 2.5 - it works, although it's very simple and really, really basic. If you want to talk to any more complicated webservice, ZSI is your only friend.</p>

<p>The really useful demo I found is at <a href=""http://www.ebi.ac.uk/Tools/webservices/tutorials/python"" rel=""nofollow"">http://www.ebi.ac.uk/Tools/webservices/tutorials/python</a> - this really helped me to understand how ZSI works.</p>
"
335717,"<p>Only primitive types are supported for serialization by config parser. I would use JSON or YAML for that kind of requirement.</p>
"
336001,"<p>It is not an answer to your question, but It might be helpful:</p>

<pre><code>#!/usr/bin/env python
import Image

def makefilmstrip(images, mode='RGB', color='white'):
    """"""Return a combined (filmstripped, each on top of the other) image of the images.

    """"""
    width  = max(img.size[0] for img in images)
    height = sum(img.size[1] for img in images)

    image = Image.new(mode, (width, height), color) 

    left, upper = 0, 0
    for img in images:
        image.paste(img, (left, upper))
        upper += img.size[1]

    return image

if __name__=='__main__':
    # Here's how it could be used:
    from glob import glob
    from optparse import OptionParser

    # process command-line args
    parser = OptionParser()
    parser.add_option(""-o"", ""--output"", dest=""file"",
                      help=""write combined image to OUTPUT"")

    options, filepatterns = parser.parse_args()
    outfilename = options.file

    filenames = []
    for files in map(glob, filepatterns):
        if files:
            filenames += files

    # construct image
    images = map(Image.open, filenames)    
    img = makefilmstrip(images)
    img.save(outfilename)
</code></pre>

<p>Example:</p>

<pre><code>$ python filmstrip.py -o output.jpg *.jpg
</code></pre>
"
27600,"<p>Are you looking for Python specific translation, or just the general ""how do you compile some code to bytecode""? If the latter is your case, check <a href=""http://llvm.org/docs/tutorial/"" rel=""nofollow"">the LLVM tutorial</a>. I especially find chapter two, which teaches you to write a compiler for your own language, interesting.</p>
"
193979,"<p>I generally try to use the regular <code>import modulename</code>, unless the module name is long, or used often..</p>

<p>For example, I would do..</p>

<pre><code>from BeautifulSoup import BeautifulStoneSoup as BSS
</code></pre>

<p>..so I can do <code>soup = BSS(html)</code> instead of <code>BeautifulSoup.BeautifulStoneSoup(html)</code></p>

<p>Or..</p>

<pre><code>from xmpp import XmppClientBase
</code></pre>

<p>..instead of importing the entire of xmpp when I only use the XmppClientBase</p>

<p>Using <code>import x as y</code> is handy if you want to import either very long method names , or to prevent clobbering an existing import/variable/class/method (something you should try to avoid completely, but it's not always possible)</p>

<p>Say I want to run a main() function from another script, but I already have a main() function..</p>

<pre><code>from my_other_module import main as other_module_main
</code></pre>

<p>..wouldn't replace my <code>main</code> function with my_other_module's <code>main</code></p>

<p>Oh, one thing - don't do <code>from x import *</code> - it makes your code very hard to understand, as you cannot easily see where a method came from (<code>from x import *; from y import *; my_func()</code> - where is my_func defined?)</p>

<p>In all cases, you <em>could</em> just do <code>import modulename</code> and then do <code>modulename.subthing1.subthing2.method(""test"")</code>...</p>

<p>The <code>from x import y as z</code> stuff is purely for convenience - use it whenever it'll make  your code easier to read or write!</p>
"
194318,"<p><strong>Edit:</strong> Overly wordy answer deleted.</p>

<p>The short answer is, write the rules in Python. Use Iron Python to interface that to the C# client, and Jython for the Java client.</p>
"
194321,"<p>This is answering the followup question :-)</p>

<p>I can point out that one of the most popular chess servers around documents its protocol <a href=""ftp://ftp.chessclub.com/pub/icc/formats/formats.txt"" rel=""nofollow"">here</a> (Warning, FTP link, and does not support passive FTP), but <strong>only to write interfaces to it</strong>, not for any other purpose. You could start writing a client for this server as a learning experience.</p>

<p>One thing that's relevant is that good chess servers offer many more features than just a move relay.</p>

<p>That said, there is a more basic protocol used to interface to chess engines, documented <a href=""http://www.tim-mann.org/xboard/engine-intf.html"" rel=""nofollow"">here</a>.</p>

<p>Oh, and by the way: <a href=""http://en.wikipedia.org/wiki/Board_representation_%28chess%29"" rel=""nofollow"">Board Representation at Wikipedia</a></p>

<p>Anything beyond board representation belongs to the program itself, as many have already pointed out.</p>
"
194326,"<p>There's already a widely used format specific to chess called <a href=""http://en.wikipedia.org/wiki/Portable_Game_Notation"" rel=""nofollow"">Portable Game Notation</a>.  There's also <a href=""http://www.red-bean.com/sgf/"" rel=""nofollow"">Smart Game Format</a>, which is adaptable to many different games.</p>
"
266736,"<p>FWIW, we've found virtualenv [<a href=""http://pypi.python.org/pypi/virtualenv"" rel=""nofollow"">http://pypi.python.org/pypi/virtualenv</a>] to be an invaluable part of our dev setup. We typically work on multiple projects that use different versions of Python libraries etc. It's very difficult to do this on one machine without some way to provide a localized, customized Python environment, as virtualenv does.</p>
"
266862,"<p>Without being able to test the code, what are your results? Have you checked the results returned by the AJAX call? I would suggest you run Firefox with Firebug and log the AJAX results to the Firebug console to see what you get:</p>

<pre><code>//...
        success: function( result ) { 
        console.log( result );
      $('#SubmitForm').after( ""&lt;div&gt;&lt;tt&gt;"" + 
// ...
</code></pre>

<p>You can also use the Net panel of Firebug to see what is being passed back and forth.</p>

<p>Also, what does ""simplejson.dumps(result)"" result in?</p>
"
267654,"<p>I think both FL Studio and Reason can be configured as the default MIDI playback device.  To send MIDI messages to either from VB.NET, you'll need to PInvoke the midiOutOpen, midiOutShortMsg and midiOutClose API calls.  Here's a link to code samples:</p>

<p><a href=""http://www.answers.com/topic/midioutopen"" rel=""nofollow"">http://www.answers.com/topic/midioutopen</a></p>

<p>They're for VB6, but they should be easy to translate to VB.NET.</p>

<p>I know FL Studio can be ""driven"" from a plugin authored for FL (or a VSTx plugin), but I think these are always written in C or C++.</p>

<p>Edit:  I just learned that Windows Vista dropped the MIDI Mapper (which would have made setting up FL or Reason as the default MIDI device simple).  Amazing.  Here is a link I found with an alternative solution:</p>

<p><a href=""http://akkordwechsel.de/15-windows-vista-und-der-midi-mapper/"" rel=""nofollow"">http://akkordwechsel.de/15-windows-vista-und-der-midi-mapper/</a></p>

<p>I just tried it out (it's just a *.CPL file that you double-click to run) and it appears to work (although the GM Synth is the only option available on my laptop, so I'm not sure if it will pick up FL or Reason as choices).</p>
"
267680,"<p>Note: This answer doesn't exactly answer the question you asked but it might achieve the result you want :)</p>

<p>You can author a VST plugin in Java using jVSTWrapper (<a href=""http://jvstwrapper.sourceforge.net/"" rel=""nofollow"">http://jvstwrapper.sourceforge.net/</a>). If you really wanted to use Python you could use Jython to interface to java and do it that way. Alternatively you could just write the plugin in Java or another scripting language for the JVM like Groovy.</p>
"
118142,"<p>The middleware</p>

<pre><code>from wsgiref.util import request_uri
import sys

def logging_middleware(application, stream=sys.stdout):
    def _logger(environ, start_response):
        stream.write('REQUEST\n')
        stream.write('%s %s\n' %(
            environ['REQUEST_METHOD'],
            request_uri(environ),
        ))

        for name, value in environ.items():
            if name.startswith('HTTP_'):
                stream.write('    %s: %s\n' %(
                    name[5:].title().replace('_', '-'),
                    value,
                ))
        stream.flush()
        def _start_response(code, headers):
            stream.write('RESPONSE\n')
            stream.write('%s\n' % code)
            for data in headers:
                stream.write('    %s: %s\n' % data)
            stream.flush()
            start_response(code, headers)
        return application(environ, _start_response)
    return _logger
</code></pre>

<p>The test</p>

<pre><code>def application(environ, start_response):
    start_response('200 OK', [
        ('Content-Type', 'text/html')
    ])
    return ['Hello World']

if __name__ == '__main__':
    logger = logging_middleware(application)
    from wsgiref.simple_server import make_server
    httpd = make_server('', 1234, logger)
    httpd.serve_forever()
</code></pre>

<p>See also the <a href=""http://werkzeug.pocoo.org/documentation/debug"" rel=""nofollow"">werkzeug debugger</a> Armin wrote, it's usefull for interactive debugging.</p>
"
239676,"<p>Further to the other answers, note that the equivalent head / tail operation in Python, including python3's extension of the * syntax is generally going to be less efficient than Haskell's pattern matching.</p>

<p>Python lists are implemented as vectors, so obtaining the tail will need to take a copy of the list.  This is O(n) wrt the size of the list, whereas an implementaion using linked lists like Haskell can merely use the tail pointer, an O(1) operation.</p>

<p>The only exception may be iterator based approaches, where the list isn't actually returned, but an iterator is.  However this may not be applicable all places where a list is desired (eg. iterating multiple times).</p>

<p>For instance, <a href=""http://stackoverflow.com/questions/238102/pattern-matching-of-lists-in-python#238185"">Cipher's</a> approach, if modified to return the iterator rather than converting it to a tuple will have this behaviour.  Alternatively a simpler 2-item only method not relying on the bytecode would be:</p>

<pre><code>def head_tail(lst):
    it = iter(list)
    yield it.next()
    yield it

&gt;&gt;&gt; a, tail = head_tail([1,2,3,4,5])
&gt;&gt;&gt; b, tail = head_tail(tail)
&gt;&gt;&gt; a,b,tail
(1, 2, &lt;listiterator object at 0x2b1c810&gt;)
&gt;&gt;&gt; list(tail)
[3, 4]
</code></pre>

<p>Obviously though you still have to wrap in a utility function rather than there being nice syntactic sugar for it.</p>
"
241430,"<p>You can do this by creating an <a href=""http://docs.djangoproject.com/en/dev/topics/db/models/#extra-fields-on-many-to-many-relationships"" rel=""nofollow"">intermediate model</a> for the M2M relationship and use it as your hook for the <code>post_save</code> and <code>post_delete</code> signals to update the denormalised column in the <code>Article</code> table.</p>

<p>For example, I do this for favourited <code>Question</code> counts in <a href=""http://code.google.com/p/soclone/"" rel=""nofollow"">soclone</a>, where <code>User</code>s have a M2M relationship with <code>Question</code>s:</p>

<pre><code>from django.contrib.auth.models import User
from django.db import connection, models, transaction
from django.db.models.signals import post_delete, post_save

class Question(models.Model):
    # ...
    favourite_count = models.PositiveIntegerField(default=0)

class FavouriteQuestion(models.Model):
    question = models.ForeignKey(Question)
    user     = models.ForeignKey(User)

def update_question_favourite_count(instance, **kwargs):
    """"""
    Updates the favourite count for the Question related to the given
    FavouriteQuestion.
    """"""
    if kwargs.get('raw', False):
        return
    cursor = connection.cursor()
    cursor.execute(
        'UPDATE soclone_question SET favourite_count = ('
            'SELECT COUNT(*) from soclone_favouritequestion '
            'WHERE soclone_favouritequestion.question_id = soclone_question.id'
        ') '
        'WHERE id = %s', [instance.question_id])
    transaction.commit_unless_managed()

post_save.connect(update_question_favourite_count, sender=FavouriteQuestion)
post_delete.connect(update_question_favourite_count, sender=FavouriteQuestion)

# Very, very naughty
User.add_to_class('favourite_questions',
                  models.ManyToManyField(Question, through=FavouriteQuestion,
                                         related_name='favourited_by'))
</code></pre>

<p>There's been a bit of discussion on the django-developers mailing list about implementing a means of declaratively declaring denormalisations to avoid having to write code like the above:</p>

<ul>
<li><a href=""http://groups.google.com/group/django-developers/browse_thread/thread/9a672d5bbbe67562"" rel=""nofollow"">Denormalisation, magic, and is it really that useful?</a></li>
<li><a href=""http://groups.google.com/group/django-developers/browse_thread/thread/6630273ab1869c19"" rel=""nofollow"">Denormalisation Magic, Round Two</a> </li>
</ul>
"
194332,"<p>I would suggest Prolog for describing the rules. </p>
"
27792,"<p>You can always create a class, override the <em><code>__call__</code></em> function and then point the URL file to an instance of the class. You can take a look at the <a href=""http://code.djangoproject.com/browser/django/trunk/django/contrib/formtools/wizard.py"" rel=""nofollow"">FormWizard</a> class to see how this is done.</p>
"
28436,"<p>Writing your own parser could be fun!  It might be a better option because people are expecting to use the familiar spreadsheet syntax (Excel, etc) and not Python when they're entering formulas.  I'm not familiar with safe_eval but I would imagine that anything like this certainly has the potential for exploitation.</p>
"
336545,"<p>I faced the same problem in the past. If you need more complex lists, consider creating your own parser by inheriting from ConfigParser. Then you would overwrite the get method with that:</p>

<pre><code>    def get(self, section, option):
    """""" Get a parameter
    if the returning value is a list, convert string value to a python list""""""
    value = SafeConfigParser.get(self, section, option)
    if (value[0] == ""["") and (value[-1] == ""]""):
        return eval(value)
    else:
        return value
</code></pre>

<p>With this solution you will also be able to define dictionaries in your config file.</p>

<p>But be careful! This is not as safe: this means anyone could run code through your config file. If security is not an issue in your project, I would consider using directly python classes as config files. The following is much more powerful and expendable than a ConfigParser file:</p>

<pre><code>class Section
    bar = foo
class Section2
    bar2 = baz
class Section3
    barList=[ item1, item2 ]
</code></pre>
"
336735,"<p>Did you take some timings to find out whether it makes a difference? </p>

<p>The problem is that, as far as I understand it, Glade always creates all widgets when it parses an XML file, so if you open the XML file and only read a single widget, you are wasting a lot of resources.</p>

<p>The other problem is that you need to re-read the file if you want to have another instance of that widget.</p>

<p>The way I did it before was to put all widgets that were created only once (like the about window, the main window etc) into one glade file, and separate glade files for widgets that needed to be created several times.</p>
"
25117,"<p>You might also like using the processing module (<a href=""http://pypi.python.org/pypi/processing"" rel=""nofollow"">http://pypi.python.org/pypi/processing</a>). It has lot's of functionality for writing parallel systems with the same API as the threading module...</p>
"
337586,"<p>That itertools solution is neat. I have earlier been amazed by itertools.groupby, one handy tool.</p>

<p>But still i was just tinkering if I could do this without itertools. So here it is
(There is one assumption and one drawback though: the file is not huge and its goes for one extra complete iteration over the lines, respectively.)</p>

<p>I created a sample file named ""try"":</p>

<pre><code>hello
world
happy
day
bye
</code></pre>

<p>once you read the file and have the lines in a variable name lines:</p>

<pre><code>lines=open('./try').readlines()
</code></pre>

<p>then </p>

<pre><code>    print [each for each in lines if lines.index(each)&lt;=[lines.index(line) for line in lines if 'happy' in line][0]]
</code></pre>

<p>gives the result:</p>

<pre><code>['hello\n', 'world\n', 'happy\n']
</code></pre>

<p>and </p>

<pre><code>print [each for each in lines if lines.index(each)&lt;=[lines.index(line) for line in lines if 'day' in line][0]]
</code></pre>

<p>gives the result:</p>

<pre><code>['hello\n', 'world\n', 'happy\n', 'day\n']
</code></pre>

<p>So you got the last line - the stop term line also included.</p>
"
178227,"<p>You should read the <a href=""http://docs.python.org/tutorial/"" rel=""nofollow"">python tutorial</a> and esp. the section about <a href=""http://docs.python.org/tutorial/datastructures.html"" rel=""nofollow"">datastructures</a> which also covers <a href=""http://docs.python.org/tutorial/datastructures.html#dictionaries"" rel=""nofollow"">dictionaries.</a></p>
"
193432,"<p>For PNG you can use <a href=""http://packages.python.org/pypng/"" rel=""nofollow"">PyPNG module</a> - lightweight pure-Python PNG decoder/encoder.</p>

<pre><code>import png

point = (10, 20) # coordinates of pixel to read

reader = png.Reader(filename='image.png') # streams are also accepted
w, h, pixels, metadata = reader.read()
pixel_byte_width = 4 if metadata['has_alpha'] else 3
pixel_position = point[0] + point[1] * w
print pixels[
  pixel_position * pixel_byte_width :
  (pixel_position + 1) * pixel_byte_width]
</code></pre>
"
193714,"<p>'Be your own client' : I've found that the technique of writing tests first is an excellent way of ensuring an API is easy to use. Writing tests first means you will be thinking like a 'consumer' of your API rather than just an implementor.  </p>
"
136783,"<p>The standard python library is fairly well documented. Try jumping into python and importing a module say ""os"" and running:</p>

<pre><code>import os   
help(os)
</code></pre>

<p>This reads the doc strings on each of the items in the module and displays it. This is exactly what pydoc will do too.</p>

<p>EDIT: <a href=""http://epydoc.sourceforge.net/"" rel=""nofollow"">epydoc</a> is probably exactly what you're looking for: </p>
"
118182,"<p>Without further details, I'd guess it's quote escaping of some kind.  Both PHP and python's RegEX objects take strings as arguments.  These strings will be escaped by the languge before being passed on to the RegEx engine.</p>

<p>I always using Python's ""raw"" string format when working with regular expressions.  It ensure that ""<a href=""http://www.amk.ca/python/howto/regex/"" rel=""nofollow"">backslashes are not handled in any special way</a>""</p>

<pre><code>r'(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'
</code></pre>
"
117532,"<p>I don't think there is a clever way.  owpython doesn't support that telling from the API documentation.  I guess <code>/proc</code> is your safest bet.  Maybe have a look at the source of the owpython module and check if you can find out how it works.</p>
"
23703,"<p>The latest Sun Java VM actually have multiple GC algorithms which you can tweak.  The Java VM specifications intentionally omitted specifying actual GC behaviour to allow different (and multiple) GC algorithms for different VMs.</p>

<p>For example, for all the people who dislike the ""stop-the-world"" approach of the default Sun Java VM GC behaviour, there are VM such as <a href=""http://www-01.ibm.com/software/webservers/realtime/"" rel=""nofollow"">IBM's WebSphere Real Time</a> which allows real-time application to run on Java.</p>

<p>Since the Java VM spec is publicly available, there is (theoretically) nothing stopping anyone from implementing a Java VM that uses CPython's GC algorithm.</p>
"
24199,"<p>I recall that in previous versions of VS, there was a way to add custom build steps to the build process. I used that a lot to do exactly the kind of automated code generation you describe.</p>

<p>I imagine the custom build step feature is still there in 2008.</p>
"
21302,"<blockquote>
  <p>I want to add a rule that checks for
  the presence of a folder.jpg file in
  each directory, but to add this would
  make the code substantially more messy
  in it's current state..</p>
</blockquote>

<p>This doesn't look bad.  In fact your current code does it very nicely, and Sven mentioned a good way to do it as well:</p>

<ol>
<li>Get a list of all the files</li>
<li>Check for ""required"" files</li>
</ol>

<p>You would just have have add to your dictionary a list of required files:</p>

<pre><code>checker = {
  ...
  'required': ['file', 'list', 'for_required']
}
</code></pre>

<p>As far as there being a better/extensible way to do this?  I am not exactly sure.  I could only really think of a way to possibly drop the ""multiple"" regular expressions and build off of Sven's idea for using a delimiter.  So my strategy would be defining a dictionary as follows (and I'm sorry I don't know Python syntax and I'm a tad to lazy to look it up but it should make sense.  The /regex/ is shorthand for a regex):</p>

<pre><code>check_dict = {
  'delim'    : /\-/,
  'parts'    : [ 'Show Name', 'Episode Name', 'Episode Number' ],
  'patterns' : [/valid name/, /valid episode name/, /valid number/ ],
  'required' : ['list', 'of', 'files'],
  'ignored'  : ['.*', 'hidden.txt'],
  'start_dir': '/path/to/dir/to/test/'
}
</code></pre>

<ol>
<li>Split the filename based on the delimiter.</li>
<li>Check each of the parts.</li>
</ol>

<p>Because its an ordered list you can determine what parts are missing and if a section doesn't match any pattern it is malformed.  Here the <code>parts</code> and <code>patterns</code> have a 1 to 1 ratio.  Two arrays instead of a dictionary enforces the order.</p>

<p>Ignored and required files can be listed.  The <code>.</code> and <code>..</code> files should probably be ignored automatically.  The user should be allowed to input ""globs"" which can be shell expanded.  I'm thinking here of <code>svn:ignore</code> properties, but globbing is natural for listing files.</p>

<p>Here <code>start_dir</code> would be default to the current directory but if you wanted a single file to run automated testing of a bunch of directories this would be useful.</p>

<p>The real loose end here is the path template and along the same lines what path is required for ""valid files"".  I really couldn't come up with a solid idea without writing one large regular expression and taking groups from it... to build a template.  It felt a lot like writing a TextMate language grammar.  But that starts to stray on the ease of use.  The real problem was that the path template was not composed of <code>parts</code>, which makes sense but adds complexity.</p>

<p>Is this strategy in tune with what you were thinking of?</p>
"
338275,"<p>Realize that most fonts are proportional, which means that each character may take a different width.  WWW and lll are both 3 characters, but they will require vastly different sizes of text box.  Some fonts, such as Courier, are designed to be fixed width and will not have this problem.  Unfortunately you may not have any control over which font is selected in the text box.</p>

<p>If you still want to try this, the key is to get the width of a character in pixels, multiply it by the number of characters, then add some padding for the borders around the characters.  You may find this to be a good starting point:</p>

<p><a href=""http://docs.wxwidgets.org/stable/wx_wxdc.html#wxdcgetpartialtextextents"" rel=""nofollow"">http://docs.wxwidgets.org/stable/wx_wxdc.html#wxdcgetpartialtextextents</a></p>

<p>or, as litb suggests:</p>

<p><a href=""http://docs.wxwidgets.org/2.4/wx_wxwindow.html#wxwindowgettextextent"" rel=""nofollow"">http://docs.wxwidgets.org/2.4/wx_wxwindow.html#wxwindowgettextextent</a></p>
"
179760,"<p>Since you seem to be throwing out the 20 minute delta between times 1 and 3 in your example, I'd say you should just sort the list of datetimes, add up the deltas between adjacent times, then divide by n-1.</p>

<p>Do you have any code you can share with us, so we can help you debug it?</p>
"
192633,"<p>While the built-in libs for XML parsing are quite good I am partial to <a href=""http://lxml.de/"" rel=""nofollow"">lxml</a>.</p>

<p>But for parsing RSS feeds, I'd recommend <a href=""https://pypi.python.org/pypi/feedparser"" rel=""nofollow"">Universal Feed Parser</a>, which can also parse Atom.
Its main advantage is that it can digest even most malformed feeds.</p>

<p>Python 2.6 already includes a JSON parser, but a newer <a href=""http://bob.pythonmac.org/archives/2008/09/29/simplejson-201/"" rel=""nofollow"">version with improved speed</a> is available as <a href=""http://simplejson.github.io/simplejson/"" rel=""nofollow"">simplejson</a>.</p>

<p>With these tools building your app shouldn't be that difficult.</p>
"
192651,"<p>No, you can't do that in Python. I consider it to be a good thing.</p>
"
192681,"<p>If you really really <em>really</em> want to do a monkey patch in Python, you can do a (sortof) hack with the ""import foo as bar"" technique.</p>

<p>If you have a class such as TelnetConnection, and you want to extend it, subclass it in a separate file and call it something like TelnetConnectionExtended.</p>

<p>Then, at the top of your code, where you would normally say:</p>

<pre><code>import TelnetConnection
</code></pre>

<p>change that to be:</p>

<pre><code>import TelnetConnectionExtended as TelnetConnection
</code></pre>

<p>and then everywhere in your code that you reference TelnetConnection will actually be referencing TelnetConnectionExtended.</p>

<p>Sadly, this assumes that you have access to that class, and the ""as"" only operates within that particular file (it's not a global-rename), but I've found it to be useful from time to time.</p>
"
177904,"<p><a href=""http://en.wikipedia.org/wiki/Lucene"" rel=""nofollow"">Lucene</a> or <a href=""http://www.searchtools.com/tools/autonomy.html"" rel=""nofollow"">Autonomy</a>! These are not out of the box solutions for you. You will have to write wrappers on top of their interfaces.<br />
 They certainly do take care of the stemming, grammar , relational operators etc</p>
"
118647,"<p>That's not a Bash command, it's a <code>find</code> command. If you really want to port it to Python it's possible, but you'll never be able to write a Python version that's as concise. <code>find</code> has been optimized over 20 years to be excellent at manipulating filesystems, while Python is a general-purpose programming language.</p>
"
263330,"<p>pdc got it right, the following works fine (but fails without the <code>decode</code>):</p>

<pre><code>#!/usr/bin/env python
# -*- coding: utf-8 -*-
import wx

app = wx.PySimpleApp()
app.TopWindow = wx.Frame(None)
field = wx.TextCtrl(app.TopWindow)
field.Value += 'Â°'.decode('ISO8859-1')
app.TopWindow.Show()
app.MainLoop()
</code></pre>
"
263664,"<p>This looks like a perfect scenario for a simple DSL. See <a href=""http://msdn.microsoft.com/en-us/library/bb126235(VS.80).aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/bb126235(VS.80).aspx</a> for some information.</p>

<p>You could also use a scripting language such as lua.Net. </p>
"
263675,"<p>If you really just want a dirt simple language, you want a 'recursive descent parser'.</p>

<p>For example, a language like this:</p>

<pre><code>SCENARIO MyScenario
DELAY 1
COUNT 1 ADD 1
DIRECT_POWER 23, False, 150
WAIT 3
...
END_SCENARIO
</code></pre>

<p>You might have a grammar like:</p>

<pre><code>scenario :: 'SCENARIO' label newline _cmds END_SCENARIO
cmds::  _delay or _count or _direct_power or...
delay:: 'DELAY' number
</code></pre>

<p>Which gives code like:</p>

<pre><code>def scenario():
    match_word('SCENARIO')
    scenario_name = match_label()
    emit('var scenario = new Scenario();')
    cmds()
    match_word('END_SCENARIO')
    emit('byte[] ' + scenario_name + ' = scenario.Compile();')

def delay():
    match_word('DELAY')
    length = match_number()
    emit('scenario.Add(new DelayCommand('+ length +'))')

def cmds():
    word = peek_next_word()
    if word == 'DELAY':
       delay()
    elif ...
</code></pre>
"
263856,"<p>You could append the devenv command onto the end of the original batch file like so:</p>

<pre><code>'%comspec% /k ""...vcvarsall.bat"" x86 &amp;&amp; devenv asdf.sln /rebuild ...'
</code></pre>

<p>(obviously I have shortened the commands for simplicity's sake)</p>
"
263881,"<p>I these situations I use script that does it all. That way you can chain as much as you want. Sometimes I will generate the script on the fly.</p>

<pre><code>compileit.cmd
  call C:\Program Files\Microsoft Visual Studio 9.0\VC\vcvarsall.bat
  devenv $1.sln /rebuild Debug /Out last-build.txt
</code></pre>
"
118037,"<p>That shouldn't be too hard to write yourself as long as you only need the headers.  Try that:</p>

<pre><code>import sys

def log_headers(app, stream=None):
    if stream is None:
        stream = sys.stdout
    def proxy(environ, start_response):
        for key, value in environ.iteritems():
            if key.startswith('HTTP_'):
                stream.write('%s: %s\n' % (key[5:].title().replace('_', '-'), value))
        return app(environ, start_response)
    return proxy
</code></pre>
"
136399,"<p>If it's core functionality for saving the model you'll want it as part of the save method. However, if you already have a functioning model and you want to extend it for other purposes then signals are your best bet since they allow for properly decoupled modules.</p>

<p>A good example might be that you want to add event logging to your site, so you simply listen for the signals that signify an event rather than modifying the original site code.</p>

<p>post_save() is usually best because it means the model has been successfully saved, using pre_save() doesn't guarantee that the save will be successful so shouldn't be used for anything that would depend on the save being completed.</p>
"
136683,"<p>Django makes it possible to whip out a website rapidly, that's for sure. You don't need to be a Python master to use it, and since it's very pythonic in it's design, and there is not really any ""magic"" going on, it will help you learn Python along the way.</p>

<p>Start with the examples, check out some django screencasts from TwiD and you'll be on your way.</p>

<p>Start slow, tweaking the admin, and playing with it via shell is the way to start. Once you have a handle on the ORM and get how things work, start building the real stuff!</p>

<p>The framework isn't going to cause any performance problems, like S. Lott said, it's code you don't have to maintain, and that's the best kind.</p>
"
136721,"<p>Jack M.'s example is nearly correct.</p>

<p>It needs to be a url function, not a tuple, if you want to use named urls.</p>

<pre><code>url(r'^no_monkeys/$', 'views.noMonkeys', {}, ""no-monkeys""),
</code></pre>
"
242262,"<p>You'd probably have to have some glue on another computer which monitored SVN commits and deployed a new version for you. Google Code has yet to develop and release an API (which they need to do soon if they're serious about this whole development thing), but GAE can be deployed to with relative automated ease, so I wouldn't have thought it should be that difficult. The deployment process, however, will vary with each project, so that's something you need to sort out yourself (you might wanna take a look at the <a href=""http://www.nongnu.org/fab/"" rel=""nofollow"">fabric</a> deployment system). Then, just set a cron job going which updates a local SVN checkout on the middle machine, and you're done.</p>
"
242508,"<p>Python has direct bindings to libsvn, so you don't need to invoke the command line client at all. See <a href=""http://jtauber.com/python_subversion_binding/"" rel=""nofollow"">this blog post</a> for more details.</p>

<p>EDIT: You can basically do something like this:</p>

<pre><code>from svn import fs, repos, core
repository = repos.open(root_path)
fs_ptr = repos.fs(repository)
youngest_revision_number = fs.youngest_rev(fs_ptr)
</code></pre>
"
135531,"<p>Okay, everyone here as a different opinion as to the tradeoffs and advantages of xrange versus range.  They're mostly correct, xrange is an iterator, and range fleshes out and creates an actual list.  For the majority of cases, you won't really notice a difference between the two.  (You can use map with range but not with xrange, but it uses up more memory.)</p>

<p>What I think you rally want to hear, however, is that the preferred choice is xrange.  Since range in Python 3 is an iterator, the code conversion tool 2to3 will correctly convert all uses of xrange to range, and will throw out an error or warning for uses of range.  If you want to be sure to easily convert your code in the future, you'll use xrange only, and list(xrange) when you're sure that you want a list.  I learned this during the CPython sprint at PyCon this year (2008) in Chicago.</p>
"
135748,"<p>This is implementation specific, I'm pretty sure. Certainly it depends on the internal representation of integers - you can't assume they'll be stored as 32-bit since Python gives you arbitrarily large integers so perhaps small ints are stored more compactly. </p>

<p>On my Python (2.5.1 on Fedora 9 on core 2 duo) the VmSize before allocation is 6896kB, after is 22684kB. After one more million element assignment, VmSize goes to 38340kB. This very grossly indicates around 16000kB for 1000000 integers, which is around 16 bytes per integer. That suggests a <em>lot</em> of overhead for the list. I'd take these numbers with a large pinch of salt.</p>
"
119847,"<p>Note that even if you did find it this way, there's no guarantee that the longest match is actually the one being looked for.  Instead, you may find common initialisation code or string tables added by the same compiler for instance.</p>
"
119983,"<p>Your question is not clear.</p>

<p>If you want to ""set"" said variables when foo is not running, no, you can't. There is no frame object yet to ""set"" the local variables in.</p>

<p>If you want to do that in the function body, you shouldn't (check the <a href=""http://docs.python.org/lib/built-in-funcs.html"" rel=""nofollow"">python documentation</a> for locals()).</p>

<p>However, you <em>could</em> do a <code>foo.__dict__.update(bar)</code>, and then you could access those variables even from inside the function as foo.a, foo.b and foo.c. The question is: why do you want to do that, and why isn't a class more suitable for your purposes?</p>
"
261191,"<p>I think you could look at the child's <code>__dict__</code> attribute dictionary to check if the data is already there or not.</p>
"
119386,"<p>Never stop learning! </p>

<p>That said, how can you compare the two? How good is Python support in .Net? Is there C# support in Google App Engine? It really depends what your target system is. Therefore, the more languages you have the better equipped you will be to tackle different challenges.</p>
"
137076,"<p>As Mark suggested, use binding variables. The database only has to prepare each statement once, then ""fill in the blanks"" for each execution. As a nice side effect, it will automatically take care of string-quoting issues (which your program isn't handling).</p>

<p>Turn transactions on (if they aren't already) and do a single commit at the end of the program. The database won't have to write anything to disk until all the data needs to be committed. And if your program encounters an error, none of the rows will be committed, allowing you to simply re-run the program once the problem has been corrected.</p>

<p>Your log_hostname, log_person, and log_date functions are doing needless SELECTs on the tables. Make the appropriate table attributes PRIMARY KEY or UNIQUE. Then, instead of checking for the presence of the key before you INSERT, just do the INSERT. If the person/date/hostname already exists, the INSERT will fail from the constraint violation. (This won't work if you use a transaction with a single commit, as suggested above.)</p>

<p>Alternatively, if you know you're the only one INSERTing into the tables while your program is running, then create parallel data structures in memory and maintain them in memory while you do your INSERTs. For example, read in all the hostnames from the table into an associative array at the start of the program. When want to know whether to do an INSERT, just do an array lookup. If no entry found, do the INSERT and update the array appropriately. (This suggestion is compatible with transactions and a single commit, but requires more programming. It'll be wickedly faster, though.)</p>
"
241542,"<p>It shouldn't be too hard in most languages.  Does the following pseudo-code help?</p>

<pre><code>for(int i=0; i &lt; 2^digits; i++)
{
     WriteLine(ToBinaryString(i));
}
</code></pre>
"
241577,"<p>A basic function to produce all the permutations of a list is given below. In this approach, permutations are created lazily by using generators.</p>

<pre><code>def perms(seq):
    if seq == []:
        yield []
    else:
        res = []
        for index,item in enumerate(seq):
            rest = seq[:index] + seq[index+1:]
            for restperm in perms(rest):
                yield [item] + restperm

alist = [1,1,0]
for permuation in perms(alist):
    print permuation
</code></pre>
"
193807,"<p>Try to write a common unit test suite for both. Maybe by wrapping a class in one language for calling it from the other. If you can't do it, at least make sure the two versions of the tests are equivalent.</p>
"
177311,"<p>abs value fartherest from zero:</p>

<pre><code>select max(abs(mycol)) from mytbl
</code></pre>

<p>will be zero if the value is negative:</p>

<pre><code>select n+abs(mycol)
  from zzz
 where abs(mycol)=(select max(abs(mycol)) from mytbl);
</code></pre>
"
260085,"<p>What happens if you have a dictionary such as</p>

<pre><code>regex_dict = { re.compile(""foo.*""): 5, re.compile(""f.*""): 6 }
</code></pre>

<p>In this case <code>regex_dict[""food""]</code> could legitimately return either 5 or 6.</p>

<p>Even ignoring that problem, there's probably no way to do this efficiently with the regex module.  Instead, what you'd need is an internal directed graph or tree structure.</p>
"
260339,"<p>I think I remember adapting the code from <a href=""http://manugarg.blogspot.com/2007/04/tailing-in-python.html"" rel=""nofollow"">this blog post from Manu Garg</a> when I had to do something similar.</p>
"
178209,"<p><em>By using Gears with the Firefox Greasemonkey plugin, you can inject Gears code into any website that you want. Don't wait for your favorite website to enable offline support -- do it yourself.</em> <a href=""http://code.google.com/apis/gears/articles/gearsmonkey.html"" rel=""nofollow"">http://code.google.com/apis/gears/articles/gearsmonkey.html</a></p>
"
339463,"<p>I do it this way.  It's slightly simpler.</p>

<pre><code>try:
    a = Site.objects.get(domain=url)
    raise forms.ValidationError(""That URL is already in the database.  Please submit a unique URL."")
except Site.DoesNotExist:
    pass
return url
</code></pre>
"
339587,"<p>You may also consider using line.rstrip() to remove the whitespaces at the end of your line.</p>
"
339884,"<p>Using the ending 3 words, no need for regexps (using the <code>time</code> module):</p>

<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; a=""Some Random text of undetermined length Jan 28, 1986""
&gt;&gt;&gt; datetuple = a.rsplit("" "",3)[-3:]
&gt;&gt;&gt; datetuple
['Jan', '28,', '1986']
&gt;&gt;&gt; time.strptime(' '.join(datetuple),""%b %d, %Y"")
time.struct_time(tm_year=1986, tm_mon=1, tm_mday=28, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=1, tm_yday=28, tm_isdst=-1)
&gt;&gt;&gt;
</code></pre>

<p>Using the <code>datetime</code> module:</p>

<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.strptime("" "".join(datetuple), ""%b %d, %Y"")
datetime.datetime(1986, 1, 28, 0, 0)
&gt;&gt;&gt;
</code></pre>
"
19692,"<p>@darkdog:</p>

<p>Using a new language in production code is about more than easy syntax and high-level capability. You want to be familiar with core APIs and feel like you can fix something through logic instead of having to comb through the documentation.</p>

<p>I'm not saying transitioning to Python would be a bad idea for this company, but I'm with John--keep things simple during the transition. The new lead will appreciate having a say in such decisions.</p>

<p>If you'd really, really, really like to introduce Python, consider writing some extensions or utilities in straight-up Python or in the framework. You won't be upsetting your core initiatives, so it will be a low/no-risk opportunity to prove the merits of a switch.</p>
"
20222,"<p>I prefer optparse to getopt. It's very declarative: you tell it the names of the options and the effects they should have (e.g., setting a boolean field), and it hands you back a dictionary populated according to your specifications.</p>

<p><a href=""http://docs.python.org/lib/module-optparse.html"" rel=""nofollow"">http://docs.python.org/lib/module-optparse.html</a></p>
"
180855,"<p>Unfortunately there's no easy way to do this.  The filtering does not seem to be saved in any session variable.</p>

<p>Clicking back twice is the normal method, but it can be unweildy and annoying if you've just changed an object so that it should no longer be shown using your filter.</p>

<p>If it's just a one-off, click back twice or go through the filtering again, it's the easiest way.</p>

<p>If you're going to be filtering more often, or you just want to learn about hacking the admin (which is pretty open and easy), you'll want to write a <a href=""http://code.djangoproject.com/browser/django/trunk/django/contrib/admin/filterspecs.py"" rel=""nofollow"">FilterSpec</a>.</p>

<p>Have a look <a href=""http://www.djangosnippets.org/snippets/1051/"" rel=""nofollow"">here</a> and <a href=""http://www.djangosnippets.org/snippets/587/"" rel=""nofollow"">here</a> for examples of people writing their own.</p>

<p>A really, really terrible way to do this would be to edit the admin interface so that after you click ""Save"", you are redirected to you filtered URL.  I wouldn't recommend this at all, but it's an option.</p>

<p>Another fairly simple way to do this would be to write a generic view to show your filtered objects, then use Django forms to edit the items from there.  I'd have a look at this, you'll be stunned just how little code you have to write to get a simple view/edit page going.</p>
"
191074,"<p>If you are looking for a start-to-finish solution then it's worth mentioning that the leader of the pack in that space is <a href=""http://www.djangoproject.com/"" rel=""nofollow"">Django</a></p>
"
191790,"<p>Are you sure that the machine does not have a 128M process limit? If you are running the python script as a CGI inside a web server, it is quite likely that there is a process limit set - you will need to look at the web server configuration.</p>
"
120109,"<p>My problem was indeed the confusion of classes vs. instances. I was trying to do everything via classes without ever creating an actual instance. Plus, I was forcing the ""BasicInfoPage"" class to do too much work.</p>

<p>Ultimately, I created a new class (<strong>BaseAttribs</strong>) to hold all the variables I need. I then created in instance of that class when I run the wizard and pass that instance as an argument to the classes that need it, as shown below:</p>

<pre><code>#---Run the wizard
if __name__ == ""__main__"":
    app = wx.PySimpleApp()
    wizard = wiz.Wizard(None, -1, ""TW2K Character Creation"")
    attribs = BaseAttribs

#---Create each page
    page1 = IntroPage(wizard, ""Introduction"")
    page2 = BasicInfoPage(wizard, ""Basic Info"", attribs)
    page3 = Ethnicity(wizard, ""Ethnicity"")
    page4 = MOS(wizard, ""Military Occupational Specialty"", attribs)
</code></pre>

<p>I then used the information S.Lott provided and created individual instances (if that's what it's called) within each class; each class is accessing the same variables though.</p>

<p>Everything works, as far as I can tell. Thanks.</p>
"
120121,"<p>The general solution I use for any site is to access the page using Firefox and, using an extension such as Firebug, record all details of the HTTP request including any cookies.</p>

<p>In your program (in this case in Python) you should try to send a HTTP request as similar as necessary to the one that worked from Firefox. This often includes setting the User-Agent, Referer and Cookie fields, but there may be others.</p>
"
120454,"<p>Armin's suggestion of the array module is probably best.  Two possible alternatives:</p>

<ul>
<li>You can create an extension module yourself that provides the data structure that you're after.  If it's really just something like a collection of shorts, then
that's pretty simple to do.</li>
<li>You can
cheat and manipulate bits, so that
you're storing one number in the
lower half of the Python int, and
another one in the upper half. 
You'd write some utility functions
to convert to/from these within your
data structure.  Ugly, but it can be made to work.</li>
</ul>

<p>It's also worth realising that a Python integer object is not 4 bytes - there is additional overhead.  So if you have a really large number of shorts, then you can save more than two bytes per number by using a C short in some way (e.g. the array module).</p>

<p>I had to keep a large set of integers in memory a while ago, and a dictionary with integer keys and values was too large (I had 1GB available for the data structure IIRC).  I switched to using a IIBTree (from ZODB) and managed to fit it.  (The ints in a IIBTree are real C ints, not Python integers, and I hacked up an automatic switch to a IOBTree when the number was larger than 32 bits).</p>
"
260648,"<p>I ran into that problem, parsing the last hour of LARGE syslog files, and used this function from activestate's recipe site... (<a href=""http://code.activestate.com/recipes/439045/"" rel=""nofollow"">http://code.activestate.com/recipes/439045/</a>)</p>

<pre><code>!/usr/bin/env python
# -*-mode: python; coding: iso-8859-1 -*-
#
# Copyright (c) Peter Astrand &lt;astrand@cendio.se&gt;

import os
import string

class BackwardsReader:
    """"""Read a file line by line, backwards""""""
    BLKSIZE = 4096

    def readline(self):
        while 1:
            newline_pos = string.rfind(self.buf, ""\n"")
            pos = self.file.tell()
            if newline_pos != -1:
                # Found a newline
                line = self.buf[newline_pos+1:]
                self.buf = self.buf[:newline_pos]
                if pos != 0 or newline_pos != 0 or self.trailing_newline:
                    line += ""\n""
                return line
            else:
                if pos == 0:
                    # Start-of-file
                    return """"
                else:
                    # Need to fill buffer
                    toread = min(self.BLKSIZE, pos)
                    self.file.seek(-toread, 1)
                    self.buf = self.file.read(toread) + self.buf
                    self.file.seek(-toread, 1)
                    if pos - toread == 0:
                        self.buf = ""\n"" + self.buf

    def __init__(self, file):
        self.file = file
        self.buf = """"
        self.file.seek(-1, 2)
        self.trailing_newline = 0
        lastchar = self.file.read(1)
        if lastchar == ""\n"":
            self.trailing_newline = 1
            self.file.seek(-1, 2)

# Example usage
br = BackwardsReader(open('bar'))

while 1:
    line = br.readline()
    if not line:
        break
    print repr(line)
</code></pre>

<p>It works really well and is much more efficient then anything like fileObj.readlines()[-10:], which makes python read the entire file into memory and then chops the last ten lines off of it.</p>
"
260886,"<p>There is a Perl module that does just this <a href=""http://search.cpan.org/~davecross/Tie-Hash-Regex-1.02/lib/Tie/Hash/Regex.pm"" rel=""nofollow"">Tie::Hash::Regex</a>.</p>

<pre><code>use Tie::Hash::Regex;
my %h;

tie %h, 'Tie::Hash::Regex';

$h{key}   = 'value';
$h{key2}  = 'another value';
$h{stuff} = 'something else';

print $h{key};  # prints 'value'
print $h{2};    # prints 'another value'
print $h{'^s'}; # prints 'something else'

print tied(%h)-&gt;FETCH(k); # prints 'value' and 'another value'

delete $h{k};   # deletes $h{key} and $h{key2};
</code></pre>
"
257413,"<p>Use htmllib to extract all img tags (override do_img), then use urllib2 to download all the images.</p>
"
257532,"<p>I've heard good things about wx python, which is also multi-platform. </p>
"
258282,"<p>Sounds like <a href=""https://github.com/clintecker/django-chunks"" rel=""nofollow"">django-chunks</a> to me.</p>
"
121653,"<p>Cairo cannot render SVG out of the box.
It seems we have to use librsvg.</p>

<p>Just found those two pages:</p>

<ul>
<li><a href=""http://www.cairographics.org/cookbook/librsvgpython/"" rel=""nofollow"">Rendering SVG with libRSVG,Python and c-types</a> </li>
<li><a href=""http://www.cairographics.org/pyrsvg/"" rel=""nofollow"">How to use librsvg from Python</a></li>
</ul>

<p>Something like this should probably work (render <strong>test.svg</strong> to <strong>test.png</strong>):</p>

<pre><code>import cairo
import rsvg

WIDTH, HEIGHT  = 256, 256
surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, WIDTH, HEIGHT)

ctx = cairo.Context (surface)

svg = rsvg.Handle(file=""test.svg"")
svg.render_cairo(ctx)

surface.write_to_png(""test.png"")
</code></pre>
"
121745,"<p>On a related note, Python's <a href=""http://docs.python.org/lib/standard-encodings.html"" rel=""nofollow"">builtin encoders</a> can also do string escaping:</p>

<pre><code>&gt;&gt;&gt; print ""that's interesting"".encode('string_escape')
that\'s interesting
</code></pre>
"
122062,"<p>I will forgo the simplest solutions using the 'random' module since I take it that's not really what you are after. Here's what I think you are looking for in Python:</p>

<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; 
&gt;&gt;&gt; def getUniqueRandomNumbers(num, highest):
...     seen = set()
...     while len(seen) &lt; num:
...         i = random.randrange(0, highest)
...         if i not in seen:
...             seen.add(i)  
...             yield i
... 
&gt;&gt;&gt;
</code></pre>

<p>To show you how it works:</p>

<pre><code>&gt;&gt;&gt; list(getUniqueRandomNumbers(10, 100))
[81, 57, 98, 47, 93, 31, 29, 24, 97, 10]
</code></pre>
"
122121,"<p>Here's another Ruby solution:</p>

<pre><code>a = (1..5).collect { rand(100) }
a &amp; a
</code></pre>

<p>I think, with your LINQ statement, the Distinct will remove duplicates after 5 have already been taken, so you aren't guaranteed to get 5 back. Someone can correct me if I'm wrong, though.</p>
"
244455,"<p>Dumb way, but one that comes immediately to my mind:</p>

<pre><code>def fields_from_list(keys, values):
    iterator = iter(values)
    while True:
        yield dict((key, iterator.next()) for key in keys)

list(fields_from_list(keys, values)) # to produce a list.
</code></pre>
"
244461,"<p><code>zip</code> nearly does what you want; unfortunately, rather than cycling the shorter list, it breaks. Perhaps there's a related function that cycles?</p>

<pre><code>$ python
&gt;&gt;&gt; keys = ['name', 'age']
&gt;&gt;&gt; values = ['Monty', 42, 'Matt', 28, 'Frank', 33]
&gt;&gt;&gt; dict(zip(keys, values))
{'age': 42, 'name': 'Monty'}
</code></pre>

<p>/EDIT: Oh, you want a <em>list</em> of <em>dict</em>. The following works (thanks to Peter, as well):</p>

<pre><code>from itertoos import cycle

keys = ['name', 'age']
values = ['Monty', 42, 'Matt', 28, 'Frank', 33]

x = zip(cycle(keys), values)
map(lambda a: dict(a), zip(x[::2], x[1::2]))
</code></pre>
"
244618,"<p>In the answer by <a href=""http://stackoverflow.com/questions/244438/map-two-lists-into-one-single-list-of-dictionaries#244461"">Konrad Rudolph</a></p>

<blockquote>
  <p>zip nearly does what you want; unfortunately, rather than cycling the shorter list, it breaks. Perhaps there's a related function that cycles?</p>
</blockquote>

<p>Here's a way:</p>

<pre><code>keys = ['name', 'age']
values = ['Monty', 42, 'Matt', 28, 'Frank', 33]
iter_values = iter(values)
[dict(zip(keys, iter_values)) for _ in range(len(values) // len(keys))]
</code></pre>

<p>I will not call it Pythonic (I think it's too clever), but it might be what are looking for.</p>

<p>There is no benefit in cycling the <code>keys</code> list using <a href=""http://www.python.org/doc/2.5.2/lib/itertools-functions.html"" rel=""nofollow""><code>itertools</code></a><code>.cycle()</code>, because each traversal of <code>keys</code> corresponds to the creation of one dictionnary.</p>

<p><strong>EDIT:</strong> Here's another way:</p>

<pre><code>def iter_cut(seq, size):
    for i in range(len(seq) / size):
        yield seq[i*size:(i+1)*size]

keys = ['name', 'age']
values = ['Monty', 42, 'Matt', 28, 'Frank', 33]
[dict(zip(keys, some_values)) for some_values in iter_cut(values, len(keys))]
</code></pre>

<p>This is much more pythonic: there's a readable utility function with a clear purpose, and the rest of the code flows naturally from it.</p>
"
135276,"<p>The 'struct' module should be able to do this, although alignment of structs in the middle of the data is always an issue. It's not very hard to get it right, however: find out (once) what boundary the structs-in-structs align to, then pad (manually, with the 'x' specifier) to that boundary. You can doublecheck your padding by comparing struct.calcsize() with your actual data. It's certainly easier than writing a C extension for it.</p>

<p>In order to keep using Py_BuildValue() like that, you have two options. You can determine the size of time_t at compiletime (in terms of fundamental types, so 'an int' or 'a long' or 'an ssize_t') and then use the right format character to Py_BuildValue -- 'i' for an int, 'l' for a long, 'n' for an ssize_t. Or you can use PyInt_FromSsize_t() manually, in which case the compiler does the upcasting for you, and then use the 'O' format characters to pass the result to Py_BuildValue.</p>
"
258530,"<p>Actually, I still don't quite get it.  I can see that iterating an Exception gives you the original args to the exception, I'm just not sure why anyone would want that.  Implicit iteration is I think one of the few gotchas in Python that still trips me up.</p>
"
259027,"<p>Look into the command-line options for <code>manage.py</code>; there's a command to dump all of the model data to JSON, and another command to load it back in from JSON. You can export all of your model data, add your new field to the model, then import your data back in. Just make sure that you set the <code>db_column</code> option to <code>'id'</code> so you don't break your existing data.</p>

<p><strong>Edit</strong>: Specifically, you want the commands <a href=""http://docs.djangoproject.com/en/dev/ref/django-admin/#dumpdata"" rel=""nofollow""><code>dumpdata</code></a> and <a href=""http://docs.djangoproject.com/en/dev/ref/django-admin/#loaddata-fixture-fixture"" rel=""nofollow""><code>loaddata</code></a>.</p>
"
121426,"<p>You can get something suitable for that purpose with:</p>

<pre><code>id(self)
</code></pre>
"
259659,"<p>Splitting names is harder than it looks.  Some names have two word last names; some people will enter a first, middle, and last name; some names have two work first names.  The more reliable (or least unreliable) way to handle names is to always capture first and last name in separate fields.  Of course this raises its own issues, like how to handle people with only one name, making sure it works for users that have a different ordering of name parts.</p>

<p>Names are hard, handle with care.</p>
"
259729,"<p>Replace the call:</p>

<pre><code>super(ConstParser, self).__init__(defaults)
</code></pre>

<p>with:</p>

<pre><code>SafeConfigParser.__init__(self, defaults)
</code></pre>

<p>and it works just fine without multiple Inheritance.</p>
"
340152,"<p>There's an obvious <em>disadvantage</em> which is that everyone working on the code now needs to be proficient in two languages, not just one.  I'm fairly hairy but not very pointy, but I do see why managers might be sceptical.</p>
"
340220,"<p>The usual implementation of what you want in python would be this:</p>

<pre><code>class CallProxy(object):
    'this class wraps a callable in an object'
    def __init__(self, fun):
        self.fun = fun

    def __call__(self, *args, **kwargs):
        return self.fun(*args, **kwargs)

class ObjProxy(object):
    ''' a proxy object intercepting attribute access
    '''
    def __init__(self, obj):
        self.__dict__['_ObjProxy__obj'] = obj

    def __getattr__(self, name):
        attr = getattr(self.__obj, name)
        if callable(attr):
            return CallProxy(attr)
        else:
            return attr

    def __setattr__(self, name, value):
        setattr(self.__obj, name, value)
</code></pre>

<p>I wrote a test to prove that this behaves as expected:</p>

<pre><code>#keep a list of calls to the TestObj for verification
call_log = list()
class TestObj(object):
    ''' test object on which to prove
        that the proxy implementation is correct
    '''
    def __init__(self):
        #example attribute
        self.a = 1
        self._c = 3

    def b(self):
        'example method'
        call_log.append('b')
        return 2

    def get_c(self):
        call_log.append('get_c')
        return self._c
    def set_c(self, value):
        call_log.append('set_c')
        self._c = value
    c = property(get_c, set_c, 'example property')

def verify(obj, a_val, b_val, c_val):
    'testing of the usual object semantics'
    assert obj.a == a_val
    obj.a = a_val + 1
    assert obj.a == a_val + 1
    assert obj.b() == b_val
    assert call_log[-1] == 'b'
    assert obj.c == c_val
    assert call_log[-1] == 'get_c'
    obj.c = c_val + 1
    assert call_log[-1] == 'set_c'
    assert obj.c == c_val + 1

def test():
    test = TestObj()
    proxy = ObjProxy(test)
    #check validity of the test
    verify(test, 1, 2, 3)
    #check proxy equivalent behavior
    verify(proxy, 2, 2, 4)
    #check that change is in the original object
    verify(test, 3, 2, 5)

if __name__ == '__main__':
    test()
</code></pre>

<p>This executes on CPython without any assert throwing an exception. IronPython should be equivalent, otherwise it's broken and this test should be added to its unit test suite.</p>
"
340342,"<p>Well, it depends... ;) If you're going to use the old code together with new Python code, it might be useful, not so much for speed but for easier integration. But usually: ""If it ain't broke, don't fix it"". Allso rewriting can result in better code, but only do it if you need to.</p>

<p>As a hobby project of course it's worth it, cause the process is the goal.</p>
"
340369,"<p>Try this:</p>

<pre><code>class Test(object):
    _test = 0

    def test():
        def fget(self):
            return self._test
        def fset(self, value):
            self._test = value
        return locals()
    test = property(**test())

    def greet(self, name):
        print ""hello"", name


class Proxy(object):
    def __init__(self, obj):
        self._obj = obj

    def __getattribute__(self, key):
        obj = object.__getattribute__(self, ""_obj"")
        return getattr(obj, key)

    def __setattr__(self, name, value):
        if name == ""_obj"":
            object.__setattr__(self, name, value)
        else:
            obj = object.__getattribute__(self, ""_obj"")
            setattr(obj, name, value)


t = Test()
p = Proxy(t)
p.test = 1
assert t.test == p.test
p.greet(""world"")
</code></pre>
"
340398,"<p>Rewrites are very expensive: you spend a lot of time doing something which doesn't directly help you. Joel Spolsky elaborates on this:</p>

<p><a href=""http://www.joelonsoftware.com/articles/fog0000000069.html"" rel=""nofollow"">Things You Should Never Do, Part I</a></p>

<p>You should do it if the benefits outweigh the costs; just be careful that you don't underestimate the costs.</p>
"
340604,"<p>As others have said, look at why you are doing it.</p>

<p>For instance, at work I am rewriting our existing inventory/sales system to a Python/django backend. Why? Because the existing PHP code base is stale, and is going to scale poorly as we  grow our business (plus it was built when our business model was different, then patched up to match our current needs which resulted in some spaghetti code)</p>

<p>So basically, if you think you're going to benefit from it in ways that aren't just ""sweet this is in python now!"" then go for it.</p>
"
15261,"<p>You might want to check MySQL's timeout variables:</p>

<pre><code>show variables like '%timeout%';
</code></pre>

<p>You're probably interested in <code>wait_timeout</code> (less likely but possible: <code>interactive_timeout</code>).  On Debian and Ubuntu, the defaults are 28800 (MySQL kills connections after 8 hours), but maybe the default for your platform is different or whoever administrates the server has configured things differently.</p>

<p>AFAICT, <code>pool_recycle</code> doesn't actually keep the connections alive, it expires them on its own before MySQL kills them.  I'm not familiar with pylons, but if causing the connections to intermittently do a <code>SELECT 1;</code> is an option, that will keep them alive at the cost of basically no server load and minimal network traffic.  One final thought: are you somehow managing to use a connection that pylons thinks it has expired?</p>
"
341216,"<p>As far as I know Python runs off of the commandline using the PATH variable as opposed to a registry setting.</p>

<p>So if you point to the correct version on your PATH you will use that. Remember to restart your command prompt to use the new PATH settings.</p>
"
341329,"<p>You can use win32api module and call WinApi functions.
<a href=""http://code.activestate.com/recipes/360649/"" rel=""nofollow"">Recipe at code.activestate.com</a></p>
"
341513,"<p>Since you are starting with decorators, I think reading these will be helpful, so that you know the pitfalls and workarounds beforehand.</p>

<p>Here are two links to earlier discussions on decorators.</p>

<p><a href=""http://stackoverflow.com/questions/306130/python-decorator-makes-function-forget-that-it-belongs-to-a-class#306277"">http://stackoverflow.com/questions/306130/python-decorator-makes-function-forget-that-it-belongs-to-a-class#306277</a>
<a href=""http://stackoverflow.com/questions/308999/what-does-functoolswraps-do"">http://stackoverflow.com/questions/308999/what-does-functoolswraps-do</a></p>

<p>Moreover the second link mentions 'functools' a module for higher-order functions, that act on or return other functions. Use of functools.wraps is advised since it preserves the doc string of the original function(decorated one).</p>

<p>Another issue was wrong method signatures while generating automatic docs for my project.
but there is a workaround:
<a href=""http://stackoverflow.com/questions/147816/preserving-signatures-of-decorated-functions"">http://stackoverflow.com/questions/147816/preserving-signatures-of-decorated-functions</a></p>

<p>Hope this helps.</p>
"
182067,"<p>""all"" and ""any"" are nice for the many conditions of same type case. BUT they always evaluates all conditions. As shown in this example:</p>

<pre><code>def c1():
    print "" Executed c1""
    return False
def c2():
    print "" Executed c2""
    return False


print ""simple and (aborts early!)""
if c1() and c2():
    pass

print

print ""all (executes all :( )""
if all((c1(),c2())):
    pass

print
</code></pre>
"
181239,"<p>Say <code>a</code> is your list</p>

<pre><code>sumdeltas = timedelta(seconds=0)
i = 1
while i &lt; len(a):
    sumdeltas += a[i-1] - a[i]
    i = i + 1

avg_delta = sumdeltas / (len(a) - 1)
</code></pre>

<p>This will indeed average your deltas together.</p>
"
181511,"<p>I've also had problems with owfs.  I found it to be an overengineered solution to what is a simple problem.  Now I'm using the <a href=""http://www.digitemp.com/"" rel=""nofollow"">DigiTemp</a> code without a problem.  I found it to be flexible and reliable.  For instance, I store the room's temperature in a log file every minute by running</p>

<pre><code>/usr/local/bin/digitemp_DS9097U -c /usr/local/etc/digitemp.conf \
    -q -t0 -n0 -d60 -l/var/log/temperature
</code></pre>

<p>To reach that point I downloaded the source file, untarred it and then did the following.</p>

<pre><code># Compile the hardware-specific command
make ds9097u
# Initialize the configuration file
./digitemp_DS9097U -s/dev/ttyS0 -i
# Run command to obtain temperature, and verify your setup
./digitemp_DS9097U -a 
# Copy the configuration file to an accessible place
cp .digitemprc /usr/local/etc/digitemp.conf
</code></pre>

<p>I also hand-edited my configuration file to adjust it to my setup.  This is how it ended-up.</p>

<pre><code>TTY /dev/ttyS0
READ_TIME 1000
LOG_TYPE 1
LOG_FORMAT ""%b %d %H:%M:%S Sensor %s C: %.2C F: %.2F""
CNT_FORMAT ""%b %d %H:%M:%S Sensor %s #%n %C""
HUM_FORMAT ""%b %d %H:%M:%S Sensor %s C: %.2C F: %.2F H: %h%%""
SENSORS 1
ROM 0 0x10 0xD3 0x5B 0x07 0x00 0x00 0x00 0x05
</code></pre>

<p>In my case I also created a /etc/init.d/digitemp file and enabled it to run at startup.</p>

<pre><code>#! /bin/sh
#
# System startup script for the temperature monitoring daemon
#
### BEGIN INIT INFO
# Provides: digitemp
# Required-Start:
# Should-Start:
# Required-Stop:
# Should-Stop:
# Default-Start:  2 3 5
# Default-Stop:   0 1 6
# Description:    Start the temperature monitoring daemon
### END INIT INFO

DIGITEMP=/usr/local/bin/digitemp_DS9097U
test -x $DIGITEMP || exit 5

DIGITEMP_CONFIG=/root/digitemp.conf
test -f $DIGITEMP_CONFIG || exit 6

DIGITEMP_LOGFILE=/var/log/temperature

# Source SuSE config
. /etc/rc.status

rc_reset
case ""$1"" in
    start)
        echo -n ""Starting temperature monitoring daemon""
        startproc $DIGITEMP -c $DIGITEMP_CONFIG  -q -t0 -n0 -d60 -l$DIGITEMP_LOGFILE
        rc_status -v
        ;;
    stop)
        echo -n ""Shutting down temperature monitoring daemon""
        killproc -TERM $DIGITEMP
        rc_status -v
        ;;
    try-restart)
        $0 status &gt;/dev/null &amp;&amp; $0 restart
        rc_status
        ;;
    restart)
        $0 stop
        $0 start
        rc_status
        ;;
    force-reload)
        $0 try-restart
        rc_status
        ;;
    reload)
        $0 try-restart
        rc_status
        ;;
    status)
        echo -n ""Checking for temperature monitoring service""
        checkproc $DIGITEMP
        rc_status -v
        ;;
    *)
        echo ""Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload}""
        exit 1
        ;;
esac
rc_exit
</code></pre>
"
190841,"<p>The <a href=""http://code.google.com/appengine/docs/images/overview.html"" rel=""nofollow"">Images API</a> does not (currently) contain pixel-level functions. To quote the overview document:</p>

<blockquote>
  <p>Note: In order to use the Images API in your local environment you must first download and install PIL, the Python Imaging Library. PIL is not available on App Engine; it is only used as a stub for the Images API in your local environment. Only the transforms provided in the images API are available on App Engine.</p>
</blockquote>

<p>The community has been asking for full <a href=""http://www.pythonware.com/products/pil/index.htm"" rel=""nofollow"">PIL</a> support for some time, but it looks like we'll have to wait.</p>
"
245172,"<p><a href=""http://stackoverflow.com/questions/245094/upgrading-google-application-engine-program-to-use-unicode#245159"">Alexander Kojevnikov</a> said: ""The datastore internally keeps all strings in unicode.""</p>

<p>In other words, your application is already using unicode everywhere. Thank the google folks for a sensible API. No further work required.</p>
"
257094,"<p>Thats Arachnid for your response. Pointing me to the source of the framework was really helpful. Last I looked the source wasn't there(there was only .pyc), maybe it changed with the new version of the SDK. For my situation I think overriding WSGIApplication would have been the right thing to do. However, I chose to use a metaclass instead, because it didn't require me to cargo-cult(copy) a bunch of the framework code into my code and then modifying it. This is my solution:</p>

<pre>
class RequestHandlerMetaclass(type):
    def __init__(cls, name, bases, dct):
        super(RequestHandlerMetaclass, cls).__init__(name, bases, dct)
        org_post = getattr(cls, 'post')
        def post(self, *params, **kws):
            verb = self.request.get('_method')
            if verb:
                verb = verb.upper()
                if verb ==  'DELETE':
                    self.delete(*params, **kws)
                elif verb == 'PUT':
                    self.put(*params, **kws)
            else:
                org_post(self, *params, **kws)
        setattr(cls, 'post', post)

class MyRequestHandler(webapp.RequestHandler):
    __metaclass__ = RequestHandlerMetaclass
</pre>
"
342465,"<p>I would probably argue that the second one would be preferable.  Sometimes, you can install a module from a newer version of python into an older one.  For example, wsgiref comes with Python 2.5, but it isn't entirely uncommon for it to be installed into older versions (I think it will work with python 2.3 up).</p>
"
342586,"<p>You should pass Queue objects as target's arguments.</p>

<p>Example from <a href=""http://docs.python.org/library/multiprocessing.html"" rel=""nofollow"">multiprocessing's documentation</a>:</p>

<pre><code>from multiprocessing import Process, Queue

def f(q):
    q.put([42, None, 'hello'])

 if __name__ == '__main__':
     q = Queue()
     p = Process(target=f, args=(q,))
     p.start()
     print q.get()    # prints ""[42, None, 'hello']""
     p.join()
</code></pre>

<blockquote>
  <p>Queues are thread and process safe.</p>
</blockquote>
"
13608,"<p>It sounds like what you want could be reasonably efficiently handled through regular expressions:</p>

<pre><code>import re
def stripslashes(s):
    r = re.sub(r""\\(n|r)"", ""\n"", s)
    r = re.sub(r""\\"", """", r)
    return r
cleaned = stripslashes(stringwithslashes)
</code></pre>
"
343020,"<p>Since you've asked about Python, why do you need the Win32 API ? That's used for writing small, fast C/C++ programs. If your tool is Python, just download wxPython which runs wonderfully on Windows and produces sleek native GUIs with 1% the code and the effort.</p>
"
343028,"<p>Peter,</p>

<p>DSLs are a <em>good thing</em>, so you don't need to defend yourself :-)
However, have you considered an internal DSL ? These have so many pros versus external (parsed) DSLs that they're at least worth consideration. Mixing a DSL with the power of the native language really solves lots of the problems for you, and Python is not really bad at internal DSLs, with the <code>with</code> statement handy.</p>
"
182297,"<p>As you can see in <a href=""http://timgolden.me.uk/python/win32_how_do_i/watch_directory_for_changes.html"" rel=""nofollow"">Tim Golden's article</a>, pointed by <a href=""http://stackoverflow.com/users/22312/horst-gutmann"">Horst Gutmann</a>, WIN32 is relatively complex and watches directories, not a single file.</p>

<p>I'd like to suggest you look into <a href=""http://www.codeplex.com/IronPython"" rel=""nofollow"">IronPython</a>, which is a <em>.NET</em> python implementation.
With IronPython you can use all the <em>.NET</em> functionality - including</p>

<pre><code>System.IO.FileSystemWatcher
</code></pre>

<p>Which handles single files with a simple <em>Event</em> interface.</p>
"
245464,"<p>I'm using it with nginx.  not sure if it's really faster, but certainly less RAM/CPU load.  Also it's easier to run several Django processes and have nginx map each URL prefix to a different socket.  still not taking full advantage of nginx's memcached module, but first tests show <em>huge</em> speed advantage.</p>
"
245484,"<p>There's also mod_wsgi, it seems to be faster than mod_python and the daemon mode operates similar to FastCGI</p>
"
123589,"<p>Also, regarding one of the previous comments about compiling with -X:SaveAssemblies - that is wrong. -X:SaveAssemblies is meant as a debugging feature. There is a API meant for compiling python code into binaries. <a href=""http://blogs.msdn.com/srivatsn/archive/2008/08/06/static-compilation-of-ironpython-scripts.aspx"" rel=""nofollow"">This post</a> explains the API and the difference between the two modes.</p>
"
256099,"<p>I did this once before in a Django server. There's two parts - client-side and server-side.</p>

<p>Client side you will have to send out XmlHttpRequests to the server as the user is typing, and then when the information comes back, display it. This part will require a decent amount of javascript, including some tricky parts like callbacks and keypress handlers.</p>

<p>Server side you will have to handle the XmlHttpRequests which will be something that contains what the user has typed so far. Like a url of</p>

<pre><code>www.yoursite.com/suggest?typed=www.sta
</code></pre>

<p>and then respond with the suggestions encoded in some way. (I'd recommend JSON-encoding the suggestions.) You also have to actually get the suggestions from your database, this could be just a simple SQL call or something else depending on your framework.</p>

<p>But the server-side part is pretty simple. The client-side part is trickier, I think. I found this <a href=""http://www.phpriot.com/articles/google-suggest-ajaxac"" rel=""nofollow"">article</a> helpful</p>

<p>He's writing things in php, but the client side work is pretty much the same. In particular you might find his CSS helpful.</p>
"
256239,"<p>I'm not sure I agree with inheritance from <code>ValueError</code> -- my interpretation of the documentation is that <code>ValueError</code> is <em>only</em> supposed to be raised by builtins... inheriting from it or raising it yourself seems incorrect.</p>

<blockquote>
  <p>Raised when a built-in operation or
  function receives an argument that has
  the right type but an inappropriate
  value, and the situation is not
  described by a more precise exception
  such as IndexError.</p>
</blockquote>

<p>-- <a href=""http://docs.python.org/library/exceptions.html?highlight=valueerror#exceptions.ValueError"" rel=""nofollow"">ValueError documentation</a></p>
"
256272,"<p>You should prefer list comprehensions if you need to keep the values around for something else later and the size of your set is not too large.</p>

<p>For example:
 you are creating a list that you will loop over several times later in your program. </p>

<p>To some extent you can think of generators as a replacement for iteration (loops) vs. list comprehensions as a type of data structure initialization. If you want to keep the data structure then use list comprehensions.</p>
"
122188,"<p>EDIT : Ok, just for fun, a shorter and faster one (and still using iterators).</p>

<pre><code>def getRandomNumbers(max, size) :
    pool = set()
    return ((lambda x :  pool.add(x) or x)(random.randrange(max)) for x in xrange(size) if len(a) &lt; size)

print [x for x in gen(100, 5)]
[0, 10, 19, 51, 18]
</code></pre>

<p>Yeah, I know, one-liners should be left to perl lovers, but I think this one is quite powerful isn't it ?</p>

<p>Old message here :</p>

<p>My god, how complicated is all that ! Let's be pythonic :</p>

<pre><code>import random
def getRandomNumber(max, size, min=0) :
   # using () and xrange = using iterators
   return (random.randrange(min, max) for x in xrange(size))

print set(getRandomNumber(100, 5)) # set() removes duplicates
set([88, 99, 29, 70, 23])
</code></pre>

<p>Enjoy</p>

<p>EDIT : As commentators noticed, this is an exact translation of the question's code.</p>

<p>To avoid the problem we got by removing duplicates after generating the list, resulting in too little data, you can choose another way :</p>

<pre><code>def getRandomNumbers(max, size) :
    pool = []
    while len(pool) &lt; size :
        tmp = random.randrange(max)
        if tmp not in pool :
            yield pool.append(tmp) or tmp

print [x for x in getRandomNumbers(5, 5)]
[2, 1, 0, 3, 4]
</code></pre>
"
135360,"<p>You need to make sure you're using architecture independent members for your struct.  For instance an int may be 32 bits on one architecture and 64 bits on another.  As others have suggested, use the <code>int32_t</code> style types instead.  If your struct contains unaligned members, you may need to deal with padding added by the compiler too.</p>

<p>Another common problem with cross architecture data is endianness.  Intel i386 architecture is little-endian, but if you're reading on a completely different machine (e.g. an Alpha or Sparc), you'll have to worry about this too.</p>

<p>The Python struct module deals with both these situations, using the prefix passed as part of the format string.</p>

<ul>
<li>@ - Use native size, endianness and alignment. i= sizeof(int), l= sizeof(long)</li>
<li>= - Use native endianness, but standard sizes and alignment (i=32 bits, l=64 bits)</li>
<li>&lt; - Little-endian standard sizes/alignment</li>
<li>> - Big-endian standard sizes/alignment</li>
</ul>

<p>In general, if the data passes off your machine, you should nail down the endianness and the size / padding format to something specific â ie. use ""&lt;"" or "">"" as your format.  If you want to handle this in your C extension, you may need to add some code to handle it.</p>
"
244836,"<p>I would go with nginx + php + xcache + postgresql</p>
"
20859,"<p><a href=""http://docs.python.org/lib/module-os.path.html"" rel=""nofollow"">os.path</a></p>

<p>You may try using realpath() to get what the symlink points to, then trying to determine if it's a valid file using is file.</p>

<p>(I'm not able to try that out at the moment, so you'll have to play around with it and see what you get)</p>
"
253837,"<p>When you say dbf table, are you referring to ESRI shape file dbf files, which are in fact dbase files? If so you could implement such a thing pretty easily with the python wrapper for <a href=""http://shapelib.maptools.org/"" rel=""nofollow"">shapelib,</a> which also supports dbf files.</p>
"
125235,"<p>I'm not sure if you're going to have much luck without using COM. The .doc format is ridiculously complex, and is often called a ""memory dump"" of Word at the time of saving!</p>

<p>At Swati, that's in HTML, which is fine and dandy, but most word documents aren't so nice!</p>
"
125739,"<p>Here's how:</p>

<pre><code>class whatever(object):
  def __init__(self, a, b, c, ...):
    self.__foobar = 1
    self.__blahblah = 2

  foobar = property(lambda self: self.__foobar)
  blahblah = property(lambda self: self.__blahblah)
</code></pre>

<p>(Assuming <code>foobar</code> and <code>blahblah</code> are the attributes you want to be read-only.)  Prepending <b>two</b> underscores to an attribute name effectively hides it from outside the class, so the internal versions won't be accessible from the outside.  This <b>only works for new-style classes inheriting from object</b> since it depends on <code>property</code>.</p>

<p>On the other hand... this is a pretty silly thing to do.  Keeping variables private seems to be an obsession that comes from C++ and Java.  Your users should use the public interface to your class because it's well-designed, not because you force them to.</p>

<p>Edit: Looks like Kevin already posted a similar version.</p>
"
245837,"<p>I'm not saying this is going to be easy, or that this solution will necessarily be perfect for you, but look at the documentation here:<p>
<a href=""http://effbot.org/imagingbook/pil-index.htm"" rel=""nofollow""><a href=""http://effbot.org/imagingbook/pil-index.htm"" rel=""nofollow"">http://effbot.org/imagingbook/pil-index.htm</a></a>
<p>
and especially pay attention to the Image, ImageDraw, and ImageFont modules.</p>

<p>Here's an example to help you out:<p></p>

<pre><code>
import Image
im = Image.new(""RGB"", (100, 100))
import ImageDraw
draw = ImageDraw.Draw(im)
draw.text((50, 50), ""hey"")
im.rotate(45).show()
</code></pre>

<p>To do what you really want you may need to make a bunch of separate correctly rotated text images and then compose them all together with some more fancy manipulation.  And after all that it still may not look great.  I'm not sure how antialiasing and such is handled for instance, but it might not be good.  Good luck, and if anyone has an easier way, I'd be interested to know as well.</p>
"
246494,"<p>As far as performance is concerned, I can't think of any times that you would want to use a list over a generator.</p>
"
132237,"<p>I see two ways of going about it: working on Python directly or working on something that utilizes Python</p>

<p>Since you're a beginner, you're probably hesitant to work on the core Python language or feel that you can't contribute in a meaningful way, which is understandable. However, as a beginner, you're in a good position to help improve documentation and other items that are essential to learning Python. </p>

<p>For example, the Python tutorial is less of a tutorial (in the standard sense) and more of a feature listing, at least in my opinion. When I tried to learn from it, I never got the feeling that I was building up my knowledge, like creating an application. It felt more like I was being shown all the parts that make up Python but not how to put them together into a cohesive structure.</p>

<p>Once I became more comfortable with the language (mostly through books and lots of practice), I eventually wrote my <a href=""http://www.gidnetwork.com/b-26.html"" rel=""nofollow"">own tutorial</a>, trying to provide not only the technical information but also lessons learned and ""newbie gotchas"".</p>

<p>Alternatively, you can contribute to the Python world by using Python in programs. You can contribute to projects already established, e.g. Django, PyGame, etc., or you can make your own program to ""scratch an itch"". Either way, you not only build your knowledge of Python but you are giving back to the community. </p>

<p>Finally, you can become an advocate of Python, encouraging others to learn the language. I kept suggesting to my supervisor at my last job to use Python rather than Java when a considering what to use for a new project. I tell everyone I know about the joys of Python and encourage them to give it a try. I convinced the administrator of a computer forum I frequent to create a section for Python. And, as I already said, I wrote a tutorial for Python and I'm working on a new one for wxPython.</p>

<p>There are many ways you can contribute to Python that aren't necessarily programming related. As your programming skills grow, you may want to move further into code contributions. But you may gain more satisfaction by helping others find the same joy you found in Python.</p>
"
126355,"<p>If you use kiwi available <a href=""http://kiwi.async.com.br/"" rel=""nofollow"">here</a> you can just do:</p>

<pre><code>from kiwi.utils import gsignal

class MyObject(gobject.GObject):
    gsignal('signal-name')
</code></pre>
"
254948,"<p>Maybe you could try passing the final URL to the template, instead?</p>

<p>Something like this:</p>

<pre><code>from django.core.urlresolvers import reverse

def home_page_view(request):
    NUP={""HOMEPAGE"": reverse('named-url-pattern-string-for-my-home-page-view')}    
    variables = RequestContext(request, {'NUP':NUP})
    return render_to_response('home_page.html', variables)
</code></pre>

<p>Then in the template, the <code>NUP.HOMEPAGE</code> should the the url itself.</p>
"
124137,"<p>You could do something like</p>

<pre><code>if settings.DEBUG:
  other = ""localhost""
else:
  other = ""somehost""
</code></pre>

<p>and use other to build the external URL. Generally you code in DEBUG mode and deploy in non-DEBUG mode. settings.DEBUG is a 'standard' Django thing.</p>
"
125058,"<pre><code>class C(object):

    def __init__(self):

        self.fullaccess = 0
        self.__readonly = 22 # almost invisible to outside code...

    # define a publicly visible, read-only version of '__readonly':
    readonly = property(lambda self: self.__readonly)

    def inc_readonly( self ):
        self.__readonly += 1

c=C()

# prove regular attribute is RW...
print ""c.fullaccess = %s"" % c.fullaccess
c.fullaccess = 1234
print ""c.fullaccess = %s"" % c.fullaccess

# prove 'readonly' is a read-only attribute
print ""c.readonly = %s"" % c.readonly
try:
    c.readonly = 3
except AttributeError:
    print ""Can't change c.readonly""
print ""c.readonly = %s"" % c.readonly

# change 'readonly' indirectly...
c.inc_readonly()
print ""c.readonly = %s"" % c.readonly
</code></pre>

<p>This outputs:</p>

<p>$ python ./p.py<br>
c.fullaccess = 0<br>
c.fullaccess = 1234<br>
c.readonly = 22<br>
Can't change c.readonly<br>
c.readonly = 22<br>
c.readonly = 23<br>
<br>
My fingers itch to be able to say</p>

<pre><code>    @readonly
    self.readonly = 22
</code></pre>

<p>i.e., use a decorator on an attribute. It would be so clean...</p>
"
255505,"<p>There's pretty good evidence that the trump-card issue in most cases is deployability and supportability. Browser apps are lower overhead in general; implementing and supporting more than a couple dozen users can end up consuming substantial support resources.</p>

<p>I saw a table a year or two ago that showed something like:</p>

<p>

<br><br />
<br>UI quality                             -        Desktop
<br>Granularity of validation               -       Desktop
<br>Responsiveness                          -       Desktop
<br>User acceptance                         -       Desktop
<br>  etc.                                  -       Desktop
<br>  etc.                                  -       Desktop
<br>Install &amp; Support         -   Browser

<br>and the Browser wins.</p>
"
255514,"<p>For this task (form-based text entry) a browser is great. You don't need anything that being a desktop app will give you (speed, flexibility)</p>

<p>There are draw-backs to being a web-application, such as..</p>

<p><strong>It's a web-page. There are things you just cannot (easily) do</strong></p>

<p>You cannot easily map the ctrl+j key to do something. For example: Google Spreadsheet tries to map keyboard shortcuts and works  <em>most</em> of the time, sometimes the browsers default handling of the shortcut takes over..</p>

<p>You cannot make Growl alerts (An OS X notification framework). You cannot access the filesystem. It's difficult to allow access while offline.</p>

<p><strong>Javascript is very CPU-heavy.</strong></p>

<p>Try resizing a Google Spreadsheet document, or load a page on Digg (a very javascript heavy site) - the browsers CPU usage will be at 100% for a while.. Doing the same in a native desktop application is trivial</p>

<p><strong>When you perform upgrades, you <em>force</em> them on all your users.</strong>
With a desktop application, they have the choice of not upgrading. For example, I didn't like one of the Google Reader upgrades, but I was stuck. Using NetNewsWire (a desktop application), if I don't like a change in the newest version, I can quite easily keep using this one (or try it, and downgrade)</p>

<p><strong>You web-server <em>must</em> be accessible at all times, for ever</strong></p>

<p>If the server disappears, your users have no recourse. The application is gone. If it's down for 10 minutes, they cannot use it.</p>

<p><hr /></p>

<p>With your application, while I'm not too sure what it is, none of the above seems like its going to be an issue.</p>

<p><em>""It's a web -page""</em>: Forms and dialogue boxes are easy to do in HTML and javascript (or even using server-side scripting, for example <code>&lt;?php if($_POST[""email""] ==""""){echo(""Are you sure you want to continue?); ?&gt;</code>)</p>

<p><em>""Javascript is very CPU-heavy""</em>: Doesn't sound like your application will require any Javascript (maybe some client-side input-validation when the user clicks ""Submit"", to warn them about any input errors?)</p>

<p><em>""Forced upgrades""</em>: I imagine this may be desirable, as you wouldn't want users inputing data in the old way.</p>

<p><em>""Server must be accessible""</em>: Could be an issue, but I don't think it'll be a large one.. Say you want to store all the users data in a central database, this issue becomes inescapable anyway - keeping a web and database server running isn't much more work than only a database (for the GUIs to connect to)</p>

<p>Also, you get the benefits others have posted - you develop it once, and it runs identically on every operating system that can run a sane browser.</p>
"
135078,"<p>You might want to look into PropertySheets. These are files containing Visual C++ settings, including user macros. The sheets can inherit from other sheets and are attached to VC++ projects using the PropertyManager View in Visual Studio. When you create one of these sheets, there is an interface for creating user macros. When you add a macro using this mechanism, there is a checkbox for setting the user macro as an environment variable. We use this type of mechanism in our build system to rapidly set up projects to perform out-of-place builds. Our various build directories are all defined as user macros. I have not actually verified that the environment variables are set in an external script called from post-build. I tend to use these macros as command line arguments to my post-build scripts - but I would expect accessing them as environment variables should work for you.</p>
"
135081,"<p>Go with range for these reasons:</p>

<p>1) xrange will be going away in newer Python versions.  This gives you easy future compatibility.</p>

<p>2) range will take on the efficiencies associated with xrange.</p>
"
245259,"<p>Personally I've had it working with FastCGI for some time now (6 months or so) and the response times 'seem' quicker when loading a page that way vs mod___python. The critical reason for me though is that I couldn't see an obvious way to do multiple sites from the same apache / mod_python install whereas FastCGI was a relative no-brainer.</p>

<p>I've not conducted any particularly thorough experiments though :-)</p>

<p><strong>[Edit]</strong> Speaking from experience though, setting up FastCGI can be a bit of a pain the first time around. I keep meaning to write a guide..!</p>
"
341880,"<p>I have written something like this in work to read in SNMP notification definitions and automatically generate Java classes and SNMP MIB files from this. Using this little DSL, I could write 20 lines of my specification and it would generate roughly 80 lines of Java code and a 100 line MIB file.</p>

<p>To implement this, I actually just used straight Python string handling (split(), slicing etc) to parse the file. I find Pythons string capabilities to be adequate for most of my (simple) parsing needs.</p>

<p>Besides the libraries mentioned by others, if I were writing something more complex and needed proper parsing capabilities, I would probably use <a href=""http://www.antlr.org/"" rel=""nofollow"">ANTLR</a>, which supports Python (and other languages).</p>
"
247527,"<p>I've never found a situation where generators would hinder what you're trying to do. There are, however, plenty of instances where using generators would not help you any more than not using them.</p>

<p>For example:</p>

<pre><code>sorted(xrange(5))
</code></pre>

<p>Does not offer any improvement over:</p>

<pre><code>sorted(range(5))
</code></pre>
"
181761,"<p>Any time you want to inspect the contents of variables that may have caused the error.  The only way you can do that is to stop execution and take a look at the stack.</p>

<p>pydev in Eclipse is a pretty good IDE if you are looking for one.</p>
"
343639,"<p>Since the Django test framework does this, I'm not sure what you're asking.</p>

<p>Do you want to test a Django app that has a form?</p>

<ul>
<li>In which case, you need to do an initial GET</li>
<li>followed by the resulting POST</li>
</ul>

<p>Do you want to write (and test) a Django app that submits a form to another site?</p>

<p>Here's how we test Django apps with forms.</p>

<pre><code>class Test_HTML_Change_User( django.test.TestCase ):
    fixtures = [ 'auth.json', 'someApp.json' ]
    def test_chg_user_1( self ):
        self.client.login( username='this', password='this' )
        response= self.client.get( ""/support/html/user/2/change/"" )
        self.assertEquals( 200, response.status_code )
        self.assertTemplateUsed( response, ""someApp/user.html"")

def test_chg_user( self ):
    self.client.login( username='this', password='this' )
    # The truly fussy would redo the test_chg_user_1 test here
    response= self.client.post(
        ""/support/html/user/2/change/"",
        {'web_services': 'P',
         'username':'olduser',
         'first_name':'asdf',
         'last_name':'asdf',
         'email':'asdf@asdf.com',
         'password1':'passw0rd',
         'password2':'passw0rd',} )
    self.assertRedirects(response, ""/support/html/user/2/"" )
    response= self.client.get( ""/support/html/user/2/"" )
    self.assertContains( response, ""&lt;h2&gt;Users: Details for"", status_code=200 )
    self.assertContains( response, ""olduser"" )
    self.assertTemplateUsed( response, ""someApp/user_detail.html"")
</code></pre>

<p>Note - we don't parse the HTML in detail.  If it has the right template and has the right response string, it has to be right.</p>
"
343794,"<p>It is simple... and hard at the same time.<br />
Disclaimer: I don't know much about Python and nothing at all about Django... So I give general, language agnostic advices...
If one of the above advices doesn't work for you, you might want to do it manually:</p>

<ul>
<li>Load the page with an HTML parser, list the forms.</li>
<li>If the <code>method</code> attribute is POST (case insensitive), get the <code>action</code> attribute to get the URL of the request (can be relative).</li>
<li>In the form, get all <code>input</code> and <code>select</code> tags. The <code>name</code> (or <code>id</code> if no name) attributes are the keys of the request parameters. The <code>value</code> attributes (empty if absent) are the corresponding values.</li>
<li>For <code>select</code>, the value is the one of the selected <code>option</code> or the displayed text is no <code>value</code> attribute.</li>
</ul>

<p>These names and values must be URL encoded in GET requests, but not in POST ones.</p>

<p>HTH.</p>
"
344600,"<p>I wrote one for .NET for the Genghis project (<a href=""http://www.codeplex.com/genghis"" rel=""nofollow"">link here</a>) a while back.  Looks like it is over at MS CodePlex now.  Look for the ""AniForm"" class.  <a href=""http://www.sellsbrothers.com/tools/genghis/screenshots/AniForm.JPG"" rel=""nofollow"">Here</a> is a screenshot.</p>

<p>It has more of an older MSN Messenger look and feel but should get you started.</p>
"
12167,"<p>I'm not sure that this is the best way to do it, but when I'm deploying Ruby GUI apps (not Python, but has the same ""problem"" as far as .exe's are concerned) on Windows, I just write a short launcher in C# that calls on my main script. It compiles to an executable, and I then have an application executable.</p>
"
12454,"<p>Whenever I need to pass in a collection of items to a function, if I want the function to not change the values passed in - I use tuples. </p>

<p>Else if I want to have the function to alter the values, I use list. </p>

<p>Always if you are using external libraries and need to pass in a list of values to a function and are unsure about the integrity of the data, use a tuple. </p>
"
13405,"<p>In Python, you have <a href=""http://docs.python.org/tut/node7.html#SECTION007130000000000000000"" rel=""nofollow"" title=""Human Interface Guidelines"">filter and map</a>, which can so what you want:</p>

<pre><code>map(lambda x: foo(x + 1) filter(lambda x: x &gt; 3, intArray))
</code></pre>

<p>There's also <a href=""http://docs.python.org/tut/node7.html#SECTION007140000000000000000"" rel=""nofollow"">list comprehensions</a> which can do both in one easy statement:</p>

<pre><code>[f(x + 1) for x in intArray if x &gt; 3]
</code></pre>
"
183865,"<p>The double slash, <code>//</code>, is floor division:</p>

<pre><code>&gt;&gt;&gt; 7//3
2
</code></pre>
"
184157,"<p>Based in your reasons, I would go with Ruby. I see that you want some administration tools (scp, ftp client) and Ruby has it (net/sftp and net/ftp libraries).</p>

<p>Also, there are great gems like God for monitoring your system, Vlad the Deployer for deploying, etc. And a lot of alternatives in Merb's field, just use whatever you find it's better for your needs (Thin, Mongrel, ebb, etc).</p>
"
188827,"<p>Here's a start on the win32 half of a portable implementation, that does not need a seperate locking mechanism.</p>

<p>Requires the <a href=""http://python.net/crew/mhammond/win32/"" rel=""nofollow"">Python for Windows Extensions</a> to get down to the win32 api, but that's pretty much mandatory for python on windows already, and can alternatively be done with <a href=""http://www.python.org/doc/lib/module-ctypes.html"" rel=""nofollow"">ctypes</a>. The code could be adapted to expose more functionality if it's needed (such as allowing <code>FILE_SHARE_READ</code> rather than no sharing at all). See also the MSDN documentation for the <a href=""http://msdn.microsoft.com/en-us/library/aa363858.aspx"" rel=""nofollow""><code>CreateFile</code></a> and <a href=""http://msdn.microsoft.com/en-us/library/aa365747.aspx"" rel=""nofollow""><code>WriteFile</code></a> system calls, and the <a href=""http://msdn.microsoft.com/en-us/library/aa363874.aspx"" rel=""nofollow"">article on Creating and Opening Files</a>.</p>

<p>As has been mentioned, you can use the standard <a href=""http://www.python.org/doc/lib/module-fcntl.html"" rel=""nofollow"">fcntl</a> module to implement the unix half of this, if required.</p>

<pre><code>import winerror, pywintypes, win32file

class LockError(StandardError):
	pass

class WriteLockedFile(object):
	""""""
	Using win32 api to achieve something similar to file(path, 'wb')
	Could be adapted to handle other modes as well.
	""""""
	def __init__(self, path):
		try:
			self._handle = win32file.CreateFile(
				path,
				win32file.GENERIC_WRITE,
				0,
				None,
				win32file.OPEN_ALWAYS,
				win32file.FILE_ATTRIBUTE_NORMAL,
				None)
		except pywintypes.error, e:
			if e[0] == winerror.ERROR_SHARING_VIOLATION:
				raise LockError(e[2])
			raise
	def close(self):
		self._handle.close()
	def write(self, str):
		win32file.WriteFile(self._handle, str)
</code></pre>

<p>Here's how your example from above behaves:</p>

<pre><code>&gt;&gt;&gt; path = ""C:\\scr.txt""
&gt;&gt;&gt; file1 = WriteLockedFile(path)
&gt;&gt;&gt; file2 = WriteLockedFile(path) #doctest: +IGNORE_EXCEPTION_DETAIL
Traceback (most recent call last):
	...
LockError: ...
&gt;&gt;&gt; file1.write(""111"")
&gt;&gt;&gt; file1.close()
&gt;&gt;&gt; print file(path).read()
111
</code></pre>
"
189112,"<p>Are you sure that the objects in the two matrices you are iterating in parallel are instances of conceptually distinct classes? What about merging the two classes ending up with a matrix of objects that contain <em>both</em> isWhatever() and doSomething()?</p>
"
247641,"<p>The canonical reference to how to improve Python code is here:  <a href=""http://wiki.python.org/moin/PythonSpeed/PerformanceTips"" rel=""nofollow"">PerformanceTips</a>.  I'd recommend against optimizing in C unless you really need to though.  For most applications, you can get the performance you need by following the rules posted in that link.</p>
"
127097,"<p>Something from inside sre_parse might help.</p>

<p>At first glance, maybe something along the lines of:</p>

<pre><code>&gt;&gt;&gt; import sre_parse
&gt;&gt;&gt; sre_parse.parse('(\d)\d(\d)')
[('subpattern', (1, [('in', [('category', 'category_digit')])])), 
('in', [('category', 'category_digit')]), 
('subpattern', (2, [('in', [('category', 'category_digit')])]))]
</code></pre>

<p>I.e. count the items of type 'subpattern':</p>

<pre><code>import sre_parse

def count_patterns(regex):
    """"""
    &gt;&gt;&gt; count_patterns('foo: \d')
    0
    &gt;&gt;&gt; count_patterns('foo: (\d)')
    1
    &gt;&gt;&gt; count_patterns('foo: (\d(\s))')
    1
    """"""
    parsed = sre_parse.parse(regex)
    return len([token for token in parsed if token[0] == 'subpattern'])
</code></pre>

<p>Note that we're only counting root level patterns here, so the last example only returns 1. To change this, <em>tokens</em> would need to searched recursively.</p>
"
252996,"<p>XML-GCC can't do that, because it only reports the data types (and function signatures). It ignores the function bodies. To see that, create a.cc:</p>

<pre><code>void foo()
{}

void bar()
{
        foo();
}
</code></pre>

<p>and then run <code>gccxml a.cc -fxml=a.xml</code>. Look at the generated a.xml, to see that the only mentioning of foo (or its id) is in the declaration of foo.</p>

<p>An alternative might be available in codeviz (<a href=""http://www.csn.ul.ie/~mel/projects/codeviz/"" rel=""nofollow"">http://www.csn.ul.ie/~mel/projects/codeviz/</a>). It consists of a patch to gcc 3.4.6 that generates call dependency information - plus some perl scripts that generate graphviz input; the latter you can safely ignore.</p>

<p>As yet another alternative (which doesn't need gcc modifications) you could copy the approach from egypt (<a href=""http://www.gson.org/egypt/"" rel=""nofollow"">http://www.gson.org/egypt/</a>); this parses GCC RTL dumps. It should work with any recent GCC, however, it might be that you don't get calls to inline functions.</p>

<p>In any case, with these approaches, you won't get ""calls"" to macros, but that might be actually the better choice.</p>
"
253273,"<p>Set the environment variable IRONPYTHONPATH in your operating system to 'c:\Python24\lib'. (Or anywhere else you need).</p>
"
188608,"<p>doc (Word 2003 in this case) and docx (Word 2007) are different formats, where the latter is usually just an archive of xml and image files. I would imagine that it is very possible to write to docx files by manipulating the contents of those xml files. However I don't see how you could read and write to a doc file without some type of COM component interface. </p>
"
2980,"<p>Since python is installed on nearly every non-Windows OS by default now, the only thing you really need to make sure of is that all of the non-standard libraries you use are installed.</p>

<p>Having said that, it is possible to build executables that include the python interpreter, and any libraries you use.  This is likely to create a large executable, however.</p>

<p>MacOS X even includes support in the Xcode IDE for creating full standalone GUI apps.  These can be run by any user running OS X.</p>"
750,"<p>What I was thinking of can be achieved using list comprehensions, but I thought that there was a function that did this in a slightly neater way.</p>

<p>i.e. 'bar' is a list of objects, all of which have the attribute 'id'</p>

<p>The mythical functional way:</p>

<pre><code>foo = 12<br>foo in iter_attr(bar, 'id')</code></pre>

<p>The list comprehension way:</p>

<pre><code>foo = 12<br>foo in [obj.id for obj in bar]</code></pre>

<p>In retrospect the list comprehension way is pretty neat anyway.</p>"
348579,"<p>Depending on the amount of mail you are sending you might want to look into using a real mail server like postifx or sendmail (*nix systems) Both of those programs have the ability to send a received mail to a program based on the email address. </p>
"
2317,"<p>Well if you go under the properties of your file in Windows or a *nix environment, you will notice two sizes.  One is the sector size, and one is the actual size.  The sector size is the number of sectors in bytes that are used up on your hard disk.  That is because two files cannot be in the same sector with most modern file systems, so if your file fills up half of the sector the whole sector is marked as filled.</p>

<p>So you might be comparing the sector file size to the actual file size on the FTP server or vice versa.</p>"
349024,"<p>The mimetypes module uses mime.types files as they are common on Linux/Unix systems. If you look in mimetypes.knownfiles you will find a list of files that Python tries to access to load the data. You can also specify your own file to add new types by adding it to that list.</p>
"
130179,"<p>Not familiar with ActiveTcl, but in general here is how to get a package/module to be loaded when that name already exists in the standard library:</p>

<pre><code>import sys
dir_name=""/usr/lib/mydir""
sys.path.insert(0,dir_name)
</code></pre>

<p>Substitute the value for dir_name with the path to the directory containing your package/module, and run the above code before anything is imported.  This is often done through a 'sitecustomize.py' file so that it will take effect as soon as the interpreter starts up so you won't need to worry about import ordering.</p>
"
130285,"<p>You could always <a href=""http://en.wikipedia.org/wiki/Memoization"" rel=""nofollow"">memoize</a> the <code>expensive()</code> function so that calling it the second time around is merely a lookup for the computed value of <code>x</code>.</p>

<p><a href=""http://wiki.python.org/moin/PythonDecoratorLibrary#head-11870a08b0fa59a8622201abfac735ea47ffade5"" rel=""nofollow"">Here's just one of many implementations of memoize as a decorator</a>.</p>
"
130288,"<p>You could memoize expensive(x) (and if you are calling expensive(x) frequently, you probably should memoize it any way.  This page gives an implementation of memoize for python:</p>

<p><a href=""http://code.activestate.com/recipes/52201/"" rel=""nofollow"">http://code.activestate.com/recipes/52201/</a></p>

<p>This has the added benefit that expensive(x) may be run <em>less</em> than N times, since any duplicate entries will make use of the memo from the previous execution.</p>

<p>Note that this assumes expensive(x) is a true function, and does not depend on external state that may change.  If expensive(x) does depend on external state, and you can detect when that state changes, or you know it <em>wont</em> change during your list comprehension, then you can reset the memos before the comprehension.</p>
"
249650,"<p>Stay with the slice operator, but do not change the loop variable inside the loop. for fun, try the generator expression (or keep the listcomp).</p>

<pre><code>baselen = len(self.basePath)
return (path[baselen:].replace(""/"", ""\\"") for path in paths)
</code></pre>

<p>Edit: `lstrip()' is not relevant here. From the <a href=""http://docs.python.org/library/stdtypes.html#string-methods"" rel=""nofollow"">manual</a>:</p>

<blockquote>
  <p>str.lstrip([chars])</p>
  
  <p>Return a copy of the string with leading characters removed. If chars is omitted or
      None, whitespace characters are removed. If given and not None, chars must be a
      string;   the characters in the string will be stripped from the beginning of the 
      string this method is called on.</p>
</blockquote>
"
249800,"<p>The File Manager API has a pair of functions called FSMoveObjectToTrashAsync and FSPathMoveObjectToTrashSync.</p>

<p>Not sure if that is exposed to Python or not.</p>
"
250322,"<p>You can dramatically reduce the interaction between your app and the database by just storing the complete <code>self.request.get('links')</code> in a text field in the database.</p>

<ul>
<li>only one <code>put()</code> per <code>post(self)</code></li>
<li>the hash isn't stored n-times (for every link, which makes no sense and is really a waste of space)</li>
</ul>

<p>And you save yourself the parsing of the textfield when someone actually calls the page....</p>
"
128684,"<p>Module initialization only occurs once - on the first import.  If the module in question is from the standard library, then you will likely import it from other modules in your program as well.  For a module as prevalent as datetime, it is also likely a dependency for a slew of other standard libraries.  The import statement would cost very little then since the module intialization would have happened already.  All it is doing at this point is binding the existing module object to the local scope.</p>

<p>Couple that information with the argument for readability and I would say that it is best to have the import statement at module scope.  </p>
"
128812,"<p>Half a solution, __set__ on the class does not work, still. The solution is a custom property class implementing both a property and a staticmethod</p>

<pre><code>class ClassProperty(object):
    def __init__(self, fget, fset):
        self.fget = fget
        self.fset = fset

    def __get__(self, instance, owner):
        return self.fget()

    def __set__(self, instance, value):
        self.fset(value)

class Foo(object):
    _bar = 1
    def get_bar():
        print 'getting'
        return Foo._bar

    def set_bar(value):
        print 'setting'
        Foo._bar = value

    bar = ClassProperty(get_bar, set_bar)

f = Foo()
#__get__ works
f.bar
Foo.bar

f.bar = 2
Foo.bar = 3 #__set__ does not
</code></pre>
"
129174,"<p>The best approach I have found, is to define a function like such:</p>

<pre><code>def handle_exception(function, reaction, *args, **kwargs):
    try:
        result = function(*args, **kwargs)
    except Exception, e:
        result = reaction(e)
    return result
</code></pre>

<p>But that just doesn't feel or look right in practice:</p>

<pre><code>handle_exception(foo, baz, a, b)
handle_exception(bar, baz, c, d)
</code></pre>
"
129187,"<p>Just upgrade your app. The switch from 0.96 to 1.0 was huge, but in terms of Backwards Incompatible changes I doubt your app even has 10% of them.</p>

<p>I was on trunk before Django 1.0 so I the transition for me was over time but even then the only major things I had to change were newforms, newforms-admin, <strong>str</strong>() to <strong>unicode</strong>() and maxlength to max_length</p>

<p>Most of the other changes were new features or backend rewrites or stuff that as someone who was building basic websites did not even get near.</p>
"
66818,"<p>Ensure you are editing the correct configuration file for VIM. Especially if you are using windows, where the file could be named _vimrc instead of .vimrc as on other platforms.</p>

<p>In vim type</p>

<p><code>:help vimrc</code></p>

<p>and check your path to the _vimrc/.vimrc file with</p>

<p><code>:echo $HOME</code></p>

<p><code>:echo $VIM</code></p>

<p>Make sure you are only using one file. If you want to split your configuration into smaller chunks you can source other files from inside your _vimrc file.</p>

<p><code>:help source</code></p>
"
66924,"<p>After a brief amount of Googling, I found nothing that looks like a wrapper for this API, but I'm not quite sure if a wrapper is what is necessary for GeoPlanet.  </p>

<p>According to Yahoo's <a href=""http://developer.yahoo.com/geo/guide/api_docs.html#api_overview"" rel=""nofollow"">documentation</a> for GeoPlanet, requests are made in the form of an HTTP GET messages which can very easily be made using Python's <a href=""http://docs.python.org/lib/module-httplib.html"" rel=""nofollow"">httplib module</a>, and <a href=""http://developer.yahoo.com/geo/guide/response_formats.html"" rel=""nofollow"">responses</a> can take one of several forms including XML and JSON.  Python can very easily parse these formats.  In fact, Yahoo! itself even offers libraries for parsing both <a href=""http://developer.yahoo.com/python/python-xml.html"" rel=""nofollow"">XML</a>  and <a href=""http://developer.yahoo.com/python/python-json.html"" rel=""nofollow"">JSON</a> with Python.  </p>

<p>I know it sounds like a lot of libraries, but all the hard work has already been done for the programmer.  It would just take a little ""gluing together"" and you would have yourself a nice interface to Yahoo! GeoPlanet using the power of Python.</p>
"
67450,"<p>I would just use if/elif/else statements. I think that it's good enough to replace the switch statement.</p>
"
308964,"<p>The big difference is that tuples are immutable, while lists and dictionaries are mutable data structures. This means that tuples are also faster, so if you have a collection of items that doesn't change, you should prefer them over lists.</p>
"
213515,"<p>Not multithreaded, but <a href=""http://twistedmatrix.com/trac/"" rel=""nofollow"">twisted</a> might serve your needs.</p>
"
213539,"<p>Perhaps you have a problem with your implementation in Python using <code>BaseHttpServer</code>. There's no reason for it to ""get stuck"", and implementing a simple threaded server using <code>BaseHttpServer</code> and <code>threading</code> shouldn't be difficult.</p>

<p>Also, see <a href=""http://pymotw.com/2/BaseHTTPServer/index.html#module-BaseHTTPServer"" rel=""nofollow"">http://pymotw.com/2/BaseHTTPServer/index.html#module-BaseHTTPServer</a> about implementing a simple multi-threaded server with <code>HTTPServer</code> and <code>ThreadingMixIn</code></p>
"
213551,"<p>You could instead use a distributed cache that is accessible from each process, <a href=""http://www.danga.com/memcached/"" rel=""nofollow"">memcached</a> being the example that springs to mind.</p>
"
158505,"<p>First, naming your arguments with uppercase letters is confusing.  Since Python does not have formal, static type checking, we use the <code>UpperCase</code> to mean a class and <code>lowerCase</code> to mean an argument.</p>

<p>Second, we don't bother with CRoom and CPerson.  Upper case is sufficient to indicate it's a class.  The letter C isn't used.  <code>Room</code>.  <code>Person</code>.</p>

<p>Third, we don't usually put things in <strong>One Class Per File</strong> format. A file is a Python module, and we more often import an entire module with all the classes and functions. </p>

<p>[I'm aware those are habits -- you don't need to break them today, but they do make it hard to read.]</p>

<p>Python doesn't use statically defined types like C++.  When you define a method function, you don't formally define the data type of the arguments to that function.  You merely list some variable names.    Hopefully, the client class will provide arguments of the correct type.</p>

<p>At run time, when you make a method request, then Python has to be sure the object has the method.  NOTE. Python doesn't check to see if the object is the right type -- that doesn't matter.  It only checks to see if it has the right method.</p>

<p>The loop between <code>room.Room</code> and <code>person.Person</code> is a problem.  You don't need to include one when defining the other.</p>

<p>It's safest to import the entire module.</p>

<p>Here's <code>room.py</code></p>

<pre><code>import person
class Room( object ):
    def __init__( self ):
        self.nextId= 0
        self.people= {}
    def addPerson(self, firstName, secondName, gender):
        id= self.NextId
        self.nextId += 1

        thePerson = person.Person(firstName,secondName,gender,id)
        self.people[id] = thePerson
        return thePerson
</code></pre>

<p>Works fine as long as Person is eventually defined in the namespace where this is executing.  Person does not have to be known when you define the class.  </p>

<p>Person does not have to be known until runtime when then Person(...) expression is evaluated.</p>

<p>Here's <code>person.py</code></p>

<pre><code>import room
class Person( object ):
    def something( self, x, y ):
        aRoom= room.Room( )
        aRoom.addPerson( self.firstName, self.lastName, self.gender )
</code></pre>

<p>Your <code>main.py</code> looks like this</p>

<pre><code>import room
import person
r = room.Room( ... )
r.addPerson( ""some"", ""name"", ""M"" )
print r
</code></pre>
"
184617,"<p>Anders' answer gives the necessary information, but isn't that clear: the client key needs to be decoded before it is combined.  (The example above is also missing a newline at the end of the final table data).</p>

<p>So the working code is:</p>

<pre><code>&gt;&gt;&gt; s = ""+8070465bdf3b9c6ad6a89c32e8162ef1\t\n+86fa593a025714f89d6bc8c9c5a191ac\t\n+bbbd7247731cbb7ec1b3a5814ed4bc9d\t\n""
&gt;&gt;&gt; c = ""8eirwN1kTwCzgWA2HxTaRQ=="".decode('base64')                            
&gt;&gt;&gt; hashlib.md5(""%s%s%s%s%s"" % (c, "":coolgoog:"", s, "":coolgoog:"", c)).digest().encode(""base64"")
'dRalfTU+bXwUhlk0NCGJtQ==\n'
</code></pre>
"
185583,"<p>If you write a slightly more complex regular expression, you can get an extra feature: extract the bit between ""Run"" and "".py"":</p>

<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; regex = '^Run(?P&lt;name&gt;.*)\.py$'
&gt;&gt;&gt; m = re.match(regex, 'RunFoo.py')
&gt;&gt;&gt; m.group('name')
'Foo'
</code></pre>

<p>(the extra bit is the parentheses and everything between them, except for '.*' which is as in Rob Howard's answer)</p>
"
4958,<p>Focus on the shorter time needed for development/prototype and possibly easier maintenance (none of this may apply against Ruby).</p>
1870,"<p>Wow, that took forever. Ok, here's what I've ended up with </p>

<pre><code>#!C:\python25\python.exe<br>import msvcrt<br>print """"""Menu<br>1) Say Foo <br>2) Say Bar""""""<br>while 1:<br>    char = msvcrt.getch()<br>    if char == chr(27): #escape<br>        break<br>    if char == ""1"":<br>        print ""foo""<br>        break<br>    if char == ""2"":<br>        print ""Bar""<br>        break<br></code></pre>

<p>It fails hard using IDLE, the python...thing...that comes with python. But once I tried it in DOS (er, CMD.exe), as a real program, then it ran fine.</p>

<p>No one try it in IDLE, unless you have Task Manager handy.</p>

<p>I've already forgotten how I lived with menus that arn't super-instant responsive.</p>"
348396,"<p>Yes, you can do pretty much everything with the built-in libraries.  Do a search here looking for the tags <code>[python]</code> and <code>[email]</code> and you'll see how it's done.</p>
"
249143,"<p>The best leverage you're likely going to have is tools and libraries; as others have pointed out, no language is <em>required</em> to solve any particular program.  So let's look at Things You Can Leverage Using Python:</p>

<ul>
<li>Google App Engine</li>
<li>SciPy</li>
<li>pywinauto</li>
<li>django</li>
</ul>

<p>Those are off the top of my head; finding what's applicable to your team and your company is left as an exercise for the questioner :)</p>
"
129626,"<p>You could try something like this.  This is vaguely C macro-like.</p>

<pre><code>class TryOrBaz( object ):
    def __init__( self, that ):
        self.that= that
    def __call__( self, *args ):
        try:
            return self.that( *args )
        except Exception, e:
            baz( e )

TryOrBaz( foo )( a, b )
TryOrBaz( bar )( c, d )
</code></pre>
"
187493,"<p>Or,</p>

<pre><code>myArray.__len__()
</code></pre>

<p>if you want to be oopy; ""len(myArray)"" is a lot easier to type! :)</p>
"
185480,"<p>I think you have one issue that should be straightened.  Circular references often result from a failure to achieve separation of concerns.  In my opinion, the database and model modules shouldn't know much about each other, working against an API instead.  In this case the database shouldn't directly reference any specific model classes but instead provide the functionality the model classes will need to function.  The model in turn, should get a database reference (injected or requested) that it would use to query and persist itself.</p>
"
5746,"<p>If you can find a solution that works with tuples, use them, as it forces immutability which kind of drives you down a more functional path. You almost never regret going down the functional/immutable path.</p>"
347499,"<p>Metaclasses is one option. Another option is to use a <code>TestSuite</code>:</p>

<pre><code>import unittest
import numpy
import funcs

# get references to functions
# only the functions and if their names start with ""matrixOp""
functions_to_test = [v for k,v in funcs.__dict__ if v.func_name.startswith('matrixOp')]

# suplly an optional setup function
def setUp(self):
    self.matrix1 = numpy.ones((5,10))
    self.matrix2 = numpy.identity(5)

# create tests from functions directly and store those TestCases in a TestSuite
test_suite = unittest.TestSuite([unittest.FunctionTestCase(f, setUp=setUp) for f in functions_to_test])


if __name__ == ""__main__"":
unittest.main()
</code></pre>

<p>Haven't tested. But it should work fine.</p>
"
347509,"<p>You should reconsider the notion of returning <a href=""http://en.wikipedia.org/wiki/Html"" rel=""nofollow"">HTML</a> - headers are part of <a href=""http://en.wikipedia.org/wiki/Http"" rel=""nofollow"">HTTP</a>.
If you build your framework around an HTTP stream, the headers are simply lines that precede the HTML payload.</p>

<p>A headers example from the above link:</p>

<pre><code>HTTP/1.1 200 OK
Date: Mon, 23 May 2005 22:38:34 GMT
Server: Apache/1.3.3.7 (Unix)  (Red-Hat/Linux)
Last-Modified: Wed, 08 Jan 2003 23:11:55 GMT
Etag: ""3f80f-1b6-3e1cb03b""
Accept-Ranges: bytes
Content-Length: 438
Connection: close
Content-Type: text/html; charset=UTF-8
</code></pre>

<p>For a Python example, see the implementaion of <a href=""http://docs.python.org/library/basehttpserver.html#BaseHTTPServer.BaseHTTPRequestHandler.send_header"" rel=""nofollow""><code>BaseHTTPRequestHandler.send_header(keyword, value</code>)</a>.</p>
"
348715,"<p>Since Gmail supports the standard protocols POP and IMAP, any platform, tool, application, component, or API that provides the client side of either protocol should work.</p>

<p>I suggest doing a Google search for your favorite language/platform (e.g., ""python""), plus ""pop"", plus ""imap"", plus perhaps ""open source"", plus perhaps ""download"" or ""review"", and see what you get for options.</p>

<p>There are numerous free applications and components, pick a few that seem worthy, check for reviews, then download and enjoy.</p>
"
192694,"<p>No but you have UserDict UserString and UserList which were made with exactly this in mind.</p>

<p>If you google you will find examples for other types, but this are builtin.</p>

<p>In general monkey patching is less used in Python than in Ruby.</p>
"
339655,"<p>If, as you said in the comments above, you're just tweaking the output each time and re-running the command, would something like the following work?</p>

<pre><code>from threading import Timer
import subprocess

WAIT_TIME = 10.0

def check_cmd(cmd):
    p = subprocess.Popen(cmd,
    	stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE)
    def _check():
    	if p.poll()!=0:
    		print cmd+"" did not quit within the given time period.""

    # check whether the given process has exited WAIT_TIME
    # seconds from now
    Timer(WAIT_TIME, _check).start()

check_cmd('echo')
check_cmd('python')
</code></pre>

<p>The code above, when run, outputs:</p>

<pre><code>python did not quit within the given time period.
</code></pre>

<p>The only downside of the above code that I can think of is the potentially overlapping processes as you keep running check_cmd.</p>
"
130090,"<p>Give this a try, it gets the job done without having to change/add a lot of existing code.</p>

<pre><code>&gt;&gt;&gt; class foo(object):
...     _var = 5
...     def getvar(cls):
...         return cls._var
...     getvar = classmethod(getvar)
...     def setvar(cls, value):
...         cls._var = value
...     setvar = classmethod(setvar)
...     var = property(lambda self: self.getvar(), lambda self, val: self.setvar(val))
...
&gt;&gt;&gt; f = foo()
&gt;&gt;&gt; f.var
5
&gt;&gt;&gt; f.var = 3
&gt;&gt;&gt; f.var
3
</code></pre>

<p>The <code>property</code> function needs two <code>callable</code> arguments. give them lambda wrappers (which it passes the instance as its first argument) and all is well.</p>
"
249708,"<p>I find in this situation, symlinks, or even copying specific files (packages, modules, extensions) works really well.</p>

<p>It allows the program to emulate being run in the target environment, rather than changing the application to suit the development environment.</p>

<p>Same deal for something like AppEngine.</p>
"
129012,"<p>It looks like <em>deluser --group [groupname]</em> should do it.</p>

<p>If not, the <em>groups</em> command lists the groups that a user belongs to.  It should be fairly straightforward to come up with some Perl to capture that list into an array (or <em>map</em> it into a hash), delete the unwanted group(s), and feed that back to <em>usermod</em>.</p>
"
129396,"<p>If you're doing an n-way merge with removing duplicates, the following may be what you're looking for.</p>

<p>This generator will merge any number of sources.  Each source must be a sequence.
The key must be in position 0.  It yields the merged sequence one item at a time.</p>

<pre><code>def merge( *sources ):
    keyPos= 0
    for s in sources:
        s.sort()
    while any( [len(s)&gt;0 for s in sources] ):
        topEnum= enumerate([ s[0][keyPos] if len(s) &gt; 0 else None for s in sources ])
        top= [ t for t in topEnum if t[1] is not None ]
        top.sort( key=lambda a:a[1] )
        src, key = top[0]
        #print src, key
        yield sources[ src ].pop(0)
</code></pre>

<p>This generator removes duplicates from a sequence.  </p>

<pre><code>def unique( sequence ):
    keyPos= 0
    seqIter= iter(sequence)
    curr= seqIter.next()
    for next in seqIter:
        if next[keyPos] == curr[keyPos]:
            # might want to create a sub-list of matches
            continue
        yield curr
        curr= next
    yield curr
</code></pre>

<p>Here's a script which uses these functions to produce a resulting sequence which is the union of all the sources with duplicates removed.</p>

<pre><code>for u in unique( merge( source1, source2, source3, ... ) ):
    print u
</code></pre>

<p>The complete set of data in each sequence must exist in memory once because we're sorting in memory.   However, the resulting sequence does not actually exist in memory.  Indeed, it works by consuming the other sequences.  </p>
"
129468,"<p>Here's a very simple little Perl script that should give you the list of groups you need:</p>

<pre><code>my $user = 'user';
my $groupNoMore = 'somegroup';
my $groups = join ',', grep { $_ ne $groupNoMore } split /\s/, `groups $user`;
</code></pre>

<p>Getting and sanitizing the required arguments is left as an execrcise for the reader.</p>
"
250797,"<p>Hmmm, perhaps another option would be to use something like <a href=""http://fuse.sourceforge.net/sshfs.html"" rel=""nofollow"">sshfs</a> (there an <a href=""http://code.google.com/p/macfuse/wiki/MACFUSE_FS_SSHFS"" rel=""nofollow"">sshfs</a> for Mac too).  Once your router is mounted you can just copy the files outright.   I'm not sure if that works for your particular application but it's a nice solution to keep handy.</p>
"
250804,"<p>The simplest thing to do would be the run the controlling script (the Python script) via <code>sudo</code>. Are you able to do that, or is that not an option?</p>
"
19700,"<p>I think the language itself is not an issue here, as python is really nice high level language with good and easy to find, thorough documentation.</p>

<p>From what I've seen, the Django framework is also a great tooklit for web development, giving much the same developer performance boost Rails is touted to give.</p>

<p>The real issue is at the maintenance and management level.</p>

<p>How will this move fragment the maintenance between PHP and Python code. Is there a need to migrate existing code from one platform to another? What problems will adopting Python and Django solve that you have in your current development workflow and frameworks, etc.</p>
"
19968,"<p>It's really all about schedules.  To me the break should be with a specific project.  If you decide your direction is Django then start new projects with that.  Before you start a new project with a new language/framework, either make sure that you have scheduled time to get up to speed in this new direction, or get up to speed before using on new projects.</p>

<p>I would avoid going with a tool of the month.  Make sure you want it to be your direction and commit some time/resources to learning enough to make a good decision.</p>
"
20845,"<p>I'm not a python guy but it looks like os.readlink()?  The logic I would use in perl is to use readlink() to find the target and the use stat() to test to see if the target exists.</p>

<p>Edit: I banged out some perl that demos readlink.  I believe perl's stat and readlink and python's os.stat() and os.readlink()are both wrappers for the system calls, so this should translate reasonable well as proof of concept code:</p>

<pre><code>wembley 0 /home/jj33/swap &gt; cat p
my $f = shift;

while (my $l = readlink($f)) {
  print ""$f -&gt; $l\n"";
  $f = $l;
}

if (!-e $f) {
  print ""$f doesn't exist\n"";
}
wembley 0 /home/jj33/swap &gt; ls -l | grep ^l
lrwxrwxrwx    1 jj33  users          17 Aug 21 14:30 link -&gt; non-existant-file
lrwxrwxrwx    1 root     users          31 Oct 10  2007 mm -&gt; ../systems/mm/20071009-rewrite//
lrwxrwxrwx    1 jj33  users           2 Aug 21 14:34 mmm -&gt; mm/
wembley 0 /home/jj33/swap &gt; perl p mm
mm -&gt; ../systems/mm/20071009-rewrite/
wembley 0 /home/jj33/swap &gt; perl p mmm
mmm -&gt; mm
mm -&gt; ../systems/mm/20071009-rewrite/
wembley 0 /home/jj33/swap &gt; perl p link
link -&gt; non-existant-file
non-existant-file doesn't exist
wembley 0 /home/jj33/swap &gt;
</code></pre>
"
180564,"<p>You also might want to check out Uche Ogbuji's excellent XML Data Binding Library, Amara:
<a href=""http://uche.ogbuji.net/tech/4suite/amara"" rel=""nofollow"">http://uche.ogbuji.net/tech/4suite/amara</a></p>

<p>(Documentation here:
<a href=""http://platea.pntic.mec.es/~jmorilla/amara/manual/"" rel=""nofollow"">http://platea.pntic.mec.es/~jmorilla/amara/manual/</a>)</p>

<p>The cool thing about Amara is that it turns an XML document in to a Python object, so you can just do stuff like:</p>

<pre class=""lang-python prettyprint-override""><code>record = doc.xml_create_element(u'Record')

nameElem = doc.xml_create_element(u'Name', content=unicode(name))

record.xml_append(nameElem)

valueElem = doc.xml_create_element(u'Value', content=unicode(value))

record.xml_append(valueElem
</code></pre>

<p>(which creates a Record element that contains Name and Value elements (which in turn contain the values of the name and value variables)).</p>
"
24236,"<p>I don't understand what you are trying to do here. Are you trying to execute a Python script that generates a C# file and then compile that with the project? Or are you trying to compile a Python script to C#?</p>
"
24248,"<p>OK, I see. Well, as far as I know there isn't any code generator for Python. There is a good introduction on how to roll your own <a href=""http://www.drewnoakes.com/snippets/WritingACustomCodeGeneratorToolForVisualStudio/"" rel=""nofollow"">here</a>.</p>

<p>Actually, that's quite an under-used part of the environment, I suppose it's so because it needs you to use the IDE to compile the project, as it'd seem only the IDE knows about these ""generators"", but MSBuild ignores them.</p>
"
21973,"<pre><code>mktime(...)
    mktime(tuple) -&gt; floating point number

    Convert a time tuple in local time to seconds since the Epoch.
</code></pre>

<p>local time... fancy that.</p>

<p>The time tuple:</p>

<pre><code>The other representation is a tuple of 9 integers giving local time.
The tuple items are:
  year (four digits, e.g. 1998)
  month (1-12)
  day (1-31)
  hours (0-23)
  minutes (0-59)
  seconds (0-59)
  weekday (0-6, Monday is 0)
  Julian day (day in the year, 1-366)
  DST (Daylight Savings Time) flag (-1, 0 or 1)
If the DST flag is 0, the time is given in the regular time zone;
if it is 1, the time is given in the DST time zone;
if it is -1, mktime() should guess based on the date and time.
</code></pre>

<p>Incidentally, we seem to be 6 hours apart:</p>

<pre><code>&gt;&gt;&gt; time.mktime((2009, 1, 31, 0, 0, 0, 5, 31, -1))
1233356400.0
&gt;&gt;&gt; (1233378000.0 - 1233356400)/(60*60)
6.0
</code></pre>
"
22021,"<p>Phil's answer really solved it, but I'll elaborate a little more. Since the epoch is in UTC, if I want to compare other times to the epoch, I need to interpret them as UTC as well.</p>

<pre><code>&gt;&gt;&gt; calendar.timegm((2009, 1, 31, 0, 0, 0, 5, 31, -1))
1233360000
&gt;&gt;&gt; 1233360000 / (60*60*24)
14275
</code></pre>

<p>By converting the time tuple to a timestamp treating is as UTC time, I get a number which <em>is</em> evenly divisible by the number of seconds in a day.</p>

<p>I can use this to convert a date to a days-from-the-epoch representation which is what I'm ultimately after.</p>
"
338079,"<p>Using <em>select</em> and sleeping doesn't really make much sense.  <em>select</em> (or any kernel polling mechanism) is inherently useful for asynchronous programming, but your example is synchronous.  So either rewrite your code to use the normal blocking fashion or consider using Twisted:</p>

<pre><code>from twisted.internet.utils import getProcessOutputAndValue
from twisted.internet import reactor    

def stop(r):
    reactor.stop()
def eb(reason):
    reason.printTraceback()
def cb(result):
    stdout, stderr, exitcode = result
    # do something
getProcessOutputAndValue('/bin/someproc', []
    ).addCallback(cb).addErrback(eb).addBoth(stop)
reactor.run()
</code></pre>

<p>Incidentally, there is a safer way of doing this with Twisted by writing your own ProcessProtocol:</p>

<p><a href=""http://twistedmatrix.com/projects/core/documentation/howto/process.html"" rel=""nofollow"">http://twistedmatrix.com/projects/core/documentation/howto/process.html</a></p>
"
251632,"<p>Python got a good start in the Java world as Jython for unit testing.  In fact many Java people started using it first that way.  Its dynamic scripting nature makes it a great fit for unit tests.  Just yesterday I was wishing I could use it or something like it for the unit tests I was writing for a VB.Net project.  I'd have to say that it isn't so much about the individual language IronRuby or IronPython as it is about the style of development that they enable.  You can write static language like code in either but you don't fully reap the benefits until you can start to think dynamically.  Once you grasp those concepts you'll start to slowly change the way you code and your projects will require less classes and less code to implement.  Testing, particularly unit tests will become a must since you give up the warm blanket known as a compiler with type safety checks for other efficiencies.</p>
"
252393,"<p>If you have to do this, I guess the nicest way is to have a class attribute something like :</p>

<pre><code>Class Copyable(object):
    copyable_attributes = ('an_attribute', 'another_attribute')
</code></pre>

<p>Then iterate them explicitly and use <code>setattr(new, attr, getattr(old, attr))</code>. I still believe it can be solved with a better design though, and don't recommend it.</p>
"
128550,"<p>I'm assuming the problem you try to solve by cutting down on the memory you use is the address space limit of your process. Additionally you search for a data structure that allows you fast insertion and reasonable sequential read out.</p>

<h2>Use less structures except strings (str)</h2>

<p>The question you ask is how to structure your data in one process to use less memory. The one canonical answer to this is (as long as you still need associative lookups), use as little other structures then python strings (str, not unicode) as possible. A python hash (dictionary) stores the references to your strings fairly efficiently (it is not a b-tree implementation).</p>

<p>However I think that you will not get very far with that approach, since what you face are huge datasets that might eventually just exceed the process address space and the physical memory of the machine you're working with altogether.</p>

<h2>Alternative Solution</h2>

<p>I would propose a different solution that does not involve changing your data structure to something that is harder to insert or interprete.</p>

<ul>
<li>Split your information up in multiple processes, each holding whatever datastructure is convinient for that. </li>
<li>Implement inter process communication with sockets such that processes might reside on other machines altogether. </li>
<li>Try to divide your data such as to minimize inter process communication (i/o is glacially slow compared to cpu cycles). </li>
</ul>

<p>The advantage of the approach I outline is that</p>

<ul>
<li>You get to use two ore more cores on a machine fully for performance</li>
<li>You are not limited by the address space of one process, or even the physical memory of one machine</li>
</ul>

<p>There are numerous packages and aproaches to distributed processing, some of which are</p>

<ul>
<li><a href=""http://pypi.python.org/pypi/linda/0.5.1"" rel=""nofollow"">linda</a></li>
<li><a href=""http://pypi.python.org/pypi/processing/0.52"" rel=""nofollow"">processing</a></li>
</ul>
"
128616,"<p>We use </p>

<p>app/src/code.py</p>

<p>app/testing/code_test.py </p>

<p>app/docs/..</p>

<p>In each test file we insert ""../src/"" in sys.path. It's not the nicest solution but works. I think it would be great if someone came up w/ something like maven in java that gives you standard conventions that just work, no matter what project you work on.</p>
"
131047,"<p>If you're looking for something a little more abstracted, try using <a href=""http://docs.djangoproject.com/en/dev/topics/http/sessions/#examples"" rel=""nofollow"">sessions</a>. I believe the way they work is by storing an id in the cookie that matches a database record. You can store whatever you want in it. It's not exactly the same as what you're looking for, but it could work if you don't mind a small amount of db overhead.</p>
"
248756,"<p>You could create and distribute a selinux policy for your application.  Selinux allows the kind of fine-grained access that you need.  If you can't or won't use selinux, then the daemon is the way to go.</p>
"
248757,"<p>I would not run the application full time as root, but you might want to explore making your application setuid root, or setuid to some id that can become root using something like sudo for particular applications.   You might be able to set up an account that cannot login, use setuid to change your program's id (temporarily when needed) and have sudo set up to not prompt for password, but always allow access to that account for specific tasks.</p>

<p>This way your program has no special privileges when running normally, only elevates it's privileges when needed, and is restricted by sudo to only running certain programs.</p>

<p>It's been awhile since I've done much Unix development, so I'm not really sure whether it's possible to set up sudo to not prompt for a password (or even if there is an API for it), but  as a fallback you could enable setuid to root only when needed.</p>

<p>[EDIT]  Looks like <a href=""http://www.sudo.ws/sudo/sudo.html"" rel=""nofollow"">sudo</a> has a NOPASSWD mode so I think it should work since you're running the programs as external commands.</p>
"
338783,"<p>Thanks.</p>

<p>I looked at the source.</p>

<p>There isn't really a way to change its form. Since manipulating suffix, only appends to the end of the file name. Ether way, there is no way real way to manipulate the full file name, what i was hoping for was where you can declare a file mask, and when it does the ""RollOver"" it will create a new file name based on the file mask. I am just going to go back to my original idea, was to just kill the whole logging subsystem and reinitialize it with the new file name when it RollsOver.</p>

<p>Thanks Tho.</p>
"
179761,"<p>You can subtract each successive date from the one prior (resulting in a timedelta object which represents the difference in days, seconds).  You can then average the timedelta objects to find your answer.</p>
"
180028,"<p>The first one is absolutely possible, and preferable in my opinion.  In python, there's really not a whole lot of magic behind constructors.  For all intents and purposes, they're just like any other function.  I've used this design pattern a few times to indicate that a class shouldn't be instantiated directly, for example:</p>

<pre><code>def DatabaseConnectionFromString(connection_string)
    return _DatabaseConnection(connection_string)

def DatabaseConnectionFromSomethingElse(something_else)
    connection_string = convert_something_else_into_string(something_else)
    return _DatabaseConnection(connection_string)

class _DatabaseConnection(object):
    def __init__(self, connection_string):
        self.connection_string = connection_string
</code></pre>

<p>Of course, that's a contrived example, but that should give you a general idea.</p>

<p><strong>EDIT:</strong> This is also one of the areas where inheritance isn't quite as frowned upon in python as well.  You can also do this:</p>

<pre><code>DatabaseConnection(object):
    def __init__(self, connection_string):
        self.connection_string = connection_string

DatabaseConnectionFromSomethingElse(object)
    def __init__(self, something_else):
        self.connection_string = convert_something_else_into_string(something_else)
</code></pre>

<p>Sorry that's so verbose, but I wanted to make it clear.</p>
"
192296,"<p>Try using <a href=""http://docs.python.org/library/logging.html#logging.Logger.exception"" rel=""nofollow"" rel=""nofollow"">Logger.exception</a>.</p>

<blockquote>
  <p>Logger.exception() creates a log
  message similar to Logger.error(). The
  difference is that Logger.exception()
  dumps a stack trace along with it.
  Call this method only from an
  exception handler.</p>
</blockquote>
"
25761,"<p>You may be interested in <a href=""http://www.daa.com.au/pipermail/pygtk/2006-September/012888.html"" rel=""nofollow"">this message thread</a>.  Looks like they recommend against it.</p>
"
337336,"<p>I think it's fine to keep it that way. Sophisticated one-liner are not really pythonic, and since Guido had to put a limit somewhere, I guess this is it...</p>
"
337697,"<p>Just remove leading zeros.</p>

<p>First zero makes number octal.</p>
"
337753,"<p>There's a <em>lot</em> that you can do, but you'd need to be more specific about what you mean by ""integrate a formwizard into the admin app"" and ""trigger several forms within the admin app.""</p>

<p>The admin app at its core is basically just a wrapper around a bunch of stock ModelForms, so if you just build a formwizard using ModelForms and slap the admin styling on it, you may be 80% of the way there.</p>
"
178370,"<p>Not exactly the same syntax, but there are a number of dictionary extensions out there which respect the order in which the key/value pairs have been added.  E.g. <a href=""http://home.arcor.de/wolfgang.grafen/Python/Modules/seqdict/Seqdict.html"" rel=""nofollow"">seqdict</a>.</p>
"
178582,"<p>""imports a lot of other files""?  Imports a lot of other files that are part of your customized code base?  Or imports a lot of other files that are part of the Python distribution?  Or imports a lot of other open source project files?</p>

<p>If your imports don't work, you have a ""simple"" <code>PYTHONPAT</code>H problem.  Get all of your various project directories onto a <code>PYTHONPATH</code> that you can use for testing.  We have a rather complex path, in Windows we manage it like this</p>

<pre><code>@set Part1=c:\blah\blah\blah
@set Part2=c:\some\other\path
@set that=g:\shared\stuff
set PYTHONPATH=%part1%;%part2%;%that%
</code></pre>

<p>We keep each piece of the path separate so that we (a) know where things come from and (b) can manage change when we move things around.</p>

<p>Since the <code>PYTHONPATH</code> is searched in order, we can control what gets used by adjusting the order on the path.</p>

<p>Once you have ""everything"", it becomes a question of trust.</p>

<p>Either </p>

<ul>
<li>you trust something (i.e., the Python code base) and just import it.</li>
</ul>

<p>Or </p>

<ul>
<li><p>You don't trust something (i.e., your own code) and you </p>

<ol>
<li>test it separately and </li>
<li>mock it for stand-alone testing.</li>
</ol></li>
</ul>

<p>Would you test the Python libraries?  If so, you've got a lot of work.  If not, then, you should perhaps only mock out the things you're actually going to test.</p>
"
247409,"<p>The wxPython demo has an example of a ""dynamic"" wizard. Pages override GetNext() and GetPrev() to show pages dynamically. This shows the basic technique; you can extend it to add and remove pages, change pages on the fly, and rearrange pages dynamically.</p>

<p>The wizard class is just a convenience, though. You can modify it, or create your own implementation. A style that seems popular nowadays is to use an HTML-based presentation; you can emulate this with the wxHtml control, or the IEHtmlWindow control if your app is Windows only.</p>
"
248882,"<p>The traditional way would be to create and use a setuid helper to do whatever you need. Note that, however, properly writing a setuid helper is tricky (there are several attack vectors you have to protect against).</p>

<p>The modern way would be to use a daemon (running as root, started on boot) which listens to requests from the rest of the application. This way, your attack surface is mostly limited to whichever IPC you chose (I'd suggest d-bus, which seems to be the modern way).</p>

<p>Finally, if you are managing network interfaces, what you doing is very similar to what network-manager does on a modern distribution. It would be a good idea to either try to somehow integrate what you are doing with network-manager (so it will not conflict with your manipulations), or at least looks at how it works.</p>
"
248884,"<p>Macports should be easy to get rid of; just delete /opt/local/. I think that Fink does something similar.</p>

<p>You can do <code>which python</code> to see what python is the default one. The system python should be in /System/Library/Frameworks/Python.framework/Versions/2.5/bin/python</p>

<p>The MacPython you may have downloaded would either be in /Library/Frameworks/Python.framework. You can delete this as well.</p>

<p>Also, both MacPython and MacPorts edit your ~/.profile and change the PYTHONPATH, make sure to edit it and remove the extra paths there.</p>
"
127392,"<p>Using your code as a basis:</p>

<pre><code>def groups(regexp, s):
    """""" Returns the first result of re.findall, or an empty default

    &gt;&gt;&gt; groups(r'(\d)(\d)(\d)', '123')
    ('1', '2', '3')
    &gt;&gt;&gt; groups(r'(\d)(\d)(\d)', 'abc')
    ('', '', '')
    """"""
    import re
    m = re.search(regexp, s)
    if m:
        return m.groups()
    return ('',) * len(m.groups())
</code></pre>
"
127501,"<p>If you aren't up to actually working on the Python core, there are still many ways to contribute..  2 that immediately come to mind is:</p>

<p>work on documentation.. it can ALWAYS be improved.  Take your favorite modules and check out the documentation and add where you can.</p>

<p>Reporting descriptive bugs is very helpful to the development process.</p>
"
127510,"<p>Get involved with the community:  <a href=""http://www.python.org/dev/"" rel=""nofollow"">http://www.python.org/dev/</a></p>
"
128361,"<p>Sets don't have keys.  The element <strong>is</strong> the key.</p>

<p>If you think you want keys, you have a mapping.  More-or-less by definition.</p>

<p>Sequential list lookup can be slow, even using a binary search.  Mappings use hashes and are fast.</p>

<p>Are you talking about a dictionary like this?</p>

<pre><code>{ 'id1': [ ('description1a', 'type1'), ('description1b','type1') ], 
  'id2': [ ('description2', 'type2') ],
...
}
</code></pre>

<p>This sure seems minimal.  ID's are only represented once.</p>

<p>Perhaps you have something like this?</p>

<pre><code>{ 'id1': ( ('description1a', 'description1b' ), 'type1' ),
  'id2': ( ('description2',), 'type2' ),
...
}
</code></pre>

<p>I'm not sure you can find anything more compact unless you resort to using the <code>struct</code> module.</p>
"
250933,"<p>If you need support for moving across filesystems, consider just copying CPython's <code>shutil.py</code> into your project. <A HREF=""http://www.python.org/download/releases/2.4.2/license/"" rel=""nofollow"">The Python License</A> is flexible enough to allow this (even for commercial projects), as long as licensing and attribution information are retained.</p>
"
178603,"<p>If you really want to muck around with the python import mechanism, take a look at the <a href=""http://pydoc.org/2.4.1/ihooks.html"" rel=""nofollow""><code>ihooks</code></a> module.  It provides tools for changing the behavior of the <code>__import__</code> built-in.  But it's not clear from your question why you need to do this.</p>
"
177898,"<p>The problem seems to be that you mainly want to work within one row, and these type of questions are hard to answer in SQL.</p>

<p>I'd try to turn the structure you mentioned into a more ""atomic"" fact table like</p>

<pre><code>word property value
</code></pre>

<p>either by redesigning the underlying table (if possible and if that makes sense regarding the rest of the application), or by defining a view that does this for you, like</p>

<pre><code>select word, 'big' as property, big as value from soquestion
UNION ALLL
select word, 'expensive', expensive from soquestion
UNION ALL
...
</code></pre>

<p>This allows you to ask for the max value for each word:</p>

<pre><code>select word, max(value), 
    (select property from soquestion t2 
     where t1.word = t2.word and t2.value = max(t1.value))
from soquestion t1
group by word
</code></pre>

<p>Still a little awkward, but most logic will be in SQL, not in your programming language of choice.</p>
"
28199,"<p>Some of the user-contributed notes and functions in <a href=""http://us3.php.net/sprintf"" rel=""nofollow"">PHP's documentation for sprintf</a> come quite close.</p>

<p>Note: search the page for ""sprintf2"".</p>
"
336550,"<blockquote>
  <p>Please could you give a short
  description on what winmail.dat is and
  why it is here to annoy us.</p>
</blockquote>

<p><a href=""http://support.microsoft.com/kb/138053"" rel=""nofollow"">kb138053</a></p>

<blockquote>
  <p>When an end user sends mail to the
  Internet from an Exchange Windows or
  Outlook client, a file attachment
  called Winmail.dat may be
  automatically added to the end of the
  message if the recipient's client
  cannot receive messages in Rich Text
  Format (RTF). The Winmail.dat file
  contains Exchange Server RTF
  information for the message, and may
  appear to the recipient as a binary
  file. It is not useful to non-Exchange
  Server recipients.</p>
</blockquote>

<p>If you read the kb I referenced further it gives instructions on how Exchange administrators can and <strong>should</strong> disable RTF to the internet.</p>
"
336551,"<p>so when i see this in email Content-Type:
""application/ms-tnef""  </p>

<p>I use this:
<a href=""http://www.freeutils.net/source/jtnef/"" rel=""nofollow"">http://www.freeutils.net/source/jtnef/</a></p>
"
337004,"<p>Another approach: use <a href=""http://www.postfix.org"" rel=""nofollow"">Postfix</a> for receiving email and write a <a href=""http://www.postfix.org/SMTPD_POLICY_README.html"" rel=""nofollow"">policy</a> script in Python.</p>
"
337247,"<h2>Forget this</h2>

<p>Leaving the answer, but marking it community. See <a href=""http://stackoverflow.com/users/28604/steven-huwig"">Stewen Huwig</a>'s answer for the <strong>correct</strong> way to do this.</p>

<p><hr /></p>

<p>Well, [x for x in enumerable] will run until enumerable doesn't produce data any more, the if-part will simply allow you to filter along the way.</p>

<p>What you can do is add a function, and filter your enumerable through it:</p>

<pre><code>def enum_until(source, until_criteria):
    for k in source:
        if until_criteria(k):
            break;
        yield k;

def enum_while(source, while_criteria):
    for k in source:
        if not while_criteria(k):
            break;
        yield k;

l1 = [k for k in enum_until(xrange(1, 100000), lambda y: y == 100)];
l2 = [k for k in enum_while(xrange(1, 100000), lambda y: y &lt; 100)];
print l1;
print l2;
</code></pre>

<p>Of course, it doesn't look as nice as what you wanted...</p>
"
337308,"<p>Linux is not officially supported for Series60 development yet. You will save yourself a lot of headache using Windows, weirdly enough.</p>

<p>As far as Python is oncerned, I think the developed application is packaged into a .sis file  but still requires the PyS60 interpreter to run once installed.</p>
"
126341,"<p>You can probably use <a href=""http://code.google.com/p/pywebkitgtk/"" rel=""nofollow"">python-webkit</a> for it.  Requires a running glib and GTK, but that's probably less problematic than wrapping the parts of webkit without glib.</p>

<p>I don't know if it does everything you need, but I guess you should give it a try.</p>
"
134081,"<p>This isn't exactly a direct answer to your question, but you might want to look at <a href=""http://www.antlr.org"" rel=""nofollow"">ANTLR</a>.  According to <a href=""http://www.antlr.org/wiki/display/ANTLR3/Code+Generation+Targets"" rel=""nofollow"">this</a> document the python code generation target should be up to date.</p>

<p>As to your regexes, there are really two ways to go about speeding it up if you're sticking to regexes.  The first would be to order your regexes in the order of the probability of finding them in a default text.  You could figure adding a simple profiler to the code that collected token counts for each token type and running the lexer on a body of work.  The other solution would be to bucket sort your regexes (since your key space, being a character, is relatively small) and then use a array or dictionary to perform the needed regexes after performing a single discrimination on the first character.</p>

<p>However, I think that if you're going to go this route, you should really try something like <a href=""http://www.antlr.org"" rel=""nofollow"">ANTLR</a> which will be easier to maintain, faster, and less likely to have bugs.</p>
"
245815,"<p>What you want to do (at least from what I read here and on the Django documentation site) is create a <a href=""http://docs.djangoproject.com/en/dev/howto/custom-file-storage/#howto-custom-file-storage"" rel=""nofollow"">custom storage system.</a></p>

<p>This should give you exactly what you need - it's the motivation they use to start the example, after all!</p>
"
246254,"<p>You can only gettext.install() once. In general it's useless for library work -- gettext.install() will only do the right thing if the module calling it is in charge of the whole program, since it will only provide you with one catalog to load from. Library code should do something akin to what Mailman does: have their own wrapper for gettext() that passes the right arguments for this module, then imports that as '_' in each module that wants to use it.</p>
"
252444,"<p>ctypes will be the easiest thing to use but (mis)using it makes Python subject to crashing. If you are trying to do something quickly, and you are careful, it's great.</p>

<p>I would encourage you to check out <a href=""http://www.boost.org/doc/libs/1_36_0/libs/python/doc/index.html"" rel=""nofollow"">Boost Python</a>. Yes, it requires that you write some C++ code and have a C++ compiler, but you don't actually need to learn C++ to use it, and you can get a free (as in beer) <a href=""http://www.microsoft.com/express/vc/"" rel=""nofollow"">C++ compiler from Microsoft</a>.</p>
"
126495,"<p>Compiling extensions on windows can be tricky.  There are precompiled libraries available however: <a href=""http://www.stickpeople.com/projects/python/win-psycopg/"" rel=""nofollow"">http://www.stickpeople.com/projects/python/win-psycopg/</a></p>
"
126750,"<p>Once an object is drawn in a device context it stays there. If you want to move it you need to redraw it.</p>

<p>You can keep a background that's fixed and only redraw the movable elements each time they move. Basically that's how it's done.</p>

<p>To move an object smoothly over a line you have to do something like this (I don't have a program ready, so can only give you an idea):</p>

<ul>
<li>choose the start and end position: point A(x1, y1) and B(x2, y2)</li>
<li>choose in how much time the object should change position from A to B (say 10 seconds).</li>
<li>use a timer set to a certain interval (say 2 seconds)</li>
<li>calculate the delta X and Y that the object should change for each timer interval. In this case dx = (x2-x1)*2/10 and dy = (y2-y1)*2/10</li>
<li>in the timer callback increment the current object position with dx and dy and redraw the image</li>
</ul>

<p>That would be the algorithm.</p>

<p>I suggest that you also take a look to <a href=""http://www.pygame.org/"" rel=""nofollow"">PyGame</a>. Maybe you can use that and it also has some tutorials.</p>
"
126866,"<p>reload() does not work. ""Reloading"" is usually implemented by forking.</p>

<p>Implementing ""real"" reload() is extremely difficult and even the most serious attempt, <a href=""http://twistedmatrix.com/documents/current/api/twisted.python.rebuild.html"" rel=""nofollow"">twisted.python.rebuild</a> isn't perfect.</p>
"
127089,"<p>First of all if you only need the first result of re.findall it's better to just use re.search that returns a match or None.</p>

<p>For the groups number you could count the number of open parenthesis '(' except those that are escaped by '\'. You could use another regex for that:</p>

<pre><code>def num_of_groups(regexp):
    rg = re.compile(r'(?&lt;!\\)\(')
    return len(rg.findall(regexp))
</code></pre>

<p>Note that this doesn't work if the regex contains non-capturing groups and also if '(' is escaped by using it as '[(]'. So this is not very reliable. But depending on the regexes that you use it might help.</p>
"
132519,"<p>@<a href=""#132503"" rel=""nofollow"">Benoit </a></p>

<p>Small Correction (with multiline turned on): </p>

<pre><code> ""&lt;!--\[if IE\]&gt;.*?&lt;!\[endif\]--&gt;""
</code></pre>
"
132561,"<p>Here's what you'll need:</p>

<pre><code>&lt;!(|--)\[[^\]]+\]&gt;.+?&lt;!\[endif\](|--)&gt;
</code></pre>

<p>It will filter out all sorts of conditional comments including:</p>

<pre><code>&lt;!--[if anything]&gt;
    ...
&lt;[endif]--&gt;
</code></pre>

<p>and</p>

<pre><code>&lt;![if ! IE 6]&gt;
    ...
&lt;![endif]&gt;
</code></pre>

<p><hr></p>

<blockquote>
  <p><strong>EDIT3</strong>: Vinko Vrsalovic's solution works, but the actual problem why beautifulsoup failed was because of a rogue  comment within the conditional comment. Like</p>
  
     
     
     
  
  <p>Notice the  comment?</p>
  
  <p>Though my problem was solve, I would love to get a regex solution for this.</p>
</blockquote>

<p>How about this:</p>

<pre><code>(&lt;!(|--)\[[^\]]+\]&gt;.*?)(&lt;!--.+?--&gt;)(.*?&lt;!\[endif\](|--)&gt;)
</code></pre>

<p>Do a replace on that regular expression leaving \1\4 (or $1$4) as the replacement.<br />
<em>I know it has .</em>? and .+? in it, see my comment on this post._</p>
"
125001,"<p>More info on pyExcelerator: To read a file, do this:</p>

<pre><code>import pyExcelerator
book = pyExcelerator.parse_xls(filename)
</code></pre>

<p>where filename is a string that is the filename to read (not a file-like object).  This will give you a data structure representing the workbook: a list of pairs, where the first element of the pair is the worksheet name and the second element is the worksheet data.</p>

<p>The worksheet data is a dictionary, where the keys are (row, col) pairs (starting with 0) and the values are the cell contents -- generally int, float, or string.  So, for instance, in the simple case of all the data being on the first worksheet:</p>

<pre><code>data = book[0][1]
print 'Cell A1 of worksheet %s is: %s' % (book[0][0], repr(data[(0, 0)]))
</code></pre>

<p>If the cell is empty, you'll get a KeyError.  If you're dealing with dates, they <em>may</em> (I forget) come through as integers or floats; if this is the case, you'll need to convert.  Basically the rule is: datetime.datetime(1899, 12, 31) + datetime.timedelta(days=n) but that might be off by 1 or 2 (because Excel treats 1900 as a leap-year for compatibility with Lotus, and because I can't remember if 1900-1-1 is 0 or 1), so do some trial-and-error to check.  Datetimes are stored as floats, I think (days and fractions of a day).</p>

<p>I think there is partial support for forumulas, but I wouldn't guarantee anything.</p>
"
125053,"<p>There is no real way to do this. There are ways to make it more 'difficult', but there's no concept of completely hidden, inaccessible class attributes.</p>

<p>If the person using your class can't be trusted to follow the API docs, then that's their own problem. Protecting people from doing stupid stuff just means that they will do far more elaborate, complicated, and damaging stupid stuff to try to do whatever they shouldn't have been doing in the first place.</p>
"
125134,"<p>As far as I can tell, you're doing a simple string replace. You're replacing ""foo"" with ""bar foo bar."" So from <a href=""http://docs.python.org/lib/string-methods.html"" rel=""nofollow"" title=""string methods"">string</a> you could just use </p>

<pre><code>replace(old, new[, count])
</code></pre>

<p>Return a copy of the string with all occurrences of substring old replaced by new. If the optional argument count is given, only the first count occurrences are replaced.  </p>

<p>So for you it would be:</p>

<pre><code>myStr.replace(""foo"", ""&lt;span&gt;foo&lt;/span&gt;"")
</code></pre>
"
130332,"<p>pyFacebook is Django-centric because it includes a Django example.  I did not intend to irk, but am merely looking for a TurboGears example using pyFacebook.</p>
"
130647,"<p>You can use a combination of the 'days' and 'seconds' attributes of the returned object to figure out the answer, like this:</p>

<pre><code>def seconds_difference(stamp1, stamp2):
    delta = stamp1 - stamp2
    return 24*60*60*delta.days + delta.seconds + delta.microseconds/1000000.
</code></pre>

<p>Use abs() in the answer if you always want a positive number of seconds.</p>

<p>To discover how many seconds into the past a timestamp is, you can use it like this:</p>

<pre><code>if seconds_difference(datetime.datetime.now(), timestamp) &lt; 100:
     pass
</code></pre>
"
254092,"<p><a href=""http://progetti.arstecnica.it/tailor"" rel=""nofollow"">Tailor</a>, a Python program which lets different version control systems interoperate, simply calls the external programs <code>cvs</code> and <code>svn</code> when working with repositories of those formats.  This seems pretty ugly, but reduces Tailor's dependencies from ""requires ____ bindings"" to ""requires working system"".</p>
"
254355,"<p>As a random guess: are the permissions on foo.py accessable from the windows client? (eg try opening with notepad from the virtual machine).</p>

<p>If that's OK, try running:</p>

<pre><code>python -v -v test.py
</code></pre>

<p>and looking at the output (alternatively, set PYTHONVERBOSE=2).  This should list all the places it tries to import foo from.  Comparing it with a similar trace on the working machine may give some further clues.</p>
"
254362,"<pre>
<code>
f = open(filename1, ""r"").read()
f2 = open(filename2,""r"").read()
print f == f2

</code>
</pre>
"
126034,"<p>I use something like the following to get seconds since the epoch (UTC) from a MySQL date (local time):</p>

<pre><code>calendar.timegm(
   time.gmtime(
      time.mktime(
         time.strptime(t, 
                       ""%Y-%m-%d %H:%M:%S""))))
</code></pre>

<p>More info in this question: <a href=""http://stackoverflow.com/questions/79797/how-do-i-convert-local-time-to-utc-in-python"">http://stackoverflow.com/questions/79797/how-do-i-convert-local-time-to-utc-in-python</a></p>
"
126216,"<p>Only way I know to accomplish this would be to drive real browser, for example using <a href=""http://selenium-rc.openqa.org"" rel=""nofollow"">selenium-rc</a>.</p>
"
126313,"<p>While it's not a guide <em>solely</em> targetted at python/GTK+/OS X, <a href=""http://groups.google.com/group/reinteract/msg/4846099674d2153a"" rel=""nofollow"">this post</a> is a good, detailed description of someone else's attempt to do most of what you describe. Obviously, the app-specific stuff is going to vary.</p>
"
24942,"<p>You want <a href=""http://docs.python.org/lib/module-subprocess.html"" rel=""nofollow"">subprocess</a>. Look specifically at Popen in 17.1.1 and communicate in 17.1.2.</p>
"
176374,"<p>First build your index.
Go through the input, split into words<br />
For each word check if it is already in the index, if it is add the current record number to the index list, if not add the word and record number.<br />
To look up a word go to the (possibly sorted) index and return all the record numbers for that word.<br />
It's very esy to do this for a reasoable size list using Python's builtin storage types.</p>

<p>As an extra refinement you only want to store the base part of a word, eg 'find' for 'finding' - look up stemming algorithms.  </p>
"
176501,"<p>The approach you take is going to depend very much on the nature of the data that you're sending, the scale of your network and the quantity of data you're sending. In particular it is going to depend on the number of targets each of your nodes is connected to.</p>

<p>If you're expecting this to scale to a large number of targets for each node and a large quantity of data then you may well find that the overhead of adding an ACK/NAK to every packet is sufficient to adversely limit your throughput, particularly when you add retransmissions into the mix.</p>

<p>As Frank Szczerba has said multimedia data has the benefit of being able to recover from lost packets. If you have any control over the data that you're sending you should try to design the payloads so that you minimise the susceptibility to dropped packets.</p>

<p>If the data that you're sending cannot tolerate dropped packets <em>and</em> you're trying to scale to high utilisation of your network then perhaps udp is not the best protocol to use. Implementing a series of tcp proxies (where each node retransmits, unicast, to all other connected nodes - similar to your flooding idea) would be a more reliable mechanism.</p>

<p>With all of that said, have you considered using true multicast for this application?</p>

<p><hr /></p>

<p>Just saw the ""homework"" tag... these suggestions might not be appropriate for a homework problem.</p>
"
29390,"<p>Although that code looks quite secure, I've always held the opinion that any sufficiently motivated person could break it given adequate time. I do think it will take quite a bit of determination to get through that, but I'm relatively sure it could be done.</p>
"
335906,"<p>I don't know much about it, since I don't use login items. Just a suggestion, maybe try with applescript that calls those shell commands, and put that in Login Items.</p>
"
335916,"<p>I think if you change your <code>try</code> section to this:</p>

<pre><code>filmstripimage.save(filmstrip_url, 'jpg', quality=90, optimize=1)
</code></pre>
"
335921,"<p>In the case you are not joking there are several problems with your script e.g. <code>glob.glob()</code> returns list of filenames (string objects, not Image objects) therefore <code>files[0].size[0]</code> will not work.</p>
"
335935,"<p>as J. F. Sebastian mentioned, glob does not return image objects... but also:</p>

<p>As it is right now, the script assumes the images in the folder are all the same size and shape. This is not often a safe assumption to make.</p>

<p>So for both of those reasons, you'll need to open the images before you can determine their size. Once you open it you should set the width, and scale the images to that width so there is no empty space.</p>

<p>Also, you didn't set miniature_filename anywhere in the script.</p>
"
336089,"<p>Here's an approach that goes about GUI definitions a bit differently using class-based meta-programming rather than inheritance.</p>

<p>This is largley Django/SQLAlchemy inspired in that it is heavily based on meta-programming and separates your GUI code from your ""code code"".  I also think it should make heavy use of layout managers like Java does because when you're dropping code, no one wants to constantly tweak pixel alignment.  I also think it would be cool if we could have CSS-like properties.</p>

<p>Here is a rough brainstormed example that will show a column with a label on top, then a text box, then a button to click on the bottom which shows a message.</p>

<pre>
from happygui.controls import *

MAIN_WINDOW = Window(width=""500px"", height=""350px"",
    my_layout=ColumnLayout(padding=""10px"",
        my_label=Label(text=""What's your name kiddo?"", bold=True, align=""center""),
        my_edit=EditBox(placeholder=""""),
        my_btn=Button(text=""CLICK ME!"", on_click=Handler('module.file.btn_clicked')),
    ),
)
MAIN_WINDOW.show()

def btn_clicked(sender): # could easily be in a handlers.py file
    name = MAIN_WINDOW.my_layout.my_edit.text
    # same thing: name = sender.parent.my_edit.text
    # best practice, immune to structure change: MAIN_WINDOW.find('my_edit').text
    MessageBox(""Your name is '%s'"" % ()).show(modal=True)
</pre>

<p>One cool thing to notice is the way you can reference the input of my_edit by saying <code>MAIN_WINDOW.my_layout.my_edit.text</code>.  In the declaration for the window, I think it's important to be able to arbitrarily name controls in the function kwargs.</p>

<p>Here is the same app only using absolute positioning (the controls will appear in different places because we're not using a fancy layout manager):</p>

<pre>
from happygui.controls import *

MAIN_WINDOW = Window(width=""500px"", height=""350px"",
    my_label=Label(text=""What's your name kiddo?"", bold=True, align=""center"", x=""10px"", y=""10px"", width=""300px"", height=""100px""),
    my_edit=EditBox(placeholder="""", x=""10px"", y=""110px"", width=""300px"", height=""100px""),
    my_btn=Button(text=""CLICK ME!"", on_click=Handler('module.file.btn_clicked'), x=""10px"", y=""210px"", width=""300px"", height=""100px""),
)
MAIN_WINDOW.show()

def btn_clicked(sender): # could easily be in a handlers.py file
    name = MAIN_WINDOW.my_edit.text
    # same thing: name = sender.parent.my_edit.text
    # best practice, immune to structure change: MAIN_WINDOW.find('my_edit').text
    MessageBox(""Your name is '%s'"" % ()).show(modal=True)
</pre>

<p>I'm not entirely sure yet if this is a super great approach, but I definitely think it's on the right path.  I don't have time to explore this idea more, but if someone took this up as a project, I would love them.</p>
"
26707,"<p>One solution, which is a hack of limited usefulness, is when a drag is initiated, store the dragged data in a global or static reference somewhere. This way, in the OnEnter and OnDragOver handlers, it is possible to get a reference to the data being dragged. This is of course only useful for drags within the same application (the same instance of the application, actually).</p>
"
177563,"<p>Click 2 times ""Back""?</p>
"
245272,"<p>I'd use JExcelApi, but only because I've used it before. Never have touched HSSF. Biggest show-stopper I can recall is JExcelApi doesn't support multiple formats in one cell (e.g. half the text in bold, the other half in italic or something like that). I think in general JExcelApi is more limited than HSSF, but the limitations never got in my way.
<p> And yes, documentation is sparse for the interface (and nonexistent for the underlying mechanisms), but I thought it was doable...</p>
"
132268,"<p>There is no way to hook into a running python process and get reasonable results.  What I do if processes lock up is hooking strace in and trying to figure out what exactly is happening.</p>

<p>Unfortunately often strace is the observer that ""fixes"" race conditions so that the output is useless there too.</p>
"
254374,"<p>For larger files you could compute a <a href=""http://docs.python.org/library/md5.html"" rel=""nofollow"">MD5</a> or <a href=""http://docs.python.org/library/sha.html"" rel=""nofollow"">SHA</a> hash of the files.</p>
"
254518,"<p>I would use a hash of the file's contents using MD5.</p>

<pre><code>import hashlib

def checksum(f):
    md5 = hashlib.md5()
    md5.update(open(f).read())
    return md5.hexdigest()

def is_contents_same(f1, f2):
    return checksum(f1) == checksum(f2)

if not is_contents_same('foo.txt', 'bar.txt'):
    print 'The contents are not the same!'
</code></pre>
"
254524,"<p>Boo supports list generator expressions using the same syntax as python.  For more information on that, check out the Boo documentation on <a href=""http://boo.codehaus.org/Generator+Expressions"" rel=""nofollow"">Generator expressions</a> and <a href=""http://boo.codehaus.org/List+Generators"" rel=""nofollow"">List comprehensions</a>.</p>
"
124422,"<p>By ""separate apps within Django"" do you mean separate applications with a common settings?  That is to say, two applications within the same Django site (or project)?</p>

<p>If so, the {% url %} tag will generate a proper absolute URL to any of the apps listed in the settings file.</p>

<p>If there are separate Django servers with separate settings, you have the standard internet problem of URI design.  Your URI's can be consistent with only the hostname changing.</p>

<pre><code>- http://localhost/some/path - development

- http://123.45.67.78/some/path - someone's laptop who's running a server for testing

- http://qa.mysite.com/some/path - QA

- http://www.mysite.com/some/path - production
</code></pre>

<p>You never need to provide the host information, so all of your links are <code>&lt;A HREF=""/some/path/""&gt;</code>.</p>

<p>This, generally, works out the best.  You have can someone's random laptop being a test server; you can get the IP address using ifconfig.</p>
"
31765,"<p>Hyposaurus,</p>

<p>It is possible to have multiple versions of Python installed simultaneously. Installing two versions in parallel solves your problem and helps avoid the problems laid out by Jason Baker above. </p>

<p>The easiest way, and the way I recommend, is to use <a href=""http://www.macports.org/"" rel=""nofollow"">MacPorts</a>, which will install all its software separately. By default, for example, everything is installed in /opt/local</p>

<p>Another method is to simply download the source and compile with a specified prefix. Note that this method doesn't modify your PATH environment variable, so you'll need to do that yourself if you want to avoid typing the fully qualified path to the python executable each time</p>

<pre><code>./configure --prefix=/usr/local/python64
make
sudo make install
</code></pre>

<p>Then you can simply point your Apache install at the new version using mod_python's <a href=""http://www.modpython.org/live/current/doc-html/dir-other-pi.html"" rel=""nofollow"">PythonInterpreter</a> directive</p>
"
335215,"<p>Why can't you do something like the following?</p>

<pre><code>class Card(models.Model):
    """""" A playing card.  """"""
    self.suit = models.PositiveIntegerField()
    self.rank = models.PositiveIntegerField( choices=SUIT_CHOICES )
    def as_number(self):
        """""" returns a number from 1 (Ace of Clubs) and 52 (King of Spades).""""""
        return self.number + self.suit * 13
    def __unicode__(self):
        return ...
    def is_highest(self, other_cards, trump=None):...
</code></pre>

<p>Certainly, this is quite simple, and fits comfortably with what Django does naturally.</p>
"
335323,"<p>Here is a function that wraps <strong>the contact sheet</strong> function <a href=""http://stackoverflow.com/users/10661/slott"">S.Lott</a> mentioned.</p>

<pre><code>#!/usr/bin/env python

import os, os.path
from contactsheet import make_contact_sheet

def make_film_strip(fnames,
                   (photow,photoh),
                   (marl,mart,marr,marb),
                   padding):
    return make_contact_sheet(fnames,
                              (1, len(fnames)),
                              (photow,photoh),
                              (marl,mart,marr,marb),
                              padding)
</code></pre>

<p>It is assuming the <a href=""http://code.activestate.com/recipes/412982/"" rel=""nofollow"">recipe</a> is saved as <code>contactsheet.py</code>. Usage is:</p>

<pre><code>fstrip = filmstrip.make_film_strip(filmstrip.fnames, (120, 120), (0,0,0,0), 0)
fstrip.save('/path/to/file.format')
</code></pre>

<p>Tested.</p>
"
335335,"<p>There is a recipe for that problem in the Python Cookbook (O'Reilly). You can read the full solution with an example online:</p>

<p><a href=""http://safari.oreilly.com/0596001673/pythoncook-CHP-4-SECT-24"" rel=""nofollow"">http://safari.oreilly.com/0596001673/pythoncook-CHP-4-SECT-24</a></p>

<p>or here:</p>

<p><a href=""http://books.google.com/books?id=yhfdQgq8JF4C&amp;pg=PA152&amp;dq=du+command+in+python"" rel=""nofollow"">http://books.google.com/books?id=yhfdQgq8JF4C&amp;pg=PA152&amp;dq=du+command+in+python</a></p>
"
335358,"<p>If you really want to code UI, you could try to get something similar to django's ORM; sth like this to get a simple help browser:</p>

<pre><code>class MyWindow(Window):
    class VBox:
        entry = Entry()
        bigtext = TextView()

        def on_entry_accepted(text):
            bigtext.value = eval(text).__doc__
</code></pre>

<p>The idea would be to interpret some containers (like windows) as simple classes, some containers (like tables, v/hboxes) recognized by object names, and simple widgets as objects.</p>

<p>I dont think one would have to name all containers inside a window, so some shortcuts (like old-style classes being recognized as widgets by names) would be desirable.</p>

<p>About the order of elements: in MyWindow above you don't have to track this (window is conceptually a one-slot container). In other containers you can try to keep track of the order assuming that each widget constructor have access to some global widget list. This is how it is done in django (AFAIK).</p>

<p>Few hacks here, few tweaks there... There are still few things to think of, but I believe it is possible... and usable, as long as you don't build complicated UIs.</p>

<p>However I am pretty happy with PyGTK+Glade. UI is just kind of data for me and it should be treated as data. There's just too much parameters to tweak (like spacing in different places) and it is better to manage that using a GUI tool. Therefore I build my UI in glade, save as xml and parse using gtk.glade.XML().</p>
"
335400,"<p>Declarative is not necessarily more (or less) pythonic than functional IMHO. I think a layered approach would be the best (from buttom up):</p>

<ol>
<li>A native layer that accepts and returns python data types.</li>
<li>A functional dynamic layer.</li>
<li>One or more declarative/object-oriented layers.</li>
</ol>

<p>Similar to <a href=""http://elixir.ematia.de/trac/wiki"" rel=""nofollow"">Elixir</a> + <a href=""http://www.sqlalchemy.org/"" rel=""nofollow"">SQLAlchemy</a>.</p>
"
335443,"<p>Personally, I would try to implement <a href=""http://docs.jquery.com/Main_Page"" rel=""nofollow"">JQuery</a> like API in a GUI framework.</p>

<pre><code>class MyWindow(Window):
    contents = (
        para('Hello World!'),
        button('Click Me', id='ok'),
        para('Epilog'),
    )

    def __init__(self):
        self['#ok'].click(self.message)
        self['para'].hover(self.blend_in, self.blend_out)

    def message(self):
        print 'You clicked!'

    def blend_in(self, object):
        object.background = '#333333'

    def blend_out(self, object):
        object.background = 'WindowBackground'
</code></pre>
"
28566,"<p>What are you trying to do here?
If you're iterating over a list, you can use <code>for e in L</code> where e is the element and L is the list. If you're filtering a list, you can use list comprehensions (i.e. <code>[ e for e in L if e % 2 == 0 ]</code> to get all the even numbers in a list).</p>
"
28580,"<p>If you need to do this more than once, the pythonic way would use an iterator</p>

<pre><code>for x in iternext():
    do_something_with_x
</code></pre>

<p>where <code>iternext</code> would be defined using something like
(<a href=""http://www.python.org/dev/peps/pep-0020/"" rel=""nofollow"">explicit is better than implicit!</a>):</p>

<pre><code>def iternext():
    x = next()
    while x != END:
        yield x
        x = next()
</code></pre>
"
28780,"<p>Can you provide more information about what you're trying to accomplish?  It's not clear to me why you can't just say</p>

<pre><code>for x in everything():
    ...
</code></pre>

<p>and have the everything function return everything, instead of writing a next function to just return one thing at a time.  Generators can even do this quite efficiently.</p>
"
195170,"<p>There must be a method in Cocoa to get a list of fonts, then you would have to use the PyObjC bindings to call it..</p>

<p>Depending on what you need them for, you could probably just use something like the following..</p>

<pre><code>import os
def get_font_list():
    fonts = []
    for font_path in [""/Library/Fonts"", os.path.expanduser(""~/Library/Fonts"")]:
        if os.path.isdir(font_path):
            fonts.extend(
                [os.path.join(font_path, cur_font) 
                 for cur_font in os.listdir(font_path)
                ]
            )
    return fonts
</code></pre>
"
195702,"<p>You can use a <a href=""http://www.python.org/doc/2.5.2/lib/module-shelve.html"" rel=""nofollow"">shelve</a> to store your data on disc instead of loading the whole data into memory. So startup time will be very fast, but the trade-off will be slower access time. </p>

<p>Shelve will pickle the dict values too, but will do the (un)pickle not at startup for all the items, but only at access time for each item itself.</p>
"
244789,"<p>I know you down-modded copy, but I disagree. It's more clear to make another copy than to modify the existing in-place with <strong>dict</strong> manipulation, as others suggested (if you lose existing copy by reassigning the variable, it will get garbage-collected immediately). Python is not meant to be fast, it's meant to be readable (though I actually believe that copy() will be faster than the other methods).</p>
"
255433,"<p>You can do it like this:</p>

<pre><code>def isdefarg(*args):
    if len(args) &gt; 0:
        print len(args), ""arguments""
    else:
        print ""no arguments""

isdefarg()
isdefarg(None)
isdefarg(5, 7)
</code></pre>

<p>See the Python documentation on <a href=""http://python.org/doc/2.5/ref/calls.html"" rel=""nofollow"">calls</a> for full information.</p>
"
255446,"<pre><code>def f(one, two=2):
   print ""I wonder if"", two, ""has been passed or not...""

f(1, 2)
</code></pre>

<p>If this is the exact meaning of your question, I think that there is no way to distinguish between a 2 that was in the default value and a 2 that has been passed. I didn't find how to accomplish such distinction even in the <a href=""http://www.python.org/doc/2.5.2/lib/module-inspect.html"" rel=""nofollow"">inspect</a> module.</p>
"
255472,"<p>I am not certain if I fully understand what is it you want; however:</p>

<pre><code>def fun(arg=Ellipsis):
    if arg is Ellipsis:
        print ""No arg provided""
    else:
        print ""arg provided:"", repr(arg)
</code></pre>

<p>does that do what you want? If not, then as others have suggested, you should declare your function with the <code>*args, **kwargs</code> syntax and check in the kwargs dict for the parameter existence.</p>
"
255582,"<p>You can't go too low in size, because you obviously need to bundle the Python interpreter in, and only that takes a considerable amount of space.</p>

<p>I had the same concerns once, and there are two approaches:</p>

<ol>
<li>Install Python on the computers you want to run on and only distribute the scripts</li>
<li>Install Python in the internal network on some shared drive, and rig the users' PATH to recognize where Python is located. With some installation script / program trickery, users can be completely oblivious to this, and you'll get to distribute minimal applications.</li>
</ol>
"
123077,"<p>For Windows, there's the <a href=""http://www.py2exe.org/"" rel=""nofollow"">py2exe</a> project.</p>

<p>There's <a href=""http://systemexit.de/bbfreeze/README.html"" rel=""nofollow"">bbfreeze</a>, and <a href=""http://pyinstaller.python-hosting.com/"" rel=""nofollow"">PyInstaller</a>, and <a href=""http://www.undefined.org/python/"" rel=""nofollow"">py2app</a>, also.</p>
"
123532,"<p>Regarding the second part of your question, you can use the DLR Hosting APIs to run IronPython code from within a C# application. The DLR hosting spec is <a href=""http://compilerlab.members.winisp.net/dlr-spec-hosting.pdf"" rel=""nofollow"">here</a>. This <a href=""http://blogs.msdn.com/seshadripv/"" rel=""nofollow"">blog</a> also contains some sample hosting applications</p>
"
134803,"<p>The Perl implementation uses the <a href=""http://en.wikipedia.org/wiki/Mmap"" rel=""nofollow"">mmap</a> system call.  What that call does is establish a pointer which to the process appears to be a normal segment of memory or buffer to the program.  It maps the contents of a file to a region of memory.   There are performances advantages of doing this vs normal file IO (read) - one is that there are no user-space library calls necessary to get access to the data, another is that there are often less copy operations necessary (eg: moving data between kernel and user space).</p>

<p>Perl's strings and regular expressions are 8-bit byte based (as opposed to utf16 for Java for example), so Perl's native 'character type' is the same encoding of the mmapped file.</p>

<p>When the regular expression engine then operates on the mmap backed variable, it is directly accessing the file data via the mamped memory region - without going through Perl's IO functions, or even libc's IO functions.</p>

<p>The mmap is probably largely responsible for the performance difference vs the Python version using the normal Python IO libraries -  which additionally introduce the overhead of looking for line breaks.</p>

<p>The Perl program also supports a -J to parallelize the processing, where the oepen ""-|"" causes a fork() where the file handle in the parent is to the child's stdout.  The child processes serialize their results to stdout and the parent de-serializes them to coordinate and summarize the results.</p>
"
257695,"<p>Are you talking about <a href=""http://www.punteney.com/writes/django-simplepages-basic-page-cms-system/"" rel=""nofollow"">Django Simplepages</a>?  Official site <a href=""http://code.google.com/p/django-simplepages/"" rel=""nofollow"">here</a>.</p>

<p>Another project that sounds similar to what you're after is <a href=""http://code.google.com/p/django-page-cms/"" rel=""nofollow"">django-page-cms</a>.</p>
"
257833,"<p>Well, I think I understand the question. Looks like your script just needs to start the dbus daemon, or make sure its started. I believe ""session"" here refers to a dbus session. <a href=""http://mail.gnome.org/archives/svn-commits-list/2008-May/msg01997.html"" rel=""nofollow"">(here is some evidence)</a>, not a Gnome session. Dbus and gconf both run fine without Gnome.</p>

<p>Either way, faking an ""active session"" sounds like a pretty bad idea. It would only look for it if it needed it.</p>

<p>Perhaps we could see the script in a pastebin? I should have really seen it before making any comment.</p>
"
258125,"<p>The no-whistles-or-bells solution would be to write a wrapper class for class A that does just that.</p>
"
258179,"<p>You could just modify the A instance and replace the p1 function with a wrapper function:</p>

<pre><code>def wrapped(pre, post, f):
    def wrapper(*args, **kwargs):
        pre()
        retval = f(*args, **kwargs)
        post()
        return retval
    return wrapper

class Y:
    def __init__(self):
        self.a=A()
        self.a.p1 = wrapped(self.pre, self.post, self.a.p1)

    def pre(self): print 'X.pre'
    def post(self): print 'X.post'
</code></pre>
"
134023,"<p>An exclusive lock ought to be enough for this problem :  </p>

<ul>
<li><a href=""http://docs.python.org/lib/lock-objects.html"" rel=""nofollow"">Python doc page</a></li>
<li><a href=""http://effbot.org/zone/thread-synchronization.htm"" rel=""nofollow"">Use example</a></li>
</ul>

<p>Define your lock object at the main level, not at the thread level, and you're done.</p>

<p>Edit in Response to comment :</p>

<p>if you define your lock (<code>lock = new Lock()</code>) at the thread level, you will have one lock object per running thread, and you really want a single lock for the file rrdtool updates, so this definition must be at the main level.</p>
"
123806,"<p>Not a regexp but really elegant:</p>

<pre><code>from itertools import groupby

def paragraph(lines) :
    for group_separator, line_iteration in groupby(lines.splitlines(True), key = str.isspace) :
        if not group_separator :
            yield ''.join(line_iteration)

for p in paragraph('p1\n\t\np2\t\n\tstill p2\t   \n     \n\tp'): 
    print repr(p)

'p1\n'
'p2\t\n\tstill p2\t   \n'
'\tp3'
</code></pre>

<p>It's up to you to strip the output as you need it of course.</p>

<p>Inspired from the famous ""Python Cookbook"" ;-)</p>
"
123990,"<p><a href=""http://stackoverflow.com/questions/2933/an-executable-python-app"">See</a> <a href=""http://stackoverflow.com/questions/106725/how-to-bundle-a-python-application-including-dependencies-for-windows"">these</a> <a href=""http://stackoverflow.com/questions/116657/how-do-you-create-an-osx-applicationdmg-from-a-python-package"">questions</a></p>
"
256040,"<p>You could make this even simpler by making it all happen in one main page. Instead of having a list of hyperlinks, just have the main page have one frame that loads one of the autocreated pages in it. Put a couple of buttons at the bottom - a ""Keep this page"" and a ""Delete this page."" When you click either button, the main page refreshes, this time with the next autocreated page in the frame.</p>

<p>You could make this as a cgi script in your favorite scripting language. You can't just do this in html because an html page only does stuff client-side, and you can only delete files server-side. You will probably need as cgi args the page to show in the frame, and the last page you viewed if the button click was a ""delete"".</p>
"
256358,"<p>import socket</p>

<p>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</p>

<p>s.connect((""msn.com"",80))</p>

<p>s.getsockname()</p>
"
196218,"<p>A couple of things that will help speed up imports:</p>

<ol>
<li>You might try running python using the -OO flag when running python.  This will do some optimizations that will reduce import time of modules.</li>
<li>Is there any reason why you couldn't break the dictionary up into smaller dictionaries in separate modules that can be loaded more quickly?</li>
<li>As a last resort, you could do the calculations asynchronously so that they won't delay your program until it needs the results.  Or maybe even put the dictionary in a separate process and pass data back and forth using IPC if you want to take advantage of multi-core architectures.</li>
</ol>

<p>With that said, I agree that you shouldn't be experiencing any delay in importing modules after the first time you import it.  Here are a couple of other general thoughts:</p>

<ol>
<li>Are you importing the module within a function?  If so, this <em>can</em> lead to performance problems since it has to check and see if the module is loaded every time it hits the import statement.</li>
<li>Is your program multi-threaded?  I have seen occassions where executing code upon module import in a multi-threaded app can cause some wonkiness and application instability (most notably with the cgitb module).</li>
<li>If this is a global variable, be aware that global variable lookup times can be significantly longer than local variable lookup times.  In this case, you can achieve a significant performance improvement by binding the dictionary to a local variable if you're using it multiple times in the same context.</li>
</ol>

<p>With that said, it's a tad bit difficult to give you any specific advice without a little bit more context.  More specifically, where are you importing it?  And what are the computations?</p>
"
175283,"<p>If using psyco, I'd recommend <code>psyco.profile()</code> instead of <code>psyco.full()</code>. For a larger project it will be smarter about the functions that got optimized and use a ton less memory.</p>

<p>I would also recommend looking at iterators and generators. If your application is using large data sets this will save you many copies of containers.</p>
"
175612,"<p>There are several questions I'd ask before answering this queston:</p>

<ul>
<li>what happens if there is a conflict, i.e. a worse player books first, then a better player books the same court? Who wins? what happens for the loser?</li>
<li>do you let the best players play as long as the match runs, or do you have fixed time slots?</li>
<li>how often is the scheduling run - is it run interactively - so potentially someone could be told they can play, only to be told they can't; or is it run in a more batch manner - you put in requests, then get told later if you can have your slot. Or do users <em>set up a number of preferred times, and then the system has to maximise the number of people getting their most highly preferred times?</em></li>
</ul>

<p>As an aside, you can make it slightly less complex by re-writing the times as integer indexes (so you're dealing with integers rather than times).</p>
"
175634,"<p>I thought I posted my solution already...</p>

<p>Modifying both apps to run under WSGIApplicationGroup ${GLOBAL} in their httpd conf file
and patching sqlalchemy.databases.firebird.py to check if self.dbapi.initialized is True
before calling self.dbapi.init(... was the only way I could manage to get this scenario up and running.
<br>The SQLAlchemy 0.4.7 patch:</p>

<pre>
diff -Naur SQLAlchemy-0.4.7/lib/sqlalchemy/databases/firebird.py SQLAlchemy-0.4.7.new/lib/sqlalchemy/databases/firebird.py
--- SQLAlchemy-0.4.7/lib/sqlalchemy/databases/firebird.py       2008-07-26 12:43:52.000000000 -0400
+++ SQLAlchemy-0.4.7.new/lib/sqlalchemy/databases/firebird.py   2008-10-01 10:51:22.000000000 -0400
@@ -291,7 +291,8 @@
         global _initialized_kb
         if not _initialized_kb and self.dbapi is not None:
             _initialized_kb = True
-            self.dbapi.init(type_conv=type_conv, concurrency_level=concurrency_level)
+            if not self.dbapi.initialized:
+                self.dbapi.init(type_conv=type_conv, concurrency_level=concurrency_level)
         return ([], opts)

     def create_execution_context(self, *args, **kwargs):

</pre>
"
334612,"<p>You can try to peek into your stacktrace.</p>

<p><a href=""https://docs.python.org/library/inspect.html#the-interpreter-stack"" rel=""nofollow"">https://docs.python.org/library/inspect.html#the-interpreter-stack</a></p>

<p>when you try this in a debugger session:</p>

<pre><code>import inspect
inspect.getouterframes(inspect.currentframe()
</code></pre>

<p>you will get a list of framerecords and can peek for any frames that refer to the pdb file.</p>
"
334828,"<p>I have this same problem. I wan to to create a wrapper around any GUI toolkit for Python that is easy to use, and inspired by Shoes, but needs to be a OOP approach (against ruby blocks).</p>

<p>More information in: <a href=""http://wiki.alcidesfonseca.com/blog/python-universal-gui-revisited"" rel=""nofollow"">http://wiki.alcidesfonseca.com/blog/python-universal-gui-revisited</a></p>

<p>Anyone's welcome to join the project.</p>
"
30591,"<p>Not sure I entirely understand your question, but can't you simply build and install a 64 bit version and then create symbolic links so that /Library/Python/2.5 and below point to your freshly built version of python?</p>
"
31225,"<p>distutils really isn't all that difficult once you get the hang of it.  It's really just a matter of putting in some meta-information (program name, author, version, etc) and then selecting what files you want to include.  For example, here's a sample distutils setup.py module from a decently complex python library:</p>

<p><a href=""http://code.google.com/p/kamaelia/source/browse/trunk/Code/Python/Kamaelia/setup.py"" rel=""nofollow"">Kamaelia setup.py</a></p>

<p>Note that this doesn't deal with any data files or or whatnot, so YMMV.</p>

<p>On another note, I agree that the distutils documentation is probably some of python's worst documentation.  It is extremely inclusive in some areas, but neglects some really important information in others.</p>
"
31384,"<p>Personally, I wouldn't worry about it until you see a problem.  Messing with the default python install on a *Nix system can cause more trouble than it's worth.  I can say from personal experience that you never truly understand what python has done for the nix world until you have a problem with it.</p>

<p>You can also add a second python installation, but that also causes more problems than it's worth IMO.</p>

<p>So I suppose the best question to start out with would be why exactly do you want to use the 64 bit version of python?</p>
"
196794,"<p>Kind of depends on how you are transferring the encrypted data. It is possible that you are writing a file in one language and then trying to read it in from the other. Python (especially on Windows) requires that you specify binary mode for binary files. So in Python, assuming you want to decrypt there, you should open the file like this:</p>

<pre><code>f = open('/path/to/file', 'rb')
</code></pre>

<p>The ""b"" indicates binary. And if you are writing the encrypted data to file from Python:</p>

<pre><code>f = open('/path/to/file', 'wb')
f.write(encrypted_data)
</code></pre>
"
244471,"<p>Here's my simple approach.  It seems to be close to the idea that @Cheery had except that I destroy the input list.</p>

<pre><code>def pack(keys, values):
  """"""This function destructively creates a list of dictionaries from the input lists.""""""
  retval = []
  while values:
    d = {}
    for x in keys:
      d[x] = values.pop(0)
    retval.append(d)
  return retval
</code></pre>
"
244515,"<p>Yet another try, perhaps dumber than the first one:</p>

<pre><code>def split_seq(seq, count):
    i = iter(seq)
    while True:
        yield [i.next() for _ in xrange(count)]

&gt;&gt;&gt; [dict(zip(keys, rec)) for rec in split_seq(values, len(keys))]
[{'age': 42, 'name': 'Monty'},
 {'age': 28, 'name': 'Matt'},
 {'age': 33, 'name': 'Frank'}]
</code></pre>

<p>But it's up to you to decide whether it's dumber.</p>
"
135267,"<p>What's your code for reading the binary data? Make sure you're copying the data into properly-sized types like <code>int32_t</code> instead of just <code>int</code>.</p>
"
244932,"<p>Well, these people seem to think that not only basic still has a place in the mobile space but also that they can make money off it:</p>

<p><a href=""http://www.nsbasic.com/symbian/"" rel=""nofollow"">http://www.nsbasic.com/symbian/</a></p>
"
245159,"<p>The datastore internally keeps all strings <a href=""http://code.google.com/appengine/docs/datastore/typesandpropertyclasses.html#str"" rel=""nofollow"">in unicode</a>.</p>
"
245207,"<p>Not to discourage your project, but if you just want a <em>free</em> and <em>open source</em> alternative to <a href=""http://en.wikipedia.org/wiki/MATLAB"" rel=""nofollow"">MATLAB</a>, have you looked at the <a href=""http://en.wikipedia.org/wiki/GNU_Octave"" rel=""nofollow"">Octave</a> project? Contributing there might be more productive than building your own MATLAB alternative.</p>

<p>If your project requires the functionality of MATLAB's Symbolic then take a look at</p>

<ul>
<li><a href=""http://wiki.octave.org/wiki.pl?CategorySymbolic"" rel=""nofollow"">http://wiki.octave.org/wiki.pl?CategorySymbolic</a></li>
</ul>

<p>From my quick Google search I didn't find anything comparable to MATLAB's Simulink.</p>

<p>Also, Python and SciPy do have most of the functionality of MATLAB, and I guess Scilab's conversion utility would be useful in porting your own M-Files into Scilab code.</p>

<p>Your question seems to imply you want to port over MATLAB Toolboxes</p>

<blockquote>
  <p>The only thing about symbolic toolbox I've found is this...</p>
</blockquote>

<p>I hope I am just misinterpreting you. If you are then there might be licensing issues if you were to distribute your system because the MATLAB Toolbox. Just a thought. But perhaps you wish to port your MATLAB code to, so that it doesn't not have the MATLAB dependency.</p>

<h3>Update</h3>

<p>For Control System functionality Octave, I just found that Octave does have a toolbox, see:</p>

<ul>
<li><a href=""http://www.obihiro.ac.jp/~suzukim/masuda/octave/html/octave_125.html"" rel=""nofollow"">Octave Control Systems Toolbox</a></li>
</ul>

<p>Which has some of the functionality of Simulink, but it doesn't seem to have the graphical interface for building block diagrams.</p>
"
122590,"<p>It's not eclipse, but ActiveState's <a href=""http://docs.activestate.com/activepython/2.5/faq/windows/index.html#where-is-freeze-for-windows"" rel=""nofollow"">ActivePython FAQ</a> mentions the freeze utility, which sounds like it might be close to what you're asking for.</p>
"
122812,"<pre><code>def layer(dict):
  for k,v in dict:
    if '/' in k:
      del dict[k]
      subdict = dict.get(k[:k.find('/')],{})
      subdict[k[k.find('/')+1:]] = v
      layer(subdict)
</code></pre>
"
256833,"<p>There is no need to use HTTP (indeed, HTTP is not good for RPC in general in some respects), and no need to use a standards-based protocol if you're talking about a python client talking to a python server.</p>

<p>Use a Python-specific RPC library such as Pyro, or what Twisted provides (Twisted.spread).</p>
"
257415,"<p>SSH can be a good choice for file transfer and remote control, especially if you are concerned with secure login. Most Linux and Solaris servers will already run an SSH service for administration, so if your Python program use ssh then you don't need to open up any additional ports or services on remote machines. </p>

<p><a href=""http://www.openssh.com/"" rel=""nofollow"">OpenSSH</a> is the standard and portable SSH client and server, and can be used via subprocesses from Python. If you want more flexibility Twisted includes <a href=""http://twistedmatrix.com/trac/wiki/TwistedConch"" rel=""nofollow"">Twisted Conch</a> which is a SSH client and server implementation which provides flexible programmable control of an SSH stack, on both Linux and Windows. I use both in production.</p>
"
31950,"<p>PyGame works much better when it can manage its own window, or even better, use the whole screen. GTK has flexible enough widgets to allow creation of a drawing area. </p>

<p><a href=""http://faq.pygtk.org/index.py?req=show&amp;file=faq23.042.htp"" rel=""nofollow"">This page</a> may help, though, if you want to try it.</p>
"
32028,"<p>Depends on your definition of safe I suppose. A lot of the security depends on what you pass in and what you are allowed to pass in the context. For instance, if a file is passed in, I can open arbitrary files:</p>

<pre><code>&gt;&gt;&gt; names['f'] = open('foo', 'w+')
&gt;&gt;&gt; safe_eval.safe_eval(""baz = type(f)('baz', 'w+')"", names)
&gt;&gt;&gt; names['baz']
&lt;open file 'baz', mode 'w+' at 0x413da0&gt;
</code></pre>

<p>Furthermore, the environment is very restricted (you cannot pass in modules), thus, you can't simply pass in a module of utility functions like re or random.</p>

<p>On the other hand, you don't need to write your own parser, you could just write your own evaluator for the python ast:</p>

<pre><code>&gt;&gt;&gt; import compiler
&gt;&gt;&gt; ast = compiler.parse(""print 'Hello world!'"")
</code></pre>

<p>That way, hopefully, you could implement safe imports. The other idea is to use Jython or IronPython and take advantage of Java/.Net sandboxing capabilities.</p>
"
332525,"<p>In the case your data is not already sorted by desired criteria, here's the code that might help to group the data:</p>

<pre><code>#!/usr/bin/env python
""""""
$ cat data_shuffled.txt
0,2,7
1,4,7
0,4,7
1,9,0
1,2,5
0,6,7
1,6,8
0,9,5
""""""
from itertools   import groupby
from operator    import itemgetter

# load the data and make sure it is sorted by the first column
sortby_key = itemgetter(0)
data = sorted((map(int, line.split(',')) for line in open('data_shuffled.txt')),
              key=sortby_key)

# group by the first column
grouped_data = []
for key, group in groupby(data, key=sortby_key):
    assert key == len(grouped_data) # assume the first column is 0,1, ...
    grouped_data.append([trio[1:] for trio in group])

# print the data
for i, pairs in enumerate(grouped_data):
    print i, pairs
</code></pre>

<p>Output:</p>

<pre><code>0 [[2, 7], [4, 7], [6, 7], [9, 5]]
1 [[4, 7], [9, 0], [2, 5], [6, 8]]
</code></pre>
"
332555,"<p>You might find this useful; <a href=""http://www.python.org/dev/peps/pep-0008/"" rel=""nofollow"">PEP 8 -- Style Guide for Python Code</a></p>
"
259054,"<p>Parsin URL is never as simple I it seems to be, that's why there are the urlparse and urllib modules.</p>

<p>E.G :</p>

<pre><code>import urllib
url =""http://www.domainname.com/page?CONTENT_ITEM_ID=1234&amp;param2&amp;param3""
query = urllib.splitquery(url)
result = ""?"".join((query[0], query[1].split(""&amp;"")[0]))
print result
'http://www.domainname.com/page?CONTENT_ITEM_ID=1234'
</code></pre>

<p>This is still not 100 % reliable, but much more than splitting it yourself because there are a lot of valid url format that you and me don't know and discover one day in error logs.</p>
"
120988,"<p>There are some libraries (most often implemented in C/C++) with Python bindings, e.g.:</p>

<ul>
<li><a href=""http://dicomlib.swri.ca/pydicomlib.html"" rel=""nofollow"">pydicomlib</a></li>
<li><a href=""http://www.creatis.univ-lyon1.fr/Public/Gdcm/"" rel=""nofollow"">gdcmPython</a></li>
</ul>

<p>However, I'm looking for a native Python implementation to learn more about the DICOM file format.</p>
"
120992,"<p>""escaping the ampersand with ^""</p>

<p>Are you sure <code>^</code> is an escape character to Windows?   Shouldn't you use <code>\</code>?</p>
"
121036,"<p>Since python relies on indentation in order to recognize program structure, a clear way to identify identation is required. This is the reason to pick either spaces or tabs.</p>

<p>However, python also has a strong philosophy of only having one way to do things, therefore there should be an official recommendation for one way to do indentation.</p>

<p>Both spaces and tabs pose unique challenges for an editor to handle as indentation. The handling of tabs themselves is not uniform across editors or even user settings. Since spaces are not configurable, they pose the more logical choice as they guarantee that the outcome will look everywhere the same.</p>
"
121180,"<p>I'm not sure if I'm grokking all the details of your question, but looking at your problem in general (how do I deploy a python app on mac), I'm inclined to say that the answer is <a href=""http://undefined.org/python/py2app.html"" rel=""nofollow"">py2app</a>. Basically this will bundle a python interpreter and all relevant python files for you, and give you a scriptable system that you can use to add in whatever other resources/dependencies you need. </p>
"
258253,"<p>I've just recently read about decorators in python, I'm not understanding them yet but it seems to me that they can be a solution to your problem. see Bruce Eckel intro to decorators at:
<a href=""http://www.artima.com/weblogs/viewpost.jsp?thread=240808"" rel=""nofollow"">http://www.artima.com/weblogs/viewpost.jsp?thread=240808</a></p>

<p>He has a few more posts on that topic there.</p>

<p>Edit: Three days later I stumble upon this article, which shows how to do a similar task without decorators, what's the problems with it and then introduces decorators and develop a quite full solution:
<a href=""http://wordaligned.org/articles/echo"" rel=""nofollow"">http://wordaligned.org/articles/echo</a></p>
"
258283,"<p>As others have mentioned, the wrapper/decorator solution is probably be the easiest one. I don't recommend modifyng the wrapped class itself, for the same reasons that you point out.</p>

<p>If you have many external classes you can write a code generator to generate the wrapper classes for you. Since you are doing this in Python you can probably even implement the generator as a part of the program, generating the wrappers at startup, or something.</p>
"
244207,"<p>Good question...</p>

<p>Basically (sic!), I have no answer. I would say just that Lua is very easy to learn, probably as easy as Basic (which was one of my first languages as well, I used dialects on lot of 8-bit computers...), but is more powerful (allowing OO or functional styles and even mixing them) and somehow stricter (no goto...).</p>

<p>I don't know well Python, but from what I have read, it is as easy, powerful and strict than Lua.</p>

<p>Beside, both are ""standardized"" de facto, ie. there are no dialects (beside the various versions), unlike Basic which has many variants.</p>

<p>Also both have carefully crafted VM, efficient, (mostly) bugless. Should you make your own interpretor, you should either take an existing VM and generate bytecode for it from Basic source, or make your own. Sure fun stuff, but time consuming and prone to bugs...</p>

<p>So, I would just let Basic have a nice retirement... :-P</p>

<p>PS.: Why it is hanging on? Perhaps Microsoft isn't foreign to that... (VB, VBA, VBScript...)<br />
There are also lot of dialects around (RealBasic, DarkBasic, etc.), with some audience.</p>
"
244220,"<p>At the risk of sounding like two old-timers on rocking chairs, let me grumpily say that ""Kids today don't appreciate BASIC"" and then paradoxically say ""They don't know how good they've got it."" </p>

<p>BASICs greatest strength was <em>always</em> its comprehensibility. It was something that people could <em>get</em>. That was long ignored by academics and language developers. </p>

<p>When you talk about wanting to implement BASIC, I assume you're not talking about line-numbered BASIC, but a structured form. The problem with that is that as soon as you start moving into structured programming -- functions, 'why <em>can't</em> I just GOTO that spot?', etc. -- it really becomes unclear what advantages, if any, BASIC would have over, say, Python.</p>

<p>Additionally, one reason BASIC was ""so easy to get right"" was that in those days libraries weren't nearly as important as they are today. Libraries imply structured if not object-oriented programming, so again you're in a situation where a more modern dynamic scripting language ""fits"" the reality of what people do today better.</p>

<p>If the real question is ""well, I want to implement an interpreter and so it comes down to return on investment,"" then it becomes a problem of an grammar that's actually easy to implement. I'd suggest that BASIC doesn't really have that many advantages in that regard either (unless you really <em>do</em> return to line numbers and a very limited grammar).  </p>

<p>In short, I <em>don't</em> think you should invest your effort in a BASIC interpreter. </p>
"
340334,"<p>Is your aim purely to improve the applications, or is it that you want to learn/work with Python?</p>

<p>If it's the first, I would say you should stick with PHP, since you already know that.</p>
"
340429,"<p>Just an update, i ended up going a different approach.</p>

<p>The easiest way i found to modify the file output, was to simply use a FileHandler, then when it is time to do a roll over.</p>

<p>I do this:</p>

<pre><code>if(current_time &gt; old_time):
    for each in logging.getLogger('Debug').handlers:
      each.stream = open(""C:\\NewOutput"", 'a')
</code></pre>

<p>Thats the gist of it. It took alot of poking and looking around but modifying the stream is the easiest way to do so.</p>

<p>:)</p>
"
340685,"<p>If you are going to add more features to the code you already have working, then it might be a good idea to port it to python. After all, it will get you increased productivity. You just have to balance it, whether the rewriting task will not outweigh the potential gain... </p>

<p>And also, when you do that, try to unittest as much as you can.</p>
"
340792,"<p>As others have said, re-writing will take a lot longer than you think and fixing all the bugs and making use everything worked like in the old version will take even longer.  Chances are you are better off simply improving and refactoring the php code you have. There are only a few good reasons to port a project from one language to another:</p>

<ol>
<li>Performance.  Some languages are simply faster than others, and there comes a point where there is nothing left to optimize and throwing hardware at the problem ceases to be effective. </li>
<li>Maintainability.  Sometimes it is hard to find good people who know some obscure language which your legacy code is written in.  In those cases it might be a good idea to re-write it in a more popular language to ease maintenance down the road.</li>
<li>Porting to a different platform.  If you all of a sudden need to make your old VB program run on OS X and Linux as well as Windows then youâre probably looking at a re-write in a different language</li>
</ol>

<p>In your case it doesn't seem like any of the above points hold.  Of course if it's an unimportant app and you want to do it for the learning experience then by all means go for it, but from a business or economic point of view I'd take a long hard look at what such a re-write will cost and what exactly you hope to gain.</p>
"
340801,"<p>If strings are the problem, detect a sequence and filter out the special case of strings:</p>

<pre><code>def is_iterable(x):
  if type(x) == str:
    return False
  try:
    iter(x)
    return True
  except TypeError:
    return False
</code></pre>
"
16189,"<p>Perhaps try <a href=""http://python.net/crew/theller/ctypes/"" rel=""nofollow"">ctypes </a>instead of SWIG. If it has been included as a part of Python 2.5, then it must be good :-)</p>
"
16191,"<p>In my experience, there are two easy ways to call into C code from Python code.  There are other approaches, all of which are more annoying and/or verbose.</p>

<p>The first and easiest is to compile a bunch of C code as a separate shared library and then call functions in that library using ctypes.  Unfortunately, passing anything other than basic data types is non-trivial.</p>

<p>The second easiest way is to write a Python module in C and then call functions in that module.  You can pass anything you want to these C functions without having to jump through any hoops.  And it's easy to call Python functions or methods from these C functions, as described here: <a href=""https://docs.python.org/extending/extending.html#calling-python-functions-from-c"" rel=""nofollow"">https://docs.python.org/extending/extending.html#calling-python-functions-from-c</a></p>

<p>I don't have enough experience with SWIG to offer intelligent commentary.  And while it is possible to do things like pass custom Python objects to C functions through ctypes, or to define new Python classes in C, these things are annoying and verbose and I recommend taking one of the two approaches described above.</p>
"
330606,"<p>""Threaded"" and ""Fork based"" servers are equivalent.  A ""threaded"" server has multiple threads of execution, and if one blocks then the others will continue.  A ""Fork based"" server has multiple processes executing, and if one blocks then the others will continue.  The only difference is that threaded servers by default will share memory between the threads, ""fork based"" ones by default will not share memory.</p>

<p>One other point - the ""subprocess"" module is not thread safe, so if you try to use it from CherryPy you will get wierd errors.  (This is <a href=""http://bugs.python.org/issue1731717"" rel=""nofollow"">Python Bug 1731717</a>)</p>
"
120705,"<p>A proper answer will need more information than that. What are you actually doing? How does it fail? Are you using the subprocess module? Are you passing a list of arguments and shell=False (or no shell argument) or are you actually invoking the shell?</p>
"
120708,"<p>Try quoting the argument that contains the &amp;</p>

<pre><code>wget ""http://foo.com/?bar=baz&amp;amp;baz=bar""
</code></pre>

<p>Is usually what has to be done in a Linux shell</p>
"
135290,"<p>I'm redacting my response and upvoting the other answer by Ben Bangert, as it's the correct one.  I answered and have since learned the correct way (mentioned below).  If you really want to, check out the history of this answer to see the wrong (but working) solution I originally proposed.</p>
"
135342,"<p>It's never a bad thing to write readable, expressive code.</p>

<pre><code>if otherString:
   stringValue = otherString
else:
   stringValue = defaultString
</code></pre>

<p>This type of code is longer and more expressive, but also more readable and less likely to get tripped over or mis-edited down the road. Don't be afraid to write expressively - readable code should be a goal, not a byproduct.</p>
"
258797,"<p>I figured it out below is what I needed to do:</p>

<pre><code>url = ""http://www.domainname.com/page?CONTENT_ITEM_ID=1234&amp;param2&amp;param3""
url = url[: url.find(""&amp;"")]
print url
'http://www.domainname.com/page?CONTENT_ITEM_ID=1234'
</code></pre>
"
331384,"<p>Scipy has sparse matrices, so if you can make the first two words a tuple, you can do something like this:</p>

<pre><code>import numpy as N
from scipy import sparse

word_index = {}
count = sparse.lil_matrix((word_count*word_count, word_count), dtype=N.int)

for word1, word2, word3 in triple_list:
    w1 = word_index.setdefault(word1, len(word_index))
    w2 = word_index.setdefault(word2, len(word_index))
    w3 = word_index.setdefault(word3, len(word_index))
    w1_w2 = w1 * word_count + w2
    count[w1_w2,w3] += 1
</code></pre>
"
331861,"<p>Use PBKDF2, see <a href=""http://stackoverflow.com/questions/287517/encryptinghashing-plain-text-passwords-in-database#287883"">this comment</a> on a different thread (includes Python implementation).</p>
"
331871,"<p>When you open the URL with <code>urllib2</code>, and you're redirected, you get a status 30x for redirection.  Check the info to see the location to which you're redirected.  You don't need to read the page to read the <code>info()</code> that's part of the response.</p>
"
175831,"<p>I would advise using a scoring algorithm. Basically construct a formula that pulls all the values you described into a single number. Who ever has the highest final score wins that slot. For example a simple formula might be:</p>

<pre><code>FinalScore = ( PlayerRanking * N1 ) + ( PlayerPreference * N2 )
</code></pre>

<p>Where N1, N2 are weights to control the formula.</p>

<p>This will allow you to get good (not perfect) results very quickly. We use this approach on a much more complex system with very good results.</p>

<p>You can add more variety to this by adding in factors for how many times the player has won or lost slots, or (as someone suggested) how much the player paid.</p>

<p>Also, you can use multiple passes to assign slots in the day. Use one strategy where it goes chronologically, one reverse chronologically, one that does the morning first, one that does the afternoon first, etc. Then sum the scores of the players that got the spots, and then you can decide strategy provided the best results.</p>
"
196660,"<p>You can use www.web2py.com. You build the model and the application once and it works on GAE but also witl SQLite, MySQL, Posgres, Oracle, MSSQL, FireBird</p>
"
196758,"<p>You could screen scrape the returned HTML from a valid HTTP request. But that would result in bad karma, and the loss of the ability to enjoy a good night's sleep.</p>
"
196780,"<p>Suggest that a REST API be added to SO. <a href=""http://stackoverflow.uservoice.com"" rel=""nofollow"">http://stackoverflow.uservoice.com/</a></p>
"
197520,"<p>Basically what Hugh said above: check the IV's, key sizes and the chaining modes to make sure everything is identical.</p>

<p>Test both sides independantly, encode some information and check that Ruby and Python endoded it identically. You're assuming that the problem has to do with encryption, but it may just be something as simple as sending the encrypted data with <code>puts</code> which throws random newlines into the data. Once you're sure they encrypt the data correctly, check that you receive exactly what you think you sent. Keep going step by step until you find the stage that corrupts the data.</p>

<p>Also, I'd suggest using the openssl library that's included in ruby's standard library instead of using an external gem.</p>
"
197854,"<p>I don't suppose you have any way of convincing the person who hosts the other machine to switch to unicode?</p>

<p>This is one of the reasons Unicode was invented, after all.</p>
"
174203,"<p>If you don't have to work with py2exe, bbfreeze works better, and I've tried it with the email module. <a href=""http://pypi.python.org/pypi/bbfreeze/0.95.4"" rel=""nofollow"">http://pypi.python.org/pypi/bbfreeze/0.95.4</a></p>
"
120103,"<p>Thanks guys, I got the point. I should not do such thing. But if your curios what I tried to do is to somehow short number of lines in my view function in django. I have form with many fields, and instead of receive every field in form of:</p>

<pre><code>first_name = form.cleaned_data['first_name']
last_name = form.cleaned_data['last_name'] ..
</code></pre>

<p>i was thinking to take every attribute name of my form class and loop over it. Like so:</p>

<pre><code>for name in ProfileRegistration.base_fields.__dict__['keyOrder']:
   # and here the variables that i tried to assign
</code></pre>
"
120104,"<p>You don't need to impersonate a browser user-agent; any user-agent at all will work, just not a blank one.</p>
"
135916,"<p>I'd simply go with :</p>

<pre><code>import re

html = """"""fjlk&lt;wb&gt;dsqfjqdsmlkf fdsijfmldsqjfl fjdslmfkqsjf&lt;---- fdjslmjkqfs---&gt;&lt;!--[if lt IE 7.]&gt;\
&lt;script defer type=""text/javascript"" src=""pngfix_253168.js""&gt;&lt;/script&gt;&lt;!--png fix for IE--&gt;\
&lt;![endif]--&gt;fjlk&lt;wb&gt;dsqfjqdsmlkf fdsijfmldsqjfl fjdslmfkqsjf&lt;---- fdjslmjkqfs---&gt;""""""

# here the black magic occurs (whithout '.')
clean_html = ''.join(re.split(r'&lt;!--\[[^Â¤]+?endif]--&gt;', html))

print clean_html

'fjlk&lt;wb&gt;dsqfjqdsmlkf fdsijfmldsqjfl fjdslmfkqsjf&lt;---- fdjslmjkqfs---&gt;fjlk&lt;wb&gt;dsqfjqdsmlkf fdsijfmldsqjfl fjdslmfkqsjf&lt;---- fdjslmjkqfs---&gt;'
</code></pre>

<p>N.B : [^Â¤] will match any char that is not 'Â¤'. This is really useful since it's lightning fast and this char can be found on any keyboard. But the trick is it's really hard to type (no one will type it by mistake) and nobody uses it : it's a generical money devise char.</p>

<p>If you don't feel like using Â¤, however, you can use chr(7) to generate the ""system bell"" char, wich is unprintable and can't be found in a web page ;-)</p>
"
243515,"<p>This will get you an Image as the result of a POST -- you may not like it</p>

<ol>
<li>Put an iFrame where you want the image and size it and remove scrollbars</li>
<li>Set the src to a form with hidden inputs set to your post parameters and the action set to the URL that will generate the image</li>
<li><p>submit the form automatically with JavaScript in the body.onload of the iFrame's HTML</p>

<p>Then, either:</p></li>
<li><p>Serve back an content-type set to an image and stream the image bytes</p>

<p>or:</p></li>
<li><p>store the post parameters somewhere and generate a small id</p></li>
<li><p>serve back HTML with an img tag using the id in the url -- on the server look up the post parameters</p>

<p>or:</p></li>
<li><p>generate a page with an image tag with an embedded image</p>

<p><a href=""http://danielmclaren.net/2008/03/embedding-base64-image-data-into-a-webpage"" rel=""nofollow"">http://danielmclaren.net/2008/03/embedding-base64-image-data-into-a-webpage</a></p></li>
</ol>
"
243521,"<p>Putting together what has already been said, how about creating two pages. First page sends a POST request when the form is submitted (lets say to create_img.py) with a text=xxxxxxx... parameter. Then create_img.py takes the text parameter and creates an image with it and inserts it (or a filesystem reference) into the db, then when rendering the second page, generate img tags like <code>&lt;img src=""render_img.py?row_id=0122""&gt;</code>. At this point, render_img.py simply queries the db for the given image. Before creating the image you can check to see if its already in the database therefore reusing/recycling previous images with the same text parameter.</p>
"
121487,"<p>You could call <code>sys.exc_info()</code> in a custom exception handler.  But I don't recommend that.  Django can send you emails for exceptions.</p>
"
259260,"<p>Your question needs clarification.</p>

<h3>run a function on a loop</h3>

<pre><code>new_list= [yourfunction(item) for item in a_sequence]
</code></pre>

<h3>run a function acting on all values in a list</h3>

<p>Your function should have some form of iteration in its code to process all items of a sequence, something like:</p>

<pre><code>def yourfunction(sequence):
    for item in sequence:
        â¦
</code></pre>

<p>Then you just call it with a sequence (i.e. a list, a string, an iterator etc)</p>

<pre><code>yourfunction(range(10))
yourfunction(""a string"")
</code></pre>

<p>YMMV.</p>
"
259638,"<p>Like this:</p>

<pre><code>print name.split()[-1]
</code></pre>
"
174989,"<p>The traditional, UNIX-y way to communicate with sub-processes is to open pipes to their standard input/output, and use the <code>select()</code> system call to multiplex the communications in the parent process (available in Python via... the <code>select</code> module).</p>

<p>If you need to kill a slow-running child process, you can just save its process ID (returned by the <code>os.fork()</code> call) and then use <code>os.kill()</code> to kill it when not needed anymore.  Of course, it would probably be cleaner to be able to communicate with the child process explicitly and <em>tell it</em> to shut itself down.</p>
"
196891,"<p>You need to analyse exactly what the problem is. MySQL connections should eventually timeout if the server is gone; TCP keepalives are generally enabled. You may be able to tune the OS-level TCP timeouts.</p>

<p>If the database is ""flaky"", then you definitely need to investigate how. It seems unlikely that the database really is the problem, more likely that networking in between is.</p>

<p>If you are using (some) stateful firewalls of any kind, it's possible that they're losing some of the state, thus causing otherwise good long-lived connections to go dead.</p>

<p>You might want to consider changing the idle timeout parameter in MySQL; otherwise, a long-lived, unused connection may go ""stale"", where the server and client both think it's still alive, but some stateful network element in between has ""forgotten"" about the TCP connection. An application trying to use such a ""stale"" connection will have a long wait before receiving an error (but it should eventually).</p>
"
196956,"<p>Try:</p>

<p><a href=""http://wordlist.sourceforge.net/"" rel=""nofollow"">http://wordlist.sourceforge.net/</a></p>

<p>For a list of English words.</p>

<p>You will need to be careful of names, e.g. ""Canberra"" or ""Bill Clinton"". These won't appear in the word list. I suggest just checking whether the first letter is capitalized as a first attempt.</p>
"
330494,"<p>Note that you can't actually solve this by a regular expression, since they don't have the expressive power to enforce proper nesting.</p>

<p>Take the following mini-language:</p>

<blockquote>
  <p><em>A certain number of ""("" followed by the same number of "")"", no matter what the number.</em></p>
</blockquote>

<p>You could make a regular expression very easily to represent a super-language of this mini-language (where you don't enforce the equality of the number of starts parentheses and end parentheses). You could also make a regular expression very easilty to represent any finite sub-language (where you limit yourself to some max depth of nesting). But you can never represent this exact language in a regular expression.</p>

<p>So you'd have to use a grammar, yes.</p>
"
330548,"<p>I've written a small set of minor hooks which might be interesting: <a href=""http://fellowiki.org/hg/support/quecksilber/file/"" rel=""nofollow"">http://fellowiki.org/hg/support/quecksilber/file/</a></p>

<p>Anyway, these are the hooks most useful to me ;-)</p>
"
330577,"<p>Another option is to review the requirement for state, it sounds like if the serialisation is the bottle neck then the object is very large.  Do you really need an object that large?</p>

<p>I know in the Stackoverflow podcast 27 the reddit guys discuss what they use for state, so that maybe useful to listen to.  </p>
"
330596,"<p><a href=""http://www.jython.org/"" rel=""nofollow"">Jython</a> 2.5b0 (beta) has an implementation of the <a href=""http://www.python.org/doc/2.5.2/lib/module-time.html"" rel=""nofollow"">time module</a> that includes </p>

<blockquote>
  <p><code>strptime(string[, format])</code>.</p>
  
  <p>Parse a string representing a time according to a format. The return value is a struct_time as returned by gmtime() or localtime(). </p>
</blockquote>

<p>(<code>strptime</code> is missing in Jython2.2.1).</p>

<p>A python version of the conversion formats will look like (not sure of the zone component):</p>

<pre><code>import time
mytime = time.strptime(""1 Dec 2008 06:43:00 +0100"", ""%d %b %Y %H:%M:%S %Z"")
new_time_string = time.strftime(""%m/%d/%Y %I:%M:%S%p"", mytime)
</code></pre>
"
198358,"<p>If you make your procedure produce a table, you can use that result as a substitute for out params.</p>

<p>So instead of:</p>

<pre><code>CREATE PROCEDURE Foo (@Bar INT OUT, @Baz INT OUT) AS
BEGIN
   /* Stuff happens here */
   RETURN 0
END
</code></pre>

<p>do</p>

<pre><code>CREATE PROCEDURE Foo (@Bar INT, @Baz INT) AS
BEGIN
   /* Stuff happens here */
   SELECT @Bar Bar, @Baz Baz
   RETURN 0
END
</code></pre>
"
198369,"<p>Personally, I'd go with beachcoder's recipe as updated <A HREF=""http://pylonshq.com/pasties/271"" rel=""nofollow"">here</A>. That said, with the possible exception of Tesla (which I'm not familiar with), they're all lightweight enough that it should be easy to switch between them if you have any kind of trouble; all the hard work is in your model.</p>
"
172430,"<p>Asymmetric encryption would work in this scenario as well.  Simply have each node publish it's public key.  Any node that wants to communicate with that node need only encrypt the message with that node's public key.  One advantage of using asymmetric keys is that it becomes easier to change and distribute keys -- since the public keys can be distributed openly, each node need only update it's public-private key pair and republish. You don't need some protocol for the entire network (or each node pair) to agree on a new symmetric key.</p>
"
120224,"<p>Consider writing a context manager and using the with statement.</p>
"
260407,"<p>If you're on a unix box, <code>os.popen(""tail -10 "" + filepath).readlines()</code> will probably be the fastest way.  Otherwise, it  depends on how robust you want it to be.  The methods proposed so far will all fall down, one way or another.  For robustness and speed in the most common case you probably want something like a logarithmic search: use file.seek to go to end of the file minus 1000 characters, read it in, check how many lines it contains, then to EOF minus 3000 characters, read in 2000 characters, count the lines, then EOF minus 7000, read in 4000 characters, count the lines, etc. until you have as many lines as you need.  But if you know for sure that it's always going to be run on files with sensible line lengths, you may not need that.</p>

<p>You might also find some inspiration in the <a href=""http://www.koders.com/c/fid8DEE98A42C35A1346FA89C328CC3BF94E25CF377.aspx"" rel=""nofollow"">source code</a> for the unix <code>tail</code> command.</p>
"
260595,"<p>It says: ""You are getting closer"".</p>
"
260924,"<p>You can't do this without a nonstandard library.</p>

<p>for windows users who end up in this thread, try <a href=""http://python.net/crew/mhammond/win32/"" rel=""nofollow"">pythonwin</a>.  <a href=""http://www.pygame.org/docs/ref/mixer.html"" rel=""nofollow"">PyGame</a> has some sound support.  For hardware accelerated game audio, you'll probably need to call OpenAL or similar through ctypes.</p>
"
260942,"<p>A special case of this problem came up in the 70s AI languages oriented around deductive databases. The keys in these databases could be patterns with variables -- like regular expressions without the * or | operators. They tended to use fancy extensions of trie structures for indexes. See krep*.lisp in Norvig's <a href=""http://norvig.com/paip/"" rel=""nofollow"">Paradigms of AI Programming</a> for the general idea.</p>
"
260120,"<p>As other respondents have pointed out, it's not possible to do this with a hash table in constant time.</p>

<p>One approximation that might help is to use a technique called <a href=""http://en.wikipedia.org/wiki/Ngram#n-grams_for_approximate_matching"" rel=""nofollow"">""n-grams""</a>. Create an inverted index from n-character chunks of a word to the entire word. When given a pattern, split it into n-character chunks, and use the index to compute a scored list of matching words.</p>

<p>Even if you can't accept an approximation, in most cases this would still provide an accurate filtering mechanism so that you don't have to apply the regex to every key.</p>
"
260287,"<p>You could read chunks of 1,000 bytes or so from the end of the file into a buffer until you have 10 lines.</p>
"
120073,"<p>Try changing the user agent header you are sending in your request to something like:
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008072820 Ubuntu/8.04 (hardy) Firefox/3.0.1 (Linux Mint)</p>
"
172449,"<p>Why not create a VPN among the nodes that must communicate securely? </p>

<p>Then, you don't have to bother coding up your own security solution, and you're not restricted to a static, shared key (which, if compromised, will allow all captured traffic to be decrypted after the fact).</p>
"
329744,"<p>You're all set, just do it :)<br />
Read the django tutorial to get started (if you haven't already).<br />
I don't know everything about django or python, I just keep the references by my side.</p>
"
330058,"<p>The password, or anything derived from the password, should never be used as salt. The salt for a particular password should be unpredictable.</p>

<p>A username or part of the user name is tolerable, but even better would be random bytes from a cryptographic RNG.</p>
"
330356,"<p>I think a grammar would be the best option here. I found a link with some information:
<a href=""http://www.onlamp.com/pub/a/python/2006/01/26/pyparsing.html"" rel=""nofollow"">http://www.onlamp.com/pub/a/python/2006/01/26/pyparsing.html</a></p>
"
173592,"<p>If performance is a concern (i.e. lots of cars on a page, or a high-traffic site), <a href=""http://groups.google.com/group/django-developers/browse_thread/thread/9a672d5bbbe67562"" rel=""nofollow"">denormalization</a> makes sense, and simplifies your problem as a side effect.</p>

<p>Be aware that denormalizing many-to-many relations might be a bit tricky though. I haven't run into any such code examples yet.</p>
"
199393,"<p>The other option, considering that your requirement is to save a dict and then spit it back out for the user's ""viewing pleasure"", is to use the <code>shelve</code> module which will let you persist any pickleable data to file. The python docs are <a href=""http://docs.python.org/library/shelve.html#example"" rel=""nofollow"">here</a>.</p>
"
199588,"<p>Depending on what you're working on, you might want to look into the <a href=""http://pypi.python.org/pypi/shove"" rel=""nofollow"">shove</a> module. It does something similar, where it auto-stores Python objects inside a sqlite database (and all sorts of other options) and pretends to be a dictionary (just like the <a href=""http://www.python.org/doc/2.5.2/lib/module-shelve.html"" rel=""nofollow"">shelve</a> module).</p>
"
171780,"<p>I have come across this problem too and wrote a python function to fix it; my advice is to cut your losses with the DRM files and just move them out of whatever program you are using for playlists etc.  The typical issue is m4p's mixed in with your mp3's and m4a's; whatever your mix this will move all drm'd files into a new folder at <code>C:\drm_music</code>:</p>

<pre><code>import os, shutil

def move_drm_files(music_folder):
    all_songs = []
    good_filetypes = ['mp3', 'm4a', 'ogg', 'flv', 'wma']
    for root, dirs, files in os.walk(music_folder):
        for name in files:
    	    full_name = os.path.join(root, name)
    	    all_songs.append(full_name)
    os.mkdir('/drm_music')
    for song in all_songs:
    	if song[-3:] not in good_filetypes:
    		shutil.move(song, '/drm_music')
</code></pre>

<p>So for example you could run the above with <code>python -i move_drm.py</code> (saving the script as <code>move_drm.py</code>) and call <code>move_drm_files('/users/alienfluid/music')</code>, and all the drm'd filetypes would be moved to their own quarantined folder.  If you think you can save some of those you could do this to sort the drm files by type:</p>

<pre><code>def sort_drm(drm_folder, all_songs=[]):
    os.mkdir('/drm_collection')
    known_types = []
    for root, dirs, files in os.walk(drm_folder):
    	for name in files:
    		full_name = os.path.join(root, name)
    		all_songs.append(full_name)
    for item in all_songs:
    	if item[-3:] not in known_types:
    		known_types.append(item[-3:])
    for item in known_types:
    	os.mkdir('/drm_collection/'+item)
    for item in all_songs:
    	shutil.copy2(item, '/drm_collection/'+item[-3:])
</code></pre>

<p>This will create a folder at <code>C:\drm_collection</code> with subfolders named for their extension (m4p etc), and they will be filled with all instances of each type; if you run the first function, you could just save the second one in the same file and call <code>sort_drm('/drm_music')</code></p>
"
172086,"<p>Why not run an OpenID provider from your local machine?</p>

<p>If you are a .Net developer there is an OpenID provider library for .Net at <a href=""http://code.google.com/p/dotnetopenid/"" rel=""nofollow"">Google Code</a>. This uses the standard .Net profile provider mechanism and wraps it with an OpenID layer. We are using it to add OpenID to our custom authentication engine.</p>

<p>If you are working in another language/platform there are a number of OpenID implementation avalaiable from the OpenID community site <a href=""http://wiki.openid.net/Libraries"" rel=""nofollow"">here</a>.</p>
"
346281,"<p>Modifying your regexp a little,</p>

<pre><code>&gt;&gt;&gt; str = ""'813702104[813702106]','813702141[813702143]','813702172[813702174]""
&gt;&gt;&gt; imgRegex = re.compile(r""'(?P&lt;main&gt;\d+)\[(?P&lt;thumb&gt;\d+)\]',?"")
&gt;&gt;&gt; print imgRegex.findall(str)
[('813702104', '813702106'), ('813702141', '813702143')]
</code></pre>

<p>Which is a ""2 dimensional array"" - in Python, ""a list of 2-tuples"".</p>
"
346284,"<p>I've got something that seems to work on your data set:</p>

<pre><code>In [19]: str = ""'813702104[813702106]','813702141[813702143]','813702172[813702174]'""
In [20]: ptr = re.compile( r""'(?P&lt;one&gt;\d+)\[(?P&lt;two&gt;\d+)\]'"" )
In [21]: ptr.findall( str )
Out [23]:
[('813702104', '813702106'),
 ('813702141', '813702143'),
 ('813702172', '813702174')]
</code></pre>
"
187499,"<p>This is commonly considered a bad idea.  The primary reason is that it confuses most people due to the website identity markers appearing in just about every current browsers url area.</p>
"
187502,"<p>Assuming you only want parts of the actual <em>page</em> to be secure, you should create an iframe pointing to a HTTPS source. However, this shows a <em>""secure and non-secure items on page""</em> warning to the user.</p>
"
183492,"<p>If you want readable names this looks like a good solution.<br />
There are routines to return unique file names for eg. temp files but they produce long random looking names.</p>
"
183563,"<p>I find it very useful to drop into a debugger in a failing test case.</p>

<p>I add <code>import pdb; pdb.set_trace()</code> just before the failure point of the test. The test runs, building up a potentially quite large context (e.g. importing a database fixture or constructing an HTTP request). When the test reaches the <code>pdb.set_trace()</code> line, it drops into the interactive debugger and I can inspect the context in which the failure occurs with the usual pdb commands looking for clues as to the cause.</p>
"
329085,"<p>If you need fast serialization use <a href=""http://www.python.org/doc/2.5.2/lib/module-marshal.html"" rel=""nofollow"">marshal</a> module. It's around 400x faster than your methods.</p>
"
329351,"<p>It's not clear if you need to print all class instances at once or when they're initialized, nor if you're talking about a class you have control over vs a class in a 3rd party library.</p>

<p>In any case, I would solve this by writing a class factory using Python metaclass support.  If you don't have control over the class, manually update the <code>__metaclass__</code> for the class or module you're tracking.</p>

<p>See <a href=""http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html"" rel=""nofollow"">http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html</a> for more information.</p>
"
37146,"<p>Use an interface that runs each response in a separate interpreter, such as <code>mod_wsgi</code> for Python. This lets multi-threading be used without encountering the GIL.</p>

<p>EDIT: Apparently, <code>mod_wsgi</code> no longer supports multiple interpreters per process because idiots couldn't figure out how to properly implement extension modules. It still supports running requests in separate processes FastCGI-style, though, so that's apparently the current accepted solution.</p>
"
200271,"<p>Return the header</p>

<pre>
Set-Cookie: token=opaque; Domain=.your.domain; Expires=Thu, 01-Jan-1970 00:00:10 GMT; Path=/ 
</pre>

<p>The Domain and Path must match the original attributes that the cookie was issued under.</p>
"
328268,"<p>Here's how I did it at school. I forgot why it is not a good idea.</p>

<p>EDIT: </p>

<p>@Darius Bacon: <a href=""http://stackoverflow.com/questions/328107/how-can-you-determine-a-point-is-between-two-other-points-on-a-line-segment#328110"">cites a ""Beautiful Code"" book</a> which contains an explanation why the belowed code is not a good idea.</p>

<pre><code>#!/usr/bin/env python
from __future__ import division

epsilon = 1e-6

class Point:
    def __init__(self, x, y):
        self.x, self.y = x, y

class LineSegment:
    """"""
    &gt;&gt;&gt; ls = LineSegment(Point(0,0), Point(2,4))
    &gt;&gt;&gt; Point(1, 2) in ls
    True
    &gt;&gt;&gt; Point(.5, 1) in ls
    True
    &gt;&gt;&gt; Point(.5, 1.1) in ls
    False
    &gt;&gt;&gt; Point(-1, -2) in ls
    False
    &gt;&gt;&gt; Point(.1, 0.20000001) in ls
    True
    &gt;&gt;&gt; Point(.1, 0.2001) in ls
    False
    &gt;&gt;&gt; ls = LineSegment(Point(1, 1), Point(3, 5))
    &gt;&gt;&gt; Point(2, 3) in ls
    True
    &gt;&gt;&gt; Point(1.5, 2) in ls
    True
    &gt;&gt;&gt; Point(0, -1) in ls
    False
    &gt;&gt;&gt; ls = LineSegment(Point(1, 2), Point(1, 10))
    &gt;&gt;&gt; Point(1, 6) in ls
    True
    &gt;&gt;&gt; Point(1, 1) in ls
    False
    &gt;&gt;&gt; Point(2, 6) in ls 
    False
    &gt;&gt;&gt; ls = LineSegment(Point(-1, 10), Point(5, 10))
    &gt;&gt;&gt; Point(3, 10) in ls
    True
    &gt;&gt;&gt; Point(6, 10) in ls
    False
    &gt;&gt;&gt; Point(5, 10) in ls
    True
    &gt;&gt;&gt; Point(3, 11) in ls
    False
    """"""
    def __init__(self, a, b):
        if a.x &gt; b.x:
            a, b = b, a
        (self.x0, self.y0, self.x1, self.y1) = (a.x, a.y, b.x, b.y)
        self.slope = (self.y1 - self.y0) / (self.x1 - self.x0) if self.x1 != self.x0 else None

    def __contains__(self, c):
        return (self.x0 &lt;= c.x &lt;= self.x1 and
                min(self.y0, self.y1) &lt;= c.y &lt;= max(self.y0, self.y1) and
                (not self.slope or -epsilon &lt; (c.y - self.y(c.x)) &lt; epsilon))

    def y(self, x):        
        return self.slope * (x - self.x0) + self.y0

if __name__ == '__main__':
    import  doctest
    doctest.testmod()
</code></pre>
"
328567,"<p>After looking at this article:</p>

<p><a href=""http://vbnet.mvps.org/index.html?code/screen/scmonitorpower.htm"" rel=""nofollow"">http://vbnet.mvps.org/index.html?code/screen/scmonitorpower.htm</a></p>

<p>It appears you need to send a SendMessage call similar to:</p>

<p>SendMessage(Me.hWnd, WM_SYSCOMMAND, SC_MONITORPOWER, ByVal MONITOR_OFF)</p>

<p>Although, that is a VB version. What you're really after is the WinAPI call, I'm sure you can convert this bit to however you invoke WinAPI calls in Python. I hope this helps.</p>
"
242366,"<p>Looks like a permission issues, make sure you don't have the file open in another application, and that you have write permissions to the file location your trying to write to.</p>
"
242634,"<p>If you want to have a variable in one source file that can be set to the current working copy revision, and does not replay on subversion and a working copy being actually available at the time you run your program, then <a href=""http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-subwcrev.html"" rel=""nofollow"">SubWCRev</a> my be your solution.</p>

<p>There also seems to be a linux port called <a href=""http://svnwcrev.tigris.org/"" rel=""nofollow"">SVNWCRev</a></p>

<p>Both perform substitution of $WCREV$ with the highest commit level of the working copy. Other information may also be provided.</p>
"
119671,"<p>Why don't you contact CA and ask them to tell them what they're searching for, for that virus?</p>

<p>Or, you could copy the file and change each individual byte until the warning disappeared (may take a while depending on the size).</p>

<p>It's possible the virus detection may be a lot more complicated than simply looking for a fixed string.</p>
"
119698,"<p>Hey,
better not wonder about the complexity and time these kinds of algorithms need.</p>

<p>If you have interest in this - here <a href=""http://www.acm.org/jea/ARTICLES/Vol4Nbr2.ps"" rel=""nofollow"">.ps document linked here</a> you can find a good introduction into this thematic.</p>

<p>If a good implementation for these algorithms exist, I can not tell. Maybe use google to find some - or put a new topic on stackoverflow :)</p>

<p>regards</p>
"
119943,"<p>As far as I know, the underlying protocol doesn't support named varargs (or any named args for that matter). The workaround for this is to create a wrapper that will take the **kwargs and pass it as an ordinary dictionary to the method you want to call. Something like this</p>

<p>Server side:</p>

<pre><code>def select_wrapper(self, db, fields, kwargs):
    """"""accepts an ordinary dict which can pass through xmlrpc""""""
    return select(self,db,fields, **kwargs)
</code></pre>

<p>On the client side:</p>

<pre><code>def select(self, db, fields, **kwargs):
    """"""you can call it with keyword arguments and they will be packed into a dict""""""
    return self.rpcClient.select_wrapper(self,db,fields,kwargs)
</code></pre>

<p>Disclaimer: the code shows the general idea, you can do it a bit cleaner (for example writing a decorator to do that).</p>
"
119964,"<p>Why would you want to do such a thing?  Unless you actually do anything with the variables inside the function, a function that just assigns several variables and then discards them is indistinguishable to def foo(): pass   (An optimiser would be justified in generating exactly the same bytecode).</p>

<p>If you also want to dynamically append code that uses the values, then you could do this by using exec (though unless this is really user-input code, there are almost certainly better ways to do what you want).  eg:</p>

<pre><code>some_code = '  return a+b+c'
exec ""def foo():\n  "" + '\n  '.join('%s = %s' for k,v in bar.items()) + '\n' + some_code
</code></pre>

<p>(Note that your code must be indented to the same level.)</p>

<p>On the other hand, if you want to actually assign these values to the function <strong>object</strong> (so you can do foo.a and get 1 - note that your sample code doesn't do this), you can do this by:</p>

<pre><code>for key, val in bar.items():
    setattr(foo, key, val)
</code></pre>
"
261180,"<p>Thanks, Ali &amp; Jeremy - both your answers were a big help. I'm still working on this (though I've stopped for the evening).</p>

<p>First, I took the hint from Ali and was trying part of Jeremy's suggestion: I was using dbus-launch to run ""gconftool-2 --spawn"". It didn't work for me; I now understand why (thx, Jeremy) -- I was trying to use gconf from within the same python program that was launching dbus &amp; gconftool, but its environment didn't have the environment variables - duh.</p>

<p>I set that strategy aside when I noticed gconftool-2's --direct option; internally, gconftool-2 is using API that isn't exposed by the gconf python bindings. So, I modified python-gconf to expose the extra method, and once that builds (I had some unrelated problems getting this to work), we'll see if that fixes things - if it doesn't (and maybe if it does, because building those bindings seems to build all of gnome!), I'll find a better way to manage the environment variables in that first strategy.</p>

<p>(I'll add another answer here tomorrow either way)</p>

<p>And it's the next day: I ran into a little trouble with my modified python-gconf, which inspired me to try Jeremy's simpler idea, which worked fine - before doing the first gconf operation, I simply ran ""dbus-launch"", parsed the resulting name-value pairs, and added them directly to python's environment. Having done that, I ran ""gconftool-2 --spawn"". Problem solved.</p>
"
261755,"<p>If you have a small set of possible inputs, you can cache the matches as they appear in a second dict and get O(1) for the cached values.</p>

<p>If the set of possible inputs is too big to cache but not infinite, either, you can just keep the last N matches in the cache (check Google for ""LRU maps"" - least recently used).</p>

<p>If you can't do this, you can try to chop down the number of regexps you have to try by checking a prefix or somesuch.</p>
"
119022,"<p>Ok, I'm answering my own question here, as alexk mentioned, using int to truncate was my mistake.  </p>

<p>The behaviour I'm after is best modeled by math.floor().</p>

<p>Apologies, the original question does not contain enough information to really work out what the problem is.  I didn't have the extra bit of information at that point.</p>

<p>With regards to the typo note, I think I may be using the context in a confusing manner...  From the perspective of the positionChanged() function, the parameter is a new position coming in.<br />
From the perspective of the snapToGrid() function the parameter is an original position which is being changed to a snapped position.
The language is like that because part of it is in my event handling code and the other part is in my general services code.  I should have changed it for the example</p>
"
328863,"<p>Maybe you mean something like <a href=""http://docs.python.org/reference/datamodel.html?highlight=__str__#object.__str__"" rel=""nofollow""><code>__str__</code></a>:</p>

<pre><code>object.__str__(self)
</code></pre>

<blockquote>
  <p>Called by the str() built-in function and by the print statement to compute the âinformalâ string representation of an object. This differs from <strong>repr</strong>() in that it does not have to be a valid Python expression: a more convenient or concise representation may be used instead. The return value must be a string object.</p>
</blockquote>

<p>A trivial example:</p>

<pre><code>&gt;&gt;&gt; class dummy(object):
...     def __init__(self):
...     	pass
...     def __str__(self):
...     	return ""I am a dummy""
...     
&gt;&gt;&gt; d1=dummy()
&gt;&gt;&gt; d2=dummy()
&gt;&gt;&gt; print d1,d2
I am a dummy I am a dummy
&gt;&gt;&gt;
</code></pre>
"
37504,"<p>You might need something more complicated than a regular expression. Web pages often have angle brackets that aren't part of a tag, like this:</p>

<pre><code> &lt;div&gt;5 &lt; 7&lt;/div&gt;
</code></pre>

<p>Stripping the tags with regex will return the string ""5 "" and treat</p>

<pre><code> &lt; 7&lt;/div&gt;
</code></pre>

<p>as a single tag and strip it out.</p>

<p>I suggest looking for already-written code that does this for you. I did a search and found this: <a href=""http://zesty.ca/python/scrape.html"" rel=""nofollow"">http://zesty.ca/python/scrape.html</a> It also can resolve HTML entities.</p>
"
199167,"<p>For quick and simple screens I use Glade.  But for anything that needs finer levels of control, I create a custom classes for what I actually need (this is important, because it's too easy to get carried away with generalisations).</p>

<p>With a skinny applications specific classes, I can rapidly change the look and feel application wide from a single place.  Rather like using CSS to mantain consistency for web sites.</p>
"
199190,"<p>SpoonMeiser is correct, you need to have a strong reason to pickle into a database.  </p>

<p>It's not difficult to write Python objects that implement persistence with SQLite.  Then you can use the SQLite CLI to fiddle with the data as well.  Which in my experience is worth the extra bit of work, since many debug and admin functions can be simply performed from the CLI rather than writing specific Python code.</p>

<p>In the early stages of a project, I did what you propose and ended up re-writing with a Python class for each business object (note: I didn't say for each table!) This way the body of the application can focus on ""what"" needs to be done rather than ""how"" it is done.</p>
"
39878,"<p>Also, you could use autoconf and distribute your application in source form only. :)</p>
"
328072,"<p>A file is <em>almost</em> a list of lines.  You can trivially use it in a <strong>for</strong> loop.</p>

<pre><code>myFile= open( ""SomeFile.txt"", ""r"" )
for x in myFile:
    print x
myFile.close()
</code></pre>

<p>Or, if you want an actual list of lines, simply create a list from the file.</p>

<pre><code>myFile= open( ""SomeFile.txt"", ""r"" )
myLines = list( myFile )
myFile.close()
print len(myLines), myLines
</code></pre>

<p>You can't do <code>someList[i]</code> to put a <em>new</em> item at the end of a list.  You must do <code>someList.append(i)</code>.</p>

<p>Also, <em>never</em> start a simple variable name with an uppercase letter.  <code>List</code> confuses folks who know Python.</p>

<p>Also, <em>never</em> use a built-in name as a variable.  <code>list</code> is an existing data type, and using it as a variable confuses folks who know Python.</p>
"
328073,"<p>f.readlines() returns a list that contains each line as an item in the list</p>

<p>if you want eachline to be split("","") you can use list comprehensions</p>

<pre><code>[ list.split("","") for line in file ]
</code></pre>
"
328126,"<p>The scalar product between (c-a) and (b-a) must be equal to the product of their lengths (this means that the vectors (c-a) and (b-a) are aligned and with the same direction). Moreover, the length of (c-a) must be less than or equal to that of (b-a). Pseudocode:</p>

<pre><code># epsilon = small constant

def isBetween(a, b, c):
    lengthca2  = (c.x - a.x)*(c.x - a.x) + (c.y - a.y)*(c.y - a.y)
    lengthba2  = (b.x - a.x)*(b.x - a.x) + (b.y - a.y)*(b.y - a.y)
    if lengthca2 &gt; lengthba2: return False
    dotproduct = (c.x - a.x)*(b.x - a.x) + (c.y - a.y)*(b.y - a.y)
    if dotproduct &lt; 0.0: return False
    if abs(dotproduct*dotproduct - lengthca2*lengthba2) &gt; epsilon: return False 
    return True
</code></pre>
"
119208,"<p>Both are useful for different purposes.  C# is a pretty good all-rounder, python's dynamic nature makes it more suitable for RAD experiences such as site building.  </p>

<p>I don't think your career will suffer if you were competant in both.  To get going with Python consider an IDE with Python support such as Eclipse+PyDev or ActiveIDE's Komodo.  (I found a subscription to Safari Bookshelf online really invaluable too!)</p>
"
119215,"<p>What's better is inherently subjective. If you like Python's syntax - learn it. It will probably be harder to find a Python job, C# and .NET in general seem to be more popular, but this may change.</p>

<p>I also think it's worth to know at least one scripting language, even if your main job doesn't require it. Python is not a bad candidate.</p>
"
262433,"<p>I can't say mych about wxPython itself, but I am guessing that it is trying to convert the text to Unicode before displaying it, If you have a string like <code>'123\xB0'</code> and try to convert it to Unicode with teh default encoding (ASCII) then it will throw <code>UnicodeDecodeError</code>. You can probably fix this by replacing </p>

<pre><code>s = message.get_string()
</code></pre>

<p>with </p>

<pre><code>s = message.get_string().decode('ISO8859-1')
</code></pre>

<p>(where I am assuming a function <code>get_string()</code> that gets the message as a string). The difference here is that by handong the conversion to Unicode yourself you get to specify the encoding.</p>
"
262490,"<p>The simplest way is just to write a program with an infinite loop, and then hit control-C to stop it. Without more description it's hard to know if this works for you.</p>

<p>If you do it time-based, you don't need a generator. You can just have it pause for user input, something like a ""Continue? [y/n]"", read from stdin, and depending on what you get either exit the loop or not.</p>
"
262530,"<p>I would just do the basic</p>

<pre>
answer = {}
for key, value in list_of_tuples:
  if key in answer:
    answer[key].append(value)
  else:
    answer[key] = [value]
</pre>

<p>If it's this short, why use anything complicated. Of course if you don't mind using setdefault that's okay too.</p>
"
137052,"<p>I have been doing the same thing.  Extract common functionality, pretty the code up with extra documentation and unit tests/ doctests, create an easy_install setup.py, and then release on PyPi.  Recently, I created a single <a href=""http://code.google.com/p/7oars/"" rel=""nofollow"">Google Code site</a> where I manage the source and keep the wiki up to date.  </p>
"
137096,"<p>Additionally to the many fine suggestions @Mark Roddy has given, do the following:</p>

<ul>
<li>don't use <code>readlines</code>, you can iterate over file objects</li>
<li>try to use <code>executemany</code> rather than <code>execute</code>: try to do batch inserts rather single inserts, this tends to be faster because there's less overhead. It also reduces the number of commits</li>
<li><code>str.rstrip</code> will work just fine instead of stripping of the newline with a regex</li>
</ul>

<p>Batching the inserts will use more memory temporarily, but that should be fine when you don't read the whole file into memory.</p>
"
241519,"<p>No, there isn't.</p>
"
241672,"<p>For those of us who are using Github, this feature from the GAE team would make us all seriously consider switching to Google Code...</p>
"
242327,"<p>I use a technique very similar to this in order to show the current subversion revision number in my shell:</p>

<pre><code>svnRev=$(echo ""$(svn info)"" | grep ""^Revision"" | awk -F"": "" '{print $2};')
echo $svnRev
</code></pre>

<p>It works very well for me.</p>

<p>Why do you want the python files to change every time the version number of the entire repository is incremented? This will make doing things like doing a diff between two files annoying if one is from the repo, and the other is from a tarball..</p>
"
328196,"<p>To expand on what <a href=""http://stackoverflow.com/questions/327985/need-help-to-write-in-the-last-line-of-the-file#328007"">Doug said</a>, in order to read the file contents into a data structure you can use the <a href=""http://www.python.org/doc/2.5.2/lib/bltin-file-objects.html"" rel=""nofollow"">readlines() method</a> of the file object.</p>

<p>The below code sample reads the file into a list of ""lines"", edits the last line, then writes it back out to the file: </p>

<pre><code>#!/usr/bin/python

MYFILE=""file.txt""

# read the file into a list of lines
lines = open(MYFILE, 'r').readlines()

# now edit the last line of the list of lines
new_last_line = (lines[-1].rstrip() + "",90,100,50"")
lines[-1] = new_last_line

# now write the modified list back out to the file
open(MYFILE, 'w').writelines(lines)
</code></pre>

<p>If the file is very large then this approach will not work well, because this reads all the file lines into memory each time and writes them back out to the file, which is very inefficient. For a small file however this will work fine. </p>
"
38442,"<p>My solution to this, that I hope can be bettered, is to use Oracle to explicitly convert the TIMESTAMP into a string:</p>

<pre><code>cursor.execute(""SELECT TO_CHAR(WhenAdded, 'YYYY-MM-DD HH:MI:SSAM') FROM Log"")
</code></pre>

<p>This works, but isn't portable. I'd like to use the same Python script against a SQL Server database, so an Oracle-specific solution (such as TO_CHAR) won't work.</p>
"
172244,"<p>You shouldn't be having trouble developing against your own machine. What error are you getting?</p>

<p>An OpenID provider will ask you to give your site (in this case <a href=""http://localhost:8000"" rel=""nofollow"">http://localhost:8000</a> or similar) access to your identity. If you click ok then it will redirect you that url. I've never had problems with <a href=""http://www.livejournal.com"" rel=""nofollow"">livejournal</a> and I expect that <a href=""http://myopenid.com"" rel=""nofollow"">myopenid.com</a> will work too.</p>

<p>If you're having problems developing locally I suggest that the problem you're having is unrelated to the url being localhost, but something else. Without an error message or problem description it's impossible to say more.</p>

<p><strong>Edit</strong>: It turns out that Yahoo do things differently to other OpenID providers that I've come across and disallow redirections to ip address, sites without a correct tld in their domain name and those that run on ports other than 80 or 443. See <a href=""http://openid.net/pipermail/general/2008-January/004024.html"" rel=""nofollow"">here</a> for a post from a Yahoo developer on this subject. <a href=""http://openid.net/pipermail/general/2008-January/004023.html"" rel=""nofollow"">This post</a> offers a work around, but I would suggest that for development myopenid.com would be far simpler than working around Yahoo, or running your own provider.</p>
"
172398,"<p>I'd probably go for <a href=""http://en.wikipedia.org/wiki/Advanced_Encryption_Standard#Implementations"" rel=""nofollow"">AES</a>.</p>
"
200638,"<p>If human readablity of configfiles matters an alternative might be <a href=""http://www.python.org/doc/lib/module-ConfigParser.html"" rel=""nofollow"">the ConfigParser module</a> which allows you to read and write .ini like files. But then you are restricted to one nesting level.</p>
"
200648,"<p>Filter will create a new list, so if your original is very big, you could end up using up to twice as much memory.
If you only need to process the results iteratively, rather than use it as a real random-access list, you are probably better off using
ifilter instead. ie.</p>

<pre><code>for x in itertools.ifilter(condition_func, my_really_big_list):
    do_something_with(x)
</code></pre>

<p>Other speed tips are to use a python builtin, rather than a function you write yourself.  There's a itertools.ifilterfalse specifically for the
case where you would otherwise need to introduce a lambda to negate your check.  (eg ""ifilter(lambda x: not x.isalpha(), l)"" should be written ""ifilterfalse(str.isalpha, l)"")</p>
"
201015,"<p>It may be useful to know that generally a conditional list comprehension is much faster than the corresponding lambda:</p>

<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.Timer('[x for x in xrange(10) if (x**2 % 4) == 1]').timeit()
2.0544309616088867
&gt;&gt;&gt; timeit.f = lambda x: (x**2 % 4) == 1
timeit.Timer('[x for x in xrange(10) if f(x)]').timeit()
&gt;&gt;&gt; 
3.4280929565429688
</code></pre>

<p>(Not sure why I needed to put f in the <code>timeit</code> namespace, there.  Haven't really used the module much.)</p>
"
201077,"<ol>
<li><p>Factor the computationally intensive part into a separate module.  Then at least on reload, you won't have to wait. </p></li>
<li><p>Try dumping the data structure using protocol 2.  The command to try would be <code>cPickle.dump(FD, protocol=2)</code>.  From the docstring for <code>cPickle.Pickler</code>:</p>

<blockquote>
<pre><code>Protocol 0 is the
only protocol that can be written to a file opened in text
mode and read back successfully.  When using a protocol higher
than 0, make sure the file is opened in binary mode, both when
pickling and unpickling.
</code></pre>
</blockquote></li>
</ol>
"
136758,"<p><a href=""https://docs.python.org/py-modindex.html"" rel=""nofollow"">Here</a> is a list of all the modules in Python, not sure if that's what you're really after.</p>
"
242063,"<p>What OpenGL library are you using?  What windowing library?  What version of Python?</p>

<p>Most likely cause I can think of is that your windowing library (SDL or whatever you're using) isn't initializing OpenGL before you start calling into it.</p>
"
242140,"<p>You might try <a href=""http://pypi.python.org/pypi/bicop"" rel=""nofollow""><code>bicop</code></a>, ""a python library to process ISC bind-style configuration files"".</p>
"
242144,"<p>You could try <a href=""http://divmod.org/trac/wiki/DivmodQuotient"" rel=""nofollow"">Quotient</a>.  It's a somewhat unusual webmail system, and it definitely won't fit into the same process as CherryPy - but it is in Python ;).</p>
"
136354,"<p>For efficiency with very large files (common in logfile situations where you may want to use tail), you generally want to avoid reading the whole file (even if you do do it without reading the whole file into memory at once)  However, you do need to somehow work out the offset in lines rather than characters.  One possibility is reading backwards with seek() char by char, but this is very slow.  Instead, its better to process in larger blocks.</p>

<p>I've a utility function I wrote a while ago to read files backwards that can be used here.</p>

<pre><code>import os, itertools

def rblocks(f, blocksize=4096):
    """"""Read file as series of blocks from end of file to start.

    The data itself is in normal order, only the order of the blocks is reversed.
    ie. ""hello world"" -&gt; [""ld"",""wor"", ""lo "", ""hel""]
    Note that the file must be opened in binary mode.
    """"""
    if 'b' not in f.mode.lower():
        raise Exception(""File must be opened using binary mode."")
    size = os.stat(f.name).st_size
    fullblocks, lastblock = divmod(size, blocksize)

    # The first(end of file) block will be short, since this leaves 
    # the rest aligned on a blocksize boundary.  This may be more 
    # efficient than having the last (first in file) block be short
    f.seek(-lastblock,2)
    yield f.read(lastblock)

    for i in range(fullblocks-1,-1, -1):
        f.seek(i * blocksize)
        yield f.read(blocksize)

def tail(f, nlines):
    buf = ''
    result = []
    for block in rblocks(f):
        buf = block + buf
        lines = buf.splitlines()

        # Return all lines except the first (since may be partial)
        if lines:
            result.extend(lines[1:]) # First line may not be complete
            if(len(result) &gt;= nlines):
                return result[-nlines:]

            buf = lines[0]

    return ([buf]+result)[-nlines:]


f=open('file_to_tail.txt','rb')
for line in tail(f, 20):
    print line
</code></pre>

<p>[Edit] Added more specific version (avoids need to reverse twice)</p>
"
118625,"<p>Here's a slightly simpler alternative.</p>

<pre><code>def quote(s):
    if ""'"" in s or '""' in s or "","" in str(s):
        return repr(s)
    return s
</code></pre>

<p>We only need to quote a value that might have commas or quotes.</p>

<pre><code>&gt;&gt;&gt; x= ['a', 'one ""two"" three', 'foo, bar', 'both""\'']
&gt;&gt;&gt; print "", "".join( map(quote,x) )
a, 'one ""two"" three', 'foo, bar', 'both""\''
</code></pre>
"
262988,"<p>You could also count the lines as you reverse through the file, instead of guessing at a byte offset. </p>

<pre><code>lines = 0
chunk_size = 1024

f = file('filename')
f.seek(0, 2)
f.seek(f.tell() - chunk_size)

while True:
    s = f.read(chunk_size)
    lines += s.count('\n')
    if lines &gt; NUM_OF_LINES:
        break
    f.seek(f.tell() - chunk_size*2)
</code></pre>

<p>Now the file is at a good position to run <code>readlines()</code>. You also could cache the strings you read the first time, to eliminate reading the same portion of the file twice.</p>
"
263331,"<p>Since there are so many different variation's of how people write their names, but here's how a basic way to get the first/lastname via regex.</p>

<pre><code>import re
p = re.compile(r'^(\s+)?(Mr(\.)?|Mrs(\.)?)?(?P&lt;FIRST_NAME&gt;.+)(\s+)(?P&lt;LAST_NAME&gt;.+)$', re.IGNORECASE)
m = p.match('Mr. Dingo Bat')
if(m != None):
  first_name = m.group('FIRST_NAME')
  last_name = m.group('LAST_NAME')
</code></pre>
"
119205,"<p>Depends on what you will use it for. If you're making enterprise Windows forms applications, I don't think switching to Python would be a good idea.</p>

<p>Also, it is possible to still use Python on the .NET CLR with IronPython.</p>
"
327924,"<p>Here's a tree structure that uses the bisect library to maintain a sorted list of words.  Each lookup in <strong>O</strong>(log2(n)).</p>

<pre><code>import bisect

class WordList( object ):
    """"""Leaf-level is list of words and counts.""""""
    def __init__( self ):
        self.words= [ ('\xff-None-',0) ]
    def count( self, wordTuple ):
        assert len(wordTuple)==1
        word= wordTuple[0]
        loc= bisect.bisect_left( self.words, word )
        if self.words[loc][0] != word:
            self.words.insert( loc, (word,0) )        
        self.words[loc]= ( word, self.words[loc][1]+1 )
    def getWords( self ):
        return self.words[:-1]

class WordTree( object ):
    """"""Above non-leaf nodes are words and either trees or lists.""""""
    def __init__( self ):
        self.words= [ ('\xff-None-',None)  ]
    def count( self, wordTuple ):
        head, tail = wordTuple[0], wordTuple[1:]
        loc= bisect.bisect_left( self.words, head )
        if self.words[loc][0] != head:
            if len(tail) == 1:
                newList= WordList()
            else:
                newList= WordTree()
            self.words.insert( loc, (head,newList) )
        self.words[loc][1].count( tail )
    def getWords( self ):
        return self.words[:-1]

t = WordTree()
for a in ( ('the','quick','brown'), ('the','quick','fox') ):
    t.count(a)

for w1,wt1 in t.getWords():
    print w1
    for w2,wt2 in wt1.getWords():
        print "" "", w2
        for w3 in wt2.getWords():
            print ""  "", w3
</code></pre>

<p>For simplicity, this uses a dummy value in each tree and list.  This saves endless if-statements to determine if the list was actually empty before we make a comparison.  It's only empty once, so the if-statements are wasted for all <em>n</em>-1 other words.</p>
"
327980,"<p><code>f.seek( pos ,2)</code> seeks to 'pos' relative to the end of the file.
try a reasonable value for pos then readlines() and get the last line.</p>

<p>You have to account for when 'pos' is not a good guess, i.e. suppose you choose 300, but the last line is 600 chars long! in that case, just try again with a reasonable guess, until you capture the entire line. (this worst case should be very rare)</p>
"
327459,"<p>Ok, so you are basically trying to store a sparse 3D space. The kind of access patterns you want to this space is crucial for the choice of algorithm and data structure. Considering your data source, do you want to feed this to a grid? If you don't need O(1) access:</p>

<p>In order to get memory efficiency you want to subdivide that space into subspaces with a similar number of entries. (like a BTree). So a data structure with :</p>

<ul>
<li>firstWordRange</li>
<li>secondWordRange</li>
<li>thirdWordRange</li>
<li>numberOfEntries</li>
<li>a sorted block of entries.</li>
<li>next and previous blocks in all 3 dimensions</li>
</ul>
"
327529,"<p>It's certainly doable, but you'd have a much easier time reading the C API docs and writing a go-between function in C.</p>

<p>Come to think of it, C is highly recommended, since it may be hard to tell which of the routines you're calling might be implemented as preprocessor macros.</p>
"
327558,"<pre><code>dict=[]  //it's not a dict, it's a list, the dictionary is dict={}
elem=[1,2,3]
dict.append(elem)
</code></pre>

<p>you can access the single element in this way:</p>

<pre><code>print dict[0] // 0 is the index
</code></pre>

<p>the output will be:</p>

<pre><code>[1, 2, 3]
</code></pre>
"
171396,"<p><a href=""http://www.blueskyonmars.com/projects/paver/"" rel=""nofollow"">Paver</a> is a rake/make work alike for python. I don't know if this is what your looking for, still haven't found anything equivalent to puppet for python...</p>
"
263727,"<p>Here's a Pythonic solution for building a DSL that you can use to compile and create byte code arrays.</p>

<ol>
<li><p>Write a simple module that makes your C# structures available to Python.  The goal is to define each C# class that users are allowed to work with (Composites or Commands or whatever) as a Python class.</p>

<p>Usually, this involves implementing a minimal set of methods with different conversions from C# types to native Python types and vice versa.</p></li>
<li><p>Write some nice demos showing how to use these Python class definitions to create their scripts.  You should be able to create things like this in Python.</p>

<pre><code>import * from someInterfaceModule
scenario= Scenario(
    Delay(1),
    Repeat( Range(10),
        DirectPower( 23, False, 150),
        Wait(3),
        DirectPower( 23, False, 150)
    )
)
scenario.compile()
</code></pre></li>
</ol>

<p>These are relatively simple classes to define.  Each class here be reasonably easy to implement as Python modules that directly call your base C# modules.</p>

<p>The syntax is pure Python with no additional parsing or lexical scanning required.</p>
"
263742,"<p>To add to S.Lott's comment, here's how you <a href=""http://www.redmountainsw.com/wordpress/archives/embedding-ironpython-c-calling-python-script"" rel=""nofollow"">eval a Python script from C# </a></p>
"
263851,"<p>Escalate priority, spawn (<code>fork (2)</code>) a separate process that will <code>wait (2)</code>, and drop priority in the main process.</p>
"
118132,"<p>You could do something like this:</p>

<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; pattern = re.compile(r'\s*(""[^""]*""|.*?)\s*,')
&gt;&gt;&gt; def split(line):
...  return [x[1:-1] if x[:1] == x[-1:] == '""' else x
...          for x in pattern.findall(line.rstrip(',') + ',')]
... 
&gt;&gt;&gt; split(""foo, bar, baz"")
['foo', 'bar', 'baz']
&gt;&gt;&gt; split('foo, bar, baz, ""blub blah""')
['foo', 'bar', 'baz', 'blub blah']
</code></pre>
"
118136,"<p>OLE Automation would probably be the easiest.  You have to consider formatting, because the text could look like this in the XML:</p>

<pre><code>&lt;b&gt;Looking &lt;i&gt;for&lt;/i&gt; this &lt;u&gt;phrase&lt;/u&gt;
</code></pre>

<p>There's no easy way to find that using a simple text scan.</p>
"
239422,"<p>I've been playing with ElementTree lately, lets see..</p>

<pre><code>&gt;&gt;&gt; from xml.etree import ElementTree
&gt;&gt;&gt; help(ElementTree.ElementPath)
&gt;&gt;&gt; root = ElementTree.fromstring(""""""
&lt;root&gt;&lt;child&gt;One&lt;/child&gt;&lt;child&gt;Two&lt;/child&gt;&lt;child&gt;Three&lt;/child&gt;&lt;/root&gt;
"""""")
&gt;&gt;&gt; ElementTree.ElementPath.findall(root, ""child"")
[&lt;Element child at 2ac98c0&gt;, &lt;Element child at 2ac9638&gt;, &lt;Element child at 2ac9518&gt;]
&gt;&gt;&gt; elements = ElementTree.ElementPath.findall(root, ""child"")
&gt;&gt;&gt; two = [x for x in elements if x.text == ""Two""]
&gt;&gt;&gt; two[0].text
'Two'
</code></pre>

<p>This is what you look for right? It says ElementPath has just limited xpath support though, but it does not say not support at all.</p>
"
239487,"<p>maybe the best way to install pywin32 is to place it in </p>

<p>(openofficedir)\program\python-core-2.3.4\lib\site-packages</p>

<p>it is easy  if you have a python 2.3 installation (with pywin installed) under </p>

<p>C:\python2.3 </p>

<p>move the C:\python2.3\Lib\site-packages\ to your</p>

<p>(openofficedir)\program\python-core-2.3.4\lib\site-packages</p>
"
240018,"<p>Unlike Haskell or ML, Python doesn't have built-in pattern-matching of structures.  The most Pythonic way of doing pattern-matching is with a try-except block:</p>

<pre><code>def recursive_sum(x):
    try:
        head, tail = x[0], x[1:]
        return head + recursive-sum(tail)
    except IndexError:  # empty list: [][0] raises IndexError
        return 0
</code></pre>

<p>Note that this only works with objects with slice indexing.  Also, if the function gets complicated, something in the body <em>after</em> the <code>head, tail</code> line might raise IndexError, which will lead to subtle bugs.  However, this does allow you to do things like:</p>

<pre><code>for frob in eggs.frob_list:
    try:
        frob.spam += 1
    except AttributeError:
        eggs.no_spam_count += 1
</code></pre>

<p>In Python, tail recursion is generally better implemented as a loop with an accumulator, i.e.:</p>

<pre><code>def iterative_sum(x):
    ret_val = 0
    for i in x:
        ret_val += i
    return ret_val
</code></pre>

<p>This is the one obvious, right way to do it 99% of the time.  Not only is it clearer to read, it's faster and it will work on things other than lists (sets, for instance).  If there's an exception waiting to happen in there, the function will happily fail and deliver it up the chain.</p>
"
241126,"<p>Very interesting, but not yet possible, AFAIK.  I have been looking for that option in Google Code with no success.</p>

<p>The only solution I can figure out is to install something in your machine that checks for changes in your SVN repository.</p>

<p>I'll be happy to hear about other approaches.</p>
"
171702,"<p>Maybe try subclassing the text object and in your class <code>__init__</code> method just call SetFont()? </p>

<p>Or, do something like:</p>

<pre><code>def f(C):
  x = C()
  x.SetFont(font) # where font is defined somewhere else
  return x
</code></pre>

<p>and then just decorate every text object you create with with it:</p>

<pre><code>text = f(wx.StaticText)
</code></pre>

<p>(of course, if <code>StaticText</code> constructor requires some parameters, it will require changing the first lines in <code>f</code> function definition).</p>
"
200637,"<p>Before doing it in C, you could try <a href=""http://numpy.scipy.org/"" rel=""nofollow"">numpy</a>. Perhaps you can turn your filtering into number crunching.</p>
"
170005,"<p>The problem you have is that</p>

<ul>
<li>your tcp socket handling isn't reading as much as it should</li>
<li>your http handling is not complete</li>
</ul>

<p>I recommend the following lectures:</p>

<ul>
<li><a href=""http://www.w3.org/Protocols/rfc2616/rfc2616.html"" rel=""nofollow"">rfc2616</a></li>
<li><a href=""http://www.kohala.com/start/unpv12e.html"" rel=""nofollow"">The sockets Networking API</a> by Stevens</li>
</ul>

<p>See the example below for a working http server that can process posts</p>

<pre><code>index = '''
&lt;html&gt;
    &lt;head&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;form action=""/"" method=""POST""&gt;
            &lt;textarea name=""foo""&gt;&lt;/textarea&gt;
            &lt;button type=""submit""&gt;post&lt;/button&gt;
        &lt;/form&gt;
        &lt;h3&gt;data posted&lt;/h3&gt;
        &lt;div&gt;
            %s
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
'''

bufsize = 4048
import socket
import re
from urlparse import urlparse

class Headers(object):
    def __init__(self, headers):
        self.__dict__.update(headers)

    def __getitem__(self, name):
        return getattr(self, name)

    def get(self, name, default=None):
        return getattr(self, name, default)

class Request(object):
    header_re = re.compile(r'([a-zA-Z-]+):? ([^\r]+)', re.M)

    def __init__(self, sock):
        header_off = -1
        data = ''
        while header_off == -1:
            data += sock.recv(bufsize)
            header_off = data.find('\r\n\r\n')
        header_string = data[:header_off]
        self.content = data[header_off+4:]

        lines = self.header_re.findall(header_string)
        self.method, path = lines.pop(0)
        path, protocol = path.split(' ')
        self.headers = Headers(
            (name.lower().replace('-', '_'), value)
            for name, value in lines
        )

        if self.method in ['POST', 'PUT']:
            content_length = int(self.headers.get('content_length', 0))
            while len(self.content) &lt;  content_length:
                self.content += sock.recv(bufsize)

        self.query = urlparse(path)[4]

acceptor = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
acceptor.setsockopt(
    socket.SOL_SOCKET,
    socket.SO_REUSEADDR,
    1,
)
acceptor.bind(('', 2501 ))
acceptor.listen(10)

if __name__ == '__main__':
    while True:
        sock, info = acceptor.accept()
        request = Request(sock)
        sock.send('HTTP/1.1 200 OK\n\n' + (index % request.content) )
        sock.close()
</code></pre>
"
170068,"<p>From <a href=""http://bugs.mymediasystem.org/?do=details&amp;task_id=676"" rel=""nofollow"">http://bugs.mymediasystem.org/?do=details&amp;task_id=676</a> suggests that Py_ssize_t was added in python 2.5, so it won't work (without some modifications) with python 2.4.</p>

<p>Either install/compile your own copy of python 2.5/2.6, or work out how to change P4Python, or look for an alternative python-perforce library.</p>
"
170501,"<p>It is a kind sort of denormalisation. Look at this <a href=""http://groups.google.com/group/django-developers/msg/248e53722acab49e"" rel=""nofollow"">pretty solution</a>. In-place composition field definition.</p>
"
327084,"<p>I'd have to recommend Akismet for it's ease-of-use and high accuracy.  With only a WordPress.com API key and an API call, you can determine if a given blob of text from a user is spammy.  I've been using the Akismet plugin for WordPress, which uses the same API, and have had stellar results with it for the last year or so.</p>

<p>Zend Framework has a great Akismet PHP class you can use independent of the rest of the framework, which should make integration pretty straightforward.  Documentation is quite thorough, as well.</p>
"
327141,"<p>Use curses.textpad</p>

<p><a href=""http://www.python.org/doc/2.4.1/lib/module-curses.textpad.html"" rel=""nofollow"">http://www.python.org/doc/2.4.1/lib/module-curses.textpad.html</a></p>
"
327254,"<p>You could try to use same dictionary, only one level deep.</p>

<pre><code>topDictionary[word1+delimiter+word2+delimiter+word3]
</code></pre>

<p>delimiter could be plain "" "". (or use (word1,word2,word3))</p>

<p>This would be easiest to implement.
I believe you will see a little improvement, if it is not enough...
...i'll think of something...</p>
"
41921,"<p>The python <a href=""http://www.python.org/doc/current/lib/module-inspect.html"" rel=""nofollow"">inspect</a> module makes this a lot easier and cleaner. </p>
"
266145,"<p>One of the things I hate about web based UIs is the fact that they run inside another window. Meaning, you have controls -- maybe dozens of them -- that have nothing to do with your application. From a usability point of view this can be confusing though most of us have adapted by ""tuning out"" the extra stuff. </p>

<p>As I look at my browser window as I type this, the window is perhaps 12 inches tall, but the window in which I type is only maybe 3 inches. And out of that 12 inches overall, perhaps two full inches are taken up with browser toolbars, tabs, rows of bookmarks and the statusbar, none of which have anything to do with the web app I'm interacting with. There's a lot of wasted space (the edit window isn't as wide as the window as a whole, for example), space filled with stuff I don't need, etc. Some of the most fundamental controls (back button, I'm looking at you) can completely break poorly designed web applications.</p>

<p>Not to mention the fact that if I type a sufficiently long response I now end up with two sets of scrollbars. stackoverflow.com partially addresses that by giving me a resizable text area but I still have to interact with the inner scrollbar to scroll the text I'm editing, then scroll the whole window up or down to access the app controls at the top or bottom of the editing window.</p>

<p>All in all, a web based application just can't compare to the usability of a desktop application. For me, then, the question simply becomes ""are you more interested in usability, or in making your (as the developer) life easier"".</p>

<p>If you want usability, go with a desktop application, hands down. If you're concerned with deployment and support a web app is something to consider, but there are still many easy ways to deploy desktop apps, including creating apps that can update themselves over the net at runtime.</p>
"
266509,"<p>I've worked with <a href=""http://en.wikipedia.org/wiki/Django_%28web_framework%29"" rel=""nofollow"">Django</a> using only the included server in the <code>manager.py</code> script and have not had any trouble moving to a production environment.</p>

<p>If you put your application in a host that does the environment configuration for you (like <a href=""https://www.webfaction.com/"" rel=""nofollow"">WebFaction</a>) you should not have problems moving from development to production.</p>
"
136929,"<p>I've downloaded Python 2.5 from Python.org and It does not contains pydoc.</p>

<pre><code>Directorio de C:\Python25

9/23/2008  10:45 PM    &lt;DIR&gt;          .
9/23/2008  10:45 PM    &lt;DIR&gt;          ..
9/23/2008  10:45 PM    &lt;DIR&gt;          DLLs
9/23/2008  10:45 PM    &lt;DIR&gt;          Doc
9/23/2008  10:45 PM    &lt;DIR&gt;          include
9/25/2008  06:34 PM    &lt;DIR&gt;          Lib
9/23/2008  10:45 PM    &lt;DIR&gt;          libs
2/21/2008  01:05 PM            14,013 LICENSE.txt
2/21/2008  01:05 PM           119,048 NEWS.txt
2/21/2008  01:11 PM            24,064 python.exe
2/21/2008  01:12 PM            24,576 pythonw.exe
2/21/2008  01:05 PM            56,354 README.txt
9/23/2008  10:45 PM    &lt;DIR&gt;          tcl
9/23/2008  10:45 PM    &lt;DIR&gt;          Tools
2/21/2008  01:11 PM             4,608 w9xpopen.exe
          6 archivos        242,663 bytes
</code></pre>

<p>But it has ( the substitute I guess ) pydocgui...</p>

<pre><code>C:\Python25&gt;dir Tools\Scripts\pydocgui.pyw

10/28/2005  07:06 PM               222 pydocgui.pyw
           1 archivos            222 bytes
</code></pre>

<p>This launches a webserver and shows what I was looking for. All the modules plus all the classes that come with the platform.</p>

<p>The Doc dir contains the same as in:</p>

<p><a href=""http://docs.python.org/"" rel=""nofollow"">http://docs.python.org/</a></p>

<p>Thanks a lot for guide me  to pydoc.</p>
"
118165,"<p>That regular expression matches here, no idea what you are doing wrong:</p>

<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; x = re.compile(r'(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|'
... r'2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]'
... r'[0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)')
&gt;&gt;&gt; x.match(""127.0.0.1"")
&lt;_sre.SRE_Match object at 0x5a8860&gt;
&gt;&gt;&gt; x.match(""127.255.0.1"")
&lt;_sre.SRE_Match object at 0x5a8910&gt;
&gt;&gt;&gt; x.match(""127.255.0.0"")
&lt;_sre.SRE_Match object at 0x5a8860&gt;
</code></pre>

<p>Please note that <code>preg_match</code> translates to <code>re.search</code> in Python and not <code>re.match</code>.  <code>re.match</code> is for useful for lexing because it's anchored.</p>
"
118180,"<p><a href=""http://www.regular-expressions.info/php.html"" rel=""nofollow"">PHP</a> uses 3 different flavors of regex, while python uses only one. I don't code in python, so I make no expert claims on how it uses REGEX. <a href=""http://oreilly.com/catalog/9781565922570/"" rel=""nofollow"">O'Reilly Mastering Regular Expressions</a> is a great book, as most of their works are.</p>
"
118227,"<p>Are these other applications running in another address space? If so, you'll need to use an interprocess communication library like <a href=""http://www.freedesktop.org/wiki/Software/dbus"" rel=""nofollow"">D-BUS</a>.</p>

<p>If you're just sending signals in the same process, try <a href=""http://pypi.python.org/pypi/PyDispatcher/2.0.1"" rel=""nofollow"">PyDispatcher</a></p>
"
264586,"<p>XML-RPC can't pass objects. The set of parameter types is limited (as jakber says).</p>
"
42050,"<p>A list can always replace a tuple, with respect to functionality (except, apparently, as keys in a dict). However, a tuple can make things go faster. The same is true for, for example, immutable strings in Java -- when will you ever need to be unable to alter your strings? Never!</p>

<p>I just read a decent discussion on limiting what you can do in order to make better programs; <a href=""http://weblog.raganwald.com/2007/03/why-why-functional-programming-matters.html"" rel=""nofollow"">Why Why Functional Programming Matters Matters</a></p>
"
42055,"<p>A tuple is useful for storing multiple values.. As you note a tuple is just like a list that is immutable - e.g. once created you cannot add/remove/swap elements.</p>

<p>One benefit of being immutable is that because the tuple is fixed size it allows the run-time to perform certain optimizations. This is particularly beneficial when a tupple is used in the context of a return value or a parameter to a function.</p>
"
203769,"<p>What is your question exactly? </p>

<p>What happens when you do receive on a socket is that the current available data in the socket buffer is immediately returned. If you give receive (or read, I guess), a huge buffer size, such as 40000, it'll likely never return that much data at once. If you give it a tiny buffer size like 100, then it'll return the 100 bytes it has immediately and still have more available. Either way, you're not imposing a limit on how much data the client is sending you.</p>
"
168705,"<p>What's your goal, here?  Is <code>tempfile.TemporaryFile</code> inappropriate for your purposes?</p>
"
169395,"<p>Look at <a href=""http://www.python.org/doc/2.5.2/lib/module-zipfile.html"" rel=""nofollow"">zipfile</a> for compressing a folder and it's subfolders.</p>

<p>Look at <a href=""http://www.python.org/doc/2.5.2/lib/module-smtplib.html"" rel=""nofollow"">smtplib</a> for an email client.</p>
"
43414,"<p>I believe that Django models does not support composite primary keys (see <a href=""http://docs.djangoproject.com/en/dev/topics/db/models/#automatic-primary-key-fields"" rel=""nofollow"">documentation</a>). But perhaps you can use SQLAlchemy in Django? A <a href=""http://www.google.com/search?q=sqlalchemy+django"" rel=""nofollow"">google search</a> indicates that you can. I have not used Django, so I don't know.</p>

<p>I suggest you take a look at:</p>

<ul>
<li><a href=""http://toscawidgets.org/"" rel=""nofollow"">ToscaWidgets</a></li>
<li><a href=""http://code.google.com/p/dbsprockets/"" rel=""nofollow"">DBSprockets</a>, including <a href=""http://code.google.com/p/dbsprockets/wiki/DBMechanic"" rel=""nofollow"">DBMechanic</a></li>
<li><a href=""http://www.checkandshare.com/catwalk/"" rel=""nofollow"">Catwalk</a>. Catwalk is an application for TurboGears 1.0 that uses SQLObject, not SQLAlchemy. Also check out this <a href=""http://www.checkandshare.com/blog/?p=41"" rel=""nofollow"">blog post</a> and <a href=""http://www.checkandshare.com/CATWALK2/lview/index.html"" rel=""nofollow"">screencast</a>.</li>
<li><a href=""http://docs.turbogears.org/1.0/DataController"" rel=""nofollow"">FastData</a>. Also uses SQLObject.</li>
<li><a href=""http://code.google.com/p/formalchemy/"" rel=""nofollow"">formalchemy</a></li>
<li><a href=""http://rumdemo.toscawidgets.org/"" rel=""nofollow"">Rum</a></li>
</ul>

<p>I do not have any deep knowledge of any of the projects above. I am just in the process of trying to add something similar to one of my own applications as what the original question mentions. The above list is simply a list of interesting projects that I have stumbled across.</p>

<p>As to web application frameworks for Python, I recommend TurboGears 2. Not that I have any experience with any of the other frameworks, I just like TurboGears...</p>

<p>If the original question's author finds a solution that works well, please update or answer this thread.</p>
"
326949,"<p>Apparently <a href=""http://www.reportlab.org/pyrxp.html"" rel=""nofollow"">PyRXP</a> is really fast.</p>

<p>They claim it is the fastest parser - but cElementTree isn't in their stats list.</p>
"
201556,"<p>Does calling urlib2.open first followed by urllib.open have the same results? Just wondering if the first call to open is causing the http server to get busy causing the timeout?</p>
"
201712,"<p>I know this answer sucks, but ""it works fine on my machine""
(WinXP with Python 2.5.2)</p>
"
201754,"<p>I don't know what's going on, but you may find this helpful in figuring it out:</p>

<pre><code>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; urllib2.urlopen('http://mit.edu').read()[:10]
'&lt;!DOCTYPE '
&gt;&gt;&gt; urllib2._opener.handlers[1].set_http_debuglevel(100)
&gt;&gt;&gt; urllib2.urlopen('http://mit.edu').read()[:10]
connect: (mit.edu, 80)
send: 'GET / HTTP/1.1\r\nAccept-Encoding: identity\r\nHost: mit.edu\r\nConnection: close\r\nUser-Agent: Python-urllib/2.5\r\n\r\n'
reply: 'HTTP/1.1 200 OK\r\n'
header: Date: Tue, 14 Oct 2008 15:52:03 GMT
header: Server: MIT Web Server Apache/1.3.26 Mark/1.5 (Unix) mod_ssl/2.8.9 OpenSSL/0.9.7c
header: Last-Modified: Tue, 14 Oct 2008 04:02:15 GMT
header: ETag: ""71d3f96-2895-48f419c7""
header: Accept-Ranges: bytes
header: Content-Length: 10389
header: Connection: close
header: Content-Type: text/html
'&lt;!DOCTYPE '
</code></pre>
"
138090,"<p>For simple Python programs, you probably don't need to use eggs. Distributing the raw .py files should suffice; it's like distributing source files for GNU/Linux. You can also use the various OS ""packagers"" (like py2exe or py2app) to create .exe, .dmg, or other files for different operating systems.</p>

<p>More complex programs, e.g. Django, pretty much require eggs due to the various modules and dependencies required.</p>
"
138240,"<p>You can set the <em>environment variable</em> <strong>PYTHONDOCS</strong> to point to where the python documentation is installed.</p>

<p>On my system, it's in <em>/usr/share/doc/python2.5</em></p>

<p>So you can define this variable in your <em>shell profile</em> or somewhere else depending on your system:</p>

<blockquote>
  <p>export PYTHONDOCS=/usr/share/doc/python2.5</p>
</blockquote>

<p>Now, if you open an interractive python console, you can call the help system. For exemple:</p>

<blockquote>
<pre><code>&gt;&gt;&gt; help(Exception)
&gt;&gt;&gt; Help on class Exception in module exceptions:

&gt;&gt;&gt; class Exception(BaseException)
&gt;&gt;&gt;  |  Common base class for all non-exit exceptions.
&gt;&gt;&gt;  |  
&gt;&gt;&gt;  |  Method resolution order:
&gt;&gt;&gt;  |      Exception
</code></pre>
</blockquote>

<p>Documentation is here:</p>

<p><a href=""https://docs.python.org/library/pydoc.html"" rel=""nofollow"">https://docs.python.org/library/pydoc.html</a></p>
"
238293,"<p>Solved it with the help of Vinko.</p>

<p>I realised that getting unicode range is plain dumb. So I'll do this:</p>

<pre><code>symbols = re.escape(''.join([chr(i) for i in xrange(33, 127) if not chr(i).isalnum()]))
symnums = re.escape(''.join([chr(i) for i in xrange(33, 127) if not chr(i).isalnum()]))

t_IDENTIFIER = ""[^%s](\\.|[^%s])*"" % (symnums, symbols)
</code></pre>

<p>I don't know about unicode character classses. If this unicode stuff starts getting too complicated, I can just put the original one in place. UTF-8 support still ensures the support is on at the STRING tokens, which is more important.</p>

<p>Edit: On other hand, I start understanding why there's not much unicode support in programming languages.. This is an ugly hack, not a satisfying solution.</p>
"
117433,"<p>In this example, you can simply hand over functions as objects to the methods in <code>C1</code>:</p>

<pre><code>&gt;&gt;&gt; class C1(object):
&gt;&gt;&gt;    def eval(self, x):
&gt;&gt;&gt;        x()
&gt;&gt;&gt;
&gt;&gt;&gt; def f2(): print ""go f2""
&gt;&gt;&gt; c = C1()
&gt;&gt;&gt; c.eval(f2)
go f2
</code></pre>

<p>In Python, you can pass functions and classes to other methods and invoke/create them there.</p>

<p>If you want to actually evaluate a code string, you have to specify the environment, as already mentioned by Thomas.</p>

<p>Your module from above, slightly changed:</p>

<pre><code>## File 1
def f1():  print ""go f1!""

class C1(object):
    def do_eval(self, x, e_globals = globals(), e_locals = locals()):
        eval(x, e_globals, e_locals)
</code></pre>

<p>Now, in the interactive interpreter:</p>

<pre><code>&gt;&gt;&gt; def f2():
&gt;&gt;&gt;    print ""go f2!""
&gt;&gt;&gt; from file1 import *    # 1
&gt;&gt;&gt; C1().do_eval(""f2()"")   # 2
NameError: name 'f2' is not defined

&gt;&gt;&gt; C1().do_eval(""f2()"", globals(), locals()) #3
go f2!
&gt;&gt;&gt; C1().do_eval(""f1()"", globals(), locals()) #4
go f1!
</code></pre>

<h2>Some annotations</h2>

<ol>
<li>Here, we insert all objects from <code>file1</code> into this module's namespace</li>
<li><code>f2</code> is not in the namespace of <code>file1</code>, therefore we get a <code>NameError</code></li>
<li>Now we pass the environment explictly, and the code can be evaluated</li>
<li><code>f1</code> is in the namespace of this module, because we imported it</li>
</ol>

<p><strong>Edit</strong>: Added code sample on how to explicitly pass environment for <code>eval</code>.</p>
"
117819,"<p><p><a href=""http://www.freewisdom.org/projects/python-markdown/"" rel=""nofollow"">Markdown in python</a> is a python implementation of the <a href=""http://daringfireball.net/projects/markdown/"" rel=""nofollow"">perl based markdown</a> utility.</p>

<p><p>Markown converts various forms of structured text to valid html, and one of the supported forms is just plain ascii. Use is pretty <a href=""http://www.freewisdom.org/projects/python-markdown/Command_Line"" rel=""nofollow"">straight forward</a>.</p>

<pre><code>python markdown.py input_file.txt &gt; output_file.html
</code></pre>

<p>Markdown can be easily <a href=""http://www.freewisdom.org/projects/python-markdown/Using_as_a_Module"" rel=""nofollow"">called as a module</a> too:</p>

<pre><code>import markdown
html = markdown.markdown(your_text_string)
</code></pre>
"
117994,"<p>The empty Record class and the free-floating function that (generally) applies to an individual Record is a hint that you haven't designed your class properly.</p>

<pre><code>class Record( object ):
    """"""Assuming rtda and pnl must exist.""""""
    def __init__( self ):
        self.da= 0
        self.rt= 0
        self.rtda= 0 # or whatever
        self.pnl= None # 
        self.sink = None # Not clear what this is
    def setPnl( self, node_prices ):
        # fill RT and DA prices from the hash retrieved above
        # calculate dependent values: RT-DA and PNL
</code></pre>

<p>Now, your <code>calculate_pnl( records, node_prices )</code> is simpler and uses the object properly.</p>

<pre><code>def calculate_pnl( records, node_prices ):
    for record in records:
        record.setPnl( node_prices )
</code></pre>

<p>The point isn't to trivially refactor the code in small ways.</p>

<p>The point is this:  <strong>A Class Encapsulates Responsibility</strong>.</p>

<p>Yes, an empty-looking class <em>is</em> usually a problem.  It means the responsibilities are scattered somewhere else.</p>

<p>A similar analysis holds for the collection of records.  This is more than a simple list, since the collection -- as a whole -- has operations it performs.</p>

<p>The ""Request-Transform-Render"" isn't quite right.  You have a Model (the Record class).  Instances of the Model get built (possibly because of a Request.)  The Model objects are responsible for their own state transformations and updates.  Perhaps they get displayed (or rendered) by some object that examines their state.</p>

<p>It's that ""Transform"" step that often violates good design by scattering responsibility all over the place.  ""Transform"" is a hold-over from non-object design, where responsibility was a nebulous concept.</p>
"
266010,"<p>Just splitting on whitespace is never going to work. But if you can make some assumptions on the data it could be made to work.</p>

<p>Some assumptions I had in mind:</p>

<ul>
<li><code>SERVER</code>, <code>SERVERKEY</code> and <code>COMMAND</code> not containing any spaces: <code>\S+</code></li>
<li><code>FOLDERPATH</code> beginning with a slash: <code>/.*?</code></li>
<li><code>RETENTION</code> being a number: <code>\d+</code></li>
<li><code>TRANSFERMODE</code> not containing any spaces: <code>\S+</code></li>
<li><code>OUTPUTPATH</code> beginning with a drive and ending with a slash: <code>[A-Z]:\\.*?\\</code></li>
<li><code>LOGTO</code> either being the word ""<code>NO</code>"", or a path beginning with a drive: <code>[A-Z]:\\.*?</code></li>
<li><code>MAXSIZE</code> and <code>OFFSET</code> being a number: <code>\d+</code></li>
</ul>

<p>Putting it all together:</p>

<pre><code>^\s*
(?P&lt;SERVER&gt;\S+)\s+
(?P&lt;SERVERKEY&gt;\S+)\s+
(?P&lt;COMMAND&gt;\S+)\s+
(?P&lt;FOLDERPATH&gt;/.*?)\s+   # Slash not that important, but should start with non-whitespace
(?P&lt;RETENTION&gt;\d+)\s+
(?P&lt;TRANSFERMODE&gt;\S+)\s+
(?P&lt;OUTPUTPATH&gt;[A-Z]:\\.*?\\)\s+   # Could also support network paths
(?P&lt;LOGTO&gt;NO|[A-Z]:\\.*?)
(?:
  \s+(?P&lt;MAXSIZE&gt;\d+)
  (?:
    \s+(?P&lt;OFFSET&gt;\d+)
  )?
)?
\s*$
</code></pre>

<p>In one line:</p>

<pre><code>^\s*(?P&lt;SERVER&gt;\S+)\s+(?P&lt;SERVERKEY&gt;\S+)\s+(?P&lt;COMMAND&gt;\S+)\s+(?P&lt;FOLDERPATH&gt;/.*?)\s+(?P&lt;RETENTION&gt;\d+)\s+(?P&lt;TRANSFERMODE&gt;\S+)\s+(?P&lt;OUTPUTPATH&gt;[A-Z]:\\.*?\\)\s+(?P&lt;LOGTO&gt;NO|[A-Z]:\\.*?)(?:\s+(?P&lt;MAXSIZE&gt;\d+)(?:\s+(?P&lt;OFFSET&gt;\d+))?)?\s*$
</code></pre>

<p>Testing:</p>

<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; p = re.compile(r'^(?P&lt;SERVER&gt;\S+)\s+(?P&lt;SERVERKEY&gt;\S+)\s+(?P&lt;COMMAND&gt;\S+)\s+(?P&lt;FOLDERPATH&gt;/.*?)\s+(?P&lt;RETENTION&gt;\d+)\s+(?P&lt;TRANSFERMODE&gt;\S+)\s+(?P&lt;OUTPUTPATH&gt;[A-Z]:\\.*?\\)\s+(?P&lt;LOGTO&gt;NO|[A-Z]:\\.*?)(?:\s+(?P&lt;MAXSIZE&gt;\d+)(?:\s+(?P&lt;OFFSET&gt;\d+))?)?\s*$',re.M)
&gt;&gt;&gt; data = r""""""loveserver love copy /muffin* 20 bin C:\Puppies\ NO 256 300
... loveserver love copy /muffin* 20 bin C:\Puppies\ NO 256
... loveserver love copy /hats* 300 ascii C:\Puppies\no\ C:\log\love.log 256""""""
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; for match in p.finditer(data):
...   print pprint.pprint(match.groupdict())
...
{'COMMAND': 'copy',
 'FOLDERPATH': '/muffin*',
 'LOGTO': 'NO',
 'MAXSIZE': '256',
 'OFFSET': '300',
 'OUTPUTPATH': 'C:\\Puppies\\',
 'RETENTION': '20',
 'SERVER': 'loveserver',
 'SERVERKEY': 'love',
 'TRANSFERMODE': 'bin'}
{'COMMAND': 'copy',
 'FOLDERPATH': '/muffin*',
 'LOGTO': 'NO',
 'MAXSIZE': '256',
 'OFFSET': None,
 'OUTPUTPATH': 'C:\\Puppies\\',
 'RETENTION': '20',
 'SERVER': 'loveserver',
 'SERVERKEY': 'love',
 'TRANSFERMODE': 'bin'}
{'COMMAND': 'copy',
 'FOLDERPATH': '/hats*',
 'LOGTO': 'C:\\log\\love.log',
 'MAXSIZE': '256',
 'OFFSET': None,
 'OUTPUTPATH': 'C:\\Puppies\\no\\',
 'RETENTION': '300',
 'SERVER': 'loveserver',
 'SERVERKEY': 'love',
 'TRANSFERMODE': 'ascii'}
&gt;&gt;&gt;
</code></pre>
"
201756,"<p>urllib.urlopen() throws the following request at the server:</p>

<pre><code>GET / HTTP/1.0
Host: 127.0.0.1
User-Agent: Python-urllib/1.17
</code></pre>

<p>while urllib2.urlopen() throws this:</p>

<pre><code>GET / HTTP/1.1
Accept-Encoding: identity
Host: 127.0.0.1
Connection: close
User-Agent: Python-urllib/2.5
</code></pre>

<p>So, your server either doesn't understand HTTP/1.1 or the extra header fields.</p>
"
47264,"<p>You can use different versions of python on each machine. </p>

<p>Coding something new, I would not use anything less than python2.5. You can do <code>apt-get install python2.5</code> on stock debian stable. </p>

<p>For windows, don't really worry about it. It's very easy to install the python2.5 msi. </p>

<p>If the users can't be bothered to do that, you can deploy an executable with py2exe (so simple) and build an installer with inno setup (again simple) then it will behave like a standard windows application and will use its own python dlls, so no need to have python installed. </p>

<p>Like Peter said: keep in mind the transition to 3.0 but don't build on it yet.</p>
"
44403,"<p>Given the module foo.py</p>

<pre><code>class foo(object): pass
class bar(foo): pass
class baz(foo): pass

class grar(Exception): pass

def find_subclasses(module, clazz):
    for name in dir(module):
        o = getattr(module, name)

        try: 
             if issubclass(o, clazz):
             yield name, o
        except TypeError: pass

&gt;&gt;&gt; import foo
&gt;&gt;&gt; list(foo.find_subclasses(foo, foo.foo))
[('bar', &lt;class 'foo.bar'&gt;), ('baz', &lt;class 'foo.baz'&gt;), ('foo', &lt;class 'foo.foo'&gt;)]
&gt;&gt;&gt; list(foo.find_subclasses(foo, object))
[('bar', &lt;class 'foo.bar'&gt;), ('baz', &lt;class 'foo.baz'&gt;), ('foo', &lt;class 'foo.foo'&gt;), ('grar', &lt;class 'foo.grar'&gt;)]
&gt;&gt;&gt; list(foo.find_subclasses(foo, Exception))
[('grar', &lt;class 'foo.grar'&gt;)]
</code></pre>
"
44638,"<p>OK, rails is actually pretty good, but there is just a little bit too much magic going on in there (from the Ruby world I would much prefer merb to rails). I personally use Pylons, and am pretty darn happy. I'd say (compared to django), that pylons allows you to interchange ints internal parts easier than django does. The downside is that you will have to write more stuff all by youself (like the basic CRUD). </p>

<p>Pros of using a framework:</p>

<ol>
<li>get stuff done quickly (and I mean lighning fast once you know the framework)</li>
<li>everything is compying to standards (which is probably not that easy to achieve when rolling your own)</li>
<li>easier to get something working (lots of tutorials) without reading gazillion articles and docs</li>
</ol>

<p>Cons:</p>

<ol>
<li>you learn less</li>
<li>harder to replace parts (not that much of an issue in pylons, more so with django)</li>
<li>harder to tweak some low-level stuff (like the above mentioned SQLs)</li>
</ol>

<p>From that you can probably devise what they are good for :-) Since you get all the code it is possible to tweak it to fit even the most bizzare situations (pylons supposedly work on the Google app engine now...).</p>
"
326018,"<p>The time module is not built by default in Python, if you build from a source distribution you need to explicitly enable all the modules you want to compile. </p>

<p>Open up Modules/Setup.dist in the python source tree and comment out the line which says:</p>

<pre>
#time timemodule.c
</pre>

<p>To enable the build of time module. Also remember that you need to recompile Python for this to take an effect.</p>
"
326046,"<p>If the database have a DBA that isn't you, you may not be allowed to use a database-backed session (it being a front-end matter only). Until django supports easily merging data from several databases, so that you can have frontend-specific stuff like sessions and user-messages (the messages in django.contrib.auth are also stored in the db) in a separate db, you need to keep this in mind.</p>
"
326562,"<p>I humbly recommend <a href=""http://www.lua.org"" rel=""nofollow"">Lua</a>, not only because it's a great, fast language, already integrated with web servers, but also because you can then exploit <a href=""http://osbf-lua.luaforge.net/"" rel=""nofollow"">OSBF-Lua</a>, an existing spam filter that has won spam-filtering competitions for several years in a row.  Fidelis Assis and I have put in a lot of work trying to generalize the model beyond email, and we'd be delighted to work with you on integrating it with your app, which is what Lua was designed for.</p>

<p>As for scaling, in training mode we process hundreds of emails per second on a 2006 machine, so that should work out pretty well even for a busy web site.</p>

<p>We'd need to work with you on classifying stuff without mail headers, but I've been pushing in that direction already.  For more info please write nr@cs.tufts.edu. (Yes, I <em>want</em> people to send me spam.  It's for research!)</p>
"
202838,"<p>The text referred to says that you must specify the realm name as ""trac"", not ""<strong>T</strong>rac"", but I have no chance of testing whether that makes any difference, sorry.</p>
"
203001,"<p>The built-in <a href=""http://www.python.org/doc/2.5.2/lib/module-sqlite3.html"" rel=""nofollow"">sqlite3</a> module would probably be far simpler than most alternatives, and gets you ready to update to a full RDBMS should you ever want or need to.</p>
"
203332,"<p>You should also take a look at <a href=""http://mdp.cti.depaul.edu/"" rel=""nofollow"">web2py</a> which has good docs and is a very nice framework for building wep apps.</p>
"
267651,"<p>And so it goes, according to this guy, you need some oil.... and it works like a charm</p>

<p><a href=""http://www.oooforum.org/forum/viewtopic.phtml?p=304263#304263"" rel=""nofollow"">http://www.oooforum.org/forum/viewtopic.phtml?p=304263#304263</a></p>

<p>include this lib C:\OpenOffice_24\program\classes\unoil.jar</p>
"
267676,"<p>It depends largely on the effort you want to expend on this, but the basic outline of an easy way. Would be to load an image of an arrow, and use a drawing library to color and rotate it in the direction you want to point(or draw it using shapes/curves).</p>

<p>Finally to actually animate it interpolate between the coordinates based on time.</p>

<p>If its just for a presentation though, I would use Macromedia Flash, or a similar animation program.(would do the same as above but you don't need to program anything)</p>
"
267747,"<p>I created this exact data structure for a project once.  I implemented it naively, as you suggested.  I did make two immensely helpful optimizations, which may or may not be feasible for you, depending on the size of your data:</p>

<ul>
<li>Memoizing the hash lookups</li>
<li>Pre-seeding the the memoization table (not sure what to call this... warming up the cache?)</li>
</ul>

<p>To avoid the problem of multiple keys matching the input, I gave each regex key a priority and the highest priority was used.</p>
"
267888,"<p>If you are adventurous use OpenGL :)</p>

<p>You can draw bezier curves in 3d space on top of a textured plane (earth map), you can specify a thickness for them and you can draw a point (small cone) at the end. It's easy and it looks nice, problem is learning the basics of OpenGL if you haven't used it before but that would be fun and probably useful if your in to programing graphics.</p>

<p>You can use OpenGL from python either with <a href=""http://pyopengl.sourceforge.net/"" rel=""nofollow"">pyopengl</a> or <a href=""http://www.pyglet.org/"" rel=""nofollow"">pyglet</a>.</p>

<p>If you make the animation this way you can capture it to an avi file (using <a href=""http://www.techsmith.com/camtasia.asp"" rel=""nofollow"">camtasia</a> or something similar) that can be put onto a presentation slide.</p>
"
267992,"<p>For modules paths, a common practice is putting them in <em>.pth</em> files, as <a href=""http://docs.python.org/library/site.html#module-site"" rel=""nofollow"">documented here</a>. The <em>site</em> module provides a space for Site-specific configuration hooks, you can use it to tailor your environment.</p>
"
116974,"<p>Have you considered using an ORM? <a href=""http://www.sqlalchemy.org/features.html"" rel=""nofollow"" title=""SQL Alchemy features"">SQLAlchemy</a> is pretty good, and <a href=""http://elixir.ematia.de/trac/wiki"" rel=""nofollow"" title=""Elixir Wiki"">Elixir</a> makes it beautiful. It can really reduce the ammount of boilerplate code needed to deal with databases. Also, a lot of the <em>gotchas</em> mentioned have already shown up and the SQLAlchemy developers dealt with them.</p>
"
117092,"<p>I don't know Python, but for windows the underlying api is <a href=""http://msdn.microsoft.com/en-us/library/ms724435(VS.85).aspx"" rel=""nofollow"">GetUserNameEx</a>, I assume you can call that in Python if os.environ.get( ""USERNAME"" ) doesn't tell you everything you need to know.</p>
"
117095,"<p>In my previous work we had real genius guy on deployment duties, he deployed application (Python, SQL, Perl and Java code) as set of deb files built for Ubuntu. Unfortunately now, I have no such support. We are deploying apps manually to virtualenv-ed environments with separate nginx configs for FastCGI. We use <a href=""http://www.blueskyonmars.com/projects/paver/"" rel=""nofollow"">paver</a> to deploy to remote servers.  It's painful, but it works.</p>
"
117174,"<p>Functions are always executed in the scope they are defined in, as are methods and class bodies. They are never executed in another scope. Because importing is just another assignment statement, and everything in Python is a reference, the functions, classes and modules don't even know where they are imported to.</p>

<p>You can do two things: explicitly pass the 'environment' you want them to use, or use stack hackery to access their caller's namespace. The former is vastly preferred over the latter, as it's not as implementation-dependent and fragile as the latter.</p>

<p>You may wish to look at the string.Template class, which tries to do something similar.</p>
"
117176,"<p>If you do not care for actual discussions (which tend to go offtopic and do not offer authoritative response), you can choose some library that will make your tast easier. I'd recomment taking a look at <a href=""http://www.livinglogic.de/Python/Download.html"" rel=""nofollow"">ll-xist</a>, this library contains large amount of life-saving code, like cron jobs helper, daemon framework, and (what is not interesting to you, but is really great) <em>object-oriented XSL</em> (ll-xist itself).</p>
"
117256,"<p>Try 4.0/100</p>
"
117257,"<p>A simple route 4 / 100.0 </p>

<p>or</p>

<p>4.0 / 100</p>
"
138054,"<p>Yes, you can do this...</p>

<pre><code>typeof(YourObjectType).GetProperty(""PropertyName"").GetValue(instanceObjectToGetPropFrom, null);
</code></pre>
"
238185,"<p>there was a reciepe in the python cookbook  to do this. i cant seem to find it now but here is the code (i modified it slightly)</p>

<pre><code>
def peel(iterable,result=tuple):
    '''Removes the requested items from the iterable and stores the remaining in a tuple
    >>> x,y,z=peel('test')
    >>> print repr(x),repr(y),z
    't' 'e' ('s', 't')
    '''
    def how_many_unpacked():
    	import inspect,opcode
    	f = inspect.currentframe().f_back.f_back
    	if ord(f.f_code.co_code[f.f_lasti])==opcode.opmap['UNPACK_SEQUENCE']:
    		return ord(f.f_code.co_code[f.f_lasti+1])
    	raise ValueError(""Must be a generator on RHS of a multiple assignment!!"")
    iterator=iter(iterable)
    hasItems=True
    amountToUnpack=how_many_unpacked()-1
    next=None
    for num in xrange(amountToUnpack):
    	if hasItems:		
    		try:
    			next = iterator.next()
    		except StopIteration:
    			next = None
    			hasItems = False
    	yield next
    if hasItems:
    	yield result(iterator)
    else:
    	yield None
</code></pre>

<p>however you should note that that only works when using an assignment unpack because of the way it inespects the previous frame... still its quite useful.</p>
"
239305,"<p>One option would be to put the results into a set object:</p>

<p><a href=""http://www.python.org/doc/2.6/library/sets.html#sets.Set"" rel=""nofollow"">http://www.python.org/doc/2.6/library/sets.html#sets.Set</a></p>

<p>The resulting set will consist only of the distinct values passed into it.</p>

<p>Failing that, building up a new list containing only the unique objects would work. Something like:</p>

<pre><code>unique_results = []
for obj in user:
    if obj not in unique_results:
        unique_results.append(obj)
</code></pre>

<p>That <code>for</code> loop can be condensed into a list comprehension as well.</p>
"
203679,"<p>You might want to look at <a href=""http://karrigell.sourceforge.net/"" rel=""nofollow"">Karrigell</a>. It has multiple options for programming syntax, e.g. pure Python, pure HTML w/ Python scripts, combination, etc. I don't know how well it scales because I haven't used it for several years but it's good for getting your feet wet w/ web frameworks.</p>
"
204340,"<p>When you have a well-written library, which is sometimes case in python, you ought just import it and use it as it. Well-written library tends to take life and language of its own, resulting in pleasant-to-read -code, where you rarely reference the library. When a library is well-written, you ought not need renaming or anything else too often.</p>

<pre><code>import gat

node = gat.Node()
child = node.children()
</code></pre>

<p>Sometimes it's not possible to write it this way, or then you want to lift down things from library you imported.</p>

<pre><code>from gat import Node, SubNode

node = Node()
child = SubNode(node)
</code></pre>

<p>Sometimes you do this for lot of things, if your import string overflows 80 columns, It's good idea to do this:</p>

<pre><code>from gat import (
    Node, SubNode, TopNode, SuperNode, CoolNode,
    PowerNode, UpNode
)
</code></pre>

<p>The best strategy is to keep all of these imports on the top of the file. Preferrably ordered alphabetically, import -statements first, then from import -statements.</p>

<p>Now I tell you why this is the best convention.</p>

<p>Python could perfectly have had an automatic import, which'd look from the main imports for the value when it can't be found from global namespace. But this is not a good idea. I explain shortly why. Aside it being more complicated to implement than simple import, programmers wouldn't be so much thinking about the depedencies and finding out from where you imported things ought be done some other way than just looking into imports.</p>

<p>Need to find out depedencies is one reason why people hate ""from ... import *"". Some bad examples where you need to do this exist though, for example opengl -wrappings.</p>

<p>So the import definitions are actually valuable as defining the depedencies of the program. It is the way how you should exploit them. From them you can quickly just check where some weird function is imported from.</p>
"
167472,"<p>I'd imagine that the terminal emulator is eating the keystroke as a control code. Maybe see if it has a config file you can mess around with?</p>
"
168009,"<p>The rematcher function seems to do what you want:</p>

<pre><code>def rematcher(re_str, iterable):

    matcher= re.compile(re_str)
    in_match= 0
    for item in iterable:
        if matcher.match(item):
            if in_match == 0:
                yield item
            in_match+= 1
        else:
            if in_match &gt; 1:
                yield ""%s repeats %d more times\n"" % (re_str, in_match-1)
            in_match= 0
            yield item
    if in_match &gt; 1:
        yield ""%s repeats %d more times\n"" % (re_str, in_match-1)

import sys, re

for line in rematcher("".*Dog.*"", sys.stdin):
    sys.stdout.write(line)
</code></pre>

<h1>EDIT</h1>

<p>In your case, the final string should be:</p>

<pre><code>final_string= '\n'.join(rematcher("".*Dog.*"", your_initial_string.split(""\n"")))
</code></pre>
"
168052,"<p>Updated your code to be a bit more effective</p>

<pre><code>#!/usr/bin/env python
#

import re
import types

def remove_repeats (l_string, l_regex):
   """"""Take a string, remove similar lines and replace with a summary message.

   l_regex accepts strings/patterns or tuples of strings/patterns.
   """"""

   # Convert string/pattern to tuple.
   if not hasattr(l_regex, '__iter__'):
      l_regex = l_regex,

   ret = []
   last_regex = None
   count = 0

   for line in l_string.splitlines(True):
      if last_regex:
         # Previus line matched one of the regexes
         if re.match(last_regex, line):
            # This one does too
            count += 1
            continue  # skip to next line
         elif count &gt; 1:
            ret.append(""::::: Pattern %r repeats %d more times.\n"" % (last_regex, count-1))
         count = 0
         last_regex = None

      ret.append(line)

      # Look for other patterns that could match
      for regex in l_regex:
         if re.match(regex, line):
            # Found one
            last_regex = regex
            count = 1
            break  # exit inner loop

   return ''.join(ret)
</code></pre>
"
48467,"<p>I am not entirely up to date on the latest best practices, et cetera when it comes to code layout, but when I did my first GAE application, I used something along your second option, where the code and templates are next to eachother.</p>

<p>There was two reasons for this - one, it kept the code and template nearby, and secondly, I had the directory structure layout mimic that of the website - making it (for me) a bit easier too remember where everything was.</p>
"
324723,"<p>From Python 2.5 and on you can get the behavior of setdefault or using defaultdict by implementing </p>

<pre><code>__missing__(k)
</code></pre>

<p>as in note 10 <a href=""http://www.python.org/doc/2.5.2/lib/typesmapping.html"" rel=""nofollow"">here</a>.</p>
"
324954,"<p>You need to use transactions or create the sql statement by hand. You could also try using SQLAlchemy which supports a few great ORM features like Unit of Work (or application transaction).</p>

<p>Django transactions: <a href=""http://docs.djangoproject.com/en/dev/topics/db/transactions/?from=olddocs"" rel=""nofollow"">http://docs.djangoproject.com/en/dev/topics/db/transactions/?from=olddocs</a></p>

<p>SQLAlchemy: <a href=""http://www.sqlalchemy.org/"" rel=""nofollow"">http://www.sqlalchemy.org/</a></p>
"
325149,"<p>Another option is to run the PHP script on the server using os.popen, then just printing the output. Quick and dirty example:</p>

<pre><code>import os
print os.popen('php YourScript.php').read()</code></pre>
"
46205,"<p>I believe you want:</p>

<pre><code>if 'normal' != root.state():
    tkMessageBox.showinfo(""Key you!"", "" "".join(sys.argv[1:]))
</code></pre>
"
114941,"<blockquote>
  <p>... turned out to be unworkable because I wanted to add labels and more canvases to it, but I can't find any way to make their backgrounds transparent</p>
</blockquote>

<p>If it is acceptable to load an additional extension, take a look at <a href=""http://www.tkzinc.org/tkzinc/index.php"" rel=""nofollow"">Tkzinc</a>.  From the web site, </p>

<blockquote>
  <p>Tkzinc (historically called Zinc) widget is very similar to the Tk Canvas in that they both support structured graphics. Like the Canvas, Tkzinc implements items used to display graphical entities. Those items can be manipulated and bindings can be associated with them to implement interaction behaviors. But unlike the Canvas, Tkzinc can structure the items in a hierarchy, has support for scaling and rotation, clipping can be set for sub-trees of the item hierarchy, supports muti-contour curves. It also provides advanced rendering with the help of OpenGL, such as color gradient, antialiasing, transparencies and a triangles item. </p>
</blockquote>

<p>I'm currently using it on a tcl project and am quite pleased with the results.  Extensions for tcl, perl, and python are available.</p>
"
269377,"<p>Did you take a look at <a href=""http://www.greatcircle.com/majordomo/"" rel=""nofollow"">majordomo</a>, or <a href=""http://www.gnu.org/software/mailman/index.html"" rel=""nofollow"">mailman</a>?</p>
"
270006,"<p>It's probably a bit of overkill, but you could use boost to interface to python.  At the worst, difflib is implemented in pure python, and it's not too long.  It should be possible to port from python to C...</p>
"
270155,"<p>You could do an ad hoc approach: You're looking to match strings s and s', where s=abc and s'=ab'c, and the b and b' should be two distinct numbers (possible empty). So:</p>

<ol>
<li>Compare the strings from the left, char by char, until you hit different characters, and then stop. You </li>
<li>Similarly, compare the strings from the right until you hit different characters, OR hit that left marker.</li>
<li>Then check the remainders in the middle to see if they're both numbers.</li>
</ol>
"
268087,"<p>It totally depends on if you want to make the egg available as a generally available library or just for a single (or a handful of applications). Are you talking about a Trac installation? If so, there are also a handful of alternatives to make the egg available per instance:</p>

<p><a href=""http://trac.edgewall.org/wiki/TracPlugins"" rel=""nofollow"">http://trac.edgewall.org/wiki/TracPlugins</a></p>
"
268111,"<p>This will tell setuptools to not zip it up:</p>

<pre><code>sudo python setup.py install --single-version-externally-managed
</code></pre>
"
268189,"<p>Well, with distutils (in the standard library) you have ""package data"". This is data that lives inside the package itself. <a href=""http://docs.python.org/distutils/setupscript.html#installing-package-data"" rel=""nofollow"">Explained here how to do it.</a> This is clearly not ideal, as you will have to use some kind of <code>__file__</code> hacks to look up the location of the data at runtime.</p>

<p>So then comes setuptools (not in the standard library), which additionally has ways of looking up the location of that data at runtime. <a href=""http://peak.telecommunity.com/DevCenter/setuptools#including-data-files"" rel=""nofollow"">Explained here how to do it</a>. But again that has it's own set of problems, for example, it may have trouble finding the data files on an uninstalled raw package.</p>

<p>There are also additional third party tools. The one I have used is <a href=""http://www.async.com.br/projects/kiwi/api/kiwi.environ.html"" rel=""nofollow"">kiwi.environ</a>. It offers data directories, and runtime lookup, but I wouldn't recommend it for general use, as it is geared towards PyGTK development and Glade file location.</p>

<p>I would imagine there are other third party tools around, and others will elaborate.</p>
"
324175,"<p>if it is always going to be a path like the above you can use os.path.split and os.path.splitext </p>

<p>The following example will print just the hello</p>

<pre><code>from os.path import split, splitext
path = ""/adda/adas/sdas/hello.txt""
print splitext(split(path)[1])[0]
</code></pre>

<p>For more info see <a href=""https://docs.python.org/library/os.path.html"" rel=""nofollow"">https://docs.python.org/library/os.path.html</a></p>
"
324270,"<p>The answer in Java, as is so often the case, is that someone has beaten you to it and released an excellent open source library to do this.  Have a look at <a href=""http://commons.apache.org/cli/"" rel=""nofollow""><strong>Apache CLI</strong></a>.</p>
"
324326,"<p>Maybe this script is what you want?</p>

<pre><code>import sys, os
print sys.argv[0]
print os.path.basename(sys.argv[0])
</code></pre>

<p>When I run the above script I get;</p>

<pre><code>D:\UserData\workspace\temp\Script1.py
Script1.py
</code></pre>
"
324686,"<p>Let me explain a little what you do here.</p>

<p>If you write:</p>

<pre><code>NumPFCs = eval(line[2])
</code></pre>

<p>the order of evaluation is:</p>

<ul>
<li>take the second character of the string line, i.e. a quote '""'</li>
<li>eval this quote as a python expression, which is an error.</li>
</ul>

<p>If you write it instead as:</p>

<pre><code>NumPFCs = eval(line)[2]
</code></pre>

<p>then the order of evaluation is:</p>

<ul>
<li>eval the line, producing a python list</li>
<li>take the second element of that list, which is a one-character string: ""0""</li>
<li>a string cannot be compared with a number; this is an error too.</li>
</ul>

<p>In your terms, you want to do the following:</p>

<pre><code>NumPFCs = eval(eval(line)[2])
</code></pre>

<p>or, slightly better, compare NumPFCs to a string:</p>

<pre><code>if NumPFCs == ""0"":
</code></pre>

<p>but the ways this could go wrong are almost innumerable. You should forget about <code>eval</code> and try to use other methods: string splitting, regular expressions etc. Others have already provided some suggestions, and I'm sure more will follow.</p>
"
48175,"<p>Python 2.3, or 2.2 if you can live without the many modules that were added (e.g. datetime, csv, logging, optparse, zipimport), aren't using SSL, and are willing to add boilerplate for True/False.</p>

<p>2.4 added decorators. generator expressions, reversed(), sorted(), and the subprocess and decimal modules.  Although these are all nice, it's easy to write Pythonic code without them (assuming that your project wouldn't make heavy use of them).</p>

<p>2.5 added with, relative imports, better 64 bit support, and quite a bit of speed.  You could live without all of those easily enough.</p>

<p>2.6 isn't released (although it's very close), so while it might appeal to developers, it doesn't have the compatibility you're after.</p>

<p>Take a look at the release notes for 2.3, 2.4, 2.5, and the upcoming 2.6 (use <a href=""http://www.python.org/download/releases/2.Y/highlights/"" rel=""nofollow"">http://www.python.org/download/releases/2.Y/highlights/</a> where 'Y' is the minor version).</p>

<p>FWIW, for SpamBayes we support 2.2 and above (2.2 requires installing the email package separately).  This isn't overly taxing, but the 2.3 additions are useful enough and 2.3 old enough that we'll probably drop 2.2 before long.</p>
"
48284,"<p><a href=""http://www.turbogears.org/"" rel=""nofollow"">TurboGears</a> currently uses <a href=""http://www.sqlobject.org/"" rel=""nofollow"">SQLObject</a> by default but you can use it with <a href=""http://docs.turbogears.org/1.0/SQLAlchemy"" rel=""nofollow"">SQLAlchemy</a>. They are saying that the next major release of TurboGears (1.1) will use SQLAlchemy by default.</p>
"
203923,"<p>The main difference is how you organize and distribute data. Multicore typically has higher bandwidths between the different cores in a cpu, and multiprocessor needs to involve the bus between the cpus more.</p>

<p>Python 2.6 has gotten multiprocess (process, as in program running) and more synchronization and communication objects for multithreaded programming.</p>
"
203973,"<p>There's an extra for this in python-markdown2:</p>

<p><a href=""http://code.google.com/p/python-markdown2/wiki/LinkPatterns"" rel=""nofollow"">http://code.google.com/p/python-markdown2/wiki/LinkPatterns</a></p>
"
203974,"<p>Echoing the answer of few, I suggest Django. for some simple reasons:</p>

<ol>
<li>It follows standard MVC architecture.</li>
<li>You can modularise your entire application right from db modeling.</li>
<li>Extensive documentation and free online example/project based books available.</li>
<li>Many open source web based projects for reference available.</li>
</ol>
"
204561,"<p>A little off-topic in the way of using it. Singletons are overrated, and a ""shared-state"" method is as effective, and mostly, very clean in python, for example:</p>

<pre><code>class Borg:
    __shared_state = {}
    def __init__(self):
        self.__dict__ = self.__shared_state
    # and whatever else you want in your class -- that's all!
</code></pre>

<p>Now every time you do:</p>

<pre><code>obj = Borg()
</code></pre>

<p>it will have the same information, or, be somewhat the same instance.</p>
"
51015,"<p>It seems that this isn't supported, since there wouldn't be a good way to deal with overflows in datetime.time.  I know this isn't an answer directly, but maybe someone with more python experience than me can take this a little further.  For more info, see this: <a href=""http://bugs.python.org/issue3250"" rel=""nofollow"">http://bugs.python.org/issue3250</a></p>
"
48479,"<p>I know that you specificity ask for a framework but I thought I would let you know about what I get up to here. I have just undergone converting my company's web application from a custom in-house ORM layer into sqlAlchemy so I am far from an expert but something that occurred to me was that sqlAlchemy has types for all of the attributes it maps from the database so why not use that to help output the right html onto the page. So we use sqlAlchemy for the back end and Cheetah templates for the front end but everything in between is basically our own still.</p>

<p>We have never managed to find a framework that does exactly what we want without compromise and prefer to get all the bits that work right for us and write the glue our selves. </p>

<p>Step 1. For each data type sqlAlchemy.types.INTEGER etc. Add an extra function toHtml (or many maybe toHTMLReadOnly, toHTMLAdminEdit whatever) and just have that return the template for the html, now you don't even have to care what data type your displaying if you just want to spit out a whole table you can just do (as a cheetah template or what ever your templating engine is).</p>

<p>Step 2</p>

<p><code>&lt;table&gt;</code></p>

<p><code> &lt;tr&gt;</code></p>

<p><code>  #for $field in $dbObject.c:</code></p>

<p><code>    &lt;th&gt;$field.name&lt;/th&gt;</code></p>

<p><code>  #end for  </code></p>

<p><code> &lt;/tr&gt; </code></p>

<p><code> &lt;tr&gt;</code></p>

<p><code>  #for $field in dbObject.c:</code></p>

<p><code>    &lt;td&gt;$field.type.toHtml($field.name, $field.value)&lt;/td&gt;</code></p>

<p><code>  #end for  </code></p>

<p><code> &lt;/tr&gt;</code></p>

<p><code>&lt;/table&gt;</code></p>

<p>Using this basic method and stretching pythons introspection to its potential, in an afternoon I managed to make create read update and delete code for our whole admin section of out database, not yet with the polish of django but more then good enough for my needs.</p>

<p>Step 3 Discovered the need for a third step just on Friday, wanted to upload files which as you know needs more then just the varchar data types default text box. No sweat, I just overrode the rows class in my table definition from VARCHAR to FilePath(VARCHAR) where the only difference was FilePath had a different toHtml method. Worked flawlessly.</p>

<p>All that said, if there is a shrink wrapped one out there that does just what you want, use that.</p>

<p>Disclaimer: This code was written from memory after midnight and probably wont produce a functioning web page.</p>
"
48575,"<p>What exactly are you trying to do?</p>

<p>Of course, there are numerous places to learn about svn pre-commit hooks (e.g. <a href=""http://wordaligned.org/articles/a-subversion-pre-commit-hook"" rel=""nofollow""> here </a>, <a href=""http://www.windley.com/archives/2008/08/using_a_precommit_hook_to_check_puppet_syntax.shtml"" rel=""nofollow""> here</a>, and in the <a href=""http://svnbook.red-bean.com/nightly/en/svn.reposadmin.create.html"" rel=""nofollow"">Red Book</a>) but it depends what you're trying to do and what is available on your system.  </p>

<p>Can you be more specific? </p>
"
49319,"<p>Embeding the Python interpreter inside your C++ app will let you run Python programs using your application run Python scripts. It will also make it easier possible for those scripts to call C++ functions in your application. If this is what you want then the Boost library mentioned previously may be what you want to make it easier to create the link. In the past I have used <a href=""http://www.swig.org/"" rel=""nofollow"">SWIG</a> to generate Python interfaces to C++ code. It was not clear from your question whether you wanted the Python scripts to call your C++ program or whether you just wanted the C++ to call Python.</p>

<p>Many of the Python functions use modules which are not built into the Python interpreter. If your Python scripts call these functions then you will either need to have your users install Python or include the python runtime files with your application. It will depend on what modules you import in you Python scripts.</p>
"
49439,"<p>Boost is probably the best choice, however if you're wanting something that's more standalone, and if this is for use with Windows (which seems feasible given that they are the people least likely to have Python installed), then you can use <a href=""http://www.py2exe.org"" rel=""nofollow"">py2exe</a> to create a DLL with entry points suitable for COM objects.  You can then interface with the library via COM.  (Obviously this is not at all useful as a cross-platform solution).</p>
"
49485,"<p>A plugin for GSview for viewing encrypted PDFs is <a href=""http://www.cs.cmu.edu/~dst/Adobe/Gallery/Keating/"" rel=""nofollow"">here</a>.</p>

<p>If this works for you, you may be able to look at the source.</p>
"
324013,"<p>Just for fun, you can create a wrapper around the whole thing and work with strong names in your code.
More work? Yes. But more fun and once you add a new command to the wrapper you can forget about it ;)</p>

<pre><code>public class Form1 
{ 

private void main() 
{ 
    MyCommandHandler CommandLineHandler = new MyCommandHandler(); 
    CommandLineHandler.SetInput = ""-t alpha 1 -prod 1 2 -sleep 200""; 

    //now we can use strong name to work with the variables: 
    //CommandLineHandler.prod.ProdID 
    //CommandLineHandler.prod.ProdInstanceID 
    //CommandLineHandler.Alpha.AlhaValue() 
    //CommandLineHandler.Sleep.Miliseconds() 
    if (CommandLineHandler.Alpha.AlhaValue &gt; 255) { 
        throw new Exception(""Apha value out of bounds!""); 
    } 

} 
} 

public class MyCommandHandler 
{ 
private string[] values; 
public string SetInput { 
    set { values = Strings.Split(value, ""-""); } 
} 

//Handle Prod command 
public struct prodstructure 
{ 
    public string ProdID; 
    public string ProdInstanceID; 
} 
public prodstructure prod { 
    get { 
        prodstructure ret = new prodstructure(); 
        ret.ProdID = GetArgsForCommand(""prod"", 0); 
        ret.ProdInstanceID = GetArgsForCommand(""prod"", 1); 
        return ret; 
    } 
} 

//Handle Apha command 
public struct Aphastructure 
{ 
    public int AlhaValue; 
} 
public Aphastructure Alpha { 
    get { 
        Aphastructure ret = new Aphastructure(); 
        ret.AlhaValue = Convert.ToInt32(GetArgsForCommand(""alpha"", 0)); 
        return ret; 
    } 
} 


//Handle Sleep command 
public struct SleepStructure 
{ 
    public int Miliseconds; 
} 
public SleepStructure Sleep { 
    get { 
        SleepStructure ret = new SleepStructure(); 
        ret.Miliseconds = Convert.ToInt32(GetArgsForCommand(""sleep"", 0)); 
        return ret; 
    } 
} 


private string GetArgsForCommand(string key, int item) 
{ 
    foreach (string c in values) { 
        foreach (string cc in Strings.Split(c.Trim, "" "")) { 
            if (cc.ToLower == key.ToLower) { 
                try { 
                    return Strings.Split(c.Trim, "" "")(item + 1); 
                } 
                catch (Exception ex) { 
                    return """"; 
                } 
            } 
        } 
    } 
    return """"; 
} 
}
</code></pre>
"
324139,"<pre><code>&gt;&gt;&gt; inFile = ""/adda/adas/sdas/hello.txt""
&gt;&gt;&gt; inFile.split('/')[-1]
'hello.txt'
&gt;&gt;&gt; inFile.split('/')[-1].split('.')[0]
'hello'
</code></pre>
"
271058,"<p>The best way to do this that I've found is to iteratively try decoding a prospective with each of the most common encodings inside of a try except block.</p>
"
114228,"<p>I have had success with <a href=""http://code.google.com/p/modwsgi/wiki/IntegrationWithDjango"" rel=""nofollow"">mod_wsgi</a></p>
"
114251,"<p>The call to method_two will throw an exception for not accepting the self parameter the Python runtime will automatically pass it.</p>

<p>If you want to create a static method in a Python class, decorate it with the <code>staticmethod decorator</code>.</p>

<pre><code>Class Test(Object):
  @staticmethod
  def method_two():
    print ""Called method_two""

Test.method_two()
</code></pre>
"
238257,"<p>Check the answers to this question</p>

<p><a href=""http://stackoverflow.com/questions/92438/stripping-non-printable-characters-from-a-string-in-python"">http://stackoverflow.com/questions/92438/stripping-non-printable-characters-from-a-string-in-python</a></p>

<p>you'd just need to use the other unicode character categories instead</p>
"
137291,"<p>What kind of modules are we talking about here?  If you're planning on distributing your projects to other python developers, setuptools is great.  But it's usually not a very good way to distribute apps to end users.  Your best bet in the latter case is to tailor your packaging to the platforms you're distributing it for.  Sure, it's a pain, but it makes life for end users far easier.</p>

<p>For example, in my Debian system, I usually don't use easy_install because it is a little bit more difficult to get eggs to work well with the package manager.  In OS X and windows, you'd probably want to package everything up using py2app and py2exe respectively.  This makes life for the end user better.  After all, they shouldn't know or care what language your scripts are written in.  They just need them to install.</p>
"
137335,"<blockquote>
  <p>BTW I know that I would eventually
  will read this:</p>
  
  <p><a href=""http://docs.python.org/lib/lib.html"" rel=""nofollow"">http://docs.python.org/lib/lib.html</a></p>
  
  <p>But, well, I think it is not today.</p>
</blockquote>

<p>I suggest that you're making a mistake.  The lib doc has ""the class, its methods and and example of how to use it.""   It <em>is</em> what you are looking for.  </p>

<p>I use both Java and Python all the time.  Dig into the library doc, you'll find everything you're looking for.</p>
"
137831,"<p>As I see it, you only need to worry about <em>downlevel-hidden</em> comments (the ones that start with <code>&lt;!--</code>), and you don't need to match anything beyond the word <code>if</code> and the space following it.  This should do what you want:</p>

<pre><code>""&lt;!--\[if\s(?:[^&lt;]+|&lt;(?!!\[endif\]--&gt;))*&lt;!\[endif\]--&gt;""
</code></pre>

<p>That mess in the middle is to satisfy your desire not to use <code>.*?</code>, but I don't really think it's worth the effort.  The <code>.*?</code> approach should work fine if you compile the regex with the Re.S flag set or wrap it in <code>(?s:...)</code>.  For example:</p>

<pre><code>""(?s:&lt;!--\[if\s.*?&lt;!\[endif\]--&gt;)""
</code></pre>
"
137903,"<p>Whatever you do, do not stop distributing your application, also, as a tarball, as that is the easiest packagable format for operating systems with a package sysetem.</p>
"
237905,"<p>Lets see if I understand you scenario:  each weapon has its own distinct hit point so a rifle may have 1, a heavy weapon may have 2 etc. Then each character has a short, medium and long value to be multiplied by the hit point of the weapon.</p>

<p>You should consider using a Strategy design. That is create a weapon superclass with a hit point property. Create sub class weapons for rifle, pistol, bow etc. I am sure that the differences between the weapons are more than just the hit points.</p>

<p>Then the Character has one or more weapons depending on your gameplay. To calculate the hit point for a particular weapon is as simple as</p>

<pre><code>current_weapon * self.medium
</code></pre>

<p>If you decide to add more weapons later on then you do not have to edit your Character code because your character can handle any weapon.</p>

<p>In Pseudo Python</p>

<pre><code>class Weapon
    hit = 1
    #other properties of weapon

class Rifle(Weapon)
    #other properties of Rifle

class Pistol(Weapon)
    #other properties of Pistol

class Character
   weapon = Rifle()
   long=0.6
   def calcHit()
      return self.long*weapon.hit

john = Character()
john.weapon= Rifle()
john.calcHit
</code></pre>
"
114281,"<p>that is an error.</p>

<p>first of all, first line should be like this (be careful of capitals)</p>

<pre><code>class Test(object):
</code></pre>

<p>Whenever you call a method of a class, it gets itself as the first argument (hence the name self) and method_two gives this error </p>

<pre><code>&gt;&gt;&gt; a.method_two()
Traceback (most recent call last):
File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: method_two() takes no arguments (1 given)
</code></pre>
"
114285,"<p>The second one won't work because when you call it like that python internally tries to call it with the a_test instance as the first argument, but your method_two doesn't accept any arguments, so it wont work, you'll get a runtime error.
If you want the equivalent of a static method you can use a class method.
There's much less need for class methods in Python than static methods in languages like Java or C#. Most often the best solution is to use a method in the module, outside a class definition, those work more efficiently than class methods.</p>
"
114348,"<p>I'm by no means a Django expert, so this answer might misguide you. </p>

<p>Start looking somewhere around <code>django.contrib.admin.options.ModelAdmin</code>, especially <code>render_change_form</code> and <code>response_change</code>. I guess you would need to subclass ModelAdmin for your model and provide required behavior around those methods.</p>
"
271294,"<p>Here's another take:</p>

<pre><code>for key, val in mydict.items():
    mydict[key] = [""someotherword"" if x == ""example"" else x for x in val]
</code></pre>

<p>I've found that building lists is <strong>very</strong> fast, but of course profile if performance is important.</p>
"
271692,"<p>Double click on ""action"" or any other variable.</p>

<p>ctrl+shift+D</p>

<p>And if you're using watches, I cant imagine better interaction. You are able to see every change.</p>
"
271789,"<p>You want something along the following lines.</p>

<p><strong>parent.py</strong></p>

<pre><code>import subprocess
c1= subprocess.Popen( [""python"", ""child.py"", ""1""], stdin=subprocess.PIPE, stdout=subprocess.PIPE )
c2= subprocess.Popen( [""python"", ""child.py"", ""2""], stdin=subprocess.PIPE, stdout=subprocess.PIPE )
out1, err1= c1.communicate( ""to 1: hit it!"" )
print "" 1:"", repr(out1)
print ""*1:"", repr(err1)
out2, err2= c2.communicate( ""to 2: ready, set, go!"" )
print "" 2:"", repr(out2)
print ""*2:"", repr(err2)
out1, err1= c1.communicate()
print "" 1:"", repr(out1)
print ""*1:"", repr(err1)
out2, err2= c2.communicate()
print "" 2:"", repr(out2)
print ""*2:"", repr(err2)
c1.wait()
c2.wait()
</code></pre>

<p><strong>child.py</strong></p>

<pre><code>import yourDBconnection as dbapi2

def child1():
    print ""Child 1 start""
    conn= dbapi2.connect( ... )
    c1= conn.cursor()
    conn.begin() # turn off autocommit, start a transaction
    ra= c1.execute( ""UPDATE A SET AC1='Achgd' WHERE AC1='AC1-1'"" )
    print ra
    print ""Child1"", raw_input()
    rb= c1.execute( ""UPDATE B SET BC1='Bchgd' WHERE BC1='BC1-1'"" )
    print rb
    c1.close()
    print ""Child 1 finished""

def child2():
    print ""Child 2 start""
    conn= dbapi2.connect( ... )
    c1= conn.cursor()
    conn.begin() # turn off autocommit, start a transaction
    rb= c1.execute( ""UPDATE B SET BC1='Bchgd' WHERE BC1='BC1-1'"" )
    print rb
    print ""Child2"", raw_input()
    ra= c1.execute( ""UPDATE A SET AC1='Achgd' WHERE AC1='AC1-1'"" )
    print ta
    c1.close()
    print ""Child 2 finish""

try:
    if sys.argv[1] == ""1"":
        child1()
    else:
        child2()
except Exception, e:
    print repr(e)
</code></pre>

<p>Note the symmetry.  Each child starts out holding one resource.  Then they attempt to get someone else's held resource.  You can, for fun, have 3 children and 3 resources for a really vicious circle.</p>

<p>Note that difficulty in contriving a situation in which deadlock occurs.  If your transactions are short -- and consistent -- deadlock is very difficult to achieve.  Deadlock requires (a) transaction which hold locks for a long time AND (b) transactions which acquire locks in an inconsistent order.   I have found it easiest to prevent deadlocks by keeping my transactions short and consistent.</p>

<p>Also note the non-determinism.  You can't predict which child will die with a deadlock and which will continue after the other died.  Only one of the two need to die to release needed resources for the other.  Some RDBMS's claim that there's a rule based on number of resources held blah blah blah, but in general, you'll never know how the victim was chosen.</p>

<p>Because of the two writes being in a specific order, you sort of expect child 1 to die first.  However, you can't guarantee that.  It's not deadlock until child 2 tries to get child 1's resources -- the sequence of who acquired first may not determine who dies.</p>

<p>Also note that these are processes, not threads.  Threads -- because of the Python GIL -- might be inadvertently synchronized and would require lots of calls to <code>time.sleep( 0.001 )</code> to give the other thread a chance to catch up.  Processes -- for this -- are slightly simpler because they're fully independent.</p>
"
113388,"<p>All you need is a reference. It's not really a simple problem that I can give some one-line solution to (other than a simple ugly global that would probably break something else), but one of program structure. You don't magically get access to a variable that was created on another instance of another class. You have to either give the intelligence reference to MOS, or take it from BasicInfoPage, however that might happen. It seems to me that the classes are designed rather oddly-- an information page, for one thing, should not generate anything, and if it does, it should give it back to whatever needs to know-- some sort of central place, which should have been the one generating it in the first place. Ordinarily, you'd set the variables there, and get them from there. Or at least, I would.</p>

<p>If you want the basic answer of ""how do I pass variables between different classes"", then here you go, but I doubt it's exactly what you want, as you look to be using some sort of controlling framework:</p>

<pre><code>class Foo(object):
    def __init__(self, var):
        self.var = var

class Bar(object):
    def do_something(self, var):
        print var*3

if __name__ == '__main__':
    f = Foo(3)
    b = Bar()
    # look, I'm using the variable from one instance in another!
    b.do_something(f.var)
</code></pre>
"
270315,"<p>I've taken Mr. Coventry's advice and <a href=""http://bugs.python.org/issue4272"" rel=""nofollow"">submitted a patch</a>.  However, given the current state of the Python release schedule, with 3.0 just around the corner, I don't expect it to show up in a release anytime soon.  Still, we'll see what happens!</p>

<p>In the meantime, I like Mr. Batchelder's option 5 of piping the gzip stream through a small custom filter that sets the timestamp field correctly.  It sounds like the cleanest approach.  As he demonstrates, the code required is actually quite small, though his example does depend for some of its simplicity on the (currently valid) assumption that the <code>gzip</code> module implementation will choose to write the timestamp using exactly one four-byte call to <code>write()</code>.  Still, I don't think it would be very difficult to come up with a fully general version if needed.</p>

<p>The monkey-patching approach (a.k.a. option 2) is quite tempting for its simplicity but gives me pause because I'm writing a library that calls <code>gzip</code>, not just a standalone program, and it seems to me that somebody might try to call <code>gzip</code> from another thread before my module is ready to reverse its change to the <code>gzip</code> module's global state.  This would be especially unfortunate if the other thread were trying to pull a similar monkey-patching stunt!  I admit this potential problem doesn't sound very likely to come up in practice, but imagine how painful it would be to diagnose such a mess!</p>

<p>I can vaguely imagine trying to do something tricky and complicated and perhaps not so future-proof to somehow import a private copy of the <code>gzip</code> module and monkey-patch <em>that</em>, but by that point a filter seems simpler and more direct.</p>
"
270449,"<p>you can always run LOCK TABLE tablename from another session (mysql CLI for instance). That might do the trick.</p>

<p>It will remain locked until you release it or disconnect the session.</p>
"
270492,"<p>I'm not familar with Python, so excuse my incorrect language If I'm saying this wrong... but open two sessions (in separate windows, or from separate Python processes - from separate boxes would work ... )  Then ... </p>

<p>. In Session A:</p>

<pre><code>   Begin Transaction 
      Insert TableA()  Values()...
</code></pre>

<p>. Then In Session B:</p>

<pre><code>Begin Transaction
  Insert TableB() Values()... 
  Insert TableA() Values() ...
</code></pre>

<p>. Then go back to session A</p>

<pre><code>  Insert TableB() Values () ...
</code></pre>

<p>You'll get a deadlock... </p>
"
323097,"<p>Install Python ""for all users"", not ""just for me"".</p>
"
323789,"<p>You can only assign shortcuts to ""actions"". Actions bound to buttons (for example, the toolbar) and menus. If you have a menu for this, you can bind a key to it. If not, then you will have to open an enhancement request in the pydev project.</p>
"
323827,"<p>I don't think there is a straightforward way, especially that an iterable can be a generator (no going back). There's a decent workaround, relying on explicitly passing the index into the loop body:</p>

<pre><code>for itemIndex, item in enumerate(l):
    if itemIndex&gt;0:
        previousItem = l[itemIndex-1]
    else:
        previousItem = None
</code></pre>

<p>The <code>enumerate()</code> function is a builtin.</p>
"
323887,"<p>I'd be a little uncomfortable using a command line like that.  First thing I'd say is ""what does the first '1' mean, and why is it different to the second '1'?""</p>

<p>Any time I write a command line utility that accepts an argument, I consider how easy it would be for a user to learn all the options.  In this case, it looks like a bit of a hard task, IMHO.</p>

<p>Maybe refactoring how the user passes the arguments would be a good idea.  There's a reason why a lot of software takes key/value type parameters (e.g. myclient.exe -server=myServerName -config=debug) It takes a lot of load off the user, and also simplifies the argument parsing once it hits your code.</p>
"
167335,"<p>You could change your exclusion list to a set, then just use intersection to get the overlap.</p>

<pre><code>exclusion = set([3, 4, 5])

for key in exclusion.intersection(a):
    del a[key]
</code></pre>
"
113554,"<p>The hard part with what you're trying to do is that you aren't giving it a character to split on. split() explodes a string on the character you provide to it, and removes that character.</p>

<p>Perhaps this may help:</p>

<pre><code>s = ""String to split""
mylist = []
for item in s.split():
    mylist.append(item)
    mylist.append(' ')
mylist = mylist[:-1]
</code></pre>

<p>Messy, but it'll do the trick for you...</p>
"
113681,"<p>The list function will do this</p>

<pre><code>&gt;&gt;&gt; list('foo')
['f', 'o', 'o']
</code></pre>
"
112895,"<p>I'd recommend taking a look at the <a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""nofollow"">mechanize</a> library; it's designed for precisely this type of task. It's also far easier than doing it by hand.</p>
"
112993,"<p>According to Mr Van Rossum, although open() is currently an alias for file() you should use open() because this might change in the future.</p>
"
273063,"<p>If you have mac or sun box kicking around you could use <a href=""http://en.wikipedia.org/wiki/DTrace"" rel=""nofollow"">dtrace</a> and a version of python compiled with dtrace to figure out what the application was doing at the time. Note: in 10.5 python is pre-compiled with dtrace which is really nice and handy.</p>

<p>If that isn't available to you, then you can <a href=""http://www.python.org/doc/2.5.2/lib/module-gc.html"" rel=""nofollow"">import gc</a> and enable debugging which you can then put out to a log file.</p>

<p>To specifically answer your question regarding debugging with GDB you might want to read ""<a href=""http://wiki.python.org/moin/DebuggingWithGdb"" rel=""nofollow"">Debugging With GDB</a>"" on the python wiki.</p>
"
273112,"<p>It's linux only, but there's a very simple recipe here <a href=""http://code.activestate.com/recipes/439094/"" rel=""nofollow"">http://code.activestate.com/recipes/439094/</a> </p>

<p>It probably uses similar code to the <a href=""http://pypi.python.org/pypi/netifaces/"" rel=""nofollow"">netifaces package</a> mentioned in another answer (but current version linked here)</p>

<p>The socket.getaddrinfo() doesn't actually return the bound ip address for the device. If your hosts file contains a line with ""127.0.1.1 yourhost.example.com yourhost"", which is a common configuration, getaddrinfo is only going to return 127.0.1.1.</p>
"
237709,"<p>Since every filename in the output starts at the same column, all you have to do is get the position of the dot on the first line:</p>

<blockquote>
  <p><code>drwxrwsr-x   5 ftp-usr  pdmaint     1536 Mar 20 09:48 .</code></p>
</blockquote>

<p>Then slice the filename out of the other lines using the position of that dot as the starting index.</p>

<p>Since the dot is the last character on the line, you can use the length of the line minus 1 as the index. So the final code is something like this:</p>

<pre><code>lines = ftp.retrlines('LIST')
lines = lines.split(""\n"") # This should split the string into an array of lines

filename_index = len(lines[0]) - 1
files = []

for line in lines:
    files.append(line[filename_index:])
</code></pre>
"
237721,"<p>Is there any reason why <strong>ftplib.FTP.nlst()</strong> won't work for you? I just checked and it returns only names of the files in a given directory.</p>
"
237785,"<p>Without looking at your code (and the quoted test-run-script my brain fails to understand right now)
I notice that you try to get a time that is in a different timezone than the one you are at.
(Think of DST as a another TIMEZONE instead of +-1 hour from current timezone). 
This could (depending on how you do it) lead to a gain or loss of hours.
(Like when your flying, you start at one time and getting to your location before you started, all in local time)</p>
"
341231,"<p>I think there is an option to setup the windows file association for .py files in the installer.  Uncheck it and you should be fine.</p>

<p>If not, you can easily re-associate .py files with the previous version.  The simplest way is to right click on a .py file, select ""open with"" / ""choose program"".  On the dialog that appears, select or browse to the version of python you want to use by default, and check the ""always use this program to open this kind of file"" checkbox. </p>
"
341525,"<p><a href=""http://faq.pygtk.org/index.py?file=faq23.042.htp&amp;req=show"" rel=""nofollow"">http://faq.pygtk.org/index.py?file=faq23.042.htp&amp;req=show</a> mentions it all:</p>

<p>You need to create a drawing area and set the environment variable SDL_WINDOWID after it's realized:</p>

<pre>
 import os

 import gobject
 import gtk
 import pygame

 WINX = 400
 WINY = 200

 window = gtk.Window()
 window.connect('delete-event', gtk.main_quit)
 window.set_resizable(False)
 area = gtk.DrawingArea()
 area.set_app_paintable(True)
 area.set_size_request(WINX, WINY)
 window.add(area)
 area.realize()

 # Force SDL to write on our drawing area
 os.putenv('SDL_WINDOWID', str(area.window.xid))

 # We need to flush the XLib event loop otherwise we can't
 # access the XWindow which set_mode() requires
 gtk.gdk.flush()

 pygame.init()
 pygame.display.set_mode((WINX, WINY), 0, 0)
 screen = pygame.display.get_surface()

 image_surface = pygame.image.load('foo.png')
 screen.blit(image_surface, (0, 0))

 gobject.idle_add(pygame.display.update)

 window.show_all()

 while gtk.event_pending():
     # pygame/SDL event processing goes here
     gtk.main_iteration(False)
</pre>
"
182099,"<pre><code>c=""8eirwN1kTwCzgWA2HxTaRQ=="".decode('base64')
</code></pre>
"
182120,"<p>Don't forget to install <a href=""http://sourceforge.net/projects/pywin32/"" rel=""nofollow"">pywin32</a> after installing the official (command line) installer. This will define additional <em>start menu</em> items and the highly useful <em>PythonWin IDE</em>.</p>

<p>An installer for both is available at <a href=""http://activestate.com/Products/activepython/index.mhtml"" rel=""nofollow"">Activestate</a> (no 2.6 yet). The Activestate distribution contains additional documentation.</p>
"
181078,"<p>Search ""Alex Martelli"", ""Alex Martelli patterns"" and ""Thomas Wouters"" on Google video. There's plenty of interesting talks on andvanced Python, design patterns in Python, and so on.</p>
"
181086,"<p>The book <a href=""http://www-csli.stanford.edu/~hinrich/information-retrieval-book.html"" rel=""nofollow"">Introduction to Information Retrieval</a> provides a good introduction to the field.</p>

<p>A dead-tree version is published by Cambridge University Press, but you can also find a free online edition (in HTML and PDF) following the link above.</p>
"
138254,"<p>Image manipulation is a complex topic, and it's best if you <em>do</em> use a library. I can recommend <a href=""http://newcenturycomputers.net/projects/gdmodule.html"" rel=""nofollow"">gdmodule</a> which provides easy access to many different image formats from within Python.</p>
"
345529,"<p>I would delete <code>site</code> field on my <code>Photo</code> model and add a <code>ForeignKey</code> to <code>Gallery</code>. I would remove <code>limit_choices_to</code> from <code>photos</code> fields on <code>Gallery</code> model.</p>

<p>Because you are using <code>ForeignKey</code>s to <code>Site</code>s, that means sites don't share galleries and photos. Therefore having those I mentioned above is already useless.</p>

<pre><code>class Photo(models.Model):
    title = models.CharField(max_length=100)
    gallery = models.ForeignKey(Gallery, related_name='photos')
    file = models.ImageField(upload_to=get_site_profile_path) 

    def __unicode__(self):
        return self.title


class Gallery(models.Model):    
    name = models.CharField(max_length=40)
    site = models.ForeignKey(Site)

    def __unicode__(self):
        return self.name
</code></pre>

<p>Once you set the <code>site</code> on a gallery all its photos will inherit this property. And the site will be accessible as <code>photo_instance.gallery.site</code>:</p>

<pre><code>@property
def site(self):
    return self.gallery.site
</code></pre>

<p>This should work as if you had a <code>site</code> field. But I haven't tested it.</p>

<p>Things change or course, if you decide that a gallery or a photo can appear in multiple sites.</p>
"
345576,"<p>Use izip and chain together:</p>

<pre><code>&gt;&gt;&gt; list(itertools.chain.from_iterable(itertools.izip(items, c))) # 2.6 only
['foo', 1, 'bar', 2]

&gt;&gt;&gt; list(itertools.chain(*itertools.izip(items, c)))
['foo', 1, 'bar', 2]
</code></pre>
"
345650,"<p>One thing you didn't indicate is whether or not you're reading the XML into a DOM of some kind.  I'm guessing that you're probably not, but on the off chance you are, don't.  Use xml.sax instead.  Using SAX instead of DOM will get you a significant performance boost.</p>
"
8972,"<p><a href=""http://www.dotfunk.com/projects/mp3/"" rel=""nofollow"">This toolkit</a> may do what you need. I can't say if it's the ""best"", but really, if it does what you need, that's all that matters, right?</p>

<p>HTH</p>
"
8976,"<p>It can depend on exactly what you want to do in addition to reading the metadata. If it is just simply the bitrate / name etc. that you need, and nothing else, something lightweight is probably best.</p>

<p>If you're manipulating the mp3 past that PyMedia may be suitable.</p>

<p>There are quite a few, whatever you do get, make sure and test it out on plenty of sample media. There are a few different versions of ID3 tags in particular, so make sure it's not too out of date. </p>

<p>Personally I've used this small MP3Info class with luck. It is quite old though.</p>

<p><a href=""http://www.omniscia.org/~vivake/python/MP3Info.py"" rel=""nofollow"">http://www.omniscia.org/~vivake/python/MP3Info.py</a></p>
"
10132,"<p>You can unpack the status using <a href=""http://docs.python.org/ref/shifting.html"" rel=""nofollow"">bit-shifting</a> and <a href=""http://docs.python.org/ref/bitwise.html"" rel=""nofollow"">masking</a> operators.</p>

<pre><code>low = status &amp; 0x00FF
high = (status &amp; 0xFF00) &gt;&gt; 8
</code></pre>

<p>I'm not a Python programmer, so I hope got the syntax correct.</p>
"
113493,"<p>The use of ""i8"" as a data-type is becoming more and more common. I recently added this to my Perl XML-RPC module (<a href=""http://metacpan.org/pod/RPC::XML"" rel=""nofollow"">http://metacpan.org/pod/RPC::XML</a>) in response to a request from a large group that needed it in order to work with a server written in Java. I don't know what toolkit the server used, but it was already accepting i8 as a type.</p>

<p>One thing that I feel still has to be addressed, is whether the ""int"" alias for ""i4"" should also accept i8, the way it currently does i4. Or, for that matter, if a parameter typed as i8 should quietly accept an input typed as i4. XML-RPC has great potential as a lightweight, low-overhead protocol handy when you don't need all the coverage of SOAP, but it is often overlooked in the religious wars between REST and SOAP.</p>

<p>XML-RPC is in need of some updating and revision, if we could just get the original author to permit it...</p>
"
206486,"<p>I was using the <a href=""http://www.djangoproject.com/"" rel=""nofollow"">Django framework</a>, which has a filter called urlize, which does exactly what I wanted. However, it only works on plain text, so I couldn't pass is through the output of markdown. I followed <a href=""https://docs.djangoproject.com/en/dev/howto/custom-template-tags/"" rel=""nofollow"">this guide</a> to create a custom filter called urlify2 which works on html, and passed the text through this filter:</p>

<pre><code>&lt;div class=""news_post""&gt;
  {% autoescape off %}
    {{ post.content|markdown|urlify2}}
  {% endautoescape %}
&lt;/div&gt;
</code></pre>

<p>The urlify2.py filter:</p>

<pre><code>from django import template
import re

register = template.Library()

urlfinder = re.compile(""([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}|((news|telnet|nttp|file|http|ftp|https)://)|(www|ftp)[-A-Za-z0-9]*\\.)[-A-Za-z0-9\\.]+):[0-9]*)?/[-A-Za-z0-9_\\$\\.\\+\\!\\*\\(\\),;:@&amp;=\\?/~\\#\\%]*[^]'\\.}&gt;\\),\\\""]"")

@register.filter(""urlify2"")
def urlify2(value):
    return urlfinder.sub(r'&lt;a href=""\1""&gt;\1&lt;/a&gt;', value)
</code></pre>
"
321950,"<pre><code>import pexpect
child = pexpect.spawn('server stop')
child.expect_exact('Password:')

child.sendline('password')

print ""Stopping the servers...""

index = child.expect_exact(['Server processes successfully stopped.', 'Server is not running...'], 60)
child.expect(pexpect.EOF)
</code></pre>

<p>Did the trick! Pexpect rules!</p>
"
322393,"<p><a href=""http://www.jython.org"" rel=""nofollow"">Jython</a> and <a href=""http://www.codeplex.com/IronPython"" rel=""nofollow"">IronPython</a> give access to great Java &amp; .NET SOAP libraries.</p>

<p>If you need CPython, <a href=""http://pywebsvcs.sourceforge.net/"" rel=""nofollow"">ZSI</a> has been flaky for me, but it could be possible to use a tool like <a href=""http://robin.python-hosting.com/"" rel=""nofollow"">Robin</a> to wrap a good C++ SOAP library such as <a href=""http://gsoap2.sourceforge.net/"" rel=""nofollow"">gSOAP</a> or <a href=""http://ws.apache.org/axis/cpp/index.html"" rel=""nofollow"">Apache Axis C++</a></p>
"
51414,"<p>Some experimentation and I figured this one out:</p>

<p>def methodA(arg, **kwargs):
    methodB(""argvalue"", **kwargs)</p>

<p>Seems obvious now...</p>
"
321134,"<p>The problem with existing suggestions is the walk method. This recursively, depth-first, walks the entire tree, including children.</p>

<p>Look at the source of the walk method, and adapt it to skip the recursive part. A cursory reading suggests:</p>

<pre><code>if msg.is_multipart():
    for part in msg.get_payload():
          """""" Process message, but do not recurse """"""
          filename = part.get_filename()
</code></pre>

<p>Reading the pydocs, get_payload should return a list of the top level messages, without recursing.</p>
"
321274,"<p>Well, use AJAX to call the PHP script (yes, you will need apache) and display the output. Adding a custom JS to plone is trivial and this abstract the technology issue.</p>

<p>Just be sure this is not a critical feature. Some users still deactivate JS and the web page should therefor degrade itself nicely.</p>
"
321316,"<p>Your URL string shouldn't be </p>

<pre><code>""http://www.woarl.com/board/ucp.php?mode=login""[logindata]
</code></pre>

<p>But</p>

<pre><code> ""http://www.woarl.com/board/ucp.php?mode=login"", logindata
</code></pre>

<p>I think, because [] is for array and it require an integer. I might be wrong cause I haven't done a lot of Python.</p>
"
321317,"<p>How about using a comma between the string,<code>""http:...""</code> and the urlencoded data, <code>[logindata]</code>?</p>
"
110788,"<p>In model class you would probably have to add ""order"" field, to maintain specific order (eg. item with order = 10 is the last one and order = 1 is the first one). Then you can add a JS code in admin change_list template (see <a href=""http://docs.djangoproject.com/en/dev/ref/contrib/admin/#modeladmin-media-definitions"" rel=""nofollow"">this</a>) to maintain drag&amp;drop feature. Finally change ordering in Meta of model to something like ['order'].</p>
"
273547,"<p>Perl 6 is also going through this type of split right now. Perl 5 programs won't run directly on Perl 6, but there will be a translator to translate the code into a form that may work (I don't think it can handle 100% of the cases).</p>

<p><a href=""http://en.wikipedia.org/wiki/Perl_6"" rel=""nofollow"">Perl 6</a> even has its own article on Wikipedia.</p>
"
273554,"<p>First, here is a <a href=""http://video.google.com/videoplay?docid=1189446823303316785"" rel=""nofollow"">video talk</a> about the changes Python will go through.
Second, changes are no good.
Third, I for one welcome evolution and believe it is necessary.</p>
"
112397,"<p>I believe that Bryan's answer is probably the best general solution.  However, you may also want to look at the <a href=""http://www.pythonware.com/library/tkinter/introduction/place.htm"" rel=""nofollow"">place</a> geometry manager.  The <strong>place</strong> geometry manager lets you specify the exact size and position of the widget... which can get tedious quickly, but will get the job done.</p>
"
139009,"<p>To make new list elements appear in correct places, you have to re-layout the grid after adding new elements to it. For example, to add a few new items, you could call:</p>

<pre><code>def addNewSkills(self, newSkillList):
    '''newSkillList is a list of skill names you want to add'''
    for skillName in newSkillList:
        newRadioButton = wx.RadioButton(self, -1, skillName)
        self.grid1.Add(newRadioButton) # appears in top-left corner of the panel
    self.Layout() # all newly added radio buttons appear where they should be
    self.Fit() # if you need to resize the panel to fit new items, this will help
</code></pre>

<p>where <code>self.grid1</code> is the sizer you keep all your radio buttons on.</p>
"
139047,"<p>There is no way to see dragged data in <code>OnEnter</code> and <code>OnDragOver</code> methods.</p>

<p>The only solution I found is to store the dragged item in some instance variable that is then readable inside these methods.</p>
"
237190,"<p>You could use DirectInput with C/C++ (there's probably also bindings in other languages).  You use <a href=""http://msdn.microsoft.com/en-us/library/bb205950(VS.85).aspx"" rel=""nofollow""><code>IDirectInput8::EnumDevices()</code></a> (using DX8; same function, different interface in other versions of DirectX) to get a list of all attached devices.  Then, you create the devices and poll them <a href=""http://msdn.microsoft.com/en-us/library/bb205975(VS.85).aspx"" rel=""nofollow""><code>IDirectInputDevice8::Poll()</code></a>.  This should almost definitely work with any number of mice, keyboards, and other input devices.  MSDN has really good documentation on this.</p>
"
237215,"<p>No Python libraries exist that I know of, but here's a perl one:
<a href=""http://packages.debian.org/sid/libapache-configfile-perl"" rel=""nofollow"">http://packages.debian.org/sid/libapache-configfile-perl</a></p>

<pre><code>Package: libapache-configfile-perl
Priority: optional
Section: interpreters
Installed-Size: 124
Maintainer: Michael Alan Dorman
Version: 1.18-1
Depends: perl (&gt;= 5.6.0-16)
Description: Parse an Apache style httpd.conf configuration file

This module parses the Apache httpd.conf, or any
compatible config file, and provides methods for
you to access the values from the config file.
</code></pre>

<p>If you do rewrite it in Python, please update your post to mention the name of your package on PyPI! :)</p>
"
237236,"<p>See answer above about bicop.</p>

<p>As an aside, the Python Package Index at <a href=""http://pypi.python.org/pypi"" rel=""nofollow"">http://pypi.python.org/pypi</a> is a great place to look for Python packages.</p>

<p><strong>EDIT</strong>: The below may still be helpful to someone trying to figure out simple parsing, but bicop is apparently an existing solution.</p>

<p>If someone has modified the config by hand, and you don't want to overwrite it, does that imply that you wish to insert/remove lines from an existing config, leaving all comments etc intact?  That does prevent parsing then re-outputting the config, but that's a positive as well -- you don't need to fully parse the file to accomplish your goal.</p>

<p>To add a record, you might try a simple approach like</p>

<pre><code># define zone_you_care_about and line_you_wish_to_insert first, then:
for line in bindfile.read():
    out.write(line + '\n')
    if ('zone ""%s"" in' % zone_you_care_about) in line:
        out.write(line_you_wish_to_insert)
</code></pre>

<p>Similar code works for removing a line:</p>

<pre><code># define zone_you_care_about and relevant_text_to_remove, then:
for line in bindfile.read():
    if not relevant_text_to_remove in line:
        out.write(line + '\n')
</code></pre>

<p>You may get as far as you need with simple snippets of code like this.</p>
"
237362,"<p>It doesn't?</p>

<pre><code>&gt;&gt;&gt; ""abc"".__len__()
3
</code></pre>
"
237410,"<p>I have this vague feeling that BeOS used to let one pair a mouse and keyboard and have separate active windows and inputs.  Wow... that was a long time ago.  I thought that it would be very interesting for ""paired"" programming.</p>
"
321339,"<p>If you do a type on logindata, you can see that it is a string:</p>

<pre><code>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; logindata = urllib.urlencode({'username': 'x', 'password': 'y'})
&gt;&gt;&gt; type(logindata)
&lt;type 'str'&gt;
</code></pre>

<p>Putting it in brackets ([]) puts it in a list context, which isn't what you want.</p>
"
321616,"<p>If actually look at the page, you see that the login link takes you to <a href=""http://www.woarl.com/board/ucp.php?mode=login"" rel=""nofollow"">http://www.woarl.com/board/ucp.php?mode=login</a></p>

<p>That page has the login form and submits to <a href=""http://www.woarl.com/board/ucp.php?mode=login"" rel=""nofollow"">http://www.woarl.com/board/ucp.php?mode=login</a> again with POST.</p>

<p>You'll then have to extract the cookies that are probably set, and put those in a CookieJar or similar.</p>
"
51663,"<p>The <a href=""https://docs.python.org/2.7/library/os.html"" rel=""nofollow"">os.statvfs()</a> function is a better way to get that information for Unix-like platforms (including OS X). The Python documentation says ""Availability: Unix"" but it's worth checking whether it works on Windows too in your build of Python (ie. the docs might not be up to date).</p>

<p>Otherwise, you can use the <a href=""http://sourceforge.net/projects/pywin32/"" rel=""nofollow"">pywin32</a> library to directly call the <a href=""http://msdn.microsoft.com/en-us/library/aa364937(VS.85).aspx"" rel=""nofollow"">GetDiskFreeSpaceEx</a> function.</p>
"
166213,"<p>There are various ways. You can put a try..catch block in the wxApplication::OnInit, however, that would not always work with Gtk. </p>

<p>A nice alternative would be to override the Application::HandleEvent in your wxApplication derived class, and write a code like this:</p>

<pre><code>void Application::HandleEvent(wxEvtHandler* handler, wxEventFunction func, wxEvent&amp; event) const
{
    try
    {
        wxAppConsole::HandleEvent(handler, func, event);
    }
    catch (const std::exception&amp; e)
    {
        wxMessageBox(std2wx(e.what()), _(""Unhandled Error""),
            wxOK | wxICON_ERROR, wxGetTopLevelParent(wxGetActiveWindow()));
    }
}
</code></pre>

<p>It's a C++ example, but you can surely translate to Python easily.</p>
"
166332,"<p>Maybe IronPython can provide something for you? I bet those .exe/.dll-files can be pretty locked down. Not sure how such features work on mono, thus no idea how this works on Linux/OS X...</p>
"
205152,"<p>From a separate session, can you query the DBA_BLOCKERS and DBA_WAITERS data dictionary tables and post the results?  That will tell you if your session is getting blocked by a lock held by some other session, as well as what other session is holding the lock.</p>
"
205235,"<p>I heartily suggest <a href=""http://www.djangoproject.com/"" rel=""nofollow"">Django</a> + <a href=""http://www.prototypejs.org/"" rel=""nofollow"">Prototype</a>.  I think they cover most of the bases you are looking at and they are very straight-forward to get started with.  Also you could use them on the GAE if that is the route you decide to take, although you should keep in mind that the GAE does not support Cron jobs, which can limit your functionality.</p>
"
205424,"<p>I'd take a look at <a href=""http://web2py.com/"" rel=""nofollow"">web2py</a>. It's a full-stack framework that requires no configuration and is easy to try out - everything can be driven via a web interface if you choose. I've dabbled with other frameworks and it's by far the easiest to setup and includes lots of helpful things for free. The documentation is good and there is a howto for getting it to work under Google App Engine. It comes with libraries and a howto for Ajax. As far as I remember the licence doesn't restrict using it in commercial applications.</p>
"
205600,"<p>Take a look at <a href=""http://extjs.com/"" rel=""nofollow"">ExtJS</a>.  It's got the best widget library out there.  They offer a commercial license and an open-source license.  There are several python developers in the community and there is some integration with Google APIs.</p>
"
207478,"<p>Just an elaboration on what Alex Coventry said, another Alex (Martelli) addressed a similar question on the <code>comp.lang.python</code> newsgroup years back.  He examines the semantic difference of what a person intended vs. what he got (by using instance variables).</p>

<p><a href=""http://groups.google.com/group/comp.lang.python/msg/5914d297aff35fae?hl=en"" rel=""nofollow"">http://groups.google.com/group/comp.lang.python/msg/5914d297aff35fae?hl=en</a></p>
"
54034,"<p>jQuery is a fine library, but also check out the <a href=""http://www.prototypejs.org/"" rel=""nofollow"">Prototype JavaScript framework</a>. It really turns JavaScript from being an occasionally awkward language into a beautiful and elegant language.</p>
"
55188,"<p>This snippet will do so.  If you're going to do it frequently, you might want to make a 'sortkeys' method or somesuch to make it easier on the eyes.</p>

<pre><code>keys = list(d.keys())
keys.sort()
for key in keys:
    print d[key]
</code></pre>

<p>Edit:  dF's solution is better -- I forgot all about sorted().</p>
"
320245,"<p>It seems a little weird that it is warning about different architectures when looking for /Developer/SDKs/MacOSX10.4u.sdk while linking - can you give us some more detail about your build environment (version of XCode, GCC, Python, $PATH etc)</p>

<p>Alternatively, won't any of the OpenCV binaries available work for you?</p>
"
275195,"<p>I found this in the Cheetah source code (<a href=""http://www.koders.com/python/fid549827F97513858275EEA43DC0135AC97AEAEF57.aspx"" rel=""nofollow"">here</a>)</p>

<pre><code>htmlCodes = [
    ['&amp;', '&amp;amp;'],
    ['&lt;', '&amp;lt;'],
    ['&gt;', '&amp;gt;'],
    ['""', '&amp;quot;'],
]
htmlCodesReversed = htmlCodes[:]
htmlCodesReversed.reverse()
def htmlDecode(s, codes=htmlCodesReversed):
    """""" Returns the ASCII decoded version of the given HTML string. This does
        NOT remove normal HTML tags like &lt;p&gt;. It is the inverse of htmlEncode().""""""
    for code in codes:
        s = s.replace(code[1], code[0])
    return s
</code></pre>

<p>not sure why they reverse the list,
 I think it has to do with the way they encode, so with you it may not need to be reversed.
Also if I were you I would change htmlCodes to be a list of tuples rather than a list of lists...
this is going in my library though :)</p>

<p>i noticed your title asked for encode too, so here is Cheetah's encode function.</p>

<pre><code>def htmlEncode(s, codes=htmlCodes):
    """""" Returns the HTML encoded version of the given string. This is useful to
        display a plain ASCII text string on a web page.""""""
    for code in codes:
        s = s.replace(code[0], code[1])
    return s
</code></pre>
"
138545,"<p>Have you looked at <a href=""http://4suite.org/index.xhtml"" rel=""nofollow"">4suite</a>?</p>
"
236549,"<p>Looking up <a href=""http://pypi.python.org/pypi?%3Aaction=search&amp;term=webmail&amp;submit=search"" rel=""nofollow"">webmail</a> on <a href=""http://pypi.python.org/pypi"" rel=""nofollow"">pypi</a> gives <a href=""http://pypi.python.org/pypi/Posterity/"" rel=""nofollow"">Posterity</a>.</p>

<p>There is very probably some way to build a webmail with very little work using <a href=""http://www.zope.org/Products/Zope3"" rel=""nofollow"">Zope3</a> components, or some other CMS.</p>

<p>I guess if you are writing a webapp, you are probably using one of the popular frameworks. We would need to know which one to give a more specific answer.</p>
"
236691,"<p>if i'm not mistaken, you can consume Amazon Web Services via REST as well as SOAP. using REST with python would be <em>much</em> easier. </p>
"
138594,"<p>Not with plain regexp. Regular expressions have no ""memory"" so they cannot distinguish between being ""inside"" or ""outside"" quotes. </p>

<p>You need something more powerful, for example using <a href=""http://gema.sourceforge.net"" rel=""nofollow"">gema</a> it would be straighforward:</p>

<pre><code>'&lt;repl&gt;'=$0
repl:x=P
</code></pre>
"
138620,"<p>Similar discussion about balanced text replaces: <a href=""http://stackoverflow.com/questions/133601/can-regular-expressions-be-used-to-match-nested-patterns#133771"">http://stackoverflow.com/questions/133601/can-regular-expressions-be-used-to-match-nested-patterns#133771</a></p>

<p>Although you can try this in Vim, but it works well only if the string is on one line, and there's only one pair of 's.</p>

<pre><code>:%s:\('[^']*\)x\([^']*'\):\1P\2:gci
</code></pre>

<p>If there's one more pair or even an unbalanced ', then it could fail. That's way I included the <code>c</code> a.k.a. confirm flag on the <code>ex</code> command.</p>

<p>The same can be done with sed, without the interaction - or with <code>awk</code> so you can add some interaction.</p>

<p>One possible solution is to break the lines on pairs of <code>'</code>s then you can do with vim solution. </p>
"
138666,"<p>Only simplest sites are easy to upgrade.</p>

<p>Expect real pain if your site happen to be for <em>non-ASCII</em> part of the world (read: anywhere outside USA and UK). The most painful change in Django was switching from bytestrings to unicode objects internally - now you have to find all places where you use bytestrings and change this to unicode. Worst case is the template rendering, you'll never know you forgot to change one variable until you get UnicodeError.</p>

<p>Other notable thing: manipulators (<em>oldforms</em>) have gone and you have no other way than to rewrite all parts with forms (<em>newforms</em>).</p>

<p>If this is your case and your project is larger than 2-3 apps, I'd be rather reluctant to upgrade until really necessary.</p>
"
138886,"<p>for loops in MATLAB used to be slow, but this is not true anymore.</p>

<p>So Vectorizing is not always the miracle solution. just use the profiler, and tic and toc functions to help you identify possible bottlenecks</p>
"
112541,"<p>Try using regex to search through your list of words, e.g. /^word/ and report all matches.</p>
"
112562,"<p>If you need to be <em>really</em> fast, use a tree:</p>

<p>build an array and split the words in 26 sets based on the first letter, then split each item in 26 based on the second letter, then again.</p>

<p>So if your user types ""abd"" you would look for Array[0][1][3] and get a list of all the words starting like that. At that point your list should be small enough to pass over to the client and use javascript to filter.</p>
"
273681,"<p>I have used soapui by a maven plugin. It can create junit-linke reports to be run and analysed like unit tests. This can be easily integrated in continious build, also with the free distribution of soapui.</p>
"
140208,"<p>Of course. See the 'sub' and 'subn' methods of compiled regular expressions, or the 're.sub' and 're.subn' functions. You can either make it replace the matches with a string argument you give, or you can pass a callable (such as a function) which will be called to supply the replacement. See <a href=""https://docs.python.org/library/re.html"" rel=""nofollow"">https://docs.python.org/library/re.html</a></p>
"
110817,"<p>A partial answer: the easily readable format you are looking for might be <a href=""http://www.docbook.org/"" rel=""nofollow"">DocBook</a>. From there it is very easy to go to PDF, html, RTF, etc. etc.</p>
"
235448,"<p>Looking at the Python source code (2.4.5):</p>

<ul>
<li><p>Modules/posixmodule.c gets the environ in convertenviron() which gets run at startup (see INITFUNC) and stores the environment in a platform-specific module (nt, os2, or posix)</p></li>
<li><p>Lib/os.py looks at sys.builtin_module_names, and imports all symbols from either posix, nt, or os2</p></li>
</ul>

<p>So yes, it gets decided at startup.  os.environ is not going to be helpful here.</p>

<p>If you really want to do this, then the most obvious approach that comes to mind is to create your own custom C-based python module, with a getenv that always invokes the system call.</p>
"
235727,"<p>A key factor for LINQ is the ability of the compiler to generate expression trees.
I am using a macro in Nemerle that converts a given Nemerle expression into an Expression tree object.
I can then pass this to the Where/Select/etc extension methods on IQueryables.
It's not quite the syntax of C# and VB, but it's close enough for me. </p>

<p>I got the Nemerle macro via a link on this post: 
<a href=""http://groups.google.com/group/nemerle-dev/browse_thread/thread/99b9dcfe204a578e"" rel=""nofollow"">http://groups.google.com/group/nemerle-dev/browse_thread/thread/99b9dcfe204a578e</a></p>

<p>It should be possible to create a similar macro for Boo. It's quite a bit of work however, given the large set of possible expressions you need to support.
Ayende has given a proof of concept here:
<a href=""http://ayende.com/Blog/archive/2008/08/05/Ugly-Linq.aspx"" rel=""nofollow"">http://ayende.com/Blog/archive/2008/08/05/Ugly-Linq.aspx</a></p>
"
236221,"<p>You can build one, using <a href=""http://docs.python.org/library/email.html"" rel=""nofollow"">email</a> for generating and parsing mail, <a href=""http://docs.python.org/library/imaplib.html#module-imaplib"" rel=""nofollow"">imaplib</a> for reading (and managing) incoming mail from your mail server, and <a href=""http://docs.python.org/library/smtplib.html"" rel=""nofollow"">smtplib</a> for sending mail to the world.</p>
"
139056,"<p>It will come down to you using the QScrollArea, it is a widget that implements showing something that is larger than the available space. You will not need to use QScrollBar directly. I don't have a PyQt example but there is a C++ example in the QT distribution it is called the ""Image Viewer"". The object hierarchy will still be the same </p>
"
139467,"<pre><code>Pattern:     (?s)\G((?:^[^']*'|(?&lt;=.))(?:'[^']*'|[^'x]+)*+)x
Replacement: \1P
</code></pre>

<ol>
<li><code>\G</code> &mdash; Anchor each match at the end of the previous one, or the start of the string.</li>
<li><code>(?:^[^']*'|(?&lt;=.))</code> &mdash; If it is at the beginning of the string, match up to the first quote.</li>
<li><code>(?:'[^']*'|[^'x]+)*+</code> &mdash; Match any block of unquoted characters, or any (non-quote) characters up to an 'x'.</li>
</ol>

<p>One sweep trough the source string, except for a single character look-behind.</p>
"
110821,"<p>If you're using your own transactions (not the default admin application), you can save the before and after versions of your object.  You can save the before version in the session, or you can put it in ""hidden"" fields in the form.  Hidden fields is a security nightmare.  Therefore, use the session to retain history of what's happening with this user.</p>

<p>Additionally, of course, you do have to fetch the previous object so you can make changes to it.  So you have several ways to monitor the differences.</p>

<pre><code>def updateSomething( request, object_id ):
    object= Model.objects.get( id=object_id )
    if request.method == ""GET"":
        request.session['before']= object
        form= SomethingForm( instance=object )
    else request.method == ""POST""
        form= SomethingForm( request.POST )
        if form.is_valid():
            # You have before in the session
            # You have the old object
            # You have after in the form.cleaned_data
            # Log the changes
            # Apply the changes to the object
            object.save()
</code></pre>
"
274004,"<p>I don't know wxWidgets, but based on what I know of Python, I'm guessing that you need to change:</p>

<pre><code>self.Bind(wx.EVT_MENU, self.subPanel(None, -1, 'TEST'),id=1)
</code></pre>

<p>to:</p>

<pre><code>self.Bind(wx.EVT_MENU, subPanel(None, -1, 'TEST'),id=1)
</code></pre>

<p>""subPanel"" is a globally defined class, not a member of ""self"" (which is a mainPanel).</p>

<p>Edit: Ah, ""Bind"" seems to bind an action to a function, so you need to give it a function that creates the other class.  Try the following.  It still doesn't work, but at least it now crashes during the subPanel creation.</p>

<pre><code>self.Bind(wx.EVT_MENU, lambda(x): subPanel(None, -1, 'TEST'),id=1)
</code></pre>
"
274145,"<p>You should handle the button click event, and create the panel in your button handler (like you already do with your OnQuit method).</p>

<p>I think the following code basically does what you're after -- creates a new Frame when the button is clicked/menu item is selected.</p>

<pre><code>import wx

class MyFrame(wx.Frame):
    def __init__(self, parent, title=""My Frame"", num=1):

        self.num = num
        wx.Frame.__init__(self, parent, -1, title)
        panel = wx.Panel(self)

        button = wx.Button(panel, -1, ""New Panel"")
        button.SetPosition((15, 15))
        self.Bind(wx.EVT_BUTTON, self.OnNewPanel, button)
        self.Bind(wx.EVT_CLOSE, self.OnCloseWindow)

        # Now create a menu
        menubar = wx.MenuBar()
        self.SetMenuBar(menubar)

        # Panel menu
        panel_menu = wx.Menu()

        # The menu item
        menu_newpanel = wx.MenuItem(panel_menu,
                                    wx.NewId(),
                                    ""&amp;New Panel"",
                                    ""Creates a new panel"",
                                    wx.ITEM_NORMAL)
        panel_menu.AppendItem(menu_newpanel)

        menubar.Append(panel_menu, ""&amp;Panels"")
        # Bind the menu event
        self.Bind(wx.EVT_MENU, self.OnNewPanel, menu_newpanel)

    def OnNewPanel(self, event):
        panel = MyFrame(self, ""Panel %s"" % self.num, self.num+1)
        panel.Show()

    def OnCloseWindow(self, event):
        self.Destroy()

def main():
    application = wx.PySimpleApp()
    frame = MyFrame(None)
    frame.Show()
    application.MainLoop()

if __name__ == ""__main__"":
    main()
</code></pre>

<p><hr /></p>

<p><strong>Edit</strong>: Added code to do this from a menu.</p>
"
274366,"<blockquote>
  <p>I want to generate a WSDL that I can give to the web folks, ....</p>
</blockquote>

<p>You can try <a href=""http://soaplib.github.com/soaplib/2_0/"" rel=""nofollow"">soaplib</a>. It has on-demand WSDL generation.</p>
"
275164,"<p>Because of abuse by spammers, many Tor egress nodes decline to emit port 25 (SMTP) traffic, so you may have problems.</p>
"
320408,"<p>This is what I did for my posix app:</p>

<p>When your app exists call the kill() method of this class:
<a href=""http://www.pixelbeat.org/libs/subProcess.py"" rel=""nofollow"">http://www.pixelbeat.org/libs/subProcess.py</a></p>

<p>Example use here:
<a href=""http://code.google.com/p/fslint/source/browse/trunk/fslint-gui#608"" rel=""nofollow"">http://code.google.com/p/fslint/source/browse/trunk/fslint-gui#608</a></p>
"
52136,"<p>I don't think AuthKit is actively maintained anymore. It does use the Paste (<a href=""http://pythonpaste.org"" rel=""nofollow"">http://pythonpaste.org</a>) libs though for things like HTTP Basic/Digest authentication. I would probably go ahead and take a look at the source for some inspiration and then use the Paste tools if you want to use HTTP authentication. </p>

<p>There is also OpenID which is very easy to setup. The python-openid libs have an excellent example that is easy to translate to WSGI for wrapping a Pylons app. You can look at an example:</p>

<p><a href=""http://ionrock.org/hg/brightcontent-main/file/d87b7dcc606c/brightcontent/plugins/openidauth.py"" rel=""nofollow"">http://ionrock.org/hg/brightcontent-main/file/d87b7dcc606c/brightcontent/plugins/openidauth.py</a></p>
"
321040,"<pre><code>While raw_input(""loop again? y/n "") != 'n':
    do_stuff()
</code></pre>
"
55654,"<p>Use Twisted Manhole. Docs are a bit lacking, but it's easy enough to set up a telnet-based remote server and it comes with a GTK-based GUI.</p>

<ul>
<li><a href=""http://twistedmatrix.com/"" rel=""nofollow"">Main Twisted site</a></li>
<li><a href=""http://twistedmatrix.com/documents/8.1.0/api/twisted.manhole.html"" rel=""nofollow"">twisted.manhole API docs</a></li>
</ul>
"
320105,"<p>I've written iterative tree-traversal code in the past: it's very ugly, and not fast, unless you know <em>exactly</em> how many children not only each subtree will have, but how many levels there are.</p>
"
108204,"<p>This is an example from Excel documentation:</p>

<pre><code>With Worksheets(""Sheet1"").Range(""B1"")
    .Value = ""New Title""
    .Characters(5, 5).Font.Bold = True
End With
</code></pre>

<p>So the Characters property of the cell you want to manipulate is the answer to your question. It's used as Characters(<em>start</em>, <em>length</em>).</p>

<p>PS: I've never used the module in question, but I've used Excel COM automation in python scripts. The Characters property is available using win32com.</p>
"
141084,"<p>If you only need <em>basic</em> support, and your XML isn't too crazy, consider removing the XSLT element from the equation and just using a DOM/SAX parser.</p>

<p>Here's some info from the <a href=""http://wiki.python.org/"" rel=""nofollow"">PythonInfo Wiki</a>:</p>

<blockquote>
  <p>[DOM] sucks up an entire XML file,
  holds it in memory, and lets you work
  with it. Sax, on the other hand, emits
  events as it goes step by step through
  the file.</p>
</blockquote>

<p>What do you think?</p>
"
141214,"<p>Nathan Borror has a great package of 'basic apps' that has a blog. These are well written, well documented apps that you should try out, get ideas from, etc.</p>

<p><a href=""http://code.google.com/p/django-basic-apps/"" rel=""nofollow"">http://code.google.com/p/django-basic-apps/</a></p>
"
109642,"<p>In addition to what has been mentioned previously, I wrote a simple Python audio editor.
<a href=""http://code.google.com/p/yaalp/source/browse/#svn/trunk"" rel=""nofollow"">http://code.google.com/p/yaalp/source/browse/#svn/trunk</a>
See main.py.</p>

<p>It also has audio manipulation and some effects.</p>

<p>Code's GPL, so this could be a starting point for you.</p>
"
109803,"<p>On Python 2.5.2 on Linux 2.6.24, your code works exactly as you describe your desired results (if a signal is received while still processing a previous signal, the new signal is processed immediately after the first one is finished).</p>

<p>On Python 2.4.4 on Linux 2.6.16, I see the problem behavior you describe.</p>

<p>I don't know whether this is due to a change in Python or in the Linux kernel.</p>
"
275578,"<p>I run a Linux virtual machine on my Mac laptop. This allows me to keep my development environment and production environments perfectly in sync (and make snapshots for easy experimentation / rollback). I've found <a href=""http://www.vmware.com/download/fusion/"" rel=""nofollow"">VMWare Fusion</a> works the best, but there are free open source alternatives such as <a href=""http://www.virtualbox.org/wiki/Downloads"" rel=""nofollow"">VirtualBox</a> if you just want to get your feet wet.</p>

<p>I share the source folders from the guest Linux operating system on my Mac and edit them with the Mac source editor of my choosing (I use <a href=""http://en.wikipedia.org/wiki/Eclipse_%28software%29"" rel=""nofollow"">Eclipse</a> / <a href=""https://en.wikipedia.org/wiki/PyDev"" rel=""nofollow"">PyDev</a> because the otherwise excellent <a href=""http://en.wikipedia.org/wiki/TextMate"" rel=""nofollow"">TextMate</a> doesn't deal well with Chinese text yet). I've documented the software setup for the guest Linux operating system <a href=""http://wiki.slicehost.com/doku.php?id=dream_geodjango_server"" rel=""nofollow"">here</a>; it's optimized for serving multiple <a href=""http://en.wikipedia.org/wiki/Django_%28web_framework%29"" rel=""nofollow"">Django</a> applications (including geodjango).</p>

<p>For extra added fun, you can edit your Mac's /etc/hosts file to make yourdomainname.com resolve to your guest Linux boxes internal IP address and have a simple way to work on / test multiple web projects online or offline without too much hassle.</p>
"
233967,"<p>On my system <code>_sqlite3.so</code> located at:</p>

<pre><code>'/usr/lib/python2.6/lib-dynload/_sqlite3.so'
</code></pre>

<p>Check that the directory is in your <code>sys.path</code>:</p>

<pre><code>&gt;&gt;&gt; import sys; print(filter(lambda p: 'lib-dynload' in p, sys.path))
['/usr/lib/python2.6/lib-dynload']
</code></pre>
"
234674,"<p>Here's a simplistic parser (tested against your example input) that introduces the State design pattern.</p>

<p>In real world, you probably want to build a real parser using something like <a href=""http://www.dabeaz.com/ply/"" rel=""nofollow"">PLY</a>.</p>

<pre><code>class SimpleParser(object):

    def __init__(self):
        self.mode = None
        self.result = None

    def parse(self, text):
        self.initial_mode()
        self.result = []
        for word in text.split(' '):
            self.mode.handle_word(word)
        return self.result

    def initial_mode(self):
        self.mode = InitialMode(self)

    def bracket_mode(self):
        self.mode = BracketMode(self)

    def quote_mode(self):
        self.mode = QuoteMode(self)


class InitialMode(object):

    def __init__(self, parser):
        self.parser = parser

    def handle_word(self, word):
        if word.startswith('['):
            self.parser.bracket_mode()
            self.parser.mode.handle_word(word[1:])
        elif word.startswith('""'):
            self.parser.quote_mode()
            self.parser.mode.handle_word(word[1:])
        else:
            self.parser.result.append(word)


class BlockMode(object):

    end_marker = None

    def __init__(self, parser):
        self.parser = parser
        self.result = []

    def handle_word(self, word):
        if word.endswith(self.end_marker):
            self.result.append(word[:-1])
            self.parser.result.append(' '.join(self.result))
            self.parser.initial_mode()
        else:
            self.result.append(word)

class BracketMode(BlockMode):
    end_marker = ']'

class QuoteMode(BlockMode):
    end_marker = '""'
</code></pre>
"
53713,"<p>Are you using TCP to access the Postgres? In that case Nagle is messing with your timing.</p>
"
53791,"<p>Why don't you try <a href=""http://grinder.sourceforge.net"" rel=""nofollow"">The Grinder 3</a> to load test your server, it comes with all this and more prebuilt, and it supports python as a scripting language</p>
"
207117,"<p><i>NOTE: copy of Moe's answer that can be selected as chosen answer</i></p>

<p>woo!
solved it on my own.</p>

<p>Use </p>

<pre><code>self.combo['selection']
</code></pre>

<p>instead of</p>

<pre><code>self.combo['value']
</code></pre>
"
207310,"<p>I think your best bet is to match for all curly braced entries, and then check against Python itself whether or not it's valid Python, for which <a href=""http://www.python.org/doc/2.5.2/lib/compiler.html"" rel=""nofollow"">compiler</a> would be helpful.</p>
"
207365,"<p>""ftplib"" is the standard ftp library built in to Python. In Python 2.6, it had a callback parameter added to the method used for uploading.</p>

<p>That callback is a function you provide to the library; it is called once for every block that is completed.</p>

<p>Your function can send a message to the GUI (perhaps on a different thread/process, using standard inter-thread or inter-process communications) to tell it to update its progress bar.</p>

<p><a href=""http://docs.python.org/library/ftplib.html"" rel=""nofollow"" title=""Python 2.6 ftplib manual"">Reference</a></p>
"
207934,"<p>If you data transfer runs in a separate thread from the GUI, you can use wx.CallAfter() whenever you have to update you progress bar from the data transfer thread. </p>

<p>First, using CallAfter() is mandatory as wxPython function cannot be called from child threads.</p>

<p>Second, this will decouple the execution of the data transfer from the GUI in the main thread.</p>

<p>Note that CallAfter() only works for threads, not for separate processes. In that case, using the multiprocessing package should help.</p>
"
207943,"<p>I haven't tried it myself (yes, I just used Google and followed some links), but <a href=""http://www.lag.net/paramiko/"" rel=""nofollow"">http://www.lag.net/paramiko/</a> seems to be the recommended solution. From a cursory glance, it's an SSH implementation in pure Python, which allows tunneling for things like FTP.</p>

<p>Update: a commenter pointed out that I mixed up sftp and ftps, sorry. I still suggest at least investigating Paramiko briefly to see if it matches the requirements.</p>
"
163536,"<p>Here is the <a href=""http://code.djangoproject.com/wiki/CookBookThreadlocalsAndUser"" rel=""nofollow"">CookBook Threadlocals And User</a></p>
"
163911,"<p>Try <a href=""http://www.ibm.com/developerworks/linux/library/l-qt/"" rel=""nofollow"">PyQt</a> which binds python to QT graphics library. There are some other links at the end of that article:</p>

<ul>
<li>Anygui</li>
<li>PyGTK</li>
<li>FXPy</li>
<li>wxPython</li>
<li>win32ui </li>
</ul>
"
163935,"<p>If you are on Windows and you want to use WPF (as opposed to an alternative), you can use it with <a href=""http://www.codeplex.com/Wiki/View.aspx?ProjectName=IronPython"" rel=""nofollow"">IronPython</a> - a .NET version of python.</p>

<p>Here's a quick example: <a href=""http://stevegilham.blogspot.com/2007/07/hello-wpf-in-ironpython.html"" rel=""nofollow"">http://stevegilham.blogspot.com/2007/07/hello-wpf-in-ironpython.html</a></p>
"
317979,"<p>Take a look at the <a href=""http://scipy.org/"" rel=""nofollow"">sciPy Project</a>, it should have what you need.</p>
"
141872,"<p>""implement a Domain Specific Language""</p>

<p>""nobody is going to want to install a server that downloads and executes arbitrary Python code at runtime""</p>

<p>I want a DSL but I don't want Python to be that DSL.  Okay.  How will you execute this DSL?  What runtime <em>is</em> acceptable if not Python?</p>

<p>What if I have a C program that happens to embed the Python interpreter?  Is that acceptable?</p>

<p>And -- if Python is not an acceptable runtime -- why does this have a Python tag?</p>
"
140275,"<p>I think we're going to need a bit more information here.  Let me know if any of the following is based on incorrect assumptions.</p>

<p>First of all, as you pointed out yourself, there already exists a DSL for selecting rows from arbitrary tables-- it is called ""SQL"".  Since you don't want to reinvent SQL, I'm assuming that you only need to query from a single table with a fixed format.</p>

<p>If this is the case, you probably don't need to implement a DSL (although that's certainly one way to go); it may be easier, if you are used to Object Orientation, to create a Filter object.  </p>

<p>More specifically, a ""Filter"" collection that would hold one or more SelectionCriterion objects.  You can implement these to inherit from one or more base classes representing types of selections (Range, LessThan, ExactMatch, Like, etc.) Once these base classes are in place, you can create column-specific inherited versions which are appropriate to that column.  Finally, depending on the complexity of the queries you want to support, you'll want to implement some kind of connective glue to handle AND and OR and NOT linkages between the various criteria.</p>

<p>If you feel like it, you can create a simple GUI to load up the collection; I'd look at the filtering in Excel as a model, if you don't have anything else in mind.</p>

<p>Finally, it should be trivial to convert the contents of this Collection to the corresponding SQL, and pass that to the database.</p>

<p>However: if what you are after is simplicity, and your users understand SQL, you could simply ask them to type in the contents of a WHERE clause, and programmatically build up the rest of the query.  From a security perspective, if your code has control over the columns selected and the FROM clause, and your database permissions are set properly, and you do some sanity checking on the string coming in from the users, this would be a relatively safe option.</p>
"
140737,"<p>Use a Distinguished Name to log on your system.<code>""CN=Your user,CN=Users,DC=b2t,DC=local""</code>
It should work on any LDAP system, including AD</p>
"
276015,"<p>I've never used it except a few quick trial runs, but <a href=""http://winpdb.org/"" rel=""nofollow"">winpdb</a> sounds like it does just what you want:</p>

<blockquote>
  <p>Winpdb is a platform independent GPL
  Python debugger with support for
  multiple threads, namespace
  modification, embedded debugging,
  encrypted communication and is up to
  20 times faster than pdb.</p>
</blockquote>
"
276021,"<p>I have a different perspective, having had lots of luck with integrating C++ and Python for some real time live video image processing.</p>

<p>I would say you should match the language to the task for each module.  If you're responding to a network, do it in Python, Python can keep up with network traffic just fine.  UI: Python, People are slow, and Python is great for UIs using wxPython or PyObjC on Mac, or PyGTK.  If you're doing math on lots of data, or signal processing, or image processing... code it in C or C++ with unit tests, then use <strong>SWIG</strong> to create the binding to any higher level language.</p>

<p>I used the image libraries in wxWidgets in my C++, which are already exposed to Python through wxPython, so it was extremely powerful and quick.  SCONS is a build tool (like make) which knows what to do with swig's .i files.</p>

<p>The topmost level can be in C or Python, you'll have more control and fewer packaging and deployment issues if the top level is in C or C++... but it will take a really long time to duplicate what Py2EXE or Py2App gives you on Windows or Mac (or freeze on Linux.) </p>

<p>Enjoy the power of hybrid programming! (I call using multiple languages in a tightly coupled way 'hybrid' but it's just a quirk of mine.)</p>
"
276108,"<p>A little browsing of already-asked questions would have led you to <a href=""http://stackoverflow.com/questions/274361/utf-8-latin-1-conversion-issues-python-django"">UTF-8 latin-1 conversion issues</a>, which was asked and answered yesterday.</p>

<p>BTW, I couldn't remember the exact title, so I just googled on django+'\222\222\223\225' and found it. Remember, kids, Google Is Your Friend (tm).</p>
"
276242,"<p>If the problem domain is hard (and AI problems can often be hard), then I'd choose a language which is expressive or suited to the domain first, and then worry about speeding it up second. For example, Ruby has meta-programming primitives (ability to easily examine and modify the running program) which can make it very easy/interesting to implement certain types of algorithms.</p>

<p>If you implement it in that way and then later need to speed it up, then you can use benchmarking/profiling to locate the bottleneck and either link to a compiled language for that, or optimise the algorithm.  In my experience, the biggest performance gain is from tweaking the algorithm, not from using a different implementation language.</p>
"
107753,"<p>Actually WebTest does work within the sandbox, as long as you comment out </p>

<pre><code>import webbrowser
</code></pre>

<p>in webtest/__init__.py </p>
"
107838,"<p>If I remember correctly, there is a fixed padding string of 32 (?) bytes to apply to any password. All passwords need to be 32 bytes at the start of computing the encryption key, either by truncating or adding some of those padding bytes.</p>

<p>If no user password was set you simply have to pad with all 32 bytes of the string, i.e. use the 32 padding bytes as the starting point for computing the encryption key.</p>

<p>I have to admit it's been a while since I've done this, I do remember that the encryption part of the PDF is an absolute mess as it got changed significantly in nearly every revision, requiring you to cope with a lot of cases to handle all PDF's.</p>

<p>Good luck.</p>
"
108033,"<p>I think you need to move the check for whether an ID is a TYPEID from c_lexer.py to c_parser.py.</p>

<p>As you said, since the parser is looking ahead 1 token, you can't make that decision in the lexer.</p>

<p>Instead, alter your parser to check ID's to see if they are TYPEID's in declarations, and, if they aren't, generate an error.</p>

<p>As Pax Diablo said in his excellent answer, the lexer/tokenizer's job isn't to make those kinds of decisions about tokens.  That's the parser's job.</p>
"
277463,"<p>While Tom Ley's answer is the correct approach, it <em>is</em> possible to import a module more than once, using the reload built-in.</p>

<pre><code>module.py:
print ""imported!""

&gt;&gt;&gt; import module
imported!
&gt;&gt;&gt; reload(module)
imported!
&lt;module 'module' from 'module.pyc'&gt;
</code></pre>

<p>Note that reload returns the module, allowing you to rebind it if necessary.</p>
"
277865,"<pre><code>nspluginplayer --fullscreen src=path/to/flashfile.swf
</code></pre>

<p>which is from the http://gwenole.beauchesne.info//en/projects/nspluginwrapper</p>
"
106731,"<p>py2exe is the best way to do this.  It's a bit of a PITA to use, but the end result works very well.</p>
"
141318,"<pre><code>[x for x in os.listdir(somedir) if os.path.isdir(os.path.join(somedir, x))]
</code></pre>
"
232233,"<p>The <code>import</code> statements are pretty much all the dependencies there are.  There are are two relevant forms for the import statements:</p>

<pre><code>import x, y, z
from x import a, b, c
</code></pre>

<p>You'll also need the <code>PYTHONPATH</code> and <code>sites</code> information that is used to build <code>sys.path</code>.  This shows the physical locations of the modules and packages.</p>

<p>That's kind of painful to process, since you have to do the transitive closure of all imports in all modules you import.</p>

<p>As an alternative approach, you can use the <code>-v</code> option to get the complete list of imports and physical files.  This produces a log that you can edit into a flat list of dependencies.</p>

<p>For instance, when I do </p>

<pre><code>&gt;&gt;&gt; import math
</code></pre>

<p>I see this in the log</p>

<pre><code>dlopen(""/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/lib-dynload/math.so"", 2);
import math # dynamically loaded from /Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/lib-dynload/math.so
</code></pre>
"
233713,"<p>The variable <code>i</code> is a global, whose value is 2 at each time the function <code>f</code> is called.</p>

<p>I would be inclined to implement the behavior you're after as follows:</p>

<pre><code>&gt;&gt;&gt; class f:
...  def __init__(self, multiplier): self.multiplier = multiplier
...  def __call__(self, multiplicand): return self.multiplier*multiplicand
... 
&gt;&gt;&gt; flist = [f(i) for i in range(3)]
&gt;&gt;&gt; [g(2) for g in flist]
[0, 2, 4]
</code></pre>

<p><strong>Response to your update</strong>:  It's not the globalness of <code>i</code> <em>per se</em> which is causing this behavior, it's the fact that it's a variable from an enclosing scope which has a fixed value over the times when f is called.  In your second example, the value of <code>i</code> is taken from the scope of the <code>kkk</code> function, and nothing is changing that when you call the functions on <code>flist</code>.</p>
"
233883,"<p>Try this:</p>

<pre><code>from pysqlite2 import dbapi2 as sqlite
</code></pre>
"
276338,"<p>I've  used <a href=""http://www.codeplex.com/WebserviceStudio"" rel=""nofollow"">Web Service Studio</a>.</p>

<blockquote>
  <p><strong>Web Service Studio</strong> is a tool to invoke web methods interactively. The
  user can provide a WSDL endpoint. On clicking button Get the tool
  fetches the WSDL, generates .NET proxy from the WSDL and displays the
  list of methods available. The user can choose any method and provide
  the required input parameters. On clicking Invoke the SOAP request is
  sent to the server and the response is parsed to display the return
  value.</p>
  
  <p>This tool is meant for web service implementers to test their web
  services without having to write the client code. This could also be
  used to access other web services whose WSDL endpoint is known.</p>
</blockquote>

<p>Also the <strong>Web Services Explorer</strong> in Eclipse which comes as part of the <a href=""http://www.eclipse.org/webtools/"" rel=""nofollow"">Web Tools Platform</a>.</p>

<blockquote>
  <p>Through UDDI and WSIL, other applications can discover WSDL documents
  and bind with them to execute transactions or perform other business
  processes. The Web Services Explorer allows you to explore, import,
  and test WSDL documents.</p>
</blockquote>
"
276694,"<p>The import statement -- by definition -- only imports once.  </p>

<p>You can, if you want, try to use <code>execfile()</code> (or <code>eval()</code>) to execute a separate file more than once. </p>
"
106779,"<p>I think you are on the right track.  Depending on what you need to do <a href=""http://en.wikipedia.org/wiki/Chroot"" rel=""nofollow"">chroot</a> may help you set up an environment for your scrpits that 'looks' real, but isn't.</p>

<p>If that doesn't work then you could write your scripts to take a 'root' path as an argument.</p>

<p>In a production run the root path is just /.  For testing you create a shadow environment under /tmp/test and then run your scripts with a root path of /tmp/test. </p>
"
106781,"<p>You might want to setup the test so that it runs inside a chroot jail, so you have all the environment the test needs, even if paths and file locations are hardcoded in the code [not really a good practice, but sometimes one gets the file locations from other places...] and then check the results via the exit code.</p>
"
318422,"<p>You're running a separate copy of python provided by cygwin.</p>

<p>You can run /cygdrive/c/python25/python (or wherever you installed it)
to get your win32 one, or just install another copy of numpy.</p>
"
318719,"<p>Python does not retain order in dictionaries.<br>
However, there is the <a href=""http://docs.python.org/2/library/collections.html?highlight=collections#ordereddict-objects"" rel=""nofollow"">OrderedDict</a> class in the <em>collections</em> module.</p>

<p>Another option would be to use a list of tuples:</p>

<pre><code>[('reportDate', u'R20080501'), ('idnum', u'1078099'), ...etc]
</code></pre>

<p>You can use the built in <code>dict()</code> if you need to convert this to a dictionary later.</p>
"
318722,"<p>The Python dict is an unordered container. If you need to preserve the order of the entries, you should consider using a list of 2-tuples.</p>

<p>Another option would be to keep an extra, ordered list of the keys. This way you can benefit from the quick, keyed access offered by the dictionary, while still being able to iterate through its values in an ordered fashion:</p>

<pre><code>data = {'reportDate': u'R20070501', 'idnum': u'1078099', 
        'columnLabel': u'2005', 'actionDate': u'C20070627', 
        'data': u'76,000', 'rowLabel': u'Sales of Bananas'}
dataOrder = ['reportDate', 'idnum', 'columnLabel', 
             'actionDate', 'data', 'rowLabel']

for key in dataOrder:
    print key, data[key]
</code></pre>
"
318869,"<p>Use map to apply your transformation function to each element in my_ar:</p>

<pre><code>import numpy

my_ar = numpy.array((0,5,10))
print my_ar

transformed = numpy.array(map(lambda x:numpy.array((x,x*2,x*3)), my_ar))
print transformed

print transformed.shape
</code></pre>
"
55197,"<pre><code>&gt;&gt;&gt; d = {'b' : 'this is b', 'a': 'this is a' , 'c' : 'this is c'}
&gt;&gt;&gt; for k,v in sorted(d.items()):
...     print v, k
... 
this is a a
this is b b
this is c c
</code></pre>
"
317332,"<p>Have you considered using a pre-built stack with Python, MySQL, Apache, etc.?</p>

<p>For example: <a href=""http://bitnami.org/stack/djangostack"" rel=""nofollow"">http://bitnami.org/stack/djangostack</a></p>
"
317372,"<p>%% turns into a single %</p>
"
56134,"<pre><code>for key in sorted(d):
  print d[key]
</code></pre>
"
105127,"<p>You still need to use locks (your code could be interrupted at any time to execute another thread and this can cause data inconsistencies). The problem with GIL is that it prevents Python code from using more cores at the same time (or multiple processors if they are available).</p>
"
102679,"<p>Piles of stuff. Any time you want to generate a sequence of items, but don't want to have to 'materialize' them all into a list at once. For example, you could have a simple generator that returns prime numbers:</p>

<pre><code>def primes():
    primes_found = set()
    primes_found.add(2)
    yield 2
    for i in itertools.count(1):
        candidate = i * 2 + 1
        if not all(candidate % prime for prime in primes_found):
            primes_found.add(candidate)
            yield candidate
</code></pre>

<p>You could then use that to generate the products of subsequent primes:</p>

<pre><code>def prime_products():
    primeiter = primes()
    prev = primeiter.next()
    for prime in primeiter:
        yield prime * prev
        prev = prime
</code></pre>

<p>These are fairly trivial examples, but you can see how it can be useful for processing large (potentially infinite!) datasets without generating them in advance, which is only one of the more obvious uses.</p>
"
103211,"<p>It's not possible unless you store the keys in a separate list for referencing later.</p>
"
103212,"<p>I have no Dabo experience at all but this question is on the top of the list fo such a long time that I decided to give it a shot:</p>

<h2>Framework selection</h2>

<h2>Assumptions:</h2>

<ol>
<li>medium-to-big project: we're talking about a team of more than 20 people working on something for about a year for the first phase. This is usually an expensive and very important effort for the client.</li>
<li>this project will have significant amount of users (around a hundred) so performance is essential</li>
<li>it's an ERP project so the application will work with large amounts of information</li>
<li>you have no prior Dabo experience in your team</li>
</ol>

<h2>Considerations:</h2>

<ol>
<li>I could not open Dabo project site right now. There seems to be some server problem. That alone would make me think twice about using it for a big project.</li>
<li>It's not a well-known framework.  Typing Dabo in Google returns almost no useful results, it does not have a Wikipedia page, all-in-all it's quite obscure. It means that when you will have problems with it (and you will have problems with it) you will have almost no place to go. Your question was unanswered for 8 days on SO, this alone would make me re-consider. If you base your project on an obscure technology you have no previous experience with - it's a huge risk.</li>
<li>You don't have people who know that framework in your team. It means that you have to learn it to get any results at all and to master it will require quite significant amount of time. You will have to factor that time into your project plan. Do you really need it?</li>
<li>What does this framework give you that you cannot do yourself? Quite a lot of time my team tried to use some third-party component or tool only to find that building a custom one would be faster than dealing with third-party problems and limitations. There are brilliant tools available to people nowadays and we would be lost without them - but you have to carefully consider if this tool  is one of them</li>
<li>Dabo project version is 0.84. Do you know if they spend time optimising their code for performance at this stage? Did you run any tests to see it will sustain the load you have in your NFRs.</li>
</ol>

<p>Hope that helps :) Good luck with your project</p>
"
279147,"<p>I think going through Latex is the easiest way, and not overkill at all. Generating a working PDF file is quite a difficult activity, whereas generating a Tex source is much easier. Any other typesetting change would probably work as well, such as going through reStructuredText or troff.</p>
"
142103,"<p>Someone above said that there is no builtin way to perform this, but that's not entirely true.  For an example, you could take a look at the pylons debugging tools.  Whene there is an exception, the exception handler saves the stack trace and prints a URL on the console that can be used to retrieve the debugging session over HTTP.</p>

<p>While they're probably keeping these sessions in memory, they're just python objects, so there's nothing to stop you from pickling a stack dump and restoring it later for inspection.  It would mean some changes to the app, but it should be possible...</p>

<p>After some research, it turns out the relevant code is actually coming from Paste's <a href=""http://svn.pythonpaste.org/Paste/trunk/paste/evalexception/evalcontext.py"" rel=""nofollow"">EvalException module</a>.  You should be able to look there to figure out what you need.</p>
"
142106,"<p>You're correct - the key is stored as the property name prefixed with '_'. You should just be able to access it directly on the model object. Can you demonstrate what you're trying? I've used this technique in the past with no problems.</p>

<p>Edit: Have you tried calling series_id() directly, or referencing _series in your template directly? I'm not sure whether Django automatically calls methods with no arguments if you specify them in this context. You could also try putting the @property decorator on the method.</p>
"
142138,"<p>I don't know how to dump an entire python interpreter state and restore it. It would be useful, I'll keep my eye on this answer in case anyone else has ideas.</p>

<p>If you have an idea where the memory is leaking, you can add checks the refcounts of your objects. For example:</p>

<pre><code>x = SomeObject()
... later ...
oldRefCount = sys.getrefcount( x )
suspiciousFunction( x )
if (oldRefCount != sys.getrefcount(x)):
    print ""Possible memory leak...""
</code></pre>

<p>You could also check for reference counts higher than some number that is reasonable for your app. To take it further, you could modify the python interpreter to do these kinds of check by replacing the <code>Py_INCREF</code> and <code>Py_DECREF</code> macros with your own. This might be a bit dangerous in a production app, though.</p>

<p>Here is an essay with more info on debugging these sorts of things. It's more geared for plugin authors but most of it applies.</p>

<p><a href=""http://www.python.org/doc/essays/refcnt/"" rel=""nofollow"" title=""Debugging Reference Counts"">Debugging Reference Counts</a></p>
"
230976,"<p>Not efficient, but without invoking <code>eval</code>:</p>

<pre><code>dict((k,v) for (k,v) in globals().iteritems() if k in list_of_variable_names)
</code></pre>

<p>or</p>

<pre><code>dict((k,v) for (k,v) in vars().iteritems() if k in list_of_variable_names)
</code></pre>

<p>depending on what you want.</p>
"
107700,"<p>You can use curses.</p>

<p>It has a <a href=""http://adamv.com/dev/python/curses/"" rel=""nofollow"" title=""WCurses"">Windows Port</a> and <a href=""https://docs.python.org/library/curses.html"" rel=""nofollow"" title=""Unix Curses"">Unix Port</a>, and plenty of <a href=""https://docs.python.org/howto/curses.html"" rel=""nofollow"" title=""curses howto"">documentation</a>.
You can also use some <a href=""http://urwid.org/"" rel=""nofollow"" title=""gui for curses"">helper libs</a>.</p>
"
277280,"<p>Maybe look at the zip function for parts of the problem:</p>

<pre><code>&gt;&gt;&gt; execfile('so_ques.py')
[[' '], [' '], ['bananas bunches'], [' '], [' cars'], [' cars'], [' cars'], [' '], [' trucks'], [' trucks'], [' trucks'], [' '], ['trains freight'], [' '], ['planes cargo'], [' '], [' all other'], [' '], [' ']]

&gt;&gt;&gt; zip(long_header, short_header)
[('', ''), ('', ''), ('bananas', 'bunches'), ('', ''), ('', 'cars'), ('', ''), ('', 'trucks'), ('', ''), ('', 'freight'), ('', ''), ('', 'cargo'), ('', ''), ('trains', 'all other'), ('', ''), ('planes', '')]
&gt;&gt;&gt;
</code></pre>

<p><code>enumerate</code> can help avoid some of the complex indexing with counters:</p>

<pre><code>&gt;&gt;&gt; diff_list = []
&gt;&gt;&gt; for place, header in enumerate(short_header):
    diff_list.append(abs(span_short[place] - span_long[place]))

&gt;&gt;&gt; for place, num in enumerate(diff_list):
    if num:
    	new_shortlist.extend(short_header[place] for item in range(num+1))
    else:
    	new_shortlist.append(short_header[place])


&gt;&gt;&gt; new_shortlist
['', '', 'bunches', '', 'cars', 'cars', 'cars', '', 'trucks', 'trucks', 'trucks', '',... 
&gt;&gt;&gt; z = zip(new_shortlist, long_header)
&gt;&gt;&gt; z
[('', ''), ('', ''), ('bunches', 'bananas'), ('', ''), ('cars', ''), ('cars', ''), ('cars', '')...
</code></pre>

<p>Also more pythonic naming may add clarity:</p>

<pre><code>    for each in range(len(short_header)):
        sum_span_long += span_long[long_header_count]
        sum_span_short += span_short[each]
        span_diff = sum_span_short - sum_span_long
        if not span_diff:
            combined_header.append...
</code></pre>
"
277429,"<p>I'm not absolutely sure if that fulfills your requirements, but I immediately thought PyGame</p>

<p><a href=""http://www.pygame.org/docs/ref/mixer.html#pygame.mixer.Sound"" rel=""nofollow"" title=""PyGame Sound Module"">http://www.pygame.org/docs/ref/mixer.html#pygame.mixer.Sound</a></p>

<pre><code>from pygame import mixer

mixer.init()
s = mixer.Sound('sound.wav')
s.play()
</code></pre>
"
229394,"<p>Filenames with a slash at the end are technically still path definitions and indicate that the index file is to be read.  If you actually have one that' ends in <code>test.php/</code>, I would consider that an error.  In any case, you can strip the / from the end before running your code as follows:</p>

<pre><code>url = url.rstrip('/')
</code></pre>
"
230333,"<p>The <a href=""http://www.secdev.org/projects/scapy/index.html"" rel=""nofollow"">scapy</a> package is a tool for network manipulation and monitoring.  I'm curious as to what you're trying to do with it.  It's rude to spy on your friends. :-)</p>

<pre><code>coventry@metta:~/src$ wget -q http://www.secdev.org/projects/scapy/files/scapy-latest.zip
coventry@metta:~/src$ unzip -qq scapy-latest.zip 
warning [scapy-latest.zip]:  61 extra bytes at beginning or within zipfile
  (attempting to process anyway)
coventry@metta:~/src$ find scapy-2.0.0.10 -name \*.py | xargs grep sr1
scapy-2.0.0.10/scapy/layers/dns.py:    r=sr1(IP(dst=nameserver)/UDP()/DNS(opcode=5,
scapy-2.0.0.10/scapy/layers/dns.py:    r=sr1(IP(dst=nameserver)/UDP()/DNS(opcode=5,
scapy-2.0.0.10/scapy/layers/inet6.py:from scapy.sendrecv import sr,sr1,srp1
scapy-2.0.0.10/scapy/layers/snmp.py:            r = sr1(IP(dst=dst)/UDP(sport=RandShort())/SNMP(community=community, PDU=SNMPnext(varbindlist=[SNMPvarbind(oid=oid)])),timeout=2, chainCC=1, verbose=0, retry=2)
scapy-2.0.0.10/scapy/layers/inet.py:from scapy.sendrecv import sr,sr1,srp1
scapy-2.0.0.10/scapy/layers/inet.py:            p = sr1(IP(dst=target, options=""\x00""*40, proto=200)/""XXXXYYYYYYYYYYYY"",timeout=timeout,verbose=0)
scapy-2.0.0.10/scapy/sendrecv.py:def sr1(x,filter=None,iface=None, nofilter=0, *args,**kargs):
</code></pre>

<p>According to the last line, <code>sr1</code> is a function defined in <code>scapy.sendrecv</code>.  Someone should file a documentation bug with the author.</p>
"
106733,"<p><a href=""http://wiki.python.org/moin/Py2Exe"" rel=""nofollow"">py2exe</a> will make windows executables with python bundled in.</p>
"
277978,"<p>It depends on how many if statements we're talking about; if it's a very small number, then it will be more efficient than using a dictionary.</p>

<p>However, as always, I strongly advice you to do whatever makes your code look cleaner until experience and profiling tell you that a specific block of code needs to be optimized.</p>
"
277980,"<p>Your use of the dictionary is not quite correct. In your implementation, all methods will be called and all the useless one discarded. What is usually done is more something like:</p>

<pre><code>switch_dict = {'extractTitle': extractTitle, 
               'extractMetaTags': extractMetaTags}
switch_dict[type](dom)
</code></pre>

<p>And that way is facter and more extensible if you have a large (or variable) number of items.</p>
"
278006,"<p>The efficiency question is barely relevant.  The dictionary lookup is done with a simple hashing technique, the if-statements have to be evaluated one at a time.  Dictionaries tend to be quicker.</p>

<p>I suggest that you actually have polymorphic objects that do extractions from the DOM.</p>

<p>It's not clear how <code>type</code> gets set, but it sure looks like it might be a family of related objects, not a simple string.</p>

<pre><code>class ExtractTitle( object ):
    def process( dom ):
        return something

class ExtractMetaTags( object ):
    def process( dom ):
        return something
</code></pre>

<p>Instead of setting type=""extractTitle"", you'd do this.</p>

<pre><code>type= ExtractTitle() # or ExtractMetaTags() or ExtractWhatever()
type.process( dom )
</code></pre>

<p>Then, you wouldn't be building this particular dictionary or if-statement.</p>
"
104547,"<p>Nothing prevents you for diverting your parser from the ""context free"" path using PLY. You can pass information to the lexer during parsing, and in this way achieve full flexibility. I'm pretty sure that you can parse anything you want with PLY this way.</p>

<p>For a hands-on example, <a href=""http://code.google.com/p/pycparser/"" rel=""nofollow"">consider</a> - it is a parser for ANSI C written in Python with PLY. It solves the classic C typedef - identifier problem (that makes C's grammar non context-sensitive) by populating a symbol table in the parser that is being used in the lexer to resolve symbol names as either types or not.</p>
"
56247,"<p>Slightly longer but probably more readable rework of your last four lines:</p>

<pre><code>samples = [0 for i in xrange(how_many_days + 1)]
for s in xrange(how_many_responses):
    samples[min(int(how_many_days * weibullvariate(0.5, 2)), how_many_days)] += 1
histogram = zip(timeline, samples)
print '\n'.join((d.strftime('%Y-%m-%d ') + ""*"" * c) for d,c in histogram)
</code></pre>

<p>This always drops the samples within the date range, but you get a corresponding bump at the end of the timeline from all of the samples that are above the [0, 1] range.</p>
"
56548,"<p>This is quick and probably not that accurate, but if you calculate the PDF yourself, then at least you make it easier to lay several smaller/larger ones on a single timeline. <code>dev</code> is the std deviation in the Guassian noise, which controls the roughness. Note that this is <em>not</em> the 'right' way to generate what you want, but it's easy.</p>

<pre><code>import math
from datetime import datetime, timedelta, date
from random import gauss

how_many_responses = 1000
start_date = date(2008, 5, 1)
end_date = date(2008, 6, 1)
num_days = (end_date - start_date).days + 1
timeline = [start_date + timedelta(i) for i in xrange(num_days)]

def weibull(x, k, l):
    return (k / l) * (x / l)**(k-1) * math.e**(-(x/l)**k)

dev = 0.1
samples = [i * 1.25/(num_days-1) for i in range(num_days)]
probs = [weibull(i, 2, 0.5) for i in samples]
noise = [gauss(0, dev) for i in samples]
simdata = [max(0., e + n) for (e, n) in zip(probs, noise)]
events = [int(p * (how_many_responses / sum(probs))) for p in simdata]

histogram = zip(timeline, events)

print '\n'.join((d.strftime('%Y-%m-%d ') + ""*"" * c) for d,c in histogram)
</code></pre>
"
207772,"<p>Can get <strong>PyDev.</strong> from <a href=""http://pydev.sourceforge.net"" rel=""nofollow"">http://pydev.sourceforge.net</a>. Its a plugin for Eclipse and is more than handy. Not to mention benefits of the old and trusted Eclipse.</p>
"
207794,"<p>If you want a complete example of how to use threads and events to update your GUI with long running tasks using WxPython have a look at this <a href=""http://wiki.wxpython.org/LongRunningTasks"" rel=""nofollow"">page</a>. This tutorial is quite useful and helped me perform a similar program than yours.</p>
"
209488,"<p>This works for me, and I'm also using CherryPy 3.1.0, so I'm not sure what to tell you.</p>

<p>Look in your /Library/Python/2.5/site-packages/cherrypy/lib directory for a file named static.py; if this file exists then I'm not sure what to tell you.  If it doesn't then something has happened to your CherryPy and I'd advise you to reinstall.  If it does then you should check the value of <code>sys.path</code> to make sure it's detecting the right version of CherryPy.</p>

<p>You can also try running the python interpreter on the command line and then doing a <code>from cherrypy.lib import static</code> to see if you get the same result.</p>
"
161977,"<p>Also check out <a href=""http://search.cpan.org/dist/pQuery/"" rel=""nofollow"">pQuery</a> it as a really nice Perlish way of doing this kind of stuff....</p>

<pre><code>use pQuery;

pQuery( 'http://www.perl.com' )-&gt;find( 'a' )-&gt;each( 
    sub {
        my $pQ = pQuery( $_ ); 
        say $pQ-&gt;text, ' -&gt; ', $pQ-&gt;toHtml;
    }
);

# prints all HTML anchors on www.perl.com
# =&gt;  link text -&gt; anchor HTML
</code></pre>

<p>However if your requirement is beyond HTML/Web then here is the earlier ""Hello World!"" example in <a href=""http://search.cpan.org/dist/Parse-RecDescent/lib/Parse/RecDescent.pm"" rel=""nofollow"">Parse::RecDescent</a>...</p>

<pre><code>use strict;
use warnings;
use Parse::RecDescent;

my $grammar = q{
    alpha : /\w+/
    sep   : /,|\s/
    end   : '!'
    greet : alpha sep alpha end { shift @item; return \@item }
};

my $parse = Parse::RecDescent-&gt;new( $grammar );
my $hello = ""Hello, World!"";
print ""$hello -&gt; @{ $parse-&gt;greet( $hello ) }"";

# =&gt; Hello, World! -&gt; Hello , World !
</code></pre>

<p>Probably too much of a large hammer to crack this nut ;-)</p>

<p>/I3az/</p>
"
162301,"<p>From  <a href=""http://perldoc.perl.org/perlop.html#Regexp-Quote-Like-Operators"" rel=""nofollow"">perlop</a>:</p>

<blockquote>
  <p>A useful idiom for lex -like scanners
  is <code>/\G.../gc</code> . You can combine
  several regexps like this to process a
  string part-by-part, doing different
  actions depending on which regexp
  matched. Each regexp tries to match
  where the previous one leaves off.</p>

<pre><code> LOOP:
    {
      print("" digits""),   	redo LOOP if /\G\d+\b[,.;]?\s*/gc;
      print("" lowercase""),    redo LOOP if /\G[a-z]+\b[,.;]?\s*/gc;
      print("" UPPERCASE""),    redo LOOP if /\G[A-Z]+\b[,.;]?\s*/gc;
      print("" Capitalized""),  redo LOOP if /\G[A-Z][a-z]+\b[,.;]?\s*/gc;
      print("" MiXeD""),    	redo LOOP if /\G[A-Za-z]+\b[,.;]?\s*/gc;
      print("" alphanumeric""), redo LOOP if /\G[A-Za-z0-9]+\b[,.;]?\s*/gc;
      print("" line-noise""),   redo LOOP if /\G[^A-Za-z0-9]+/gc;
      print "". That's all!\n"";
    }
</code></pre>
</blockquote>
"
59928,"<p>Another option is to use a dictionary with values you don't care about.  E.g.,</p>

<pre><code>
poor_man_set = {}
poor_man_set[1] = None
poor_man_set[2] = None
poor_man_set[3] = None
...
</code></pre>

<p>You can treat the keys as a set except that they're just an array:</p>

<pre><code>
keys = poor_man_set.keys()
print ""Some key = %s"" % keys[0]
</code></pre>

<p>A side effect of this choice is that your code will be backwards compatible with older, pre-<code>set</code> versions of Python.  It's maybe not the best answer but it's another option.</p>

<p>Edit: You can even do something like this to hide the fact that you used a dict instead of an array or set:</p>

<pre><code>
poor_man_set = {}
poor_man_set[1] = None
poor_man_set[2] = None
poor_man_set[3] = None
poor_man_set = poor_man_set.keys()
</code></pre>
"
60216,"<p>If you are really just returning a predetermined, fixed value, you could create a dictionary with all possible input indexes as the keys, along with their corresponding values. Also, you might not really want a function to do this - unless you're computing the return value somehow.</p>

<p>Oh, and if you feel like doing something switch-like, see <a href=""https://web.archive.org/web/20120216013404/http://www.mustap.com/pythonzone_post_224_python-switch-statement?"" rel=""nofollow"">here</a>.</p>
"
100771,"<p><a href=""http://www.python.org/dev/peps/pep-0008/"" rel=""nofollow"">Style guide</a> recommends to use is or is not if you are testing for None-ness</p>

<blockquote>
<pre><code>- Comparisons to singletons like None should always be done with
  'is' or 'is not', never the equality operators.
</code></pre>
</blockquote>

<p>On the other hand if you are testing for more than None-ness, you should use the boolean operator.</p>
"
101074,"<p>Half a year ago I took over a large web application (fortunately already in Python) which had some major architectural deficiencies (templates and code mixed, code duplication, you name it...).</p>

<p>My plan is to eventually have the system respond to WSGI, but I am not there yet. I found the best way to do it, is in small steps. Over the last 6 month, code reuse has gone up and progress has accelerated. </p>

<p>General principles which have worked for me:</p>

<ol>
<li>Throw away code which is not used or commented out</li>
<li>Throw away all comments which are not useful</li>
<li>Define a <em>layer hierarchy</em> (models, business logic, view/controller logic, display logic, etc.) of your application. This has not to be very clear cut architecture but rather should <em>help you think about the various parts of your application</em> and help you better categorize your code.</li>
<li>If something grossly violates this hierarchy, change the offending code. Move the code around, recode it at another place, etc. At the same time adjust the rest of your application to use this code instead of the old one. Throw the old one away if not used anymore.</li>
<li><strong>Keep you APIs simple!</strong></li>
</ol>

<p>Progress can be painstakingly slow, but should be worth it. </p>
"
101090,"<p>Setuptools and distutils don't come with gcc, but they use the same compiler Python was built with. The difference is mostly that on the typical UNIX system that compiler is 'gcc' and you have it installed.</p>

<p>In order to compile extension modules on Windows, you need a compiler for Windows. MSVS will do, even the Express version I believe, but it does have to be the same MSVC++ version as Python was built with. Or you can use Cygwin or MinGW; See the appropriate section of <a href=""http://docs.python.org/install/index.html#gnu-c-cygwin-mingw"" rel=""nofollow"">Installing Python Modules</a>.</p>
"
99969,"<p>The <a href=""http://docs.python.org/lib/module-pickle.html"" rel=""nofollow"">pickle</a> module is pretty awesome</p>
"
279477,"<p>You probably want something like <a href=""http://www.noah.org/wiki/Pexpect"" rel=""nofollow""><code>Pexpect</code></a>.  It's been around a while, and there may be a better alternative, now, but it will let you do what you want.  </p>

<p>As far as I know, there is no easy way to do that kind of thing with os.popen or the commands in the <code>subprocess</code> module.</p>
"
101353,"<p>complex numbers. (The complexobject.c defines a class, so technically it's not a module). Great for 2d coordinates, with easy translation/rotations etc</p>

<p>eg.</p>

<pre><code>TURN_LEFT_90= 1j
TURN_RIGHT_90= -1j

coord= 5+4j # x=5 y=4
print coord*TURN_LEFT_90
</code></pre>
"
101539,"<p>You can probably use Java's loadLibrary to do that (provided it works in your platform's java). It is in the java library: <a href=""http://java.sun.com/javase/6/docs/api/java/lang/System.html#loadLibrary(java.lang.String)"" rel=""nofollow"" title=""sun.com loadLibrary documentation"">java.System.loadLibrary()</a>.</p>

<p>Note that sometimes you will have to write a wrapper in C and/or in Java depending on the library you want to use and target system, since details are platform dependant.
Refer to the documentation for more details.</p>
"
142379,"<p>Have you read <a href=""http://pramode.net/articles/lfy/mobile/pramode.html"" rel=""nofollow"">Hack a Mobile Phone with Linux and Python</a>? It is rather old, but maybe you find it helpful.</p>
"
316466,"<p>Try the ANSI version instead of the Unicode one. IIRC it needs to match the Python 2.6 install to work properly.</p>
"
316492,"<p>From looking for ""application configuration is incorrect"" in the <a href=""http://trac.wxwidgets.org/"" rel=""nofollow"">wxPython trac system</a>, the only reference that might make sense is a 64-bit vs 32-bit compatibility issue.  </p>

<p>Otherwise, I'd say <a href=""http://stackoverflow.com/questions/316325/import-wx-fails-after-installation-of-wxpython-on-windows-xp/316466#316466"">Brian's answer</a> of trying ANSI is pretty good.</p>

<p>BTW, if you try uninstalling again, make go into the site-packages folder and make sure all the wx and wxPython stuff is deleted.</p>
"
316717,"<p>Regarding Generic Relations, note that normal Django queries cannot span GenerecForeignKey relations. Using multi-table inheritance avoids this issue at the cost of being a less generic solution.</p>

<p>From the docs:</p>

<blockquote>
  <p>Due to the way GenericForeignKey is implemented, you cannot use such fields directly with filters (filter() and exclude(), for example) via the database API. They aren't normal field objects. These examples will not work:</p>
</blockquote>

<pre><code># This will fail
&gt;&gt;&gt; TaggedItem.objects.filter(content_object=guido)
# This will also fail
&gt;&gt;&gt; TaggedItem.objects.get(content_object=guido)
</code></pre>
"
315839,"<p>One of the Stackoverflow founders is a big fan of <a href=""http://www.regexbuddy.com/"" rel=""nofollow"">RegexBuddy</a> from JGSoft. I tried it on a whim when i was writing a simple file moving script at work, and it makes generating the best regex for a job quite easy in the language of your choice. If you're having trouble with developing the regex itself this is a nice tool to check your logic. I guess I'm a big fan now as well.</p>
"
316248,"<p>The ""official"" string representation of a float is given by the repr() built-in:</p>

<pre><code>&gt;&gt;&gt; repr(1.5)
'1.5'
&gt;&gt;&gt; repr(12345.678901234567890123456789)
'12345.678901234567'
</code></pre>

<p>You can use repr() instead of a formatted string, the result won't contain any unnecessary garbage.</p>
"
59235,"<p>You can also sort a dictionary by value and control the sort order:</p>

<pre><code>import operator

d = {'b' : 'this is 3', 'a': 'this is 2' , 'c' : 'this is 1'}

for key, value in sorted(d.iteritems(), key=operator.itemgetter(1), reverse=True):
    print key, "" "", value
</code></pre>

<p>Output:<br />
b   this is 3<br />
a   this is 2<br />
c   this is 1</p>
"
59663,"<p>Lists in python can contain any type of object -- If I understand the question correctly, will a <code>list</code> of <code>list</code>s do the job? Something like this (assuming you have a function <code>generate_poll_data()</code> which creates your data:</p>

<pre><code>data = []

for in xrange(num_iterations):
    data.append(generate_poll_data())
</code></pre>

<p>Then, <code>data[n]</code> will be the list of data from the <code>(n-1)</code>th run.</p>
"
59709,"<p>since you are thinking in <em>variables</em>, you might prefer a dictionary over a list of lists:</p>

<pre><code>data = {}
data['a'] = [generate_poll_data()]
data['b'] = [generate_poll_data()]
</code></pre>

<p>etc.</p>
"
59762,"<p>I would strongly consider using <a href=""http://numpy.scipy.org"" rel=""nofollow"">NumPy</a> to do this. You get efficient N-dimensional arrays that you can quickly and easily process.</p>
"
164616,"<p>How about redirecting user to i.xxx.com after parsing his UA in some middleware? I highly doubt that mobile users care how url look like, still they can access your site using main url.</p>
"
164681,"<p>I've actually done this a long time ago, but it wasn't petty.  What we did is use the <a href=""http://sawfish.wikia.com/wiki/Main_Page"" rel=""nofollow"">Sawfish window manager</a> and wrote a hook to recognize the flashplayer window, then strip all the decorations and snap it full screen.</p>

<p>This may be possible without using the window manager, by registering for X window creation events from an external application, but I'm not familiar enough with X11 to tell you how that would be done.</p>

<p>Another option would be to write a pygtk application that embedded the standalone flash player inside a gtk.Socket and then resized itself.  After a bit of thought, this might be your best bet.</p>
"
280831,"<p><a href=""http://numpy.sourceforge.net/numdoc/HTML/numdoc.htm#pgfId-305426"" rel=""nofollow"">This page</a> explains why you get an array, and the meaning of the numbers in it, at least.</p>
"
142777,"<p>Is there any need to?</p>

<p>Ubuntu in general doesn't package RC releases. 2.6 will not be available in Ubuntu until Jaunty Jackalope.</p>

<p>However,, if you insist that you need to install it, then, you'll have to do so without a package manager.</p>

<p>Download the package, and unzip it to a directory</p>

<p>run the following commands (waiting for each to finish as you do so)</p>

<pre><code>./configure
make
sudo make install
</code></pre>

<p>There, you have it installed.</p>

<p>It's better to wait for it to be packaged first, espescially as Python is used in a lot of ubuntu internals, so may break your system horribly</p>
"
142802,"<p>Setting the locale after multiple threads have started operating may have unexpected results. Unless I could figure out a more subtle approach, I'd probably just split file loading and the user interface into separate processes, communicating through a pipe or a file socket.</p>
"
143532,"<p>Two good answers. Iâd add a little trick â if you need a real file object (some methods expect one, not just an interface), here is a way to create an adapter:</p>

<ul>
<li><a href=""http://www.rfk.id.au/software/filelike/"" rel=""nofollow"">http://www.rfk.id.au/software/filelike/</a></li>
</ul>
"
228858,"<p>To do it in a way which won't <a href=""http://www.linux.org.au/conf/2007/talk/278.html"" rel=""nofollow"">eat your data</a> if you crash in the middle:</p>

<pre><code>from twisted.python.filepath import FilePath
p = FilePath(filename)
p.setContent(process(p.getContent()))
</code></pre>
"
230528,"<p>Funnily enough I've been working on the same problem.  I'm about halfway through writing my own pure-Python WBXML parser, but it's not yet complete enough to be useful, and I have very little time to work on it right now.</p>

<p>Those &lt;Unknown&gt; tags might be because pywbxml / libwbxml doesn't have the right tag vocabulary loaded.  WBXML represents tags by an index number to avoid transmitting the same tag name hundreds of times, and the table that maps index numbers to tag names has to be supplied separately from the WBXML document itself.  From a vague glance at <a href=""http://libwbxml.aymerick.com/browser/wbxml2/trunk/src/wbxml_tables.c"" rel=""nofollow"">the libwbxml source</a> it seems like libwbxml has a bunch of tag tables hard coded.  It has tables for SyncML 1.0-1.2; I think my Nokia E71 sends SyncML 1.3 (if so, your N95 probably does too), which it looks like libwbxml doesn't support yet.</p>

<p>Getting it to work might be as simple as adding a SyncML 1.3 table to libwbxml.  That said, last time I tried, pywbxml doesn't compile against the vanilla libwbxml source, so you have to apply some patches first... so ""simple"" may be a relative term.</p>
"
279975,"<p>Per the documentation, unzip sets the permissions to those stored, under unix.  Also, the shell umask is not used.  Your best bet is to make sure the perms are set before you zip the file.</p>

<p>Since you can't do that, you will have to try and do what you were trying to do (and get it to work under Debian.)</p>

<p>There have been a number of issues with Pythons zipfile library, including setting the mode of writestr to that of the file being written on some systems, or setting the zip systm to windows instead of unix.  So your inconsistent results may mean that nothing has changed.</p>

<p>So you may be completely out of luck.</p>
"
208938,"<p>Having built apps in Django, I can attest to its utility. If only all frameworks were as elegant (yes Spring, I'm looking at you).</p>

<p>However in terms of betting the farm on Django, one thing you need to factor in is that Python 3 will be released shortly. Python 3 is not backwards compatible and there's a risk that it will fork the language and end up slowing momentum for all Python projects while they deal with the fallout. To be fair, Ruby 2.0 is due soon too, but I don't think it will be as disruptive. </p>
"
208950,"<p>You can do it with the <a href=""http://www.python.org/doc/2.5.2/lib/module-base64.html"" rel=""nofollow"">base64 library</a>, legacy interface.</p>
"
209363,"<p><i>NOTE: this is a community-wiki owned copy of Pat Notz's answer. This answer can be selected as the chosen answer. Edit freely to improve.</i></p>

<h3>Pat Notz says:</h3>

<p>Actually, after some more digging, it looks like the <code>xmlrpclib</code> module may have the piece I need with its <code>Binary</code> helper class:</p>

<pre><code>binary_obj = xmlrpclib.Binary( open('foo.pdf').read() )
</code></pre>

<p>Here's an example from the <a href=""http://trac-hacks.org/wiki/XmlRpcPlugin"" rel=""nofollow"">Trac XML-RPC documentation</a></p>

<pre><code>import xmlrpclib 
server = xmlrpclib.ServerProxy(""http://athomas:password@localhost:8080/trunk/login/xmlrpc"") 
server.wiki.putAttachment('WikiStart/t.py', xmlrpclib.Binary(open('t.py').read()))
</code></pre>
"
209420,"<p>If you want to handle arbitrary expressions like <code>{'{spam': 42}[""spam}""]</code>, you can't get away without full-blown parser.</p>
"
161227,"<p>You have a few problems here.</p>

<p>You didn't sort your list before calling groupby, and this is required. From <a href=""http://www.python.org/doc/2.5/lib/itertools-functions.html"" rel=""nofollow"">itertools documentation</a>:</p>

<blockquote>
  <p>Generally, the iterable needs to already be sorted on the same key function.</p>
</blockquote>

<p>Then, you don't duplicate the list returned by groupby. Again, documentation states:</p>

<blockquote>
  <p>The returned group is itself an iterator that shares the underlying iterable with
  groupby(). Because the source is shared, when the groupby object is advanced, the
  previous group is no longer visible. So, if that data is needed later, it should 
  be stored as a list:</p>

<pre><code>groups = []
uniquekeys = []
for k, g in groupby(data, keyfunc):
    groups.append(list(g))      # Store group iterator as a list
    uniquekeys.append(k)
</code></pre>
</blockquote>

<p>And final mistake is using sets as keys. They don't work here. A quick fix is to cast them to sorted tuples (there could be a better solution, but I cannot think of it now).</p>

<p>So, in your example, the last part should look like this:</p>

<pre><code>sortMethod = lambda x: tuple(sorted(set(x.mods)))
sortedMods = sorted(list(mods), key=sortMethod)
for key, mods_group in groupby(sortedMods, sortMethod):
    ret.append(list(mods_group))
</code></pre>
"
60548,"<p>See if <a href=""http://twill.idyll.org/"" rel=""nofollow"">twill</a> can help you. It can be used as a command line tool or as a python library.</p>
"
315110,"<p>I have recently started working on an open source desktop project in my spare time.  So this may not apply.  I came to the same the question.  I decided that I should write as much of the code as possible in python (and Django) and target all the platforms CPython, Jython, and IronPython.</p>

<p>Then, I decided that I would write plugins that would interface with libraries on different implementations (for example, different GUI libraries).</p>

<p>Why?  I decided early on that longevity of my code may depend on targeting not only CPython but also virtual machines.  For today's purposes CPython is the way to go because of speed, but who knows about tomorrow.  If you code is flexible enough, you may not have to decide on targeting one.</p>

<p>The downside to this approach is that you will have more code to create and maintain.</p>
"
98154,"<p>Found this:</p>

<p><a href=""http://snippets.dzone.com/posts/show/3339"" rel=""nofollow"">http://snippets.dzone.com/posts/show/3339</a></p>
"
280928,"<p>I ended up writing a python parser myself. I managed to do it by following the spec here:
<a href=""http://www.w3.org/TR/wbxml/"" rel=""nofollow"">http://www.w3.org/TR/wbxml/</a></p>

<p>And then taking the code tables from the horde.org cvs.</p>

<p>The open mobile alliance's site and documentation are terrible, this was a very trying project :(</p>
"
281991,"<p>For a synchronous client, Twisted probably isn't the right option.  Instead, you might want to use the socket module directly.</p>

<pre><code>import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((self.host, self.port))
s.send(output)
data = s.recv(size)
s.close()
</code></pre>

<p>The <code>recv()</code> call might need to be repeated until you get an empty string, but this shows the basics.</p>

<p>Alternatively, you can rearrange your entire program to support asynchronous calls...</p>
"
282301,"<p>If you are using Twisted you should probably know that:</p>

<ol>
<li>You will not be making synchronous calls to any network service</li>
<li>The reactor can only ever be run once, so do not stop it (by calling <code>reactor.stop()</code>) until your application is ready to exit.</li>
</ol>

<p>I hope this answers your question. I personally believe that Twisted is <strong>exactly</strong> the correct solution for your use case, but that you need to work around your synchronicity issue.</p>

<p>Addendum &amp; Clarification:</p>

<blockquote>
  <p>Part of what I don't understand is
  that when I call reactor.run() it
  seems to go into a loop that just
  watches for network activity. How do I
  continue running the rest of my
  program while it uses the network? if
  I can get past that, then I can
  probably work through the
  synchronicity issue.</p>
</blockquote>

<p>That is exactly what reactor.run() does. It runs a main loop which is an event reactor. It will not only wait for entwork events, but anything else you have scheduled to happen. With Twisted you will need to structure the rest of your application in a way to deal with its asynchronous nature. Perhaps if we knew what kind of application it is, we could advise.</p>
"
282939,"<p>Add python to the firewall exceptions list. Just make sure you don't run any questionable code made in python, of course.</p>
"
143996,"<p>Have you check pyOpenSSL.. am sure openssl supports ocsp and python binding may support it</p>
"
100250,"<p>Try adding a datetime.datetime to a datetime.timedelta. If you only want the time portion, you can call the time() method on the resultant datetime.datetime object to get it.</p>
"
280400,"<p>pydev and Python2.6 doesnt work with eclipse for C++.
Download the classic version and you should be good. </p>
"
280552,"<p>See my answer here (avoid the JNI stuff): <a href=""http://stackoverflow.com/questions/262125/java-multiple-mouse-inputs#263886"">http://stackoverflow.com/questions/262125/java-multiple-mouse-inputs#263886</a></p>
"
315424,"<p>Since you're only looking for the common set, you can compare the keys in the first dictionary to the keys in all other dictionaries:</p>

<pre><code>common = {}
for k in MyList[0]:
    for i in xrange(1,len(MyList)):
        if MyList[0][k] != MyList[i][k]: continue
        common[k] = MyList[0][k]

&gt;&gt;&gt; common
{'sum': '-21,90', 'type': 'Purchase', 'target': 'Apple Store'}
</code></pre>
"
315446,"<p>If the pattern you have to match is simple enough to grab with filesystem wildcards, I recommend you take a look at the glob module, which exists for this exact purpose.</p>
"
315696,"<p>The <a href=""http://en.wikipedia.org/wiki/Reversi"" rel=""nofollow"">wikipedia page</a> has all of the rules and some decent strategy advice for reversi/othello. Basically, you need some sort of data structure to represent board state, that is to say the position of all the pieces on the board at any point in the game. As suggested by others, a 2d array is probably a decent choice, but it doesn't really matter so long as it is a representation that makes sense to you. Some of the hard stuff is figuring out which spaces are valid moves and then which pieces to flip over but, again, the wikipedia page has all of the details so it shouldn't be too hard to implement.</p>

<p>If you want to create an AI for your game, then I would suggest look at some sort of minimax type algorithm with Alpha-Beta pruning. There are a ton of resources on the web for these and an ai that uses minimax with a decent evaluation function will be able to beat most human players pretty easily, as it can look at least 8 or 9 moves ahead in very little time. There are some other fancier variants on minimax, like negamax or negascout that can do even better than basic minimax, but I'd start with the simpler ones. Wikipedia has pages on all of these algorithms and there is a ton of information on all of them as many AI courses use them for Othello or something similar. One page that is particularly useful is <a href=""http://wolfey.110mb.com/GameVisual/launch.php?agent=2"" rel=""nofollow"">this Java Applet</a>. It allows you to step through the steps of minimax and negamax on a sample state tree with and without alpha-beta pruning. </p>

<p>If none of this makes sense, let me know.</p>
"
315822,"<p>I do stuff like this (to ensure I'm using bindings):</p>

<pre><code>sqlStmt=(""UPDATE apps.sometable SET lastmod=SYSDATE() where rec_id in (%s)""
    % ', '.join(['?' for n in record_ids]))

mysql_cursor.execute(sqlStmt, record_ids)
mysql.commit()
</code></pre>

<p>This works for all dynamic lists you want to bind without leaving you susceptible to SQL injection attacks.</p>
"
61820,"<p>In C#, I've generally separated the tests into a separate assembly.</p>

<p>In Python -- so far -- I've tended to either write doctests, where the test is in the docstring of a function, or put them in the <code>if __name__ == ""__main__""</code> block at the bottom of the module.</p>
"
62097,"<ol>
<li><p>It's worth taking speed into account if you're optimizing code. You should generally know why you're optimizing code (as in: a specific task in your existing codebase is taking too long, not ""I heard PHP is slower than Python""). It's <em>not</em> worth taking speed into account if you don't actually plan on switching languages. Just because one tiny module does something slightly faster doesn't mean rewriting your app in another language is a good idea. There are many other factors to choosing a language besides speed.</p></li>
<li><p>You benchmark, of course. Run the two codebases multiple times and compare the timing. You can use the <a href=""http://unixhelp.ed.ac.uk/CGI/man-cgi?time"" rel=""nofollow"">time</a> command if both scripts are executable from the shell, or use respective benchmarking functionality from each language; the latter case depends heavily on the actual language, naturally.</p></li>
</ol>
"
62099,"<p>Well, you can use the ""time"" command to help:</p>

<pre><code>you@yourmachine:~$ time echo ""hello world""
hello world

real    0m0.000s
user    0m0.000s
sys 0m0.000s
you@yourmachine:~$
</code></pre>

<p>And this will get around timing outside of the environment.</p>

<p>As for whether you need to actually time that extra work... that entirely depends on what you are doing.  I assume this is for some kind of web application of some sort, so it depends on how the framework you use actually works... does it cache some kind of compiled (or parsed) version of the script?  If so, then startup time will be totally irrelevant (since the first hit will be the only one that startup time exists in).</p>

<p>Also, make sure to run your tests in a loop so you can discount the first run (and include the cost on the first run in your report if you want).  I have done some tests in Java, and the first run is always slowest due to the JIT doing its job (and the same sort of hit may exist in PHP, Python and any other languages you try).</p>
"
62121,"<p>The <code>dirname</code> function returns an absolute path, use relative paths. See what is the current directory when your controllers are executed with <code>os.path.abspath(os.path.curdir)</code> and build a path to the templates relative to that location (without the <code>os.path.abspath</code> part of course).</p>

<p>This will only work if the current directory is somewhere inside <em>siteroot</em>, else you could do something like this:</p>

<pre><code>template_dir = os.path.join(os.path.dirname(__file__), os.path.pardir, ""templates"")
</code></pre>
"
60460,"<p>If the IronPython and .Net Compact Framework teams work together, Visual Studio may one day support Python for Windows Mobile development out-of-the-box. Unfortunately, <a href=""http://www.codeplex.com/IronPython/WorkItem/View.aspx?WorkItemId=9191"" rel=""nofollow"">this feature request has been sitting on their issue tracker for ages</a>...</p>
"
163107,"<p>I guess it depends what you mean by parsing. There is no way to get the filename without parsing the URL, i.e. the remote server doesn't give you a filename. However, you don't have to do much yourself, there's the <code>urlparse</code> module:</p>

<pre><code>In [9]: urlparse.urlparse('http://example.com/somefile.zip')
Out[9]: ('http', 'example.com', '/somefile.zip', '', '', '')
</code></pre>
"
228679,"<p>Note that the <a href=""http://sourceforge.net/project/platformdownload.php?group_id=78018"" rel=""nofollow"">Pywin32 download</a> page contains installers for version 2.6 (i386 and AMD64). The <a href=""http://www.activestate.com/Products/activepython/feature_list.mhtml"" rel=""nofollow"">ActiveState</a> distribution is a <em>single installer that includes pywin32</em> - currently at version 2.5.2.</p>
"
95692,"<p>That seems like a reasonable approach, and more straightforward and reliable than a destructor on a singleton class.  You might also look at the ""<a href=""http://docs.python.org/lib/module-atexit.html"" rel=""nofollow"">atexit</a>"" module.  (Pronounced ""at exit"", not ""a tex it"" or something like that.  I confused that for a long while.)</p>
"
97103,"<p>One function I've come to appreciate is string.translate.  Its very fast at what it does, and useful anywhere you want to alter or remove characters in a string. I've just used it in a seemingly inapplicable <a href=""http://stackoverflow.com/questions/89909/in-python-how-to-i-verify-that-a-string-only-contains-letters-numbers-underscor#92000"">problem</a> and found it beat all the other solutions handily.</p>

<p>The downside is that its API is a bit clunky, but this is improving in Py2.6 / Py3.0.</p>
"
145610,"<p>If you read the <a href=""https://pywebsvcs.svn.sourceforge.net/svnroot/pywebsvcs/trunk/zsi/ZSI/client.py"" rel=""nofollow"">_Binding class in client.py of ZSI</a> you can see that it has a variable cookies, which is an instance of <a href=""http://docs.python.org/lib/module-Cookie.html"" rel=""nofollow"">Cookie.SimpleCookie</a>. Following the <a href=""http://pywebsvcs.sourceforge.net/zsi.html#SECTION003210000000000000000"" rel=""nofollow"">ZSI example</a> and the <a href=""http://docs.python.org/lib/cookie-example.html"" rel=""nofollow"">Cookie example</a> that is how it should work:</p>

<pre><code>b = Binding(url='/cgi-bin/simple-test', tracefile=fp)
b.cookies['foo'] = 'bar'
</code></pre>
"
229311,"<p>For interactive work on code I'm developing, I usually find it more efficient to set a programmatic ""break point"" in the code itself with <code>pdb.set_trace</code>.  This makes it easir to break on the program's state deep in a a loop, too:  <code>if &lt;state&gt;: pdb.set_trace()</code></p>
"
142177,"<p>The <a href=""http://docs.python.org/lib/module-gc.html"" rel=""nofollow""><code>gc</code> module</a> has some functions that might be useful, like listing all objects the garbage collector found to be unreachable but cannot free, or a list of all objects being tracked.</p>

<p>If you have a suspicion which objects might leak, the <a href=""http://docs.python.org/lib/module-weakref.html"" rel=""nofollow"">weakref</a> module could be handy to find out if/when objects are collected.</p>
"
163111,"<p>not that I know of.</p>

<p>but you can parse it easy enough like this:</p>

<p><code><pre>
<code>url = '<a href=""http://example.com/somefile.zip"" rel=""nofollow"">http://example.com/somefile.zip</a>'
</code>print url.split('/')[-1]
</pre></code></p>
"
163273,"<p>I would choose a small variant of your (alt 4):</p>

<pre><code>def count(predicate, list):
    print sum(1 for x in list if predicate(x))

r = xrange(1, 10)

count(lambda x: x % 2 == 0, r)
count(lambda x: x % 3 == 0, r)
# ...
</code></pre>

<p>If you want to change what count does, change its implementation in one place.</p>

<p>Note: since your predicates are complex, you'll probably want to define them in functions instead of lambdas. And so you'll probably want to put all this in a class rather than the global namespace.</p>
"
209565,"<p>If your textfile manipulation usually is one-time, possibly done on the shell-prompt, you will not get anything better from python.</p>

<p>On the other hand, if you usually have to do the same (or similar) task over and over, and you have to write your scripts for doing that, then python is great - and you can easily create your own libraries (you can do that with shell scripts too, but it's more cumbersome).</p>

<p>A very simple example to get a feeling.</p>

<pre><code>import popen2
stdout_text, stdin_text=popen2.popen2(""your-shell-command-here"")
for line in stdout_text:
  if line.startswith(""#""):
    pass
  else
    jobID=int(line.split("","")[0].split()[1].lstrip(""&lt;"").rstrip(""&gt;""))
    # do something with jobID
</code></pre>

<p>Check also sys and getopt module, they are the first you will need.</p>
"
209844,"<p>Emacs + python.el continues to be better than anything else I've tried.</p>
"
210885,"<p>I had a similar problem with MySQL and Python, and the solution that worked for me was to upgrade MySQL to 5.0.27 (on Fedora Core 6; your system may work fine with a different version).</p>

<p>I tried a lot of other things, including patching the Python libraries, but upgrading the database was a lot easier and (I think) a better decision.</p>
"
210942,"<p>I couldn't find a free sftp client for windows so I ended up wrapping Putty's PSFTP using python's subprocess module.
I probably would have used the twisted implementation mentioned by Glyph if i'd known about it.</p>

<p>Anyway if your interested it's available at:</p>

<p><a href=""http://code.google.com/p/psftplib/"" rel=""nofollow"">http://code.google.com/p/psftplib/</a></p>
"
160316,"<p>I've tried in on OS X (10.5.5) and seems to work just fine:</p>

<pre><code>print commands.getoutput(""ps -u 0"")

UID   PID TTY           TIME CMD
0     1 ??         0:01.62 /sbin/launchd
0    10 ??         0:00.57 /usr/libexec/kextd
</code></pre>

<p>etc.</p>

<p>Python 2.5.1</p>
"
312704,"<p>Ah, these are common gotchas for new python developers.</p>

<p>First, the constructor should be called: </p>

<pre><code>__init__()
</code></pre>

<p>Your second issue is forgetting to include the self parameter to your class methods.  </p>

<p>Furthermore, when you define the second constructor, you're replacing the definition of the Computer() method.  Python is extremely dynamic and will cheerfully let you redefine class methods.</p>

<p>The more pythonic way is probably to use default values for the parameters if you don't want to make them required.</p>
"
312930,"<p>A <a href=""http://code.djangoproject.com/ticket/8742"" rel=""nofollow"">Django bug</a> suggests that <a href=""http://pypi.python.org/pypi/python-fastcgi"" rel=""nofollow"">python-fastcgi</a> will work for you, and its PyPI page reports that it works on Windows.</p>
"
189348,"<p>If the two 2D-lists remain constant during the lifetime of your game <em>and</em> you can't enjoy Python's multiple inheritance to join the alist[i][j] and blist[i][j] object classes (as others have suggested), you could add a pointer to the corresponding <em>b</em> item in each <em>a</em> item after the lists are created, like this:</p>

<pre><code>for a_row, b_row  in itertools.izip(alist, blist):
    for a_item, b_item in itertools.izip(a_row, b_row):
        a_item.b_item= b_item
</code></pre>

<p>Various optimisations can apply here, like your classes having <code>__slots__</code> defined, or the initialization code above could be merged with your own initialization code e.t.c. After that, your loop will become:</p>

<pre><code>for a_row in alist:
    for a_item in a_row:
        if a_item.isWhatever():
            a_item.b_item.doSomething()
</code></pre>

<p>That should be more efficient.</p>
"
344613,"<p>You don't need anyhting.
Just use toasters windows with Win32 api</p>
"
344641,"<p>If you know that the XML files are generated using the ever-same algorithm, it might be more efficient to not do any XML parsing at all. E.g. if you know that the data is in lines 3, 4, and 5, you might read through the file line-by-line, and then use regular expressions.</p>

<p>Of course, that approach would fail if the files are not machine-generated, or originate from different generators, or if the generator changes over time. However, I'm optimistic that it <em>would</em> be more efficient.</p>

<p>Whether or not you recycle the parser objects is largely irrelevant. Many more objects will get created, so a single parser object doesn't really count much.</p>
"
344805,"<p>The error above happens because your file is called Image.py and you're trying to import yourself. As Manual pointed out, you should import Image from the PIL module, but you'd also need to rename your file so it's <em>not</em> called Image.py.</p>
"
344919,"<p>From a quick look I think that its fairly comprehensive. Perhaps you should allow multiple teachers on a course, and allow reuse of addresses/locations between parents and students.</p>

<p>As a general rule I would say that you should start implementing and then you will find where you need improvement.</p>
"
345257,"<p>Some possible issues:</p>

<p>For the location object, what if in the future you need to hold a home address, work address, etc. for a person?  Same for email addresses and phone numbers - I would have phone numbers be their own object.</p>

<p>Include an Address_3 on your address object.</p>
"
144278,"<p>Here is some info on Bazaar integration if you're interested:</p>

<p>https://launchpad.net/bzr-vim-commands</p>
"
61614,"<p>This actually got me interested:<a href=""http://groups.google.com/group/pylons-discuss/browse_thread/thread/644deb53612af362?hl=en"" rel=""nofollow"">Check out this mailing on the pylons list</a>. So AuthKit is being developed, and I will follow the book and get back on the results.</p>
"
211342,"<p>This is a module that I created a long time ago, and it might be of help to you:</p>

<p><a href=""http://pypi.python.org/pypi/IPv4_Utils/0.35"" rel=""nofollow"">IPv4Utils</a></p>

<p>It provides at least a <code>CIDR</code> class with subnet arithmetic. Check the test cases at the end of the module for examples.</p>
"
211503,"<p>You can.</p>

<p>However, for the HMAC, you actually want to store the key somewhere. Without the key, there is no way for you to verify the hash value later. :-)</p>
"
159809,"<p>I'm not sure about an accepted standard, but I've found <a href=""http://soapy.sourceforge.net/"" rel=""nofollow"">SOAPpy</a> to be fairly straight-forward and useful library for handling SOAP-based web services.</p>

<blockquote>
  <p>SOAPy is a SOAP/XML Schema Library for Python. Given either a WSDL or SDL document, SOAPy discovers the published API for a web service and exposes it to Python applications as transparently as possible.</p>
</blockquote>

<p>IBM provide a <a href=""http://www.ibm.com/developerworks/library/ws-pyth5/"" rel=""nofollow"">good walk-through and example</a> on their site for getting started with SOAPpy.</p>

<p>SOAPpy's no longer under active development, but is instead being folded into Zolera SOAP Infrastructure (ZSI) at the <a href=""http://pywebsvcs.sourceforge.net/"" rel=""nofollow"">Python Web Services Project</a>. This project however has alos <a href=""http://sourceforge.net/projects/pywebsvcs"" rel=""nofollow"">not seen much activity</a> since November last year.</p>
"
312586,"<p>try:</p>

<blockquote>
  <p>/cygdrive/f/Python26//python.exe setup.py build</p>
</blockquote>

<p>and</p>

<blockquote>
  <p>/cygdrive/f/Python26//python.exe setup.py build setup.py install</p>
</blockquote>

<p>I believe you are using python from cygwin for instaling jcc and python from windows for running...</p>
"
312607,"<p>I don't think you give any sufficient reasoning behind your avoidance to do this The Right Way. Please, use the APi as it is designed and don't try so hard to make your code less readable for the next guy and more fragile.</p>
"
312699,"<p>That isn't valid python.</p>

<p>The constructor for a Python class is <code>def __init__(self, ...):</code> and you cannot overload it.</p>

<p>What you can do is use defaults for the arguments, eg.</p>

<pre><code>class Computer:
    def __init__(self, compName=""Computer1"", compIp=""0.0.0.0"", compScreenSize=17):
        self.name = compName
        self.ip = compIp
        self.screenSize = compScreenSize

        self.printStats()

        return

    def printStats(self):
        print ""Computer Statistics: --------------------------------""
        print ""Name      : %s"" % self.name
        print ""IP        : %s"" % self.ip
        print ""ScreenSize: %s"" % self.screenSize
        print ""-----------------------------------------------------""
        return

comp1 = Computer()
comp2 = Computer(""The best computer in the world"", ""27.1.0.128"",22)
</code></pre>
"
63124,"<p>Not really.  There are a few ways to modify whitespace rules for a given line of code, but you will still need indent levels to determine scope.</p>

<p>You can terminate statements with <code>;</code> and then begin a new statement on the same line. (Which people often do when <a href=""http://codegolf.com/"" rel=""nofollow"">golfing.)</a></p>

<p>If you want to break up a single line into multiple lines you can finish a line with the <code>\</code> character which means the current line effectively continues from the first non-whitespace character of the next line.  This visually <em>appears</em> violate the usual whitespace rules but is legal.</p>

<p>My advice: don't use tabs if you are having tab/space confusion.  Use spaces, and choose either 2 or 3 spaces as your indent level.  </p>

<p>A good editor will make it so you don't have to worry about this. (python-mode for <a href=""http://www.gnu.org/software/emacs/"" rel=""nofollow"">emacs,</a> for example, you can just use the tab key and it will keep you honest).</p>
"
63289,"<p>Getting your indentation to work correctly is going to be important in any language you use. </p>

<p>Even though it won't affect the execution of the program in most other languages, incorrect indentation can be very confusing for anyone trying to read your program, so you need to invest the time in figuring out how to configure your editor to align things correctly.</p>

<p>Python is pretty liberal in how it lets you indent. You can pick between tabs and spaces (but you really should use spaces) and can pick how many spaces. The only thing it requires is that you are consistent which ultimately is important no matter what language you use.</p>
"
161615,"<p>Use threadlocals if you want to get <strong>current</strong> user that edits this model. Threadlocals middleware puts current user into process-wide variable. Take this middleware</p>

<pre><code>from threading import local

_thread_locals = local()
def get_current_user():
    return getattr(getattr(_thread_locals, 'user', None),'id',None)

class ThreadLocals(object):
    """"""Middleware that gets various objects from the
    request object and saves them in thread local storage.""""""
    def process_request(self, request):
        _thread_locals.user = getattr(request, 'user', None)
</code></pre>

<p>Check the documentation on how to use middleware classes. Then anywhere in code you can call</p>

<pre><code>user = threadlocals.get_current_user
</code></pre>
"
227345,"<p>You might want to use Matlab or Mathematica or look at code from <a href=""http://www.nrbook.com/a/bookcpdf.php"" rel=""nofollow"">Numerical Recipes in C</a> for ideas on how to implement minimization functions. The link provided is to the 1992 version of the book.  Newer versions are available at Amazon.</p>
"
227787,"<p>On Linux, look in the /proc directory.  You'll have to parse the files to find what you are looking for.</p>

<p><a href=""http://www.linux.com/feature/126718"" rel=""nofollow"">This</a> might help.</p>
"
94991,"<p>Most of the other examples are merely overlooked, not unexpected uses for module.</p>

<p>fnmatch, like shlex, can be applied in unexpected ways.  fnmatch is a kind of poor-person's RE, and can be used for more than matching files, it can compare strings with the simplified wild-card patterns.</p>
"
95035,"<p>There's ANTLR, which is LL(*), there's PyParsing, which is more object friendly and is sort of like a DSL, and then there's <a href=""http://www.canonware.com/Parsing/"" rel=""nofollow"">Parsing</a> which is like OCaml's Menhir.</p>
"
284199,"<ul>
<li><p><code>zip()</code> is a built-in function in Python. Therefore it is a bad practice to use <code>zip</code> as a variable name. <code>zip_</code> can be used instead of.</p></li>
<li><p><code>execfile()</code> function reads and executes a Python script.</p></li>
<li><p>It is probably that you actually need just <code>import zip_</code> in feedback.py instead of <code>execfile()</code>.</p></li>
</ul>
"
284439,"<p>We actually address this in a project we write. What we do is have a number of different ""hidden file checkers"" that are registered with a main checker. We pass each file through these to see if it should be hidden or not.</p>

<p>These checkers are not only for different OS's etc, but we plug into version control ""ignored"" files, and optional user overrides by glob or regular expression.</p>

<p>It mostly amounts to what you have done, but in a pluggable, flexible and extensible way.</p>
"
93498,"<p>I've found <a href=""http://docs.python.org/lib/module-sched.html"" rel=""nofollow"">sched module</a> to be helpful in cron-like activities. It simplifies things a lot. Unfortunately I found it too late. </p>
"
93831,"<p>I think I have your poison :</p>

<p><a href=""http://sourceforge.net/projects/xmlite"" rel=""nofollow"">http://sourceforge.net/projects/xmlite</a></p>

<p>Cheers</p>
"
189236,"<p>Don't get stuck in the mindset of server-side page layout. Consider technologies like SproutCore, GWT or ExtJS which put the layouting code fully on the client, making the server responsible only for data marshalling and processing (and easily replaced).</p>

<p>And you really, really need to know which server platform you want. Don't pick one because it's the flavor of the month, pick one because you're comfortable with it. Flavors don't last, a solidly built codebase will.</p>
"
63549,"<p>It's definitely pythonic. The fact that you can return multiple values from a function the boilerplate you would have in a language like C where you need to define a struct for every combination of types you return somewhere.</p>

<p>However, if you reach the point where you are returning something crazy like 10 values from a single function, you should seriously consider bundling them in a class because at that point it gets unwieldy.</p>
"
63606,"<p>Take a look at the hgweb stuff. You can set up RSS feeds and see all the revisions, et cetera.</p>
"
63809,"<p>Returning a tuple is cool. Also note the new namedtuple
which was added in python 2.6 which may make this more palatable for you:
<a href=""http://docs.python.org/dev/library/collections.html#collections.namedtuple"" rel=""nofollow"">http://docs.python.org/dev/library/collections.html#collections.namedtuple</a></p>
"
63956,"<p>If you're looking for a recommendation for a Python IDE, after extensive research, I've been most happy with Wing Software's WingIDE:</p>

<p><a href=""http://www.wingware.com/products"" rel=""nofollow"">http://www.wingware.com/products</a></p>

<p>There is a free trial version, so you have nothing to lose.  It supports all the major OSes, and is only about $60 for the full version.</p>

<p>I also like SciTE a lot, which is totally free, free, free!</p>

<p><a href=""http://scintilla.sourceforge.net/SciTEDownload.html"" rel=""nofollow"">http://scintilla.sourceforge.net/SciTEDownload.html</a></p>
"
160884,"<p>Where have you seen the phrase used?</p>

<p>""Binding"" in Python generally refers to the process by which a variable name ends up pointing to a specific object, whether by assignment or parameter passing or some other means, e.g.:</p>

<pre><code>a = dict(foo=""bar"", zip=""zap"", zig=""zag"") # binds a to a newly-created dict object
b = a # binds b to that same dictionary

def crunch(param):
  print param

crunch(a) # binds the parameter ""param"" in the function crunch to that same dict again
</code></pre>

<p>So I would guess that ""lambda binding"" refers to the process of binding a lambda function to a variable name, or maybe binding its named parameters to specific objects?  There's a pretty good explanation of binding in the Language Reference, at <a href=""http://docs.python.org/ref/naming.html"" rel=""nofollow"">http://docs.python.org/ref/naming.html</a></p>
"
211144,"<p>You are very much on the right track with the view. A list of thoughts though:</p>

<p>View generation is incremental. If you're read traffic is greater than you're write traffic, then your views won't cause an issue at all. People that are concerned about this generally shouldn't be. Frame of reference, you should be worried if you're dumping hundreds of records into the view without an update.</p>

<p>Emitting an entire document will slow things down. You should only emit what is necessary for use of the view.</p>

<p>Not sure what the val == ""%s"" performance would be, but you shouldn't over think things. If there's a tag array you should emit the tags. Granted if you expect a tags array that will contain non-strings, then ignore this.</p>
"
92254,"<p>I'd suggest writing a non-trivial webapp using either Django or Pylons, something that does some number crunching.
No better way to learn a new language than commiting yourself to a problem and learning as you go!</p>
"
92381,"<p>Write a web app, likely in <a href=""http://www.djangoproject.com/"" rel=""nofollow"">Django</a> - the <a href=""http://docs.djangoproject.com/"" rel=""nofollow"">docs</a> will teach you a lot of good Python style.</p>

<p>Use some of the popular libraries like <a href=""http://pygments.org/"" rel=""nofollow"">Pygments</a> or the <a href=""http://www.feedparser.org/"" rel=""nofollow"">Universal Feed Parser</a>. Both of these make extremely useful functions, which are hard to get right, available in a well-documented API.</p>

<p>In general, I'd stay away from libs that aren't well documented -
you'll bang your head on the wall trying to reverse-engineer them -
and libraries that are wrappers around C libraries, if you don't have
any C experience. I worked on wxPython code when I was still learning
Python, which was my first language, and at the time it was little
more than a wrapper around wxWidgets. That code was easily the ugliest
I've ever written.</p>

<p>I didn't get that much out of Dive Into Python, except for the dynamic import chapter - that's not really well-documented elsewhere.</p>
"
94385,"<p>You could download the source of BitTorrent for starters and see how they did it.</p>

<p><a href=""http://download.bittorrent.com/dl/"" rel=""nofollow"">http://download.bittorrent.com/dl/</a></p>
"
94434,"<p>If it's something where you're going to need tons of threads and need better concurrent performance, check out <a href=""http://www.stackless.com/"" rel=""nofollow"">Stackless Python</a>. Otherwise you could just use the <a href=""http://en.wikipedia.org/wiki/SOAP"" rel=""nofollow"">SOAP</a> or <a href=""http://www.xmlrpc.com/"" rel=""nofollow"">XML-RPC</a> protocols. In response to Ben's post, if you don't want to look over the BitTorrent source, you could just look at the article on <a href=""http://en.wikipedia.org/wiki/BitTorrent_(protocol)"" rel=""nofollow"">the BitTorrent protocol</a>.</p>
"
94516,"<p>Bear in mind that merely decompressing a ZIP file may result in <a href=""http://en.wikipedia.org/wiki/Decompression_bomb"" rel=""nofollow"">a security vulnerability</a>.</p>
"
284857,"<p>Maybe it is a configuration issue?  Django can be fronted with Apache by mod_python, WSGI and FastCGI and it can accept file uploads.  </p>
"
285150,"<p><a href=""http://www.eclipse.org/"" rel=""nofollow"">Eclipse</a> has python support.</p>

<p>There's also <a href=""http://www.python.org/idle/doc/idle2.html"" rel=""nofollow"">IDLE</a> or <a href=""http://www.wingware.com/"" rel=""nofollow"">Wingware</a>, though I'm not sure of their GUI support.</p>

<p>I'm sure a good <a href=""http://www.google.com/search?q=python+ide"" rel=""nofollow"">google search</a> would turn up more.</p>

<p>But in the end, I doubt it.  Python is dependent on third-party widget sets like Qt, Tk, Gtk, wxWidgets, etc for GUI support.  Each of those will have their own system for laying things out.</p>
"
285175,"<p>You can try <a href=""http://boa-constructor.sourceforge.net/"" rel=""nofollow"">Boa Constructor</a> or <a href=""http://www.dabodev.com/"" rel=""nofollow"">Dabo</a></p>
"
146047,"<p>You can use <a href=""http://qgis.org/"" rel=""nofollow"">Quantum GIS</a>. QGIS is a Open Source Geographic Information System using the Qt Framework.</p>

<p>QGIS can also be used with Python. You can either extend it with plugins written in Python or use the <a href=""http://wiki.qgis.org/qgiswiki/PythonBindings"" rel=""nofollow"">PyGIS Python bindings</a> to write your own application.</p>

<p>They have a Wiki with some good <a href=""http://wiki.qgis.org/qgiswiki/DevelopersCorner"" rel=""nofollow"">informations for developers</a>.</p>

<p>Maybe QGIS is to heavy for your purpose, but I add it here for completition anyway. </p>
"
146538,"<p>If your two code pastes are complete, then it doesn't look like the second, which makes the actual call to reverse(), ever imports the urls module and therefor if the url mapping is ever actually achieved.</p>
"
146639,"<p>You can match both kind of quotes in one go with <code>r""(\""|')(.*?)\1""</code> - the <code>\1</code> refers to the first group, so it will only match matching quotes.</p>
"
146649,"<p>You're calling re.compile quite a bit.  A global variable for these wouldn't hurt here.</p>
"
211188,"<p>I've just learned of the os.walk() command recently, and it may help you here.
It allows you to walk down a directory tree structure.</p>

<pre><code>import os
OUTPUT_DIR = 'C:\\RESULTS'
for path, dirs, files in os.walk('.'):
    for file in files:
        read_f = open(os.join(path,file),'r')
        write_f = open(os.path.join(OUTPUT_DIR,file))

        # Do stuff
</code></pre>
"
212010,"<p>One can use</p>

<pre><code>class options(object):
    VERBOSE = True
    IGNORE_WARNINGS = False

options.VERBOSE = False

if options.VERBOSE:
    ...
</code></pre>

<p>, using the class object itself (not an instance of the class!) as the place to store individual options.  This is terse and satisfies all of the requirements, but it seems like a misuse of the class concept.  It would also lead to confusion if a user instantiated the <code>options</code> class.</p>

<p>(If multiple instances of the options-holding objects were needed, this would be a very nice solution--the class definition supplies default values, which can be overridden in individual instances.)</p>
"
212144,"<p>The absolutely simplest class to do the job is:</p>

<pre><code>class Struct:
    def __init__(self, **entries): 
        self.__dict__.update(entries)
</code></pre>

<p>It can be later used as:</p>

<pre><code>john = Struct(name='john doe', salary=34000)
print john.salary
</code></pre>

<p><code>namedtuple</code> (as another commented suggested) is a more advanced class that gives you more functionality. If you're still using Python 2.5, the implementation 2.6's <code>namedtuple</code> is based on can be found at <a href=""http://code.activestate.com/recipes/500261/"" rel=""nofollow"">http://code.activestate.com/recipes/500261/</a></p>
"
212351,"<p>I can't do too much better than that, but here are a couple of ideas:</p>

<pre><code>class Foo:
    id = db.StringProperty() # etc.
    json_attrs = 'id bar baz'.split()

# Depending on how easy it is to identify string properties, there
# might also be a way to assign json_attrs programmatically after the
# definition of Foo, like this
Foo.json_attrs = [attr for attr in dir(Foo)
                  if isStringProperty(getattr(Foo, attr))]

fooDict=dict((foo.id,dict(getattr(foo, attr)
                          for attr in Foo.json_attrs))
              for foo in foos)
</code></pre>
"
213325,"<p>web2py uses jQuery</p>
"
64399,"<p>Just FYI, here's an alternate implementation... Probably violates about 15 million pythonic rules, but I publish it per information/observation:</p>

<pre><code>class Resettable(object):
    base_dict = {}
    def reset(self):
            self.__dict__ = self.__class__.base_dict

    def __init__(self):
            self.__dict__ = self.__class__.base_dict.copy()

class SomeClass(Resettable):
    base_dict = {
            'number_one': 1,
            'number_two': 2,
            'number_three': 3,
            'number_four': 4,
            'number_five': 5,
    }
    def __init__(self):
            Resettable.__init__(self)


p = SomeClass()
p.number_one = 100
print p.number_one
p.reset()
print p.number_one
</code></pre>
"
64487,"<p>I'd use http and start with understanding what the Python <a href=""http://docs.python.org/lib/asyncore-example.html"" rel=""nofollow"">library</a> offers. </p>

<p>Then I'd move onto the more industrial strength <a href=""http://wiki.python.org/moin/Twisted-Examples"" rel=""nofollow"">Twisted</a> library.</p>
"
311304,"<p>The <code>clean_post_data</code> shouldn't be a stand-alone function.</p>

<p>It should be a method in the form, named <code>clean</code>.  See <a href=""http://docs.djangoproject.com/en/dev/ref/forms/validation/#ref-forms-validation"" rel=""nofollow"">Form and Field Validation</a>.</p>
"
311590,"<p>How about:</p>

<pre><code>allUuids = [x.id for x in self.db.query(schema.allPostsUuid).execute(timeout = 20) 
                   if (x.type == ""post"" and x.deleted is not False)]
</code></pre>

<p>Generally, long lines can be avoided by pre-computing subexpressions into variables, which might add a minuscule performance cost:</p>

<pre><code>query_ids = self.db.query(schema.allPostsUuid).execute(timeout = 20)
allUuids = [x.id for x in query_ids
                   if (x.type == ""post"" and x.deleted is not False)]
</code></pre>

<p>By the way, isn't '<code>is not False</code>' kind-of superfluous ? Are you worried about differentiating between None and False ? Because otherwise, it suffices to leave the condition as only: i<code>f (x.type == ""post"" and x.deleted)</code></p>
"
311636,"<p>You may want to append it as a string?</p>

<pre><code>import datetime 
mylist = [] 
today = str(datetime.date.today())
mylist.append(today) 
print mylist
</code></pre>
"
311637,"<p>You can do:</p>

<pre><code>mylist.append(str(today))
</code></pre>
"
225101,"<p>You can set LC_TIME to force stftime() to use a specific locale:</p>

<pre><code>&gt;&gt;&gt; locale.setlocale(locale.LC_TIME, 'en_US')
'en_US'
&gt;&gt;&gt; datetime.datetime.now().strftime(locale.nl_langinfo(locale.D_T_FMT))
'Wed 22 Oct 2008 06:05:39 AM '
</code></pre>
"
225191,"<p>Well, here is a manual function to format it:</p>

<pre><code>def httpdate(dt):
    """"""Return a string representation of a date according to RFC 1123
    (HTTP/1.1).

    The supplied date must be in UTC.

    """"""
    weekday = [""Mon"", ""Tue"", ""Wed"", ""Thu"", ""Fri"", ""Sat"", ""Sun""][dt.weekday()]
    month = [""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"",
             ""Oct"", ""Nov"", ""Dec""][dt.month - 1]
    return ""%s, %02d %s %04d %02d:%02d:%02d GMT"" % (weekday, dt.day, month,
        dt.year, dt.hour, dt.minute, dt.second)
</code></pre>
"
225872,"<p>To be a bit more specific, Tk widgets have what are called ""bindtags"". When an event is processed, each bindtag on the widget is considered in order to see if it has a binding. A widget by default will have as its bindtags the widget, the widget class, the root widget, and ""all"". Thus, bindings to the widget will occur before the default bindings. Once your binding has been processed you can prevent any further bindtags from being considered by returning a ""break"".</p>

<p>The ramifications are this: if you make a binding on the widget, the class, root window and ""all"" bindings may fire as well. In addition, any binding you attach to the widget fires <em>before</em> the class binding which is where the default behavior (eg: the insertion of a character) happens. It is important to be aware of that in situations where you may want to handle the event after the default behavior rather than before.</p>
"
145161,"<p>I'll assume you're serious and suggest that you check out the many wonderful <a href=""http://wiki.python.org/moin/GuiProgramming"" rel=""nofollow"">GUI libraries</a> available for Python.</p>
"
92710,"<p>Well, well... I installed py2exe and I think it's a bug. In py2exe<code>_</code>util.c they should init rt<code>_</code>icon<code>_</code>id to 1 instead of 0. The way it is now, it's impossible to load the first format of the first icon using LoadIcon/LoadImage.</p>

<p>I'll notify the developers about this if it's not already a known issue.</p>

<p>A workaround, in the meantime, would be to include the same icon twice in your setup.py:</p>

<pre><code>'icon_resources': [(1, 'my_icon.ico'), (2, 'my_icon.ico')]
</code></pre>

<p>You can load the second one, while Windows will use the first one as the shell icon. Remember to use non-zero IDs though. :)</p>
"
92891,"<p>Why don't you try <a href=""http://code.google.com/p/modwsgi/"" rel=""nofollow"">modwsgi</a>? It sounds as the preffered way these days for WSGI applications such as Django.</p>

<p>If you don't wan't to compile stuff for Fedora Core, that might be trickier.</p>

<p>Regarding 1) <a href=""http://fitri.manzanisimo.net/2008/05/23/hostmonster-python-25-subversion-14-django-svn-mysqldb-fcgid/"" rel=""nofollow"">this</a> seems to solve the fcgid configuration problem. </p>

<p>Note that you don't want to run the django application manually like this: <code>python manage.py runfcgi</code>, the fcgi is run by apache automatically if the setup is correct and restarted by <code>touch your.fcgi</code>.</p>
"
93404,"<pre><code>import socket
socket.setdefaulttimeout(30000)
sock = socket.socket()
sock.connect(('www.google.com', 443))
ssl = socket.ssl(sock)
ssl.server()
--&gt; '/C=US/ST=California/L=Mountain View/O=Google Inc/CN=www.google.com'
</code></pre>

<p>It works just fine. I can't reproduce your error.</p>
"
285310,"<p>Exit codes in many programming languages are up to programmers. So you have to look at your program source code (or manual). Zero usually means ""everything went fine"".</p>
"
285449,"<p>I'm a GNOME guy, so I prefer PyGTK. The standard GUI builder for that is the <a href=""http://glade.gnome.org/"" rel=""nofollow"">Glade Interface Designer</a> (until it transitions to GtkBuilder).</p>
"
285719,"<p>When the following XPath expression is evaluated:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;<code>boolean(/*/*[.='Two'])</code></p>

<p>the result is <strong>true</strong>, if such an element (a child of the top element such that its string value is equal to ""Two"") exists,</p>

<p>and <strong>false</strong> otherwise.</p>

<p>Hope this helped.</p>

<p>Cheers,</p>

<p>Dimitre Novatchev</p>
"
91859,"<pre><code>getattr(p, s)
setattr(p, s, new_value)
</code></pre>
"
91911,"<p>Try:</p>

<pre><code>p.model_properties()[s].get_value_for_datastore(p)
</code></pre>

<p>See <a href=""http://code.google.com/appengine/docs/datastore/propertyclass.html#Property_get_value_for_datastore"" rel=""nofollow"">the documentation</a>.</p>
"
147755,"<p>This is Pythons way do show you unicode encoded strings. But i think you should be able to print the string on the screen or write it into a new file without any problems.</p>

<pre><code>&gt;&gt;&gt; test = u""I don\u2018t like this""
&gt;&gt;&gt; test
u'I don\u2018t like this'
&gt;&gt;&gt; print test
I donât like this
</code></pre>
"
147799,"<p>There is a possibility that somehow you have a non-unicode string with unicode escape characters, e.g.:</p>

<pre><code>&gt;&gt;&gt; print repr(text)
'I don\\u2018t like this'
</code></pre>

<p>This actually happened to me once before. You can use a <code>unicode_escape</code> codec to decode the string to unicode and then encode it to any format you want:</p>

<pre><code>&gt;&gt;&gt; uni = text.decode('unicode_escape')
&gt;&gt;&gt; print type(uni)
&lt;type 'unicode'&gt;
&gt;&gt;&gt; print uni.encode('utf-8')
I donât like this
</code></pre>
"
92461,"<p>People tend to say something along the lines of ""The best way to learn is by doing"" but I've always found that unless you're specifically learning a language to contribute to some project it's difficult to actually find little problems to tackle to keep yourself going.</p>

<p>A good solution to this is <a href=""http://projecteuler.net/"" rel=""nofollow"">Project Euler</a>, which has a list of various programming\mathematics challenges ranging from simple  to quite brain-taxing. As an example, the first challenge is:</p>

<blockquote>
  <p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</p>
</blockquote>

<p>And by problem #50 it's already getting a little tougher</p>

<blockquote>
  <p>Which prime, below one-million, can be written as the sum of the most consecutive primes</p>
</blockquote>

<p>There are 208 in total, but I think some new ones get added here and there.</p>

<p>While I already knew python fairly well before starting Project Euler, I found that I learned some cool tricks purely through using the language so much. Good luck!</p>
"
286372,"<p>The easiest way to start afresh with Mac Ports or Fink is to simply remove the folder <code>/sw/</code> (for fink) or <code>/opt/</code> for MacPorts.</p>

<p>To completely remove them, you will have to remove a line in your <code>~/.profile</code> file:</p>

<p>For fink:</p>

<pre><code>test -r /sw/bin/init.sh &amp;&amp; . /sw/bin/init.sh
</code></pre>

<p>..and for MacPorts, I don't have it installed currently, but there will be something along the lines of:</p>

<pre><code>export PATH=$PATH:/opt/local/bin
export PATH=$PATH:/opt/local/sbin
</code></pre>

<p><hr /></p>

<p>As for installing Python, currently the cleanest way is to build it from source..</p>

<p>I wrote up how I installed Python 2.6 on Leopard <a href=""http://neverfear.org/blog/view/Installing_Python_2_6_3_0_without_breaking_stuff/"" rel=""nofollow"">here</a>. It was for one of the 2.6 beta releases, so change the <code>curl -O</code> line to the newest release!</p>

<p>In short, download and extract the latest <a href=""http://python.org/ftp/python/2.6/Python-2.6.tgz"" rel=""nofollow"">python 2.6 source tarball</a>, then (in a terminal) <code>cd</code> to where you extracted the tarball, and run the following commands..</p>

<pre><code>./configure --prefix=/usr/local/python2.6
make
sudo make install
</code></pre>

<p>That will install python2.6 into <code>/usr/local/python2.6/</code> (the last line requires sudo, so will ask you for your password)</p>

<p>Finally add <code>/usr/local/python2.6</code> to $PATH, by adding the following line you the file <code>~/.profile</code></p>

<pre><code>export PATH=$PATH:/usr/local/python2.6
</code></pre>

<p>Then you will be able to run the <code>python2.6</code> command.</p>

<p>Ideally you would just install <a href=""http://wiki.python.org/moin/MacPython/Leopard"" rel=""nofollow"">MacPython</a>, but it doesn't seem to have a decent Python 2.6 installer yet.</p>
"
286449,"<blockquote>
  <p>And as far as I know they use a lot of python inside google too.</p>
</blockquote>

<p>Well i'd hope so, the maker of python still works at google if i'm not mistaken? </p>

<p>As for the use of Python, i think it's a great language for stand-alone apps. It's heavily used in a lot of Linux programs, and there are a few nice widget sets out there to aid in the development of GUI's. </p>
"
286491,"<p>Python is a delight to use. I use it routinely and also write a lot of code for work in C#. There are two drawbacks to writing UI code in Python. one is that there is not a single ui framework that is accepted by the majority of the community. when you write in c# the .NET runtime and class libraries are all meant to work together. With Python every UI library has at's own semantics which are often at odds with the pythonic mindset in which you are trying to write your program. I am not blaming the library writers. I've tried several libraries (wxwidgets, PythonWin[Wrapper around MFC], Tkinter), When doing so I often felt that I was writing code in a language other than Python (despite the fact that it was python) because the libraries aren't exactly pythonic they are a port from another language be it c, c++, tk.</p>

<p>So  for me I will write UI code in .NET (for me C#) because of the IDE &amp; the consistency of the libraries. But when I can I will write business logic in python because it is more clear and more fun.</p>
"
146862,"<p>Why not use <a href=""http://www.makotemplates.org/"" rel=""nofollow"">Mako</a>?  Seriously.  What feature do you require that Mako doesn't have?  Perhaps you can adapt or extend something that already works.</p>
"
147443,"<p>I haven't used Difflib.SequenceMatcher, but have you considered pre-processing the files to remove all blank lines and whitespace (perhaps via regular expressions) and then doing the compare?</p>
"
224787,"<p>It's not bad if it serves your purpose. ""Practicality beats purity"".</p>

<p>I saw such approach elserwhere (eg. in <a href=""http://www.blueskyonmars.com/projects/paver/"" rel=""nofollow"">Paver</a>), so this can be considered <em>common need</em> (or desire).</p>
"
224801,"<p>I don't understand your question (what are files?, what's your table structure?), but here goes a simple sample:</p>

<pre><code>&gt;&gt;&gt; import MySQLdb
&gt;&gt;&gt; conn = MySQLdb.connect(host=""localhost"",
                           user=""root"",
                           password=""merlin"",
                           db=""files"")
&gt;&gt;&gt; cursor = conn.cursor()
&gt;&gt;&gt; cursor.execute(""SELECT * FROM files"")
5L
&gt;&gt;&gt; rows = cursor.fetchall()
&gt;&gt;&gt; cursor.execute(""CREATE TABLE destination (file varchar(255))"")
0L
&gt;&gt;&gt; for row in rows:
...   cursor.execute(""INSERT INTO destination VALUES (%s)"" % row[0])
...
1L
1L
1L
1L
1L
</code></pre>
"
225029,"<p>This isn't refactoring (it doesn't need refactoring as far as I can see), but some suggestions:</p>

<p>You should use the email package rather than rfc822.  Replace rfc822.Message with email.Message, and use email.Utils.parseaddr(msg[""From""]) to get the name and email address, and msg[""Subject""] to get the subject.</p>

<p>Use os.path.join to create the path.  This:</p>

<pre><code>emailpath = str(self._emailpath + self._inboxfolder + ""\\"" + email + ""_"" + msg.getheader(""Subject"") + "".eml"")
</code></pre>

<p>Becomes:</p>

<pre><code>emailpath = os.path.join(self._emailpath + self._inboxfolder, email + ""_"" + msg.getheader(""Subject"") + "".eml"")
</code></pre>

<p>(If self._inboxfolder starts with a slash or self._emailpath ends with one, you could replace the first + with a comma also).</p>

<p>It doesn't really hurt anything, but you should probably not use ""file"" as a variable name, since it shadows a built-in type (checkers like pylint or pychecker would warn you about that).</p>

<p>If you're not using self.popinstance outside of this function (seems unlikely given that you connect and quit within the function), then there's no point making it an attribute of self.  Just use ""popinstance"" by itself.</p>

<p>Use xrange instead of range.</p>

<p>Instead of just importing StringIO, do this:</p>

<pre><code>try:
    import cStringIO as StringIO
except ImportError:
    import StringIO
</code></pre>

<p>If this is a POP mailbox that can be accessed by more than one client at a time, you might want to put a try/except around the RETR call to continue on if you can't retrieve one message.</p>

<p>As John said, use ""\n"".join rather than string.join, use try/finally to only close the file if it is opened, and pass the logging parameters separately.</p>

<p>The one refactoring issue I could think of would be that you don't really need to parse the whole message, since you're just dumping a copy of the raw bytes, and all you want is the From and Subject headers.  You could instead use popinstance.top(0) to get the headers, create the message (blank body) from that, and use that for the headers.  Then do a full RETR to get the bytes.  This would only be worth doing if your messages were large (and so parsing them took a long time).  I would definitely measure before I made this optimisation.</p>

<p>For your function to sanitise for the names, it depends how nice you want the names to be, and how certain you are that the email and subject make the filename unique (seems fairly unlikely).  You could do something like:</p>

<pre><code>emailpath = """".join([c for c in emailpath if c in (string.letters + string.digits + ""_ "")])
</code></pre>

<p>And you'd end up with just alphanumeric characters and the underscore and space, which seems like a readable set.  Given that your filesystem (with Windows) is probably case insensitive, you could lowercase that also (add .lower() to the end).  You could use emailpath.translate if you want something more complex.</p>
"
145801,"<p>Psycopg1 is known for better performance in heavilyy threaded environments (like web applications) than Psycopg2, although not maintained. Both are well written and rock solid, I'd choose one of these two depending on use case.</p>
"
146015,"<p>If you consider Qt, consider also throwing in kdelibs dependency, then you'll have marble widget, which handles maps in neat way.</p>

<p>If you stick only to Qt, then QGraphicsView is a framework to go.</p>

<p>(note: kdelibs != running whole kde desktop)</p>
"
90206,"<p>As has been mentioned, you should use a parser instead of a regex.</p>

<p>This is how you could do it with a regex though:</p>

<pre><code>import re

html = '''
&lt;body&gt;

&lt;h1&gt;Dog &lt;/h1&gt;
&lt;h2&gt;Cat &lt;/h2&gt;
&lt;h3&gt;Fancy &lt;/h3&gt;
&lt;h1&gt;Tall cup of lemons&lt;/h1&gt;
&lt;h1&gt;&lt;a href=""dog.com""&gt;Dog thing&lt;/a&gt;&lt;/h1&gt;
&lt;/body&gt;
'''

p = re.compile(r'''
    &lt;(?P&lt;header&gt;h[0-9])&gt;             # store header tag for later use
    \s*                              # zero or more whitespace
    (&lt;a\shref=""(?P&lt;href&gt;.*?)""&gt;)?     # optional link tag. store href portion
    \s*
    (?P&lt;title&gt;.*?)                   # title
    \s*
    (&lt;/a&gt;)?                          # optional closing link tag
    \s*
    &lt;/(?P=header)&gt;                   # must match opening header tag
''', re.IGNORECASE + re.VERBOSE)

stories = p.finditer(html)

for match in stories:
    print '%(title)s [%(href)s]' % match.groupdict()
</code></pre>

<p>Here are a couple of good regular expression resources:</p>

<ul>
<li><a href=""http://docs.python.org/dev/howto/regex.html"" rel=""nofollow"">Python Regular Expression HOWTO</a></li>
<li><a href=""http://www.regular-expressions.info/"" rel=""nofollow"">Regular-Expressions.info</a></li>
</ul>
"
91508,"<p>There will be a two-step dance here.  See <a href=""http://www.artima.com/weblogs/viewpost.jsp?thread=227041"" rel=""nofollow"">Python 3000 and You</a>.</p>

<p>Step 1 is to get running under 3.0.</p>

<p>Step 2 is to rethink your API's to, perhaps, do something more sensible.</p>

<p>The most likely course is that the libraries will switch to unicode strings to remain as compatible as possible with how they used to work.</p>

<p>Then, perhaps, some will switch to bytes to more properly implement the RFC standards for the various protocols.</p>
"
91670,"<p>If you're using wxPython, you can use the following simple code:</p>

<pre><code>wx.Icon(sys.argv[0], wx.BITMAP_TYPE_ICO)
</code></pre>

<p>I usually have code that checks whether it's running from an EXE or not, and acts accordingly:</p>

<pre><code>def get_app_icon():
    if hasattr(sys, ""frozen"") and getattr(sys, ""frozen"") == ""windows_exe"":
        return wx.Icon(sys.argv[0], wx.BITMAP_TYPE_ICO)
    else:
        return wx.Icon(""gfx/myapp.ico"", wx.BITMAP_TYPE_ICO)
</code></pre>
"
91735,"<p>Here is a <a href=""http://decibel.ni.com/content/docs/DOC-1494"" rel=""nofollow"">python sample code calling a CVI</a>.</p>

<p>There are <a href=""http://www.scipy.org/Cookbook/Data_Acquisition_with_PyUL"" rel=""nofollow"">DaqMx python bindings</a> too.</p>
"
287247,"<p>We are distributing a 40k line IronPython application. We have not been able to compile the whole thing into a single binary distributable. Instead we have been distributing it as a zillion tiny dlls, one for each IronPython module. This works fine though.</p>

<p>However, on the newer release, IronPython 2.0, we have a recent spike which seems to be able to compile everything into a single binary file. This also results in faster application start-up too (module importing is faster.) Hopefully this spike will migrate into our main tree in the next few days.</p>

<p>To do the distribution we are using WiX, which is a Microsoft internal tool for creating msi installs, that has been open-sourced (or made freely available, at least.) It has given us no problems, even though our install has some quite fiddly requirements. I will definitely look at using WiX to distribute other IronPython projects in the future.</p>
"
310799,"<p>Not a direct answer to your needs, but check the <a href=""http://mpesch3.de1.cc/mp3dc.html#dwn"" rel=""nofollow"">mp3DirectCut</a> software that does what you want (as a GUI app). I think that the source code is available, so even if you don't find a library, you could build one of your own, or build a python extension using code from mp3DirectCut.</p>
"
310852,"<p>I've had success with integrating <a href=""http://django-cms.org"" rel=""nofollow"">django-cms</a>.  Just include it at the end of your urlconf and it won't interfere.  (You'll just lose the the nice 404 page when <code>DEBUG=True</code>)</p>

<p>Using various combinations of context processors and custom template tags I've been able to do everything I've needed, but if you <em>really</em> need to insert the content into your own view, that should be easy enough.  (Perhaps call <code>cms.views.render_page()</code> with a template that lacks all the wrapper html?)</p>
"
310893,"<p>Does this do what you want:</p>

<pre><code>tile(my_ar, (1,1,3))
</code></pre>
"
310922,"<p>There's <a href=""http://stackoverflow.com/questions/310856/python-gtk-mvc"">Dabo</a>, made by some guys moving from FoxPro.  It might work for you if you're writing a data driven business app.</p>

<p>Beyond that, I haven't found anything that you haven't.</p>

<blockquote>
  <p>GUI stuff is <em>supposed</em> to be hard. It builds character.</p>
</blockquote>

<p>(<a href=""http://www.amk.ca/quotations/python-quotes/"" rel=""nofollow"">Attributed</a> to Jim Ahlstrom, at one of the early Python workshops.  Unfortunately, things haven't changed much since then.)</p>
"
64195,"<p>Classes don't have values. Objects do. Is what you want basically a class that can reset an instance (object) to a set of default values? </p>

<p>How about just providing a reset method, that resets the properties of your object to whatever is the default?</p>

<p>I think you should simplify your question, or tell us what you really want to do. It's not at all clear.</p>
"
64206,"<p>I think you are confused. You should re-check the meaning of ""class"" and ""instance"".</p>

<p>I think you are trying to first declare a Instance of a certain Class, and then declare a instance of other Class, use the data from the first one, and then find a way to convert the data in the second instance and use it on the first instance...</p>

<p>I recommend that you use operator overloading to assign the data.</p>
"
64216,"<pre><code>class ABC(self):
   numbers = [0,1,2,3]

class DEF(ABC):
   def __init__(self):
      self.new_numbers = super(ABC,self).numbers

   def setnums(self, numbers):
      self.new_numbers = numbers

   def getnums(self):
     return self.new_numbers

   def reset(self):
     __init__()
</code></pre>
"
160031,"<blockquote>
  <p>I know, because if I have an .after timer waiting and I set the date/time after the timer's expiration, the timer event fires instantly.</p>
</blockquote>

<p>That could just mean that Tkinter (or Tk) is polling the system clock as part of the event loop to figure out when to run timers.</p>

<p>If you're using Windows, Mark Hammond's book notes that you can use the win32evtlogutil module to respond to changes in the Windows event log.  Basically it works like this:</p>

<pre><code>import win32evtlogutil
def onEvent(record):
  # Do something with the event log record
win32evtlogutil.FeedEventLogRecords(onEvent)
</code></pre>

<p>But you'll need to get docs on the structure of the event records (I don't feel like typing out the whole chapter, sorry :-) ).  Also I don't know if date changes turn up in the event log anyway.</p>

<p>Really, though, is it so bad to just poll the system clock?  It seems easiest and I don't think it would slow you down much.</p>

<p>(finally, a comment: I don't know about your country, but here in NZ, daylight savings doesn't involve a date change; only the time changes (from 2am-3am, or vice-versa))</p>
"
160053,"<p>Place the configuration information in a encrypted config file. Query this info in your code using an key. Place this key in a separate file per environment, and don't store it with your code.</p>
"
181591,"<p>You can use a splitter, yes.</p>

<p>Also, it makes sense to create a Panel, place your widgets in it (with sizers), and add this panel to the Frame.</p>
"
190004,"<p>I was reading about this on Processing.org recently and found it stashed in my favorites.  Maybe it helps you...</p>

<p><a href=""http://processing.org/discourse/yabb_beta/YaBB.cgi?board=Video;action=display;num=1159141301"" rel=""nofollow"">http://processing.org/discourse/yabb_beta/YaBB.cgi?board=Video;action=display;num=1159141301</a></p>
"
288123,"<p>You can put the reusable stuff in <code>site-packages</code>.  That's completely transparent, since it's in <code>sys.path</code> by default.</p>

<p>You can put <code>someName.pth</code> files in <code>site-packages</code>.  These files have the directory in which your actual reusable stuff lives.  This is also completely transparent.  And doesn't involve the extra step of installing a change in <code>site-packages</code>.</p>

<p>You can put the directory of the reusable stuff on <code>PYTHONPATH</code>.  That's a little less transparent, because you have to make sure it's set.  Not rocket science, but not completely transparent.</p>
"
288174,"<p>In one project, I wanted to make sure that the user could put python scripts (that could basically be used as plugins) anywhere.  My solution was to put the following in the config file for that project:</p>

<pre><code>[server]
PYPATH_APPEND: /home/jason:/usr/share/some_directory
</code></pre>

<p>That way, this would add /home/jason and /usr/share/some_directory to the python path at program launch.</p>

<p>Then, it's just a simple matter of splitting the string by the colons and adding those directories to the end of the sys.path.  You may want to consider putting a module in the site-packages directory that contains a function to read in that config file and add those directories to the sys.path (unfortunately, I don't have time at the moment to write an example).</p>

<p>As others have mentioned, it's a good idea to put as much in site-packages as possible and also using .pth files.  But this can be a good idea if you have a script that needs to import a bunch of stuff that's not in site-packages that you wouldn't want to import from other scripts.</p>

<p>(there may also be a way to do this using .pth files, but I like being able to manipulate the python path in the same place as I put the rest of my configuration info)</p>
"
288569,"<p>I'm pretty sure this is going to be impossible without using Outlook and a MAPI profile.  If you can sweet talk your mail admin into enabling IMAP on the Exchange server it would make your life a lot easier.</p>
"
224071,"<p>I like dot notation a lot better than dictionary fields personally.  The reason being that it makes autocompletion work a lot better.</p>
"
146710,"<p>If a regexp only contains one .* wildcard and literals, then you can use find and rfind to locate the opening and closing delimiters.</p>

<p>If it contains only a series of .*? wildcards, and literals, then you can just use a series of find's to do the work.</p>

<p>If the code is time-critical, this switch away from regexp's altogether might give a little more speed.</p>

<p>Also, it looks to me like this is an <a href=""http://en.wikipedia.org/wiki/LL_parser"" rel=""nofollow"">LL-parsable language</a>.  You could look for a library that can already parse such things for you.  You could also use recursive calls to do a one-pass parse -- for example, you could implement your processVariables function to only consume up the first quote, and then call a quote-matching function to consume up to the next quote, etc.</p>
"
89338,"<p>In addition to the multiple settings files mentioned by Jim, I also tend to place two settings into my settings.py file at the top <code>BASE_DIR</code> and <code>BASE_URL</code> set to the path of the code and the URL to the base of the site, all other settings are modified to append themselves to these.</p>

<p><code>BASE_DIR = ""/home/sean/myapp/""</code>
e.g. <code>MEDIA_ROOT = ""%smedia/"" % BASEDIR</code></p>

<p>So when moving the project I only have to edit these settings and not search the whole file.</p>

<p>I would also recommend looking at fabric and <a href=""http://en.wikipedia.org/wiki/Capistrano"" rel=""nofollow"">Capistrano</a> (Ruby tool, but it can be used to deploy Django applications) which facilitate automation of remote deployment.</p>
"
190394,"<p>In Python and Ruby it is only possible to use multiple cores, is to spawn new (heavyweight) processes.
The Java counterparts inherit the possibilities of the Java platform. You could imply use Java threads. That is for example a reason why sometimes (often) Java Application Server like Glassfish are used for Ruby on Rails applications.</p>
"
341834,"<p>I did a conversion between a PHP site and a Turbogears(Python) site for my company.  The initial reason for doing so was two fold, first so a redesign would be easier and second that features could be easily added.  It did take a while to get the full conversion done, but what we end up with was a very flexible back end and an even more flexible and readable front end.  We've added several features that would have been very hard in PHP and we are currently doing a complete overhaul of the front end, which is turning out to be very easy.</p>

<p>In short it's something I would recommend, and my boss would probably say the same thing.  Some people here are making good points though.  Python isn't as fast as what PHP can give you, but what it lacks in performance it more then makes up for in versatility.</p>
"
342449,"<p>I've used variations of this <a href=""http://code.activestate.com/recipes/497000/"" rel=""nofollow"">cookbook entry</a> to distribute python apps.  Basically it involves zipping all your python sources up into a zip file, then concatenating it with a shell script to import the source files.</p>

<p>This can be helpful if you need to give an app its own version of the library.</p>
"
342517,"<p>Why using python logger instead of django-logging? Give it a try it might just solve your problem. </p>

<p><a href=""http://code.google.com/p/django-logging/wiki/Overview"" rel=""nofollow"">http://code.google.com/p/django-logging/wiki/Overview</a> </p>

<p>At the moment it would only allow to view the root logger, but you can sure write to multiple loggers.</p>
"
342835,"<p>The #1 thing IMO:  <strong>Focus on thread safety</strong>.  CPython's GIL makes writing threadsafe code easy because only one thread can access the interpreter at a time.  IronPython and Jython are a little less hand-holding though.</p>
"
158587,"<p>True booleans are coerced to unit integers, and false booleans to zero integers.  So if you're happy to use scipy or numpy, make an array of integers for each element of your sequence, each array containing one element for each of your tests, and sum over the arrays.  E.g.</p>

<pre><code>&gt;&gt;&gt; sum(scipy.array([c % 2 == 0, c % 3 == 0]) for c in xrange(10))
array([5, 4])
</code></pre>
"
158622,"<p>Even though it is essentially a singleton at this point, the usual arguments against globals apply.  For a pythonic singleton-substitute, look up the ""borg"" object.  </p>

<p>That's really the only difference.  Once the dictionary object is created, you are only binding new references as you pass it along unless if you explicitly perform a deep copy.  It makes sense that it is centrally constructed once and only once so long as each solver instance does not require a private copy for modification.  </p>
"
288994,"<p>There is a free C implementation for XML called libxml2 which has some api bits for XPath which I have used with great success which you can specify HTML as the document being loaded.  This had worked for me for some less than perfect HTML documents..  </p>

<p>For the most part, XPath is most useful when the inbound HTML is properly coded and can be read 'like an xml document'.  You may want to consider using a utility that is specific to this purpose for cleaning up HTML documents.  Here is one example: <a href=""http://tidy.sourceforge.net/"" rel=""nofollow"">http://tidy.sourceforge.net/</a></p>

<p>As far as these XPath tools go- you will likely find that most implementations are actually based on pre-existing C or C++ libraries such as libxml2.</p>
"
289482,"<p>Behind the scenes, VB and VBA are maintaining references to COM objects for the application, worksheets etc.  This is why you have the globals 'Application', 'Worksheets' etc.  It is possible that VBA is still holding a reference to the worksheet, so Excel hasn't tidied it up properly.</p>

<p>Try not using these implicit globals and referencing the items in the object model explicitly.  Alternatively you could do it directly in Python.</p>

<p>Here's a python script that will do something like what you want:</p>

<pre><code>import win32com.client
xl = win32com.client.Dispatch ('Excel.Application')
xl.Visible = True
wb = xl.Workbooks.Add()
wb.Worksheets[0].Delete()
wb.Worksheets.Add()
wb.Worksheets[0].Name = 'Sheet1'
</code></pre>
"
150112,"<p>Threads -
Let's use a simple 2-layer view (GUI, application logic).</p>

<p>The application logic work should be done in a separate Python thread.  For Asynchronous events that need to propagate up to the GUI layer, use wx's event system to post custom events.  Posting wx events is thread safe so you could conceivably do it from multiple contexts.</p>

<p>Working in the other direction (GUI input events triggering application logic), I have found it best to home-roll a custom event system.  Use the Queue module to have a thread-safe way of pushing and popping event objects.  Then, for every synchronous member function, pair it with an async version that pushes the sync function object and the parameters onto the event queue.  </p>

<p>This works particularly well if only a single application logic-level operation can be performed at a time.  The benefit of this model is that synchronization is simple - each synchronous function works within it's own context sequentially from start to end without worry of pre-emption or hand-coded yielding.  You will not need locks to protect your critical sections.  At the end of the function, post an event to the GUI layer indicating that the operation is complete.  </p>

<p>You could scale this to allow multiple application-level threads to exist, but the usual concerns with synchronization will re-appear.</p>

<p><em>edit</em> - Forgot to mention the beauty of this is that it is possible to completely decouple the application logic from the GUI code.  The modularity helps if you ever decide to use a different framework or use provide a command-line version of the app.  To do this, you will need an intermediate event dispatcher (application level -> GUI) that is implemented by the GUI layer.  </p>
"
149017,"<p>Threads or processes depending on the application.  Sometimes it's actually best to have the GUI be it's own program and just send asynchronous calls to other programs when it has work to do.  You'll still end up having multiple threads in the GUI to monitor for results, but it can simplify things if the work being done is complex and not directly connected to the GUI.</p>
"
223387,"<p>I dug through my old bookmarks (I love Del.icio.us!) and found this article: <a href=""http://blogs.acceleration.net/ryan/articles/577.aspx"" rel=""nofollow"">Code Generation with Python, Cog, and Nant</a>. Keep in mind that anything you can do in NAnt can probably be done in MSBuild as well. This should be enough to get you started.</p>
"
147732,"<p>Using your sample strings:</p>

<pre><code>&gt;&gt;&gt; s=difflib.SequenceMatcher(lambda x: x == '\n', s1, s2)
&gt;&gt;&gt; s.ratio()
0.94669848846459825
</code></pre>

<p>Interestingly if ' ' is also included as junk:</p>

<pre><code>&gt;&gt;&gt; s=difflib.SequenceMatcher(lambda x: x in ' \n', s1, s2)
&gt;&gt;&gt; s.ratio()
0.7653142402545744
</code></pre>

<p>Looks like the new lines are having a much greater affect than the spaces.</p>
"
159169,"<p>I dont know of a unified way, but heres something that you might find useful:</p>

<p><a href=""http://www.codeguru.com/Cpp/I-N/network/networkinformation/article.php/c5451"" rel=""nofollow"">http://www.codeguru.com/Cpp/I-N/network/networkinformation/article.php/c5451</a></p>

<p>What I would do in this case would be to wrap these up into a function, and based on the OS it would run the proper command, parse as required and return only the MAC address formatted as you want. Its ofcourse all the same, except that you only have to do it once, and it looks cleaner from the main code.</p>
"
310267,"<p>Your question is a bit unclear. You say you want a regular expression, but could it be that you want a glob-style pattern you can use with commands like ls? glob expressions and regular expressions are similar in concept but different in practice (regular expressions are considerably more powerful, glob style patterns are easier for the most common cases when looking for files. </p>

<p>Also, what do you consider to be the pattern? Certainly, * (glob) or .* (regex) will match the pattern. Also, *<em>test.ext (glob) or .</em>_test.ext (regexp) pattern would match, as would many other variations. </p>

<p>Can you be more specific about the pattern? For example, you might describe it as ""b, followed by digits, followed by cv, followed by digits ..."" </p>

<p>Once you can precisely explain the pattern in your native language (and that must be your first step), it's usually a fairly straight-forward task to translate that into a glob or regular expression pattern. </p>
"
310493,"<p>I propose:</p>

<pre><code> numpy.resize(my_ar, (3,3)).transpose()
</code></pre>

<p>You can of course adapt the shape <code>(my_ar.shape[0],)*2</code> or whatever</p>
"
66967,"<p>I'm fairly new to Python, but the tuple technique seems very pythonic to me.  However, I've had another idea that may enhance readability.  Using a dictionary allows access to the different values by name rather than position.  For example:</p>

<pre><code>def divide(x, y):
    return {'quotient': x/y, 'remainder':x%y }

answer = divide(22, 7)
print answer['quotient']
print answer['remainder']
</code></pre>
"
308237,"<p>there are two ways i could imagine handling this:</p>

<ol>
<li><p>have your backend script (python) output the information of a long process to a log of some sort (text file, database, session, etc...) and then have javascript grab the information via ajax and update the current page.</p></li>
<li><p>same deal, but instead of ajax just have a meta refresh on the page which would grab the latest updated information.</p></li>
</ol>
"
308462,"<p>It is not an answer to your question, but related. Here is a CPython version:</p>

<pre><code>from zipfile import ZipFile, ZIP_DEFLATED

def test(file):
    ZipFile(file+"".zip"", ""w"", ZIP_DEFLATED).write(file)
</code></pre>
"
308464,"<p>""Can I define a class variable and replace it with a data variable?""</p>

<p>No.  They're separate things.  A class variable exists precisely once -- in the class.</p>

<p>You could -- to finesse code completion -- start with some class variables and then delete those lines of code after you've written your class.  But every time you forget to do that nothing good will happen.</p>

<p>Better is to try a different IDE.  <a href=""http://www.activestate.com/store/download.aspx?prdGUID=20f4ed15-6684-4118-a78b-d37ff4058c5f"" rel=""nofollow"">Komodo Edit</a>'s code completions seem to be sensible.</p>

<p>If you have so many variables with such long names that code completion is actually helpful, perhaps you should make your classes smaller or use shorter names.  Seriously.  </p>

<p>I find that when you get to a place where code completion is more helpful than annoying, you've exceeded the ""keep it all in my brain"" complexity threshold.  If the class won't fit in my brain, it's too complex.</p>
"
308944,"<p>I agree with S.Lott, that you should write out an example of what you want to generate.</p>

<p>Solving a problem with code generation should be less complicated than without.</p>

<p>This is because your total program has to deal with a lot of input information, and if a subset of that information changes very seldom, like once a week, the code generator only has to condition on that subset. The generated code conditions on the remaining input that changes more frequently.
It's a divide-and-conquer strategy. Another name for it is ""partial evaluation"".</p>

<p>Generated code should also run a lot faster because it's less general.</p>

<p>In your specific case, there's no harm in doing the code generation in 2 (or more) passes. Like on pass 1 you generate declarations. On pass 2 you generate process code. Alternatively you could generate two output streams, and concatenate them at the end.</p>

<p>Hope that helps. Sorry if I'm just saying what's obvious.</p>
"
310152,"<p>The built in function id() returns a unique id for any object, which just happens to be it's memory address. </p>

<p><a href=""http://docs.python.org/library/functions.html#id"" rel=""nofollow"">http://docs.python.org/library/functions.html#id</a></p>
"
213717,"<p>If you hate numpy, get out RPy and your local copy of R, and use it instead.</p>

<p>(I would also echo to make you you really need to invert the matrix.  In R, for example, linalg.solve and the solve() function don't actually do a full inversion, since it is unnecessary.)</p>
"
213834,"<p>Using a dict wouldn't like double your memory usage unless the objects you're storing are really tiny, since the values are only pointers to the actual objects:</p>

<pre><code>&gt;&gt;&gt; a = 'foo'
&gt;&gt;&gt; b = [a]
&gt;&gt;&gt; c = [a]
&gt;&gt;&gt; b[0] is c[0]
True
</code></pre>

<p>In that example, 'foo' is only stored once.  Does that make a difference for you?  And exactly how many items are we talking about anyway?</p>
"
214149,"<p>It shouldn't be too hard if you have the answer <a href=""http://stackoverflow.com/questions/213901/in-perl-how-do-i-process-input-as-soon-as-it-arrives-instead-of-waiting-for-new"">this question</a>.</p>

<p>(Essentially, read one character at a time and if it's a hash, print it.  If it isn't a hash, save the character to print out later.)</p>
"
86172,"<p>Pros: Access to the libraries available for JVM or CLR.</p>

<p>Cons: Both naturally lag behind CPython in terms of features.</p>
"
86427,"<p>IronPython and Jython use the runtime environment for .NET or Java and with that comes Just In Time compilation and a garbage collector different from the original CPython. They might be also faster than CPython thanks to the JIT, but I don't know that for sure.</p>

<p>A downside in using Jython or IronPython is that you cannot use native C modules, they can be only used in CPython.</p>
"
86665,"<p><a href=""http://codespeak.net/pypy/dist/pypy/doc/home.html"" rel=""nofollow"">PyPy</a> is a Python implementation written in RPython wich is a Python subset. </p>

<p>RPython can be translated to run on a VM or, unlike standard Python, RPython can be statically compiled.</p>
"
290657,"<p>Just use catalog.search({'path':'Plone/testing'}). It performs the same query as catalog() but does not filter the results based on the current user's permissions.</p>

<p>IPython's zope profile does provide a method utils.su('username') to change the current user, but it does not recognize the admin user (defined in /acl_users instead of /Plone/acl_users) and after calling it subsequent calls to catalog() fail with AttributeError: 'module' object has no attribute 'checkPermission'.</p>
"
288778,"<p>It is perfectly acceptable to inherit from a built in class. In this case I'd say you're right on the money. <br>
The log ""is a"" file so that tells you inheritance is ok.. </p>

<p>General rule. <br>
Dog ""is a""n animal, therefore inherit from animal.<br>
Owner ""has a""n animal therefore don't inherit from animal. </p>
"
288783,"<p>Although it is in some cases useful to inherit from builtins, the real question here is what you want to do with the output and what's your big-picture design. I would usually write a reader (that uses a file object) and spit out whatever data class I need to hold the information I just read. It's then easy to design that data class to fit in with the rest of my design.</p>
"
288884,"<p>You should be fairly safe inheriting from a ""builtin"" class, as later modifications to these classes will usually be compatible with the current version. </p>

<p>However, you should think seriously about wether you really want to tie your class to the additional functionality provided by the builtin class. As mentioned in another answer you should consider (perhaps even prefer) using <em>delegation</em> instead. </p>

<p>As an example of why to avoid inheritance if you don't need it you can look at the <em>java.util.Stack</em> class. As it extends Vector it inherits <strong>all</strong> of the methods on Vector. Most of these methods break the contract implied by Stack, e.g. LIFO. It would have been much better to implement Stack using a Vector internally, only exposing Stack methods as the API. It would then have been easy to change the implementation to ArrayList or something else later, none of which is possible now due to inheritance.</p>
"
288908,"<p>The simplest way is to set (or add to) PYTHONPATH, and put (or symlink) your modules and packages into a path contained in PYTHONPATH.</p>
"
288965,"<p>An outstanding achievement is <a href=""http://www.dcarlisle.demon.co.uk/htmlparse.xsl"" rel=""nofollow""><strong>the pure XSLT 2.0 Parser of HTML</strong></a> written by <a href=""http://dpcarlisle.blogspot.com/"" rel=""nofollow""><strong>David Carlisle</strong></a>.</p>

<p>Reading its code would be a great learning exercise for everyone of us.</p>

<p>From the description:</p>

<p>""<em>d:htmlparse(string)<br/>
&nbsp;d:htmlparse(string,namespace,html-mode)<br/><br/>
&nbsp;&nbsp;The one argument form is equivalent to)<br/>
&nbsp;&nbsp;d:htmlparse(string,'<a href=""http://ww.w3.org/1999/xhtml"" rel=""nofollow"">http://ww.w3.org/1999/xhtml</a>',true()))<br/><br/>
&nbsp;&nbsp;Parses the string as HTML and/or XML using some inbuilt heuristics to)<br/>
&nbsp;&nbsp;control implied opening and closing of elements.<br/><br/>
&nbsp;&nbsp;It doesn't have full knowledge of HTML DTD but does have full list of<br/>
&nbsp;&nbsp;empty elements and full list of entity definitions. HTML entities, and<br/>
&nbsp;&nbsp;decimal and hex character references are all accepted. Note html-entities<br/>
&nbsp;&nbsp;are recognised even if html-mode=false().<br/><br/>
&nbsp;&nbsp;Element names are lowercased (if html-mode is true()) and placed into the<br/>
&nbsp;&nbsp;namespace specified by the namespace parameter (which may be """" to denote<br/>
&nbsp;&nbsp;no-namespace unless the input has explict namespace declarations, in<br/>
&nbsp;&nbsp;which case these will be honoured.<br/><br/>
&nbsp;&nbsp;Attribute names are lowercased if html-mode=true()</em>""</p>

<p>Read a more detailed description <a href=""http://www.dcarlisle.demon.co.uk/htmlparse.xsl"" rel=""nofollow""><strong>here</strong></a>.</p>

<p>Hope this helped.</p>

<p>Cheers,</p>

<p>Dimitre Novatchev.</p>
"
67921,"<p>I don't know personally, but I noticed that you haven't posted to <a href=""http://groups.google.com/group/pyglet-users"" rel=""nofollow"">the pyglet mailing list</a> about this. More Pyglet users, as well as the primary developer, read that list.</p>
"
68052,"<p>If you don't want to use an IDE/text editor with automatic indenting, you can use the pindent.py script that comes in the Tools\Scripts directory. It's a preprocessor that can convert code like:</p>

<pre><code>def foobar(a, b):
if a == b:
a = a+1
elif a &lt; b:
b = b-1
if b &gt; a: a = a-1
end if
else:
print 'oops!'
end if
end def foobar
</code></pre>

<p>into:</p>

<pre><code>def foobar(a, b):
   if a == b:
       a = a+1
   elif a &lt; b:
       b = b-1
       if b &gt; a: a = a-1
       # end if
   else:
       print 'oops!'
   # end if
# end def foobar
</code></pre>

<p>Which is valid python.</p>
"
307271,"<p>One option: write a better <code>staticmethod</code>:</p>

<pre><code>class staticfunc(object):
    def __init__(self, func):
        self.func = func
    def __call__(self, *args, **kw):
        return self.func(*args, **kw)
    def __repr__(self):
        return 'staticfunc(%r)' % self.func
</code></pre>
"
307312,"<p>One possible way is with <code>Expando</code>, where you'd add a tag like:</p>

<pre><code>setattr(entity, 'tag_'+tag_name, True)
</code></pre>

<p>Then you could query all the entities with a tag like:</p>

<pre><code>def get_all_with_tag(model_class, tag):
    return model_class.all().filter('tag_%s =' % tag, True)
</code></pre>

<p>Of course you have to clean up your tags to be proper Python identifiers.  I haven't tried this, so I'm not sure if it's really a good solution.</p>
"
66440,"<p>I don't believe that VBScript as hosted by IIS has any way of executing an external process.  If you are using python as an AXscripting engine then you could just use the sys module.  If the script you're calling is actually meant to be a cgi script you'll have to mimic all the environment variables that the cgi uses.  The alternative is to put the script on the python path, import it and hope that it is modular enough that you can call the pieces you need and bypass the cgi handling code.</p>
"
68455,"<p>Sure; just use the <code>bind</code> method to specify the callback after the button has been created.  I've just written and tested the example below.  You can find a nice tutorial on doing this at <a href=""http://www.pythonware.com/library/tkinter/introduction/events-and-bindings.htm"" rel=""nofollow"">http://www.pythonware.com/library/tkinter/introduction/events-and-bindings.htm</a></p>

<pre><code>from Tkinter import Tk, Button

root = Tk()
button = Button(root, text=""Click Me!"")
button.pack()

def callback(event):
    print ""Hello World!""

button.bind(""&lt;Button-1&gt;"", callback)
root.mainloop()
</code></pre>
"
68507,"<p>This <a href=""http://code.activestate.com/recipes/146306/"" rel=""nofollow"">code</a> might be of use to you</p>
"
68638,"<p>Tuples should be slightly more efficient and because of that, faster, than lists because they are immutable.</p>
"
306783,"<p>Check out <a href=""http://svn.python.org/projects/python/trunk/Lib/sqlite3/dump.py"" rel=""nofollow"">here</a> for dump. It seems there is a dump function in the library sqlite3.</p>
"
85608,"<p>I don't think there is a built in way to get it from Python itself.  </p>

<p>My question is, how are you getting the IP information from your network?</p>

<p>To get it from your local machine you could parse ifconfig (unix) or ipconfig (windows) with little difficulty.</p>
"
85632,"<p>If you want a pure Python solution, you can take a look at <a href=""http://www.secdev.org/projects/scapy/"" rel=""nofollow"">Scapy</a> to craft packets (you need to send ARP request, and inspect replies). Or if you don't mind invoking external program, you can use <code>arping</code> (on Un*x systems, I don't know of a Windows equivalent).</p>
"
149493,"<p>Tuples with constant items are stored themselves as constants in the compiled function. They can be loaded with a single instruction. Lists and sets on the other hand, are always constructed anew on each execution.</p>

<p>Both tuples and lists use linear search for the in-operator. Sets uses a hash-based look-up, so it will be faster for a larger number of options.</p>
"
149626,"<p>I'm guessing the answer is ""No"".  According to <a href=""http://www.python.org/download/releases/3.0/"" rel=""nofollow"">Python.org</a>:</p>

<blockquote>
  <p>Python 3000 (a.k.a. ""Py3k"", and
  released as Python 3.0) is a new
  version of the language that is
  incompatible with the 2.x line of
  releases. The language is mostly the
  same, but many details, especially how
  built-in objects like dictionaries and
  strings work, have changed
  considerably, and a lot of deprecated
  features have finally been removed.
  Also, the standard library has been
  reorganized in a few prominent places.</p>
</blockquote>

<p>A better place for this particular question might be the <a href=""http://groups.google.com/group/beautifulsoup"" rel=""nofollow"">BeautifulSoup forum</a>.</p>
"
148049,"<pre><code>if job in (""mechanic"", ""tech""):
    print ""awesome""
elif job in (""tool"", ""rock""):
    print ""dolt""
</code></pre>
"
148050,"<p>While I don't think you can do what you want directly, one alternative is:</p>

<pre><code>if job in [ ""mechanic"", ""tech"" ]:
    print ""awesome""
elif job in [ ""tool"", ""rock"" ]:
    print ""dolt""
</code></pre>
"
148364,"<p>Given the texts above, the test is indeed as suggested:</p>

<pre><code>difflib.SequenceMatcher(lambda x: x in "" \t\n"", doc1, doc2).ratio()
</code></pre>

<p>However, to speed up things a little, you can take advantage of CPython's <a href=""http://mail.python.org/pipermail/python-list/2005-April/320354.html"" rel=""nofollow"">method-wrappers</a>:</p>

<pre><code>difflib.SequenceMatcher("" \t\n"".__contains__, doc1, doc2).ratio()
</code></pre>

<p>This avoids many python function calls.</p>
"
289765,"<p>Maybe <a href=""http://code.activestate.com/recipes/413172/"" rel=""nofollow"">Numbers and plural words as spoken English</a> will help a little. A little dated though - 4 May 2005.</p>
"
306925,"<p>This message deceived me into thinking win32trace was preventing me from seeing uncaught exceptions in the regular console (of my IDE). The real issue was that wxPython by default redirects stdout/stderr to a popup window that quickly disappeared after an uncaught exception. To solve <em>that</em> problem, I simply had to pass <pre>redirect=0</pre> to the superclass constructor of my application.</p>

<pre><code>class MyApp(wx.App):
    def __init__(self):
        # Prevent wxPython from redirecting stdout/stderr:
        super(MyApp, self).__init__(redirect=0)
</code></pre>

<p>That fix notwithstanding, I am still curious about how to control win32trace.</p>
"
307091,"<p>Whatever you pass as zip_file to your function will be the file that the ZipFile object will write to. So if you pass it a full path, then it will be put there. If you pass it just a filename, then it will be written to that filename under the current working path. It sounds like you just need to make sure that zip_file is an absolute path.</p>
"
67477,"<p>Can't you just write a link to a ""zip server"" or whatnot?  Why does the zip archive itself need to be served from Django?  A 90's era CGI script to generate a zip and spit it to stdout is really all that's required here, at least as far as I can see.</p>
"
159441,"<p>Adam, remember that in Python when you say:</p>

<pre><code>a = read_dict_from_file()
b = a
</code></pre>

<p>... you are not actually <em>copying</em> <code>a</code>, and thus using more memory, you are merely making <code>b</code> another reference to the same object.</p>

<p>So basically <strong>any</strong> of the solutions you propose will be far better in terms of memory usage.  Basically, read in the dictionary <strong>once</strong> and then hang on to a reference to that.  Whether you do it with a global variable, or pass it to each instance, or something else, you'll be referencing the same object and not duplicating it.</p>

<p>Which one is most Pythonic?  That's a whole 'nother can of worms, but here's what I would do personally:</p>

<pre><code>def main(args):
  run_initialization_stuff()
  dictionary = read_dictionary_from_file()
  solvers = [ Solver(class=x, dictionary=dictionary) for x in len(number_of_solvers) ]
</code></pre>

<p>HTH.</p>
"
214333,"<p>Python, along with <a href=""http://sourceforge.net/projects/pywin32/"" rel=""nofollow"">Pywin32</a>, would be fine for Windows automation.  However, VBScript or JScript used with the Winows Scripting Host works just as well, and requires nothing additional to install.</p>
"
214727,"<p>I'm not sure if that's possible. As an alternative, you could write a C/C++ program that does all that kernel space work for you and interface with it in Python via <a href=""http://www.python.org/doc/2.5.2/lib/module-subprocess.html"" rel=""nofollow"">the subprocess module</a> or <a href=""http://www.language-binding.net/"" rel=""nofollow"">Python C/C++ bindings</a> (and <a href=""http://wiki.cacr.caltech.edu/danse/index.php/Writing_C_extensions_for_Python"" rel=""nofollow"">another link</a> for that).</p>
"
157094,"<p>Well you could do one list comprehension/expression to get a set of tuples with that stat test in them and then reduce that down to get the sums.</p>

<pre><code>
r=xrange(10)
s=( (v % 2 == 0, v % 3 == 0) for v in r )
def add_tuples(t1,t2):
     return tuple(x+y for x,y in zip(t1, t2))
sums=reduce(add_tuples, s, (0,0)) # (0,0) is starting amount

print sums[0] # sum of numbers divisible by 2
print sums[1] # sum of numbers divisible by 3
</code>
</pre>

<p>Using generator expression etc should mean you'll only run through the iterator once (unless reduce does anything odd?).  Basically you'd be doing map/reduce...</p>
"
69989,"<p>You could use HTTP Authentication, if supported.</p>

<p>You'd have to add SSL, as all methods, POST, GET and HTTP Auth (well, except Digest HHTP authentication) send plaintext.</p>

<p>GET is basically just like POST, it just has a limit on the amount of data you can send which is usually a lot smaller than POST and a semantic difference which makes GET not a good candidate from that point of view, even if technically they both can do it.</p>

<p>As for examples, what are you using? There are many choices in Python, like the cgi module or some framework like Django, CherryPy, and so on</p>
"
305662,"<p>Perhaps the <a href=""http://docs.python.org/library/tempfile.html"" rel=""nofollow""><code>tempfile</code></a> module provides what you need. It uses the Windows Temp directory (which probably is not on a network drive) but you can specify a directory if you want to. Also for security reasons this module should be the right tool - if you use <code>tempfile.mkstemp()</code> the file is readable and writable only by the creating user ID.</p>

<p>Oh. I see you have just edited your question and that you need file persistence between invocations of the app. Then <code>tempfile</code> is not that ideal (even though you could choose not to delete your cache between invocations).</p>
"
86003,"<p>Using multiple server instances on local ports is a good idea, but you don't need a full featured web server to redirect HTTP requests. </p>

<p>I would use <a href=""http://www.apsis.ch/pound/"" rel=""nofollow"">pound</a> as a reverse proxy to do the job. It is small, fast, simple and does exactly what we need here.</p>

<blockquote>
  <p>WHAT POUND IS:</p>
  
  <ol>
  <li><strong>a reverse-proxy: it passes requests from client browsers to one or more back-end servers.</strong></li>
  <li>a load balancer: it will distribute the requests from the client browsers among several back-end servers, while keeping session information.</li>
  <li>an SSL wrapper: Pound will decrypt HTTPS requests from client browsers and pass them as plain HTTP to the back-end servers.</li>
  <li>an HTTP/HTTPS sanitizer: Pound will verify requests for correctness and accept only well-formed ones.</li>
  <li>a fail over-server: should a back-end server fail, Pound will take note of the fact and stop passing requests to it until it recovers.</li>
  <li><strong>a request redirector: requests may be distributed among servers according to the requested URL.</strong></li>
  </ol>
</blockquote>
"
86007,"<p>The web hit is the way to go, but make sure you pick a good URL - your app will be hitting it for years to come. </p>
"
86010,"<p><a href=""http://pycrash.sourceforge.net/"" rel=""nofollow"">PyCrash</a>?</p>
"
291894,"<p>When a user accesses an application URL without a session cookie, he is redirected to the SSO system. He then logs into the SSO form, which then redirects him back to your app with a ticket ID that you can look up in the SSO system to get cridentials.</p>

<p>Also, take a look at <a href=""http://www.atlassian.com/software/crowd/"" rel=""nofollow"">Crowd</a> and <a href=""http://www.ja-sig.org/products/cas/"" rel=""nofollow"">CAS</a>.</p>
"
292192,"<p>Why are you trying to match HTML links with a regex?</p>

<p>Depending on what you're trying to do the appropriate thing to do would vary.</p>

<p>You could try using an HTML Parser. There are several available, there's even one in the Python Library: <a href=""https://docs.python.org/library/htmlparser.html"" rel=""nofollow"">https://docs.python.org/library/htmlparser.html</a></p>

<p>Hope this helps!</p>
"
292193,"<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; regex = '&lt;a\s+href=[""\'](http://(.*?))[""\']&gt;'
&gt;&gt;&gt; string = '&lt;a href=""http://google.com/test/this""&gt;'
&gt;&gt;&gt; match = re.search(regex, string)
&gt;&gt;&gt; match.group(1)
'http://google.com/test/this'
&gt;&gt;&gt; match.group(2)
'google.com/test/this'
</code></pre>

<p>explanations:</p>

<pre><code> \s+   = match at least one white space (&lt;ahref) is a bad link
 [""\'] = character class, | has no meaning within square brackets
         (it will match a literal pipe ""|"")
</code></pre>
"
292282,"<p>\S matches any character that is not a whitespace character, just like [^\s]</p>

<p>Written like that, you can easily exclude quotes: [^\s""']</p>

<p>Note that you'll likely have to give the .*? in your regex the same treatment.  The dot matches any character that is not a newline, just like [^\r\n]</p>

<p>Again, written like that, you can easily exclude quotes: [^\r\n'""]</p>
"
84448,"<p>You probably mean RRSIG ANY (otherwise, the order is wrong, the class needs to be after the type)</p>

<pre><code>&gt;&gt;&gt; print myresolver.query('sources.org', 'RRSIG', 'ANY')
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
  File ""/usr/lib/python2.5/site-packages/dns/resolver.py"", line 664, in query
    answer = Answer(qname, rdtype, rdclass, response)
  File ""/usr/lib/python2.5/site-packages/dns/resolver.py"", line 121, in __init__
    raise NoAnswer
dns.resolver.NoAnswer
</code></pre>
"
291437,"<p>I've used <a href=""http://www.pymssql.org/"" rel=""nofollow"">pymssql</a> with standard python and liked it. Probably easier than the alternatives mentioned if you're <em>just</em> looking for basic database access.</p>

<p>Sample <a href=""http://www.pymssql.org/pymssql_examples.html"" rel=""nofollow"">code</a>.</p>
"
291477,"<p>I think it is easiest to check out (or, better, export) the source tree using the svn command line utility: you can use os.system to invoke it. There are also direct Python-to-svn API bindings, but I would advise against using them if you are new to Python.</p>

<p>You can then traverse the checkout folder, e.g. using os.walk; the copying itself can be done with shutil.copy.</p>
"
291589,"<p>You'll have to find a way to run the process as that particular user.</p>

<p><a href=""http://blogs.msdn.com/mstehle/archive/2007/01/03/myth-cdo-1-21-s-session-logon-parameter-profilepassword-actually-does-something.aspx"" rel=""nofollow"">See this.</a></p>

<p>I think <a href=""http://docs.activestate.com/activepython/2.5/pywin32/win32process__CreateProcessAsUser_meth.html"" rel=""nofollow"">pywin32.CreateProcessAsUser</a> is the start of the path you need to go down.  One last edit.  The logged on user handle is obtained from using the <a href=""http://docs.activestate.com/activepython/2.5/pywin32/win32security__LogonUser_meth.html"" rel=""nofollow"">win32security.LogonUser</a> method</p>
"
82969,"<p>Here's another answer kind of like pobk's; it uses the instance's dict to do the work of saving/resetting variables, but doesn't require you to specify the names of them in your code.  You can call save() at any time to save the state of the instance and reset() to reset to that state.</p>

<pre><code>class MyReset:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.save()

    def save(self):
        self.saved = self.__dict__.copy()

    def reset(self):
        self.__dict__ = self.saved.copy()

a = MyReset(20, 30)
a.x = 50
print a.x
a.reset()
print a.x
</code></pre>

<p>Why do you want to do this?  It might not be the best/only way.</p>
"
83075,"<p>By ""good deployment"" are you comparing it with Java's EAR files, which allow you to deploy web applications by uploading a single file to a J2EE server? (And, to a lesser extent, WAR files; EAR files can have WAR files for dependent projects)</p>

<p>I don't think Django or Rails have gotten quite to that point yet, but I could be wrong...  zuber pointed out an article with more details on the Python side.</p>

<p><a href=""http://www.capify.org/"" rel=""nofollow"">Capistrano</a> may help out on the Ruby side.</p>

<p>Unfortunately, I haven't really worked with either Python or Ruby that much, so I can't help out on profilers or debuggers.</p>
"
83954,"<p>I can't seem to find any basic API for controlling interfaces on MSDN, apart from the RAS API's, but I don't think they apply to non-dialup connections. As you suggest yourself, netsh might be an option, supposedly it also has a programmatic interface: <a href=""http://msdn.microsoft.com/en-us/library/ms708353(VS.85).aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/ms708353(VS.85).aspx</a></p>

<p>If you want to be pure Python, you can perhaps open a set of pipes to communicate with an netsh process.</p>
"
293462,"<p>Indeed, Python does garbage collection through reference counting. As soon as the last reference to an object falls out of scope, it is deleted. In your example:</p>

<pre><code>a = A()
a.kill()
</code></pre>

<p>I don't believe there's any way for variable 'a' to implicitly set itself to None.</p>
"
293568,"<p>Looking at the<a href=""http://docs.python.org/library/stdtypes.html#file.readlines"" rel=""nofollow"">file.readlines()</a> doc:</p>

<blockquote>
  <p>file.readlines([sizehint])</p>
  
  <p>Read until EOF using readline() and return a list containing the lines thus read. If the optional sizehint argument is present, instead of reading up to EOF, whole lines totalling approximately sizehint bytes (possibly after rounding up to an internal buffer size) are read. Objects implementing a file-like interface may choose to ignore sizehint if it cannot be implemented, or cannot be implemented efficiently.</p>
</blockquote>

<p>and the <a href=""http://docs.python.org/library/stdtypes.html#file.readline"" rel=""nofollow"">file.readline()</a> doc:</p>

<blockquote>
  <p>file.readline([size])</p>
  
  <p>Read one entire line from the file. A trailing newline character is kept in the string (but may be absent when a file ends with an incomplete line). [6] If the size argument is present and non-negative, it is a maximum byte count (including the trailing newline) and an incomplete line may be returned. An empty string is returned only when EOF is encountered immediately.</p>
</blockquote>

<p><code> A trailing newline character is kept in the string</code> - means that each line in <code>linelist</code> will contain at most <strong>one</strong> newline. That is why you cannot find a <code>""\n\n""</code> substring in any of the lines - look for <strong>a whole blank line</strong> (or an empty one at EOF):</p>

<pre><code>if myline in (""\n"", """"):
    handle_empty_line()
</code></pre>

<p>Note: I tried to explain <code>find</code> behavior, but a pythonic solution looks very different from your code snippet.</p>
"
149730,"<p>Take a look at <a href=""http://www.gdesklets.de/"" rel=""nofollow"">gDesklets</a>. AFAIK they're UNIX only, but mabybe porting them to other platforms make more sense than starting from scratch?</p>

<p>They use python to create widgets (desklets).</p>
"
85634,"<p>It seems that there is not a native way of doing this with Python.  Your best bet would be to parse the output of ""ipconfig /all"" on Windows, or ""ifconfig"" on Linux.  Consider using os.popen() with some regexps.</p>
"
305996,"<p>The <a href=""http://wxpython.org/docs/api/wx.StandardPaths-class.html"" rel=""nofollow""><code>wx.StandardPaths</code></a> module contains methods that return various standard locations in the file system and transparently tries to do ""the right thing"" under Unix, Mac OS X, and Windows.</p>
"
68086,"<p>The rule I follow is it should be a new app if I want to reuse the functionality in a different project.</p>

<p>If it needs deep understanding of the models in your project, it's probably more cohesive to stick it with the models.</p>
"
68218,"<p>I don't know if gwhois does something special with the server output; however, you can plainly connect to the whois server on port whois (43), send your query, read all the data in the reply and parse them. To make life a little easier, you could use the telnetlib.Telnet class (even if the whois protocol is much simpler than the telnet protocol) instead of plain sockets.</p>

<p>The tricky parts:</p>

<ul>
<li>which whois server will you ask? RIPE, ARIN, APNIC, LACNIC, AFRINIC, JPNIC, VERIO etc LACNIC could be a useful fallback, since they tend to reply with useful data to requests outside of their domain.</li>
<li>what are the exact options and arguments for each whois server? some offer help, others don't. In general, plain domain names work without any special options.</li>
</ul>
"
214972,"<p>Mi vote goes to <a href=""http://www.clearsilver.net/"" rel=""nofollow"">Clearsilver</a>, it is the template engine used in Trac before 0.11, it's also used in pages like Google Groups or Orkut. The main benefits of this template engine is that it's very fast and language-independent.</p>
"
304817,"<p>I guess it would be possible to compile the python interpreter to flash bytecode using this <a href=""http://labs.adobe.com/downloads/alchemy.html"" rel=""nofollow"">http://labs.adobe.com/downloads/alchemy.html</a> and then use it to run python programs. But apart from that the answer is no.</p>
"
305388,"<p>I think what I would do is check whether the object has certain methods that indicate it is a sequence.  I'm not sure if there is an official definition of what makes a sequence.  The best I can think of is, it must support slicing.  So you could say:</p>

<pre><code>is_sequence = '__getslice__' in dir(X)
</code></pre>

<p>You might also check for the particular functionality you're going to be using.</p>

<p>As pi pointed out in the comment, one issue is that a string is a sequence, but you probably don't want to treat it as one.  You could add an explicit test that the type is not str.</p>
"
305417,"<p><strong>Revised answer:</strong> </p>

<p>I don't know if your idea of ""sequence"" matches what the Python manuals call a ""<a href=""https://docs.python.org/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange"" rel=""nofollow"">Sequence Type</a>"", but in case it does, you should look for the __Contains__ method. That is the method Python uses to implement the check ""if something in object:""</p>

<pre><code>if hasattr(X, '__contains__'):
    print ""X is a sequence""
</code></pre>

<p><strong>My original answer:</strong></p>

<p>I would check if the object that you received implements an iterator interface:</p>

<pre><code>if hasattr(X, '__iter__'):
    print ""X is a sequence""
</code></pre>

<p>For me, that's the closest match to your definition of sequence since that would allow you to do something like:</p>

<pre><code>for each in X:
    print each
</code></pre>
"
305430,"<p>There are many ways of doing this, e.g.:</p>

<pre><code>words = [""zwei"", ""peanuts"", ""were"", ""walking"", ""down"", ""the"", ""strasse""]
letter = ""w""
output = [x for x in words if x[0] == letter]
</code></pre>

<p>The contents of <code>output</code> will be:</p>

<pre><code>['were', 'walking']
</code></pre>

<p>Some notes:</p>

<ul>
<li>If the code needs to be <em>fast</em> you should put the wordlist in some kind of tree.</li>
<li>If you need more flexibility, you should build a regular expression for matching</li>
</ul>
"
158331,"<p>You could just alias the second one.</p>

<p>import CRoom</p>

<p>CPerson = CRoom.CPerson</p>
"
156416,"<p>I see you are using get_nowait() which according to the documentation, ""return[s] an item if one is immediately available, else raise the Empty exception""</p>

<p>Now, you happen to break out of the loop when an Empty exception is thrown. Thus, if there is no result immediately available in the queue, your function returns an empty items list.</p>

<p>Is there a reason why you are not using the get() method instead? It may be the case that the get_nowait() fails because the queue is servicing a put() request at that same moment. </p>
"
156513,"<p>If you're using the standard docstring format, you can do something like this:</p>

<pre><code>count = 0
for line in lines:
    if line.startswith ('""""""'):
        count += 1
        if count &lt; 3:
            # Before or during end of the docstring
            continue
    # Line is after docstring
</code></pre>

<p>Might need some adaptation for files with no docstrings, but if your files are formatted consistently it should be easy enough.</p>
"
71168,"<p>There's a link to an example on the bottom of (<a href=""http://docs.python.org/2/library/htmlparser.html"" rel=""nofollow"">http://docs.python.org/2/library/htmlparser.html</a>) , it just doesn't work with the original python or python3.  It has to be python2 as it says on the top.</p>
"
71186,"<p>For real world HTML processing I'd recommend <a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">BeautifulSoup</a>. It is great and takes away much of the pain. Installation is easy.</p>
"
303747,"<p>you forgot to resolve the hostname:</p>

<pre><code>addr = socket.gethostbyname(url[1])
...
sock.connect((addr,80))
</code></pre>
"
304170,"<p>Many-to-many sounds reasonable. Perhaps you should try it first to see if it is actually expensive.</p>

<p>Good thing about G.A.E. is that it will tell you when you are using too many cycles. Profiling for free!</p>
"
304195,"<p>Don't.  Use <a href=""http://www.stringtemplate.org/"" rel=""nofollow"">StringTemplate</a> instead--there is no reason to consider any other template engine once you know about it.</p>
"
304203,"<p>Use StringTemplate, see <a href=""http://www.cs.usfca.edu/~parrt/papers/mvc.templates.pdf"" rel=""nofollow"">http://www.cs.usfca.edu/~parrt/papers/mvc.templates.pdf</a> for details of why.  There is nothing better, and it supports both Java and Python (and .NET, etc.).</p>
"
304221,"<p>Have you looked at node.getiterator()?</p>
"
157462,"<p>The most pythonic way to do it would be to know a little more about the actual data -- specifically, the maximum value you can have -- and then do it like this:</p>

<pre><code>def sortkey((k, v)): 
    return (maxval - v, k)

items = thedict.items()
items.sort(key=sortkey)
</code></pre>

<p>but unless you already know the maximum value, searching for the maximum value means looping through the dict an extra time (with <code>max(thedict.itervalues())</code>), which may be expensive. Alternatively, a keyfunc version of S.Lott's solution:</p>

<pre><code>def sortkey((k, v)): 
    return (-v, k)

items = thedict.items()
items.sort(key=sortkey)
</code></pre>

<p>An alternative that doesn't care about the types would be a comparison function:</p>

<pre><code>def sortcmp((ak, av), (bk, bv)):
    # compare values 'in reverse'  
    r = cmp(bv, av)
    if not r:
        # and then keys normally
        r = cmp(ak, bk)
    return r

items = thedict.items()
items.sort(cmp=sortcmp)
</code></pre>

<p>and this solution actually works for any type of key and value that you want to mix ascending and descending sorting with in the same key. If you value brevity you can write sortcmp as:</p>

<pre><code>def sortcmp((ak, av), (bk, bv)):
    return cmp((bk, av), (ak, bv))
</code></pre>
"
81301,"<p><em>Unbound</em> means there is no data associated with form (either initial or provided later), so the validation may fail. As mentioned in other answers (and in your own conclusion), you have to provide initial values and check for both bound data and initial values.</p>

<p>The use case for forms is form processing <strong>and</strong> validation, so you must have some data to validate before you accessing <code>cleaned_data</code>.</p>
"
81479,"<p>You can not store files as there is not a traditional file system.  You can only store them in their own DataStore (in a field defined as a <a href=""http://code.google.com/appengine/docs/datastore/typesandpropertyclasses.html"" rel=""nofollow"">BlobProperty</a>)</p>

<p>There is an example in the previous link:</p>

<pre><code>class MyModel(db.Model):
  blob = db.BlobProperty()

obj = MyModel()
obj.blob = db.Blob( file_contents )
</code></pre>
"
81699,"<p>Personally I made some rather big projects with Django, but I can compare only with said ""montrosities"" (Spring, EJB) and really low-level stuff like Twisted.</p>

<p>Web frameworks using interpreted languages are mostly in its infancy and all of them (actively maintained, that is) are getting better with every day.</p>
"
150724,"<p>You could try XUL, the language the Firefox GUI uses.  It's XML styled with CSS and scripted with Javascript.</p>

<p><a href=""http://www.mozilla.org/projects/xul/"" rel=""nofollow"">http://www.mozilla.org/projects/xul/</a><br />
<a href=""http://en.wikipedia.org/wiki/XUL"" rel=""nofollow"">http://en.wikipedia.org/wiki/XUL</a><br />
<a href=""http://developer.mozilla.org/en/XUL"" rel=""nofollow"">http://developer.mozilla.org/en/XUL</a></p>
"
220033,"<p>It looks like every python dbapi library implemented on top of freetds (pymssql, pyodbc, etc) will not be able to access output parameters when connecting to Microsoft SQL Server 7 SP3 and higher.</p>

<p><a href=""http://www.freetds.org/faq.html#ms.output.parameters"" rel=""nofollow"">http://www.freetds.org/faq.html#ms.output.parameters</a></p>
"
220544,"<p><a href=""http://www.opengroup.org/onlinepubs/007908799/xsh/semaphore.h.html"" rel=""nofollow"">The set of functions defined in <code>semaphore.h</code></a> -- <code>sem_open()</code>, <code>sem_trywait()</code>, etc -- are the POSIX equivalent, I believe.</p>
"
220590,"<p>Look for a python module that interfaces to SYSV semaphores on unix.  The semaphores have a SEM_UNDO flag which will cause the resources held by the a process to be released if the process crashes.</p>

<p>Otherwise as Bernard suggested, you can use </p>

<pre><code>import os
os.getpid()
</code></pre>

<p>And write it to /var/run/*application_name*.pid.  When the process starts, it should check if the pid in /var/run/*application_name*.pid is listed in the ps table and quit if it is, otherwise write its own pid into /var/run/*application_name*.pid.  In the following var_run_pid is the pid you read from /var/run/*application_name*.pid</p>

<pre><code>cmd = ""ps -p %s -o comm="" % var_run_pid
app_name = os.popen(cmd).read().strip()
if len(app_name) &gt; 0:
    Already running
</code></pre>
"
84465,"<p>Do you mean it uses http basic-auth before allowing proxying, and does it then allow 'connect'.</p>

<p>Then you should be able to tunnel over it using http-tunnel or proxytunnel</p>
"
85490,"<p>Both wx and QT do an excellent job of creating an application that matches the OS look and feel.
It is also possible to implment all the widgets yourself directly in openg, this slashdot post lists some of the sets available </p>

<p><a href=""http://ask.slashdot.org/askslashdot/02/12/24/1813219.shtml?tid=156"" rel=""nofollow"">http://ask.slashdot.org/askslashdot/02/12/24/1813219.shtml?tid=156</a>
fox is probably the most developed but looks like windows on all platforms.</p>
"
81751,"<p>Two small additional points.</p>

<p>First, <code>self.__class__.l.append(1)</code> isn't really sensible.</p>

<p>Just say <code>self.l.append(1)</code>.  Python searches the instance before it searches the class for the reference.</p>

<p>More importantly, class-level variables are rarely useful.  Class-level constants are sometimes sensible, but even then, they're hard to justify. </p>

<p>In C++ and Java, class-level ('<code>static</code>') variables seem handy, but don't do much of value.  They're hard to teach to n00bz -- often wasting lots of classroom time on minutia -- and they aren't very practical.  If you want to know all instances of an X that was created, it's probably better to create an XFactory class that doesn't rely on class variables.</p>

<pre><code>class XFactory( object ):
    def __init__( self ):
        self.listOfX= []
    def makeX( self, *args, **kw ):
        newX= X(*args,**kw)
        self.listOfX.append(newX)
        return newX
</code></pre>

<p>No class-level variable anomalies.  And, it doesn't conflate the X's with the collection of X's.  In the long run, I find it confusing when a class is both some thing and also some collection of things.</p>

<p>Simpler is better than Complex.</p>
"
219284,"<p>Maybe you should downgrade to 2.5 version?</p>
"
219326,"<p>It seems this is a one of the many weird Vista problems and some random reinstalling, installing/upgrading of the visual studio runtime or some such seems sometimes to help, or disabling sxs in the system configuration or writing a manifest file etc.</p>

<p>Though I think you should downgrade to windows XP.</p>
"
219328,"<p>A lot of the recommendations being given here are assuming you -- and just you -- are doing a full rewrite of the application.  This is probably not the case, and it changes the answer quite a bit</p>

<p>If you've already got J2EE kicking around, the correct answer is Grails.  It simply is: you probably already have Hibernate and Spring kicking around, and you're going to want the ability to flip back and forth between your old code and your new with a minimum amount of pain.  That's exactly Groovy's forte, and it is even smoother than JRuby in this regards.</p>

<p>Also, if you've already got a J2EE app kicking around, you've already got Java developers kicking around.  In that case, learning Groovy is like falling off a ladder -- literally.  With the exception of anonymous inner classes, Groovy is a pure superset of Java, which means that you can write Java code, call it Groovy, and be done with it.  As you become increasingly comfortable with the nicities of Groovy, you can integrate them into your Java-ish Groovy code.  Before too long, you'll be writing very Groovy code, and not even really have realized the transition.</p>
"
302858,"<p><a href=""http://code.google.com/p/modwsgi/wiki/IntegrationWithDjango"" rel=""nofollow"">Here</a> is very detailed description on how to integrate django with mod_wsgi.</p>
"
303408,"<p>You would need to write your own type editor. You can think of this as a user control, in that when you write your own type editor you are providing the UI controls that appear when the property grid edits the property. As such, you can create a type editor that does anything, which means if you have a third-party editor control you can include it as part of type editor.</p>

<p>Some resources to get you started:</p>

<ul>
<li><a href=""http://msdn.microsoft.com/en-us/library/ms171839.aspx"" rel=""nofollow"">User Interface Type Editors Overview</a></li>
<li><a href=""http://msdn.microsoft.com/en-us/library/ms171840.aspx"" rel=""nofollow"">Walkthrough: Implementing a UI Type Editor</a></li>
<li><a href=""http://msdn.microsoft.com/en-us/library/system.drawing.design.uitypeeditor.aspx"" rel=""nofollow"">UITypeEditor Class</a></li>
<li><a href=""http://msdn.microsoft.com/en-us/library/53c49eck.aspx"" rel=""nofollow"">How to: Implement a UI Type Editor</a></li>
<li><a href=""http://www.codeproject.com/KB/miscctrl/UITypeEditorsDemo.aspx"" rel=""nofollow"">Rich Design Time Editing with UITypeEditors (VB.NET)</a></li>
<li><a href=""http://www.codeproject.com/KB/cpp/DropDownPropertyEditor.aspx"" rel=""nofollow"">Creating Property Editors in DesignTime for VS.Net Easily (UITypeEditor Helper)</a></li>
<li><a href=""http://www.codeproject.com/KB/tabs/PropertyGrid.aspx"" rel=""nofollow"">Using PropertyGrid</a></li>
</ul>
"
303453,"<p>Compound unbounded probability is...  non-trivial.  I was going to tackle the problem the same way as James Curran, but then I saw from your source code that there could be a third set of rolls, and a fourth, and so on.  The problem is solvable, but far beyond most die rolling simulators.</p>

<p>Is there any particular reason that you need a random range from -Inf to +Inf with such a complex curve around 1-60?  Why is the bell curve of 2D30 not acceptable?  If you explain your requirements, it is likely someone could provide a simpler and more bounded algorithm.</p>
"
215175,"<p>If you had to resort to writing your own, I've had good results using the Python Imaging Library to create thumbnails in the past.
<a href=""http://www.pythonware.com/products/pil/"" rel=""nofollow"">http://www.pythonware.com/products/pil/</a></p>
"
215288,"<p>I actually had the same issue recently. Namely: we wrote a simple server using BaseHTTPServer and found that the fact that it's not multi-threaded was a big drawback.</p>

<p>My solution was to port the server to Pylons (<a href=""http://pylonshq.com/"" rel=""nofollow"">http://pylonshq.com/</a>). The port was fairly easy and one benefit was it's very easy to create a GUI using Pylons so I was able to throw a status page on top of what's basically a daemon process. </p>

<p>I would summarize Pylons this way:</p>

<ul>
<li>it's similar to Ruby on Rails in that it aims to be very easy to deploy web apps</li>
<li>it's default templating language, Mako, is very nice to work with</li>
<li>it uses a system of routing urls that's very convenient</li>
<li>for us performance is not an issue, so I can't guarantee that Pylons would perform adequately for your needs</li>
<li>you can use it with Apache &amp; Lighthttpd, though I've not tried this</li>
</ul>

<p>We also run an app with Twisted and are happy with it. Twisted has good performance, but I find Twisted's single-threaded/defer-to-thread programming model fairly complicated. It has lots of advantages, but would not be my choice for a simple app.</p>

<p>Good luck.</p>
"
215335,"<p>Try this:</p>

<pre><code>import wx

class Test(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None)
        self.test = wx.ListCtrl(self, style = wx.LC_ICON | wx.LC_AUTOARRANGE)

        for i in range(100):
            self.test.InsertStringItem(self.test.GetItemCount(), str(i))

        self.Show()

app = wx.PySimpleApp()
app.TopWindow = Test()
app.MainLoop()
</code></pre>
"
215401,"<p>I have wrestled many a battle with <code>PYTHON_EGG_CACHE</code> and I never figured out the correct way of setting it - apache's envvars, httpd.conf (SetEnv and PythonOption), nothing worked. In the end I just unpacked all python eggs manually, there were only two or three anyway - problem gone. I never understood why on earth people zip up files weighting no more than a few kilobytes in the first place...</p>
"
215488,"<p>Alright, here's what I've done, and it seems to work and be a sensible design (though I stand to be corrected!).</p>

<p>In a core library (e.g. mysite.core.views.create_update), I've written a decorator:</p>

<pre><code>from django.contrib.contenttypes.models import ContentType
from django.views.generic import create_update

def update_object_as_child(parent_model_class):
   """"""
   Given a base models.Model class, decorate a function to return  
   create_update.update_object, on the child class.

   e.g.
   @update_object(Animal)
   def update_object(request, object_id):
      pass

  kwargs should have an object_id defined.
  """"""

  def decorator(function):
      def wrapper(request, **kwargs):
          # may raise KeyError
          id = kwargs['object_id']

          parent_obj = parent_model_class.objects.get( pk=id )

          # following http://www.djangosnippets.org/snippets/1031/
          child_class = parent_obj.content_type.model_class()

          kwargs['model'] = child_class

          # rely on the generic code for testing/validation/404
          return create_update.update_object(request, **kwargs)
      return wrapper

  return decorator
</code></pre>

<p>And in animals/views.py, I have:</p>

<pre><code>from mysite.core.views.create_update import update_object_as_child

@update_object_as_child(Animal)
def edit_animal(request, object_id):
  pass
</code></pre>

<p>And in animals/urls.py, I have:</p>

<pre><code>urlpatterns += patterns('animals.views',
  url(r'^edit/(?P&lt;object_id&gt;\d+)$', 'edit_animal', name=""edit_animal""),
)
</code></pre>

<p>Now I only need a unique edit function for each base class, which is trivial to create with a decorator.</p>

<p>Hope someone finds that helpful, and I'd be delighted to have feedback.</p>
"
73473,"<p>Look at the functools.wraps() decorator; it does all of this, but I don't know offhand if you can get it to run in the right context</p>
"
301707,"<p>The simplest approach is to simply write some sql update scripts and use those to update the database.  Obviously that's a fairly low-level (as it were) approach.</p>

<p>If you think you will be doing this a lot and want to stick in Python you might want to look at <a href=""http://code.google.com/p/sqlalchemy-migrate/"" rel=""nofollow"">sqlalchemy-migrate</a>.  There was an article about it in the recent Python Magazine.</p>
"
301708,"<p>This always works and requires little thinking -- only patience.</p>

<ol>
<li><p>Make a backup.</p></li>
<li><p>Actually make a backup.  Everyone skips step 1 thinking that they have a backup, but they can never find it or work with it.  Don't trust any backup that you can't recover from.</p></li>
<li><p>Create a new database schema.</p></li>
<li><p>Define your new structure from the ground up in the new schema.  Ideally, you'll run a DDL script that builds the new schema.  Don't have a script to build the schema?  Create one and put it under version control.</p>

<p>With SA, you can define your tables and it can build your schema for you.  This is ideal, since you have your schema under version control in Python.</p></li>
<li><p>Move data.</p>

<p>a. For tables which did not change structure, move data from old schema to new schema using simple INSERT/SELECT statements.</p>

<p>b. For tables which did change structure, develop INSERT/SELECT scripts to move the data from old to new.  Often, this can be a single SQL statement per new table.  In some cases, it has to be a Python loop with two open connections.</p>

<p>c. For new tables, load the data.</p></li>
<li><p>Stop using the old schema.  Start using the new schema.  Find every program that used the old schema and fix the configuration.  </p>

<p>Don't have a list of applications?  Make one.  Seriously -- it's important.  </p>

<p>Applications have hard-coded DB configurations?  Fix that, too, while you're at it.  Either create a common config file, or use some common environment variable or something to (a) assure consistency and (b) centralize the notion of ""production"".</p></li>
</ol>

<p>You can do this kind of procedure any time you do major surgery.  It never touches the old database except to extract the data.</p>
"
72359,"<p>DateTime fields with auto_now are automatically updated upon calling <code>save()</code>, so you do not need to update them manually. Django will do this work for you.</p>
"
72449,"<p>Are you using the re.match() or re.search() method? My understanding is that re.match() assumes a ""^"" at the begining of your expression and will only search at the beginning of the text, while re.search() acts more like the Perl regular expressions and will only match the beginning of the text if you include a ""^"" at the beginning of your expression. Hope that helps.</p>
"
72521,"<p>You are probably being tripped up by the different methods re.search and re.match.</p>
"
181931,"<p>If you're looking to read in an XML feed, modify it and then output it again, there's <a href=""http://wiki.python.org/moin/RssLibraries"" rel=""nofollow"">a page on the main python wiki indicating that the RSS.py library might support what you're after</a> (it reads most RSS and is able to output RSS 1.0). I've not looked at it in much detail though..</p>
"
182059,"<p>py2exe can't do this.  You can wrap py2exe (there is <a href=""http://py2exe.org/index.cgi/SingleFileExecutable"" rel=""nofollow"">an example on the wiki</a> showing how to do that with NSIS); you could build your own wrapper if using NSIS or InnoSetup wasn't an option.</p>

<p>Alternatively, if you're positive that your users will have a compatible copy of msvcr71.dll installed (IIRC Vista or XP SP2 users), then you could get away without including it.  More usefully, perhaps, if you use Python 2.3 (or older), then Python links against msvcr.dll rather than msvcr71.dll, and any Windows user will have that installed, so you can just not worry about it.</p>
"
343614,"<p>""say I have a module 'eggs', with sub-modules 'foo' and 'bar'. Components in 'bar' use code in foo, so eggs/bar/a.py may 'import eggs.foo'.""</p>

<p>This may not be the best structure.  I suggest you have some other modules struggling to get out.</p>

<p>You have <code>eggs.bar.a</code> depending on <code>eggs.foo</code>.  I'm guessing other stuff on <code>eggs</code> depends on <code>eggs.foo</code>.  Further, I suspect that <code>eggs.foo</code> could be partitioned into <code>eggs.foo</code> and <code>eggs.quux</code> and things might be simpler.</p>

<p>I'd recommend refactoring this to get a better structure.  The <code>PYTHONPATH</code> issues are symptomatic of too many things in the wrong places in the module tree.</p>
"
344013,"<p>Maybe I'm not understanding correctly, but it seems that git would <em>be</em> the solution here, since git's branches don't need separate paths.</p>

<p>Create a branch for each working version of your eggs module. Then when you checkout that branch, the entire module is changed to a state matching the version of your sub-module. You could then merge what you need back and forth between the branches.</p>

<p>And as S.Lott pointed out, may a little refactoring couldn't hurt either ;)</p>
"
13040,"<p>Can you give an example? According to the <a href=""http://codespeak.net/lxml/validation.html"" rel=""nofollow"">lxml validation docs</a>, lxml can handle DTD validation (specified in the XML doc or externally in code) and system catalogs, which covers most cases I can think of.</p>

<pre><code>f = StringIO(""&lt;!ELEMENT b EMPTY&gt;"")
dtd = etree.DTD(f)
dtd = etree.DTD(external_id = ""-//OASIS//DTD DocBook XML V4.2//EN"")
</code></pre>
"
13403,"<p>in Ruby:</p>

<pre><code>intArray.select { |x| x &gt; 3 }.each do |x|
  # do other processing
end
</code></pre>

<p>or if ""other processing"" is a short one-liner:</p>

<pre><code>intArray.select { |x| x &gt; 3 }.each { |x| something_that_uses x }
</code></pre>

<p>lastly, if you want to return a new array containing the results of the processing of those elements greater than 3:</p>

<pre><code>intArray.select { |x| x &gt; 3 }.map { |x| do_something_to x }
</code></pre>
"
183889,"<p>Just a few other random ideas for completeness's sake.  If they work for you, use them.  Otherwise, you're probably better off trying something else.</p>

<p>You could also do this with a dictionary:</p>

<pre><code>&gt;&gt;&gt; x = {'cond1' : 'val1', 'cond2' : 'val2'}
&gt;&gt;&gt; y = {'cond1' : 'val1', 'cond2' : 'val2'}
&gt;&gt;&gt; x == y
True
</code></pre>

<p>This option is more complicated, but you may also find it useful:</p>

<pre><code>class Klass(object):
    def __init__(self, some_vars):
        #initialize conditions here
    def __nonzero__(self):
        return (self.cond1 == 'val1' and self.cond2 == 'val2' and
                self.cond3 == 'val3' and self.cond4 == 'val4')

foo = Klass()
if foo:
    print ""foo is true!""
else:
    print ""foo is false!""
</code></pre>

<p>Dunno if that works for you, but it's another option to consider.  Here's one more way:</p>

<pre><code>class Klass(object):
    def __init__(self):
        #initialize conditions here
    def __eq__(self):
        return (self.cond1 == 'val1' and self.cond2 == 'val2' and
               self.cond3 == 'val3' and self.cond4 == 'val4')

x = Klass(some_values)
y = Klass(some_other_values)
if x == y:
    print 'x == y'
else:
    print 'x!=y'
</code></pre>

<p>The last two I haven't tested, but the concepts should be enough to get you going if that's what you want to go with.</p>

<p>(And for the record, if this is just a one time thing, you're probably just better off using the method you presented at first.  If you're doing the comparison in lots of places, these methods may enhance readability enough to make you not feel so bad about the fact that they are kind of hacky.)</p>
"
189012,"<p>I have to preface this with my agreeing with Orion Edwards, choose the one your team is most familiar with.</p>

<p>However, I also have to note the curious lack of ASP.NET languages in your list. Not to provoke the great zealot army, but where's the beef? .NET is a stable, rapid development platform and the labor pool is growing daily. VB.NET and C# are transportable skill sets, and that can mean a lot when you're building a team of developers to work on a diverse set of tasks. .NET also allows you to separate your presentation layer from your backend code, like other languages, but also allows you to expose that backend code as web service for things like your iPhone and Facebook applications.</p>

<p>Take every suggestion with a grain of salt, and pick what suits the application best. Do your research, and design for function and not the zealots.</p>

<p><em>Disclaimer: Once a PHP, ColdFusion and Perl developer. Flex zealot, and Adobe lover. Now writing enterprise .NET applications. ;)</em></p>

<p>Don't forget Mono, which will let you run .NET under *nix. Not that I'm saying it will be perfect, just playing devil's advocate.</p>
"
189046,"<p><a href=""http://www.openssl.org/"" rel=""nofollow"">OpenSSL</a> is the most widely used product for OCSP in C. It's quite reliable, although incredibly obtuse. I'd recommend looking at apps/ocsp.c for a pretty good example of how to make OCSP requests and validate responses.</p>

<p>Vista and Server 2008 have built-in OCSP support in CAPI; check out <a href=""http://msdn.microsoft.com/en-us/library/aa377167.aspx"" rel=""nofollow"">CertVerifyRevocation</a>.</p>
"
220830,"<p>If they're not being automatically detected, try manually copying them into py2exe's temporary build directory. They will be included in the final executable.</p>
"
342852,"<p>As <a href=""http://stackoverflow.com/questions/342729/learning-the-win32-api#342740"">Charlie</a>  says : ""this Api is an 800 pound monster covered with hair"". </p>

<p>Consider using the express version (free) of visual studio for vb or c# (<a href=""http://www.microsoft.com/express/"" rel=""nofollow"">http://www.microsoft.com/express/</a>) along with the msdn library (<a href=""http://msdn.microsoft.com/en-us/library/default.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/default.aspx</a>). this will give you as much exposure to the api as you want.</p>
"
343372,"<p>"" > free resource to learn how to use the windows API (preferably with python)</p>

<ol>
<li><p>You may refer <a href=""http://books.google.co.in/books?id=ns1WMyLVnRMC"" rel=""nofollow"">Python Programming on Win32 by Mark Hammond and Andy Robinson</a> along with <a href=""http://sourceforge.net/projects/pywin32/"" rel=""nofollow"">pywin32</a>.</p></li>
<li><p>If you are not interested to use <a href=""http://sourceforge.net/projects/pywin32/"" rel=""nofollow"">pywin32</a>, you can use <a href=""http://docs.python.org/library/ctypes.html"" rel=""nofollow"">ctypes â A foreign function library for Python</a> and <a href=""http://www.winprog.org/tutorial/"" rel=""nofollow"">the Forger's Win32 API Programming Tutorial</a>.</p></li>
<li><p>Refer <a href=""http://mail.python.org/pipermail/python-list/2005-April/315719.html"" rel=""nofollow"">Example Code : Shared Memory with Mutex (pywin32 and ctypes)</a></p></li>
</ol>
"
343594,"<p>I also favour the solution of packing everything together and limit the dependency on the OS libraries to the minimal (glibc and that's it). Hard drive is cheap, customer and support time is not.</p>

<p>On windows, it's trivial with py2exe + InnoSetup.</p>

<p>On Linux, it looks like <a href=""http://pypi.python.org/pypi/bbfreeze/0.95.4"" rel=""nofollow"">bbfreeze</a> is the right way to handle this. Quoting from the homepage, it offers:</p>

<ul>
<li>zip/egg file import tracking : 
bbfreeze tracks imports from zip files and includes whole egg files if some module is used from an eggfile. Packages using setuputils' pkg_resources module will now work (new in 0.95.0)</li>
<li>binary dependency tracking : 
bbfreeze will track binary dependencies and will include DLLs and shared libraries needed by a frozen program.</li>
</ul>
"
182283,"<p>See the documentation <a href=""http://pydoc.org/2.5.1/posixpath.html"" rel=""nofollow"">here</a>, specifically: </p>

<blockquote>
  <p>splitdrive(p) Split a pathname into
  drive and path. <strong>On Posix, drive is
  always empty.</strong></p>
</blockquote>

<p>So this won't work on a Linux box.</p>
"
182893,"<p>Might I suggest taking a look at <a href=""http://karrigell.sourceforge.net/"" rel=""nofollow"">Karrigell</a>? It's really a nice Python web framework if you don't require everything Django and Turbogears offers. It might be easier for you to work with web frameworks until you get comfortable with them.</p>

<p>For development, I recommend downloading the latest <a href=""http://pythonide.blogspot.com"" rel=""nofollow"">SPE</a> IDE. It should provide you nearly all the tools you will need, plus it includes wxGlade for GUI development.</p>
"
189968,"<p><a href=""http://www.google.ca/search?hl=en&amp;safe=off&amp;client=firefox-a&amp;rls=org.mozilla:en-US:official&amp;hs=HD8&amp;pwst=1&amp;sa=X&amp;oi=spell&amp;resnum=0&amp;ct=result&amp;cd=1&amp;q=earth+mover%27s+distance+image&amp;spell=1"" rel=""nofollow"">Earth movers distance</a> might be exactly what you need.
It might be <em>abit</em> heavy to implement in real time though.</p>
"
189977,"<p>What about calculating the <a href=""http://en.wikipedia.org/wiki/Manhattan_distance"" rel=""nofollow"">Manhattan Distance</a> of the two images. That gives you n*n values. Then you could do something like an row average to reduce to n values and a function over that to get one single value.</p>
"
190000,"<p>Have you seen the <a href=""http://stackoverflow.com/questions/75891/algorithm-for-finding-similar-images"">Algorithm for finding similar images</a> question? Check it out to see suggestions.</p>

<p>I would suggest a wavelet transformation of your frames (I've written a C extension for that using Haar transformation); then, comparing the indexes of the largest (proportionally) wavelet factors between the two pictures, you should get a numerical similarity approximation.</p>
"
215700,"<p>I've played both roles and at heart I prefer more of a programmer's templating language. However, I freelance for a few graphic designers doing the ""heavy lifting"" backed and db programming and can tell you that I've had the best luck with XML templating languages (SimpleTAL, Genshi, etc). </p>

<p>When I'm trying to be web designer friendly I look for something that can be loaded into Dreamweaver and see results. This allows me to provide all the hooks in a template and let the designer tweak it without worrying about breaking what I've already written. It allows us to share the code and work better together where we're both comfortable with the format. </p>

<p>If the designer codes without a WYSIWYG editor, I think you're options are less limited and you could go with your own personal favorite.</p>
"
217930,"<p>Here's an <a href=""http://www.python.org/doc/2.5.2/lib/minimal-example.html"" rel=""nofollow"">example</a> and you might want to read a little more on <a href=""http://www.python.org/doc/2.5.2/lib/module-unittest.html"" rel=""nofollow"">pythons unit testing</a>.</p>
"
217933,"<p>You'll probably only be doing this substitution occasionally, such as each time a user enters a new search string, so I wouldn't worry about how efficient the solution is.</p>

<p>You need to generate a list of the replacements you need to convert from the ""user format"" to a regex.  For ease of maintenance I would store these in a dictionary, and like @Konrad Rudolph I would just use the replace method:</p>

<pre><code>def wildcard_to_regex(wildcard):
    replacements = {
        '*': '.*',
        '?': '.?',
        '+': '.+',
        }
    regex = wildcard
    for (wildcard_pattern, regex_pattern) in replacements.items():
        regex = regex.replace(wildcard_pattern, regex_pattern)
    return regex
</code></pre>

<p>Note that this only works for simple character replacements, although other complex code can at least be hidden in the <code>wildcard_to_regex</code> function if necessary. </p>

<p>(Also, I'm not sure that <code>?</code> should translate to <code>.?</code> -- I think normal wildcards have <code>?</code> as ""exactly one character"", so its replacement should be a simple <code>.</code> -- but I'm following your example.)</p>
"
150378,"<p>I use <a href=""http://www.vim.org/scripts/script.php?script_id=910"" rel=""nofollow"">pydoc.vim</a> (I actually wrote it) a lot, try it and tell me what you think. Another one that I think is quite useful is the updated syntax file with all it's extensions that you can enable, which you can find <a href=""http://www.vim.org/scripts/script.php?script_id=790"" rel=""nofollow"">here</a>.</p>
"
80596,"<p>As far as I know that is not possible. It is not an open source database, so writing drivers for it is really hard.</p>
"
80737,"<p>I second mattiast's answer.</p>

<p>But, to dig a little deeper, is there no way to vectorize what you're trying to accomplish and avoid the iterative for loop?  Perhaps with more details about what goes on inside the loop we could help vectorize the solution...</p>
"
295226,"<p>There is only one you didn't try: </p>

<pre><code>export PYTHONPATH=${PYTHONPATH}:""/home/shane/mywebsite.com\:3344/""
</code></pre>

<p>The problem is without the quotes, the escaping is interpreted directly, and converted into a literal "":"" in the string.  But the "":"" needs to be evaluated later. </p>

<pre><code>$ echo ""foo:"" 
foo:
$ echo \:foo
:foo
$ echo "":foo""
:foo
$ echo ""\:foo""
\:foo
</code></pre>

<p>I can't guarantee this will fix your python-path problem, but it will get the \ literal into the string. </p>
"
295233,"<p>I don't know if what you want is directly possible, but a workaround if you are using a linux filesystem would be to create a symlink to your ""coloned"" directory and add this symlink to your PYTHONPATH like this:</p>

<pre><code>ln -s /home/shane/mywebsite.com\:3344 /home/shane/mywebsite.3344
export PYTHONPATH=${PYTHONPATH}:/home/shane/mywebsite.3344
</code></pre>
"
295704,"<p>Because python is a dynamic language you don't need a concept like partial class. In python is possible to extend object with functionality in runtime so it possible to break class declaration into different files</p>
"
217204,"<p>This one reverses in place. (Of course an iterative version would be better, but it has to be recursive, hasn't it?)</p>

<pre><code>def reverse(l, first=0, last=-1):
    if first >= len(l)/2: return
    l[first], l[last] = l[last], l[first]
    reverse(l, first+1, last-1)

mylist = [1,2,3,4,5]
print mylist
reverse(mylist)
print mylist
</code></pre>
"
295745,"<p>This is a bit silly.</p>

<p>You have a dynamic language, distributed in source form.</p>

<p>You're trying to make what amounts to a change to the source.  Which is easy-to-read, plain text Python.</p>

<p>Why not just change the Python source and stop messing about with a configuration file?</p>

<p>It's a lot easier to have a block of code like this</p>

<pre><code># Change this for some reason or another
x = self.post.id # Standard Configuration 
# x = self.post.somethingElse # Another Configuration
# x = self.post.yetAnotherCase # A third configuration
</code></pre>

<p>it's just as complex to change this as it is to change a configuration file.  And your Python program is simpler and more clear.</p>
"
78397,"<p>You might want to look at <a href=""http://clutter-project.org/"" rel=""nofollow"">Clutter</a>, it looks pretty cool. I haven't used it yet but I intend to in an upcoming personal project.</p>
"
78483,"<p>Try Qt instead of wx.</p>

<p>QT is cross platform, and you can style things alot using CSS. It's extremely well documented and has excellent python bindings. In point of fact, I use the C++ documentation and not the PyQT documentation.</p>
"
78855,"<p>No, composition does not mean nesting.
It would make sense to have a nested class if you want to hide it more in the namespace of the outer class.</p>

<p>Anyway, I don't see any practical use for nesting in your case. It would make the code harder to read (understand) and it would also increase the indentation which would make the lines shorter and more prone to splitting.</p>
"
151670,"<p>PyCURL provides an interface to CURL from Python.</p>

<p><a href=""http://curl.haxx.se/libcurl/python/"" rel=""nofollow"">http://curl.haxx.se/libcurl/python/</a></p>

<p>Curl will do all you need.  It can transfer binary files properly, and supports many encodings.  However, you have to make sure that the proper character encoding as a custom header when POSTing files.</p>

<p>Specifically, you may need to do a 'file upload' style POST:</p>

<p><a href=""http://curl.haxx.se/docs/httpscripting.html"" rel=""nofollow"">http://curl.haxx.se/docs/httpscripting.html</a> (Section 4.3)</p>

<p>With curl (or any other HTTP client) you may have to set the content encoding:</p>

<p>Content-Type: text/html; charset=UTF-8</p>

<p>Also, be aware that the request headers must be ascii, and this includes the
url (so make sure you properly escape your possibly unicode URLs.  There are
unicode escapes for the HTTP headers)  This was recently fixed in Python:</p>

<p><a href=""http://bugs.python.org/issue3300"" rel=""nofollow"">http://bugs.python.org/issue3300</a></p>

<p>I hope this helps, there is more info on the topic, including setting your default character set on  your server, etc.</p>
"
151935,"<p>I found this in their docs:</p>

<blockquote>
  <p>One final thing to note is that there
  are some catch-all bare except:
  statements in the module, which are
  there to handle unexpected bad input
  without crashing your program. If this
  happens, it's a bug in mechanize, so
  please mail me the warning text.</p>
</blockquote>

<p>So I guess they don't raise any exceptions. You can also search the source code for Exception subclasses and see how they are used.</p>
"
152185,"<p>It would not be wise to change the default version of Python, i.e. what you get when you type ""python"" into a shell. However, you can have multiple versions of python installed.  The trick is to make sure that the program named ""python"" on the path is the system supplied version. If you want to run your install of Python 2.6 you'd then type python2.6 into a shell to start it.</p>

<p>Download the package and unzip it, then run:</p>

<pre><code>./configure
make
sudo make install
ls -l /usr/local/bin
</code></pre>

<p>You should see a python and a python2.6 file, both created on the day you ran make install; delete the python file. Then when <code>python</code> is launched the standard system Python version from <code>/usr/bin</code>  will be run, and when <code>python2.6</code> is run you get your shiny new python 2.6rc2. Python displays the version when it starts an interactive interpreter.</p>
"
155166,"<p>I don't have any experience building stand-alone apps for any platform other than Windows.</p>

<p>That said:</p>

<p><strong>Tkinter:</strong> works fine with py2exe.  Python Megawidgets (an ""expansion library"" for Tkinter) works fine also, but it does funky things with dynamic imports, so you need to combine all the components into a big file ""pmw.py"" and add it to your project (well, you'll also have pmwblt.py and pmwcolor.py).  There are instructions for how to do this somewhere (either on py2exe wiki or in the PMW docs).  Tix (an extension to Tk that you can use with Tkinter) doesn't work with py2exe, or at least that was my experience about four years ago.</p>

<p><strong>wxPython</strong> also works fine with py2exe.  I just checked an app I have; the whole distribution came to around 11MB.  Most of that was the wx DLLs and .pyd files, but I can't see how you'd avoid that.  If you are targetting Windows XP, you need to include a manifest in your setup.py or else it will look ugly.  See <a href=""http://lists.wxwidgets.org/pipermail/wxpython-users/2007-October/069675.html"" rel=""nofollow"">this email</a> for details.</p>
"
301413,"<p>OpenOffice.org has a ""-headless"" parameter to run it without a GUI. I'm not sure this actually frees up all resources that would be spent on GUI. Here's how I run my server-side headless instance:</p>

<pre><code>soffice -headless -accept=""socket,port=1234;urp"" -display :25
</code></pre>

<p>I can't tell what's causing the stalling problems for your Python script, but you might want to to check out <a href=""http://www.artofsolving.com/opensource/pyodconverter"" rel=""nofollow"">PyODConverter</a>, and see what this script does differently to maybe catch the error causing your trouble.</p>
"
301437,"<p>Looking at the code of the Fuse class (which is a maze of twisty little passages creating method proxies), I see this bit (which is a closure used to create a setter inside <code>Fuse.MethodProxy._add_class_type</code>, line 865):</p>

<pre><code>        def setter(self, xcls):

            setattr(self, type + '_class', xcls)

            for m in inits:
                self.mdic[m] = xcls

            for m in proxied:
                if hasattr(xcls, m):
                    self.mdic[m] = self.proxyclass(m)
</code></pre>

<p>When you do <code>self.file_class = self.get_file</code>, this gets called with <code>self.get_file</code>, which is a bound method. The loop over proxied attributes is expecting to be able to get the attributes off the class you set, to put them into its <code>mdic</code> proxy dictionary after wrapping them, but they aren't there, because it's a bound method, rather than a class. Since it can't find them, it reverts to calling them on <code>Dstorage</code>.</p>

<p>So, long story short, you can't use a callable that returns an instance (kind of a pseudo-class) instead of a class here, because Fuse is introspecting the object that you set to find the methods it should call. </p>

<p>You need to assign a class to <code>file_class</code> - if you need to refer back to the parent instance, you can use the nested class trick they show in the docs.</p>
"
301591,"<p>You can use the <code>mx.DateTime</code> module from <a href=""http://www.egenix.com/products/python/mxBase/mxDateTime/"" rel=""nofollow"">eGenix</a></p>

<pre><code>import mx

date_object = mx.DateTime.Parser.DateTimeFromString('2007-07-18 10:03:19')
print ""%s-%s-%s"" % (date_object.year, date_object.month, date_object.day)
</code></pre>

<p>will output: <code>2007-07-18</code></p>
"
301620,"<p>The icky solution is to have a monitor for the OpenOffice process.  If your monitor knows the PID and has privileges, it can get CPU time used every few seconds.  If OO hangs in a stalled state (no more CPU), then the monitor can kill it.  </p>

<p>The easiest way to handle this is to have the ""wrapper"" that's firing off the open office task watch it while it runs and kill it when it hangs.  The parent process has to do a wait anyway, so it may as well monitor.</p>

<p>If OpenOffuce hangs in a loop, then it's tougher to spot.  CPU usually goes through the roof, stays there, and the priority plummets to the lowest possible priority.  Processing or hung?  Judgement call.  You have to let it hang like this for ""a while"" (pick a random duration, 432 seconds (3 dozen dozen) for instance; you'll always be second-guessing yourself.)</p>
"
72987,"<p>check the max_packet setting in your my.cnf file. this determines the largest amount of data you can send to your mysql server in a single statement. exceeding this values results in that error.</p>
"
216123,"<p>Take the first element, reverse the rest of the list recursively, and append the first element at the end of the list.</p>
"
216161,"<p>Probably the easiest way is to use IE webbrowser control in C# (or any other language). You have access to all the stuff inside browser out of the box + you dont need to care about cookies, SSL and so on.</p>
"
154043,"<p><a href=""http://Gajim.org"" rel=""nofollow"">http://Gajim.org</a> for Windows uses python and PyGtk. You can check, how they did it. Also, there's PyQt for GUI (and wxpython mentioned earlier).</p>
"
297182,"<p>The performance differences between these two approaches will be very small in practice.  I have never seen a case where this has made a difference that was noticeable. </p>

<p>It is worth remembering that the python interpreter will only ever do the work of parsing the module once when it is 1st imported.</p>

<p>In general you will end up with more maintainable code it you just import all the modules you need at the top of the file.</p>
"
297347,"<p>using the writefunction, instead of turning it off would save you a lot off trouble. you might want to rewrite your pageAsString by utilizing WRITEFUNCTION..</p>

<p>as an example: </p>

<pre><code>from cStringIO import StringIO
c = pycurl.Curl()
buffer = StringIO()
c.setopt(pycurl.WRITEFUNCTION, buffer.write)
c.setopt(pycurl.URL, ""http://example.com"")
c.perform()
...
buffer.getvalue() # will return the data fetched.
</code></pre>
"
297520,"<p><a href=""http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/"" rel=""nofollow"">Pyrex</a> can be cleanly used for this purpose.  There's an <a href=""http://www.pysoy.org/changeset/11/branches/pyrex-soy/Demos/embed/"" rel=""nofollow"">example</a> in the source-code release.</p>
"
298027,"<p>You can use java.util.zip, when I was using Jython the built in zip library in python didn't work </p>
"
218263,"<p>You may need to fix log handling first, <a href=""http://www.py2exe.org/index.cgi/StderrLog"" rel=""nofollow"">this</a> URL may help.</p>

<p>Later you may look for answer <a href=""http://www.py2exe.org/index.cgi/GeneralTipsAndTricks"" rel=""nofollow"">here</a>.</p>

<p>My answer is very general because you didn't give any more specific info (like py2exe/python version, py2exe log, other used 3rd party libraries).</p>
"
218432,"<p>See <a href=""http://www.wxpython.org/docs/api/wx.App-class.html"" rel=""nofollow"">http://www.wxpython.org/docs/api/wx.App-class.html</a> for wxPyton's <code>App</code> class initializer.  If you want to run the app from a console and have stderr print to there, then supply <code>False</code> for the <code>redirect</code> argument.  Otherwise, if you just want a window to pop up, set <code>redirect</code> to <code>True</code> and <code>filename</code> to <code>None</code>.</p>
"
218618,"<p>I would recommend to join the two arrays for the computation:</p>

<pre><code>% assuming you have column vectors a and b
x = [a b];

for i = 1:length(a)
    % do stuff with one row...
    x(i,:);
end
</code></pre>

<p>This will work great if your functions can work with vectors. Then again, many functions can even work with matrices, so you wouldn't even need the loop.</p>
"
218970,"<p>You have two options: <code>os.popen*</code> in the <code>os</code> module, or you can use the <code>subprocess</code> module to the same effect. The Python manual has pretty documentation and examples for <a href=""http://www.python.org/doc/2.5.2/lib/module-popen2.html"" rel=""nofollow"" title=""popen"">popen</a> and <a href=""http://www.python.org/doc/2.5.2/lib/module-subprocess.html"" rel=""nofollow"" title=""subprocess"">subprocess</a>.</p>
"
219000,"<p>The code below produces [3, 7, 11, 15] which is what I understand you seek</p>

<pre><code>from BeautifulSoup import BeautifulSoup
from re import compile

soup = BeautifulSoup(
    '''&lt;HTML&gt;&lt;BODY&gt;
    &lt;TABLE&gt;
    &lt;TR style=""font-size: 1pt"" valign=""bottom""&gt;
    &lt;TD width=""60%""&gt; &lt;/TD&gt; &lt;!-- colindex=01 type=maindata --&gt;
    &lt;TD width=""1%""&gt; &lt;/TD&gt;  &lt;!-- colindex=02 type=gutter --&gt;
    &lt;TD width=""1%"" align=""right""&gt; &lt;/TD&gt;    &lt;!-- colindex=02 type=lead --&gt;
    &lt;TD width=""9%"" align=""right""&gt; &lt;/TD&gt;    &lt;!-- colindex=02 type=body --&gt;
    &lt;TD width=""1%"" align=""left""&gt; &lt;/TD&gt; &lt;!-- colindex=02 type=hang1 --&gt;

    &lt;TD width=""3%""&gt; &lt;/TD&gt;  &lt;!-- colindex=03 type=gutter --&gt;
    &lt;TD width=""1%"" align=""right""&gt; &lt;/TD&gt;    &lt;!-- colindex=03 type=lead --&gt;
    &lt;TD width=""4%"" align=""right""&gt; &lt;/TD&gt;    &lt;!-- colindex=03 type=body --&gt;
    &lt;TD width=""1%"" align=""left""&gt; &lt;/TD&gt; &lt;!-- colindex=03 type=hang1 --&gt;
    &lt;TD width=""3%""&gt; &lt;/TD&gt;  &lt;!-- colindex=04 type=gutter --&gt;
    &lt;TD width=""1%"" align=""right""&gt; &lt;/TD&gt;    &lt;!-- colindex=04 type=lead --&gt;

    &lt;TD width=""4%"" align=""right""&gt; &lt;/TD&gt;    &lt;!-- colindex=04 type=body --&gt;
    &lt;TD width=""1%"" align=""left""&gt; &lt;/TD&gt; &lt;!-- colindex=04 type=hang1 --&gt;
    &lt;TD width=""3%""&gt; &lt;/TD&gt;  &lt;!-- colindex=05 type=gutter --&gt;
    &lt;TD width=""1%"" align=""right""&gt; &lt;/TD&gt;    &lt;!-- colindex=05 type=lead --&gt;
    &lt;TD width=""5%"" align=""right""&gt; &lt;/TD&gt;    &lt;!-- colindex=05 type=body --&gt;
    &lt;TD width=""1%"" align=""left""&gt; &lt;/TD&gt; &lt;!-- colindex=05 type=hang1 --&gt;

     &lt;/TR&gt;
    &lt;/TABLE&gt; &lt;/BODY&gt;&lt;/HTML&gt;'''
)

tables = soup.findAll('table')
matcher = compile('colindex')

def body_cols(row):
    for i, comment in enumerate(row.findAll(text=matcher)):
        if 'type=body' in comment:
            yield i

for table in soup.findAll('table'):
    index_row = table.find('tr')
    print list(body_cols(index_row))
</code></pre>
"
77606,"<p>'id' is a built-in method in Python. Assigning a value to 'id' will overwrite the method. It is best to use either an identifier before as in ""some_id"" or use it in a different capitalization method.</p>

<p>The built in method takes a single parameter and returns an integer for the memory address of the object that you passed.</p>

<p><code>&gt;&gt;&gt;</code>id(1)</p>

<p>9787760</p>

<p><code>&gt;&gt;&gt;</code>x = 1</p>

<p><code>&gt;&gt;&gt;</code>id(x)</p>

<p>9787760</p>
"
77859,"<p>Perhaps SQLAlchemy SQL Expression support is suitable. See the <a href=""http://docs.sqlalchemy.org/en/rel_0_5/sqlexpression.html"" rel=""nofollow"">documentation</a>. </p>
"
154131,"<p>Thomas's answer is right on, of course.</p>

<p>I would simply add that many C extension modules have a Python ""wrapper"" around them so that they can support standard function signatures and other dynamic-language features (such as the descriptor protocol).</p>
"
75370,"<p>Depending on what you mean by 'class':</p>

<pre><code>callable( obj ) and not inspect.isclass( obj )
</code></pre>

<p>or:</p>

<pre><code>callable( obj ) and not isinstance( obj, types.ClassType )
</code></pre>

<p>For example, results are different for 'dict':</p>

<pre><code>&gt;&gt;&gt; callable( dict ) and not inspect.isclass( dict )
False
&gt;&gt;&gt; callable( dict ) and not isinstance( dict, types.ClassType )
True
</code></pre>
"
76198,"<p>cakephp.org</p>

<p>Cakephp is really good, really close to ruby on rails (1.2).  It is in php, works very well on shared hosts and is easy to implement. </p>

<p>The only downside is that the documentation is somewhat lacking, but you quickly get it and quickly start doing cool stuff.</p>

<p>I totally recommend cakephp.</p>
"
300462,"<p>Follow S.Lotts advice on forms, it'll save time in the long run to do them the Django way now.  For that loop you were looking for:</p>

<pre><code>&lt;select name=""score{{ movie.id }}""&gt;
    &lt;option value=0 SELECTED&gt;No score&lt;/option&gt;
  {% for i in range(1, 11) %}
    &lt;option value={{ i }}&gt;{{ i }}&lt;/option&gt;
  {% endfor %}
&lt;/select&gt;
</code></pre>
"
73594,"<p>You can accomplish this using Microsoft COM objects. You can take a look at <a href=""http://www.boddie.org.uk/python/COM.html"" rel=""nofollow"">here</a> on how to start using them.</p>
"
73617,"<p>I suggest to use separate model for storing those temp zip files. You can create zip on-fly, save to model with filefield and finally send url to user.</p>

<p>Advantages:</p>

<ul>
<li>Serving static zip files with django media mechanism (like usual uploads).</li>
<li>Ability to cleanup stale zip files by regular cron script execution (which can use date field from zip file model).</li>
</ul>
"
216757,"<p>Does counting yield the same result when you just group by the unformatted datetime column? If so, you could just run the query and use Python date's strftime() method afterwards. i.e.</p>

<pre><code>query = select([logs.c.datetime, func.count(logs.c.datetime)]).group_by(logs.c.datetime)
results = session.execute(query).fetchall()
results = [(t[0].strftime(""...""), t[1]) for t in results]
</code></pre>
"
217036,"<p>This may be an editline issue; libedit may not accept UTF-8 characters:</p>

<ul>
<li><a href=""http://tracker.firebirdsql.org/browse/CORE-362#action_11593"" rel=""nofollow"">http://tracker.firebirdsql.org/browse/CORE-362#action_11593</a></li>
<li><a href=""http://marc.info/?t=119056021900002&amp;r=1&amp;w=2"" rel=""nofollow"">http://marc.info/?t=119056021900002&amp;r=1&amp;w=2</a></li>
</ul>
"
298492,"<p>The grammar is currently ambiguous.  On paper you cannot parse if ""MOVE A TO B MOVE C TO D"" is two statements, or one statement with particular badly named destinations.</p>

<p>You have two answers.  You may like neither.</p>

<ol>
<li><p>You explicitly make your WORD not match any reserved word.   That is, you specifically disallow matching MOVE or TO.  This is equivalent to saying ""MOVE is not a valid parameter name"".  This makes ""MOVE TL TO TM TN TO"" an error.</p></li>
<li><p>You modify your grammar so that you can tell where the statement ends.  You could add commas ""MOVE AA TO BB, CC MOVE TM TO TN, TO, TP"".  You could add semi-colons or blank lines at the end of statements.  You could require that MOVE be the least indented, like Python.</p></li>
</ol>
"
298499,"<blockquote>
  <p>I feel like there must be a way to
  create a simple loop that counts from
  1 to 10 that would generate most of
  those options for me, but I can't
  figure out how to do that...</p>
</blockquote>

<p>If you don't want to use Django forms (why btw?), check out this <a href=""http://www.djangosnippets.org/snippets/779/"" rel=""nofollow"">custom range tag</a> or just pass a range(1, 11) object into your template and use it in the <code>{% for %}</code> loop.</p>
"
77138,"<p>Check out the programming languages shootout:</p>

<p><a href=""http://dada.perl.it/shootout/"" rel=""nofollow"">http://dada.perl.it/shootout/</a></p>
"
77166,"<p>You need to be able to make a business case for switching, not just that ""it's faster"".  If a site built on technology B costs 20% more in developer time for maintenance over a set period (say, 3 years), it would likely be cheaper to add another webserver to the system running technology A to bridge the performance gap.</p>

<p>Just saying ""we should switch to technology B because technology B is <em>faster!</em>"" doesn't really work.</p>

<p>Since Python is far less ubiquitous than PHP, I wouldn't be surprised if hosting, developer, and other maintenance costs for it (long term) would have it fit this scenario.</p>
"
77222,"<p>In [8]: <code>str('2'.__class__)</code><br />
Out[8]: <code>""&lt;type 'str'&gt;""</code><br /></p>

<p>In [9]: <code>str(len.__class__)</code><br />
Out[9]: <code>""&lt;type 'builtin_function_or_method'&gt;""</code><br /></p>

<p>In [10]: <code>str(4.6.__class__)</code><br />
Out[10]: <code>""&lt;type 'float'&gt;""</code><br /></p>

<p>Or, as was pointed out before,<br /></p>

<p>In [11]: <code>4.6.__class__.__name__</code><br />
Out[11]: <code>'float'</code></p>
"
77458,"<p>Good question. I'm not a ruby guy (i use java with flex), but what I believe differentiates blazeds vs commercial livecycle ds is</p>

<ol>
<li>Streaming protocol support (rtmp) - competition for comet and such, delivering video</li>
<li>Some advanced stuff for hibernate detached objects and large resultset caching that I don't fully understand or need
<ol>
<li>support?
Might be others but those are the ones I know off the top of my head.</li>
</ol></li>
</ol>
"
216440,"<p>I had an old CherryPy-2.3.0-py2.5.egg file in my site-packages. After removing the old .egg I could run the tutorial.</p>
"
216505,"<p>Ideally, the logical configuration of the development, test, and production server should be the same. They should have the same version of OS, web server, and all other software assets used to run the application. However, depending on how strong your environment things will crop - hand copied images/scripts etc on the dev machine that do not make it through test and or production.</p>

<p>to minimize this you probably need some sort of push script that can move you from one stage to the next, ie PushVersionDev, PushVesionTest,PushVersionProd. ideally this should be the same script with parameters for target server(s) representing all that you need to move the app through the various stages.  </p>

<p>I would recommend a read of Theo Schlossnagle's book <a href=""http://astore.amazon.com/possiboutpos-20/detail/067232699X/105-2710068-5490858"" rel=""nofollow"">Scalable Internet Architectures</a> for more ideas on the matter.</p>

<p>To answer your question directly....once you get your application tested and implemented, the time to roll to productoin is not great - deploy OS, web server, supporting frameworks if they need installation, application and you are good to go. From bare metal I have seen linux servers go online in 1 hour, windows about 90 minutes. if you have the OS and web server going even less..minutes.</p>
"
152409,"<p>I have no idea of PyObjC, never used that, but if this was Objective-C code, I'd say you should call <a href=""http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSWindow_Class/Reference/Reference.html#//apple_ref/occ/instm/NSWindow/makeKeyAndOrderFront:"" rel=""nofollow"">makeKeyAndOrderFront</a>: on the window object if you want it to become the very first front window. A newly created window needs to be neither key, nor front, unless you make it either or like in this case, both.</p>

<p>The other issue that worries me is that you say the window goes away (gets invisible) when it's not active anymore. This sounds like your window is no real window. Have you accidentally set it to be a ""Utility Window"" in Interface Builder? Could you try to manually set the window level, using setLevel: to NSNormalWindowLevel before the window is displayed on screen for the first time whether it still goes away when becoming inactive?</p>
"
153012,"<p>I think template filter will be useful too. You can pass filter on each object, for example:</p>

<pre><code>{{ value|linebreaks }} # standard django filter
</code></pre>

<p>Will produce:</p>

<pre><code>If value is Joel\nis a slug, the output will be &lt;p&gt;Joel&lt;br&gt;is a slug&lt;/p&gt;.
</code></pre>

<p>See <a href=""http://docs.djangoproject.com/en/dev/ref/templates/builtins/#ref-templates-builtins-filters"" rel=""nofollow"">Django Built-in template tags and filters</a> complete reference.</p>
"
297137,"<p>I haven't tried directly calling Python functions from C++, but here are some alternative ideas...</p>

<p>Generally, it's easier to call C++ code from a high-level language like Python than the other way around.  If you're interested in this approach, then you could create a C++ codebase and access it from Python.  You could either directly use the external API provided by python [it should be described somewhere in the Python docs] or use a tool like SWIG to automate the C++-to-Python wrapping process.</p>

<p>Depending on how you want to use the library, you could alternatively create Python scripts which you call from C++ with the <a href=""http://www.opengroup.org/onlinepubs/000095399/functions/exec.html"" rel=""nofollow"">exec*</a> functions.</p>
"
298854,"<p>I recommend lxml over xmlproc because the PyXML package (containing xmlproc) is not being developed any more; the latest Python version that PyXML can be used with is 2.4.</p>
"
299262,"<p>In general: Use os.chdir to change the directory of the parent process, then os.system to run the jar file. If you need to keep Python's working directory stable, you need to chdir back to original working directory - you need to record that with os.getcwd().</p>

<p>On Unix: Create a child process with os.fork explicitly. In the parent, wait for the child with os.waitpid. In the child, use os.chdir, then os.exec to run java.</p>
"
74476,"<pre><code>Python 2.5.2 (r252:60911, Jun 16 2008, 18:27:58)
[GCC 3.3.4 (pre 3.3.5 20040809)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; import random
&gt;&gt;&gt; random.seed()
&gt;&gt;&gt; dir(random)
['BPF', 'LOG4', 'NV_MAGICCONST', 'RECIP_BPF', 'Random', 'SG_MAGICCONST', 'SystemRandom', 'TWOPI', 'WichmannHill', '_BuiltinMethodType', '_MethodType', '__all__', '__builtins__', '__doc__', '__file__', '__name__', '_acos', '_ceil', '_cos', '_e', '_exp', '_hexlify', '_inst', '_log', '_pi', '_random', '_sin', '_sqrt', '_test', '_test_generator', '_urandom', '_warn', 'betavariate', 'choice', 'expovariate', 'gammavariate', 'gauss', 'getrandbits', 'getstate', 'jumpahead', 'lognormvariate', 'normalvariate', 'paretovariate', 'randint', 'random', 'randrange', 'sample', 'seed', 'setstate', 'shuffle', 'uniform', 'vonmisesvariate', 'weibullvariate']
&gt;&gt;&gt; random.randint(0,3)
3
&gt;&gt;&gt; random.randint(0,3)
1
&gt;&gt;&gt;
</code></pre>
"
215843,"<p>I think what you need is either <code>PyObject_CallObject(&lt;py function&gt;, &lt;args&gt;)</code>, which returns the return value of the function you call as a PyObject, or <code>PyRun_String(&lt;expression&gt;, Py_eval_input, &lt;globals&gt;, &lt;locals&gt;)</code> which evaluates a single expression and returns its result.</p>
"
298414,"<p>never use ""direct string concatenation"" with SQL, because it's not secure, more correct variant:</p>

<pre><code>cursor.execute('INSERT INTO releases (date, cat, name) VALUES (%s, %s, %s)', (timestring, y[4], y[7]))
</code></pre>

<p>it automatically escaping  forbidden symbols in values (such as "", ' etc)</p>
"
298422,"<p>I've read you think shelve is too slow and you tried to hack your own dict using sqlite.</p>

<p>Another did this too :</p>

<p><a href=""http://sebsauvage.net/python/snyppets/index.html#dbdict"" rel=""nofollow"">http://sebsauvage.net/python/snyppets/index.html#dbdict</a></p>

<p>It seems pretty efficient (and sebsauvage is a pretty good coder). Maybe you could give it a try ?</p>
"
76404,"<p>Is it possible that the script you run is called random.py itself?</p>
"
77093,"<p>If it ain't broke don't fix it.</p>

<p>Just write a quick test, but bear in mind that each language will be faster with certain functions then the other.</p>
"
348367,"<p>Here's one way to achieve it.  Recreate the list using a function which will apply the appropriate mapping.</p>

<pre><code>def swap(p, (r1,c1), (r2,c2)):
    def getitem(r,c):
        if (r,c) == (r1,c1): return p[r2][c2]
        elif (r,c) == (r2,c2): return p[r1][c1]
        return p[r][c]
    return [ [getitem(r,c) for c in range(len(p[0]))] for r in range(len(p)) ]
</code></pre>

<p>You could even take this a step further and make the function be the actual interface, where each swap merely returns a function that does the appropriate conversions before passing through to the function below.  Not particularly performant, but a fairly simple functional approach that dispenses with nasty mutable datastructures:</p>

<pre><code>def swap(f, (r1,c1), (r2,c2)):
    def getitem(r,c):
        if (r,c) == (r1,c1): return f(r2,c2)
        elif (r,c) == (r2,c2): return f(r1,c1)
        return f(r,c)
   return getitem

l=[ [1,2,3], [4,5,6], [7,8,0]]
f=lambda r,c: l[r][c]    # Initial accessor function
f=swap(f, (2,1), (2,2))  # 8 right
f=swap(f, (1,1), (2,1))  # 5 down
print [[f(x,y) for y in range(3)] for x in range(3)]
# Gives: [[1, 2, 3], [4, 0, 6], [7, 5, 8]]
</code></pre>
"
249258,"<p>Well, <a href=""http://www.paulgraham.com/pypar.html"" rel=""nofollow"">here's a view</a> of why Python programmers make better Java programmers; the concepts are much the same as for your situation.</p>

<p>Essentially, people who learn a language because they want to show that they enjoy programming, like to learn new things, and are more likely to think outside the box.</p>

<blockquote>
  <p>...if a company chooses to write
  its software in a comparatively
  esoteric language, they'll be able to
  hire better programmers, because
  they'll attract only those who cared
  enough to learn it. And for
  programmers the paradox is even more
  pronounced: the language to learn, if
  you want to get a good job, is a
  language that people don't learn
  merely to get a job.</p>
</blockquote>

<p>Not only that, but Python enforces ""good looking"" code and you don't have to do the whole code/compile routine. With IronPython, you can simply code in Python and use it as is; just another .NET tool.</p>
"
249277,"<p>The language is almost never the key to success. Good programmers can be successful in a variety of languages, and you'll find successful projects in almost any language. You won't find the failures that much because those projects just go away never to be heard of again. If you're looking for a new language because you don't have good programmers, even the best language in the world isn't going to help.</p>

<p>And, you haven't said anything about the sort of work you're doing. Python might be a good choice because it has well-supported and widely-used libraries that are critical for you. On the other hand, C# might have better support for the stuff that you want to do. A tool outside of context has no intrinsic merit. You might love screwdrivers, but that doesn't help you row a boat.</p>

<p>If you want to use Python, or any other language, just because you like it, be honest with yourself and those around you. It looks like you've made a decision to switch, don't know why you are switching, and now need to rationalize it with reasons that had nothing to do with your desire to switch. If you had a good reason, you wouldn't be asking here :)</p>

<p>That's not entirely a bad thing, though. Programming is a human enterprise. If the programmers (at whatever level) insanely love a particular language, no matter how stupid the reason, they are probably going to produce more. It's just not a technological solution though.</p>

<p>Good luck, :)</p>
"
249414,"<p>I had the similar 'jpeg decoder problem' recently when deploying a django project on a product RHEL box that required PIL. I downloaded PIL, and ran 'python setup.py install' instantly, and was happy that everything was working, until I bumped into the problem. Solution: libjpeg was already installed on the system, so I installed libjpeg-devel. I went back into the source of PIL and ran 'python setup.py build', at the end of which, in the output where it shows whether PIL configure was able to detect support for jpeg, gif, freetype, etc, it said that jpeg support was ok. After installing PIL, it worked fine.</p>
"
186541,"<p>I find that the notation</p>

<pre><code>from some_module import some_symbol
</code></pre>

<p>works best in most cases. Also, in case of name clash for the symbol, you can use:</p>

<pre><code>from some_module import some_symbol as other_symbol
</code></pre>

<p>As the question states, it avoids rewriting the module name all the time, each time with a risk of mistyping it. I use the syntax:</p>

<pre><code>import  module [as other_module]
</code></pre>

<p>Only in two cases:</p>

<ol>
<li>I use too many of the module functions/objects to import them all</li>
<li>The module defines some symbol that may change during execution</li>
</ol>
"
187041,"<p>I think this can be made simpler still.  Dictionaries don't tolerate duplicate keys.  Make your list of mappings into a dictionary of mappings.  This will remove duplicates.</p>

<pre><code>&gt;&gt;&gt; someListOfDicts= [
    {'url': 'http://a', 'id': 'a'}, 
    {'url': 'http://b', 'id': 'b'}, 
    {'url': 'http://c', 'id': 'a'}]

&gt;&gt;&gt; dict( [(x['id'],x) for x in someListOfDicts ] ).values()

[{'url': 'http://c', 'id': 'a'}, {'url': 'http://b', 'id': 'b'}]
</code></pre>
"
5719,"<P>As others have mentioned, Lists and tuples are both containers which can be used to store python objects. Lists are extensible and their contents can change by assignment, on the other hand tuples are immutable.</P>
<P>Also, lists cannot be used as keys in a dictionary whereas tuples can. </P>"
8109,"<p>@Cristian and Antony Cramp: while XUL is a nice choice for UI development (cross-platform, open-source licensed, used in Firefox and other major software), it's certainly not language agnostic. You're tied to Gecko, with JS for scripting. There is experimental support for Python scripting, but it's only experimental, AFAIK.</p>

<p>You can define the UI in XUL+JS and use back-end components written in C++ though (there are Python and Java bridges available too).</p>
"
8320,"<p>Unless you want to do something a little complex, using the generic views are the way to go.  They are far more powerful than their name implies, and if you are just displaying model data generic views will do the job.</p>
"
5320,"<p>The <a href=""http://www.wxwidgets.org/"" rel=""nofollow"" title=""wxWidgets"">wxWidgets</a> (formerly known as wxWindows) library might be what you're looking for. There's a particularly good port for Python, <a href=""http://wxpython.org/"" rel=""nofollow"" title=""wxPython"">wxPython</a>, as well as versions for different languages -- C#, C++, Perl and Ruby come to mind -- and for various GUIs: Win32, Mac OS X, GTK+, X11, Motif, WinCE. The library's been around for a while and is pretty solid.</p>"
186300,"<p>To make you safe when opening files within one application, you could try something like this:</p>

<pre><code>import time
class ExclusiveFile(file):
    openFiles = {}
    fileLocks = []

    class FileNotExclusiveException(Exception):
        pass

    def __init__(self, *args):

        sMode = 'r'
        sFileName = args[0]
        try:
            sMode = args[1]
        except:
            pass
        while sFileName in ExclusiveFile.fileLocks:
            time.sleep(1)

        ExclusiveFile.fileLocks.append(sFileName)

        if not sFileName in ExclusiveFile.openFiles.keys() or (ExclusiveFile.openFiles[sFileName] == 'r' and sMode == 'r'):
            ExclusiveFile.openFiles[sFileName] = sMode
            try:
                file.__init__(self, sFileName, sMode)
            finally:
                ExclusiveFile.fileLocks.remove(sFileName)
         else:
            ExclusiveFile.fileLocks.remove(sFileName)
            raise self.FileNotExclusiveException(sFileName)

    def close(self):
        del ExclusiveFile.openFiles[self.name]
        file.close(self)
</code></pre>

<p>That way you subclass the <code>file</code> class. Now just do:</p>

<pre><code>&gt;&gt;&gt; f = ExclusiveFile('/tmp/a.txt', 'r')
&gt;&gt;&gt; f
&lt;open file '/tmp/a.txt', mode 'r' at 0xb7d7cc8c&gt;
&gt;&gt;&gt; f1 = ExclusiveFile('/tmp/a.txt', 'r')
&gt;&gt;&gt; f1
&lt;open file '/tmp/a.txt', mode 'r' at 0xb7d7c814&gt;
&gt;&gt;&gt; f2 = ExclusiveFile('/tmp/a.txt', 'w') # can't open it for writing now
exclfile.FileNotExclusiveException: /tmp/a.txt
</code></pre>

<p>If you open it first with 'w' mode, it won't allow anymore opens, even in read mode, just as you wanted...</p>
"
348676,"<p>A quick google found this:</p>

<p><a href=""http://sourceforge.net/projects/pykeylogger/"" rel=""nofollow"">http://sourceforge.net/projects/pykeylogger/</a></p>

<p>You might be able to use some of the source code.</p>
"
349229,"<p>Why not use a standard that both languages can parse, like JSON, XML, or YAML?  <a href=""http://pypi.python.org/pypi/simplejson"" rel=""nofollow"">simplejson</a> is handy, and included as json in python 2.6.</p>
"
2510,"<p>Small files take up a whole node on the filesystem whatever size that is.</p>

<p>My host tends to report all small files as 4kb in ftp but in a shell gives an accurate size so it might be a 'feature' common to ftp clients.</p>"
764,"<p>Sounds to me like you're trying to combine things that shouldn't be combined.  If you need to do different processing in your view depending on if it's a User or Group object you're trying to look at then you should use two different view functions.</p>

<p>On the other hand there can be common idioms you'd want to extract out of your object_detail type views... perhaps you could use a decorator or just helper functions?</p>

<p>-Dan</p>"
186486,"<p>I believe in newer versions of Python (2.5+? must check my facts...) you can even do:</p>

<pre><code>import some_other_module as some_module
</code></pre>

<p>So you could still go with style 1 and swap in a different module later on.</p>

<p>I think it generally maps to how much you want to clutter up your namespace. Will you just be using one or two names in the module? Or all of them (<code>from x import *</code> is not allways bad, just generally)?</p>
"
347121,"<p>Thanks for the thoughtful responses</p>

<p>That seemed to be another distraction from learning programming for me anyway. I spent more time chasing apparent fixes for upgraded packages and such. Mostly things that were already working and it just seemed to not make much sense to spend time recreating the wheel so to speak. Believe me the jury is still out for ma as to whether it makes good sense to chase the dream of Linux as a real alternative to a usable desktop. Now remember ex-Windows users will always have to compare their experience with Linux to how they were previously able to work before trying Windows.</p>

<p>Just my two cents </p>
"
347120,"<p>I find some of my junior colleagues (atleast the ones that are very passionate about CS) asking similar questions (sometimes I find myself asking this too, even though I am now 12+ yrs into the industry). One advice I give them (and to myself too), which helped me, is - </p>

<ul>
<li><p>Focus on the job that is already assigned to you. As part of that task, make sure you dont just ""get the job done"", but also make sure that you understand the fundamentals behind the same. If you want to be a good programmer, you need to understand the underlying principles of ""how things work"". Using an API to do matrix multiplication is easy, but if you dont really know what is matrix multiplication and how to do it by hand, you are actually losing out. So in your chosen web programming domain, make sure you go beyond the surface. Understand what is really happening behind your back, when you click that button.</p></li>
<li><p>As part of ""doing the job"" you typically can figure out what is your interest area. If you are more passionate about how things are implemented, and keep figuring it out, then you are, IMO, a systems guy. If you are more passionate about finding out all the new tools and the newer features and seem to be keen in putting things together to create newer and cooler outputs, then you are an application programmer. Both are interesting areas in their own ways and as people adviced above, realize what you like and see if you can stick with it.</p></li>
<li><p>And I like one of the advices above. If you are still confused, try doing this ""rotation"" thingie. There are lots of scope in just about every domain/field and so keep rotating (but give each rotation due time), until you find what you like.</p></li>
</ul>

<p>All the best.</p>

<p>:-)</p>
"
347076,"<p>Don't worry so much about the direction you're going, just make sure that:</p>

<p>a) You are enjoying it, and are understanding what you are doing. You don't have to initially understand concepts like polymorphism for example, but you should be understanding the basics of what you are doing. Just can't wrap your mind around Tuples and Dictionaries in Python after awhile? Then it's probably not for you. Of course, that's a very low level example as if you don't get Dictionaries, then there's a problem in general :-)</p>

<p>b) You are working on things that you want to solve, not just because you think you NEED to learn this. You used the phrase ""Windows is a necessary evil"" No, it isn't. Many companies (big and small) do not use the .NET platform for development. Your approach to Linux was interesting as you could not achieve something you wanted on it and your result was ""it's clunky"" which seems kind of awkward.</p>

<p>Either way, this isn't about Linux vs. Windows, but I hope that helps. Just go with the flow, and don't worry about what way you're going as long as you're enjoying and learning! :)</p>
"
347027,"<p>You can trick the import mechanism, by adding each subdirectory to <code>egg/__init__.py</code>:</p>

<pre><code>__path__.append(__path__[0]+""\\common"")
__path__.append(__path__[0]+""\\foo"")
</code></pre>

<p>then, you simply import all modules from the egg namespace; e.g. <code>import egg.bar</code> (provided you have file egg/foo/bar.py).<br>
Note that foo and common should not be a package - in other words, they should not contain <code>__init__.py</code> file.</p>

<p>This solution completely solves the issue of eventually moving files around; however it flattens the namespace and therefore it may not be as good, especially in big projects - personally, I prefer full name resolution.</p>
"
346873,"<p>Using deltaX</p>

<p>if deltax between 2 and 10 half increment
if deltax between 10 and 20 unit increment
if smaller than 2 we multiply by 10 and test again
if larger than 20 we divide 
Then we get the position of the first unit or half increment on the width using xmin.</p>

<p>I still need to test this solution.</p>
"
8165,"<p>I don't get this part here:</p>

<blockquote>
  <p>This worked okay, but there was no easy way of checking if x[3][24] was supposed to exist or not (so I couldn't raise the season<em>not</em>found exception)</p>
</blockquote>

<p>There is a way to do it - called <strong>in</strong>:</p>

<pre><code>&gt;&gt;&gt;x={}
&gt;&gt;&gt;x[1]={}
&gt;&gt;&gt;x[1][2]={}
&gt;&gt;&gt;x
{1: {2: {}}}
&gt;&gt;&gt; 2 in x[1]
True
&gt;&gt;&gt; 3 in x[1]
False
</code></pre>

<p>what seems to be the problem with that?</p>
"
183863,"<p><code>//</code> is floor division, it will always give you the integer floor of the result.  The other is 'regular' division.</p>
"
183615,"<p>I concur with Blair Conrad's post about the Python logging module. The standard log handlers sometimes drop messages however. It's worth using the logging module's SocketHandler and building a receiver to listen for messages and write them to file.</p>

<p>Here's mine: <a href=""http://www.djangosnippets.org/snippets/1116/"" rel=""nofollow"">Example SocketHandler receiver</a>.</p>
"
185387,"<p>This probably doesn't fully comply with file-naming standards, but here it goes:</p>

<pre><code>/^Run[\w]*?\.py$/
</code></pre>
"
186765,"<p>My experience with various new technologies over the last ten years leads me to recommend that you make stability of the platform a serious criterion. It's all well and good developing with the latest and greatest framework, but when you find it's moved forward a point version and suddenly the way you have done everything is deprecated, that can turn out to result in extra unnecessary work. This was particularly my experience working with rails a little ahead of version 1. For that reason alone I would avoid any platform that wasn't at least at 1.0 when you start work on it.</p>

<p>Ruby is great to work with and will keep your developer productivity high, but if Django is the more stable platform I would favour that for sure.</p>
"
186644,"<p>I personally try not to mess too much with my namespace, so in most situations I just do  </p>

<pre><code>import module
</code></pre>

<p>or 
    import module as mod</p>

<p>Only real diffrence is when I have a module with a single class that's used a lot. If I had sublclassed a <code>list</code> type to add some funcionality there, I'd use</p>

<pre><code>from SuperImprovedListOverloadedWithFeatures import NewLIst
nl = NewList()
</code></pre>

<p>etc.</p>
"
129964,"<p>Django does not support it. The best way would be to separate the values with arbitrary separator and then just split the string, like you already said.</p>
"
130138,"<p>I'm only a newbie to Python, but here's my approach.</p>

<pre><code>def mkgmtime(fields):
    now = int(time.time())
    gmt = list(time.gmtime(now))
    gmt[8] = time.localtime(now).tm_isdst
    disp = now - time.mktime(tuple(gmt))
    return disp + time.mktime(fields)
</code></pre>

<p>There, my proposed name for the function too. :-) It's important to recalculate <code>disp</code> every time, in case the daylight-savings value changes or the like. (The conversion back to tuple is required for Jython. CPython doesn't seem to require it.)</p>

<p>This is super ick, because <code>time.gmtime</code> sets the DST flag to false, always. I hate the code, though. There's got to be a better way to do it. And there are probably some corner cases that I haven't got, yet.</p>
"
249743,"<p>Your specific solution to the path name copy is reasonable, but your general solution to the entire problem could be improved.</p>

<p>I would <code>easy_install anyvc</code>, a library developed for the <a href=""http://pida.co.uk/"" rel=""nofollow"">PIDA IDE</a> which is a uniform python interface into version control systems, and use it instead:</p>

<pre><code>from anyvc import Subversion
vc = Subversion('/trunk')

modified = [f.relpath for f in vc.list() if f.state != 'clean']

for f in modified:
    print f.relpath # the relative path of the file to the source root
</code></pre>

<p>Additionally, I would probably attach a diff to an email rather than the actual file. But I guess that's your choice.</p>
"
250318,"<p>How frequently is this getting called?  This doesn't look that bad... especially after removing the duplicate request.</p>
"
250465,"<p>Can I query against the ListProperty?</p>

<p>Something like </p>

<pre><code>SELECT * FROM LinkGrouping WHERE links.contains('http://www.google.com')
</code></pre>

<p>I have future plans where I would need that functionality.</p>

<p>I'll definitely implement the single db.put() to reduce usage.</p>
"
128393,"<p>How about using <code>{id: (description, id_type)}</code> dictionary? Or <code>{(id, id_type): description}</code> dictionary if (id,id_type) is the key.</p>
"
19685,"<p>I don't think it's a matter of a programming language as such. </p>

<p>What is the proficiency level of PHP in the team you're talking about? Are they doing spaghetti code or using some structured framework like Zend? If this is the first case then I absolutely understand the guy's interest in Python and Django. It this is the latter, it's just a hype.</p>
"
19943,"<p>I love Python and Django, and use both to develop the our core webapps.</p>

<p>That said, it's hard to make a business case for switching at this point. Specifically:</p>

<ul>
<li>Any new platform is risky compared to staying with the tried and true</li>
<li>You'll have the developer fragmentation you mentioned</li>
<li>It's far easier to find PHP programmers than python programmers</li>
</ul>

<p>Moreover, as other posters have mention, if the issue is more with spaghetti code than PHP itself, there are plenty of nice PHP frameworks that could be used to refactor the code.</p>

<p>That said, if this developer is excited about python, stopping them outright is probably demoralizing. My suggestion would be to encourage them to develop in python, but not the mission critical parts of the app. Instead they could write some utility scripts, some small internal application that needs doing, etc.</p>

<p>In conclusion: I don't recommend switching from PHP, but I do recommend accommodating the developer's interest in some way at work.</p>
"
180149,"<p>Puppet doesn't (easily) support the Win32 world either. If you're looking for a deployment mechanism and not just a ""dev setup"" tool, you might consider looking into ControlTier (<a href=""http://open.controltier.com/"" rel=""nofollow"">http://open.controltier.com/</a>) which has a open-source cross-platform solution. </p>

<p>Beyond that you're looking at ""enterprise"" software such as BladeLogic or OpsWare and typically an outrageous pricetag for the functionality offered (my opinion, obviously).</p>

<p>A lot of folks have been aggressively using a combination of Puppet and Capistrano (even non-rails developers) for deployment automation tools to pretty good effect. Downside, again, is that it's expecting a somewhat homogeneous environment.</p>
"
177109,"<p>You might consider creating virtual machine appliances with whatever production OS you are running, and all of the software dependencies pre-built.  Code can be edited either remotely, or with a shared folder.  It worked pretty well for me in a past life that had a fairly complicated development environment.</p>
"
177302,"<p>Can you use the built-in database aggregate functions like MAX(column)?</p>
"
21974,"<p>Interesting. I don't know, but I did try this:</p>

<pre><code>&gt;&gt;&gt; now = time.mktime((2008, 8, 22, 11 ,17, -1, -1, -1, -1))
&gt;&gt;&gt; tomorrow = time.mktime((2008, 8, 23, 11 ,17, -1, -1, -1, -1))
&gt;&gt;&gt; tomorrow - now
86400.0
</code></pre>

<p>which is what you expected. My guess? Maybe some time correction was done since the epoch. This could be only a few seconds, something like a leap year. I think I heard something like this before, but can't remember exactly how and when it is done...</p>
"
22157,"<p>Python stores Unicode as UTF-16. str() will return the UTF-8 representation of the UTF-16 string.</p>
"
252344,"<p>Well, I can't see an immediate pattern. But if you are testing IP, why not take two blocks of 4 as a single binary number.</p>
"
128526,"<p>Sets in Python are implemented using hash tables. In earlier versions, they were actually implemented using sets, but that has changed AFAIK. The only thing you save by using a set would then be the size of a pointer for each entry (the pointer to the value). </p>

<p>To use only a part of a tuple for the hashcode, you'd have to subclass tuple and override the hashcode method:</p>

<pre><code>class ProteinTuple(tuple):
     def __new__(cls, m1, m2, m3):
         return tuple.__new__(cls, (m1, m2, m3))

     def __hash__(self):
         return hash(self[0])
</code></pre>

<p>Keep in mind that you pay for the extra function call to <code>__hash__</code> in this case, because otherwise it would be a C method.</p>

<p>I'd go for Constantin's suggestions and take out the id from the tuple and see how much that helps.</p>
"
128565,"<p>It's still murky, but it sounds like you have some several lists of [(id, description, type)...]</p>

<p>The id's are unique within a list and consistent between lists.</p>

<p>You want to create a UNION: a single list, where each id occurs once, with possibly multiple descriptions.</p>

<p>For some reason, you think a mapping might be too big.  Do you have any evidence of this?  Don't over-optimize without actual measurements.  </p>

<p>This may be (if I'm guessing correctly) the standard ""merge"" operation from multiple sources.</p>

<pre><code>source1.sort()
source2.sort()
result= []
while len(source1) &gt; 0 or len(source2) &gt; 0:
    if len(source1) == 0:
        result.append( source2.pop(0) )
    elif len(source2) == 0:
        result.append( source1.pop(0) )
    elif source1[0][0] &lt; source2[0][0]:
        result.append( source1.pop(0) )
    elif source2[0][0] &lt; source1[0][0]:
        result.append( source2.pop(0) )
    else:
        # keys are equal
        result.append( source1.pop(0) )
        # check for source2, to see if the description is different.
</code></pre>

<p>This assembles a union of two lists by sorting and merging.  No mapping, no hash.</p>
"
153999,"<p>I've used py2Exe myself - it's really easy (at least for small apps).</p>
"
297423,"<p>The gzip library will take a file-like object for compression.</p>

<pre><code>class GzipFile([filename [,mode [,compresslevel [,fileobj]]]])
</code></pre>

<p>You still need to provide a nominal filename for inclusion in the zip file, but you can pass your data-source to the fileobj.</p>

<p><em>(This answer differs from that of Damnsweet, in that the focus should be on the data-source being incrementally read, not the compressed file being incrementally written.)</em></p>

<p><em>And I see now the original questioner won't accept Gzip :-(</em></p>
"
297803,"<p>I would agree with the comment left by Î¤ÎÎ©Î¤ÎÎÎÎ¥, viz. just let the server do the validation and let the clients submit a potential move. If that's not the way you want to take the design, then just write the rules in Python as suggested by S. Lott and others.</p>

<p>It really shouldn't be that hard. You can break the rules down into three major categories:<br />
  - Rules that rely on the state of the board (castling, en passant, draws, check, checkmate, passing through check, is it even this player's turn, etc.)<br />
  - Rules that apply to all pieces (can't occupy the same square as another piece of your own colour, moving to a square w/ opponent's piece == capture, can't move off the board)<br />
  - Rules that apply to each individual piece. (pawns can't move backwards, castles can't move diagonally, etc)</p>

<p>Each rule can be implemented as a function, and then for each half-move, validity is determined by seeing if it passes all of the validations.</p>

<p>For each potential move submitted, you would just need to check the rules in the following order:</p>

<ol>
<li>is the proposed move potentially valid? (the right ""shape"" for the piece)</li>
<li>does it fit the restraints of the board? (is the piece blocked, would it move off the edge)</li>
<li>does the move violate state requirements? (am I in check after this move? do I move through check? is this en passant capture legal?)</li>
</ol>

<p>If all of those are ok, then the server should accept the move as legalâ¦</p>
"
297811,"<p>I figured out a ""better"" way of formatting the output. As usual, I was trying to nuke it out when a more elegant method will do.</p>

<pre><code>for key, value in sorted(self.dict.items()):
    self.current_list.WriteText(key + "" "" + str(self.dict[key]) + ""\n"")
</code></pre>

<p>This way also sorts the dictionary alphabetically, which is a big help when identifying items that have already been selected or used.</p>
"
298045,"<p>If you are just going to assign the lambda to a variable in the local scope, you may as well use def because it is more readable and can be expanded more easily in the future:</p>

<pre><code>fun = lambda a, b: a ** b # a pointless use of lambda
map(fun, someList)
</code></pre>

<p>or</p>

<pre><code>def fun(a, b): return a ** b # more readable
map(fun, someList)
</code></pre>
"
298401,"<p>read answer for this question from GvR ;)
<a href=""http://neopythonic.blogspot.com/2008/10/sorting-million-32-bit-integers-in-2mb.html"" rel=""nofollow"">Sorting a million 32-bit integers in 2MB of RAM using Python</a></p>
"
75815,"<p>You can pass a dictionary of initial values to your form:</p>

<pre><code>if request.method == ""GET"":
    # calculate my_start_date and my_end_date here...
    form = MyForm( { 'start_date': my_start_date, 'end_date': my_end_date} )
...
</code></pre>

<p>See the <a href=""http://docs.djangoproject.com/en/dev/ref/forms/api/"" rel=""nofollow"">official forms API documentation</a>, where they demonstrate this.</p>

<p><strong>edit</strong>: Based on answers from other users, maybe this is the cleanest solution:</p>

<pre><code>if request.method == ""GET"":
    form = MyForm()
    form['start_date'] = form['start_date'].field.initial
    form['end_date'] = form['end_date'].field.initial
else:
    form = MyForm(request.method.POST)
if form.is_valid():
    do_query(form.cleaned_data['start_date'], form.cleaned_data['end_date'])
</code></pre>

<p>I haven't tried this though; can someone confirm that this works? I think this is better than creating a new method, because this approach doesn't require other code (possibly not written by you) to know about your new 'magic' accessor.</p>
"
76221,"<p>I'd model Role as an association class between Users and Roles, thus,</p>

<pre><code>class User(models.Model):
     ...

class Event(models.Model):
     ...

class Role(models.Model):
     user = models.ForeignKey(User)
     event = models.ForeignKey(Event)
</code></pre>

<p>And enforce the one role per user per event in either a manager or SQL constraints.</p>
"
156901,"<p>Without fairly intensive surgery on optparse or getopt, I don't believe you can sensibly make them parse your format. You can easily parse your own format, though, or translate it into something optparse could handle:</p>

<pre><code>parser = optparse.OptionParser()
parser.add_option(""--ARG1"", dest=""arg1"", help=""...."")
parser.add_option(...)
...
newargs = sys.argv[:1]
for idx, arg in enumerate(sys.argv[1:])
    parts = arg.split('=', 1)
    if len(parts) &lt; 2:
        # End of options, don't translate the rest. 
        newargs.extend(sys.argv[idx+1:])
        break
    argname, argvalue = parts
    newargs.extend([""--%s"" % argname, argvalue])

parser.parse_args(newargs)
</code></pre>
"
215576,"<p>From a methodological point of view, individual tests should be independent, otherwise it can produce more hard-to-find bugs. Imagine for instance that testA and testB would be called in a different order.</p>
"
217035,"<p>To represent the current state of a board (including castling possibilities etc) you can use 
<a href=""http://en.wikipedia.org/wiki/Forsyth-Edwards_Notation"" rel=""nofollow"">Forsyth-Edwards Notation</a>, which will give you a short ascii representation. e.g.:</p>

<pre>
rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
</pre>

<p>Would be the opening board position.</p>

<p>Then to represent a particular move from a position you could use <a href=""http://en.wikipedia.org/wiki/ICCF_numeric_notation"" rel=""nofollow"">numeric move notation</a> (as used in correspondence chess), which give you a short (4-5 digits) representation of a move on the board.</p>

<p>As to represent the rules - I'd love to know myself.  Currently the rules for my chess engine are just written in Python and probably aren't as declarative as I'd like.</p>
"
298827,"<p>I believe you need to switch from expat to xmlproc.<br />
See:
<a href=""http://code.activestate.com/recipes/220472/"" rel=""nofollow"">http://code.activestate.com/recipes/220472/</a></p>
"
77145,"<p>If the tests are simple, simply put them in the docstring -- most of the test frameworks for Python will be able to use that:</p>

<pre><code>&gt;&gt;&gt; import module
&gt;&gt;&gt; module.method('test')
'testresult'
</code></pre>

<p>For other more involved tests, I'd put them either in <code>../tests/test_module.py</code> or in <code>tests/test_module.py</code>.</p>
"
154537,"<p>The description you linked looks completely general.</p>
"
216467,"<p>If you can't use Python 2.6's ftplib, there is a company offering a <em>commercial</em> solution.</p>

<p>Chilkat's <a href=""http://www.chilkatsoft.com/refdoc/pythonCkFtp2Ref.html"" rel=""nofollow"" title=""CKFTP2 Manual"">CKFTP2</a> costs several hundreds of dollars, but promises to work with Python 2.5, and offers a function call get_AsyncBytesSent() which returns the information you need. (I didn't see a callback, but it may offer that too.)</p>

<p>I haven't used this product.</p>

<p>Also consider that if FTP proves to be too hard/expensive, you could always switch to HTTP uploads instead. Chilkat have a free HTTP/HTTPS upload library.</p>
"
216730,"<p>I don't know SQLAlchemy, so I could be off-target.  However, I think that all you need is:</p>

<pre><code>SELECT date_formatter(datetime_field, ""format-specification"") AS dt_field, COUNT(*)
    FROM logs
    GROUP BY date_formatter(datetime_field, ""format-specification"")
    ORDER BY 1;
</code></pre>

<p>OK, maybe you don't need the ORDER BY, and maybe it would be better to re-specify the date expression.  There are likely to be alternatives, such as:</p>

<pre><code>SELECT dt_field, COUNT(*)
    FROM (SELECT date_formatter(datetime_field, ""format-specification"") AS dt_field
              FROM logs) AS necessary
    GROUP BY dt_field
    ORDER BY dt_field;
</code></pre>

<p>And so on and so forth.  Basically, you format the datetime field and then proceed to do the grouping etc on the formatted value.</p>
"
295249,"<p>The symlink hack is probably the only viable option, unless there is some heuristic to determine how to handle colons in PYTHONPATH.</p>
"
295377,"<p>You could use a templatetag like the one in this snippet comments:</p>

<p><a href=""http://www.djangosnippets.org/snippets/177/"" rel=""nofollow"">http://www.djangosnippets.org/snippets/177/</a></p>

<pre><code>@register.filter
def in_list(value,arg):
    return value in arg
</code></pre>

<p>To be used in templates:</p>

<pre><code>The item is 
{% if item|in_list:list %} 
    in list 
{% else %} 
    not in list
{% endif %}
</code></pre>

<p>Not very smart, but it works.</p>
"
78058,"<p>Yes that is the correct formula.</p>

<p>If you have a large number of points you can exploit the symmetry of the problem (be it cylindrical, spherical, mirror). Otherwise, you can borrow from statistics and average a random number of the points and just have a bit of error.</p>
"
296498,"<p>It is perfectly acceptable to have a 'cleanup()' function that you call at the end of your script, which will call 'os.remove()' on your files.</p>
"
217467,"<p>Your staging environment should mimic your production environment. Development is more like a playground, and the control on the development environment should not be quite so strict. However, the development environment should periodically be refreshed from the production environment (e.g,. prod data copied to the dev db, close the ports on dev that are closed on prod, etc.).</p>

<p>Ideally, dev, stage, and prod are all on separate machines. The separate machines can be separate physical boxes, or virtual machines on the same physical box, depending on budget/needs.</p>
"
217879,"<p>Also see <a href=""http://search.cpan.org/perldoc?Config::General"" rel=""nofollow"">Config::General</a>, which claims to be fully compatible with Apache configuration files. I use it to parse my Apache configuration files for automatic regression testing after configuration changes.</p>
"
217896,"<p>I'd use <a href=""http://www.python.org/doc/2.5.2/lib/string-methods.html#l2h-255"" rel=""nofollow""><code>replace</code></a>:</p>

<pre><code>def wildcard_to_regex(str):
    return str.replace(""*"", "".*"").replace(""?"", .?"").replace(""#"", ""\d"")
</code></pre>

<p>This probably isn't the most efficient way but it should be efficient enough for most purposes. Notice that some wildcard formats allow character classes which are more difficult to handle.</p>
"
295735,"<p>A Partial type is a type whose declaration is separated across multiple files. It makes sense to use them if you have a big class, which is hard to handle and read for a typical developer, to separate that class definition in separate files and to put in each file a logically separated section of code (for instance all public methods and proprieties in one file, private in other, db handling code in third and so on..)</p>

<p>No you don't have the same syntactical element in Python. </p>
"
78702,"<blockquote>
  <p>[...] In any style command <strong>the first row
  index</strong> may be set to one of the special strings [...]</p>
</blockquote>

<p>In your first example you're setting the <em>second</em> row index to a special string as well.</p>

<p>Not sure why the other two don't work... Are you sure this is where the exception is coming from?</p>
"
152080,"<p>If it works, why not? You could have problems though when _sa_class_manager gets restructured, binding yourself to this specific version of SQLAlchemy, or creating more work to track the changes. As SQLAlchemy is a fast moving target, you may be there in a year already.</p>

<p>The preferable way would be to integrate your desired API into SQLAlchemy itself.</p>
"
215727,"<p>Well you know computers are always right.  The answer is that the attrs are on different things in the html.  What I was modeling on what some html that looked like this:</p>

<pre><code>&lt;TD nowrap align=""left"" valign=""bottom""&gt;
&lt;DIV style=""border-bottom: 1px solid #000000; width: 1%; padding-bottom: 1px""&gt;
&lt;B&gt;Name&lt;/B&gt;
&lt;/DIV&gt;
&lt;/TD&gt;
</code></pre>

<p>The other places in the file where style=""border-bottom etc look like:</p>

<pre><code>&lt;TD colspan=""2"" nowrap align=""center"" valign=""bottom"" style=""border-bottom: 1px solid 00000""&gt;
&lt;B&gt;Location&lt;/B&gt;
&lt;/TD&gt;
</code></pre>

<p>so now I have to modify the question to figure out how identify those cells where the attr is at the td level not the div level</p>
"
215737,"<p>Someone took away one of their answers though I tested it and it worked for me.  Thanks for the help.  Both answers worked and I learned a little bit more about how to post questions and after I stare at the code for a while I might learn more about Python and BeautifulSoup</p>
"
215772,"<p>You should be able to return the result from MyFunc, which would then end up in the variable you are currently calling ""ignored"".  This eliminates the need to access it in any other way.</p>
"
154911,"<p>Combination that I am familiar with: wxPython, py2exe, upx</p>

<p>The key to resolving your last concern about the size of the distribution is using <a href=""http://upx.sourceforge.net/"" rel=""nofollow"">upx</a> to compress the DLLs.  It looks like they support MacOS executables.  You will pay an initial decompression penalty when the DLLs are first loaded.</p>
"
74459,"<p>Can you post an example of what you're trying to do?  It's not clear from your question what the actual problem is.</p>

<p>Here's an example of how to use the random module:</p>

<pre><code>import random
print random.randint(0,10)
</code></pre>
"
301593,"<p>You can use the <a href=""http://pypi.python.org/pypi/parsedatetime/"" rel=""nofollow"">parsedatetime</a> module.</p>

<pre><code>&gt;&gt;&gt; from parsedatetime.parsedatetime import Calendar
&gt;&gt;&gt; c = Calendar()
&gt;&gt;&gt; c.parse(""2007-07-18 10:03:19"")
((2008, 11, 19, 10, 3, 19, 2, 324, 0), 2)
</code></pre>
"
343743,"<p>Check out <a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""nofollow"">mechanize</a> or it's wrapper <a href=""http://twill.idyll.org/"" rel=""nofollow"">twill</a>.  I think it's <a href=""http://wwwsearch.sourceforge.net/ClientForm/"" rel=""nofollow"">ClientForm</a> module will work for you.</p>
"
13399,"<p>Depends on the language and what you need to do, a ""map"" as it's called in many languages could be what you're looking for. I don't know C#, but according to <a href=""http://blogs.msdn.com/devdev/archive/2006/06/30/652802.aspx"" rel=""nofollow"">this</a> page, .NET 2.0 calls map ""ConvertAll"".</p>

<p>The meaning of ""map"" is pretty simple - take a list, and apply a function to each element of it, returning a new list. You may also be looking for ""filter"", which would give you a list of items that satisfy a predicate in another list.</p>
"
13456,"<p>You can obviously concatenate everything together:</p>

<pre><code>cleaned = stringwithslashes.replace(""\\n"",""\n"").replace(""\\r"",""\n"").replace(""\\"","""")
</code></pre>

<p>Is that what you were after? Or were you hoping for something more terse?</p>
"
342845,"<p>I'm pretty sure you already know this but unfortunately Jython <a href=""http://www.jython.org/Project/userfaq.html#is-jython-the-same-language-as-python"" rel=""nofollow"">can't load c extension modules.</a></p>
"
342863,"<p>Once upon a time I read over some Win32 API tutorials at <a href=""http://www.relisoft.com"" rel=""nofollow"">www.relisoft.com</a></p>

<p>They are an anti-MFC and pro-Win32 API shop and have a manifesto of sorts explaining practical reasons for why.</p>

<p>They also have a general C++ tutorial.  99% of the time I like their programming style for what it's worth.</p>
"
342867,"<p>All you need is completely free on MSDN.COM.   Win32 is easily programed using C/C++, C#, and Visual Basic.  I recommend C/C++.    YOu can download the Visual Studio Express editions <a href=""http://www.microsoft.com/express/product/default.aspx"" rel=""nofollow"">here</a>.</p>

<p>All the documentation (not an abbreviated form) is on the web <a href=""http://msdn.microsoft.com/en-us/library/aa139672.aspx"" rel=""nofollow"">here</a>. </p>

<p>Note that Win32 is often loosely used to mean ""all the programming interface for Windows"".  More cannonically, it is the base native set of APIs for user mode applications.   There a similar set of APIs for drivers and kernel components. You can learn about that <a href=""http://www.microsoft.com/whdc/devtools/WDK/default.mspx"" rel=""nofollow"">here</a>.</p>

<p>Microsoft has many other windows programming interfaces as well:  The <a href=""http://msdn.microsoft.com/en-us/library/w0x726c2.aspx"" rel=""nofollow"">Common Language Run time and .NET frame work</a> is a manged layer on top of windows.   There are many other API families as well such as <a href=""http://msdn.microsoft.com/en-us/library/bb219737(VS.85).aspx"" rel=""nofollow"">DX9 and DX10</a> (good link to game programming <a href=""http://blogs.msdn.com/coding4fun/archive/2006/11/02/938703.aspx"" rel=""nofollow"">here</a>).  </p>
"
343228,"<p>I havent tried 3.0 yet. But there is now a bigger distinction between a sequence of bytes and strings. The latter hold unicode codepoints while the former don't hold unicode but only <code>encoded</code> unicode strings. Hashes operate on sequences of bytes. So you will have to encode your (unicode) strings first bevore feeding them to a hash.</p>
"
343231,"<p>The fastest would probably be just to look at the code and re-implement it yourself in python. carrying around all of CGAL just for this tiny bit seems redundant.<br />
Also this calculation doesn't strike me as something that would extremely benefit by running compiled.</p>
"
182275,"<p>In addition to your own models files, you need to import your settings module as well.</p>
"
189967,"<p>I think you could simply compute the euclidean distance (i.e. sqrt(sum of squares of differences, pixel by pixel)) between the luminance of the two images, and consider them equal if this falls under some empirical threshold. And you would better do it wrapping a C function.</p>
"
219737,"<p>So having not heard back regarding my edit to the original question, I have done some more research and the conclusion I seem to be coming to is that <em>yes</em>, I should break the interface out into several views, each with its own controller.  Python-gtkmvc provides the ability to this by providing a <code>glade_top_widget_name</code> parameter to the View constructor.  This all seems to make a good deal of sense although it is going to require a large refactoring of my existing codebase which I may or may not be willing to undertake in the near-term (I know, I know, I <em>should</em>.)  Moreover, I'm left to wonder whether should just have a single Model object (my application is fairly simple--no more than twenty-five state vars) or if I should break it out into multiple models and have to deal with controllers observing multiple models and chaining notifications across them.  (Again, I know I really <em>should</em> do the latter.)  If anyone has any further insight, I still don't really feel like I've gotten an answer to the original question, although I have a direction to head in now.</p>

<p>(Moreover it seems like their ought to be other architectural choices at hand, given that up until now I had not seen a single Python application coded in the MVC style, but then again many Python applications tend to have the exact problem I've described above.)</p>
"
150296,"<p>In addition to overriding <code>save</code> to provide the generated value you want, you can also use the <a href=""http://docs.djangoproject.com/en/dev/ref/contrib/admin/#exclude"" rel=""nofollow"">exclude</a> option in your <code>ModelAdmin</code> class to prevent the field from being displayed in the admin:</p>

<pre><code>class EntryAdmin(admin.ModelAdmin):
    exclude = ('slug',)
</code></pre>
"
150411,"<p>If you're going to do a lot of bit manipulation ( and you care much more about readability rather than performance for your application ) then you may want to create an integer wrapper to enable slicing like in Verilog or VHDL:</p>

<pre>
 import math
 class BitVector:
     def __init__(self,val):
         self._val = val

     def __setslice__(self,highIndx,lowIndx,newVal):
         assert math.ceil(math.log(newVal)/math.log(2)) &lt;= (highIndx-lowIndx+1)

         # clear out bit slice
         clean_mask = (2**(highIndx+1)-1)^(2**(lowIndx)-1)

         self._val = self._val ^ (self._val & clean_mask)
         # set new value
         self._val = self._val | (newVal&lt;&lt;lowIndx)

     def __getslice__(self,highIndx,lowIndx):
         return (self._val&gt;&gt;lowIndx)&(2L**(highIndx-lowIndx+1)-1)

 b = BitVector(0)
 b[3:0]   = 0xD
 b[7:4]   = 0xE
 b[11:8]  = 0xA
 b[15:12] = 0xD

 for i in xrange(0,16,4):
     print '%X'%b[i+3:i]
</pre>     

<p>Outputs:</p>

<pre>
 D
 E
 A
 D
</pre>
"
80864,"<p>Again, my be overkill, but the <a href=""http://ose.sf.net"" rel=""nofollow"">OSE</a> library allows thins kind of thing.</p>
"
81051,"<p>If you call</p>

<pre><code>import os
os._exit(0)
</code></pre>

<p>the exit handlers will not be called, yours or those registered by other modules in the application.</p>
"
81106,"<p>If you aren't looking to use twisted there was a great guide I used a while back. Here is the <a href=""http://www.nightmare.com/pythonwin/async_sockets.html"" rel=""nofollow"">link to it</a>.</p>
"
70895,"<p>I would suspect the permissions on the library. Can you do a strace or similar to find out the filenames it's looking for, and then check the permissions on them?</p>
"
70915,"<p>Treat the following as pseudo-code..</p>

<pre><code>try:
    from hashlib import sha as hasher
except ImportError:
    # You could probably exclude the try/except bit,
    # but older Python distros dont have hashlib.
    try:
        import sha as hasher
    except ImportError:
        import md5 as hasher


def hash_password(password):
    """"""Returns the hashed version of a string
    """"""
    return hasher.new( str(password) ).hexdigest()

def load_auth_file(path):
    """"""Loads a comma-seperated file.
    Important: make sure the username
    doesn't contain any commas!
    """"""
    # Open the file, or return an empty auth list.
    try:
        f = open(path)
    except IOError:
        print ""Warning: auth file not found""
        return {}

    ret = {}
    for line in f.readlines():
        split_line = line.split("","")
        if len(split_line) &gt; 2:
            print ""Warning: Malformed line:""
            print split_line
            continue # skip it..
        else:
            username, password = split_line
            ret[username] = password
        #end if
    #end for
    return ret

def main():
    auth_file = ""/home/blah/.myauth.txt""
    u = raw_input(""Username:"")
    p = raw_input(""Password:"") # getpass is probably better..
    if auth_file.has_key(u.strip()):
        if auth_file[u] == hash_password(p):
            # The hash matches the stored one
            print ""Welcome, sir!""
</code></pre>

<p>Instead of using a comma-separated file, I would recommend using SQLite3 (which could be used for other settings and such.</p>

<p>Also, remember that this isn't very secure - if the application is local, evil users could probably just replace the <code>~/.myauth.txt</code> file.. Local application auth is difficult to do well. You'll have to encrypt any data it reads using the users password, and generally be very careful.</p>
"
215303,"<p>I ran into the same problem when upgrading from Trac 10.4 to 0.11 earlier this year. Something must have changed for this problem to have just suddenly appeared -- an updated Python or Apache installation?</p>

<p>I don't remember all of the permutations I tried to solve this, but I ended up having to use <code>SetEnv PYTHON_EGG_CACHE /.python-eggs</code> and create /.python-eggs with 777 permissions. This might not be the best solution, but it fixed the problem. </p>

<p>I never investigated what the root cause was. As <a href=""http://stackoverflow.com/questions/215267/how-do-you-fix-a-trac-installation-that-begins-giving-errors-relating-to-python#215298"">agnul</a> says, this may have been fixed in a subsequent Trac release.</p>
"
215479,"<p>You may also consider using the library from <a href=""http://openxmldeveloper.org/default.aspx"" rel=""nofollow"">OpenXMLDeveloper.org</a></p>
"
73325,"<p>Strange - No one mentioned GEdit (Gnome) or OpenKomodo (Windows, Mac, GNU/Linux...). Both of them are great!</p>

<p>OpenKomodo especially deals with tabs and spaces very well. And - it's free. Whee! When I need a lighter weight thingy, I just use GEdit.</p>

<p>Download OpenKomodo here - 
<a href=""http://www.openkomodo.com/"" rel=""nofollow"">http://www.openkomodo.com/</a></p>
"
301706,"<p>If you are just adding tables, and not modifying any of the tables which have the existing data in it, you can simply add the new sqlAlchemy table definitions to model.py, and run:</p>

<pre><code>tg-admin sql create
</code></pre>

<p>This will not overwrite any of your existing tables.</p>

<p>For schema migration, you might take a look at <a href=""http://code.google.com/p/sqlalchemy-migrate/"" rel=""nofollow"">http://code.google.com/p/sqlalchemy-migrate/</a> although I haven't used it yet myself.</p>

<p>Always take a backup of the production database before migration activity.</p>
"
301953,"<p>Besides the fact that you may be missing a cookie, there might be some field(s) in the form that you are not POSTing to the webserver. The best way would be to capture the actual POST from a web browser. You can use <a href=""https://addons.mozilla.org/en-US/firefox/addon/3829"" rel=""nofollow"">LiveHTTPHeaders</a>  or <a href=""http://www.wireshark.org/"" rel=""nofollow"">WireShark</a> to snoop the traffic and mimic the same behaviour in your script.</p>
"
302035,"<p><a href=""http://funkload.nuxeo.org/"" rel=""nofollow"">Funkload</a> is a great web app testing tool also.  It wraps webunit to handle the browser emulation, then gives you both functional and load testing features on top.</p>
"
302298,"<blockquote>
  <p>If you consider Qt, consider also throwing in kdelibs dependency, 
  then you'll have marble widget, which handles maps in neat way.</p>
</blockquote>

<p>Thanks for advertizing Marble. But you are incorrect: </p>

<p>The Marble Widget doesn't depend on kdelibs at all. It just depends on Qt (>=4.3).</p>

<p>Additionally Marble also has just received Python bindings.</p>

<p>I think that the given problem can be solved using Marble. Would just take a few days of work at max. If you have questions about Marble, feel free to ask us on our mailing list or IRC.</p>

<p>Best Regards,
Torsten Rahn  </p>
"
302359,"<p>It sounds like what you really want is a plugin architecture.  </p>

<p>You should have a look at the  <a href=""http://peak.telecommunity.com/DevCenter/setuptools#extensible-applications-and-frameworks"" rel=""nofollow"">entry points</a> functionality provided by the setuptools package.  It offers a great way to discover plugins that are loaded for your application.</p>
"
72126,"<p>Well the doc-string is stored in <code>__doc__</code> so it wouldn't be too hard to re-assign it based on the doc-string of <code>_execute</code> after the fact.</p>

<p>Basically:</p>

<p><code></p>

<pre>
class MyClass(object):
    def execute(self):
        '''original doc-string'''
        self._execute()

class SubClass(MyClass):
    def _execute(self):
        '''sub-class doc-string'''
        pass

    # re-assign doc-string of execute
    def execute(self,*args,**kw):
        return MyClass.execute(*args,**kw)
    execute.__doc__=_execute.__doc__

</pre>

<p></code></p>

<p>Execute has to be re-declared to that the doc string gets attached to the version of execute for the <code>SubClass</code> and not for <code>MyClass</code> (which would otherwise interfere with other sub-classes).</p>

<p>That's not a very tidy way of doing it, but from the POV of the user of a library it should give the desired result.  You could then wrap this up in a meta-class to make it easier for people who are sub-classing.</p>
"
72498,"<p>If I recall correctly in that test framework the setUp method is run before each test</p>
"
72785,"<p>I agree that the simplest, most Pythonic way of approaching this is to simply redefine execute in your subclasses and have it call the execute method of the base class:</p>

<pre><code>class Sub(Base):
    def execute(self):
        """"""New docstring goes here""""""
        return Base.execute(self)
</code></pre>

<p>This is very little code to accomplish what you want; the only downside is that you must repeat this code in every subclass that extends Base.  However, this is a small price to pay for the behavior you want.</p>

<p>If you want a sloppy and verbose way of making sure that the docstring for execute is dynamically generated, you can use the descriptor protocol, which would be significantly less code than the other proposals here.  This is annoying because you can't just set a descriptor on an existing function, which means that execute must be written as a separate class with a <code>__call__</code> method.</p>

<p>Here's the code to do this, but keep in mind that my above example is much simpler and more Pythonic:</p>

<pre><code>class Executor(object):
    __doc__ = property(lambda self: self.inst._execute.__doc__)

    def __call__(self):
        return self.inst._execute()

class Base(object):
    execute = Executor()

class Sub(Base):
    def __init__(self):
        self.execute.inst = self

    def _execute(self):
        """"""Actually does something!""""""
        return ""Hello World!""

spam = Sub()
print spam.execute.__doc__  # prints ""Actually does something!""
help(spam)                  # the execute method says ""Actually does something!""
</code></pre>
"
181832,"<pre><code>from xml.dom import minidom

doc= minidom.parse('./your/file.xml')
print doc.toxml()
</code></pre>

<p>The only problem is that it do not download feeds from the internet.</p>
"
181903,"<p>As a method of making a feed, how about <a href=""http://www.dalkescientific.com/Python/PyRSS2Gen.html"" rel=""nofollow"">PyRSS2Gen</a>? :)</p>

<p>I've not played with FeedParser, but have you tried just doing str(yourFeedParserObject)? I've often been suprised by various modules that have <strong>str</strong> methods to just output the object as text.</p>

<p><strong>[Edit]</strong> Just tried the str() method and it doesn't work on this one. Worth a shot though ;-)</p>
"
343701,"<p>A hackish way, but you can try to put the logging code inside an admin.py. It is supposed to be imported only once.</p>

<p>Alternatively; can you first check if <code>MyApp.views.scans</code> log exists? If it exists (maybe an error is raised) you can simply skip creation (and therefore not add the handler again). A cleaner way but I haven't tried this though.</p>

<p>Also there must be a more appropriate place to put this code (<code>__init__.py</code>?). <code>settings.py</code> is for settings.</p>
"
221092,"<p>I've been able to compile and run Enso by using /LD as a compiler flag.  This links dynamically to the MS Visual C++ runtime, and seems to allow you to get away without a manifest.</p>

<p>If you're using SCons, see the diff file here: <a href=""http://paste2.org/p/69732"" rel=""nofollow"">http://paste2.org/p/69732</a></p>
"
294557,"<p>I have a code generation system and one of the best choices I have taken with it is to put much of the resultant program in non generated code, e.g. a library/runtime. Using templates works well also. Complex template systems may be hard to work with by hand, but your not working with them by hand so leverage that. </p>
"
294581,"<p>It would actually be just recursing straight down, except I need to pull all function declarations out and put them elsewhere, and the fact that for all function calls I need to build a vector of all of the arguments, and then pass that to the function, since C++ doesn't have a syntax for vectors.</p>
"
294656,"<p>Is there any way you can just use a generic view and go straight to template for your index page?:</p>

<pre><code>urlpatterns += patterns('django.views.generic.simple',
    (r'', 'direct_to_template', {'template': 'index.html'}),
)
</code></pre>
"
219233,"<p>I had the same problem.  In my case the directory wasn't there so I created and chown'ed it over to the apache user (apache on my centos 4.3 box).  Then made sure it had read-write permissions on the directory.  You could get by with giving rw rights to the directory if the group that owns the directory contains the apache user.  A simple ps aux|grep httpd should show you what account your server is running under if you don't know it.  If you have trouble finding the directory remember the -a on the ls command since it is a ""hidden"" directory.</p>
"
219642,"<p>I found <a href=""http://www.mail-archive.com/dev@tomcat.apache.org/msg22589.html"" rel=""nofollow"">this article</a> on backlog on tomcat / java which gives an interesting insight in the backlog:</p>

<blockquote>
  <p>for example, if all threads are busy
  in java handling requests, the kernel
  will handle SYN and TCP handshakes
  until its backlog is full. when the
  backlog is full, it will simply drop
  future SYN requests. it will not send
  a RST, ie causing ""Connection refused""
  on the client, instead the client will
  assume the package was lost and
  retransmit the SYN. hopefully, the
  backlog queue will have cleared up by
  then.</p>
</blockquote>

<p>As I interpret it, by asking ab to create more simultaneous connection than your
socket is configured to handle packets get dropped, not refused, and I do not know
how ab handles that. It may be that it retransmits the SYN, but possibly after waiting
a while. This may even be specced somewhere (TCP protocol?).</p>

<p>As said, I do not know but I hope this hints at the cause. </p>

<p>Good luck!</p>
"
219676,"<p>it looks like you're not really getting concurrency.  apparently, when you do socket.accept(), the main thread doesn't go immediately back to waiting for the next connection.  maybe your connection-handling thread is only python code, so you're getting sequentialized by the SIL (single interpreder lock).</p>

<p>if there's not heavy communications between threads, better use a multi-process scheme (with a pool of pre-spawned processes, of course)</p>
"
293685,"<p>General idea is:</p>

<pre><code>inpacket = False
packets = []
for line in open(""logfile""):
  if inpacket:
    content += line
    if line in (""\n"", """"): # empty line
      inpacket = False
      packets.append(content)
  elif '### SERVER' in line:
    inpacket = True
    content = line
# put here packets.append on eof if needed
</code></pre>
"
293827,"<p>This works well with an explicit iterator, also.  That way, nested loops can update the iterator's state by consuming lines.</p>

<pre><code>fileIter= iter(theFile)
for x in fileIter:
    if ""### SERVER"" in x:
        block = [x]
        for y in fileIter:
            if len(y.strip()) == 0: # empty line
                break
            block.append(y)
        print block # Or whatever
    # elif some other pattern:
</code></pre>

<p>This has the pleasant property of finding blocks that are at the tail end of the file, and don't have a blank line terminating them.</p>

<p>Also, this is quite easy to generalize, since there's no explicit state-change variables, you just go into another loop to soak up lines in other kinds of blocks.</p>
"
293828,"<p>best way - use generators
read presentation <a href=""http://www.dabeaz.com/generators/"" rel=""nofollow"">Generator Tricks for Systems Programmers</a> 
This best that I saw about parsing log ;)</p>
"
81107,"<p>In addition to calling os._exit() to avoid the registered exit handler you also need to catch the unhandled exception:</p>

<pre><code>import atexit
import os

def helloworld():
    print ""Hello World!""

atexit.register(helloworld)    

try:
    raise Exception(""Good bye cruel world!"")

except Exception, e:
    print 'caught unhandled exception', str(e)

    os._exit(1)
</code></pre>
"
157494,"<p>You can use something like this:</p>

<pre><code>dic = {'aaa':1, 'aab':3, 'aaf':3, 'aac':2, 'aad':2, 'aae':4}

def sort_compare(a, b):
	c = cmp(dic[b], dic[a])
	if c != 0:
		return c
	return cmp(a, b)

for k in sorted(dic.keys(), cmp=sort_compare):
	print k, dic[k]
</code></pre>

<p>Don't know how pythonic it is however :)</p>
"
302455,"<p>Well, let's see.  The <em>second</em> throw (which will sometimes be added or subtracted to the first roll) has a nice easily predictable bell curve around 31.  The first roll, of course, is the problem.</p>

<p>For the first roll, we have 900 possible combinations. </p>

<ul>
<li>50 combinations result in adding the second roll.</li>
<li>25 combinations result in subtracting the second roll.</li>
<li>Leaving 825 combinations which match the bell curve of the second roll.</li>
</ul>

<p>The subtracting set (pre-subtraction) will form a bell curve in the range (27..35).
The lower half of the adding set will form a bell curve in the range (2..10), while the upper half will form a bell curve in the range (52...60)</p>

<p>My probablity is a bit rusty, so I can't figure the exact values for you, but it should be clear that these lead to predictable values.</p>
"
303086,"<p>Well I finally found an answer that achieved what I wanted-I did not want to learn a new language-Python is hard enough given my lack or experience</p>

<pre><code>def OnDelete(self, event):
    assert self.current, ""invalid delete operation""
    try:
        os.remove(os.path.join(self.cwd, self.current))
</code></pre>
"
303448,"<p>Django uses UTF-8, unless you define DEFAULT_CHARSET being something other. Be aware that defining other charset will require you to encode all your templates in this charset and this charset will pop from here to there, like email encoding, in sitemaps and feeds and so on. So, IMO, the best you can do is to go UTF-8, this will save you much headaches with Django (internally it's all unicode, the problems are on the borders of your app, like templates and input).</p>
"
70832,"<p>If you want simple, then use a dictionary where the keys are the usernames and the values are the passwords (encrypted with something like SHA256).  <a href=""http://docs.python.org/lib/module-pickle.html"" rel=""nofollow"">Pickle</a> it to/from disk (as this is a desktop application, I'm assuming the overhead of keeping it in memory will be negligible).</p>

<p>For example:</p>

<pre><code>import pickle
import hashlib

# Load from disk
pwd_file = ""mypasswords""
if os.path.exists(pwd_file):
    pwds = pickle.load(open(pwd_file, ""rb""))
else:
    pwds = {}

# Save to disk
pickle.dump(pwds, open(pwd_file, ""wb""))

# Add password
pwds[username] = hashlib.sha256(password).hexdigest()

# Check password
if pwds[username] = hashlib.sha256(password).hexdigest():
   print ""Good""
else:
   print ""No match""
</code></pre>

<p>Note that this stores the passwords as a <a href=""http://docs.python.org/lib/module-hashlib.html"" rel=""nofollow"">hash</a> - so they are essentially unrecoverable.  If you lose your password, you'd get allocated a new one, not get the old one back.</p>
"
70145,"<p>A good choice: <a href=""http://advosys.ca/viewpoints/2006/08/http-digest-authentication/"" rel=""nofollow"">HTTP Digest authentication</a></p>

<p>Harder to pull off well, but an option: <a href=""http://blog.paranoidferret.com/index.php/2007/07/22/secure-authentication-without-ssl-using-javascript/"" rel=""nofollow"">Client-side hashing with Javascript</a></p>
"
70778,"<p>Just wanted to point out that you can still achieve fine-grained testing while verifying the results: you can test individual chunks of code by nesting them inside some setup and verification code:</p>

<pre><code>int x = 0;
GENERATED_CODE
assert(x == 100);
</code></pre>

<p>Provided you have your generated code assembled from smaller chunks, and the chunks do not change frequently, you can exercise more conditions and test a little better, and hopefully avoid having all your tests break when you change specifics of one chunk.</p>
"
305104,"<p>Let's begin from the beginning.</p>

<p>""declare a function in a class, use it during its declaration, and also use it later from within the class""</p>

<p>Sorry.  Can't be done.  ""In a class"" contradicts ""used during declaration"".</p>

<ul>
<li>In a class means created as part of the declaration.</li>
<li>Used during declaration means it exists outside the class.  Often as a meta class.  However, there are other ways.</li>
</ul>

<p>It's not clear what C.w and C.v are supposed to be.  Are they just strings?  If so, an external function <code>f</code> is the best solution.  The ""not clutter the namespace"" is a bit specious.  After all, you want to use it again.</p>

<p>It's in the same module as C.  That's why Python has modules.  It binds the function and class together.</p>

<pre><code>import myCmod

myCmod.C.w
myCmod.C.v
myCmod.f(42)
</code></pre>

<p>If w and v aren't simple strings, there's a really good solution that gives a lot of flexibility.</p>

<p>Generally, for class-level (""static"") variables like this, we can use other classes.  It's not possible to completely achieve the desired API, but this is close.</p>

<pre><code>&gt;&gt;&gt; class F(object):
    def __init__( self, num ):
    	self.value= num
    	self.format= ""&lt;%d&gt;"" % ( num, )

&gt;&gt;&gt; class C(object):
    w= F(42)
    v= F(9)

&gt;&gt;&gt; C.w
&lt;__main__.F object at 0x00C58C30&gt;
&gt;&gt;&gt; C.w.format
'&lt;42&gt;'
&gt;&gt;&gt; C.v.format
'&lt;9&gt;'
</code></pre>

<p>The advantage of this is that F is a proper, first-class thing that can be extended.  Not a ""hidden"" thing that we're trying to avoid exposing.  It's a fact of life, so we might as well follow the Open/Closed principle and make it open to extension.</p>
"
69064,"<p>Check the options of your editor or find an editor/IDE that allows you to convert TABs to spaces. I usually set the options of my editor to substitute the TAB character with 4 spaces, and I never run into any problems.</p>
"
158250,"<p>Inspired by the OO-stab above, I had to try my hands on one as well (although this is way overkill for the problem I'm trying to solve :)</p>

<pre><code>class Stat(object):
  def update(self, n):
    raise NotImplementedError

  def get(self):
    raise NotImplementedError


class TwoStat(Stat):
  def __init__(self):
    self._twos = 0

  def update(self, n):
    if n % 2 == 0: self._twos += 1

  def get(self):
    return self._twos


class ThreeStat(Stat):
  def __init__(self):
    self._threes = 0

  def update(self, n):
    if n % 3 == 0: self._threes += 1

  def get(self):
    return self._threes


class StatCalculator(object):
  def __init__(self, stats):
    self._stats = stats

  def calculate(self, r):
    for v in r:
      for stat in self._stats:
        stat.update(v)
    return tuple(stat.get() for stat in self._stats)


s = StatCalculator([TwoStat(), ThreeStat()])

r = xrange(1, 10)
print s.calculate(r)
</code></pre>
"
70003,"<p>With a bit of JavaScript, you could have the client hash the entered password and a server-generated nonce, and use that in an HTTP GET.</p>
"
157099,"<p>Not as terse as you are looking for, but more efficient, it actually works with any iterable, not just iterables you can loop over multiple times, and you can expand the things to check for without complicating it further:</p>

<pre><code>r = xrange(1, 10)

counts = {
   2: 0,
   3: 0,
}

for v in r:
    for q in counts:
        if not v % q:
            counts[q] += 1
        # Or, more obscure:
        #counts[q] += not v % q

for q in counts:
    print ""%s's: %s"" % (q, counts[q])
</code></pre>
"
157181,"<pre><code>from itertools import groupby
from collections import defaultdict

def multiples(v):
    return 2 if v%2==0 else 3 if v%3==0 else None
d = defaultdict(list)

for k, values in groupby(range(10), multiples):
    if k is not None:
        d[k].extend(values)
</code></pre>
"
81489,"<p>There's no flat file storing in Google App Engine.  Everything has to go in to the <a href=""http://code.google.com/appengine/docs/datastore/"" rel=""nofollow"">Datastore</a> which is a bit like a relational database but not quite.</p>

<p>You could store the files as <a href=""http://code.google.com/appengine/docs/datastore/typesandpropertyclasses.html#TextProperty"" rel=""nofollow"">TextProperty</a> or <a href=""http://code.google.com/appengine/docs/datastore/typesandpropertyclasses.html#BlobProperty"" rel=""nofollow"">BlobProperty</a> attributes.</p>

<p>There is a 1MB limit on DataStore entries which may or may not be a problem.</p>
"
151084,"<blockquote>
  <p>Python is pretty liberal in allowing functions, functors, objects to be passed to functions and methods, whereas I suspect the same is not true of say C or Fortran.</p>
</blockquote>

<p>In C you cannot pass a function as an argument to a function but you can pass a function pointer which is just as good a function.</p>

<p>I don't know how much that would help when you are trying to integrate C and Python code but I just wanted to clear up one misconception.</p>
"
220536,"<p>If you create a lock file and put the pid in it, you can check your process id against it and tell if you crashed, no?</p>

<p>I haven't done this personally, so take with appropriate amounts of salt. :p</p>
"
220539,"<p>Can you use the 'pidof' utility?  If your app is running, pidof will write the Process ID of your app to stdout.  If not, it will print a newline (LF) and return an error code.</p>

<p>Example (from bash, for simplicity):</p>

<pre><code>linux# pidof myapp
8947
linux# pidof nonexistent_app

linux#
</code></pre>
"
220541,"<p>By far the most common method is to drop a file into /var/run/ called [application].pid which contains only the PID of the running process, or parent process.
As an alternative, you can create a named pipe in the same directory to be able to send messages to the active process, e.g. to open a new file.</p>
"
85113,"<p><a href=""http://www.python.org/doc/2.5/lib/module-readline.html"" rel=""nofollow"">'readline' module</a> supposedly provides Emacs like key bindings and even functionality. However, it is not available on Windows but on Unix. Therefore, this might be a viable solution if you are not using Windows.</p>

<pre><code>import readline
</code></pre>

<p>Since I am running IDLE on Windows it is unfortunately not an option for me.</p>
"
292749,"<p>Read Jeff Friedl's ""Mastering Regular Expressions"" book.</p>

<p>As written:</p>

<pre><code>&lt;a\s*href=['|""](http:\/\/(.*?)\S['|""]&gt;
</code></pre>

<p>You have unbalanced parentheses in the expression.  Maybe the trouble is that the first match is being treated as ""read to end of regex"".  Also, why would you not want the last non-space character of the URL?</p>

<p>The .*? (lazy greedy) operator is interesting.  I must say, though, that I'd be more inclined to write:</p>

<pre><code>&lt;a\s+href=['|""]http://([^'""&gt;&lt;]+)\1&gt;
</code></pre>

<p>This distinguishes between ""&lt;ahref"" (a non-existent HTML tag) and ""&lt;a href"" (a valid HTML tag).  It doesn't capture the 'http://' prefix.  I'm not certain whether you have to escape the slashes -- in Perl, where I mainly work, I wouldn't need to.  The capturing part uses the greedy match, but only on characters that might semi-legitimately appear in the URL.  Specifically, it excludes both quotes and the end-tag (and, for good measure, the begin-tag too).  If you really want the 'http://' prefix, shift the capturing parenthesis appropriately.</p>
"
220955,"<p>You probably need to install the VC++ runtime redistributables. The links to them are <a href=""http://stackoverflow.com/questions/99479/visual-cstudio-application-configuration-incorrect#100310"">here</a>.</p>
"
291431,"<p>There's also a module called WConIO that does much the same thing.  Unfortunately the author will probably not be able to build a Python 2.6 version any time soon.</p>
"
291579,"<p>In a try/except block you can except NameError and try setting NameError.lineno, though I'm not exactly sure if or how this works, but it's the best I've found thusfar.</p>

<pre><code>try:
    somecode
except NameError
    NameError.lineno = [1,4]
</code></pre>

<p>You'll have to figure out where the statement begins and ends yourself somehow as well as which statement is raising the error.</p>

<p>Hope this helps</p>
"
292848,"<p>Or, a python version of wc and split:</p>

<pre><code>lines = 0
for l in open(filename): lines += 1
</code></pre>

<p>Then some code to read the first lines/3 into one file, the next lines/3 into another , etc.</p>
"
82868,"<p>If you try this, what happens?</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>print myresolver.query('sources.org', 'ANY', 'RRSIG')</p>
    </blockquote>
  </blockquote>
</blockquote>
"
83800,"<p>The <a href=""http://support.microsoft.com/kb/311272"" rel=""nofollow"">devcon</a> tool can control the NIC, but not the interface directly. It's a command-line version of the Device Manager applet.</p>

<pre><code>devcon disable (id or portion of name)
devcon enable (id or portion of name)
</code></pre>
"
83890,"<p>this is VB.Net</p>

<pre><code>Dim objectQuery As New ObjectQuery(""SELECT * FROM Win32_NetworkAdapter WHERE NetConnectionId IS NOT NULL"")
         Dim searcher As New ManagementObjectSearcher(scope, objectQuery)
         Dim os As ManagementObject
         Dim moColl As ManagementObjectCollection = searcher.Get()
         Dim _list As String = """"
         For Each os In moColl
             Console.WriteLine(os(""NetConnectionId""))
         Next os
</code></pre>

<p>That will get all the interfaces on you computer. Then you can do netsh to disable it.</p>

<blockquote>
  <p>netsh interface set interface
   DISABLED</p>
</blockquote>
"
84073,"<p>You may need to use WMI. This may serve as a good starting point:
<a href=""http://msdn.microsoft.com/en-us/library/aa394595.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/aa394595.aspx</a></p>
"
293485,"<p>I'm curious as to why you would want to do such a thing.  Chances are, you should just let garbage collection do its job.  In python, garbage collection is pretty deterministic.  So you don't really have to worry as much about just leaving objects laying around in memory like you would in other languages (not to say that refcounting doesn't have disadvantages).</p>

<p>Although one thing that you should consider is a wrapper around any objects or resources you may get rid of later.</p>

<pre><code>class foo(object):
    def __init__(self):
        self.some_big_object = some_resource

    def killBigObject(self):
        del some_big_object
</code></pre>

<p>In response to <a href=""http://stackoverflow.com/questions/293431/python-object-deleting-itself#293497"">Null's addendum</a>:</p>

<p>Unfortunately, I don't believe there's a way to do what you want to do the way you want to do it.  Here's one way that you may wish to consider:</p>

<pre><code>&gt;&gt;&gt; class manager(object):
...     def __init__(self):
...             self.lookup = {}
...     def addItem(self, name, item):
...             self.lookup[name] = item
...             item.setLookup(self.lookup)
&gt;&gt;&gt; class Item(object):
...     def __init__(self, name):
...             self.name = name
...     def setLookup(self, lookup):
...             self.lookup = lookup
...     def deleteSelf(self):
...             del self.lookup[self.name]
&gt;&gt;&gt; man = manager()
&gt;&gt;&gt; item = Item(""foo"")
&gt;&gt;&gt; man.addItem(""foo"", item)
&gt;&gt;&gt; man.lookup
 {'foo': &lt;__main__.Item object at 0x81b50&gt;}
&gt;&gt;&gt; item.deleteSelf()
&gt;&gt;&gt; man.lookup
 {}
</code></pre>

<p>It's a little bit messy, but that should give you the idea.  Essentially, I don't think that tying an item's existence in the game to whether or not it's allocated in memory is a good idea.  This is because the conditions for the item to be garbage collected are probably going to be different than what the conditions are for the item in the game.  This way, you don't have to worry so much about that.</p>
"
149678,"<p>Take a look at pyqt4.  It has webkit integration.  I was looking into this myself but haven't really had time to dig into the API.</p>
"
149688,"<p>Poulsenj is right the <a href=""http://es.cohesiveft.com/"" rel=""nofollow"">Elastic Server On-Demand</a> (<a href=""http://es.cohesiveft.com/site/django"" rel=""nofollow"">Django Elastic Server Site</a>) is a great place to configure and download a free custom Django VMware image in minutes.</p>

<p>The Elastic Server platform lets you assemble custom servers by choosing components from a library of popular software stacks. Once assembled, these custom application stacks can be configured to a variety of virtualization and cloud-ready formats, downloaded and deployed in real-time.</p>
"
85641,"<p>You would want to parse the output of 'arp', but the kernel ARP cache will only contain those IP address(es) if those hosts have communicated with the host where the Python script is running.</p>

<p>ifconfig can be used to display the MAC addresses of local interfaces, but not those on the LAN.</p>
"
305997,"<p>You're asking the wrong question. You don't try to detect types in Python; you detect behavior.</p>

<ol>
<li>Write another function that handles a single value. (let's call it _use_single_val).</li>
<li>Write one function that handles a sequence parameter. (let's call it _use_sequence).</li>
<li>Write a third parent function that calls the two above. (call it use_seq_or_val). Surround each call with an exception handler to catch an invalid parameter (i.e. not single value or sequence).</li>
<li>Write unit tests to pass correct &amp; incorrect parameters to the parent function to make sure it catches the exceptions properly.</li>
</ol>

<pre><code>
    def _use_single_val(v):
        print v + 1  # this will fail if v is not a value type

    def _use_sequence(s):
        print s[0]   # this will fail if s is not indexable

    def use_seq_or_val(item):    
        try:
            _use_single_val(item)
        except TypeError:
            pass

        try:
            _use_sequence(item)
        except TypeError:
            pass

        raise TypeError, ""item not a single value or sequence""
</code></pre>

<p>EDIT: Revised to handle the ""sequence or single value"" asked about in the question. </p>
"
157620,"<p>The idea here is to use reduction to avoid repeated iterations. Also, this does not create any extra data structures, if memory is an issue for you. You start with a dictionary with your counters (<code>{'div2': 0, 'div3': 0}</code>) and increment them along the iteration.</p>

<pre><code>def increment_stats(stats, n):
    if n % 2 == 0: stats['div2'] += 1
    if n % 3 == 0: stats['div3'] += 1
    return stats

r = xrange(1, 10)
stats = reduce(increment_stats, r, {'div2': 0, 'div3': 0})
print stats
</code></pre>

<p>If you want to count anything more complicated than divisors, it would be appropriate to use a more object-oriented approach (with the same advantages), encapsulating the logic for stats extraction.</p>

<pre><code>class Stats:

    def __init__(self, div2=0, div3=0):
        self.div2 = div2
        self.div3 = div3

    def increment(self, n):
        if n % 2 == 0: self.div2 += 1
        if n % 3 == 0: self.div3 += 1
        return self

    def __repr__(self):
        return 'Stats(%d, %d)' % (self.div2, self.div3)

r = xrange(1, 10)
stats = reduce(lambda stats, n: stats.increment(n), r, Stats())
print stats
</code></pre>

<p>Please point out any mistakes.</p>

<p>@<a href=""#158250"" rel=""nofollow"">Henrik</a>: I think the first approach is less maintainable since you have to control initialization of the dictionary in one place and update in another, as well as having to use strings to refer to each stat (instead of having attributes). And I do not think OO is overkill in this case, for you said the predicates and objects will be complex in your application. In fact if the predicates were really simple, I wouldn't even bother to use a dictionary, a single fixed size list would be just fine. Cheers :)</p>
"
214855,"<p>If your version of sqlite is in sys.path <em>before</em> the systems version it will use that. So you can either put it in the current directory or change the <code>PYTHONPATH</code> environment variable to do that.</p>
"
214902,"<p>Ten years ago you couldn't, and I doubt that's changed.  However, it wasn't that hard to modify the syntax back then if you were prepared to recompile python, and I doubt that's changed, either.</p>
"
215001,"<p>Don't you have the ""Run script"" menu in your interactive Python shell? </p>
"
221594,"<p>Answers to this <a href=""http://stackoverflow.com/questions/201837/do-you-put-copyright-notices-in-your-proprietary-code"" rel=""nofollow"" title=""Do you put copyright notices in your proprietary code?"">question</a>, particularly @<a href=""http://stackoverflow.com/questions/201837/do-you-put-copyright-notices-in-your-proprietary-code#201899"">Ben Combee's</a> answer, should be helpful.</p>
"
221696,"<p>You need to make your question more precise.  Do you know the values you want to trim ahead of time?</p>

<p>Assuming you do, I would probably search for the matching sections using <code>subprocess</code> to run ""<code>fgrep -o -b &lt;search string&gt;</code>"" and then change the relevant sections of the file using the python <code>file</code> object's <code>seek</code>, <code>read</code> and <code>write</code> methods.</p>
"
149176,"<p>This <a href=""http://www.djangosnippets.org/snippets/937/"" rel=""nofollow"">Django Snippet</a> does what you want by defining a custom Read-Only Widget.  So you define a custom editor for the field which in fact doesn't allow any editing.</p>
"
149670,"<p>You can check out <a href=""http://www.pygtk.org/"" rel=""nofollow"">PyGTK</a>, which will allow you to create desktop widgets, but they won't be managed by OSX's Dashboard.  If you'd like to <a href=""http://developer.apple.com/macosx/dashboard.html"" rel=""nofollow"">develop an OSX widget</a>, you'll want to stick with HTML/CSS/JavaScript.</p>
"
148052,"<p>In other languages I'd use a switch/select statement to get the job done. <a href=""http://simonwillison.net/2004/May/7/switch/"" rel=""nofollow"">You can do that in python too</a>.</p>
"
289828,"<p>Check out source for <a href=""http://search.cpan.org/src/LHOWARD/Number-Spell-0.04/Spell.pm"" rel=""nofollow"">Number::Spell</a> Perl module. It is short and can be easily ported to Python (if it has not already been done).</p>
"
67769,"<p>An 'app' could be many different things, it all really comes down to taste. For example, let's say you are building a blog. Your app could be the entire blog, or you could have an 'admin' app, a 'site' app for all of the public views, an 'rss' app, a 'services' app so developers can interface with the blog in their own ways, etc.</p>

<p>I personally would make the blog itself the app, and break out the functionality within it. The blog could then be reused rather easily in other websites.</p>

<p>The nice thing about Django is that it will recognize any models.py file within any level of your directory tree as a file containing Django models. So breaking your functionality out into smaller 'sub apps' within an 'app' itself won't make anything more difficult.</p>
"
159341,"<p>Depending on what your dict contains, you may be interested in the 'shelve' or 'anydbm' modules. They give you dict-like interfaces (just strings as keys and items for 'anydbm', and strings as keys and any python object as item for 'shelve') but the data is actually in a DBM file (gdbm, ndbm, dbhash, bsddb, depending on what's available on the platform.) You probably still want to share the actual database between classes as you are asking for, but it would avoid the parsing-the-textfile step as well as the keeping-it-all-in-memory bit.</p>
"
214428,"<p>I've done a decent amount of scripting in both Linux/Unix and Windows environments, in Python, Perl, batch files, Bash, etc. My advice is that if it's possible, install Cygwin and use Bash (it sounds from your description like installing a scripting language or env isn't a problem?). You'll be more comfortable with that since the transition is minimal.</p>

<p>If that's not an option, then here's my take. Batch files are very kludgy and limited, but make a lot of sense for simple tasks like 'copy some files' or 'restart this service'. Python will be cleaner, easier to maintain, and much more powerful. However, the downside is that either you end up calling external applications from Python with subprocess, popen or similar. Otherwise, you end up writing a bunch more code to do things that are comparatively simple in batch files, like copying a folder full of files. A lot of this depends on what your scripts are doing. Text/string processing is going to be much cleaner in Python, for example.</p>

<p>Lastly, it's probably not an attractive alternative, but you might also  consider VBScript as an alternative. I don't enjoy working with it as a language personally, but if portability is any kind of concern then it wins out by virtue of being available out of the box in any copy of Windows. Because of this I've found myself writing scripts that were unwieldy as batch files in VBScript instead, since I can't usually depend on Python or Perl or Bash being available on Windows.</p>
"
214623,"<p>Yes, I was nuking out the problem. All I needed to do was check for the file and catch the IOError if it didn't exist.</p>

<p>Thanks for all the other answers. They may come in handy in the future.</p>
"
214766,"<p><a href=""http://code.google.com/p/google-app-engine-samples/source/browse/trunk/geochat/json.py?r=55"" rel=""nofollow"">http://code.google.com/p/google-app-engine-samples/source/browse/trunk/geochat/json.py?r=55</a></p>

<p>The encoder method will solve your GQL-to-JSON needs nicely. I'd recommend getting rid of some of the excessive datetime options....out time as an epoch? really?</p>
"
157088,"<p>I would definitely be looking at a <a href=""http://www.numpy.org/"" rel=""nofollow"">numpy</a> array instead of an iterable list if you just have numbers.  You will almost certainly be able to do what you want with some terse arithmetic on the array.</p>
"
305679,"<p>Does the app have any preferences, settings or options that the user can specify? If so, add an option where the user can specify the location of the data, with a default of the current Windows temp directory.</p>

<p>There's always a chance they may not have enough space on the drive with the temp directory, and would need to use a different drive/directory.</p>
"
85707,"<p>Mark Pilgrim describes how to do this on Windows for the current machine with the Netbios module <a href=""http://groups.google.com/group/comp.lang.python/msg/fd2e7437d72c1c21"" rel=""nofollow"">here</a>.  You can get the Netbios module as part of the Win32 package available at python.org.  Unfortunately at the moment I cannot find the docs on the module.</p>
"
291890,"<p>Check out <a href=""http://www.ja-sig.org/products/cas/index.html"" rel=""nofollow"">JA-SIG CAS</a>.  Even if you build your own, you should look at their architecture for ideas on how to implement.</p>
"
292117,"<p>The easiest way? Compile <a href=""http://www.macosxhints.com/article.php?story=2008051406323031"" rel=""nofollow"">this</a> Cocoa app and pass it your mouse movements.</p>

<p>Another way? Import <a href=""http://developer.apple.com/cocoa/pyobjc.html"" rel=""nofollow"">pyobjc</a> to access some of the OSX framework and access the mouse that way. (see the code from the first example for ideas).</p>
"
86022,"<p>Whether you use SMTP or HTTP to send the data, you need to have a username/password in the application to prevent just anyone from sending random data to you.</p>

<p>With that in mind, I suspect it would be easier to use SMTP rather than HTTP to send the data.</p>
"
86069,"<p>Some kind of simple web service would suffice.  You would have to consider security so not just anyone could make requests to your service..</p>

<p>On a larger scale we considered a JMS messaging system.  Put a serialized object of data containing the traceback/error message into a queue and consume it every x minutes generating reports/alerts from that data.</p>
"
290910,"<p>From the django docs is this:</p>

<pre><code>from django import forms
class ContactForm(forms.Form):
    subject = forms.CharField(max_length=100)
    message = forms.CharField()
    sender = forms.EmailField()
    cc_myself = forms.BooleanField(required=False)
</code></pre>

<p>The ""required=False"" should produce the effect you're after.</p>
"
87573,"<p>I would not recommend JScript as that is definitely the road less traveled.
ASP.NET MVC is rapidly maturing, and I think that you could begin a migration to it, simultaneously ramping up on the ASP.NET MVC framework as its finalization comes through.
Another option would be to use something like ASP.NET w/Subsonic or NHibernate.</p>
"
88357,"<p>I think you're thinking of <a href=""http://docs.python.org/lib/module-exceptions.html"" rel=""nofollow"">Exception</a>s. Replace the word Error in your description with Exception and you should be good to go :-)</p>
"
288711,"<p><a href=""http://code.google.com/p/testoob/"" rel=""nofollow"">Testoob</a> has a neat ""<code>--coverage</code>"" command-line option to generate a coverage report.</p>
"
288944,"<p>My solution was to package up one utility that would import the module:
my_util is in site packages</p>

<pre><code>import my_util

foo = myutil.import_script('..//shared1//reusable_foo')
if foo == None:
    sys.exit(1)


def import_script(script_path, log_status = True):
    """"""
    imports a module and returns the handle
    """"""
    lpath = os.path.split(script_path)

    if lpath[1] == '':
        log('Error in script ""%s"" in import_script' % (script_path))
        return None


    #check if path is already in sys.path so we don't repeat
    npath = None
    if lpath[0] == '':
        npath = '.'
    else:
        if lpath[0] not in sys.path:
            npath = lpath[0]

    if npath != None:
        try:
            sys.path.append(npath)
        except:
            if log_status == True:
                log('Error adding path ""%s"" in import_script' % npath)
            return None

    try:   
        mod =  __import__(lpath[1])
    except:
        error_trace,error_reason =  FormatExceptionInfo()
        if log_status == True:
            log('Error importing ""%s"" module in import_script: %s' % (script_path, error_trace + error_reason))
        sys.path.remove(npath)
        return None

    return mod
</code></pre>
"
157974,"<p>There are several ROT13 utilities written in Python on the 'Net -- just google for them. ROT13 encode the string offline, copy it into the source, decode at point of transmission.<br><br>But this is <em>really</em> weak protection...</p>
"
158022,"<p>Building on Thomas Wouters and Ricardo Reyes solutions:</p>

<pre><code>def combine(*cmps):
    """"""Sequence comparisons.""""""
    def comparator(a, b):
        for cmp in cmps:
            result = cmp(a, b):
            if result:
                return result
        return 0
    return comparator

def reverse(cmp):
    """"""Invert a comparison.""""""
    def comparator(a, b):
        return cmp(b, a)
    return comparator

def compare_nth(cmp, n):
    """"""Compare the n'th item from two sequences.""""""
    def comparator(a, b):
        return cmp(a[n], b[n])
    return comparator

rev_val_key_cmp = combine(
        # compare values, decreasing
        reverse(compare_nth(1, cmp)),

        # compare keys, increasing
        compare_nth(0, cmp)
    )

data = { 'keyC':1, 'keyB':2, 'keyA':1 }

for key, value in sorted(data.items(), cmp=rev_val_key_cmp):
    print key, value
</code></pre>
"
68002,"<p>for more advanced python editing consider installing the <a href=""http://eigenclass.org/hiki/simplefold"" rel=""nofollow"">simplefold</a> vim plugin. it allows you do advanced code folding using regular expressions. i use it to fold my class and method definitions for faster editing.</p>
"
65844,"<p>The <a href=""http://docs.python.org/lib/module-shelve.html"" rel=""nofollow"">shelve</a> module appears to work just fine:</p>

<pre><code>
import re
import shelve
a_pattern = ""a.*b""
b_pattern = ""c.*d""
a = re.compile(a_pattern)
b = re.compile(b_pattern)

x = shelve.open('re_cache')
x[a_pattern] = a
x[b_pattern] = b
x.close()

# ...
x = shelve.open('re_cache')
a = x[a_pattern]
b = x[b_pattern]
x.close()

</code></pre>

<p>You can then make a nice wrapper class that automatically handles the caching for you so that it becomes transparent to the user... an exercise left to the reader.</p>
"
306295,"<p>You can also use <code>new.instancemethod()</code> to create an instance method (either bound or unbound) from a function.</p>
"
306465,"<p>A linear scan is slow, but a prefix tree is probably overkill.  Keeping the words sorted and using a binary search is a fast and simple compromise.</p>

<pre><code>import bisect
words = sorted(map(str.strip, open('/usr/share/dict/words')))
def lookup(prefix):
    return words[bisect.bisect_left(words, prefix):bisect.bisect_right(words, prefix+'~')]

&gt;&gt;&gt; lookup('abdicat')
['abdicate', 'abdication', 'abdicative', 'abdicator']
</code></pre>
"
306866,"<p>The panel you are referring to is the GNOME panel. So this is a GNOME question, not a GTK question.</p>

<p>There is not a well-defined concept of ""multi-window application"" in GNOME that I know of. The panel task list is probably build by querying the window manager for the list of windows and grouping the windows by their ""class"" property.</p>

<p>There are also various window manager hints that must be taken into account, for example to ignore panels and other utility windows. In your place, I would look at the source code of the taskbar applet. There is maybe some documentation somewhere that covers the status-quo, but I do know where it would be.</p>
"
85620,"<p>Depends on your platform. If you're using *nix, you can use the 'arp' command to look up the mac address for a given IP (assuming IPv4) address. If that doesn't work, you could ping the address and then look, or if you have access to the raw network (using BPF or some other mechanism), you could send your own ARP packets (but that is probably overkill).</p>
"
221200,"<p><strong>update</strong>
I've downloaded python2.6 and VS C++ express edition 2008 and the problem with the msvcr80.dll is gone ( I assume because Python and VSC++2008xe use msvscr90.dll) </p>

<p>I've compile with /LD and all the changes listed here: <a href=""http://paste2.org/p/69732"" rel=""nofollow"">http://paste2.org/p/69732</a> </p>

<p>And now the problem follows:</p>

<pre><code>INFO:root:Skipping provider enso.platform.osx.
INFO:root:Skipping provider enso.platform.linux.
INFO:root:Added provider enso.platform.win32.
INFO:root:Obtained interface 'input' from provider 'enso.platform.win32'.
Traceback (most recent call last):
  File ""scripts\run_enso.py"", line 23, in &lt;module&gt;
    enso.run()
  File ""C:\oreyes\apps\enso\enso-comunity\enso\__init__.py"", line 41, in run
    from enso.quasimode import Quasimode
  File ""C:\oreyes\apps\enso\enso-comunity\enso\quasimode\__init__.py"", line 62, in &lt;module&gt;
    from enso.quasimode.window import TheQuasimodeWindow
  File ""C:\oreyes\apps\enso\enso-comunity\enso\quasimode\window.py"", line 65, in &lt;module&gt;
    from enso.quasimode.linewindows import TextWindow
  File ""C:\oreyes\apps\enso\enso-comunity\enso\quasimode\linewindows.py"", line 44, in &lt;module&gt;
    from enso import cairo
  File ""C:\oreyes\apps\enso\enso-comunity\enso\cairo.py"", line 3, in &lt;module&gt;
    __cairoImpl = enso.providers.getInterface( ""cairo"" )
  File ""C:\oreyes\apps\enso\enso-comunity\enso\providers.py"", line 137, in getInterface
    interface = provider.provideInterface( name )
  File ""C:\oreyes\apps\enso\enso-comunity\enso\platform\win32\__init__.py"", line 61, in provideInterface
    import enso.platform.win32.cairo
  File ""C:\oreyes\apps\enso\enso-comunity\enso\platform\win32\cairo\__init__.py"", line 1, in &lt;module&gt;
    from _cairo import *
ImportError: No module named _cairo
</code></pre>
"
310717,"<p>Pass the address itself in an environment variable, and just read it with os.getenv().</p>
"
64690,"<p>XMLRPC is very simple to get started with, and at my previous job, we used it extensively for intra-node communication in a distributed system. As long as you keep track of the fact that the None value can't be easily transferred, it's dead easy to work with, and included in Python's standard library. </p>

<p>Run it over https and add a username/password parameter to all calls, and you'll have simple security in place. Not sure about how easy it is to verify server certificate in Python, though.</p>

<p>However, if you are transferring large amounts of data, the coding into XML might become a bottleneck, so using a <a href=""http://sv.wikipedia.org/wiki/REST"" rel=""nofollow"">REST</a>-inspired architecture over https may be as good as xmlrpclib.</p>
"
64899,"<p>In Python, indentation is a semantic element as well as providing visual grouping for readability.</p>

<p>Both space and tab can indicate indentation. This is unfortunate, because:</p>

<ul>
<li><p>The interpretation(s) of a tab varies
among editors and IDEs and is often
configurable (and often configured).</p></li>
<li><p>OTOH, some editors are not
configurable but apply their own
rules for indentation.</p></li>
<li><p>Different sequences of
spaces and tabs may be visually
indistinguishable.</p></li>
<li><p>Cut and pastes can alter whitespace.</p></li>
</ul>

<p>So, unless you know that a given piece of code will only be modified by yourself with a single tool and an unvarying config, you must avoid tabs for indentation (configure your IDE) and make sure that you are warned if they are introduced (search for tabs in leading whitespace).</p>

<p>And you can still expect to be bitten now and then, as long as arbitrary semantics are applied to control characters.</p>
"
66846,"<p>Open /usr/lib/python2.5/re.py and look for ""def _compile"". You'll find re.py's internal cache mechanism. </p>
"
66936,"<p>The question, as posed, seems quite odd to me: I can't see why anyone would want to do that. It is possible that you are misunderstanding just what a ""classmethod"" is in Python (it's a bit different from, say, a static method in Java).</p>

<p>A normal method is more-or-less just a function which takes as its first argument (usually called ""self""), an instance of the class, and which is invoked as ""."".</p>

<p>A classmethod is more-or-less just a function which takes as its first argument (often called ""cls""), a class, and which can be invoked as ""."" OR as ""."".</p>

<p>With this in mind, and your code shown above, what would you expect to have happen if someone creates an instance of bar and calls meth1 on it?</p>

<pre><code>bar1 = bar()
bar1.meth1(""xyz"")
</code></pre>

<p>When the code to meth1 is called, it is passed two arguments 'self' and 'val'. I guess that you expect ""xyz"" to be passed for 'val', but what are you thinking gets passed for 'self'? Should it be the bar1 instance (in this case, no override was needed)? Or should it be the class bar (what then would this code DO)?</p>
"
308443,"<h2>Most Pythonic solution</h2>

<pre><code># set your list of words, whatever the source
words_list = ('cat', 'dog', 'banana')
# get the word from the user inpuit
user_word = raw_input(""Enter a word:\n"")
# create an generator, so your output is flexible and store almost nothing in memory
word_generator = (word for word in words_list if word.startswith(user_word))

# now you in, you can make anything you want with it 
# here we just list it :

for word in word_generator :
    print word
</code></pre>

<p>Remember generators can be only used once, so turn it to a list (using list(word_generator)) or use the itertools.tee function if you expect using it more than once.</p>

<h2>Best way to do it :</h2>

<p>Store it into a database and use SQL to look for the word you need. If there is a lot of words in your dictionary, it will be much faster and efficient.</p>

<p>Python got thousand of DB API to help you do the job ;-)</p>
"
308854,"<p>PythonWin (<a href=""http://sourceforge.net/projects/pywin32/"" rel=""nofollow"">http://sourceforge.net/projects/pywin32/</a>), bundled with python-win32, comes with its own COM browser as part of its shell and debugging environment.</p>
"
310011,"<p>This is going to be DB dependent. In the case of MySQLdb, for example, the <code>connection</code> class has a <code>literal</code> method that will convert the value to the correct escaped representation for passing to MySQL (that's what <code>cursor.execute</code> uses).</p>

<p>I imagine Postgres has something similar, but I don't think there is a function to escape values as part of the DB API 2.0 spec.</p>
"
310078,"<p>This'll be database dependent (iirc, mysql allows <code>\</code> as an escape character, while something like oracle expects quotes to be doubled: <code>'my '' quoted string'</code>).</p>

<p>Someone correct me if i'm wrong, but the double-quoting method is the standard method.</p>

<p>It may be worth looking at what other db abstraction libraries do (sqlalchemy, cx_Oracle, sqlite, etc).</p>

<p>I've got to ask - why do you want to inline the values instead of bind them?</p>
"
213393,"<p>AFAICT, cats and dogs are on different DB tables, and maybe there's no Animal table.  but you're using one URL pattern for all.  somewhere you need to choose between each.</p>

<p>I'd use a different URL patter for cats and dogs, both would call <code>'create_update.update_object'</code>; but using a different <code>dict</code> for each. one with <code>'model':Dog</code> and the other with <code>'model':Cat</code></p>

<p>or maybe you want a single table where each record can be a cat or a dog?  i don't think you can use inherited models for that.</p>
"
213549,"<p>I use CherryPy both personally and professionally, and I'm extremely happy with it.  I even do the kinds of thing you're describing, such as having global object caches, running other threads in the background, etc.  And it integrates well with Apache; simply run CherryPy as a standalone server bound to localhost, then use Apache's <code>mod_proxy</code> and <code>mod_rewrite</code> to have Apache transparently forward your requests to CherryPy.</p>

<p>The CherryPy website is <a href=""http://cherrypy.org/"" rel=""nofollow"">http://cherrypy.org/</a></p>
"
213736,"<p>Just to point out something different from the usual suspects...</p>

<p>Some years ago while I was using <a href=""http://zope.org/"" rel=""nofollow"">Zope</a> 2.x I read about <a href=""http://www.nightmare.com/medusa/medusa.html"" rel=""nofollow"">Medusa</a> as it was the web server used for the platform. They advertised it to work well under heavy load and it can provide you with the functionality you asked. </p>
"
159756,"<p>The coding style is usually part of an organization's internal policy/convention standards, but I think in general, the all_lower_case_underscore_separator style (also called snake_case) is most common in python. </p>
"
214198,"<p>This is easy in python.</p>

<pre><code>#!/usr/bin/env python
import sys, re

keyword = 'RED'

while 1:
    c = sys.stdin.read(1)
    if not c:
        break
    if c in '#\n':
        sys.stdout.write(c)
    else:
        sys.stdout.write(
            (c+sys.stdin.readline()).replace(
            keyword, '\x1b[31m%s\x1b[0m\r' % keyword))
</code></pre>
"
214294,"<p>I've been using a lot of <a href=""http://msdn.microsoft.com/en-us/library/15x4407c.aspx"" rel=""nofollow"">Windows Script Files</a> lately. More powerful than batch scripts, and since it uses Windows scripting, there's nothing to install.</p>
"
157771,"<p>I'd say a regular expression would be what you're looking for here, though I'm not terribly familiar with Python's Regex engine.</p>

<p>Assuming you use lazy matches, you can get a set of matches on a string which you can put into your array.</p>
"
14399,"<p>\X seems to be available as a generic word-character in some languages, it allows you to match a single character disregarding of how many bytes it takes up. Might be useful.</p>
"
158620,"<p>@<a href=""#158505"" rel=""nofollow"">S.Lott</a>
if i don't import anything into the room module I get an undefined error instead (I imported it into the main  module like you showed)</p>

<blockquote>
  <p>Traceback (most recent call last):<br />
   File ""C:\Projects\python\test\main.py"", line 6, in <br />
     Ben = Room.AddPerson('Ben', 'Blacker', 'Male')<br />
   File ""C:\Projects\python\test\room.py"", line 12, in AddPerson<br />
     Person = CPerson(FirstName,SecondName,Gender,Id)<br />
  NameError: global name 'CPerson' is not defined  </p>
</blockquote>

<p>Also, the reason there diffrent modules is where I encountered the problem to start with the container class (ieg the room) is already several hundred lines, so I wanted the items in it (eg the people) in a seperate file.</p>

<p>EDIT:
main.py</p>

<pre><code>from room import CRoom
from person import CPerson

Room = CRoom()

Ben = Room.AddPerson('Ben', 'Blacker', 'Male')
Tom = Room.AddPerson('Tom', 'Smith',   'Male')

Ben.Leave()
</code></pre>
"
149921,"<p><strong>Code completion:</strong> <a href=""http://github.com/orestis/pysmell/tree/master"" rel=""nofollow"">PySmell</a> looks promising. It's work-in-progress, but alredy useful.</p>
"
150229,"<p><a href=""http://www.djangosnippets.org/snippets/770/"" rel=""nofollow"">This snippet</a> gives you an AutoSlugField with exactly the behavior you are seeking, and adding it to your model is a one-liner.</p>
"
222713,"<p>Ok, so I ran the code on a totally different server - (a vps I got at slicehost), not a single problem (everything works as expected) so honestly I think it's something wrong with my laptop now ;p </p>

<p>Thanks for everyones help though!</p>
"
149067,"<p>I'm not sure what you're asking for IS possible.  Your best bet is probably to hide the slug from the admin interface completely by specifying your fieldsets, and than overriding the save method to copy the slug from the tile, and potentially slugifying it...</p>
"
149123,"<p>This answer doesn't apply to the OP's question regarding Python, but is more of a meta-response.</p>

<p>The easy way is threads. However, not every platform has pre-emptive threading (e.g. BREW, some other embedded systems) If possibly, simply chunk the work and do it in the IDLE event handler.</p>

<p>Another problem with using threads in BREW is that it doesn't clean up C++ stack objects, so it's way too easy to leak memory if you simply kill the thread.</p>
"
149125,"<p>I use threads so the GUI's main event loop never blocks.</p>
"
149138,"<p>For some types of operations, using separate processes makes a lot of sense. Back in the day, spawning a process incurred a lot of overhead. With modern hardware this overhead is hardly even a blip on the screen. This is especially true if you're spawning a long running process.</p>

<p>One (arguable) advantage is that it's a simpler conceptual model than threads  that might lead to more maintainable code. It can also make your code easier to test, as you can write test scripts that exercise these external processes without having to involve the GUI. Some might even argue that is the primary advantage.</p>

<p>In the case of some code I once worked on, switching from threads to separate processes led to a net reduction of over 5000 lines of code while at the same time making the GUI more responsive, the code easier to maintain and test, all while improving the total overall performance.</p>
"
223862,"<p>In TextMate PHP has a simple auto-completion in form of hardcoded set of function names. Sounds as ugly as PHP, but in practice it's good enough to be useful.</p>
"
223994,"<p>I have a base class that I extend all Beautiful Soup classes with a bunch of methods that help me get at text within a group of elements that I don't necessarily want to rely on the structure of. One of those methods is the following:</p>

<pre><code>  def clean(self, val):
    if type(val) is not StringType: val = str(val)
    val = re.sub(r'&lt;.*?&gt;', '', s) #remove tags
    val = re.sub(""\s+"" , "" "", val) #collapse internal whitespace
    return val.strip() #remove leading &amp; trailing whitespace
</code></pre>
"
147748,"<p>It might be a little too heavy for your requirements, but all of those items (and a whole lot more) are included in the <a href=""http://www.vmware.com/appliances/directory/289"" rel=""nofollow"">Python Web Developer Appliance</a>.</p>
"
158626,"<p>After doing some more digging and hacking it turns out to not be terribly hard to drop the Cakewalk interface into an application. It's not pretty without a lot of work, but it works right away.</p>
"
158632,"<p>Alt 3, for the reason that it doesn't use memory proportional to the number of ""hits"".  Given a pathological case like xrange(one_trillion), many of the other offered solutions would fail badly.</p>
"
310334,"<p>See the following.</p>

<ul>
<li><a href=""http://stackoverflow.com/questions/172720/speeding-up-python"">Speeding Up Python</a></li>
<li><a href=""http://stackoverflow.com/questions/178045/when-should-you-start-optimising-code"">When should you start optimising code</a></li>
<li><a href=""http://stackoverflow.com/questions/211414/is-premature-optimization-really-the-root-of-all-evil"">Is premature optimization really the root of all evil?</a></li>
<li><a href=""http://stackoverflow.com/questions/68630/are-tuples-more-efficient-than-lists-in-python"">Are tuples more efficient than lists in Python?</a></li>
</ul>
"
310513,"<p>if the letters are unimportant, you could try \w\d\d\d\w\w\d\d_test.ext which would match the letter/number pattern, or b\d\d\dcv\d\d_test.ext or some mix of the two.</p>
"
89140,"<p>Another solution is to use <a href=""http://rpy.sourceforge.net/"" rel=""nofollow"">Rpy</a>, which puts all of the power of R (including lots of tools for distributions), easily into Python.  </p>
"
288173,"<p>If you're used to dealing with cURL, consider <a href=""http://pycurl.sourceforge.net/"" rel=""nofollow"">PycURL</a>.</p>
"
224033,"<p>Just a quick post, I've only glanced at your transcript example but I've recently also had to look into text parsing and hoped to avoid going the route of hand rolled parsing. I did happen across <a href=""http://www.complang.org/ragel/"" rel=""nofollow"">Ragel</a> which I've only started to get my head around but it's looking to be pretty useful.</p>
"
224641,"<p>Another way to build the map between class names and classes:</p>

<p>When defining classes, add an attribute to any class that you want to put in the lookup table, e.g.:</p>

<pre><code>class Foo:
    lookup = True
    def __init__(self, params):
        # and so on
</code></pre>

<p>Once this is done, building the lookup map is:</p>

<pre><code>class_lookup = zip([(c, globals()[c]) for c in dir() if hasattr(globals()[c], ""lookup"")])
</code></pre>
"
224752,"<p>Further to my comment on John's answer</p>

<p>I found out what the issue was, there were illegal characters in the name field and Subject field, which caused python to get the hiccups, as it tried to write the email as a directory, after seeing "":"" and ""/"".</p>

<p>John point number 4 doesnt work! so I left it as before.
Also is point no 1 correct, have I implemented your suggestion correctly?</p>

<pre><code>def _dump_pop_emails(self):
    self.logger.info(""open pop account %s with username: %s"", self.account[0], self.account[1])
    self.popinstance = poplib.POP3(self.account[0])
    self.logger.info(self.popinstance.getwelcome()) 
    self.popinstance.user(self.account[1])
    self.popinstance.pass_(self.account[2])
    try:
        (numMsgs, totalSize) = self.popinstance.stat()
        for thisNum in range(1, numMsgs+1):
            (server_msg, body, octets) = self.popinstance.retr(thisNum)
            text = '\n'.join(body)
            mesg = StringIO.StringIO(text)                               
            msg = rfc822.Message(mesg)
            name, email = msg.getaddr(""From"")
            emailpath = str(self._emailpath + self._inboxfolder + ""\\"" + self._sanitize_string(email + "" "" + msg.getheader(""Subject"") + "".eml""))
            emailpath = self._replace_whitespace(emailpath)
            print emailpath
            file = open(emailpath,""wb"")
            file.write(text)
            file.close()
            self.popinstance.dele(thisNum)
    finally:
        self.logger.info(self.popinstance.quit())

def _replace_whitespace(self,name):
    name = str(name)
    return name.replace("" "", ""_"")   

def _sanitize_string(self,name):
    illegal_chars = "":"", ""/"", ""\\""
    name = str(name)
    for item in illegal_chars:
        name = name.replace(item, ""_"")
    return name
</code></pre>
"
89452,"<p>Don't try and go 2.0 ( more features then currently exists or scheduled) instead build your new platform with the intent of resolving the current issues with the code base (maintainability/speed/wtf) and go from there.  </p>
"
89940,"<p>You could always use a list comprehension and check the results with all, it would be a little less resource intensive than using a regex: <code>all([c in string.letters + string.digits + [""_"", ""-""] for c in mystring])</code></p>
"
287393,"<p>The GCC preprocessor is typicallly a stand-alone program, typically called <code>cpp</code>. That will probably also strip off your comments, of course.</p>
"
287695,"<p>Are you willing to modify the API a <em>little bit</em>?</p>

<ul>
<li><p>You can make the C function return the new value for the global, and then call it like this:</p>

<p><code>my_global = my_c_func(...)</code></p></li>
<li><p>If you're using <a href=""http://robin.python-hosting.com/"" rel=""nofollow"">Robin</a> or the Python C API directly, you can pass the globals dictionary as an additional parameter and modify it</p></li>
<li>If your global is always in the same module, Sherm's solution looks great</li>
</ul>
"
190958,"<p>If you are willing to put Flash or a Java applet on the page, you might be able to do it on the client. I'm not sure if anything like canvas or SVG supports pixel-level manipulation, but if they do, you might be able to get it to work in some browsers with JavaScript.</p>

<p>The Flash or Java Applet, can be invisible and optional -- you can use JavaScript to detect if the user has the plugin and only support this feature when they do.</p>
"
342457,"<p>Very interesting. </p>

<p>What would happen if you write all your code with IronPython (not just the unit tests)? Would you end up with approximately 10 times less code? </p>

<p>Maybe I should learn IronPython too. </p>
"
13869,"<p>You are being tricked by Python's representation of the result string. The Python expression:</p>

<pre><code>'This is \\n a test \\r'
</code></pre>

<p>represents the string</p>

<pre><code>This is \n a test \r
</code></pre>

<p>which is I think what you wanted. Try adding 'print' in front of each of your p.sub() calls to print the actual string returned instead of a Python representation of the string.</p>

<pre><code>&gt;&gt;&gt; mystring = r""This is \n a test \r""
&gt;&gt;&gt; mystring
'This is \\n a test \\r'
&gt;&gt;&gt; print mystring
This is \n a test \r
</code></pre>
"
13882,"<p>The idea is that I'll read in an escaped string, and unescape it (a feature notably lacking from Python, which you shouldn't need to resort to regular expressions for in the first place). Unfortunately I'm not being tricked by the backslashes...</p>

<p>Another illustrative example:</p>

<pre><code>&gt;&gt;&gt; mystring = r""This is \n ridiculous""
&gt;&gt;&gt; print mystring
This is \n ridiculous
&gt;&gt;&gt; p = re.compile( r""\\(\S)"" )
&gt;&gt;&gt; print p.sub( 'bloody', mystring )
This is bloody ridiculous
&gt;&gt;&gt; print p.sub( r'\1', mystring )
This is n ridiculous
&gt;&gt;&gt; print p.sub( r'\\1', mystring )
This is \1 ridiculous
&gt;&gt;&gt; print p.sub( r'\\\1', mystring )
This is \n ridiculous
</code></pre>

<p>What I'd like it to print is</p>

<pre><code>This is 
ridiculous
</code></pre>
"
13958,"<p>Mark; his second example requires every escaped character thrown into an array initially, which generates a KeyError if the escape sequence happens not to be in the array. It will die on anything but the three characters provided (give \v a try), and enumerating every possible escape sequence every time you want to unescape a string (or keeping a global array) is a really bad solution. Analogous to PHP, that's using <code>preg_replace_callback()</code> with a lambda instead of <code>preg_replace()</code>, which is utterly unnecessary in this situation.</p>

<p>I'm sorry if I'm coming off as a dick about it, I'm just utterly frustrated with Python. This is supported by every other regular expression engine I've ever used, and I can't understand why this wouldn't work.</p>

<p>Thank you for responding; the <code>string.decode('string-escape')</code> function is precisely what i was looking for initially. If someone has a general solution to the regex backreference problem, feel free to post it and I'll accept that as an answer as well.</p>
"
14304,"<p>You could loop through the zip files, reading individual files using the zipfile module and running your regex on those, eliminating to unzip all the files at once. </p>

<p>I'm fairly certain that you can't run a regex over the zipped data, at least not meaningfully.</p>
"
14314,"<p>To access the contents of a zip file you have to unzip it, although the zipfile package makes this fairly easy, as you can unzip each file within an archive individually.</p>

<p><a href=""http://docs.python.org/lib/module-zipfile.html"" rel=""nofollow"">Python zipfile module</a></p>
"
224844,"<p>Here is an example, assuming you have created the table you want to move to, with descriptive names:</p>

<pre><code>&gt;&gt;&gt; import MySQLdb
&gt;&gt;&gt; conn = MySQLdb.connect(user='username', db='dbname')
&gt;&gt;&gt; cur = conn.cursor()
&gt;&gt;&gt; cur.execute('select files from old_table where conditions=met')
&gt;&gt;&gt; a = cur.fetchall()
&gt;&gt;&gt; for item in a:
...     cur.execute('update new_table set new_field = %s' % item) # `item` should be tuple with one value, else use ""(item,)"" with comma
</code></pre>
"
88457,"<p>I tried doing this myself a while ago, and I never got it to work perfectly. Actually I never got it to work at all under Windows, as it kept crashing the entire OS and I ran out of patience. I continued to use it though as it was only important it ran on Linux, and was only a small project. I'd strongly recommend you investigate alternatives. It always felt like a nasty hack, and made me feel dirty.</p>
"
88589,"<p>Depending upon what you are doing, something like the <a href=""http://docs.python.org/lib/module-getopt.html"" rel=""nofollow"">getopt</a> module could be useful, but only in certain situations and I'm not sure if it would apply in yours.</p>
"
148379,"<p>Additionally, the Binding class also allows any header to be added.  So I figured out that I can just add a ""Cookie"" header for each cookie I need to add.  This worked well for the code generated by wsdl2py, just adding the cookies right after the binding is formed in the SOAP client class.  Adding a parameter to the generated class to take in the cookies as a dictionary is easy and then they can easily be iterated through and added.</p>
"
149006,"<p>Working with Qt/C++ for Win32.</p>

<p>We divide the major work units into different processes. The GUI runs as a separate process and is able to command/receive data from the ""worker"" processes as needed. Works nicely in todays multi-core world.</p>
"
225479,"<p>You could try using a workflow engine like <a href=""http://www.vivtek.com/wftk/"" rel=""nofollow"">WFTK</a>.  In this particular case author has done some work on wx-based apps using WFTK and can probably direct you to examples.</p>
"
225649,"<p>I'm not sure what your question is precisely, but for profiling Java (web)applications you can use the netbeans profiler and profiler4j (available on sourceforge). I have used both and can recommend them over eclipse tptp.</p>

<p>See <a href=""http://stackoverflow.com/questions/186615/how-to-set-up-eclipse-tptp"">http://stackoverflow.com/questions/186615/how-to-set-up-eclipse-tptp</a></p>

<p>and <a href=""http://profiler4j.sourceforge.net/"" rel=""nofollow"">http://profiler4j.sourceforge.net/</a></p>

<p>edit: Sorry, just noticed you tagged this as Python question, so this must not be a valid answer for you.</p>
"
91245,"<p>You should set the icon ID to something other than 0:</p>

<pre><code>'icon_resources': [(42, 'my_icon.ico')]
</code></pre>

<p>Windows resource IDs must be between 1 and 32767.</p>
"
286682,"<p>It shouldn't be too complicated to set up a test for each of your alternatives and do a benchmark. Noting beats context sensitive empirical data... :)</p>

<p>Oh, and if you do this I'm sure a lot of people would be interested in the results.</p>
"
286801,"<p>What -- specifically -- do you mean by ""calling a file...foo.py""?</p>

<ol>
<li><p>Import?  If so, the path is totally outside of your program.  Set the <code>PYTHONPATH</code> environment variable with <code>.</code> or <code>c:\</code> or whatever at the shell level.  You can, for example, write 2-line shell scripts to set an environment variable and run Python.</p>

<p>Windows</p>

<pre><code>SET PYTHONPATH=C:\path\to\library
python myapp.py
</code></pre>

<p>Linux</p>

<pre><code>export PYTHONPATH=./relative/path
python myapp.py
</code></pre></li>
<li><p>Execfile?  Consider using import.</p></li>
<li><p>Read and Eval?  Consider using import.</p></li>
</ol>

<p>If the PYTHONPATH is too complicated, then put your module in the Python lib/site-packages directory, where it's put onto the PYTHONPATH by default for you.</p>
"
310900,"<p>Most likely you have several elements on your form with same name. When it is submitted one of the elements returned by cleaned_data is a list</p>

<p>If you want to skip (or do something special about) such cases you need to check for it:</p>

<pre>

def clean_post_data(form):
    for i in form.cleaned_data:
        if('__iter__' in dir(form.cleaned_data[i])):
            print ""skip this element: "" + str(form.cleaned_data[i])
        else:
            form.cleaned_data[i] = form.cleaned_data[i].rstrip()
</pre>
"
310924,"<p>When working with regexes I find the <a href=""http://mochikit.com/examples/mochiregexp/index.html"" rel=""nofollow"">Mochikit regex example</a> to be a great help.</p>

<pre><code>/^b\d\d\dcv\d\d_test\.ext$/
</code></pre>

<p>Then use the python re (regex) module to do the match. This is of course assuming regex is really what you need and not glob as the others mentioned.</p>
"
64266,"<p>if you don't need the dict functionality, and only need to return tuples in the order you've inserted them, wouldn't a queue work better?</p>
"
159941,"<p>I'm wary of why you're asking.  Are you trying to figure out how much memory you'll need for a given implementation?  Say, you're going to read 10,000,000 widgets and want to know how much RAM it will suck?</p>

<p>If that's the case, rather than trying to figure out how much RAM each widget takes, figure out how much RAM, say, 10,000 widgets takes and multiply up to get your actual size.</p>
"
160059,"<p>soaplib is very easy to use and seems to be active.</p>

<p><a href=""http://wiki.github.com/jkp/soaplib/"" rel=""nofollow"">http://wiki.github.com/jkp/soaplib/</a></p>
"
89003,"<p>i'm sure Tim meant </p>

<pre><code>splitter = re.compile(r'([\D])'). 
</code></pre>

<p>if you copy exactly what he has down you only get the <code>digits</code> not the <code>operators</code>.</p>
"
285209,"<p>For <a href=""http://wxpython.org/"" rel=""nofollow"">wxPython</a> I use <a href=""http://xrced.sourceforge.net/"" rel=""nofollow"">xrced</a> to make GUI definitions contained in xml files, I find this way to be elegant and scalable.</p>

<p><a href=""http://wxformbuilder.org/"" rel=""nofollow"">wxformbuilder</a> is also good.</p>

<p>As for the IDE, I'm a <a href=""http://www.wingware.com/"" rel=""nofollow"">WingIDE</a> fan.</p>
"
285270,"<p>This might not be what you are looking for, but you can <a href=""http://www.mtu.net/~engstrom/ssh-proxy.php"" rel=""nofollow"">bypass the proxy tunneling SSH</a>.  Another possibility is using <a href=""http://tor.eff.org"" rel=""nofollow"">Tor</a>.</p>
"
146646,"<p>Don't call search twice in a row (in the loop conditional, and the first statement in the loop).  Call (and cache the result) once before the loop, and then in the final statement of the loop.</p>
"
211283,"<p>This isn't specific to tkinter, and it's not focus based, but I got an answer to a similar question here:</p>

<p><a href=""http://stackoverflow.com/questions/165495/detecting-mouse-clicks-in-windows-using-python"">http://stackoverflow.com/questions/165495/detecting-mouse-clicks-in-windows-using-python</a></p>

<p>I haven't done any tkinter in quite a while, but there seems to be ""FocusIn"" and ""FocusOut"" events. You might be able to bind and track these to solve your issue.</p>

<p>From:
<a href=""http://effbot.org/tkinterbook/tkinter-events-and-bindings.htm"" rel=""nofollow"">http://effbot.org/tkinterbook/tkinter-events-and-bindings.htm</a></p>
"
211898,"<p>Make sure you aren't relying on shell expansion in your classpath.  E.g. ""~/my.jar"" will get expanded by the shell in an os.system call, but not, I believe in an os.execvp call.</p>
"
311344,"<p>Inheritance can be implemented two ways in a relational model.</p>

<p>A subclass can be a new table with all the same columns as the superclass repeated.  This works well when you have an abstract superclass or subclass features that override the superclass.</p>

<p>A subclass can be just the unique columns with a join to the superclass table.  This works well when you have a concrete superclass.</p>

<p>In your case, it looks you might have the following.</p>

<pre><code>class FileFacts( models.Model ):
    content_type = models.ForeignKey(ContentType)
    object_id = models.PositiveIntegerField()
    content_object = generic.GenericForeignKey()

class DownloadFile( models.Model ):
    facts = models.ForeignKey( FileFacts )
    file = models.FileField(upload_to='files/%Y/%m/%d')

class InlineImage( models.Model ):
    facts = models.ForeignKey( FileFacts )
    file = models.ImageField(upload_to='files/%Y/%m/%d')
</code></pre>

<p>This is my preference for handling a subclass-like model.</p>
"
63528,"<p>It's fine to return multiple values using a tuple for simple functions such as <code>divmod</code>. If it makes the code readable, it's Pythonic.</p>

<p>If the return value starts to become confusing, check whether the function is doing too much and split it if it is. If a big tuple is being used like an object, make it an object. Also, consider using <a href=""http://code.activestate.com/recipes/500261/"" rel=""nofollow"">named tuples</a>, which will be part of the standard library in Python 2.6.</p>
"
65771,"<p>The real answer to your question is that if you are going to use the language you need to learn its syntax.  Just as an error in indenting python can generate a compiler error, an error using braces in various other languages can also generate a compiler error.</p>

<p>Even worse it can be silently misinterpreted by the compiler to do the wrong thing.   This is particularly dangerous when the indenting doesn't match the desired meaning. I.e. in many other languages:</p>

<pre><code>If(first condition)
   if (second condition)
      do something interesting;
else
  do something different;
</code></pre>

<p>Will lead to unpleasant surprises.</p>

<p>Python forces you to write code that <em>looks</em> like what it does.  This is a good thing for other programmers who have to read your code, or for you when you try to read your own code after a month or so.</p>
"
226837,"<p>You should bring more than one item at a time if there's some heuristic to know which are the most likely items to be retrieved next, and don't forget the indexes like Charles mentions.</p>
"
93401,"<p>www.google.com is not accessible by HTTPS.  It redirects to insecure HTTP.  To get to mail, you should be going go https://mail.google.com</p>
"
285606,"<p>I recommend using <a href=""http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/"" rel=""nofollow""><code>pyrex</code></a> to make an extension module you can store the values in in python, and cdef a bunch of functions which can be called from C to return the values there.</p>

<p>Otherwise, much depends on the type of values you're trying to transmit.</p>
"
285642,"<p>What problems did you have with pmw?  It's old, yes, but it's pure python so it should work.</p>

<p>Note that Tix doesn't work with py2exe, if that is an issue for you.</p>
"
92441,"<p>The best I've come up with now is (thanks to the python-izers above) </p>

<pre><code>def filter_non_printable(str):
  return ''.join([c for c in str if ord(c) &gt; 31 or ord(c) == 9])
</code></pre>

<p>This is the only way I've found out that works with Unicode characters/strings</p>

<p>Any better options?</p>
"
286122,"<p>Also see <a href=""http://stackoverflow.com/questions/249467/what-is-a-simple-example-of-floating-pointrounding-error"">What is a simple example of floating point error</a>, here on SO, which has some answers.  The one I give actually uses python as the example language...</p>
"
286436,"<p>The suggested answer seems to have fixed the problem. I also realized that I needed to use <strong>os.name</strong> to determine which OS is being used, then I can use the correct path format for loading the external Python file.</p>
"
286499,"<p>If your file is always in the same directory as your program then:</p>

<pre><code>def _isInProductionMode():
    """""" returns True when running the exe, 
        False when running from a script, ie development mode.
    """"""
    return (hasattr(sys, ""frozen"") or # new py2exe
           hasattr(sys, ""importers"") # old py2exe
           or imp.is_frozen(""__main__"")) #tools/freeze

def _getAppDir():
    """""" returns the directory name of the script or the directory 
        name of the exe
    """"""
    if _isInProductionMode():
        return os.path.dirname(sys.executable)
    return os.path.dirname(__file__)
</code></pre>

<p>should work. Also, I've used py2exe for my own application, and haven't tested it with other exe conversion apps. </p>
"
284283,"<p>How about catching the exception that gets generated from the assertion failure?  In your catch block you could output the data however you wanted to wherever.  Then when you were done you could re-throw the exception.  The test runner probably wouldn't know the difference. </p>

<p>Disclaimer: I haven't tried this with python's unit test framework but have with other unit test frameworks.</p>
"
284375,"<p>I wanted to thank J. Cage for this last post. </p>

<p>For my work, ""reasonable"" timing of events across  processes and platforms is essential. There are obviously lots of places where things can go askew (clock drift, context switching, etc.), however this accurate timing solution will, I think, help to ensure that the time stamps recorded are sufficiently accurate to see the other sources of error. </p>

<p>That said, there are a couple of details I wonder about that are explained in <a href=""http://www.ibm.com/developerworks/library/i-seconds/"" rel=""nofollow"" title=""When Microseconds Matter"">When MicroSeconds Matter</a>. For example, I think time.clock() will eventually wrap. I think for this to work for a long running process, you might have to handle that.</p>
"
284396,"<p>""Or is it simply the case that anyone who needs more powerful windowing components has to use wxPython?""<br />
Short answer: yes.</p>

<p>Long answer:
It may take some practice for your wxPython code to feel ""clean,"" but it is nicer and much more powerful than Tkinter.  You will also get better support, since more people use it these days.</p>
"
284448,"<p>Yay ArcGIS.</p>

<p>Just to clarify how are you trying to call this script using popen, can you post some code?</p>

<p>If your invoking this script via another script in the ArcGIS environment, then the thing is, when you use Popen the script wont be invoked within the ArcGIS environment, instead it will be invoked within windows. So you will loose all real control over it.</p>

<p>Also just another ArcGIS comment you never initalize a license for the geoprocessor.</p>

<p>My suggestion refactor your code, into a module function that simply attempts to zip the files, if it fails print the message out to ArcGIS.</p>

<p>If you want post how you are calling it, and how this is being run.</p>
"
284528,"<p>You really need to be more specific: What is it that you want to test in your WS-consumer? That it calls the right WS? This looks a bit pointless - WS are a perfect place for mocking whatever may be called - without anything being called.</p>

<p>In order to test the consumer you'd otherwise be writing a Webservice that mocks the original, right? I'd suppose that the communication protocol that goes through the wire is not the clients domain - e.g. it's generated. So the only thing a WS-consumer's client sees is the interface. And there's nothing to test in an interface.</p>

<p>It might be that I completely misunderstood your question - please clarify if I did. I'll revise the answer then.</p>
"
210395,"<p>Looks like a typo in a config file somewhere, whether in the Py3k package or on your machine.  You might try installing the stable final Python 2.6 (which supports 3.0 syntax changes with imports from <code>__future__</code>), and if that works you should probably file a bug report.</p>
"
210716,"<p>After posting this, reading the replies so far (thanks everyone!), and thinking about the problem for a while, here is the best approach I've been able to come up with:</p>

<ol>
<li>Find the first <code>${</code>.</li>
<li>Find the next <code>}</code> after that.</li>
<li>Feed whatever's in between to <code>compile()</code>.  If it works, stick a fork in it and we're done.</li>
<li>Otherwise, keep extending the string by looking for subsequent occurences of <code>}</code>.  As soon as something compiles, return it.</li>
<li>If we run out of <code>}</code> without being able to compile anything, use the results of the last compilation attempt to give information about where the problem lies.</li>
</ol>

<p>Advantages of this approach:</p>

<ul>
<li>The code is quite short and easy to understand.</li>
<li>It's pretty efficient -- optimal, even, in the case where the expression contains no <code>}</code>.  Worst-case seems like it wouldn't be too bad either.</li>
<li>It works on many expressions that contain <code>${</code> and/or <code>}</code>.</li>
<li>No external dependencies.  No need to import <em>anything</em>, in fact.  (This surprised me.)</li>
</ul>

<p>Disadvantages:</p>

<ul>
<li>Sometimes it grabs too much or too little.  See below for an example of the latter.  I could imagine a scary example where you have two expressions and the first one is subtly wrong and the algorithm ends up mistakenly grabbing the whole thing and everything in between and returning it as valid, though I haven't been able to demonstrate this.  Perhaps things are not so bad as I fear.  I don't think misunderstandings can be avoided in general -- the problem definition is kind of slippery -- but it seems like it ought to be possible to do better, especially if one were willing to trade simplicity or execution time.</li>
<li>I haven't done any benchmarks, but I could imagine there being faster alternatives, especially in cases that involve lots of <code>}</code> in the expression.  That could be a big deal if one wanted to apply this technique to sizable blocks of Python code rather than just very short expressions.</li>
</ul>

<p>Here is my implementation.</p>

<pre><code>def findExpr(s, i0=0, begin='${', end='}', compArgs=('&lt;string&gt;', 'eval')):
  assert '\n' not in s, 'line numbers not implemented'
  i0 = s.index(begin, i0) + len(begin)
  i1 = s.index(end, i0)
  code = errMsg = None
  while code is None and errMsg is None:
    expr = s[i0:i1]
    try: code = compile(expr, *compArgs)
    except SyntaxError, e:
      i1 = s.find(end, i1 + 1)
      if i1 &lt; 0: errMsg, i1 = e.msg, i0 + e.offset
  return i0, i1, code, errMsg
</code></pre>

<p>And here's the docstring with some illustrations in doctest format, which I didn't insert into the middle of the function above only because it's long and I feel like the code is easier to read without it.</p>

<pre><code>'''
Search s for a (possibly invalid) Python expression bracketed by begin
and end, which default to '${' and '}'.  Return a 4-tuple.

&gt;&gt;&gt; s = 'foo ${a*b + c*d} bar'
&gt;&gt;&gt; i0, i1, code, errMsg = findExpr(s)
&gt;&gt;&gt; i0, i1, s[i0:i1], errMsg
(6, 15, 'a*b + c*d', None)
&gt;&gt;&gt; ' '.join('%02x' % ord(byte) for byte in code.co_code)
'65 00 00 65 01 00 14 65 02 00 65 03 00 14 17 53'
&gt;&gt;&gt; code.co_names
('a', 'b', 'c', 'd')
&gt;&gt;&gt; eval(code, {'a': 1, 'b': 2, 'c': 3, 'd': 4})
14
&gt;&gt;&gt; eval(code, {'a': 'a', 'b': 2, 'c': 'c', 'd': 4})
'aacccc'
&gt;&gt;&gt; eval(code, {'a': None})
Traceback (most recent call last):
  ...
NameError: name 'b' is not defined

Expressions containing start and/or end are allowed.

&gt;&gt;&gt; s = '{foo ${{""}"": ""${""}[""}""]} bar}'
&gt;&gt;&gt; i0, i1, code, errMsg = findExpr(s)
&gt;&gt;&gt; i0, i1, s[i0:i1], errMsg
(7, 23, '{""}"": ""${""}[""}""]', None)

If the first match is syntactically invalid Python, i0 points to the
start of the match, i1 points to the parse error, code is None and
errMsg contains a message from the compiler.

&gt;&gt;&gt; s = '{foo ${qwerty asdf zxcvbnm!!!} ${7} bar}'
&gt;&gt;&gt; i0, i1, code, errMsg = findExpr(s)
&gt;&gt;&gt; i0, i1, s[i0:i1], errMsg
(7, 18, 'qwerty asdf', 'invalid syntax')
&gt;&gt;&gt; print code
None

If a second argument is given, start searching there.

&gt;&gt;&gt; i0, i1, code, errMsg = findExpr(s, i1)
&gt;&gt;&gt; i0, i1, s[i0:i1], errMsg
(33, 34, '7', None)

Raise ValueError if there are no further matches.

&gt;&gt;&gt; i0, i1, code, errMsg = findExpr(s, i1)
Traceback (most recent call last):
  ...
ValueError: substring not found

In ambiguous cases, match the shortest valid expression.  This is not
always ideal behavior.

&gt;&gt;&gt; s = '{foo ${x or {} # return {} instead of None} bar}'
&gt;&gt;&gt; i0, i1, code, errMsg = findExpr(s)
&gt;&gt;&gt; i0, i1, s[i0:i1], errMsg
(7, 25, 'x or {} # return {', None)

This implementation must not be used with multi-line strings.  It does
not adjust line number information in the returned code object, and it
does not take the line number into account when computing the offset
of a parse error.

'''
</code></pre>
"
63645,"<p>When writing a package called ""foo"", I will put unit tests into a separate package ""foo_test"". Modules and subpackages will then have the same name as the SUT package module. E.g. tests for a module foo.x.y are found in foo_test.x.y. The __init__.py files of each testing package then contain an AllTests suite that includes all test suites of the package. setuptools provides a convenient way to specify the main testing package, so that after ""python setup.py develop"" you can just use ""python setup.py test"" or ""python setup.py test -s foo_test.x.SomeTestSuite"" to the just a specific suite.</p>
"
63767,"<p>Threads by definition are part of the same process.  If you want them to keep running, they need to be forked off into a new process; see os.fork() and friends.</p>

<p>You'll probably want the new process to end (via exit() or the like) immediately after spawning the script.</p>
"
63794,"<p>If a process dies all it's threads die with it, so a solution might be a separate process.</p>

<p>See if creating a xmlrpc server might help you, that is a simple solution for interprocess communication.</p>
"
64186,"<p>Many Python IDEs and generally-capable text/source editors can handle the whitespace for you.</p>

<p>However, it is best to just ""let go"" and enjoy the whitespace rules of Python. With some practice, they won't get into your way at all, and you will find they have many merits, the most important of which are:</p>

<ol>
<li>Because of the forced whitespace, Python code is simpler to understand. You will find that as you read code written by others, it is easier to grok than code in, say, Perl or PHP.</li>
<li>Whitespace saves you quite a few keystrokes of control characters like { and }, which litter code written in C-like languages. Less {s and }s means, among other things, less RSI and wrist pain. This is not a matter to take lightly.</li>
</ol>
"
311650,"<p>The <a href=""http://www.python.org/doc/2.5.2/lib/module-pickle.html"" rel=""nofollow"">Pickle and cPickle</a> modules may also be helpful to you.</p>
"
311785,"<p>From what I understand, python lists are already quite similar to ArrayLists. But if you want to tweak those parameters I found this post on the net that may be interesting (basically, just create your own <code>ScalableList</code> extension):</p>

<p><a href=""http://mail.python.org/pipermail/python-list/2000-May/035082.html"" rel=""nofollow"">http://mail.python.org/pipermail/python-list/2000-May/035082.html</a></p>
"
312181,"<pre><code># Works on CouchDB 0.8.0
from couchdb import Server # http://code.google.com/p/couchdb-python/

byTag = """"""
function(doc) {
if (doc.type == 'post' &amp;&amp; doc.tags) {
    doc.tags.forEach(function(tag) {
        emit(tag, doc);
    });
}
}
""""""

def findPostsByTag(self, tag):
    server = Server(""http://localhost:1234"")
    db = server['my_table']
    return [row for row in db.query(byTag, key = tag)]
</code></pre>

<p>The byTag map function returns the data with each unique tag in the ""key"", then each post with that tag in <code>value</code>, so when you grab key = ""mytag"", it will retrieve all posts with the tag ""mytag"".</p>

<p>I've tested it against about 10 entries and it seems to take about 0.0025 seconds per query, not sure how efficient it is with large data sets..</p>
"
160872,"<p>Basically, you're looking for a <strong>cross-platform software/package installer</strong> (on the lines of apt-get/yum/etc.) I'm not sure something like that exists?</p>

<p>An alternative might be specifying the list of packages that need to be installed via the OS-specific package management system such as Fink or DarwinPorts for Mac OS X and having a script that sets up the build environment for the in-house code?</p>
"
93984,"<p>Some years ago I used <code>MarkupWriter</code> from <a href=""http://4suite.org/index.xhtml"" rel=""nofollow"">4suite</a></p>

<blockquote>
<pre><code>General-purpose utility class for generating XML (may eventually be
expanded to produce more output types)

Sample usage:

from Ft.Xml import MarkupWriter
writer = MarkupWriter(indent=u""yes"")
writer.startDocument()
writer.startElement(u'xsa')
writer.startElement(u'vendor')
#Element with simple text (#PCDATA) content
writer.simpleElement(u'name', content=u'Centigrade systems')
#Note writer.text(content) still works
writer.simpleElement(u'email', content=u""info@centigrade.bogus"")
writer.endElement(u'vendor')
#Element with an attribute
writer.startElement(u'product', attributes={u'id': u""100\u00B0""})
#Note writer.attribute(name, value, namespace=None) still works
writer.simpleElement(u'name', content=u""100\u00B0 Server"")
#XML fragment
writer.xmlFragment('&lt;version&gt;1.0&lt;/version&gt;&lt;last-release&gt;20030401&lt;/last-release&gt;')
#Empty element
writer.simpleElement(u'changes')
writer.endElement(u'product')
writer.endElement(u'xsa')
writer.endDocument()

Note on the difference between 4Suite writers and printers
Writer  - module that exposes a broad public API for building output
          bit by bit
Printer - module that simply takes a DOM and creates output from it
          as a whole, within one API invokation
</code></pre>
</blockquote>

<p>Recently i hear a lot about how <a href=""http://codespeak.net/lxml/"" rel=""nofollow"">lxml</a> is great, but I don't have first-hand experience, and I had some fun working with <a href=""http://freshmeat.net/projects/gnosisxml/"" rel=""nofollow"">gnosis</a>.</p>
"
344925,"<p>My ugly (but short as stated in the question) solution with <a href=""http://www.python.org/doc/2.5.2/ref/genexpr.html"" rel=""nofollow"">generator expressions</a>;</p>

<pre><code># Some setup first
file('test.txt', 'w').write('\n'.join('%05d' % i for i in range(100)))


# This is the filter function
def f(i):
    return i % 3


# This is the main part 
file('test2.txt', 'w').write('\n'.join(str(f(int(l))) for l in file('test.txt', 'r').readlines()))


# And a wrapper for sanity
def filter_file(infile, outfile, filter_function)
    outfile.write('\n'.join(filter_function(l) for l in infile.readlines()))
</code></pre>
"
344992,"<p>Looks like an interesting project.  Do note that Django has higher-level types than SQL, so you can make use of things like the email address type.</p>

<p>If you're planning on targeting <a href=""http://code.google.com/appengine/"" rel=""nofollow"">GAE</a>, you should find a similarly rich <a href=""http://code.google.com/appengine/docs/datastore/typesandpropertyclasses.html"" rel=""nofollow"">set of model types</a>.</p>
"
344996,"<p>hey...i agree...it looks pretty good. someone advised me to use auto-increment on all tables just to be sure there really is a unique id on every record. it's your choice if you'd like to go that route.</p>
"
345053,"<p>You should link paiement (transaction) to the person concerned.</p>
"
345403,"<p>I would advise you to not worry about the underling relational database. Yes, you'll need to understand what a foreign key is and the difference between many-to-many and one-to-many, etc., but you should think about your models in terms of Django classes. That's how you'll have to write them anyway, so that's where I would start. The <a href=""http://docs.djangoproject.com/en/dev/topics/db/models/"" rel=""nofollow"">Django documenation on models</a> is great, and will help you a lot.</p>

<p>I think everyone here would be glad to help you with the Python classes; you should rewrite your example using Django. For example, your Person table would look like this:</p>

<pre><code>from django.db import models

SEX_CHOICES = (
    ('M', 'Male'),
    ('F', 'Female')
)

ETHNICITY_CHOICES = (
    # follow the same format as SEX_CHOICES:
    # (database_value, human_friendly_name)
)

class Person(models.Model):
    first_name   = models.CharField(max_length=200)
    middle_name  = models.CharField(max_length=200)
    familiy_name = models.CharField(max_length=200) 

    sex = models.CharField(max_length=1, choices=SEX_CHOICES)
    ethnicity  = models.CharField(max_length=1, choices=ETHNICITY_CHOICES)
    birth_date = models.DateField()

    email = models.EmailField()
    home_phone = models.CharField(max_length=10) # USA phone numbers
    work_phone = models.CharField(max_length=10)
    cell_phone = models.CharField(max_length=10)
    address = models.ForeignKey(Location)

class Location(models.Model):
    # left as an exercise for the reader

# more classes...
</code></pre>
"
345419,"<p>According to the <a href=""http://docs.djangoproject.com/en/dev/ref/models/fields/#manytomanyfield"" rel=""nofollow"">docs</a>, ""limit_choices_to has no effect when used on a ManyToManyField with an intermediate table"".  By my reading, that means it has no effect at all, because ManyToManyFields use intermediate tables...</p>

<p>I haven't tried to make it work in the Admin site, but from your own views, you can create a form and <a href=""http://stackoverflow.com/questions/291945/how-do-i-filter-foreignkey-choices-in-a-django-modelform"">override the queryset</a> used to populate the list of choices:</p>

<pre><code>form.fields[""photos""].queryset = request.user.photo_set.all()
</code></pre>
"
144253,"<p>If I undertand Decimal correctly, the ""precision"" is the number of digits after the decimal point in <em>decimal notation</em>.</p>

<p>You seem to want something else: the number of significant digits. That is one more than the number of digits after the decimal point in <em>scientific notation</em>.</p>

<p>I would be interested in learning about a Python module that does significant-digits-aware floating point point computations.</p>
"
144263,"<p>What's wrong with floating point?  </p>

<pre><code>&gt;&gt;&gt; ""%8.2e""%  ( 1.0/3.0 )
'3.33e-01'
</code></pre>

<p>It was designed for scientific-style calculations with a limited number of significant digits.</p>
"
312941,"<pre><code>def loop():    
    def f(i, cont=[None]):        
        for i in range(i, 5):
            print i
            if i == 2:
                cont[0] = lambda i=i+1: f(i)
        return cont[0]
    return f(1)

if __name__ == '__main__':
    c = loop()
    c()
</code></pre>
"
312981,"<p>You seem to have found your answer that in this case delegation is the better strategy.  Nevertheless, I would like to add that, excepting delegation, there is nothing wrong with extending a built-in class, particularly if your alternative, depending on the language, is ""monkey patching"" (see <a href=""http://en.wikipedia.org/wiki/Monkey_patch"" rel=""nofollow"">http://en.wikipedia.org/wiki/Monkey_patch</a>) </p>
"
312994,"<p>I'd suggest <a href=""http://www.modpython.org/"" rel=""nofollow"">mod_python</a> or <a href=""http://code.google.com/p/modwsgi/"" rel=""nofollow"">mod_wsgi</a>.</p>
"
62976,"<p>If you want to be able to invoke method calls from JavaScript to Python, <a href=""http://json-rpc.org/wiki/python-json-rpc"" rel=""nofollow"">JSON-RPC</a> works well with Google App Engine.  See Google's article, ""<a href=""http://code.google.com/appengine/articles/rpc.html"" rel=""nofollow"">Using AJAX to Enable Client RPC Requests</a>"", for details.</p>
"
63093,"<p>No. How would Python parse your script if there was a way to disable this?</p>
"
161891,"<p>Yup. Your best bet is, as has already been suggested, to work with 'os.walk'. Or, write wrappers around '<a href=""http://docs.python.org/library/glob.html"" rel=""nofollow"">glob</a>' and '<a href=""http://docs.python.org/library/fnmatch.html"" rel=""nofollow"">fnmatch</a>' modules, perhaps.</p>
"
227436,"<p>This <a href=""http://www.lindo.com/"" rel=""nofollow"">company</a> has a tool to do that sort of thing.</p>
"
95102,"<p><a href=""http://www.antlr.org/"" rel=""nofollow"">ANTLR</a> is great and has the added benefit of working across multiple languages.</p>
"
96565,"<p>The first thing I would check is whether you need to connect via an HTTP proxy (in which case direct connections bypassing the proxy will likely time out). Run Wireshark and see what happens.</p>
"
283026,"<p>Well I have an answer now.  I was thinking through this and decided that I needed to use parts of every answer.  I still need to figure out if I want a class or a function.  But I have the algorithm that I think is probably more Pythonic than any of the others.  But, it borrows heavily from the answers that some very generous people provided.  I appreciate those a lot because I have learned quite a bit.</p>

<p>To save the time of having to make test cases I am going to paste the the complete code I have been banging away with in IDLE and follow that with an HTML sample file.  Other than making a decision about class/function (and I need to think about how I am using this code in my program) I would be happy to see any improvements that make the code more Pythonic.</p>

<pre><code>from BeautifulSoup import BeautifulSoup

original=file(r""C:\testheaders.htm"").read()

soupOriginal=BeautifulSoup(original)
all_Rows=soupOriginal.findAll('tr')


header_Rows=[]
for each in range(len(all_Rows)):
    header_Rows.append(all_Rows[each])


header_Cells=[]
for each in header_Rows:
    header_Cells.append(each.findAll('td'))

temp_Header_Row=[]
header=[]
for row in range(len(header_Cells)):
    for column in range(len(header_Cells[row])):
	    x=int(header_Cells[row][column].get(""colspan"",""1""))
	    if x==1:
		    temp_Header_Row.append( ' '.join(header_Cells[row][column]) )

	    else:
		    for item in range(x):

			    temp_Header_Row.append( ''.join(header_Cells[row][column]) )

    header.append(temp_Header_Row)
temp_Header_Row=[]
combined_Header=zip(*header)

for each in combined_Header:
    print each
</code></pre>

<p>Okay test file contents are below  Sorry I tried to attach these but couldn't make it happen:</p>

<pre><code>  &lt;TABLE style=""font-size: 10pt"" cellspacing=""0"" border=""0"" cellpadding=""0"" width=""100%""&gt;
  &lt;TR valign=""bottom""&gt;
  &lt;TD width=""40%""&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD width=""5%""&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD width=""3%""&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD width=""3%""&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD width=""1%""&gt;&amp;nbsp;&lt;/TD&gt;

  &lt;TD width=""5%""&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD width=""3%""&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD width=""3%""&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD width=""1%""&gt;&amp;nbsp;&lt;/TD&gt;

  &lt;TD width=""5%""&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD width=""3%""&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD width=""1%""&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD width=""1%""&gt;&amp;nbsp;&lt;/TD&gt;

  &lt;TD width=""5%""&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD width=""3%""&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD width=""1%""&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD width=""1%""&gt;&amp;nbsp;&lt;/TD&gt;

  &lt;TD width=""5%""&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD width=""3%""&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD width=""3%""&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD width=""1%""&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;/TR&gt;
  &lt;TR style=""font-size: 10pt"" valign=""bottom""&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD nowrap align=""right"" colspan=""2""&gt;FOODS WE LIKE&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD nowrap align=""right"" colspan=""2""&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD nowrap align=""right"" colspan=""2""&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;/TR&gt;
  &lt;TR style=""font-size: 10pt"" valign=""bottom""&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD nowrap align=""CENTER"" colspan=""6""&gt;SILLY STUFF&lt;/TD&gt;

  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD nowrap align=""right"" colspan=""2""&gt;OTHER THAN&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD nowrap align=""CENTER"" colspan=""6""&gt;FAVORITE PEOPLE&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;/TR&gt;
  &lt;TR style=""font-size: 10pt"" valign=""bottom""&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD nowrap align=""right"" colspan=""2""&gt;MONTY PYTHON&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD nowrap align=""right"" colspan=""2""&gt;CHERRYPY&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD nowrap align=""right"" colspan=""2""&gt;APPLE PIE&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD nowrap align=""right"" colspan=""2""&gt;MOTHERS&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD nowrap align=""right"" colspan=""2""&gt;FATHERS&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;/TR&gt;
  &lt;TR style=""font-size: 10pt"" valign=""bottom""&gt;
  &lt;TD nowrap align=""left""&gt;Name&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD nowrap align=""right"" colspan=""2""&gt;SHOWS&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD nowrap align=""right"" colspan=""2""&gt;PROGRAMS&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD nowrap align=""right"" colspan=""2""&gt;BANANAS&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD nowrap align=""right"" colspan=""2""&gt;PERFUME&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;TD nowrap align=""right"" colspan=""2""&gt;TOOLS&lt;/TD&gt;
  &lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
  &lt;/TR&gt;
  &lt;/TABLE&gt;
</code></pre>
"
284058,"<p>I don't really know anything about it, but putting ""debugging Python with emacs"" into Google gave me this page about <a href=""http://twistedmatrix.com/projects/core/documentation/howto/debug-with-emacs.html"" rel=""nofollow"">debugging twisted with emacs</a>, so it seems to be possible.</p>
"
94953,"<p>See this <a href=""http://avinashv.net/2008/05/pythons-range-and-xrange/"" rel=""nofollow"">post</a> to find difference between range and xrange:</p>

<p>To quote:</p>

<blockquote>
  <p><code>range</code> returns exactly what you think: a list of consecutive
  integers, of a defined length beginning with 0. <code>xrange</code>, however,
  returns an <em>""xrange object""</em>, which acts a great deal like an iterator</p>
</blockquote>
"
145501,"<p>Well, thanks to all who answered the question. Anyway, I think I solved the mistery. </p>

<p>SELinux is completely disabled on the machine, so the problem is definitely in 'svn co' not being able to found config_dir for the user account it runs under.</p>

<p>Apache / mod_python doesn't read in shell environment of the user account which apache is running  on. Thus for examle no $HOME is seen by mod_python when apache 
is running under some  real user ( not nobody ) </p>

<p>Now 'svn co' has a flag --config-dir which points to configuration directory to read params from. By default it is $HOME/.subversion, i.e. it corresponds to the user account home directory. Apparently when no $HOME exists mod_python goes to root home dir ( /root) and tries to fiddle with .subversion content over there - which is obviously
fails miserably.</p>

<p>putting </p>

<p>SetEnv HOME /home/qa </p>

<p>into the /etc/httpd/conf/httpd.conf doesn't solve the problem because of SetEnv having nothing to do with shell environment - it only sets apache related environment</p>

<p>Likewise PythonOption - sets only mod_python related variables which can be read with req.get_options()  after that</p>

<p>Running 'svn co --config-dir /home/ ...' definitely gives a workaround for running from within mod_python, but gets in the way of those who will try to run the script from command line.</p>

<p>So the proposed ( and working) solution is to set HOME environment variable prior to starting appache.</p>

<p>For example in /etc/init.d/httpd  script </p>

<pre><code>    QAHOME=/home/qa
    ...
    HOME=$QAHOME LANG=$HTTPD_LANG daemon $httpd $OPTIONS
</code></pre>
"
145580,"<p>I was able to fix it by using the info DzinX provided, with some modification.</p>

<p>It appears that posting the radio buttons box first ""locked in"" the box to the sizer. If I tried to add a new box, I would get an error message stating that I was trying to add the widget to the same sizer twice.</p>

<p>By simply removing the radio buttons initially and having the user click a button to call a method, I could simply add a the list of radio buttons without a problem.</p>

<p>Additionally, by having the user click a button, I did not run into errors of ""class Foo has no attribute 'bar'"". Apparently, when the wizard initalizes, the attributes aren't available to the rest of the wizard pages. I had thought the wizard pages were dynamically created with each click of ""Next"" but they are all created at the same time.</p>
"
142188,"<pre><code>def getExpandedText(pattern,text,*group):
    r"""""" Searches for pattern in the text and replaces
    all captures with the values in group.

    Tag renaming:
    &gt;&gt;&gt; html = '&lt;div&gt; abc &lt;span id=""x""&gt; def &lt;/span&gt; ghi &lt;/div&gt;'
    &gt;&gt;&gt; getExpandedText(r'&lt;/?(span\b)[^&gt;]*&gt;', html, 'div')
    '&lt;div&gt; abc &lt;div id=""x""&gt; def &lt;/div&gt; ghi &lt;/div&gt;'

    Nested groups, capture-references:
    &gt;&gt;&gt; getExpandedText(r'A(.*?Z(.*?))B', ""abAcdZefBgh"", r'&lt;\2&gt;')
    'abA&lt;ef&gt;Bgh'
    """"""
    pattern = re.compile(pattern)
    ret = []
    last = 0
    for m in pattern.finditer(text):
        for i in xrange(0,len(m.groups())):
            start,end = m.span(i+1)

            # nested or skipped group
            if start &lt; last or group[i] is None:
                continue

            # text between the previous and current match
            if last &lt; start:
                ret.append(text[last:start])

            last = end
            ret.append(m.expand(group[i]))

    ret.append(text[last:])
    return ''.join(ret)
</code></pre>

<p><strong>Edit:</strong> Allow capture-references in the replacement strings.</p>
"
98150,"<p>Google <code>AppEngine</code> uses the Django templating engine, have you taken a look at how they do it? You could possibly just use that.</p>
"
211110,"<p>You can probably create a object that mimics the python file-object interface.</p>

<p><a href=""http://docs.python.org/library/stdtypes.html#bltin-file-objects"" rel=""nofollow"">http://docs.python.org/library/stdtypes.html#bltin-file-objects</a></p>
"
160271,"<p>It works if you use os instead of commands:</p>

<pre><code>import os
print os.system(""ps -u 0"")
</code></pre>
"
160435,"<p>I'm not sure that I fully understand exactly what you want to do, but I think that there's a good chance that you'll get at least part the way there using a <a href=""https://docs.djangoproject.com/en/dev/topics/db/managers/#custom-managers-and-model-inheritance"" rel=""nofollow"">custom Manager</a>. In particular, don't try to define your models with restrictions to the current user, but create a manager that only returns objects that match the current user.</p>
"
160636,"<p>The underlying problem is that I am developing some Django, but on more than one host (with colleagues), all with different settings. I was hoping to do something like this in the project/settings.py file:</p>

<pre><code>from platform import node

settings_files = { 'BMH.lan': 'settings_bmh.py"", ... } 

__import__( settings_files[ node() ] )
</code></pre>

<p>It seemed a simple solution (thus elegant), but I would agree that it has a smell to it and the simplicity goes out the loop when you have to use logic like what John Millikin posted (thanks). Here's essentially the solution I went with:</p>

<pre><code>from platform import node

from settings_global import *

n = node()

if n == 'BMH.lan':
  from settings_bmh import *
# add your own, here...
else:
  raise Exception(""No host settings for '%s'. See settings.py."" % node())
</code></pre>

<p>Which works fine for our purposes.</p>
"
63450,"<p>I was a bit reluctant to learn Python because of tabbing. However, I almost didn't notice it when I used Vim.</p>
"
312816,"<p>It isn't obvious, even if you read some of the standards (like <a href=""http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap12.html"" rel=""nofollow"">this</a> or <a href=""http://www.faqs.org/docs/artu/ch10s05.html"" rel=""nofollow"">this</a>).</p>

<p>The <em>args</em> part of a command line are -- almost universally -- the input files.</p>

<p>There are only very rare odd-ball cases where an input file is specified as an option.  It does happen, but it's very rare.</p>

<p>Also, the output files are never named as <em>args</em>.  They almost always are provided as named options.  </p>

<p>The idea is that</p>

<ol>
<li><p>Most programs can (and should) read from stdin.  The command-line argument of <code>-</code> is a code for ""stdin"".  If no arguments are given, stdin is the fallback plan.</p></li>
<li><p>If your program opens any files, it may as well open an unlimited number of files specified on the command line.  The shell facilitates this by expanding wild-cards for you.  [Windows doesn't do this for you, however.]</p></li>
<li><p>You program should never overwrite a file without an explicit command-line options, like '-o somefile' to write to a file. </p></li>
</ol>

<p>Note that <code>cp</code>, <code>mv</code>, <code>rm</code> are the big examples of programs that don't follow these standards.</p>
"
312903,"<p>To clarify:</p>

<pre><code>aprogram -e *.wmv
</code></pre>

<p>on a Linux shell, all wildcards (*.wmv) are expanded by the shell. So <code>aprogram</code> actually recieves the arguments:</p>

<pre><code>sys.argv == ['aprogram', '-e', '1.wmv', '2.wmv', '3.wmv']
</code></pre>

<p>Like <a href=""http://stackoverflow.com/questions/312673/python-optparse-and-file-mask#312677"">Charles</a> said, you can quote the argument to get it to pass in literally:</p>

<pre><code>aprogram -e ""*.wmv""
</code></pre>

<p>This will pass in:</p>

<pre><code>sys.argv == ['aprogram', '-e', '*.wmv']
</code></pre>
"
344791,"<p>Your example works fine in my machine. I don't know why you're getting that error. PIL documentation say you have to import the library in this way:</p>

<pre><code>from PIL import Image
</code></pre>

<p>You should try that way. As I said, for me works in both ways.</p>
"
315406,"<p>There may be some confusion between <strong>table</strong> (the object) and <strong>tablename</strong> (the name of the table, a string). Using the <strong>table</strong> class attribute works fine for me.</p>
"
98276,"<p>I echo the above statements.  Jinja 2 is a pretty good superset of Django templates for general use.  I think they're working on making the Django templates a little less coupled to the settings.py, but Jinja should do well for you.</p>
"
99259,"<p>Why not just use <a href=""http://code.google.com/p/sympy/"" rel=""nofollow"">SymPy</a>?  It should do what you're trying to achieve.</p>
"
281012,"<p>Thanks All for the prompt reply.</p>

<p>Here is the log content got from the GAE,</p>

<p>: No module named ClientForm
Traceback (most recent call last):
  File ""/base/data/home/apps/seoapp/1.28/main.py"", line 10, in 
    import mechanize
  File ""/base/data/home/apps/seoapp/1.28/mechanize/<strong>init</strong>.py"", line 85, in 
    from _mechanize import <strong>version</strong>
  File ""/base/data/home/apps/seoapp/1.28/mechanize/_mechanize.py"", line 15, in 
    from _useragent import UserAgentBase
  File ""/base/data/home/apps/seoapp/1.28/mechanize/_useragent.py"", line 16, in 
    import _opener
  File ""/base/data/home/apps/seoapp/1.28/mechanize/_opener.py"", line 23, in 
    import _http
  File ""/base/data/home/apps/seoapp/1.28/mechanize/_http.py"", line 22, in 
    from _html import unescape, unescape_charref
  File ""/base/data/home/apps/seoapp/1.28/mechanize/_html.py"", line 12, in 
    import sgmllib, ClientForm</p>
"
281097,"<p>I can finally manage with GAE's urlfetch instead of mechanizer. I can able to retrieve the response using the above said utility.</p>

<p>Thanks all for the great timely help.</p>

<p>^Ponmalar</p>
"
144225,"<p>Decimal defaults to 28 places of precision.<br/>
The only way to limit the number of digits it returns is by altering the precision.</p>
"
280336,"<p>self is <strong>always</strong> required when referring to the instance itself, except when calling the base class constructor (wx.Frame.__init__). All the other variables that you see in the examples (panel, basicLabel, basicText, ...) are just local variables - not related to the current object at all. These names will be gone when the method returns - everything put into self.foo will survive the end of the method, and be available in the next method (e.g. self.button).</p>
"
280562,"<p>ended up with this</p>

<pre><code>        parser = email.parser.Parser()
        self._email = parser.parse(open('/home/vinko/jlm.txt','r'))
        parts=self._email.get_payload()
        check=parts[0].get_content_type()
        if check == ""text/plain"":
            return parts[0].get_payload()
        elif check == ""multipart/alternative"":
            part=parts[0].get_payload()
            if part[0].get_content_type() == ""text/plain"":
                return part[0].get_payload()
            else:
                return ""cannot obtain the body of the email""
        else:
            return ""cannot obtain the body of the email""
</code></pre>
"
315515,"<p>You'll need a 2D array. Beware of [[0] * 8] * 8, instead use [[0 for _ in [0] * 8] for _ in [0] * 8]</p>

<p>White should be 1 and black -1 (Or vice versa, of course). This way you can do flips with *=-1 and keep blank blank
Double four loops will be able to total scores and determine if the game is done pretty well. map(sum,map(sum,board)) will give you the net score</p>

<p>Don't forget to check and see if the player can even move at the beginning of a round</p>
"
315615,"<p>How about setting up a catch-all pattern as the last item in your urls file and directing it to a generic ""no such page"" or even your homepage? In other words, turn 500's into requests for your homepage.</p>
"
314287,"<p>Django is supposed to be jython-compatible sinc version 1.0.</p>

<p><a href=""http://wiki.python.org/jython/DjangoOnJython"" rel=""nofollow"">This tutorial</a> is a bit outdated, but from there you can see there are no special issues.</p>
"
314621,"<p>Sorry, yes, 'type':'Purchase' is also one of the common values.Should have logged in to edit the question.</p>
"
162932,"<p>@<a href=""#160916"" rel=""nofollow"">John Millikin </a>- Thanks for the sqlreset tip, that put me on the right path. The sqlreset generated code that showed me that the <code>projects_project_techs</code> was never actually created. I ended up just deleting my deb.db database and regenerating it. <code>techs</code> then showed up as it should. </p>

<p>And just as a sidenote, I had to do an <code>admin.site.register(Tech)</code> to be able to create new instances of the class from the Project page too.</p>

<p>I'll probably post another question to see if there is a better way to implement model changes (since I'm pretty sure that is what caused my problem) without wiping the database.</p>
"
163108,"<pre><code>import os,urllib2
resp = urllib2.urlopen('http://www.example.com/index.html')
my_url = resp.geturl()

os.path.split(my_url)[1]

# 'index.html'
</code></pre>

<p>This is not openfile, but maybe still helps :)</p>
"
227875,"<pre><code>burninate = lambda x: x[:-4:-1]</code></pre>
"
142582,"<p><a href=""http://stackoverflow.com/questions/141351/how-do-i-find-what-is-using-memory-in-a-python-process-in-a-production-system#142571"">This answer</a> suggests making your program core dump and then continuing execution on another sufficiently similar box.</p>
"
280853,"<p><a href=""http://incubator.apache.org/thrift/"" rel=""nofollow"">Facebook's thrift</a> project may be a good answer. It uses a light-weight protocol to pass object around and allows you to use any language you wish. It may fall-down on security though as I believe there is none.</p>
"
142712,"<p>While <a href=""http://docs.turbogears.org/1.0/CRUDTemplate"" rel=""nofollow"">CRUDTemplate</a> looks mildly complex, I'd say that you can implement CRUD/ABCD using just about any ORM that you choose. It just depends on how much of it you with to automate (which generally means defining models/schemas ahead of time). You may learn more and have better control if you put together your own using SQLAlchemy or SQLObject, woth of which work great with TurboGears.</p>
"
142775,"<p>If your Python application runs in the 64-bit space, you will need to access a 64-bit installation of Oracle's oci.dll, rather than the 32-bit version. Normally you would update the system path to include the appropriate Oracle Home bin directory, prior to running the script. The solution may also vary depending on what component you are using to access Oracle from Python.</p>
"
142786,"<p>Well, it doesn't appear to be a deadlock situation. It throws an error saying remote server refused connection. However, like I said before, if i type the very same code into the interactive interpreter it works just fine. I'm wondering if the error is because the script is run through filebrowser.py?</p>
"
230476,"<p>I'm currently using JQuery for my GAE app and it works beautifully for me. I have a chart (google charts) that is dynamic and uses an Ajax call to grab a JSON string. It really seems to work fine for me.</p>
"
102162,"<p>Im not too familiar with AppEngine, or Googles web apis, but for a brute force approach you could write a script with something like mechanize (<a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""nofollow"">http://wwwsearch.sourceforge.net/mechanize/</a>) to simply walk through the login process before you begin doing the real work of the client.</p>
"
279985,"<p>Extract to stdout (unzip -p) and redirect to a file?  If there's more than one file in the zip, you could list the zip contents, and then extract one at a time.</p>

<pre><code>for n in `unzip -l test.zip | awk 'NR &gt; 3 &amp;&amp; NF == 4 { print $4 }'`; do unzip -p test.zip $n &gt; $n; done
</code></pre>

<p>(yeah, I know you tagged this 'python' :-) )</p>
"
280027,"<pre><code>&gt;&gt;&gt; keys = sorted(a, key=lambda k: (-a[k], k))
</code></pre>

<p>or</p>

<pre><code>&gt;&gt;&gt; keys = sorted(a)
&gt;&gt;&gt; keys.sort(key=a.get, reverse=True)
</code></pre>

<p>then</p>

<pre><code>print [(key, a[key]) for key in keys]
[('keyB', 2), ('keyA', 1), ('keyC', 1)]
</code></pre>
"
208731,"<p>Combined answer incorporating directory or specific list of filenames arguments:</p>

<pre><code>import sys
import os.path
import glob

def processFile(filename):
    fileHandle = open(filename, ""r"")
    for line in fileHandle:
        # do some processing
        pass
    fileHandle.close()

def outputResults(filename):
    output_filemask = ""out""
    fileHandle = open(""%s.%s"" % (filename, output_filemask), ""w"")
    # do some processing
    fileHandle.write('processed\n')
    fileHandle.close()

def processFiles(args):
    input_filemask = ""log""
    directory = args[1]
    if os.path.isdir(directory):
        print ""processing a directory""
        list_of_files = glob.glob('%s/*.%s' % (directory, input_filemask))
    else:
        print ""processing a list of files""
        list_of_files = sys.argv[1:]

    for file_name in list_of_files:
        print file_name
        processFile(file_name)
        outputResults(file_name)

if __name__ == '__main__':
    if (len(sys.argv) &gt; 1):
        processFiles(sys.argv)
    else:
        print 'usage message'
</code></pre>
"
208975,"<p>Looks like you might be able to use the <a href=""http://docs.python.org/library/binascii.html"" rel=""nofollow"">binascii</a> module</p>

<blockquote>
  <p>binascii.b2a_base64(data)</p>
  
  <p>Convert binary data to a line of ASCII characters in base64 coding. The return value is the converted line, including a newline char. The length of data should be at most 57 to adhere to the base64 standard.</p>
</blockquote>
"
209176,"<p>I think you can use jython to compile python to Java bytecode, and then compile that with GCJ.</p>
"
160965,"<p>I have continued to research this issue since I posted the question.  It looks like there are some attempts to address some of the needs I outlined, e.g. <a href=""http://www.minitage.org/doc/rst/about.html"" rel=""nofollow"">Minitage</a> and <a href=""http://reductivelabs.com/projects/puppet/"" rel=""nofollow"">Puppet</a> which take different approaches but both may accomplish what I want -- although Minitage does not explicitly state that it supports Windows.  Lacking any better options I will try to make either one of these or just extensive customized use of zc.buildout work for our needs, but I still feel like there must be better options out there.</p>
"
161500,"<p>Assuming your app is called ""projects"", the default name for your techs table will be projects_tech and the projects table will be projects_project.</p>

<p>The many-to-many table should be something like projects_project_techs</p>
"
60552,"<p>Install <a href=""http://hyperstruct.net/projects/mozlab"" rel=""nofollow"">Mozlab</a> in Firefox and enable the telnet server, then open a socket.</p>
"
314830,"<p>Why are you instantiating an ErrorList and writing to self._errors directly? Calling ""raise forms.ValidationError(msg)"" takes care of all that already. </p>

<p>And what does your template look like?</p>
"
315394,"<p>A programming solution would be to :</p>

<ul>
<li>open the log file</li>
<li>read the lines in a buffer</li>
<li>replace the lines that match the errors the bots caused</li>
<li>seek to the beginning of the file</li>
<li>write the new buffer</li>
<li>truncate the file to current pointer position</li>
<li>close</li>
</ul>

<p>Voila ! It's done !</p>
"
60218,"<p>The languages of choice of Firefox is Javascript. Unless you have a specific requirement that requires Python, I would advice you to use that.</p>
"
58460,"<p>Try <a href=""http://uche.ogbuji.net/tech/4suite/amara"" rel=""nofollow"">http://uche.ogbuji.net/tech/4suite/amara</a>. It is quite complete and has a straight forward set of access tools. Normal Unicode support, etc. </p>

<pre><code>#
#Output the XML entry
#
def genFileOLD(out,label,term,idval):
    filename=entryTime() + "".html""
    writer=MarkupWriter(out, indent=u""yes"")
    writer.startDocument()
    #Test element and attribute writing
    ans=namespace=u'http://www.w3.org/2005/Atom'
    xns=namespace=u'http://www.w3.org/1999/xhtml'
    writer.startElement(u'entry',
       ans,
       extraNss={u'x':u'http://www.w3.org/1999/xhtml' ,
                 u'dc':u'http://purl.org/dc/elements/1.1'})
    #u'a':u'http://www.w3.org/2005/Atom',
    #writer.attribute(u'xml:lang',unicode(""en-UK""))

    writer.simpleElement(u'title',ans,content=unicode(label))
    #writer.simpleElement(u'a:subtitle',ans,content=u' ')
    id=unicode(""http://www.dpawson.co.uk/nodesets/""+afn.split(""."")[0])
    writer.simpleElement(u'id',ans,content=id)
    writer.simpleElement(u'updated',ans,content=unicode(dtime()))
    writer.startElement(u'author',ans)
    writer.simpleElement(u'name',ans,content=u'Dave ')
    writer.simpleElement(u'uri',ans,
      content=u'http://www.dpawson.co.uk/nodesets/'+afn+"".xml"")
    writer.endElement(u'author')
    writer.startElement(u'category', ans)
    if (prompt):
        label=unicode(raw_input(""Enter label ""))
    writer.attribute(u'label',unicode(label))
    if (prompt):
        term = unicode(raw_input(""Enter term to use ""))
    writer.attribute(u'term', unicode(term))
    writer.endElement(u'category')
    writer.simpleElement(u'rights',ans,content=u'\u00A9 Dave 2005-2008')
    writer.startElement(u'link',ans)
    writer.attribute(u'href',
         unicode(""http://www.dpawson.co.uk/nodesets/entries/""+afn+"".html""))
    writer.attribute(u'rel',unicode(""alternate""))
    writer.endElement(u'link')
    writer.startElement(u'published', ans)
    dt=dtime()
    dtu=unicode(dt)
    writer.text(dtu)
    writer.endElement(u'published')
    writer.simpleElement(u'summary',ans,content=unicode(label))
    writer.startElement(u'content',ans)
    writer.attribute(u'type',unicode(""xhtml""))
    writer.startElement(u'div',xns)
    writer.simpleElement(u'h3',xns,content=unicode(label))
    writer.endElement(u'div')
    writer.endElement(u'content')
    writer.endElement(u'entry')
</code></pre>
"
280181,"<p>I guess I am going to answer my own question but I did receive a lot of help.  Thanks for all of the help.  I made S.LOTT's answer work after a few small corrections.  (They may be so small as to not be visible (inside joke)).  So now the question is why is this more Pythonic?  I think I see that it is less denser / works with the raw inputs instead of derivations / I cannot judge if it is easier to read  ---> though it is easy to read</p>

<h2>S.LOTT's Answer Corrected</h2>

<pre><code>row1=headerCells[0]
row2=headerCells[1]

i1= 0
i2= 0
result= []
while i1 != len(row1) or i2 != len(row2):
    if i1 == len(row1):
        result.append( ' '.join(row1[i1]) )
        i2 += 1
    elif i2 == len(row2):
        result.append( ' '.join(row2[i2]) )
        i1 += 1
    else:
        if int(row1[i1].get(""colspan"",""1"")) &lt; int(row2[i2].get(""colspan"",""1"")):
            c1= int(row1[i1].get(""colspan"",""1""))
            while c1 != int(row2[i2].get(""colspan"",""1"")): 
                txt1= ' '.join(row1[i1])  # needed to add when working adjust opposing case
                txt2= ' '.join(row2[i2])     # needed to add  when working adjust opposing case
                result.append( txt1 + "" "" + txt2 )  # needed to add when working adjust opposing case
                print 'stayed in middle', 'i1=',i1,'i2=',i2, ' c1=',c1
                c1 += 1
                i1 += 1    # Is this the problem it

        elif int(row1[i1].get(""colspan"",""1""))&gt; int(row2[i2].get(""colspan"",""1"")):
                # Fill extra cols from row2  Make same adjustment as above
            c2= int(row2[i2].get(""colspan"",""1""))
            while int(row1[i1].get(""colspan"",""1"")) != c2:
                result.append( ' '.join(row1[i1]) )
                c2 += 1
                i2 += 1
        else:
            assert int(row1[i1].get(""colspan"",""1"")) == int(row2[i2].get(""colspan"",""1""))
            pass


        txt1= ' '.join(row1[i1])
        txt2= ' '.join(row2[i2])
        result.append( txt1 + "" "" + txt2 )
        print 'went to bottom', 'i1=',i1,'i2=',i2
        i1 += 1
        i2 += 1
print result
</code></pre>
"
280248,"<p>Here's a rather Scheme way to do it:</p>

<pre><code>class cons:
        def __init__(self, f, r):
                self.__f = f
                self.__r = r
        def __str__(self):
                return ""(%s, %s)"" % (str(self.__f), str(self.__r))
        __repr__ = __str__
        class empty:
                def __init__(self): pass
                __repr__ = lambda self: ""empty""
                __str__ = __repr__
        empty = empty()
        def first(self): return self.__f
        def rest(self): return self.__r
</code></pre>

<p>I'm looking for a more python way, though, and ideally one that has easier to work with syntax than this:</p>

<pre><code>&gt;&gt;&gt; cons(12, cons(4, cons.empty))
(12, (4, empty))
&gt;&gt;&gt; cons(12, cons(4, cons.empty)).first()
12
&gt;&gt;&gt; cons(12, cons(4, cons.empty)).rest()
(4, empty)
</code></pre>
"
100768,"<p>For one the first example is shorter and looks nicer. As per the other posts what you choose also depends on what you really want to do with the comparison.</p>
"
100775,"<p>The answer is ""it depends"".</p>

<p>I use the first example if I consider 0, """", [] and False (list not exhaustive) to be equivalent to None in this context.</p>
"
100828,"<p>Personally, I chose a consistent approach across languages: I do <code>if (var)</code> (or equivalent) only if var is declared as boolean (or defined as such, in C we don't have a specific type). I even prefix these variables with a <code>b</code> (so it would be <code>bVar</code> actually) to be sure I won't accidentally use another type here.<br />
I don't really like implicit casting to boolean, even less when there are numerous, complex rules.</p>

<p>Of course, people will disagree. Some go farther, I see <code>if (bVar == true)</code> in the Java code at my work (too redundant for my taste!), others love too much compact syntax, going <code>while (line = getNextLine())</code> (too ambiguous for me).</p>
"
279167,"<p>Is the reportlab code not ok? The reason why using LaTeX might not be overkill is because pdf is a really low-level format. In pdf you do not get line-breaks automatically, you have to calculate line-widths yourself.</p>
"
279460,"<p>The obvious way would be to start the process in it's own shell.<br />
something like os.popen(""sh command"")  </p>
"
279627,"<p>What platform is this on? </p>

<p>You may have to actually feed events into the event loop, if it's running on Win32.</p>
"
316309,"<p>The ""right"" way to do this was documented in 1990 by <a href=""http://portal.acm.org/citation.cfm?id=93542&amp;type=proceeding"" rel=""nofollow"">Steele and White's and
Clinger's PLDI 1990</a> papers.</p>

<p>You might also look at <a href=""http://stackoverflow.com/questions/286061/python-decimal-place-issues-with-floats"">this</a> SO discussion about Python Decimal, including my suggestion to try using something like <a href=""http://www.ics.uci.edu/~eppstein/numth/frap.c"" rel=""nofollow"">frap</a> to rationalize a float.</p>
"
316811,"<p>This is somehow expected. FTPFileListProtocol isn't able to understand every FTP output, because, well, some are wacky. As explained in the docstring:</p>

<p>If you need different evil for a wacky FTP server, you can
override either C{fileLinePattern} or C{parseDirectoryLine()}.</p>

<p>In this case, it may be a bug: maybe you can improve fileLinePattern and makes it understand filename with spaces. If so, you're welcome to open a bug in the Twisted tracker.</p>
"
317214,"<p>I use the ping module by Lars Strand. Google for ""Lars Strand python ping"" and you will find a lot of references.</p>
"
317300,"<p>It may be that you need to read stderr from the child process.</p>
"
316103,"<p>Why not fix those ""bugs""? If a url pattern is not matched, then a proper error message should be shown. By adding those templates you will <a href=""http://www.codinghorror.com/blog/archives/000819.html"" rel=""nofollow"">help the user</a> and yourself :-)</p>
"
280572,"<p>When using immutable linked lists, consider using Python's tuple directly. </p>

<pre><code>ls = (1, 2, 3, 4, 5)

def first(ls): return ls[0]
def rest(ls): return ls[1:]
</code></pre>

<p>Its really that ease, and you get to keep the additional funcitons like len(ls), x in ls, etc.</p>
"
106860,"<p>This <a href=""http://stackoverflow.com/questions/43267/good-resources-for-writing-console-style-applications-for-windows"">previous StackOverflow question</a> should give you some more useful information.</p>
"
107637,"<p>I don't know anything about how XMLRPC could be extended but I did find <a href=""http://mail.python.org/pipermail/python-list/2006-May/381032.html"" rel=""nofollow"">this mail</a> about the subject:</p>

<blockquote>
  <p>In XML-RPC, everything is transmitted
  as a string, so I don't think that
  choice is really that bad - except of
  course for the additional clumsiness
  for invoking explicit conversion
  functions.</p>
  
  <p>But no, XML-RPC doesn't have a data
  type that can represent integers above
  2**32. If you can accept losing
  precision, you can use doubles (but
  you still would have to convert
  explicitly on the sender).</p>
</blockquote>
"
142502,"<p>If the code is working in the interactive interpreter when typed, but not when run directly then I would suggest seeing if your code has reached a deadlock on the socket, for example both ends are waiting for data from the other.  When typing into the interactive interpreter there is a longer delay between the execution of each line on code.</p>
"
229399,"<p>There is a library called <a href=""http://www.python.org/doc/2.4/lib/module-urlparse.html"" rel=""nofollow"">urlparse</a> that will parse the url for you, but still doesn't remove the / at the end so one of the above will be the best option</p>
"
229417,"<p>Just for fun, you can use a Regexp:</p>

<pre><code>import re
print re.search('/([^/]+)/?$', url).group(1)
</code></pre>
"
229758,"<p>I did not try it yet but <a href=""http://hamsterdb.com/"" rel=""nofollow"">Hamster DB</a> is promising and has a Python interface.</p>
"
278056,"<p>Functors can be defined this way in Python.  They're callable objects.  The ""binding"" merely sets argument values.</p>

<pre><code>class SomeFunctor( object ):
    def __init__( self, arg1, arg2=None ):
        self.arg1= arg1
        self.arg2= arg2
    def __call___( self, arg1=None, arg2=None ):
        a1= arg1 or self.arg1
        a2= arg2 or self.arg2
        # do something
        return
</code></pre>

<p>You can do things like</p>

<pre><code>x= SomeFunctor( 3.456 )
x( arg2=123 )

y= SomeFunctor( 3.456, 123 )
y()
</code></pre>
"
279123,"<p>Please take a look at the <a href=""http://sourceforge.net/projects/pywin32/"" rel=""nofollow"">python-win32</a> package, and, in particular, at its win32com API.</p>
"
103883,"<p>To make it a flattened list use either:</p>

<ol>
<li><a href=""http://code.activestate.com/recipes/121294/"" rel=""nofollow"">http://code.activestate.com/recipes/121294/</a></li>
<li><a href=""http://code.activestate.com/recipes/363051/"" rel=""nofollow"">http://code.activestate.com/recipes/363051/</a></li>
</ol>

<p>Then, <code>join</code> to make it a string.</p>
"
103887,"<p>For the second one, there is a built-in string method to do that :</p>

<pre><code>&gt;&gt;&gt; print ','.join(str(x) for x in li2)
""0,1,2,3,4,5,6,7,8""
</code></pre>

<p>For the first one, you can use join within a comprehension list :</p>

<pre><code>&gt;&gt;&gt; print "","".join(["","".join(str(x) for x in li])
""0,1,2,3,4,5,6,7,8""
</code></pre>

<p>But it's easier to use itertools.flatten :</p>

<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; print itertools.flatten(li)
[0,1,2,3,4,5,6,7,8]
&gt;&gt;&gt; print "","".join(str(x) for x in itertools.flatten(li))
""0,1,2,3,4,5,6,7,8""
</code></pre>

<p>N.B : itertools is a module that help you to deal with common tasks with iterators such as list, tuples or string... It's handy because it does not store a copy of the structure you're working on but process the items one by one.</p>

<p>EDIT : funny, I am learning plenty of way to do it. Who said that there was only one good way to do it ?</p>
"
105058,"<p>Just like in every other language, every thread in Python has access to the same variables. There's no distinction between the 'main thread' and child threads.</p>

<p>One difference with Python is that the Global Interpreter Lock means that only one thread can be running Python code at a time. This isn't much help when it comes to synchronising access, however, as all the usual pre-emption issues still apply, and you have to use threading primitives just like in other languages. It does mean you need to reconsider if you were using threads for performance, however.</p>
"
165925,"<p>There is no real point of doing getter/setters in python, you can't protect stuff anyway and if you need to execute some extra code when getting/setting the property look at the property() builtin (python -c 'help(property)')</p>
"
207593,"<p>You can use pylint, pychecker, pyflakes etc. from Emacs' <code>compile</code> command (<code>M-x compile</code>).</p>

<p>Hint: bind a key (say, F5) to <code>recompile</code>.</p>
"
207675,"<p>I've written web-apps with raw wsgi. Perhaps rolling out my own library at some point. I don't just like about large frameworks and such. I learned to hate http while writing in raw wsgi. You don't really like it after you realise how much stupid parsing and interpretation you need to upload a file.</p>

<p>Because of wsgi, python has tons of frameworks of different qualities. If you want to try my way, I'd guess you'd like to know werkzeug perhaps. It provides some things when you don't yet know how to do them. It only has perhaps too much of a 'framework' for me. In the end very well written framework ought exceed what I've written in wsgi though.</p>
"
209474,"<p>Python would be perfectly fine for text file manipulation. For learning, check <a href=""http://stackoverflow.com/questions/918/how-to-learn-python-good-example-code#964"">here</a>.</p>
"
162716,"<p><a href=""http://www.python.org/doc/2.6/library/os.html#os.walk"" rel=""nofollow"">os.walk</a> is your best bet for this.  I did the example below with .svn because I had that handy, and it worked great:</p>

<pre><code>import re

for (dirpath, dirnames, filenames) in os.walk("".""):
    if re.search(r'\.svn$', dirpath):
        for file in filenames:
            print file
</code></pre>
"
276164,"<p>I don't believe that there is a well-supported multi-platform library available. Remember that Python itself is written in C so any library is simply going to make a smart decision about which OS-specific code snippet to run, as you suggested above. </p>
"
105756,"<p>You should be able to add <code>@login_required</code> decorators across the board and be done with it.  Unless you have a boat-load of view functions, it shouldn't be too horrible.</p>
"
141317,"<p>Like so?</p>

<p>>>> [path for path in os.listdir(os.getcwd()) if os.path.isdir(path)]</p>
"
108512,"<p>I think it depends on the size of the site as to whether you need to step up from using SQLite, I've successfully used SQLite on several smaller live sites and it runs great.</p>
"
276350,"<p>When GAE throws a 500, you can see the actual error in the logs on your admin console. If that doesn't help, paste it here and we'll help further.</p>

<p>Also, does it work on the dev_appserver?</p>
"
276545,"<p>Even if there is not a specific example of calling WCF from Python, you should be able to make a fully SOAP compliant service with WCF. Then all you have to do is find some examples of how to call a normal SOAP service from Python.</p>

<p>The simplest thing will be to use the BasicHttpBinding in WCF and then you can support your own sessions by passing a session token with each request and response.</p>
"
318342,"<p>Slightly different alternative to Dustin's answer:</p>

<pre><code>sqlStmt=(""UPDATE apps.sometable SET lastmod=SYSDATE() where rec_id in (%s)""
    % ', '.join(['?' * len(record_ids])))
</code></pre>
"
318423,"<p>Ensure that PYTHONPATH has NumPy. Refer <a href=""http://www.python.org/doc/2.5.2/tut/node8.html"" rel=""nofollow"">The Module Search Path (section 6.1.2)</a> and <a href=""http://www.python.org/doc/2.5.2/inst/search-path.html"" rel=""nofollow"">Modifying Python's Search Path (section 4.1)</a>.</p>
"
55202,"<pre><code>d = {'b' : 'this is b', 'a': 'this is a' , 'c' : 'this is c'}
ks = d.keys()
ks.sort()
for k in ks:
    print ""this is "" + k
</code></pre>
"
317484,"<p>It does the same:</p>

<pre><code>cursor.execute('INSERT INTO mastertickets (%s, %s) VALUES (:%s, :%s)' % \
    tuple(sourcedest + sourcedest), dict(zip(sourcedest, (self.tkt.id, n))))
</code></pre>

<p>Never do that.</p>
"
317572,"<p>First a disclaimer: This is just an educated guess.</p>

<p>an ip-address is traditionally represented as four bytes - i.e. xxx.xxx.xxx.xxx, but is really a unsigned long. So you should convert the representation 192.168.1.1 to an unsiged int. you could convert it like this.</p>

<pre><code>ip=""192.168.1.1""
ip_long = reduce(lambda x,y:x*256+int(y), ip.split('.'), 0)
</code></pre>
"
317577,"<p>There's probably a better way, but this works:</p>

<pre><code>&gt;&gt;&gt; ip = ""192.168.1.1""
&gt;&gt;&gt; struct.unpack('&gt;I', struct.pack('BBBB', *map(int, ip.split('.'))))[0]
3232235777L
</code></pre>
"
317642,"<p>For a more thorough way of handling IPs (v6, CIDR-style stuff etc) check out how it's done in <a href=""http://www.mindrot.org/projects/py-radix/"" rel=""nofollow"">py-radix</a>, esp. <a href=""http://anoncvs.mindrot.org/index.cgi/py-radix/radix.c?revision=1.17&amp;view=markup"" rel=""nofollow"">prefix_pton</a>.</p>
"
56144,"<pre><code>/&lt;input\s+type=""hidden""\s+name=""([A-Za-z0-9_]+)""\s+value=""([A-Za-z0-9_\-]*)""\s*/&gt;/

&gt;&gt;&gt; import re
&gt;&gt;&gt; s = '&lt;input type=""hidden"" name=""fooId"" value=""12-3456789-1111111111"" /&gt;'
&gt;&gt;&gt; re.match('&lt;input\s+type=""hidden""\s+name=""([A-Za-z0-9_]+)""\s+value=""([A-Za-z0-9_\-]*)""\s*/&gt;', s).groups()
('fooId', '12-3456789-1111111111')
</code></pre>
"
230855,"<p>Should be able to pass it as a parameter.  something like:</p>

<pre><code>commands.getoutput('server stop -p password')
</code></pre>
"
230982,"<p>This seems to work better:</p>

<pre><code>import popen2

(stdout, stdin) = popen2.popen2('server stop')

stdin.write(""password"")
</code></pre>

<p>But it's not 100% yet. Even though ""password"" is the correct password I'm still getting su: Sorry back from the csh script when it's trying to su to root.</p>
"
275300,"<p>Does python even allow such usage? I should learn it then...</p>

<p>I think the interpreter doesn't expect any register to be changed. Try saving the registers that you use inside the function if you plan to use your assembler output like this.</p>

<p>Btw, call convention of x86_64 is different than regular x86. You may have trouble if you lose stack pointer alignment and mix external objects generated with other tools.</p>
"
275587,"<p>I'm not sure I understand the question.</p>

<p>The <a href=""http://www.sqlobject.org/SQLObject.html#dbconnection-database-connections"" rel=""nofollow"">SQLObject documentation</a> lists six kinds of connections available.  Further, the database connection (or scheme) is specified in a connection string.  Changing database connections from SQLite to MySQL is trivial.  Just change the connection string.</p>

<p>The <a href=""http://www.sqlobject.org/SQLObject.html#declaring-a-connection"" rel=""nofollow"">documentation</a> lists the different kinds of schemes that are supported.</p>
"
234301,"<p>To avoid having to answer the Password question in the python script I'm just going to run the script as root. This question is still unanswered but I guess I'll just do it this way for now.</p>
"
234741,"<p>I <em>thought</em> you could <code>def displayName(request, name=defaultObj)</code>; that's what I've done in the past, at least. What were you setting the default value to?</p>
"
234957,"<p>Here's a more procedural approach:</p>

<pre><code>#!/usr/bin/env python

a = 'this is [bracket test] ""and quotes test ""'

words = a.split()
wordlist = []

while True:
    try:
        word = words.pop(0)
    except IndexError:
        break
    if word[0] in '""[':
        buildlist = [word[1:]]
        while True:
            try:
                word = words.pop(0)
            except IndexError:
                break
            if word[-1] in '""]':
                buildlist.append(word[:-1])
                break
            buildlist.append(word)
        wordlist.append(' '.join(buildlist))
    else:
        wordlist.append(word)

print wordlist
</code></pre>
"
140091,"<p>You mentioned Python. Why not use Python? If someone can ""type in"" an expression in your DSL, they can type in Python.</p>

<p>You'll need some rules on structure of the expression, but that's a lot easier than implementing something new.</p>
"
207065,"<p>This seems like it's a pretty common problem.  I wonder why someone hasn't anyone developed a programmatic browser?  I'm envisioning a Firefox you can call from the command line with a URL as an argument and it will load the page, run all of the initial page load JS events and save the resulting file.</p>

<p>I mean Firefox, and other browsers already do this, why can't we simply strip off the UI stuff?  </p>
"
207096,"<p>I don't know what your actual application is, however, setting a hard limit on the total amount of data that a client can send could be useful in reducing your exposure to denial of service attacks, e.g. client connects and sends 100MB of data which could load your application unacceptably.</p>

<p>But it really depends on what you application is. Are you after a per line limit or a total per connection limit or what?</p>
"
207242,"<p>One of the answers in <a href=""http://stackoverflow.com/questions/166506/finding-local-ip-addresses-in-python"">this question</a> might help you. There seems to be a platform agnostic version for python, but I haven't tried it yet.</p>
"
318079,"<ol>
<li><p>Yes, it should be a 404, not a 500. 500 indicates something is trying to deal with the URL and is failing in the process. You need to find and fix that.</p></li>
<li><p>We have a similar problem. Since we are running Apache/mod_python, I chose to deal with it in .htaccess with mod_rewrite rules. I periodically look at the logs and add a few patterns to my ""go to hell"" list. These all rewrite to deliver a 1x1 pixel gif file. There is no tsunami of 404s to clutter up my log analysis and it puts minimal load on Django and Apache.</p></li>
</ol>

<p>You can't make these a**holes go away, so all you can do is minimize their impact on your system and get on with your life.</p>
"
318142,"<p>using system ping command to ping a list of hosts:</p>

<pre><code>import re
from subprocess import Popen, PIPE
from threading import Thread


class Pinger(object):
    def __init__(self, hosts):
        for host in hosts:
            pa = PingAgent(host)
            pa.start()

class PingAgent(Thread):
    def __init__(self, host):
        Thread.__init__(self)        
        self.host = host

    def run(self):
        p = Popen('ping -n 1 ' + self.host, stdout=PIPE)
        m = re.search('Average = (.*)ms', p.stdout.read())
        if m: print 'Round Trip Time: %s ms -' % m.group(1), self.host
        else: print 'Error: Invalid Response -', self.host


if __name__ == '__main__':
    hosts = [
        'www.pylot.org',
        'www.goldb.org',
        'www.google.com',
        'www.yahoo.com',
        'www.techcrunch.com',
        'www.this_one_wont_work.com'
       ]
    Pinger(hosts)
</code></pre>
"
106853,"<p>I would investigate using the <a href=""http://python.org/doc/2.5/lib/module-curses.html"" rel=""nofollow"">curses</a> module. It will take care of a lot of the details and let you focus on the higher level stuff.</p>
"
141972,"<p>It sounds like you want to create a grammar not a DSL.  I'd look into <a href=""http://antlr.org/"" rel=""nofollow"">ANTLR</a> which will allow you to create a specific parser that will interpret text and translate to specific commands.  ANTLR provides libraries for Python, SQL, Java, C++, C, C# etc.</p>

<p>Also, here is a fine example of an ANTLR <a href=""http://www.codeproject.com/KB/recipes/sota_expression_evaluator.aspx"" rel=""nofollow"">calculation engine</a> created in C#</p>
"
140228,"<p>You said nobody is going to want to install a server that downloads and executes arbitrary code at runtime.  However, that is exactly what your DSL will do (eventually) so there probably isn't that much of a difference.  Unless you're doing something very specific with the data then I don't think a DSL will buy you that much and it will frustrate the users who are already versed in SQL.  Don't underestimate the size of the task you'll be taking on.</p>

<p>To answer your question however, you will need to come up with a grammar for your language, something to parse the text and walk the tree, emitting code or calling an API that you've written (which is why my comment that you're still going to have to ship some code).  </p>

<p>There are plenty of educational texts on grammars for mathematical expressions you can refer to on the net, that's fairly straight forward.  You may have a parser generator tool like ANTLR or Yacc you can use to help you generate the parser (or use a language like Lisp/Scheme and marry the two up).  Coming up with a reasonable SQL grammar won't be easy.  But google 'BNF SQL' and see what you come up with.</p>

<p>Best of luck.</p>
"
140304,"<p>It really sounds like SQL, but perhaps it's worth to try using SQLite if you want to keep it simple?</p>
"
140776,"<p>If you want to continue using the syntax you mentioned (replace the match value instead of replacing the part that didn't match), and considering you will only have one group, you could use the code below.</p>

<pre><code>def getExpandedText(pattern, text, replaceValue):
    m = re.search(pattern, text)
    expandedText = text[:m.start(1)] + replaceValue + text[m.end(1):]
    return expandedText
</code></pre>
"
274160,"<p>You need an event handler in your bind expression</p>

<pre><code>self.bind(wx.EVT_MENU, subPanel(None, -1, 'TEST'),id=1)
</code></pre>

<p>needs to be changed to:</p>

<pre><code>self.bind(wx.EVT_MENU, &lt;event handler&gt;, &lt;id of menu item&gt;)
</code></pre>

<p>where your event handler responds to the event and instantiates the subpanel:</p>

<pre><code>def OnMenuItem(self, evt): #don't forget the evt
    sp = SubPanel(self, wx.ID_ANY, 'TEST')
    #I assume you will add it to a sizer
    #if you aren't... you should
    test_sizer.Add(sp, 1, wx.EXPAND)
    #force the frame to refresh the sizers:
    self.Layout()
</code></pre>

<p>Alternatively, you can instantiate the subpanel in your frame's <code>__init__</code> and call a <code>subpanel.Hide()</code> after instantiation, and then your menuitem event handler and call a show on the panel <code>subpanel.Show()</code></p>

<p>Edit: Here is some code that will do what I think that you are asking:</p>

<pre><code>#!usr/bin/env python

import wx

class TestFrame(wx.Frame):
    def __init__(self, parent, *args, **kwargs):
        wx.Frame.__init__(self, parent, *args, **kwargs)
        framesizer = wx.BoxSizer(wx.VERTICAL)
        mainpanel = MainPanel(self, wx.ID_ANY)
        self.subpanel = SubPanel(self, wx.ID_ANY)
        self.subpanel.Hide()
        framesizer.Add(mainpanel, 1, wx.EXPAND)
        framesizer.Add(self.subpanel, 1, wx.EXPAND)
        self.SetSizerAndFit(framesizer)

class MainPanel(wx.Panel):
    def __init__(self, parent, *args, **kwargs):
        wx.Panel.__init__(self, parent, *args, **kwargs)
        panelsizer = wx.BoxSizer(wx.VERTICAL)
        but = wx.Button(self, wx.ID_ANY, ""Add"")
        self.Bind(wx.EVT_BUTTON, self.OnAdd, but)
        self.panel_shown = False
        panelsizer.Add(but, 0)
        self.SetSizer(panelsizer)

    def OnAdd(self, evt):
        if not self.panel_shown:
            self.GetParent().subpanel.Show()
            self.GetParent().Fit()
            self.GetParent().Layout()
            self.panel_shown = True
        else:
            self.GetParent().subpanel.Hide()
            self.GetParent().Fit()
            self.GetParent().Layout()
            self.panel_shown = False

class SubPanel(wx.Panel):
    def __init__(self, parent, *args, **kwargs):
        wx.Panel.__init__(self, parent, *args, **kwargs)
        spsizer = wx.BoxSizer(wx.VERTICAL)
        text = wx.StaticText(self, wx.ID_ANY, label='I am a subpanel')
        spsizer.Add(text, 1, wx.EXPAND)
        self.SetSizer(spsizer)

if __name__ == '__main__':
    app = wx.App()
    frame = TestFrame(None, wx.ID_ANY, ""Test Frame"")
    frame.Show()
    app.MainLoop()
</code></pre>
"
274338,"<p>gcc regularly changes how it handles C++ almost every minor release. Of course, this is more a consequence of gcc tightening how they follow the rules, and less of C++ itself changing.</p>
"
274412,"<p>Well its because its been encrypted with some terrible scheme that just changes the ord() of the character by some request, so the string coming out of the database has been encrypted and this decrypts it.  What you supplied above does not seem to work.  In the database it is latin-1, django converts it to unicode, but I cannot pass it to the function as unicode, but when i try and encode it to latin-1 i see that error.</p>
"
320285,"<p>Have you tried the get_payload( [i[, decode]]) method? Unlike walk it is not documented to  recursively open attachments.</p>
"
320301,"<p>I'm understanding your questions to mean ""I have to check all attachments of an email, but if an attachment is also an email, I want to ignore it.""  Either way this answer should lead you down the right path.</p>

<p>What I think you want is <code>mimetypes.guess_type()</code>.  Using this method is also much better than just checking against a list of exentions.</p>

<pre><code>def check(self, msg):
    import mimetypes

    for part in msg.walk():
        if part.get_filename() is not None:
            filenames = [n for n in part.getaltnames() if n]
            for filename in filenames:
                type, enc = mimetypes.guess_type(filename)
                if type.startswith('message'):
                    print ""This is an email and I want to ignore it.""
                else:
                    print ""I want to keep looking at this file.""
</code></pre>

<p>Note that if this still looks through attached emails, change it to this:</p>

<pre><code>def check(self, msg):
    import mimetypes

    for part in msg.walk():
        filename = part.get_filename()
        if filename is not None:
            type, enc = mimetypes.guess_type(filename)
            if type.startswith('message'):
                print ""This is an email and I want to ignore it.""
            else:
                part_filenames = [n for n in part.getaltnames() if n]
                for part_filename in part_filenames:
                    print ""I want to keep looking at this file.""
</code></pre>

<p><a href=""http://docs.python.org/dev/library/mimetypes.html"" rel=""nofollow"">MIME types documentation</a></p>
"
320329,"<p>Here's a pair of small corrections.</p>

<pre><code>def children(self):
    stack = [self.entities]
    for e in stack:
        yield e
        if e.entities:
            stack.extend(e.entities)
</code></pre>

<p>I actually think the generator, using append, isn't visiting all the nodes. I think you mean to <code>extend</code> the stack with all entities, not <code>append</code> a simple list of entities to the stack.</p>

<p>Also, when the <code>for</code> loop terminates, the <code>while</code> loop in your original example will also terminate because there's no change to the empty stack after the <code>for</code> loop.</p>
"
52179,"<p>Thanks for the Oracle timings, that's the kind of stuff I'm looking for (disappointing though :-)</p>

<p>Materialized views are probably worth considering as I think I can precompute the most interesting forms of this query for most users.</p>

<p>I don't think query round trip time should be very high as i'm running the the queries on the same machine that runs Postgres, so it can't add much latency?</p>

<p>I've also done some checking into the cache sizes, and it seems Postgres relies on the OS to handle caching, they specifically mention BSD as the ideal OS for this, so I thinking Mac OS ought to be pretty smart about bringing the table into memory.  Unless someone has more specific params in mind I think more specific caching is out of my control.</p>

<p>In the end I can probably put up with 200 ms response times, but knowing that 7 ms is a possible target makes me feel unsatisfied, as even 20-50 ms times would enable more users to have more up to date queries and get rid of a lots of caching and precomputed hacks.</p>

<p>I just checked the timings using MySQL 5 and they are slightly worse than Postgres.  So barring some major caching breakthroughs, I guess this is what I can expect going the relational db route.</p>

<p>I wish I could up vote some of your answers, but I don't have enough points yet.</p>
"
321123,"<p>Probably the easiest way: install <a href=""http://plone.org/products/windowz"" rel=""nofollow"" title=""windowz"">windowz</a> inside your site. That way you get a page with an iframe in your plone layout. Make sure the php script outputs a regular html page and configure your windowz page with that url. Done.</p>

<p>Works great for existing in-company phonebook applications and so.</p>
"
55399,"<pre><code>/&lt;input type=""hidden"" name=""fooId"" value=""([\d-]+)"" \/&gt;/
</code></pre>
"
56032,"<p>Instead of giving the number of requests as a fixed value, why not use a scaling factor instead? At the moment, you're treating requests as a limited quantity, and randomising the days on which those requests fall. It would seem more reasonable to treat your requests-per-day as independent.</p>

<pre><code>from datetime import *
from random import *

timeline = []
scaling = 10
start_date = date(2008, 5, 1)
end_date = date(2008, 6, 1)

num_days = (end_date - start_date).days + 1
days = [start_date + timedelta(i) for i in range(num_days)]
requests = [int(scaling * weibullvariate(0.5, 2)) for i in range(num_days)]
timeline = zip(days, requests)
timeline
</code></pre>
"
56102,"<p>I rewrote the code above to be shorter (but maybe it's too obfuscated now?)</p>

<pre><code>timeline = (start_date + timedelta(days=days) for days in count(0))
how_many_days = (end_date - start_date).days
pick_a_day = lambda _:int(how_many_days * weibullvariate(0.5, 2))
days = sorted(imap(pick_a_day, xrange(how_many_responses)))
histogram = zip(timeline, (len(list(responses)) for day, responses in groupby(days)))
print '\n'.join((d.strftime('%Y-%m-%d ') + ""*"" * c) for d,c in histogram)
</code></pre>
"
319927,"<p>You may also wish to consider the application of a ""fuzzy logic"" loop to analyze positions. Reversi/Othello is notorious for forcing players to consider certain strategic gains against strategic losses for each move, as well as prioritizing one positive move over another.</p>

<p>A fuzzy system would give you greater control over testing move selection by setting various settings against each other, as well as giving you the ability to create multiple ""personalities"" to play against by shifting the various weights.</p>
"
320093,"<p>What about the example named ""<a href=""http://docs.python.org/library/email-examples.html"" rel=""nofollow"">Hereâs an example of how to unpack a MIME message like the one above, into a directory of files</a>""? It looks close from what you want.</p>

<pre><code>import email
...
msg = email.message_from_file(fp)
...
for part in msg.walk():
    # multipart/* are just containers
    if part.get_content_maintype() == 'multipart':
        continue
    # Applications should really sanitize the given filename so that an
    # email message can't be used to overwrite important files
    filename = part.get_filename()
    if not filename:
        ext = mimetypes.guess_extension(part.get_content_type())
    ...
</code></pre>
"
320109,"<p>I don't know too much about Python internals of function calls, but I really can't imagine that your code snippet is faster than recursively traversing the tree.</p>

<p>The call stack (used for function calls, including recursive ones) is typically very fast. Going to the next object will only cost you a single function call. But in your snippet - where you use a stack object, going to the next object will cost you a stack.append (possibly allocating memory on heap), a stack.push (possibly freeing memory from heap), and a yield.</p>

<p>The main problem with recursive calls is that you might blow the stack if your tree gets too deep. This isn't likely to happen.</p>
"
110110,"<p>xpdf is probably a good reference implementation for this sort of problem.  I have successfully used them to open encrypted pdfs before.</p>
"
275281,"<p>I just learned something while grazing the Hidden Features of Python thread.
<a href=""http://stackoverflow.com/questions/101268/hidden-features-of-python#143636"">Python's re compiler has a debug mode</a>! (Who knew? Well, apparently someone did :-) Anyway, it's worth a read.</p>
"
322892,"<p>You probably want to create an opener with these handlers and apply it to urllib2.
With these applied your cookies are handled and you'll be redirected, if server decides it wants you somewhere else.</p>

<pre><code># Create handlers
cookieHandler = urllib2.HTTPCookieProcessor() # Needed for cookie handling
redirectionHandler = urllib2.HTTPRedirectHandler() # needed for redirection (not needed for javascript redirect?)

# Create opener
opener = urllib2.build_opener(cookieHandler,redirectionHandler)

# Install the opener
urllib2.install_opener(opener)
</code></pre>
"
51200,"<p>In addition to the places where they're syntactically required like the string % operation and for multiple return values, I use tuples as a form of lightweight classes.  For example, suppose you have an object that passes out an opaque cookie to a caller from one method which is then passed into another method.  A tuple is a good way to pack multiple values into that cookie without having to define a separate class to contain them.</p>

<p>I try to be judicious about this particular use, though.  If the cookies are used liberally throughout the code, it's better to create a class because it helps document their use. If they are only used in one place (e.g. one pair of methods) then I might use a tuple. In any case, because it's Python you can start with a tuple and then change it to an instance of a custom class without having to change any code in the caller.</p>
"
273204,"<p>If you're using CDLL to wrap a C library in python, and this is 64-bit linux, there's a good chance that you're CDLL wrapper is misconfigured.  CDLL defaults to int return types on all platforms (should be a long long on 64-bit systems) and just expects you to pass the right arguments in.  You may need to verify the CDLL wrapper in this case...</p>
"
273212,"<p>In addition to all above one can quickly implement an adhoc tracer via the <a href=""http://www.python.org/doc/2.5.2/lib/module-trace.html"" rel=""nofollow"">trace module</a>.</p>
"
273386,"<p>There are a few possible methods <a href=""http://www.sommarskog.se/share_data.html"" rel=""nofollow"">here</a>. If the result sets are all the same, you might be able to use the INSERT...EXEC method. Otherwise OPENQUERY might work.</p>
"
112432,"<p>Not without swapping widget trees in and out, which I don't think can be done cleanly with Tk.  Other toolkits can do this a little more elegantly.</p>

<ul>
<li>COM/VB/MFC can do this with an ActiveX control - you can hide/show multiple ActiveX controls in the same region.  Any of the containers will let you do this by changing the child around.  If you're doing a windows-specific program you may be able to accomplish it this way.</li>
<li>QT will also let you do this in a similar manner.</li>
<li>GTK is slightly harder.</li>
</ul>
"
138970,"<p>If your script always requires an Administrator's privileges then:    </p>

<pre><code>runas /user:Administrator ""python your_script.py""
</code></pre>
"
321534,"<p>/Developer/SDKs/MacOSX10.4u.sdk/usr/local/lib is just a link to /usr/local/lib
after deleting files that caused the warnings I'm getting :</p>

<pre><code>ld: warning in .libs/_cv_la-_cv.o, file is not of required architecture
ld: warning in .libs/_cv_la-error.o, file is not of required architecture
ld: warning in .libs/_cv_la-pyhelpers.o, file is not of required architecture
ld: warning in .libs/_cv_la-cvshadow.o, file is not of required architecture
ld: warning in ../../../cv/src/.libs/libcv.dylib, file is not of required architecture
ld: warning in /Users/Pietras/opencv/cxcore/src/.libs/libcxcore.dylib, file is not of required architecture
Undefined symbols for architecture i386: ... `
</code></pre>

<p>And these files are created by make.</p>

<p>gcc: i686-apple-darwin9-gcc-4.0.1</p>

<p>$PATH:</p>

<pre><code>/Library/Frameworks/Python.framework/Versions/Current/bin:/Library/Frameworks/Python.framework/Versions/Current/bin:/sw/bin:/sw/sbin:/opt/local/bin:/opt/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin:/usr/local/AVRMacPack/bin:/usr/X11R6/bin
</code></pre>

<p>XCode 3 (latest)</p>

<p>Python 2.5.1 (r251:54869, Apr 18 2007, 22:08:04) - MacPython from python.org
(tried to downgrade and use it instead of 2.5.2, but that doesn't work anymore...)</p>

<pre><code>which python
/Library/Frameworks/Python.framework/Versions/Current/bin/python
</code></pre>

<p>I didn't find any Python OpenCV binaries for OS X.
I've tried to make it while setting python2.4 or 2.5 from macports as default and it compiles and installs, but when I try to import there is a bus error or Fatal Python error Interpreter not initialized (version mismatch?)
 and it quits.</p>
"
166509,"<p>Do you have standard database-driven sessions? Is caching enabled in settings?</p>
"
165896,"<p>Python does not need to define accessors right from the beginning, since converting attributes into properties is quick and painless. See the following for a vivid demonstration:</p>

<p><a href=""http://www.archive.org/details/SeanKellyRecoveryfromAddiction"" rel=""nofollow"">Recovery from Addiction</a></p>
"
138317,"<p>Also try</p>

<pre><code>pydoc -p 11111
</code></pre>

<p>Then type in web browser <a href=""http://localhost:11111"" rel=""nofollow"">http://localhost:11111</a></p>

<p>EDIT: of course you can use any other value for port number instead of 11111</p>
"
138479,"<p>Two possible solutions</p>

<ol>
<li>Rebuild the sizer with the radio widgets each time you have to make a change</li>
<li>Hold the radio button widgets in a list, and call SetLabel each time you have to change their labels.</li>
</ol>
"
140066,"<p>Why not create a language that when it ""compiles"" it generates SQL or whatever query language your datastore requires ?</p>

<p>You would be basically creating an abstraction over your persistence layer.  </p>
"
138598,"<p>Sorry to break your hopes, but you need a push-down automata to do that. There is more info here:
<a href=""http://en.wikipedia.org/wiki/Pushdown_automaton"" rel=""nofollow"">Pushdown Automaton</a></p>

<p>In short, Regular expressions, which are finite state machines can only read and has no memory while pushdown automaton has a stack and manipulating capabilities.</p>

<p>Edit: spelling...</p>
"
111253,"<p>It's something you can put ""(args)"" after and expect it to work.  A callable is usually a method or a class.  Methods get called, classes get instantiated.</p>
"
139082,"<p>In the PyQT source code distribution, look at the file:</p>

<blockquote>
  <p>examples/widgets/sliders.pyw</p>
</blockquote>

<p>Or there is a minimal example <a href=""http://www.zetcode.com/tutorials/pyqt4/widgets/"" rel=""nofollow"">here</a> (I guess I shouldn't copy paste because of potential copyright issues)</p>
"
181138,"<p>Look into the book ""Managing Gigabytes"" it covers storage and retrieval of huge amounts of plain text data -- eg. both compression and actual searching, and a variety of the algorithms that can be used for each.</p>

<p>Also for plain text retrieval you're best off using a vector based search system rather than a keyword->document indexing system as vector based systems can be much faster, and, more importantly can provide relevancy ranking relatively trivially.</p>
"
205726,"<p>You can use <a href=""http://www.logilab.org/857"" rel=""nofollow"">pylint</a> for such things and there seems to be a way to integrate it into <a href=""http://www.emacswiki.org/cgi-bin/wiki/PythonMode#toc8"" rel=""nofollow"">emacs</a>, but I've never done the latter b/c I'm a vim user.</p>
"
345433,"<p>Using itertools.izip(), instead of zip() as in some of the other answers, will improve performance:</p>

<p>As ""pydoc itertools.izip"" shows:  ""Works like the zip() function but consumes less memory by returning an iterator instead of a list.""</p>

<p>Itertools.izip will also work properly even if one of the iterators is infinite.</p>
"
345752,"<p>That code is a big fugly and clever for my tastes, but I suppose there's not anything wrong with it per se.  I think this is really just a case of ""make it all fit in one line"" syndrome.</p>

<p>I personally would have opted for the first form though.</p>
"
345790,"<p>require statement from <a href=""http://peak.telecommunity.com/DevCenter/PkgResources#basic-workingset-methods"" rel=""nofollow"">pkg_resources</a> maybe what you need. </p>
"
345799,"<p>As I understand it from this and previous questions you only need one path to be in <code>sys.path</code>. If we are talking about <code>git</code> as VCS (mentioned in previous question) when only one branch is checked out at any time (single working directory). You can switch, merge branches as frequently as you like.</p>
"
345921,"<p>I'm thinking of something along the lines of a more 'push-based' kind of solution. Instead of importing the shared objects (be they for configuration, or utility functions of some sort), have the top-level <strong>init</strong> export it, and each intermediate <strong>init</strong> import it from the layer above, and immediately re-export it. </p>

<p>I'm not sure if I've got the python terminology right, please correct me if I'm wrong. </p>

<p>Like this, any module that needs to use the shared object(which in the context of this example represents configuration information) simply imports it from the <strong>init</strong> at its own level.</p>

<p>Does this sound sensible/feasible?</p>
"
9080,"<p>Bartosz/To clarify ""This worked okay, but there was no easy way of checking if x[3][24] was supposed to exist or not""</p>

<p><code>x['some show'][3][24]</code> would return season 3, episode 24 of ""some show"". If there was no season 3, I want the pseudo-dict to raise tvdb<em>seasonnotfound, if ""some show"" doesn't exist, then raise tvdb</em>shownotfound</p>

<p>The current system of a series of classes, each with a <code>__getitem__</code> - Show checks <code>if self.seasons.has_key(requested_season_number)</code>, the Season class checks <code>if self.episodes.has_key(requested_episode_number)</code> and so on.</p>

<p>It works, but it there seems to be a lot of repeated code (each class is basically the same, but raises a different error)</p>
"
10148,"<p>The folks before me've nailed it, but if you really want it on one line, you can do this:</p>

<pre><code>(signum, exitstatus) = (status &amp; 0xFF, (status &gt;&gt; 8) &amp; 0xFF)
</code></pre>

<p>EDIT: Had it backwards.</p>
"
11128,"<p>Yes, results are the ONLY thing that matters. The real chore is writing a framework that allows your generated code to run independently... spend your time there.</p>
"
51668,"<p>I don't think that your results are all that surprising -- if anything it is that Postgres is so fast.</p>

<p>Does the Postgres query run faster a second time once it has had a chance to cache the data?  To be a little fairer your test for Java and Python should cover the cost of acquiring the data in the first place (ideally loading it off disk).</p>

<p>If this performance level is a problem for your application in practice but you need a RDBMS for other reasons then you could look at <a href=""http://www.danga.com/memcached/"" rel=""nofollow"">memcached</a>.  You would then have faster cached access to raw data and could do the calculations in code.</p>
"
51675,"<p>I Don't know of any cross-platform way to achieve this, but maybe a good workaround for you would be to write a wrapper class that checks the operating system and uses the best method for each.</p>

<p>For Windows, there's the <a href=""http://aspn.activestate.com/ASPN/docs/ActivePython/2.2/PyWin32/win32api__GetDiskFreeSpaceEx_meth.html"" rel=""nofollow"">GetDiskFreeSpaceEx</a> method in the win32 extensions.</p>
"
51817,"<p>One other thing that an RDBMS generally does for you is to provide concurrency by protecting you from simultaneous access by another process.  This is done by placing locks, and there's some overhead from that.</p>

<p>If you're dealing with entirely static data that never changes, and especially if you're in a basically ""single user"" scenario, then using a relational database doesn't necessarily gain you much benefit.</p>
"
51976,"<p>You need to increase postgres' caches to the point where the whole working set fits into memory before you can expect to see perfomance comparable to doing it in-memory with a program.</p>
"
322059,"<p>Ok, I kind of worked it out</p>

<p>It needs to be compiled with python from macports or whatever. Then I need to run <code>/System/Library/Frameworks/Python.framework/Versions/2.5/bin/python2.5</code> (this is my previous python version) and there OpenCV just works.</p>
"
322600,"<p>The Java component <code>dbUnit</code> does a lot of XML comparisons, so you might find it useful to look at their approach (especially to find any gotchas that they may have already addressed).</p>
"
16875,"<p>If you are using a framework like <a href=""http://www.djangoproject.com/"" rel=""nofollow"">django</a>, the framework can easily do this for you using standard filters.  In fact, I'm pretty sure django automatically does it unless you tell it not to.</p>

<p>Otherwise, I would recommend using some sort of regex validation before accepting inputs from forms.  I don't think there's a silver bullet for your problem, but using the re module, you should be able to construct what you need.</p>
"
114002,"<p>Don't use a bazooka to kill a fly. Use something simple just like SQLite. There are all the tools you need for every modern languages and you can just do :</p>

<pre><code>""SELECT word FROM dict WHERE word LIKE ""user_entry%""
</code></pre>

<p>It's lightning fast and a baby could do it. What's more it's portable, persistent and so easy to maintain.</p>

<p>Python tuto :</p>

<p><a href=""http://www.initd.org/pub/software/pysqlite/doc/usage-guide.html"" rel=""nofollow"">http://www.initd.org/pub/software/pysqlite/doc/usage-guide.html</a></p>
"
271891,"<p>If you have the budget, LoadRunner would be perfect for this.</p>
"
112843,"<p>If your dictionary is really big, i'd suggest indexing with a python text index (PyLucene - note that i've never used the python extension for lucene)  The search would be efficient and you could even return a search 'score'.</p>

<p>Also, if your dictionary is relatively static you won't even have the overhead of re-indexing very often.</p>
"
272845,"<p>Give MySQL a script to run that's separate from the PHP script:</p>

<pre><code>system('mysql -u root -pxxxx db_name &lt; script.mysql');
</code></pre>
"
272894,"<p>In addition to what acrosman said, you can also use the <code>-e</code> switch to pass SQL from the command line.</p>

<pre><code>$sql = ""....."";
system(""mysql -u root -pxxxx db_name -e \""$sql\"""");
</code></pre>

<p>Also, I hope your not actually connecting to the database as root from a PHP application.</p>
"
273116,"<p>The Grinder is right up your ally with both Java and Python, that handles most web services, (SOAP/REST/CORBA/RMI/JMS/EJB) etc.</p>

<p><a href=""http://grinder.sourceforge.net/"" rel=""nofollow"">http://grinder.sourceforge.net/</a></p>
"
237872,"<p>Maybe the <a href=""http://www.python.org/doc/2.5.2/lib/module-pprint.html"" rel=""nofollow"">pretty print</a> module will help:</p>

<pre><code>&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pformat({ ""my key"": ""my value""})
""{'my key': 'my value'}""
&gt;&gt;&gt;
</code></pre>
"
17287,"<p>You can use the <a href=""http://www.chilkatsoft.com/python.asp"" rel=""nofollow"">Chilkat</a> library.  It's commercial, but has a free evaluation and seems pretty nice.</p>

<p>Here's an example I got from <a href=""http://www.example-code.com/python/zip.asp"" rel=""nofollow"">here</a>:</p>

<pre><code>import chilkat

# Demonstrates how to create a WinZip-compatible 128-bit AES strong encrypted zip
zip = chilkat.CkZip()
zip.UnlockComponent(""anything for 30-day trial"")

zip.NewZip(""strongEncrypted.zip"")

# Set the Encryption property = 4, which indicates WinZip compatible AES encryption.
zip.put_Encryption(4)
# The key length can be 128, 192, or 256.
zip.put_EncryptKeyLength(128)
zip.SetPassword(""secret"")

zip.AppendFiles(""exampleData/*"",True)
zip.WriteZip()
</code></pre>
"
19389,"<p>maybe you should take the approach of defaulting to: ""the filename is correct"" and work from there to disprove that statement:</p>

<p>with the fact that you only allow filenames with: 'show name', 'season number x episode number' and 'episode name', you know for certain that these items should be separated by a ""-"" (dash) so you have to have 2 of those for a filename to be correct.<br>
if that checks out, you can use your code to check that the show name matches the show name as seen in the parent's parent folder (case insensitive i assume), the season number matches the parents folder numeric value (with or without an extra 0 prepended).</p>

<p>if however you don't see the correct amount of dashes you instantly know that there is something wrong and stop before the rest of the tests etc.</p>

<p>and separately you can check if the file <code>folder.jpg</code> exists and take the necessary actions. <strong>or</strong> do that first and filter that file from the rest of the files in that folder.</p>
"
340815,"<p>I don't know what Paramiko is, and there must be a log level setting for sure, but if you are desperate and looking for a temporary solution and if your app is single threaded</p>

<pre><code>import sys
dev_null = sys.stdout = sys.stderr = open('/dev/null', 'w')
try:
.
. connect()
.
finally:
  dev_null.close()
</code></pre>

<p>you can use StringIO for output also, if you are on an OS not have a '/dev/null'</p>
"
340877,"<p>One item that has not come up is the size of the current code base.  Depending on how much code there is should influence your decision.  </p>

<p><a href=""http://www.joelonsoftware.com/articles/fog0000000069.html"" rel=""nofollow"">Joel Spolsky's</a> argument to never rewrite is valid in the context of a code base the size of Netscape.  Whereas a smaller code base code significantly benefit from the rewrite.</p>
"
341391,"<p>A decorator is called as soon as the decorated function is defined. It is equivalent to writing something like this:</p>

<pre><code>def __do_stuff(...):
    ...

do_stuff = get_booking(__do_stuff)
</code></pre>
"
341406,"<p>python decorators are functions applied to a function to transform it:</p>

<pre><code>@my_decorator
def function (): ...
</code></pre>

<p>is like doing this: </p>

<pre><code>def function():...
function = my_decorator(function)
</code></pre>

<p>What you want to do is:</p>

<pre><code>def get_booking(f=None):
    def wrapper(request, **kwargs):
        print ""Calling get_booking Decorator""
        booking = _get_booking_from_session(request)
        if booking == None:
            # we don't have a booking in our session.
            return HttpRedirect('/')
        else:
            return f(request=request, booking=booking, **kwargs)
    return wrapper
</code></pre>
"
341444,"<p>I would assume so, I have Python 2.4, 2.5 and 2.6 installed side-by-side on the same computer.</p>
"
182193,"<p>Django tutorial <a href=""http://docs.djangoproject.com/en/dev/topics/install/"" rel=""nofollow"">How to install Django</a> provides a good example how a web-development Python environment may look.</p>
"
237708,"<p>And a slightly less-optimal method, by the way, if you're stuck using retrlines() for some reason, is to pass a function as the second argument to retrlines(); it'll be called for each item in the list. So something like this (assuming you have an FTP object named 'ftp') would work as well:</p>

<pre><code>filenames = []
ftp.retrlines('LIST', lambda line: filenames.append(line.split()[-1]))
</code></pre>

<p>The list 'filenames' will then be a list of the file names.</p>
"
237901,"<p>@Vinko: perhaps make calcBaseHitNumbers, do the ""if not self.calculatedBase:"" check internally, and just no-op if it's been done before. That said, I can't see the pressing need for precalculating this information. But I'm no Python performance expert.</p>
"
271220,"<p>I think you will have to resort to ""raw sql"" .. kinda thing .. <br>
look here: <a href=""http://docs.djangoproject.com/en/dev/topics/db/sql/"" rel=""nofollow"">http://docs.djangoproject.com/en/dev/topics/db/sql/</a></p>

<p>you need a ""connection"" to your other database, 
if you look at <code>django/db/__init__.py</code> around line 39 (in my version ..)</p>

<p><code> connection = backend.DatabaseWrapper(**settings.DATABASE_OPTIONS) </code></p>

<p>try to take it from there ..<br>
P.S. I haven't really tried this or anything .. just trying to point in the general direction of what I think might solve your problem.</p>
"
271693,"<p>Well, you parse the email header into a dictionary. And then you check if Content-Transfer-Encoding is set, and if it = ""base64"" or ""base-64"".</p>
"
113374,"<p>If I understood you correctly, then the answer is: You can't.</p>

<p>intelligence should be an attribute of WizardPageSimple, if you'd want both classes to inherit it.</p>

<p>Depending on your situation, you might try to extract intelligence and related attributes into another baseclass. Then you could inherit from both:</p>

<pre><code>class MOS(wiz.WizardPageSimple, wiz.IntelligenceAttributes): # Or something like that.
</code></pre>

<p>In that case you <strong>must</strong> use the co-operative super. In fact, you should be using it already. Instead of calling </p>

<pre><code>wiz.WizardPageSimple.__init__(self, parent)
</code></pre>

<p>call</p>

<pre><code>super(MOS, self).__init__(self, parent)
</code></pre>
"
270251,"<p>How about using something like boost::regex?</p>

<pre>
// pseudo code, may or may not compile
bool match_except_numbers(const std::string& s1, const std::string& s2)
{
    static const boost::regex fooNumberBar(""foo\\d+bar"");
    return boost::match(s1, fooNumberBar) && boost::match(s2, fooNumberBar);
}
</pre>
"
324172,"<p>I'm pretty sure some Regex-Ninja*, would give you a more or less sane way to do that (or as I now see others have posted: ways to write two expressions on one line...)</p>

<p>But I'm wondering why you want to do split it with just one expression? 
For such a simple split, it's probably faster to do two than to create some advanced either-or logic. If you split twice it's safer too: </p>

<p>I guess you want to separate the path, the file name and the file extension, if you split on '/' first you know the filename should be in the last array index, then you can try to split just the last index to see if you can find the file extension or not. Then you don't need to care if ther is dots in the path names.</p>

<p>*(Any <em>sane</em> users of regular expressions, should not be offended. ;)</p>
"
323439,"<p>You may also want to have a look at the granular-permissions monkeypatch:
<a href=""http://code.google.com/p/django-granular-permissions/"" rel=""nofollow"">http://code.google.com/p/django-granular-permissions/</a></p>

<p>It adds row-level permissions to django's permission system.</p>
"
323798,"<p>Iterators only have the next() method so you cannot look forwards or backwards, you can only get the next item.</p>

<p>enumerate(iterable) can be useful if you are iterating a list or tuple.</p>
"
49929,"<p>There is a program called <a href=""http://www.scilab.org/"" rel=""nofollow"">SciLab</a> that is a MATLAB clone.</p>

<p>I haven't used it at all, but it is open source and might have the function you are looking for.</p>
"
50041,"<p>I don't know if it's in there, but there's a python distribution called <a href=""http://www.enthought.com/"" rel=""nofollow"">Enthought</a> that might have what you're looking for.  It was designed specifically for data analysis has over 60 additional libraries.</p>
"
50413,"<p>Another way to do it is to use <code>urllib2</code> module to parse some other page's whois service (many sites like that exist).  But that seems like even more of a hack that what you do now, and would give you a dependency on whatever whois site you chose, which is bad.</p>

<p>I hate to say it, but unless you want to re-implement <code>whois</code> in your program (which would be re-inventing the wheel), running <code>whois</code> on the OS and parsing the output (ie what you are doing now) seems like the right way to do it.</p>
"
50423,"<p>Parsing another webpage woulnd't be as bad (assuming their html woulnd't be very bad), but it would actually tie me to them - if they're down, I'm down :) </p>

<p>Actually I found some old project on sourceforge: <a href=""http://sourceforge.net/projects/rwhois/"" rel=""nofollow"">rwhois.py</a>. What scares me a bit is that their last update is from 2003. But, it might seem as a good place to start reimplementation of what I do right now... Well, I felt obligued to post the link to this project anyway, just for further reference.</p>
"
166788,"<p>Would SCons do what you want?</p>

<p><a href=""http://www.scons.org/"" rel=""nofollow"">http://www.scons.org/</a></p>
"
167465,"<p>Must be your setup, I can use the Â£ (Also european keyboard) under IDLE or the python command line just fine. (python 2.5).</p>

<p>edit: I'm using windows, so mayby its a problem with the how python works under the mac OS?</p>
"
204520,"<p>I have to agree with Chris.  Remember, don't optimize until you actually need to do so.  I really doubt checking for existence is going to be a bottleneck in any reasonable program.</p>

<p>I did see <a href=""http://code.activestate.com/recipes/52558/"" rel=""nofollow"">http://code.activestate.com/recipes/52558/</a> as a way to do this, too.  Uncommented copy of that code (""spam"" is just a random method the class interface has):</p>

<pre><code>class Singleton:
    class __impl:
        def spam(self):
            return id(self)
    __instance = None
    def __init__(self):
        if Singleton.__instance is None:
            Singleton.__instance = Singleton.__impl()
        self.__dict__['_Singleton__instance'] = Singleton.__instance
    def __getattr__(self, attr):
        return getattr(self.__instance, attr)
    def __setattr__(self, attr, value):
        return setattr(self.__instance, attr, value)
</code></pre>
"
47744,"<p>What platform are you attempting this on? Most debuggers allow you to attach to a running process by using the process id.
You can either output the process id via logging or using something like Task Manager.
Once that is achieved it will be possible to inspect individual threads and their call stacks.</p>

<p>EDIT: I don't have any experience with GNU Debugger (GDB), which is cross platform, however I found this <a href=""http://wiki.python.org/moin/DebuggingWithGdb"" rel=""nofollow"">link</a> and it may start you on the right path. It explains how to add debug symbols (handy for reading stack traces) and how to instruct gdb to attach to a running python process.</p>
"
48266,"<p>I think you should base your server class on the <a href=""http://www.python.org/doc/lib/module-SocketServer.html"" rel=""nofollow""><code>SocketServer</code></a> class from the standard library.  You'll need to write a <code>RequestHandler</code> to read and echo input but a lot of the heavy lifting is already done for you.</p>

<p>You can use the <a href=""http://docs.python.org/lib/node632.html"" rel=""nofollow""><code>ThreadingMixIn</code></a> to make the server multi-threaded very easily.  </p>
"
169403,"<p>You can use <a href=""http://www.python.org/doc/2.5.2/lib/module-zipfile.html"" rel=""nofollow"">zipfile</a> that ships with python, and <a href=""http://snippets.dzone.com/posts/show/2038"" rel=""nofollow"">here</a> you can find an example of sending an email with attachments with the standard smtplib</p>
"
204602,"<p>I will start answering this question here while we perform tests but I'd love to have feedback from other users.</p>

<h2>Install</h2>

<p>We have spent a small afternoon from tuto to ""how to"" to finally install and run the thing on a virtual machine.</p>

<p>This one is ok : <a href=""http://www.openplans.org/projects/deliverance/getting-started"" rel=""nofollow"">http://www.openplans.org/projects/deliverance/getting-started</a></p>

<p>There are setuptools packages but this does not works out of the box (and certainly not without compiling anything). We had to install :</p>

<ul>
<li>setuptools >= 0.6c5 (tested with 0.6c9 from <a href=""http://pypi.python.org/pypi/setuptools/"" rel=""nofollow"">http://pypi.python.org/pypi/setuptools/</a>). </li>
<li>of course, compilation implies installing gcc, linux-header et lib6-dev</li>
<li>libxslt in dev (we used libxslt1-dev)</li>
<li>linking with zl so zlib (we used zlib1g-dev)</li>
<li>you'd better install Pastescript BEFORE starting the Deliverance install</li>
<li>installing python-nose is not mandatory but it helps to check if everything went fine</li>
</ul>

<p>We did not manage to make it works with python-virtualenv to we definitly messed up the debian system but it seems to run ok.</p>

<p>Hope it can help.</p>
"
204618,"<p>I assume you are talking about a web framework. I have used <a href=""http://cherrypy.org"" rel=""nofollow"">CherryPy</a>, and found it quite useful. Try using each one to code a simple solution, and see how much it lines up with your style of programming.</p>
"
204961,"<p>You could use split with capturing parantheses.  If you do, then the text of all groups in the pattern are also returned as part of the resulting list (from <a href=""http://www.python.org/doc/2.5.2/lib/node46.html"" rel=""nofollow"">python doc</a>).</p>

<p>So the code would be </p>

<pre><code>import re
ab_re = re.compile(""([ab])"")
text=""abcdedfe falijbijie bbbb laifsjelifjl""
matches = ab_re.split(text)
# matches = ['', 'a', '', 'b', 'cdedfe f', 'a', 'lij', 'b', 'ijie ', 'b', '', 'b', '', 'b', '', 'b', ' l', 'a', 'ifsjelifjl']

# now extract the matches
Rmatches = []
remaining = []
for i in range(1, len(matches), 2):
    Rmatches.append(matches[i])
# Rmatches = ['a', 'b', 'a', 'b', 'b', 'b', 'b', 'b', 'a']

for i in range(0, len(matches), 2):
    remaining.append(matches[i])
remainingtext = ''.join(remaining)
# remainingtext = 'cdedfe flijijie  lifsjelifjl'
</code></pre>
"
48974,"<p>Ruby and C# both easily let you create accessors by specifying getter/setter methods for an attribute, much like in Python.  However, this isn't designed to naturally let you write the code for these methods in another class the way that Python allows.  In practice, I'm not sure how much this matters, since every time I've seen an attribute defined through the descriptor protocol its been implemented in the same class.</p>

<p>EDIT: Darn my dyslexia (by which I mean careless reading).  For some reason I've always read ""descriptor"" as ""decorator"" and vice versa, even when I'm the one typing both of them.  I'll leave my post intact since it has valid information, albeit information which has absolutely nothing to do with the question.</p>

<p>The term ""decorator"" itself is actually the name of a design pattern described in the famous ""Design Patterns"" book.  The Wikipedia article contains many examples in different programming languages of decorator usage: <a href=""http://en.wikipedia.org/wiki/Decorator_pattern"" rel=""nofollow"">http://en.wikipedia.org/wiki/Decorator_pattern</a></p>

<p>However, the decorators in that article object-oriented; they have classes implementing a predefined interface which lets another existing class behave differently somehow, etc.  Python decorators act in a functional way by replacing a function at runtime with another function, allowing you to effectively modify/replace that function, insert code, etc.</p>

<p>This is known in the Java world as Aspect-Oriented programming, and the AspectJ Java compiler lets you do these kinds of things and compile your AspectJ code (which is a superset of Java) into Java bytecode.</p>

<p>I'm not familiar enough with C# or Ruby to know what their version of decorators would be.</p>
"
323920,"<p>I dont think this is too cludging.. </p>

<pre><code>private void Main() 
{ 
string c = ""-t alpha 1 -prod 1 2 -sleep 200""; 

foreach (string incommand in Strings.Split(c, ""-"")) { 
    HandleCommand(Strings.Split(incommand.Trim, "" "")); 
} 
} 


public void HandleCommand(string[] c) 
{ 
switch (c(0).ToLower) { 
    case ""t"": 
        Interaction.MsgBox(""Command:"" + c(0) + "" params: "" + c.Length - 1); 
        break; 
    case ""prod"": 
        Interaction.MsgBox(""Command:"" + c(0) + "" params: "" + c.Length - 1); 
        break; 
    case ""sleep"": 
        Interaction.MsgBox(""Command:"" + c(0) + "" params: "" + c.Length - 1); 
        break; 
} 
}
</code></pre>

<p>Of course, instead of doing exactly same thing in those switch-statements, call appropriate functions or code.</p>
"
324069,"<p>Immediately previous?  </p>

<p>You mean the following, right?</p>

<pre><code>previous = None
for item in someList:
    if item == target: break
    previous = item
# previous is the item before the target
</code></pre>

<p>If you want <em>n</em> previous items, you can do this with a kind of circular queue of size <em>n</em>.</p>

<pre><code>queue = []
for item in someList:
    if item == target: break
    queue .append( item )
    if len(queue ) &gt; n: queue .pop(0)
if len(queue ) &lt; n: previous = None
previous = previous[0]
# previous is *n* before the target
</code></pre>
"
270777,"<p>You should directly obtain all IP configured IP addresses, e.g. by running ifconfig and parsing its output (it's also possible to do what <a href=""http://pypi.python.org/pypi/netifaces/0.3"" rel=""nofollow"">ifconfig does directly in Python</a>, <a href=""http://stackoverflow.com/questions/259389/finding-an-ip-from-an-interface-name"">see how it is done in C</a>). If you want host names, use gethostbyaddr.</p>
"
270891,"<p>Withough testing, I'd try:</p>

<pre><code>for c in session.query(Stuff).all():
     c.foo = c.foo+1
session.commit()
</code></pre>

<p>(IIRC, commit() works without flush()).</p>

<p>I've found that at times doing a large query and then iterating in python can be up to 2 orders of magnitude faster than lots of queries.  I assume that iterating over the query object is less efficient than iterating over a list generated by the all() method of the query object.</p>

<p>[Please note comment below - this did not speed things up at all].</p>
"
270942,"<p>If it is because of the overhead in terms of creating objects, then it probably can't be sped up at all with SA.</p>

<p>If it is because it is loading up related objects, then you might be able to do something with lazy loading.  Are there lots of objects being created due to references?  (IE, getting a Company object also gets all of the related People objects).</p>
"
114127,"<p>This looks like a good place to start: <a href=""http://www.unessa.net/en/hoyci/2007/06/using-capistrano-deploy-django-apps/"" rel=""nofollow"">http://www.unessa.net/en/hoyci/2007/06/using-capistrano-deploy-django-apps/</a></p>
"
138587,"<p>The Permission Denied error is showing that the script is running with root credentials, because it's looking in root's home dir for files.</p>

<p>I suggest you change the hook script to something that does:</p>

<pre><code>id &gt; /tmp/id
</code></pre>

<p>so that you can check the results of that to make sure what the uid/gid and euid/egid are.  You will probably find it's not actually running as the user you think it is.</p>

<p>My first guess, like Troels, was also SELinux, but that would only be my guess if you are absolutely sure the script through Apache is running with exactly the same user/group as your manual test.</p>
"
237530,"<p>ZConfig, I think, used to ship with a schema for parsing Apache configuration files; it doesn't seem to anymore, but it's oriented around parsing those types of files and turning the config into a Python object. A quick glance at the documentation suggests it wouldn't be too hard to set up a ZConfig schema corresponding to whatever Apache options you'd like to parse and validate.</p>

<p><a href=""http://pypi.python.org/pypi/ZConfig/2.6.0"" rel=""nofollow"">http://pypi.python.org/pypi/ZConfig/2.6.0</a></p>
"
237704,"<p>I believe it should work for you.</p>

<pre><code>file_name_list = [' '.join(each_file.split()).split()[-1] for each_file_detail in file_list_from_log]
</code></pre>

<p>NOTES - </p>

<ol>
<li><p>Here I am making a assumption that you want the data in the program (as list), not on console.</p></li>
<li><p>each_file_detail is each line that is being produced by the program.</p></li>
<li><p>' '.join(each_file.split())</p></li>
</ol>

<p>To replace multiple spaces by 1 space.</p>
"
325157,"<p>Commonly, you can replace large if/else or switch/case constructs with a Dictionary.  Where the if-criteria is the key and the code to execute is the value.</p>

<p>For example, you could nave a <code>Dictionary&lt;string, ICommand&gt;</code> (or <code>Dictionary&lt;string, Type&gt;</code>), which you fill before you parse your command line.</p>

<p>When you iterate over the passed in command line options, you simply look them up in the dictionary and ""invoke"" on the value which is the matching command (object) to execute (or alternatively use <code>Activate.CreateInstance(/*dictionary-value*/)</code> if you stored the type instead of a specific object instance).</p>

<p>In C# 3.0 you could also something like <code>Dictionary&lt;string, System.Linq.Expressions.Expression&lt;T&gt;&gt;</code>, although this gets you pretty close to the actual if-statement - which is something you might want to have or not. YMMV.</p>

<p>Some libraries provide you with the mere parsing of the command line arguments (like traditionally getopt() et al did) or can provide the whole package, including the invokation of actions upon the presence of specific command line arguments.</p>
"
325193,"<p>There are many ways of skinning a cat, as it were :)</p>

<p>Before we begin though, <strong>don't use eval on strings that are not yours</strong> so if the string has ever left your program; i.e. it has stayed in a file, sent over a network, someone can send in something nasty. And if someone can, you can be sure someone will.</p>

<p>And you might want to look over your data format. Putting strings like [""baa"",""beee"",""0"", ""\n""] in a file does not make much sense to me.</p>

<p>The first and simplest way would be to just strip away the stuff you don't need and to a string comparison. This would work as long as the '0'-string always looks the same and you're not really after the integer value 0, only the character pattern:</p>

<pre><code>TcsLine = '[""baa"",""beee"",""0""]'

line = TcsLine.strip('[]').split("","")
if line[2] == '""0""':
   print line
</code></pre>

<p><hr /></p>

<p>The second way would be to similar to the first except that we cast the numeric string to an integer, yielding the integer value you were looking for (but printing 'line' without all the quotation marks):</p>

<pre><code>TcsLine = '[""baa"",""beee"",""0""]'

line = [e.strip('""') for e in TcsLine.strip('[]').split("","")]
NumPFCs = int(line[2])
if NumPFCs==0:
   print line
</code></pre>

<p><hr /></p>

<p>Could it be that the string is actually a json array? Then I would probably go get <a href=""http://pypi.python.org/pypi/simplejson"" rel=""nofollow"">simplejson</a> to parse it properly if I were running Python&lt;2.6 or just import json on Python>=2.6. Then cast the resulting '0'-string to an integer as in the previous example.</p>

<pre><code>TcsLine = '[""baa"",""beee"",""0""]'

#import json # for &gt;= Python2.6
import simplejson as json # for &lt;Python2.6

line = json.loads(TcsLine)
NumPFCs = int(line[2])
if NumPFCs==0:
   print line
</code></pre>
"
138039,"<p>Doesn't appear to be... why not just save it yourself if you're going to need it, or use a non-anonymous function?</p>

<p>Also, your code doesn't work as written: <code>lambda</code> functions can only contain expressions, not statements, so <code>print</code> is a no-go (this will change in Python 3.0 when <code>print()</code> becomes a function).</p>
"
114923,"<p>This looks like a probable bug in the Python DNS library, although I don't read Python well enough to find it.</p>

<p>Note that in any case your EDNS0 buffer size parameter is not large enough to handle the RRSIG records for sources.org, so your client and server would have to fail over to TCP/IP.</p>
"
115802,"<p>The factory pattern has its own <a href=""http://en.wikipedia.org/wiki/Factory_method_pattern"" rel=""nofollow"">strengths and weaknesses</a>.  However, choosing one way to create instances usually has little pragmatic effect on your code.</p>
"
268684,"<p>You could write a <a href=""http://en.wikipedia.org/wiki/ReWire"" rel=""nofollow"">Rewire</a> host. Though, you will have to get a license (the license is free, but your application must be proprietary, so no open source).</p>

<p>Alternatively, you could interface through MIDI messages.</p>

<p>Finally, you could implement a dummy audio device which would route the audio to/from wherever you want or process it in some way.
I imagine all of these would be reasonably difficult. MIDI is probably the easiest of the three (I have no idea how easy or hard the Rewire protocol is to use).</p>
"
269814,"<p>Not all python modules are written in python. Datetime happens to be one of them that is not, and (on linux) is datetime.so.</p>

<p>You would have to download the source code to the python standard library to get at it.</p>
"
269888,"<p>Two thoughts as to what could be going wrong.</p>

<p>First the code from the reflection has three paths:</p>

<ul>
<li>If passwordFormat is 0 it returns the password as is.</li>
<li>If passwordFormat is 1 it creates the hash as your python code does.</li>
<li>If passwordFormat is anything other than 0 or 1 it calls this.EncryptPassword()</li>
</ul>

<p>How do you know you are hashing the password, and not encrypting the password with this.EncryptPassword()? You may need to reverse the EncryptPassword() member function and replicate that. That is unless you have some information which ensures that you are hashing the password and not encrypting it.</p>

<p>Second if it is indeed hashing the password you may want to see what the Encoding.Unicode.GetBytes() function returns for the string ""password"", as you may be getting something back like:</p>

<pre><code>0x00 0x70 0x00 0x61 0x00 0x73 0x00 0x73 0x00 0x77 0x00 0x6F 0x00 0x72 0x00 0x64
</code></pre>

<p>instead of:</p>

<pre><code>0x70 0x61 0x73 0x73 0x77 0x6F 0x72 0x64
</code></pre>

<p>I hope this helps.</p>
"
270241,"<p>@Evan Teran: looks like we did this in parallel -- I have a markedly less readable O(n) implementation:</p>

<pre><code>#include &lt;cassert&gt;
#include &lt;cctype&gt;
#include &lt;string&gt;
#include &lt;sstream&gt;
#include &lt;iostream&gt;

using namespace std;

ostringstream debug;
const bool DEBUG = true;

bool varies_in_single_number_field(const string &amp;str1, const string &amp;str2) {
    bool in_difference = false;
    bool passed_difference = false;
    string str1_digits, str2_digits;
    size_t str1_iter = 0, str2_iter = 0;
    while (str1_iter &lt; str1.size() &amp;&amp; str2_iter &lt; str2.size()) {
        const char &amp;str1_char = str1.at(str1_iter);
        const char &amp;str2_char = str2.at(str2_iter);
        debug &lt;&lt; ""str1: "" &lt;&lt; str1_char &lt;&lt; ""; str2: "" &lt;&lt; str2_char &lt;&lt; endl;
        if (str1_char == str2_char) {
            if (in_difference) {
                in_difference = false;
                passed_difference = true;
            }
            ++str1_iter, ++str2_iter;
            continue;
        }
        in_difference = true;
        if (passed_difference) { /* Already passed a difference. */
            debug &lt;&lt; ""Already passed a difference."" &lt;&lt; endl;
            return false;
        }
        bool str1_char_is_digit = isdigit(str1_char);
        bool str2_char_is_digit = isdigit(str2_char);
        if (str1_char_is_digit &amp;&amp; !str2_char_is_digit) {
            ++str1_iter;
            str1_digits.push_back(str1_char);
        } else if (!str1_char_is_digit &amp;&amp; str2_char_is_digit) {
            ++str2_iter;
            str2_digits.push_back(str2_char);
        } else if (str1_char_is_digit &amp;&amp; str2_char_is_digit) {
            ++str1_iter, ++str2_iter;
            str1_digits.push_back(str1_char);
            str2_digits.push_back(str2_char);
        } else { /* Both are non-digits and they're different. */
            return false;
        }
    }
    if (in_difference) {
        in_difference = false;
        passed_difference = true;
    }
    string str1_remainder = str1.substr(str1_iter);
    string str2_remainder = str2.substr(str2_iter);
    debug &lt;&lt; ""Got to exit point; passed difference: "" &lt;&lt; passed_difference
        &lt;&lt; ""; str1 digits: "" &lt;&lt; str1_digits
        &lt;&lt; ""; str2 digits: "" &lt;&lt; str2_digits
        &lt;&lt; ""; str1 remainder: "" &lt;&lt; str1_remainder
        &lt;&lt; ""; str2 remainder: "" &lt;&lt; str2_remainder
        &lt;&lt; endl;
    return passed_difference
        &amp;&amp; (str1_digits != str2_digits)
        &amp;&amp; (str1_remainder == str2_remainder);
}

int main() {
    assert(varies_in_single_number_field(""foo7bar00"", ""foo123bar00"") == true);
    assert(varies_in_single_number_field(""foo7bar00"", ""foo123bar01"") == false);
    assert(varies_in_single_number_field(""foobar00"", ""foo123bar00"") == true);
    assert(varies_in_single_number_field(""foobar00"", ""foobar00"") == false);
    assert(varies_in_single_number_field(""foobar00"", ""foobaz00"") == false);
    assert(varies_in_single_number_field(""foo00bar"", ""foo01barz"") == false);
    assert(varies_in_single_number_field(""foo01barz"", ""foo00bar"") == false);
    if (DEBUG) {
        cout &lt;&lt; debug.str();
    }
    return 0;
}
</code></pre>
"
268110,"<p>If you are talking about Trac then the issue you are having is <a href=""http://stackoverflow.com/questions/215267/how-do-you-fix-a-trac-installation-that-begins-giving-errors-relating-to-python"">this one</a>. It should be solved in trac 0.11.1.</p>
"
115933,"<p>A staticmethod rarely has value, but a classmethod may be useful. It depends on what you want the class and the factory function to actually do.</p>

<p>A factory function in a module would always make an instance of the 'right' type (where 'right' in your case is the 'Calendar' class always, but you might also make it dependant on the contents of what it is creating the instance out of.)</p>

<p>Use a classmethod if you wish to make it dependant not on the data, but on the class you call it on. A classmethod is like a staticmethod in that you can call it on the class, without an instance, but it receives the class it was called on as first argument. This allows you to actually create an instance of <em>that class</em>, which may be a subclass of the original class. An example of a classmethod is dict.fromkeys(), which creates a dict from a list of keys and a single value (defaulting to None.) Because it's a classmethod, when you subclass dict you get the 'fromkeys' method entirely for free. Here's an example of how one could write dict.fromkeys() oneself:</p>

<pre><code>class dict_with_fromkeys(dict):
    @classmethod
    def fromkeys(cls, keys, value=None):
        self = cls()
        for key in keys:
            self[key] = value
        return self
</code></pre>
"
47213,"<p>The preferred way of creating the URL is by adding a <code>get_absolute_url</code> method to your model classes. You can hardcode the path there so you at least get closer to following the KISS philosophy.</p>

<p>You can go further by utilizing the <code>permalink</code> decorator that figures the path based on the urls configuration.</p>

<p>You can read more in the django documentation <a href=""https://docs.djangoproject.com/en/dev/ref/models/instances/#get-absolute-url"" rel=""nofollow"">here</a>.</p>
"
324524,"<p>Your question is kind of hard to read, but using eval there is definitely not a good idea.  Either just do a direct string comparison:</p>

<pre><code>line=TcsLine.split("","")
if line[2] == ""0"":
    print line
</code></pre>

<p>or use int</p>

<pre><code>line=TcsLine.split("","")
if int(line[2]) == 0:
    print line
</code></pre>

<p>Either way, your bad data will fail you.</p>

<p>I'd also recomment reading <a href=""http://www.python.org/dev/peps/pep-0008/"" rel=""nofollow"">PEP 8</a>.</p>
"
324525,"<p>There are a few issues I see in your code segment:</p>

<ol>
<li>you make an assumption that list always has at least 3 elements</li>
<li>eval will raise exception if containing string isn't valid python</li>
<li>you say you want second element, but you access the 3rd element.</li>
</ol>

<p>This is a safer way to do this</p>

<pre><code>line=TcsLine.split("","")
if len(line) &gt;=3 and line[2].rfind(""0"") != -1:
     print line
</code></pre>
"
324660,"<p>How about this?  It may not be performance-optimal, but I think it's the ""simplest thing that could possibly work"".</p>

<pre><code>myIndex = {}

for (someId,someVal) in collection:
   if someId not in myIndex:
       myIndex[someId] = []
   myIndex[someId].append(someVal)
</code></pre>
"
324662,"<p>I'd recommend using a regular expression to capture all of the variants of how 0 can be specified: with double-quotes, without any quotes, with single quotes, with extra whitespace outside the quotes, with whitespace inside the quotes, how you want the square brackets handled, etc.</p>
"
116199,"<p>You should be able to use the MSWord ActiveX interface to extract the text to search (or, possibly, do the search). I have no idea how you access ActiveX from Python though.</p>
"
116557,"<p>Almost the same, but using non-greedy quantifiers and taking advantage of the whitespace sequence.</p>

<pre><code>\s*?\n\s*?\n\s*?
</code></pre>
"
237906,"<p>What sense of dynamic do you mean? What is likely to vary - the number of skills, or the weighting factors, the number of ranges (short, med, long) or all of these?</p>

<p>What happens to the (e.g.) bhPST_* values afterwards - do they get combined into one number?</p>

<p>One thing that leaps out is that the list of skills is hardwired in the code - I would be inclined to replace the bh variables with a method</p>

<p>So (please take into account I don't know the first thing about Python :) )</p>

<pre><code>def bh_short(self, key)
  skill = self.skill_dict.get(key, 0)
  return skill * 0.6
</code></pre>

<p>Now you can keep  a list of skills that contribute to hit points and iterate over that calling bh_short etc.</p>

<p>Possibly also pass the range (long med short) unto the function, or return all three values - this all depends on what you're going to do next with the calculated hitpoints.</p>

<p>Basically, we need more information about the context this is to be used in</p>
"
237937,"<pre><code>text_for_display = '\n'.join(item + u' ' + unicode(value) for item, value in my_dictionary.items())
</code></pre>
"
237941,"<p>use % formatting (known in C as sprintf), e.g:</p>

<pre><code>""%10s - %d"" % dict.items()[0]
</code></pre>

<p>Number of <em>% conversion specifications</em> in the format string should match tuple length, in the dict.items() case, 2. The result of the string formatting operator is a string, so that using it as an argument to SetValue() is no problem. To translate the whole dict to a string:</p>

<pre><code>'\n'.join((""%10s - %d"" % t) for t in dict.items())
</code></pre>

<p>The format conversion types are specified in the <a href=""http://www.python.org/doc/2.5.2/lib/typesseq-strings.html"" rel=""nofollow"">doc</a>.</p>
"
237998,"<p>That data seems much better displayed as a Table/Grid.</p>
"
238227,"<p>Probably <a href=""http://www.regular-expressions.info/posixbrackets.html"" rel=""nofollow"">POSIX character classes</a> are right for you?</p>
"
239014,"<p><a href=""http://www.time-travellers.org/shane/howtos/MS-SQL-Express-Python-HOWTO.html"" rel=""nofollow"">http://www.time-travellers.org/shane/howtos/MS-SQL-Express-Python-HOWTO.html</a></p>

<p>use an alternative?</p>
"
239131,"<p>I would have a class for the character's attributes (so you don't have heaps of things in the character class) and a class for a weapon's attributes:</p>

<pre><code>class WeaponAttribute(object):

    short_mod = 0.6
    med_mod = 0.3
    long_mod = 0.1

    def __init__(self, base):
        self.base = base

    @property
    def short(self):
        return self.base * self.short_mod

    @property
    def med(self):
        return self.base * self.med_mod

    @property
    def long(self):
        return self.base * self.long_mod


class CharacterAttributes(object):

    def __init__(self, attributes):
        for weapon, base in attributes.items():
            setattr(self, weapon, WeaponAttribute(base))
</code></pre>

<p>Have a <code>CharacterAttributes</code> object in the character class and use it like this:</p>

<pre><code># Initialise
self.charAttribs = CharacterAttributes(self.skill_dict)
# Get some values
print self.charAttribs.CRM.short
print self.charAttribs.PST.med
print self.charAttribs.LCG.long
</code></pre>
"
239179,"<p>I don't know about open office python.
I suggest trying the standard <a href=""http://www.python.org/download/"" rel=""nofollow"">windows python installation</a> followed by <a href=""http://sourceforge.net/projects/pywin32/"" rel=""nofollow"">Pywin32</a>. Alternatively, there is a single installer containing both at <a href=""http://www.activestate.com/Products/activepython/feature_list.mhtml"" rel=""nofollow"">activestate</a>. In the <em>pythonwin IDE</em>, select menu item <code>tools / COM Makepy utility</code>. The libraries you need to build with <code>makepy</code> are (or similar versions):</p>

<pre><code>Microsoft ActiveX Data Objects 2.8 Library (2.8)
Microsoft ActiveX Data Objects Recordset 2.8 Library (2.8)
</code></pre>

<p>After <code>makepy</code> is done, you can use the <code>COM</code> object to access <code>ADODB</code>:</p>

<pre><code>from win32com import client
conn=client.Dispatch('adodb.connection')
conn.Open(connection_string)
resultset,x=e.Execute('select * from mytable')
resultset.MoveFirst()
record_fields=resultset.Fields
(etc.)
</code></pre>
"
117285,"<p>You cant get a decimal value by dividing one integer with another, you'll allways get an integer that way (result truncated to integer). You need at least one value to be a decimal number.</p>
"
266774,"<p>Use <a href=""http://www.pythonware.com/products/pil/"" rel=""nofollow"">PIL</a>.  If it can open the file, it's an image.</p>

<p>From the tutorial...</p>

<pre><code>&gt;&gt;&gt; import Image
&gt;&gt;&gt; im = Image.open(""lena.ppm"")
&gt;&gt;&gt; print im.format, im.size, im.mode
</code></pre>
"
204152,"<p>Javascript is the best option in this case.</p>

<p>Along with the request for the username and password, it sends a unique random string. You can then use a javascript md5 library to generate a hashed password, by combining the random string and the password [pwhash = md5(randomstring+password)].  The javascript then instantiates the call to <em><a href=""http://SERVER/login.cgi?username=TheUsername&amp;random=RANDOMSTRING&amp;pwhash=0123456789abcdef0123456789abcdef"" rel=""nofollow"">http://SERVER/login.cgi?username=TheUsername&amp;random=RANDOMSTRING&amp;pwhash=0123456789abcdef0123456789abcdef</a></em></p>

<p>The server must then do two things:
  Check if the random string has EVER been used before, and it if has, deny the request. (<strong>very important</strong> for security)</p>

<p>Lookup the plaintext password for username, and do md5(randomstring+password). If that matches what the user supplied in the URL as a pwhash, then you know it's the user.</p>

<p>The reason you check if the random string has ever been used before is to stop a repeat attack.  If somebody is able to see the network traffic or the browser history or logs, then they could simply log in again using the same URL, and it doesn't matter whether they know the original password or not.</p>

<p>I also recommend putting ""Pragma: no-cache"" and ""Cache-Control: no-cache"" at the top of the headers returned by the CGI script, just so that the authenticated session is not stored in the browser's or your ISPs web cache.</p>

<p>An even more secure solution would be using proper encryption and Challenge-Response. You tell the server your username, the server sends back a Challenge (some random string encrypted with your password), and you tell the server what the random string was.  If you're able to tell the server, then obviously you have the password and are who you say you are!  Kerberos does it this way, but quite a lot more carefully to prevent all sorts of attacks.</p>
"
167997,"<p>I would recommend using a JS/Ajax library on the client-side just to eliminate the possibility of cross-browser issues with your code. For the same reason I would recommend using a python http server library like <a href=""http://docs.python.org/library/simplehttpserver.html"" rel=""nofollow"">SimpleHTTPServer</a> or something from <a href=""http://twistedmatrix.com/trac/wiki/Documentation"" rel=""nofollow"">Twisted</a> if the former does not allow low-level control.</p>

<p>Another idea - use something like Wireshark to check what's been sent by the browsers.</p>
"
324952,"<p>Deleted my answer - it was totally wrong.  Keeping it here though so comments &amp; conversation hang around.</p>

<p><strong>EDIT:</strong></p>

<p>As you can read in the comments, here's what happened:</p>

<p>The data was being put into the database fine, but the MSSQL Query Manager could not display the Chinese characters.</p>
"
325135,"<p>The output says you're using WX. Try running py2exe with your script specified as a GUI app instead of console. If I'm not mistaken, that tends to cause problems with py2exe.</p>
"
117769,"<p>Depending on how much you want to do with the data you may not need to populate an intermediate object.  The cursor's header data structure will let you get the column names - a bit of introspection will let you make a dictionary with col-name:value pairs for the row.
You can pass the dictionary to the % operator.  The docs for the odbc module will explain how to get at the column metadata.</p>

<p>This snippet of code to shows the application of the % operator in this manner.</p>

<pre><code>&gt;&gt;&gt; a={'col1': 'foo', 'col2': 'bar', 'col3': 'wibble'}
&gt;&gt;&gt; 'Col1=%(col1)s, Col2=%(col2)s, Col3=%(col3)s' % a
'Col1=foo, Col2=bar, Col3=wibble'
&gt;&gt;&gt;
</code></pre>
"
264860,"<p>Using Jython is a great idea for this I think. But why could you not use two scripts, one with pyuno/2.3 and one with pymssql/2.5 (or whatever db adapter you are using)?.</p>

<p>The intermediate format could be anything like a pickle, or json, or XML.</p>

<p>Edit: I should add that I have used pyuno quite extensively, and I feel your pain.</p>
"
265940,"<p>You need to restrict the fields between the paths in a way that the regexp can distinct them from the pathnames.</p>

<p>So unless you put in a special separator, the sequence</p>

<pre><code>&lt;OUTPUTPATH&gt; &lt;LOGTO&gt;
</code></pre>

<p>with optional spaces will not work.</p>

<p>And if a path can look like those fields, you might get surprising results.
e.g.</p>

<pre><code>c:\ 12 bin \ 250 bin \output
</code></pre>

<p>for </p>

<pre><code>&lt;FOLDERPATH&gt; &lt;RETENTION&gt; &lt;TRANSFERMODE&gt; &lt;OUTPUTPATH&gt;
</code></pre>

<p>is indistinguishable.</p>

<p>So, let's try to restrict allowed characters a bit:</p>

<pre><code>&lt;SERVER&gt;, &lt;SERVERKEY&gt;, &lt;COMMAND&gt; no spaces -&gt; [^]+
&lt;FOLDERPATH&gt; allow anything -&gt; .+
&lt;RETENTION&gt; integer -&gt; [0-9]+
&lt;TRANSFERMODE&gt; allow only bin and ascii -&gt; (bin|ascii)
&lt;OUTPUTPATH&gt; allow anything -&gt; .+
&lt;LOGTO&gt; allow anything -&gt; .+
&lt;OPTIONAL-MAXSIZE&gt;[0-9]*
&lt;OPTIONAL-OFFSET&gt;[0-9]*
</code></pre>

<p>So, i'd go with something along the lines of</p>

<pre><code>[^]+ [^]+ [^]+ .+ [0-9]+ (bin|ascii) .+ \&gt; .+( [0-9]* ( [0-9]*)?)?
</code></pre>

<p>With a "">"" to separate the two pathes. You might want to quote the pathnames instead.</p>

<p>NB: This was done in a hurry.</p>
"
265996,"<p>Do search and replace using the regex functions, as seen <a href=""http://www.amk.ca/python/howto/regex/regex.html#SECTION000620000000000000000"" rel=""nofollow"">here.</a>. If you have to repeatedly perform the operation, you can keep a compiled copy of the regex pattern (your punctuation) around, which will speed things up a bit.</p>
"
266132,"<p>What you're looking for is Mod_Python.  It's an Apache-based interpreter for Python.  Check it out here:</p>

<p><a href=""http://www.modpython.org/"" rel=""nofollow"">http://www.modpython.org/</a></p>
"
43781,"<p>Well, -2 divided by 5 would be 0 with a remainder of 3.  I don't believe that should be very platform dependent, but I've seen stranger things.</p>
"
43782,"<p>It is indeed 3.  In <a href=""http://en.wikipedia.org/wiki/Modular_arithmetic"" rel=""nofollow"">modular arithmetic</a>, a modulus is simply the remainder of a division, and the remainder of -2 divided by 5 is 3.</p>
"
43799,"<p>The result depends on the language. Python returns the sign of the divisor, where for example c# returns the sign of the dividend (ie. -2 % 5 returns -2 in c#).</p>
"
201907,"<p>Python doesn't give you a way to qualify modules.  You might be able to accomplish this by removing the '' entry from sys.path or by moving it to the end.  I wouldn't recommend it.</p>
"
201916,"<p>Well, you could (re)move the current diretory from sys.path, which contains the modifiable search path for libraries to make it work, if you really need that.</p>
"
201950,"<p>It pays not to be biased about your server setup. Any modern web framework worth it's weight in source code has a SQL abstraction layer of some sort. PostgreSQL gets much better performance, and this is coming from a former MySQL partisan.</p>

<p>Apache is a beast, both to configure and on your server's resources. Why not go with something light-weight, like <a href=""http://nginx.net"" rel=""nofollow"">nginx</a> or <a href=""http://www.lighttpd.net/"" rel=""nofollow"">lighttpd</a>?</p>

<p>(For the record, I'm a big Django user, but as the accepted answer said, go with whatever your team knows. Quick turn-arounds are not the time to be learning new frameworks. If you're hiring a team from scratch, go with Django.)</p>
"
267522,"<p>You may want to look into <a href=""http://www.web2py.com"" rel=""nofollow"">web2py</a>. It includes an administration interface to develop via your browser. All you need in one package, including <a href=""http://en.wikipedia.org/wiki/Python_%28programming_language%29"" rel=""nofollow"">Python</a>.</p>
"
268066,"<p>When it comes to Reason, you can do with it to much because of it's closed architecture - you can use VST plugins (or any other type like DirectX ones) - your only option is to use MIDI.</p>

<p>Regarding Fruity Loops, you could write a VST plugin that can take an input from a scripting language (VB, Python or whatever) but in order to write such thing you would have to use Delphi or C++.</p>

<p>Alternatively, you can check out <a href=""http://www.cycling74.com/"" rel=""nofollow"">MAX made by Cycling74</a> - it's something like a IDE for music ;-) - and I'm pretty sure you can use Python with it.</p>
"
138063,"<p>There's the System.Reflection.PropertyInfo class that can be created using object.GetType().GetProperties(). That can be used to probe an object's properties using strings. (Similar methods exist for object methods, fields, etc.)</p>

<p>I don't think that will help you accomplish your goals though. You should probably just create and manipulate the objects directly. Controls have a Name property that you can set, for example.</p>
"
116027,"<p><a href=""http://www.jython.org/docs/api/org/python/util/PyServlet.html"" rel=""nofollow"">PyServlet</a> helps you configure Tomcat to serve up Jython scripts from a URL.  You could use this is a ""REST-like"" way to do some basic web services without much effort.  (It is also described <a href=""http://www.informit.com/articles/article.aspx?p=26865&amp;seqNum=6"" rel=""nofollow"">here</a>.) </p>

<p>We used a similar home grown framework to provide a variety of data services in a large multiple web application very successfully.</p>
"
116081,"<p>Use <a href=""http://www.clapper.org/software/python/grizzled/"" rel=""nofollow"">grizzled.os.daemonize</a>:</p>

<pre><code>$ easy_install grizzled

&gt;&gt;&gt; from grizzled.os import daemonize
&gt;&gt;&gt; daemon.daemonize()
</code></pre>

<p>To understand how this works or to do it yourself, read <a href=""http://code.activestate.com/recipes/278731/"" rel=""nofollow"">the discussion on ActiveState</a>.</p>
"
118216,"<p>Nope, there's no way around it, and it's by design:</p>

<pre><code>&gt;&gt;&gt; from __future__ import braces
  File ""&lt;stdin&gt;"", line 1
SyntaxError: not a chance
</code></pre>

<p>Most Python programmers simply don't use tabs, but use spaces to indent instead, that way there's no editor-to-editor inconsistency.</p>
"
264297,"<p>In lib/gzip.py, we find the method that builds the header, including the part that does indeed contain a timestamp. In Python 2.5, this begins on line 143:</p>

<pre><code>def _write_gzip_header(self):
    self.fileobj.write('\037\213')             # magic header
    self.fileobj.write('\010')                 # compression method
    fname = self.filename[:-3]
    flags = 0
    if fname:
        flags = FNAME
    self.fileobj.write(chr(flags))
    write32u(self.fileobj, long(time.time())) # The current time!
    self.fileobj.write('\002')
    self.fileobj.write('\377')
    if fname:
        self.fileobj.write(fname + '\000')
</code></pre>

<p>As you can see, it uses time.time() to fetch the current time. According to the online module docs, time.time will ""return the time as a floating point number expressed in seconds since the epoch, in UTC."" So, if you change this to a floating-point constant of your choosing, you can always have the same headers written out. I can't see a better way to do this unless you want to hack the library some more to accept an optional time param that you use while defaulting to time.time() when it's not specified, in which case, I'm sure they'd love it if you submitted a patch!</p>
"
264348,"<p>It's not pretty, but you could monkeypatch time.time temporarily with something like this:</p>

<pre><code>import time

def fake_time():
  return 100000000.0

def do_gzip(content):
    orig_time = time.time
    time.time = fake_time
    # result = do gzip stuff here
    time.time = orig_time
    return result
</code></pre>

<p>It's not pretty, but it would probably work.</p>
"
264562,"<p>Another option is to use a dictionary:</p>

<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; array = defaultdict(int) # replace int with the default-factory you want
&gt;&gt;&gt; array[(0,0)]
0
&gt;&gt;&gt; array[(99,99)]
0
</code></pre>

<p>You'll need to keep track of the upper &amp; lower bounds as well.</p>
"
264580,"<p>It looks as if x_present is a list. I suspect that this means that the assignment x_last = x_present makes x_last into an alias, i.e. they reference the same variable. Might this be the case?</p>
"
264593,"<p>try changing the <code>x_past = x_present</code> line to <code>x_past = [x for x in x_present]</code> and see if it helps.</p>

<p>the list copy shorthand is my favorite python feature since i can do one-liners that are not possible in other languages:</p>

<p><code>greaterthan100 = [x for x in number if x &gt; 100]</code></p>

<p><code>notinblacklist = [x for x in mylist if x not in blacklist]</code></p>

<p><code>firstchildofbigfamily = [x.child[0] for x in familylist if len(x.child) &gt; 10]</code></p>
"
42039,"<p>You're going to have to do this based on the running window manager. OSX and Windows have a (defacto) standard way because there is only one choice.</p>

<p>You shouldn't need to specify the exact filemanager application, though, this should be possible to do through the wm. I know Gnome does, and it's important to do this in KDE since there are two possible file managers (Konqueror/Dolphin) that may be in use.</p>

<p>I agree that this would be a good thing for freedesktop.org to standardize, although I doubt it will happen unless someone steps up and volunteers to do it.</p>

<p><hr /></p>

<p>EDIT: I wasn't aware of xdg-open. Good to know!</p>
"
43837,"<p>One explanation might be that negative numbers are stored using <a href=""http://en.wikipedia.org/wiki/Two%27s_complement"" rel=""nofollow"">2's complement</a>. When the python interpreter tries to do the modulo operation it converts to unsigned value. As such instead of doing (-2) % 5 it actually computes 0xFFFF_FFFF_FFFF_FFFD % 5 which is 3. </p>
"
43916,"<p>Be careful not to rely on this mod behavior in C/C++ on all OSes and architectures. If I recall correctly, I tried to rely on C/C++ code like</p>

<pre><code>float x2 = x % n;
</code></pre>

<p>to keep x2 in the range from 0 to n-1 but negative numbers crept in when I would compile on one OS, but things would work fine on another OS. This made for an evil time debugging since it only happened half the time!</p>
"
42794,"<p>@morais: That's an interesting idea, but I think maybe we can take it one step farther. Maybe there's a way to use <a href=""http://pypi.python.org/pypi/virtualenv"" rel=""nofollow"">Ian Bicking's virtualenv</a> to:</p>

<ul>
<li>See if we're running in an acceptable environment to begin with, and if so, do nothing.</li>
<li>Check if there exists a version-specific executable on the <code>PATH</code>, i.e. check if <code>python2.x</code> exists <code>for x in reverse(range(4, 10))</code>. If so, re-run the command with the better interpreter.</li>
<li>If no better interpreter exists, use virtualenv to try and install a newer version of Python from the older version of Python and get any prerequisite packages.</li>
</ul>

<p>I have no idea if virtualenv is capable of this, so I'll go mess around with it sometime soon. :)</p>
"
327015,"<p>You might want to benchmark the <a href=""http://www.codemaestro.com/reviews/9"" rel=""nofollow"">fast Newton-Raphson square root</a> as well. Shouldn't take much to convert to Python.</p>
"
201274,"<p>If you don't care about being able to edit the file yourself, and want a quick way to persist python objects, go with <a href=""http://www.python.org/doc/2.5.2/lib/module-pickle.html"" rel=""nofollow"">pickle</a>. If you do want the file to be readable by a human, or readable by some other app, use <a href=""http://www.python.org/doc/2.5.2/lib/module-ConfigParser.html"" rel=""nofollow"">ConfigParser</a>. If you need anything more complex, go with some sort of database, be it relational (<a href=""http://www.python.org/doc/2.5.2/lib/module-sqlite3.html"" rel=""nofollow"">sqlite</a>), or object-oriented (<a href=""http://www.divmod.org/trac/wiki/DivmodAxiom"" rel=""nofollow"">axiom</a>, <a href=""http://wiki.zope.org/ZODB/FrontPage"" rel=""nofollow"">zodb</a>).</p>
"
138121,"<p>It doesn't directly answer your question (so I'll probably be downgraded), but you may be interested in <a href=""http://www.jython.org"" rel=""nofollow"">Jython</a>.</p>

<blockquote>
  <p>Jython is an implementation of the high-level, dynamic, object-oriented language Python written in 100% Pure Java, and seamlessly integrated with the Java platform. It thus allows you to run Python on any Java platform.</p>
</blockquote>

<p>Since you are coming from Java, Jython may help you leverage Python while still allowing you to use your Java knowledge.</p>
"
138231,"<p><a href=""http://www.codeproject.com/KB/WPF/OpenFlowDoc.aspx?msg=2740533#xx2740533xx"" rel=""nofollow"">Here</a> is a example of using XLINQ to search throu a word document</p>
"
238476,"<p>Well, I've encountered this problem quite a few times, which led me to write my own system for parsing any kind of syntax.</p>

<p>The result of this can be found <a href=""http://gist.github.com/19929"" rel=""nofollow"">here</a>; note that this may be overkill, and it will provide you with something that lets you parse statements with both brackets and parentheses, single and double quotes, as nested as you want. For example, you could parse something like this (example written in Common Lisp):</p>

<pre><code>(defun hello_world (&amp;optional (text ""Hello, World!""))
    (format t text))
</code></pre>

<p>You can use nesting, brackets (square) and parentheses (round), single- and double-quoted strings, and it's very extensible.</p>

<p>The idea is basically a configurable implementation of a Finite State Machine which builds up an abstract syntax tree character-by-character. I recommend you look at the source code (see link above), so that you can get an idea of how to do it. It's capable via regular expressions, but try writing a system using REs and then trying to extend it (or even understand it) later.</p>
"
117543,"<p><a href=""http://sphinx.pocoo.org/"" rel=""nofollow"">Sphinx</a> is a documentation generator using reStructuredText. It's quite nice,  although I haven't used it personally.</p>

<p>The website <a href=""http://sphinx.pocoo.org/"" rel=""nofollow"">Hazel Tree</a>, which compiles python text uses Sphinx, and so does the new Python documentation.</p>
"
264618,"<p>In Python, everything is an object.
So the statement x_past = x_present point to the same reference.</p>
"
264785,"<p>no/ you can not use something like ""links.contains('<a href=""http://www.google.com"" rel=""nofollow"">http://www.google.com</a>')""
GQL not support this</p>
"
263670,"<p>Could you not do:</p>

<pre><code>a.eql?(b)
</code></pre>

<p>Edited to add an example:</p>

<pre><code>a = %w[a b c]
b = %w[1 2 3]
c = ['a', 'b', 'c']

a.eql?(b) # =&gt; false
a.eql?(c) # =&gt; true
a.eql?(c.reverse) # =&gt; false
</code></pre>
"
263931,"<p>While it might be great fun to create this mini-language and code it all up, the real questions you need to ask are:</p>

<ol>
<li>What is the business case for adding this feature / facility?</li>
<li>Who is going to pay for this feature?</li>
<li>Who is going to ""sign off"" on this feature if you build it?</li>
</ol>

<p>""Really neat"" features have a way of getting built when the reality might indicate the true answer to such a request is ""no"".</p>

<p>See if you have a stakeholder willing to sponsor this before proceeding. Then check with the end users to see what they really want before committing to the project.</p>

<p>Cheers,</p>

<p>-R</p>
"
264204,"<p>To add the contents of the two queries together:</p>

<pre><code>list1 = first query
list2 = second query
list1 += list2
</code></pre>

<p>List 1 now contains all 2000 results.</p>
"
136741,"<p>It's probably <em>possible</em> - but where do you want the key presses to go? To another application? That would probably be a case of understanding your platform's windowing toolkit and sending the right messages to the right window.</p>

<p>Clarify your requirements, and I'm sure we can help out.</p>
"
171686,"<pre><code>data = [ (""1"",""2""),(""3"",""4"") ]
print ""\n"".join(map(""\t"".join,data))
</code></pre>

<p>Not as flexible as the ActiveState solution, but shorter :-)</p>
"
200621,"<p>If you have a database, I might suggest storing the settings in the database. However, it sounds like ordinary files might suit your environment better.</p>

<p>You probably don't want to store <em>all</em> the users settings in the same file, because you might run into trouble with concurrent access to that one file. If you stored each user's settings as a dictionary in their own pickled file, then they would be able to act independently.</p>

<p>Pickling is a reasonable way to store such data, but unfortunately the pickle data format is notoriously not-human-readable. You might be better off storing it as <code>repr(dictionary)</code> which will be a more readable format. To reload the user settings, use <code>eval(open(""file"").read())</code> or something like that.</p>
"
170354,"<p><br/>
Thank you very much Florian, your code is working!!!!<br/>
I reuse the template and complete the <strong>main</strong> with my COMET mecanism and it is working much better<br/>
Chrome and Firefox are working perfectly well<br/>
IE has still a problem with the ""long GET"" system<br/>
When it received the answer to the GET it does not stop to re executing the loop to print the messages.<br/>
Investigating right now the question<br/></p>

<p>Here is my updated code for very basic JQuery+Python cross browser system.<br/></p>

<p>The Python program, based on Florian's code:<br/></p>

<pre><code>bufsize = 4048
import socket
import re
from urlparse import urlparse
connected={}
class Headers(object):
    def __init__(self, headers):
        self.__dict__.update(headers)

    def __getitem__(self, name):
        return getattr(self, name)

    def get(self, name, default=None):
        return getattr(self, name, default)

class Request(object):
    header_re = re.compile(r'([a-zA-Z-]+):? ([^\r]+)', re.M)

    def __init__(self, sock):
        header_off = -1
        data = ''
        while header_off == -1:
            data += sock.recv(bufsize)
            header_off = data.find('\r\n\r\n')
        header_string = data[:header_off]
        self.content = data[header_off+4:]
        furl=header_string[header_string.index(' ')+1:]
        self.url=furl[:furl.index(' ')]
        lines = self.header_re.findall(header_string)
        self.method, path = lines.pop(0)
        path, protocol = path.split(' ')
        self.headers = Headers(
            (name.lower().replace('-', '_'), value)
            for name, value in lines
        )
        if self.method in ['POST', 'PUT']:
            content_length = int(self.headers.get('content_length', 0))
            while len(self.content) &lt;  content_length:
                self.content += sock.recv(bufsize)
        self.query = urlparse(path)[4]

acceptor = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
acceptor.setsockopt(
    socket.SOL_SOCKET,
    socket.SO_REUSEADDR,
    1,
)
acceptor.bind(('', 8007 ))
acceptor.listen(10)

if __name__ == '__main__':
    while True:
        sock, info = acceptor.accept()
        request = Request(sock)
        m=request.method
        u=request.url[1:]
        if m=='GET' and (u=='client.html' or u=='jquery.js'):
            f=open('c:\\async\\'+u,'r')
            sock.send('HTTP/1.1 200 OK\n\n'+f.read())
            f.close()
            sock.close()
        elif 'messages' in u:
            if m=='POST':
                target=u[9:]
                if target in connected:
                    connected[target].send(""HTTP/1.1 200 OK\n\n""+request.content)
                    connected[target].close()
                    sock.close()
            elif m=='GET':
                user=u[9:]
                connected[user]=sock
                print user+' is connected'
</code></pre>

<p>And the HTML with Jquery compacted:</p>

<pre><code>   &lt;html&gt;
&lt;head&gt;
    &lt;style&gt;
    	input {width:80px;}
    	span {font-size:12px;}
    	button {font-size:10px;}
    &lt;/style&gt;
    &lt;script type=""text/javascript"" src='jquery.js'&gt;&lt;/script&gt;
    &lt;script&gt;
    	var user='';
    	function post(el) {$.post('messages/'+$('#to').val(),$('#message').val());}
    	function get(u) {
    		if (user=='') user=u.value
    		$.get('messages/'+user,function(data) { $(""&lt;p&gt;""+data+""&lt;/p&gt;"").appendTo($('#messages'));get(user);});
    	}
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;span&gt;From&lt;/span&gt;&lt;input id=""user""/&gt;&lt;button onclick=""get(document.getElementById('user'))""&gt;log&lt;/button&gt;
&lt;span&gt;To&lt;/span&gt;&lt;input id=""to""/&gt;
&lt;span&gt;:&lt;/span&gt;&lt;input id=""message""/&gt;&lt;button onclick=""post()""&gt;post&lt;/button&gt;
&lt;div id=""messages""&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
"
327237,"<p>Well, if they have the same project and application names, then the databases and tables will be the same. Your django_session table which holds the session information is the same for both sites. You have to use different project names that will go in different MySQL (or whatever) databases.</p>
"
327296,"<p>The session information is stored in the database, so if you're sharing the database with both running instances, logging off one location will log you off both.  If your circumstance requires you to share the database, the easiest workaround is probably to create a second user account with admin privileges.</p>
"
41822,"<p>Isn't it (at least theoretically) possible, to read in the ZIP's Huffman coding and then translate the regexp into the Huffman code? Might this be more efficient than first de-compressing the data, then running the regexp?</p>

<p>(Note: I know it wouldn't be quite that simple: you'd also have to deal with other aspects of the ZIP coding&mdash;file layout, block structures, back-references&mdash;but one imagines this could be fairly lightweight.)</p>

<p>EDIT: Also note that it's probably much more sensible to just use the <code>zipfile</code> solution.</p>
"
41999,"<p>this would probably have to be done manually, or have as a config item since there are many file managers that users may want to use. Providing a way for command options as well.</p>

<p>There might be an function that launches the defaults for kde or gnome in their respective toolkits but I haven't had reason to look for them.</p>
"
266298,"<p><a href=""http://code.google.com/appengine/"" rel=""nofollow"">Google App Engine</a> has done it for you.  Some limitations but it works great, and it gives you a path to hosting free.</p>
"
266615,"<p>Of course Mac OS X, in recent versions, comes with Python and Apache.  However you may want to have more flexibility in the versions you use, or you may not like the tweaks Apple has made to the way they are configured.  A good way to get a more generic set of tools, including MySQL, is to install them anew.  This will help your portability issues.  The frameworks can be installed relatively easily with one of these open source package providers.</p>

<ul>
<li><a href=""http://www.finkproject.org/"" rel=""nofollow"">Fink</a></li>
<li><a href=""http://www.macports.org/"" rel=""nofollow"">MacPorts</a></li>
<li><a href=""http://sourceforge.net/projects/mamp"" rel=""nofollow"">MAMP</a></li>
</ul>
"
136760,"<p>If you're working on Windows <a href=""http://www.activestate.com/Products/activepython/index.mhtml"" rel=""nofollow"">ActiveState Python</a> comes with the documentation, including the library reference in a searchable help file.</p>
"
118228,"<p>What platform are you running under?  GObject is the basis of the GTK GUI that's widely-used under Linux, and it supports event loops with prioritizable events like this.</p>
"
118507,"<p>The better method is to use the ZSI soap module which allows you to take a WDSL file and turn it into classes and methods that you can then use to call it. The online documentation is <a href=""http://pywebsvcs.sourceforge.net/zsi.html#SECTION0012300000000000000000"" rel=""nofollow""> on their website</a> but the latest documentation is more easily found in the source package. If you install in Debian/Ubuntu (package name python-zsi) the documentation is in /usr/share/doc/python-zsi in a pair of PDFs you can find in there.</p>
"
118586,"<p>Well here is some code that I did: (look down the bottom): <a href=""http://anonsvn.labs.jboss.com/labs/jbossrules/trunk/drools-decisiontables/src/main/resources/python-dt/pydt.py"" rel=""nofollow"">here</a></p>

<p>Not sure about the newer formats - if xlrd can't read it, xlrd needs to have a new version released !</p>
"
118645,"<p>Do you have a typo in positionChanged() ?</p>

<pre><code>def positionChanged(self, newPos):
    self.snappedPos = snapToGrid(newPos, Y_OFFSET, Y_STEP)
</code></pre>

<p>I guess you are off by one pixel because of the accuracy problems during float division. Try changing your snapToGrid() to this:</p>

<pre><code>def snapToGrid(originalPos, offset, step):
    EPS = 1e-6
    index = int((originalPos - offset) / step  + EPS) #truncates the remainder away
    return index * gap + offset
</code></pre>
"
262921,"<p>This solution will read the file only once, but using 2 file object pointers to be able obtain the last N lines of file without re-reading it:</p>

<pre><code>def getLastLines (path, n):
    # return the las N lines from the file indicated in path

    fp = open(path)
    for i in range(n):
        line = fp.readline()
        if line == '':
            return []

    back = open(path)
    for each in fp:
        back.readline()

    result = []
    for line in back:
        result.append(line[:-1])

    return result




s = ""foo""
last_bit = getLastLines(r'C:\Documents and Settings\ricardo.m.reyes\My Documents\desarrollo\tail.py', 10)
for line in last_bit:
    if line == s:
        print ""FOUND""
</code></pre>
"
327908,"<p>Help on module pygame.draw in pygame:</p>

<p>NAME
    pygame.draw - pygame module for drawing shapes</p>

<p>FILE
    d:\program files\python25\lib\site-packages\pygame\draw.pyd</p>

<p>FUNCTIONS
    aaline(...)
        pygame.draw.aaline(Surface, color, startpos, endpos, blend=1): return Rect
        draw fine antialiased lines</p>

<pre><code>aalines(...)
    pygame.draw.aalines(Surface, color, closed, pointlist, blend=1): return Rect

arc(...)
    pygame.draw.arc(Surface, color, Rect, start_angle, stop_angle, width=1): return Rect
    draw a partial section of an ellipse

circle(...)
    pygame.draw.circle(Surface, color, pos, radius, width=0): return Rect
    draw a circle around a point

ellipse(...)
    pygame.draw.ellipse(Surface, color, Rect, width=0): return Rect
    draw a round shape inside a rectangle

line(...)
    pygame.draw.line(Surface, color, start_pos, end_pos, width=1): return Rect
    draw a straight line segment

lines(...)
    pygame.draw.lines(Surface, color, closed, pointlist, width=1): return Rect
    draw multiple contiguous line segments

polygon(...)
    pygame.draw.polygon(Surface, color, pointlist, width=0): return Rect
    draw a shape with any number of sides

rect(...)
    pygame.draw.rect(Surface, color, Rect, width=0): return Rect
    draw a rectangle shape
</code></pre>
"
327992,"<p>Don't work with files directly, make a data structure that fits your needs in form of a class and make read from/write to file methods.</p>
"
39865,"<p>You know, you should look at static linking.</p>

<p>These days, we all have HUGE hard drives, and a few extra megabytes (for carrying around libc and what not) is really not that big a deal anymore. </p>

<p>You could also try running your applications in chroot() jails and distributing those.</p>
"
42492,"<p>If it is Word 2007 docx, you could unzip it and parse the XML files that are contained inside.</p>
"
327398,"<p>Let me guess, is this running on your localhost? and you have each site assigned to a different port? i.e. localhost:8000, localhost:8001 ..?</p>

<p>I've had the same problem! (although I wasn't running Apache per se)</p>

<p>When you login to the admin site, you get a cookie in your browser that's associated with the domain ""localhost"", the cookie stores a pointer of some sort to a session stored in the database on the server. </p>

<p>When you visit the other site, the server tries to interpret the cookie, but fails. I'm guessing it deletes the cookie because it's ""garbage"".</p>

<p>What you can do in this case, is change your domain</p>

<p>use localhost:8000 for the first site, and 127.0.0.1:8001 for the second site. this way the second site doesn't attempt to read the cookie that was set by the first site</p>

<p>I also think you can edit your HOSTS file to add more aliases to 127.0.0.1 if you need to. (but I haven't tried this)</p>
"
327481,"<p>If memory is simply not big enough, <a href=""http://www.jcea.es/programacion/pybsddb.htm"" rel=""nofollow"">pybsddb</a> can help store a disk-persistent map.</p>
"
327491,"<p>This seems pointless to me. Why not just call myFunction when you need it?</p>

<p>In general, in Python, we use modules for this kind of namespacing (contrast this with Java where you just have no choice). And of course, myFunction is already bound to the module namespace when you define it.</p>

<p><a href=""http://stackoverflow.com/questions/304655/the-best-way-to-invoke-methods-in-python-class-declarations"">It is discussed somewhat in the answers to this question.</a></p>
"
327530,"<p>What you can do is:</p>

<pre><code>d = foo.data()
d.fn = myFunction

d.fn(1,2,3)
</code></pre>

<p>Which may not be exactly what you want, but does work.</p>
"
171460,"<p>I highly recommend you don't set MaxRequestsPerChild to 1, as that would cause so much overhead as each process gets killed off and respawns with every request.</p>

<p>Are you using apaches preform MPM or worker MPM?  </p>

<p>Take a look at <a href=""http://docs.djangoproject.com/en/dev/howto/deployment/modpython/?from=olddocs"" rel=""nofollow"">http://docs.djangoproject.com/en/dev/howto/deployment/modpython/?from=olddocs</a> that may give you some help</p>
"
171470,"<p>I use Mercurial as my SCM system, and also for deployment too.  It's just a matter of cloning the repository from another one, and then a pull/update or a fetch will get it up to date.</p>

<p>I use several instances of the repository - one on the development server, one (or more, depending upon circumstance) on my local machine, one on the production server, and one 'Master' repository that is available to the greater internet (although only by SSH).</p>

<p>The only thing it doesn't do is automatically update the database if it is changed, but with incoming hooks I could probably do this too.</p>
"
264614,"<p>You could use a generator for this:</p>

<pre><code>def finished():
    ""Define your exit condition here""
    return ...

def count(i=0):
    while not finished():
        yield i
        i += 1

for i in count():
    print i
</code></pre>

<p>If you want to change the exit condition you could pass a value back into the generator function and use that value to determine when to exit.</p>
"
119436,"<p>You might count the number of frames in the file. Each frame has a start code, although I can't recollect the exact value of the start code and I don't have MPEG specs laying around. Each frame has a certain length, around 40ms for MPEG1 layer II.</p>

<p>This method works for CBR-files (Constant Bit Rate), how VBR-files work is a completely different story.</p>

<p>From the document below:</p>

<p>For Layer I files us this formula:</p>

<p>FrameLengthInBytes = (12 * BitRate / SampleRate + Padding) * 4</p>

<p>For Layer II &amp; III files use this formula:</p>

<p>FrameLengthInBytes = 144 * BitRate / SampleRate + Padding </p>

<p><a href=""http://mpgedit.org/mpgedit/mpeg_format/mpeghdr.htm"" rel=""nofollow"">Information about MPEG Audio Frame Header</a></p>
"
262474,"<p>As in almost all languages:</p>

<pre><code>while True:
  # check what you want and eventually break
  print nextValue()
</code></pre>

<p>The second part of your question is more interesting:</p>

<blockquote>
  <p>Also, if it is based on time then is there anyway I could just extend the time and start it going from that point again rather than having to start again from 0</p>
</blockquote>

<p>you can use a <code>yield</code> instead of <code>return</code> in the function <code>nextValue()</code></p>
"
262520,"<p>If you use a child thread to run the function while the main thread waits for character input it should work.  Just remember to have something that stops the child thread (in the example below the global runthread)</p>

<p>For example:</p>

<pre><code>import threading, time
runthread = 1
def myfun():
   while runthread:
      print ""A""
      time.sleep(.1)

t = threading.Thread(target=myfun)
t.start()
raw_input("""")
runthread = 0
t.join()
</code></pre>

<p>does just that</p>
"
262542,"<p>If you really want your function to run and still wants user (or system) input, you have two solutions:</p>

<ol>
<li>multi-thread</li>
<li>multi-process</li>
</ol>

<p>It will depend on how fine the interaction. If you just want to interrupt the function and don't care about the exit, then multi-process is fine.</p>

<p>In both cases, you can rely on some shared resources (file or shared memory for multi-thread, variable with associated mutex for multi-thread) and check for the state of that resource regularly in your function. If it is set up to tell you to quit, just do it.</p>

<p>Example on multi-thread:</p>

<pre><code>from threading import Thread, Lock
from time import sleep

class MyFct(Thread):
    def __init__(self):
        Thread.__init__(self)
        self.mutex = Lock()
        self._quit = False

    def stopped(self):
        self.mutex.acquire()
        val = self._quit
        self.mutex.release()
        return val

    def stop(self):
        self.mutex.acquire()
        self._quit = True
        self.mutex.release()

    def run(self):
        i = 1
        j = 1
        print i
        print j
        while True:
            if self.stopped():
                return
            i,j = j,i+j
            print j

def main_fct():
    t = MyFct()
    t.start()
    sleep(1)
    t.stop()
    t.join()
    print ""Exited""

if __name__ == ""__main__"":
    main_fct()
</code></pre>
"
262852,"<p>If you want to exit based on time, you can use the signal module's alarm(time) function, and the catch the SIGALRM - here's an example <a href=""http://docs.python.org/library/signal.html#example"" rel=""nofollow"">http://docs.python.org/library/signal.html#example</a></p>

<p>You can let the user interrupt the program in a sane manner by catching KeyboardInterrupt. Simply catch the KeyboardInterrupt exception from outside you main loop, and do whatever cleanup you want.</p>

<p>If you want to continue later where you left off, you will have to add some sort persistence. I would <a href=""http://docs.python.org/library/pickle.html#module-pickle"" rel=""nofollow"">pickle</a> a data structure to disk, that you could read back in to continue the operations. </p>

<p>I haven't tried anything like this, but you could look into using something like <a href=""http://wiki.python.org/moin/PythonDecoratorLibrary#head-11870a08b0fa59a8622201abfac735ea47ffade5"" rel=""nofollow"">memoizing</a>, and caching to the disk.</p>
"
118658,"<pre><code>import os, stat
os.stat(""test"")[stat.ST_MTIME]
</code></pre>

<p>Will give you the mtime. I suggest fixing those in <code>walk_results[2]</code>, and then recursing, calling the function for each dir in <code>walk_results[1]</code>.</p>
"
38646,"<p>Looking at the amount of sense people are demonstrating in other answers here, I'd say that using a regex probably isn't the best idea for your situation. Go for something tried and tested, and treat my previous answer as a demonstration that regexes need not be <em>that</em> scary.</p>
"
172371,"<p>Modifying Bruno's example to include error checking:</p>

<pre><code>my $input = ""..."";
while (1) {
    if ($input =~ /\G(\w+)/gc) { print ""word: '$1'\n""; next }
    if ($input =~ /\G(\s+)/gc) { print ""whitespace: '$1'\n""; next }

    if ($input !~ /\G\z/gc)  { print ""tokenizing error at character "" . pos($input) . ""\n"" }
    print ""done!\n""; last;
}
</code></pre>

<p>(Note that using scalar //g is unfortunately the one place where you really can't avoid using the $1, etc. variables.)</p>
"
200122,"<p>I agree that the regex solution is the easiest, but I wouldn't say it's the most pythonic.</p>

<p>How about:</p>

<pre><code>text = 'WordWordWord'
new_text = ''
is_first_letter = True

for letter in text:
    if not is_first_letter and letter.isupper():
        new_text += ' ' + letter
    else:
        new_text += letter

    isFirstLetter = False
</code></pre>
"
201020,"<p>Is there are particular reason you're not using the database for this? it seems the normal and natural thing to do - or store a pickle of the settings in the db keyed on user id or something.</p>

<p>You haven't described the usage patterns of the website, but just thinking of a general website - but I would think that keeping the settings in a database would cause much less disk I/O than using files.</p>

<p>OTOH, for settings that might be used by client-side code, storing them as javascript in a static file that can be cached would be handy - at the expense of having multiple places you might have settings. (I'd probably store those settings in  the db, and rebuild the static files as necessary)</p>
"
201272,"<p>I agree with the reply about using Pickled Dictionary.  Very simple and effective for storing simple data in a Dictionary structure.</p>
"
41709,"<p>With a tuple it will always be a hassle to add or change fields. You're right that a dictionary will be much better. </p>

<p>If you want something with slightly friendlier syntax you might want to take a look at the answers <a href=""http://stackoverflow.com/questions/35988/c-like-structures-in-python"" rel=""nofollow"">this question</a> about a simple 'struct-like' object. That way you can pass around an object, say <code>job</code>, and access its fields even more easily than a tuple or dict:</p>

<pre><code>job.jobId, job.username = jobId, username
</code></pre>
"
327697,"<p>You could use a numpy multidimensional array. You'll need to use numbers rather than strings to index into the array, but that can be solved by using a single dict to map words to numbers.</p>

<pre><code>import numpy
w = {'word1':1, 'word2':2, 'word3':3, 'word4':4}
a = numpy.zeros( (4,4,4) )
</code></pre>

<p>Then to index into your array, you'd do something like:</p>

<pre><code>a[w[word1], w[word2], w[word3]] += 1
</code></pre>

<p>That syntax is not beautiful, but numpy arrays are about as efficient as anything you're likely to find. Note also that I haven't tried this code out, so I may be off in some of the details. Just going from memory here.</p>
"
327735,"<p>To your first question I agree with Ali A.</p>

<p>To your second question :</p>

<p>import sys<br>
sys.exit(1)</p>
"
136166,"<p>It depends on the way you are going to distribute your application.<br />
If it will only be used internally, go for django. It's a joy to work with it.
However, django really falls short at the distribution-task; django-applications are a pain to set up.</p>
"
118671,"<p>I haven't tested it, but I'd say it'll most likely work with the latest IPy2.</p>

<p>As for distribution, it's very simple.  Use the -X:SaveAssemblies option to compile your Python code down to a binary and then ship it with your other DLLs and the IPy dependencies.</p>
"
171395,"<p><a href=""http://pypi.python.org/pypi/pyinstall"" rel=""nofollow"">pyinstall</a> looks like it should be a simpler solution for you. At least as far as packaging the python stuff and installing in virtualenv goes. I don't know of a pythonic way to do server configuration...</p>
"
242371,"<p>We have neither ideas about random segmentation faults. There is not enough information. What python libraries are you using for opengl? How do you use them? Can you show us your code? It's probably something trivial but my god -skill ends up to telling me just and only that.</p>

<p>Raytracer in python? I'd prefer just doing that in C with those structs. But then, I'm assuming you aren't going to do a realtime raytracer so that may be ok.</p>
"
135471,"<p>By the way, j0rd4n, you don't (<em>please</em> don't!) write code like this in C#. Apart from the fact that the <code>IsDefaultOrNull</code> is actually called <code>IsNullOrEmpty</code>, this is pure code bloat. C# offers the coalesce operator for situations like these:</p>

<pre><code>string stringValue = otherString ?? defaultString;
</code></pre>

<p>It's true that this only works if <code>otherString</code> is <code>null</code> (rather than empty) but if this can be ensured beforehand (and often it can) it makes the code much more readable.</p>
"
119837,"<p>I wonder what the original poster tried and which methods worked and not worked for him. I have never worked with DICOM, but a quick google search for ""DICOM python"" gave several interesting results. It seems that this project: <a href=""http://www.creatis.univ-lyon1.fr/Public/Gdcm/"" rel=""nofollow"">http://www.creatis.univ-lyon1.fr/Public/Gdcm/</a> should deliver what you want. It has python bindings and a pretty active mailing list.</p>
"
119974,"<p>As Thomas Wouters said, XML-RPC does not have keyword arguments. Only the order of arguments matters as far as the protocol is concerned and they can be called anything in XML: arg0, arg1, arg2 is perfectly fine, as is cheese, candy and bacon for the same arguments.</p>

<p>Perhaps you should simply rethink your use of the protocol? Using something like document/literal SOAP would be much better than a workaround such as the ones presented in other answers here. Of course, this may not be feasible.</p>
"
118847,"<p>Thanks for the answer, there may be a typo, but I can't see it...</p>

<p>Unfortunately the change to snapToGrid didn't make a difference, so I don't think that's the issue.</p>

<p>It's not off by one pixel, but rather it's off by Y_STEP.  Playing around with it some more I've found that I can't get it to be exact at any point that the screen is scrolled up and also that it happens towards the top of the screen, which I suspect is ODE position zero, so I'm guessing my problem is around small or negative values.</p>
"
11235,"<p>If you are running on *nux you might consider dumping the unittest framework in favor of a bash script or makefile. on windows you might consider building a shell app/function that runs the generator and then uses the code (as another process) and unittest that.</p>

<p>A third option would be to generate the code and then build an app from it that includes nothing but a unittest. Again you would need a shell script or whatnot to run this for each input. As to how to encode the expected behavior, it occurs to me that it could be done in much the same way as you would for the C++ code just using the generated interface rather than the C++ one.</p>
"
346187,"<p>You could create a temporary table at runtime and left join on that.  That seems to make the most sense.</p>
"
328579,"<p>You should call the executable just <code>foo</code>, not <code>foo.py</code>, then attempts to import foo will not use it.</p>

<p>As for naming it properly: this is difficult to answer in the abstract; we would need to know what specifically it does. For example, if it configures and controls, calling it -config or ctl might be appropriate. If it is a shell API for the library, it should have the same name as the library.</p>
"
328700,"<p>Thanks to Andre for the answer - so simple!</p>

<p>For those of you who care, perhaps I should have included the entire context of the problem. Here it is anyway:</p>

<p>In my application, users are able to write plugins in python. They must define a function with a well-defined parameter list, but I didn't want to impose any naming conventions on them.</p>

<p>So, as long as users write a function with the correct number of parameters and types, all they have to do is something like this (remember, this is the plugin code):</p>

<pre><code># this is my custom code - all plugins are called with a modified sys.path, so this
# imports some magic python code that defines the functions used below.
from specialPluginHelperModule import *

# define the function that does all the work in this plugin:
def mySpecialFn(paramA, paramB, paramC):
    # do some work here with the parameters above:
    pass

# set the above function:
setPluginFunction(mySpecialFn)
</code></pre>

<p>The call to <code>setPluginFunction</code> takes the function object and sets it in a hidden class object (along with other plugin-configuration related stuff, this example has been simplified somewhat). When the main application wants to run the function, I use the <code>runpy</code> module to run the plugin code, and then extract the class object mentioned above - this gives me the configuration data and the plugin function so I can run it cleanly (without polluting my namespace).</p>

<p>This entire process is repeated multiple times for different plugins over the same input, and seems to work very well for me.</p>
"
328826,"<p>Your CLI module is one thing, the package that supports it is another thing.  Don't confuse the names withe module <code>foo</code> (in a file <code>foo.py</code>) and the package <code>foo</code> (in a directory <code>foo</code> with a file <code>__init__.py</code>).</p>

<p>You have two things named <code>foo</code>: a module and a package.  What else do you want to name <code>foo</code>?  A class?  A function?  A variable?</p>

<p>Pick a distinctive name for the foo module or the foo package.  <code>foolib</code>, for example, is a popular package name.</p>
"
37513,"<p>@John (37448):</p>

<p>Sorry, I might have misled you with the name (bad choice).  I'm not really looking for a decorator function, or anything to do with decorators at all.  What I'm after is for the html(self) def to use ClassX or ClassY's <code>__repr__</code>.  I want this to work without modifying ClassX or ClassY.</p>
"
39871,"<p>Depending on your mix os OSes, you might be better off creating packages for each class of system.</p>

<p>Alternatively, if they all share the same ABI and hardware architecture, you could also compile static binaries.</p>
"
39992,"<p>AFAIK, no. If you just want to check the existence of a given variable, you can do it by testing for it, something like this:</p>

<pre><code>if (foo) foo();
</code></pre>
"
40035,"<p>@e-bartek, I think that window[functionName] won't work if you in some closure, and the function name is local to that closure.  For example:</p>

<pre><code>function foo() {
    var bar = function () {
        alert('hello world');
    };
    var s = 'bar';
    window[s](); // this won't work
}
</code></pre>

<p>In this case, s is 'bar', but the function 'bar' only exists inside the scope of the function 'foo'.  It is not defined in the window scope.</p>

<p>Of course, this doesn't really answer the original question, I just wanted to chime in on this response.  I don't believe there is a way to do what the original question asked.</p>
"
40067,"<p>@pkaeding</p>

<p>Yes, you're right. <em>window[functionName]()</em> doesn't work in this case, but <em>eval</em> does. If I needed something like this, I'd create my own object to keep those functions together.</p>

<pre><code>var func = {};
func.bar = ...;
var s = ""bar"";
func[s]();
</code></pre>
"
185393,"<p>mabye:</p>

<pre><code>^Run.*\.py$
</code></pre>

<p>just a quick try</p>
"
187067,"<p>Ok, I tried it this way.</p>

<p>Via pythonwin, I used the <em>COM Makepy</em> utility. I generated a python interface for MSCluster.Cluster (in order to have a nice introspection in ipython). </p>

<p>Then, localy on my server I do the following:</p>

<pre><code>import win32.client
mscluster = win32.client.Disptach(""MSCluster.Cluster"")
cluster = mscluster.Open(""."")
</code></pre>

<p>And I got the following exception:</p>

<pre><code>&lt;class 'pywintypes.com_error'&gt;: 
(-2147352567, 'Exception occurred.', (0, None, None, None, 0, -2147023174), None)
</code></pre>

<p>If I do:</p>

<pre><code>cluster = mscluster.Open(""&lt;insert here cluster name&gt;"")
</code></pre>

<p>Then I got no error, but cluster is in fact None.</p>

<p>Any advice ?</p>
"
187352,"<p>I tend to use only a few members of each module, so there's a lot of</p>

<pre><code>from john import cleese
from terry import jones, gilliam
</code></pre>

<p>in my code.  I'll import whole modules (such as <code>os</code> or <code>wx</code>) if I expect to be using most of the module and the module name is short.  I'll also import whole modules if there is a name conflict or I want to remind the reader what that function is associated with.</p>

<pre><code>import michael
import sarah

import wave

gov_speech = wave.open(sarah.palin.speechfile)
parrot_sketch = wave.open(michael.palin.justresting)
</code></pre>

<p>(I could use <code>from wave import open as wave_open</code>, but I figure that <code>wave.open</code> will be more familiar to the reader.</p>
"
182923,"<p>If all widgets have already been created, you can apply <code>SetFont</code> recursively, for example with the following function:</p>

<pre><code>def changeFontInChildren(win, font):
    '''
    Set font in given window and all its descendants.
    @type win: L{wx.Window}
    @type font: L{wx.Font}
    '''
    try:
        win.SetFont(font)
    except:
        pass # don't require all objects to support SetFont
    for child in win.GetChildren():
        changeFontInChildren(child, font)
</code></pre>

<p>An example usage that causes all text in <code>frame</code> to become default font with italic style:</p>

<pre><code>newFont = wx.SystemSettings_GetFont(wx.SYS_DEFAULT_GUI_FONT)
newFont.SetStyle(wx.FONTSTYLE_ITALIC)
changeFontInChildren(frame, newFont)
</code></pre>
"
243538,"<p>You may be able to mitigate the problem by compressing the text in the get parameter.</p>
"
243603,"<p>From the link below it looks like you'll be fine for a while ;)</p>

<p><a href=""http://www.boutell.com/newfaq/misc/urllength.html"" rel=""nofollow"">http://www.boutell.com/newfaq/misc/urllength.html</a></p>
"
243860,"<p>If you're using django, maybe you can do this via a template tag instead?</p>

<p>Something like:</p>

<pre><code>&lt;img src=""{% create_image ""This is the text that will be displayed"" %}""&gt;
</code></pre>

<p>The create_image function would create the image with a dummy/random/generated filename, and return the path.</p>

<p>This avoids having to GET or POST to the script, and the images will have manageable filenames.</p>

<p>I can see some potential issues with this approach, I'm just tossing the idea out there ;)</p>
"
37526,"<p>Ah, in that case, perhaps code like this will be useful? It doesn't really have anything to do with decorators, but demonstrates how to pass arguments to a class's initialization function and to retrieve those arguments for later.</p>

<pre><code>import cgi

class ClassX(object):
    def __repr__ (self):
        return ""&lt;class X&gt;""

class HTMLDecorator(object):
    def __init__ (self, wrapped):
        self.__wrapped = wrapped

    def html (self):
        sep = cgi.escape (repr (self.__wrapped))
        return sep.join ((""&lt;H1&gt;"", ""&lt;/H1&gt;""))

inst_x=ClassX()
inst_b=True

print HTMLDecorator(inst_x).html()
print HTMLDecorator(inst_b).html()
</code></pre>
"
37544,"<p>@John (37479):</p>

<p>Very close, but then I lose everything from ClassX.  Below is something a collegue gave me that does do the trick, but it's hideous.  There has to be a better way.</p>

<pre><code>import cgi
from math import sqrt

class ClassX(object): 
  def __repr__(self): 
    return ""Best Guess""

class ClassY(object):
  pass # ... with own __repr__

inst_x=ClassX()

inst_y=ClassY()

inst_z=[ i*i for i in range(25) ]

inst_b=True

avoid=""__class__ __init__ __dict__ __weakref__""

class HTMLDecorator(object):
    def __init__(self,master):
        self.master = master
        for attr in dir(self.master):
            if ( not attr.startswith(""__"") or 
                attr not in avoid.split() and ""attr"" not in attr):
                self.__setattr__(attr, self.master.__getattribute__(attr))

    def html(self): # an ""enhanced"" version of __repr__
        return cgi.escape(self.__repr__()).join((""&lt;H1&gt;"",""&lt;/H1&gt;""))

    def length(self):
        return sqrt(sum(self.__iter__()))

print HTMLDecorator(inst_x).html()
print HTMLDecorator(inst_y).html()
wrapped_z = HTMLDecorator(inst_z)
print wrapped_z.length()
inst_z[0] += 70
#wrapped_z[0] += 71
wrapped_z.__setitem__(0,wrapped_z.__getitem__(0)+ 71)
print wrapped_z.html()
print HTMLDecorator(inst_b).html()
</code></pre>

<p>Output:</p>

<pre>&lt;H1&gt;Best Guess&lt;/H1&gt;
&lt;H1&gt;&lt;__main__.ClassY object at 0x891df0c&gt;&lt;/H1&gt;
70.0
&lt;H1&gt;[141, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576]&lt;/H1&gt;
&lt;H1&gt;True&lt;/H1&gt;</pre>
"
37604,"<p>Regular expressions are not scary, but writing your own regexes to strip HTML is a sure path to madness (and it won't work, either).  Follow the path of wisdom, and use one of the many good HTML-parsing libraries.</p>

<p>Lucas' example is also broken because ""sub"" is not a method of a Python string.  You'd have to ""import re"", then call re.sub(pattern, repl, string).  But that's neither here nor there, as the correct answer to your question does not involve writing any regexes.</p>
"
329079,"<p>I'm guessing you don't care about the string format, you just want a serialization?  If so, why not use Python's built-in serializer, the <a href=""http://www.python.org/doc/2.5.2/lib/module-cPickle.html"" rel=""nofollow"">cPickle</a> module?  The <code>dumps</code> function will convert any python object including a long integer to a string, and the <code>loads</code> function is its inverse.  If you're doing this for saving out to a file, check out the <code>dump</code> and <code>load</code> functions, too.</p>

<pre><code>&gt;&gt;&gt; import cPickle
&gt;&gt;&gt; print cPickle.loads(cPickle.dumps(13**666)) % 666
73
&gt;&gt;&gt; print (13**666) % 666
73
</code></pre>
"
329347,"<p>how about just ensuring that the slope is the same and the point is between the others?</p>

<p>given points (x1, y1) and (x2, y2) ( with x2 > x1)
and candidate point (a,b)</p>

<p>if  (b-y1) / (a-x1) = (y2-y2) / (x2-x1)  And x1 &lt; a &lt; x2 </p>

<p>Then (a,b) must be on line between (x1,y1) and (x2, y2)</p>
"
329519,"<p>This is not directly related to your question, but when you're in the python console, you can call help() on any function and it will print its documentation.</p>

<p>also, you can call dir() on any module or object and it will list all of its attributes, including functions.</p>

<p>This useful for inspecting contents of a module after you've imported it.</p>

<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; dir(math)
['__doc__', '__name__', 'acos', 'asin', 'atan', 'atan2', 'ceil', 'cos', 'cosh', 'degrees', 'e', 'exp', 'fabs', 'floor', 'fmod', 'frexp', 'hypot', 'ldexp', 'log', 'log10', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh']
&gt;&gt;&gt; help( math.log )
Help on built-in function log in module math:

log(...)
    log(x[, base]) -&gt; the logarithm of x to the given base.
    If the base not specified, returns the natural logarithm (base e) of x.
</code></pre>
"
200227,"<p>I think your after the <a href=""http://www.vim.org/scripts/script.php?script_id=850"" rel=""nofollow"">pydiction</a> script. It lets you add your own stuff and site-packages to omni complete. </p>

<p>While your at it, add the following to your python.vim file...</p>

<pre><code> set iskeyword+=.
</code></pre>

<p>This will let you auto-complete package functions e.g. if you enter...</p>

<pre><code> os.path.
</code></pre>

<p>and then [CTRL][N], you'll get a list of the functions for os.path.</p>
"
200456,"<p>I think regexes are the way to go here, but just to give a pure python version without (hopefully) any of the problems Î¤ÎÎ©Î¤ÎÎÎÎ¥ has pointed out:</p>

<pre><code>def splitCaps(s):
    result = []
    for ch, next in window(s+"" "", 2):
        result.append(ch)
        if next.isupper() and not ch.isspace():
            result.append(' ')
    return ''.join(result)
</code></pre>

<p>window() is a utility function I use to operate on a sliding window of items, defined as:</p>

<pre><code>import collections, itertools

def window(it, winsize, step=1):
    it=iter(it)  # Ensure we have an iterator
    l=collections.deque(itertools.islice(it, winsize))
    while 1:  # Continue till StopIteration gets raised.
        yield tuple(l)
        for i in range(step):
            l.append(it.next())
            l.popleft()
</code></pre>
"
171284,"<p>Do all the files have different extensions? If so this might work (i wrote it all off the top of my head so its not tested):</p>

<pre><code>import os

music_dir = ""/home/johnbloggs/music/"" # note the forward slashes and the trailing slash
output_dir = ""/home/johnbloggs/sorted_music/""

for file in os.listdir(music_dir):
     if file.find("".mp3"") != -1:
          if os.path.exists(output_dir + ""mp3""):
               os.system(""cp "" + music_dir + file "" "" + output_dir + ""mp3"")

     elif file.find("".wma"") != -1:
          if os.path.exists(output_dir + ""wma""):
               os.system(""cp "" + music_dir + file "" "" + output_dir + ""wma"")

     # etc
</code></pre>

<p>This is written with Linux in mind. If you are looking to actually read the license type from inside the file, that will be considerably more difficult</p>
"
120225,"<p>Using the above advice, I created some working code.</p>

<p>Server method wrapper:</p>

<pre><code>def unwrap_kwargs(func):
    def wrapper(*args, **kwargs):
        print args
        if args and isinstance(args[-1], list) and len(args[-1]) == 2 and ""kwargs"" == args[-1][0]:
            func(*args[:-1], **args[-1][1])
        else:
            func(*args, **kwargs)
    return wrapper
</code></pre>

<p>Client setup (do once):</p>

<pre><code>_orig_Method = xmlrpclib._Method

class KeywordArgMethod(_orig_Method):     
    def __call__(self, *args, **kwargs):
        args = list(args) 
        if kwargs:
            args.append((""kwargs"", kwargs))
        return _orig_Method.__call__(self, *args)

xmlrpclib._Method = KeywordArgMethod
</code></pre>

<p>I tested this, and it supports method with fixed, positional and keyword arguments.</p>
"
260359,"<p>First, a function that returns a list:</p>

<pre><code>def lastNLines(file, N=10, chunksize=1024):
    lines = None
    file.seek(0,2) # go to eof
    size = file.tell()
    for pos in xrange(chunksize,size-1,chunksize):
        # read a chunk
        file.seek(pos,2)
        chunk = file.read(chunksize)
        if lines is None:
            # first time
            lines = chunk.splitlines()
        else:
            # other times, update the 'first' line with
            # the new data, and re-split
            lines[0:1] = (chunk + lines[0]).splitlines()
        if len(lines) &gt; N:
            return lines[-N:]
    file.seek(0)
    chunk = file.read(size-pos)
    lines[0:1] = (chunk + lines[0]).splitlines()
    return lines[-N:]
</code></pre>

<p>Second, a function that iterates over the lines in reverse order:</p>

<pre><code>def iter_lines_reversed(file, chunksize=1024):
    file.seek(0,2)
    size = file.tell()
    last_line = """"
    for pos in xrange(chunksize,size-1,chunksize):
        # read a chunk
        file.seek(pos,2)
        chunk = file.read(chunksize) + last_line
        # split into lines
        lines = chunk.splitlines()
        last_line = lines[0]
        # iterate in reverse order
        for index,line in enumerate(reversed(lines)):
            if index &gt; 0:
                yield line
    # handle the remaining data at the beginning of the file
    file.seek(0)
    chunk = file.read(size-pos) + last_line
    lines = chunk.splitlines()
    for line in reversed(lines):
        yield line
</code></pre>

<p>For your example:</p>

<pre><code>s = ""foo""
for index, line in enumerate(iter_lines_reversed(fileObj)):
    if line == s:
        print ""FOUND""
        break
    elif index+1 &gt;= 10:
        break
</code></pre>

<p><strong>Edit:</strong> Now gets the file-size automaticly<br />
<strong>Edit2:</strong> Now only iterates for 10 lines.</p>
"
260421,"<p>It <em>may</em> be possible to get the regex compiler to do most of the work for you by concatenating the search expressions into one big regexp, separated by ""|"".  A clever regex compiler might search for commonalities in the alternatives in such a case, and devise a more efficient search strategy than simply checking each one in turn.  But I have no idea whether there are compilers which will do that.</p>
"
260591,"<p>It really depends on what these regexes look like. If you don't have a lot regexes that will match almost anything like '<code>.*</code>' or '<code>\d+</code>', and instead you have regexes that <em>contains</em> mostly words and phrases or any fixed patterns longer than 4 characters (e.g.'<code>a*b*c</code>' in <code>^\d+a\*b\*c:\s+\w+</code>) , as in your examples. You can do this common trick that scales well to millions of regexes:</p>

<p>Build a inverted index for the regexes (rabin-karp-hash('fixed pattern') -> list of regexes containing 'fixed pattern'). Then at matching time, using Rabin-Karp hashing to compute sliding hashes and look up the inverted index, advancing one character at a time. You now have O(1) look-up for inverted-index non-matches and a reasonable O(k) time for matches, k is the average length of the lists of regexes in the inverted index. k can be quite small (less than 10) for many applications. The quality (false positive means bigger k, false negative means missed matches) of the inverted index depends on how well the indexer understands the regex syntax. If the regexes are generated by human experts, they can provide hints for contained fixed patterns as well.</p>
"
260282,"<p>read the last few Ks of the file, and split that into lines to return only the last 10.</p>

<p>it's quite unlikely the start of that chunk to fall on a line boundary, but you'll discard the first lines anyway.</p>
"
260324,"<p>Personally I'd be tempted to break out to the shell and call tail -n10 to load the file. But then I'm not really a Python programmer ;)</p>
"
37488,"<blockquote>
  <p>Is what I'm trying to do possible? If so, what am I doing wrong?</p>
</blockquote>

<p>It's certainly possible. What's wrong is that <code>HTMLDecorator.__init__()</code> doesn't accept parameters.</p>

<p>Here's a simple example:</p>

<pre><code>def decorator (func):
    def new_func ():
        return ""new_func %s"" % func ()
    return new_func

@decorator
def a ():
    return ""a""

def b ():
    return ""b""

print a() # new_func a
print decorator (b)() # new_func b
</code></pre>
"
36219,"<p>It seems that lxml does not expose this libxml2 feature, grepping the source only turns up some #defines for the error handling:</p>

<pre><code>C:\Dev&gt;grep -ir --include=*.px[id] catalog lxml-2.1.1/src | sed -r ""s/\s+/ /g""
lxml-2.1.1/src/lxml/dtd.pxi: catalog.
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_FROM_CATALOG = 20 # The Catalog module
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_WAR_CATALOG_PI = 93 # 93
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_MISSING_ATTR = 1650
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_ENTRY_BROKEN = 1651 # 1651
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_PREFER_VALUE = 1652 # 1652
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_NOT_CATALOG = 1653 # 1653
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_RECURSION = 1654 # 1654
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG=20
lxml-2.1.1/src/lxml/xmlerror.pxi:WAR_CATALOG_PI=93
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_MISSING_ATTR=1650
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_ENTRY_BROKEN=1651
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_PREFER_VALUE=1652
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_NOT_CATALOG=1653
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_RECURSION=1654
</code></pre>

<p>From the <a href=""http://xmlsoft.org/catalog.html"" rel=""nofollow"">catalog implementation in libxml2 page</a> it seems possible that the 'transparent' handling through installation in /etc/xml/catalog may still work in lxml, but if you need more than that you can always abandon lxml and use the default python bindings, which do expose the catalog functions.</p>
"
36827,"<p>This topic is covered in <a href=""https://code.djangoproject.com/wiki/Tutorials"" rel=""nofollow"">Django tutorials</a>.</p>
"
35786,"<p>Most of these kinds of things can be determined programatically in Python, using modules like sys, os, and the special <a href=""http://pyref.infogami.com/__file__"" rel=""nofollow""></a> identifier which tells you where you are in the filesystem path.</p>

<p>It's important to keep in mind that when a module is first imported it will execute everything in the file-scope, which is important for developing system-dependent behaviors. For example, the os module basically determines what operating system you're using on import and then adjusts its implementation accordingly (by importing another module corresponding to Linux, OSX, Windows, etc.).</p>

<p>There's a lot of power in this feature and something along these lines is probably what you're looking for. :)</p>

<p>[Edit] I've also used socket.gethostname() in some rare, hackish instances. ;)</p>
"
197074,"<p>The <a href=""http://en.design-noir.de/mozilla/dictionary-switcher/"" rel=""nofollow"" title=""Dictionary Switcher"">Dictionary Switcher</a> Firefox extensions has an option to detect the right dictionary as I type.<br />
I guess it checks words against the installed dictionaries, and selects the one giving the less errors...</p>

<p>You can't expect all words of the text to be in the dictionary: abbreviations, proper nouns, typos... Beside, some words are common to several languages: a French rock group even made the titles of their disks to have a (different) meaning both in French and in English. So it is a statistical thing: if more than x% of words are found in a good English dictionary, chances are the user types in this language (even if there are mistakes, like probably in this answer, since I am not native English).</p>
"
199288,"<p>There's a simple solution that might work for you.  </p>

<p>Write the PyGTK stuff and PyGame stuff as separate applications.  Then from the PyGTK application call the PyGame application, using os.system to call the PyGame application.  If you need to share data between the two then either use a database, pipes or IPC.</p>
"
172099,"<p>From the documentation on <a href=""http://docs.djangoproject.com/en/dev/topics/auth/"" rel=""nofollow"">django auth</a>, if you want to use the User model, it's mandatory to have a username and password, there are no ""anonymous accounts"". I guess you could create accounts with a default password and then give the opportunity for people to enable a ""real"" account (by setting a password themselves).</p>

<p>To set up a ""People"" table that ties to the User table you just have to use a ForeignKey field (that's actually the <a href=""http://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users"" rel=""nofollow"">recommended way</a> of adding additional info to the User model, and not inheritance)</p>
"
346441,"<p>I had the same bug me recently. I checked out the trunk release which seems to work fine. </p>

<pre><code>In [1]: import tagging; tagging.VERSION
Out[1]: (0, 3, 'pre')
</code></pre>
"
6805,"<P>I have done something similar in the past and used an in-memory XML document as a quick and dirty hierachical database for storage. You can store each show/season/episode as an element (nested appropriately) and attributes of these things as xml attributes on the elements. Then you can use XQuery to get info back out.</P>
<P><STRONG>NOTE:</STRONG> I'm not a Python guy so I don't know what your xml support is like.</P>
<P><STRONG>NOTE 2:</STRONG> You'll want to profile this because it'll be bigger and slower than the solution you've already got. Likely enough if you are doing some high-volume processing then XML is probably not going to be your friend.</P>"
7496,"<p>I read a little on XML User Interface Language (XUL) and it looks really robust and well supported. The main problem for me is it's tied to the Gecko rendering engine so it's cross platform the way wxWidgets, QT and GTK+ are cross platform. Also, there Python bindings don't seem as good as those other libraries.</p>

<p>GladeXML and XRC seem like better markups</p>
"
135815,"<p>I agree with nosklo. By the way, even with a <em>use once, throw away</em> function, most of the time you just want to use something from the operator module.</p>

<p>E.G : </p>

<p>You have a function with this signature : myFunction(data, callback function).</p>

<p>You want to pass a function that add 2 elements.</p>

<p>Using lambda :</p>

<pre><code>myFunction(data, (lambda x, y : x + y))
</code></pre>

<p>The pythonic way :</p>

<pre><code>import operator
myFunction(data, operator.add)
</code></pre>

<p>Or course this is a simple example, but there is a lot of stuff the operator module provides, including the items setters  / getters for list and dict. Really cool.</p>
"
135837,"<p>I'd personnaly use a tool to extract an uml sheme from the C code, then use it to generate python code.</p>

<p>From this squeleton, I's start to get rid of the uncessary C-style structures and then I'd fill the methods with python code.</p>

<p>I think it would be the safer and yet most efficient way.</p>
"
135899,"<p>This does work, and all the code that you've pasted is correct and works fine (I just copied it into a clean test/project app and it reversed the URL without any problem).  So there's something else going on here that you haven't showed us.  Simplify down to the bare-bones basics until it works, then start adding complexity back in and see where it's breaking.</p>

<p>Also, you can do ""./manage.py shell"" and then interactively import the reverse function and your view function and try the reverse.  That'll remove the test setup as a possible cause.</p>
"
135907,"<p>I also discovered that just using the ""or"" operator does pretty well.  For instance:</p>

<pre><code>finalString = get_override() or defaultString
</code></pre>

<p>If *get_override()* returns """" or None, it will always use <em>defaultString</em>.</p>
"
243393,"<p>img's use GET.  You'll have to come up with another mechanism.  How about calling the same functionality in image.py and saving the file as a temp file which you ref in the img tag?  Or how about saving the value of text in a db row during the rendering of this img tag and using the row_id as what you pass into the image.py script?</p>
"
259324,"<blockquote>
  <p>Do it whatever way is expected by the libsmtp in python 2.1</p>
</blockquote>
"
259639,"<p>you'd probably want to use rsplit for this:</p>

<p>rsplit([sep [,maxsplit]])</p>

<p>Return a list of the words in the string, using sep as the delimiter string. If maxsplit is given, at most maxsplit splits are done, the rightmost ones. If sep is not specified or None, any whitespace string is a separator. Except for splitting from the right, rsplit() behaves like split() which is described in detail below. New in version 2.4. </p>
"
259662,"<p><a href=""http://stackoverflow.com/questions/159567/how-can-i-parse-the-first-middle-and-last-name-from-a-full-name-field-in-sql#159760"">Here's how to do it in SQL</a>.  But data normalization with this kind of thing is really a bear.  I agree with Dave DuPlantis about asking for separate inputs.</p>
"
175097,"<p>Very outdated, but maybe you can use <a href=""http://public.perforce.com:8080/@md=d&amp;cd=//guest/miki_tebeka/p4py/&amp;c=5Fm@//guest/miki_tebeka/p4py/main/?ac=83"" rel=""nofollow"">http://public.perforce.com:8080/@md=d&amp;cd=//guest/miki_tebeka/p4py/&amp;c=5Fm@//guest/miki_tebeka/p4py/main/?ac=83</a> for now</p>
"
196940,"<p>You could break the phrase up into words and check a dictionary (there are some that you can download, <a href=""http://wordlist.sourceforge.net/"" rel=""nofollow"">this</a> may be of interest), but that would require that the dictionary you used was good enough.</p>

<p>It would also fall over for proper nouns (my name isn't in the dictionary for example).</p>
"
196964,"<p>Another option may be to export the data as array or object as JSON string and modify the python code slightly to handle the new input. While the escaping via JSON is not 100% bulletproof it will be still better than own escaping routines.</p>

<p>And you'll be able to handle errors if the JSON string is malformatted.</p>

<p>There's a package for Python to encode and decode JSON: <a href=""http://pypi.python.org/pypi/python-json/"" rel=""nofollow"">python-json 3.4</a></p>
"
35838,"<p>I know I'm probably stating the obvious, but don't forget that the quality of the development team and their familiarity with the technology will have a major impact on your ability to deliver. </p>

<p>If you have a strong team, then it's probably not an issue if they're familiar. But if you have people who are more 9 to 5'rs who aren't familiar with the technology, they will need more support and you'd need to make a call if the productivity gains are worth whatever the cost of that support is.</p>
"
37190,"<p>shouldn't this:</p>

<pre><code>{{ user.item }}
</code></pre>

<p>be this?</p>

<pre><code>{{ item }}
</code></pre>

<p>there is no user object in the context within that loop....?</p>
"
198338,"<p>You might also look at using SELECT rather than EXECUTE. EXECUTE is (iirc) basically a SELECT that doesn't actually fetch anything (, just makes side-effects happen).</p>
"
244077,"<p>I use J2EE Eclipse for Python and Java development. It works well.
But Classic Eclipse should be enought.</p>
"
244205,"<p>I used to program in BASIC in the QBasic days. QBASIC had subroutines, functions, structures (they used to be called types), and I guess that's it. Now, this seems limited compared to all the features that Python has - OO, lambdas, metaclasses, generators, list comprehensions, just to name a few off the top of my head. But that simplicity, I think, is a strength of BASIC. If you're looking at a simple embeddable language, I'd bet that QBasic will be faster and easier to understand. And a procedural langauge is probably more than sufficient for most embedding/scripting type of applications.</p>

<p>I'd say the most important reason BASIC is still around is Visual Basic. For a long time in the 90s, VB was the only way to write GUIs, COM and DB code for Windows without falling into one of the C++ Turing tarpits. [Maybe Delphi was a good option too, but unfortunately it never became as popular as VB]. I do think it is because of all this VB and VBA code that is still being used and maintained that BASIC still isn't dead. </p>

<p>That said, I'd say there's pretty a good rationale to write BASIC interpreter (maybe even compiler using LLVM or something similar) for BASIC today. You'll get a clean, simple easy to use and fast language if you implement something that resembles QBasic. You won't have to solve any language design issues and the best part is people will already know your language.</p>
"
120469,"<p>@<a href=""#120256"" rel=""nofollow"">Armin</a>: how come? The Python documentation said the minimum size for that array of short integer is 2 bytes and </p>

<blockquote>
  <p>The actual representation of values is
  determined by the machine architecture
  (strictly speaking, by the C
  implementation). The actual size can
  be accessed through the itemsize
  attribute.</p>
</blockquote>

<p>@<a href=""#120449"" rel=""nofollow"">Arnav</a>: I suggest that your code should check the size of each Type code and choose the corresponding 2-byte type that is specific to the underlying system. </p>
"
120589,"<p>I suspect that looking for binary strings isn't going to help you. An install program is likely to be doing some 'suspicious' things. </p>

<p>You probably need to talk to CA and spybot about white-listing your installer, or about what is triggering the alert.</p>
"
120782,"<p>To answer my own question:</p>

<p>Quoting the actual command when passing the parameters as a list doesn't work correctly (command is first item of list) so to solve the issue I turned the list into a space separated string and passed that into subprocess instead.</p>

<p>Better solutions still welcomed.</p>
"
260075,"<p>The fundamental assumption is flawed, I think. you can't map hashes to regular expressions. </p>
"
260079,"<p>I don't think it's even theoretically possible. What happens if someone passes in a string that matches more than 1 regular expression. </p>

<p>For example, what would happen if someone did:</p>

<pre><code>&gt;&gt;&gt; regex_dict['FileNfoo']
</code></pre>

<p>How can something like that possibly be O(1)?</p>
"
122146,"<pre><code>import random

def makeRand(n):
   rand = random.Random()
   while 1:
      yield rand.randint(0,n)
   yield rand.randint(0,n)      

gen = makeRand(100)      
terms = [ gen.next() for n in range(5) ]

print ""raw list""
print terms
print ""de-duped list""
print list(set(terms))

# produces output similar to this
#
# raw list
# [22, 11, 35, 55, 1]
# de-duped list
# [35, 11, 1, 22, 55]
</code></pre>
"
122159,"<p>Well, first you rewrite LINQ in Python.  Then your solution is a one-liner :)</p>

<pre><code>from random import randrange

def Distinct(items):
    set = {}
    for i in items:
        if not set.has_key(i):
            yield i
            set[i] = 1

def Take(num, items):
    for i in items:
        if num &gt; 0:
            yield i
            num = num - 1
        else:
            break

def ToArray(items):
    return [i for i in items]

def GetRandomNumbers(max):
    while 1:
        yield randrange(max)

print ToArray(Take(5, Distinct(GetRandomNumbers(100))))
</code></pre>

<p>If you put all the simple methods above into a module called LINQ.py, you can impress your friends.</p>

<p>(Disclaimer: of course, this is not <em>actually</em> rewriting LINQ in Python.  People have the misconception that LINQ is just a bunch of trivial extension methods and some new syntax.  The really advanced part of LINQ, however, is automatic SQL generation so that when you're querying a database, it's the database that implements Distinct() rather than the client side.)</p>
"
258798,"<pre><code>import re
url = 'http://www.domainname.com/page?CONTENT_ITEM_ID=1234&amp;param2&amp;param3'
m = re.search('(.*?)&amp;', url)
print m.group(1)
</code></pre>
"
258832,"<p>Look at the <a href=""http://stackoverflow.com/questions/163009/urllib2-file-name"">urllib2 file name</a> question for some discussion of this topic.</p>

<p>Also see the ""<a href=""http://stackoverflow.com/questions/229352/python-find-question"">Python Find Question</a>"" question.</p>
"
258993,"<p>This method isn't dependent on the position of the parameter within the url string. This could be refined, I'm sure, but it gets the point across.</p>

<pre><code>url = 'http://www.domainname.com/page?CONTENT_ITEM_ID=1234&amp;param2&amp;param3'
parts = url.split('?')
id = dict(i.split('=') for i in parts[1].split('&amp;'))['CONTENT_ITEM_ID']
new_url = parts[0] + '?CONTENT_ITEM_ID=' + id
</code></pre>
"
34421,"<p>You can use srvany.exe from Windows NT Resource Kit to create a user defined service that will show up in the admin tools...</p>

<p><a href=""http://support.microsoft.com/kb/137890"" rel=""nofollow"">http://support.microsoft.com/kb/137890</a></p>

<p>I am using this method to run tracd (a python script / server) for trac. </p>

<p>Here are some very clear instructions: <a href=""http://www.tacktech.com/display.cfm?ttid=197"" rel=""nofollow"">http://www.tacktech.com/display.cfm?ttid=197</a></p>

<p>It does require some registry editing (very minimal and easy) but will allow you to make any command line / script a windows service. </p>
"
330931,"<p>Here's an unreliable inefficient recursive regexp solution:</p>

<pre><code>import re

re_tag = re.compile(r'&lt;(?P&lt;tag&gt;[^&gt;]+)&gt;(?P&lt;content&gt;.*?)&lt;/(?P=tag)&gt;', re.S)

def iterparse(text, tag=None):
    if tag is not None: yield tag, text
    for m in re_tag.finditer(text):
        for tag, text in iterparse(m.group('content'), m.group('tag')):
            yield tag, text

def strip_tags(content):
    nested = lambda m: re_tag.sub(nested, m.group('content'))
    return re_tag.sub(nested, content)


txt = ""&lt;133_3&gt;&lt;135_3&gt;&lt;116_2&gt;The other system worked for about 1 month&lt;/116_2&gt; got some good images &lt;137_3&gt;on it then it started doing the same thing as the first one&lt;/137_3&gt; so then I quit using either camera now they are just sitting and collecting dust. &lt;/135_3&gt;&lt;/133_3&gt;""
d = {}
for tag, text in iterparse(txt):
    d.setdefault(strip_tags(text), []).append(int(tag[:-2]))

print(d)
</code></pre>

<p>Output:</p>

<pre><code>{'on it then it started doing the same thing as the first one': [137], 
 'The other system worked for about 1 month': [116], 
 'The other system worked for about 1 month got some good images on it then it started doing the same thing as the first one so then I quit using \
 either camera now they are just sitting and collecting dust. ': [133, 135]}
</code></pre>
"
175941,"<p>Basically, you have the advantage that players have priorities; therefore, you sort the players by descending priority, and then you start allocating slots to them. The first gets their preferred slot, then the next takes his preferred among the free ones and so on. It's a O(N) algorithm.</p>
"
176044,"<p>It's important to note that there is no 'Unicode' file format.  Unicode can be encoded to bytes in several different ways.  Most commonly UTF-8 or UTF-16.  You'll need to know which one your 3rd-party tool is outputting.  Once you know that, converting between different encodings is pretty easy:</p>

<pre><code>in_file = open(""myfile.txt"", ""rb"")
out_file = open(""mynewfile.txt"", ""wb"")

in_byte_string = in_file.read()
unicode_string = bytestring.decode('UTF-16')
out_byte_string = unicode_string.encode('ASCII')

out_file.write(out_byte_string)
out_file.close()
</code></pre>

<p>As noted in the other replies, you're probably going to want to supply an error handler to the encode method.  Using 'replace' as the error handler is simple, but will mangle your text if it contains characters that cannot be represented in ASCII.</p>
"
196790,"<p>I'd start by standardizing the string type I was using in python, to use triple-quoted strings ("""""").  This should reduce the incidents of problems from stray quotes in the input.  You'll still need to escape it of course, but it should reduce the number of issues that are a concern.</p>

<p>What I did to escape the strings would somewhat depend on what I'm worried about getting slipped in, and the context that they are getting printed out again.  If you're just worried about quotes causing problems, you could simply check for and occurrences of """""" and escape them.  On the other hand if I was worried about the input itself being malicious (and it's user input, so you probably should), then I would look at options like strip_tags() or other similar functions.</p>
"
174305,"<p>Some of my more complex 2.x code is going to stay at 2.5 or 2.6.
I am moving onto 3.0 for all new development once some of the 3rd party libraries I use often have been updated for 3.</p>
"
259259,"<p>This example shows how to do it (run it in an interpreter)</p>

<pre><code>&gt;&gt;&gt; def square(x):
...  return x*x
...
&gt;&gt;&gt; a = [1,2,3,4,5,6,7,8,9]

&gt;&gt;&gt; map(square,a)
[1, 4, 9, 16, 25, 36, 49, 64, 81]
</code></pre>
"
120996,"<p>The most significant advantage I can tell of spaces over tabs is that a lot of programmers and projects use a set number of columns for the source code, and if someone commits a change with their tabstop set to 2 spaces and the project uses 4 spaces as the tabstop the long lines are going to be too long for other people's editor window. I agree that tabs are easier to work with but I think spaces are easier for collaboration, which is important on a large open source project like Python.</p>
"
121126,"<p>You can have your cake and eat it to. Set your editor to expand tabs into spaces automatically.</p>

<p>(That would be <code>:set expandtab</code> in Vim.)</p>
"
258259,"<p>Here's what I've received from Steven D'Aprano on comp.lang.python.</p>

<pre><code># Define two decorator factories.
def precall(pre):
    def decorator(f):
        def newf(*args, **kwargs):
            pre()
            return f(*args, **kwargs)
        return newf
    return decorator

def postcall(post):
    def decorator(f):
        def newf(*args, **kwargs):
            x = f(*args, **kwargs)
            post()
            return x
        return newf
    return decorator
</code></pre>

<p>Now you can monkey patch class A if you want. It's probably not a great
idea to do this in production code, as it will effect class A everywhere.
[this is ok for my application, as it is basically a protocol converter and there's exactly one instance of each class being processed.]</p>

<pre><code>class A:
    # in my real application, this is an imported class
    # that I cannot modify
    def p1(self): print 'A.p1'

class X:
    def __init__(self):
        self.a=A()
        A.p1 = precall(self.pre)(postcall(self.post)(A.p1))
    def pre(self): print 'X.pre'
    def post(self): print 'X.post'


x=X()
x.a.p1()
</code></pre>

<p>Gives the desired result.</p>

<pre><code>X.pre
A.p1
X.post
</code></pre>
"
121796,"<p>Have you considered overriding the administrative templates for the models in question?  This <a href=""http://www.unessa.net/en/hoyci/2006/12/custom-admin-templates/"" rel=""nofollow"">link</a> provides an excellent overview of the process.  In this particular situation, having a finer-grained level of control may be the best way to achieve the desired result.</p>
"
122032,"<p>While it's true that <code>id(object)</code> gets the object's address in the default CPython implementation, this is generally useless... you can't <i>do</i> anything with the address from pure Python code.</p>

<p>The only time you would actually be able to use the address is from a C extension library... in which case it is trivial to get the object's address since Python objects are always passed around as C pointers.</p>
"
122047,"<p>Python with Numeric Python:</p>

<pre><code>from numpy import *
a = random.random_integers(0, 100, 5)
b = unique(a)
</code></pre>

<p>VoilÃ !  Sure you could do something similar in a functional programming style but... why?</p>
"
191257,"<p>For Python, the <a href=""http://pyprocessing.berlios.de/"" rel=""nofollow"">PyProcessing</a> project allows you to program with processes much like you would use threads. It is included in the standard library of the recently released 2.6 version as <a href=""http://docs.python.org/library/multiprocessing.html"" rel=""nofollow""><code>multiprocessing</code></a>. The module has many features for establishing and controlling access to shared data structures (queues, pipes, etc.) and support for common idioms (i.e. managers and worker pools).</p>
"
178657,"<p>Thank you all for the helpful replies. I've been plugging away at this problem. A 'best' solution still eludes me, but I've some thoughts.</p>

<p>I should mention that the statistics of the data-set I'm working with. In 75% of the cases there will be one Mod. In 24% of the cases, two. In 1% of the cases there will be zero, or three or more. For every Mod, there is at least one unique Car, though a Mod may be applied to numerous Cars.</p>

<p>Having said that, I've considered (but not implemented) something like-so:</p>

<pre><code>class ModSet(models.Model):
  mods = models.ManyToManyField(Mod)
</code></pre>

<p>and change cars to </p>

<pre><code>class Car(models.Model):
  modset = models.ForeignKey(ModSet)
</code></pre>

<p>It's trivial to group by Car.modset: I can use regroup, as suggested by Javier, for example. It seems a simpler and reasonably elegant solution; thoughts would be much appreciated.</p>
"
178829,"<p>No difficult manipulation is necessary if you want a quick-and-dirty fix before your unit-tests.</p>

<p>If the unit tests are in the same file as the code you wish to test, simply delete unwanted module from the <code>globals()</code> dictionary.</p>

<p>Here is a rather lengthy example: suppose you have a module <code>impp.py</code> with contents:</p>

<pre><code>value = 5
</code></pre>

<p>Now, in your test file you can write:</p>

<pre><code>&gt;&gt;&gt; import impp
&gt;&gt;&gt; print globals().keys()
&gt;&gt;&gt; def printVal():
&gt;&gt;&gt;     print impp.value
['printVal', '__builtins__', '__file__', 'impp', '__name__', '__doc__']
</code></pre>

<p>Note that <code>impp</code> is among the globals, because it was imported. Calling the function <code>printVal</code> that uses <code>impp</code> module still works:</p>

<pre><code>&gt;&gt;&gt; printVal()
5
</code></pre>

<p>But now, if you remove <code>impp</code> key from <code>globals()</code>...</p>

<pre><code>&gt;&gt;&gt; del globals()['impp']
&gt;&gt;&gt; print globals().keys()
['printVal', '__builtins__', '__file__', '__name__', '__doc__']
</code></pre>

<p>...and try to call <code>printVal()</code>, you'll get:</p>

<pre><code>&gt;&gt;&gt; printVal()
Traceback (most recent call last):
  File ""test_imp.py"", line 13, in &lt;module&gt;
    printVal()
  File ""test_imp.py"", line 5, in printVal
    print impp.value
NameError: global name 'impp' is not defined
</code></pre>

<p>...which is probably exactly what you're trying to achieve.</p>

<p>To use it in your unit-tests, you can delete the globals just before running the test suite, e.g. in <code>__main__</code>:</p>

<pre><code>if __name__ == '__main__':
    del globals()['impp']
    unittest.main()
</code></pre>
"
179057,"<p>In your comment <a href=""http://stackoverflow.com/questions/178458/python-unit-testing-and-mocking-imports#178829"">above</a>, you say you want to convince python that certain modules have already been imported.  This still seems like a strange goal, but if that's really what you want to do, in principle you can sneak around behind the import mechanism's back, and change <code>sys.modules</code>.  Not sure how this'd work for package imports, but should be fine for absolute imports.</p>
"
179169,"<p>Python has lists and dicts as 2 separate data structures. PHP mixes both into one. You should use dicts in this case. </p>
"
340160,"<p>I think,  you can return '' and fill _errors.</p>

<pre><code>msg = u""That URL is already in the database.  Please submit a unique URL.""
self._errors[""url""]=ErrorList([msg])
return ''
</code></pre>

<p>or</p>

<pre><code>from django.contrib.sites.models import Site
class SignUpForm(forms.Form):
    # ... Other fields ...

url = forms.URLField(label='URL for new site, eg: example.com')

def clean_url(self):
    url = self.cleaned_data['url']
    try:
        a = Site.objects.get(domain=url)
        raise forms.ValidationError(""That URL is already in the database.  Please submit a unique URL."")
    except Site.DoesNotExist:
        return url
    return ''

def clean(self):
    # Other form cleaning stuff.  I don't *think* this is causing the grief
</code></pre>
"
340719,"<p>Other issues include how business critical are the applications and how hard will it be to find maintainers. If the pages are hobbies of yours then I don't see a reason why you shouldn't rewrite them since if you introduce bugs or the rewrite doesn't go according to schedule a business won't lose money. If the application is central to a business I wouldnât rewrite it unless you are running into limitations with the current design that can not be overcome with out a complete rewrite at which point the language choice is secondary to the fact that you need to throw out several years of work because itâs not maintainable and no longer meets your needs.</p>
"
15291,"<p>I agree with mreggen. Tell them by working in Python you can get things done faster. Getting things done faster possibly means money saved by the client. In the least it means that you are working with a language you a more comfortable in, meaning faster development, debugging, and refactoring time. There will be less time spent looking up documentation on what function to use to find the length of a string, etc. </p>
"
259735,"<p>I would specify a standard format (some forms use them), such as ""Please write your name in <em>First name, Surname</em> form"".</p>

<p>It makes it easier for you, as names don't usually contain a comma. It also verifies that your users actually enter both first name and surname.</p>
"
135271,"<p>Why aren't you using the <a href=""http://docs.python.org/lib/module-struct.html"" rel=""nofollow"">struct</a> package?</p>
"
244957,"<p>Why is itertools needed?</p>

<pre><code>def imerge(a,b):
    for i,j in zip(a,b):
    	yield i
    	yield j
</code></pre>

<p>In this case at least one of a or b must be of finite length, cause zip will return a list, not an iterator. If you need an iterator as output then you can go for the Claudiu solution.</p>
"
122701,"<p>Quick tip, if you color each state differently you can identify which one to pick from the color under mouse cursor rather than doing a complex point in polygon routine.</p>
"
256770,"<p>Everything has advantages and disavantages, but:</p>

<p><em>I have yet to use a single browser-based application on localhost, intranet, or internet that feels nice to use, is responsive, and who's user interface isn't strictly limited by the limitations of HTML/JS/CSS.</em></p>

<p>Note: Flash/Java-based UI is an exception (but that's even worse in some regards and I don't think it's really what you are talking about here).</p>
"
196800,"<p>I would just use Pycurl to concatenate the search terms onto the query uri.</p>
"
196850,"<p>puts ""Hi! I'm #{name}, and I'm #{age} years old.""</p>
"
173933,"<p>The <code>format_columns</code> function should do what you want:</p>

<pre><code>from __future__ import generators
try: import itertools
except ImportError: mymap, myzip= map, zip
else: mymap, myzip= itertools.imap, itertools.izip

def format_columns(string_list, columns, separator="" ""):
    ""Produce equal-width columns from string_list""
    sublists= []

    # empty_str based on item 0 of string_list
    try:
        empty_str= type(string_list[0])()
    except IndexError: # string_list is empty
        return

    # create a sublist for every column
    for column in xrange(columns):
            sublists.append(string_list[column::columns])

    # find maximum length of a column
    max_sublist_len= max(mymap(len, sublists))

    # make all columns same length
    for sublist in sublists:
         if len(sublist) &lt; max_sublist_len:
             sublist.append(empty_str)

    # calculate a format string for the output lines
    format_str= separator.join(
        ""%%-%ds"" % max(mymap(len, sublist))
         for sublist in sublists)

    for line_items in myzip(*sublists):
        yield format_str % line_items

if __name__ == ""__main__"":
    skills_defs = [""ACM:Aircraft Mechanic"", ""BC:Body Combat"", ""BIO:Biology"",
        ""CBE:Combat Engineer"", ""CHM:Chemistry"", ""CMP:Computers"",
        ""CRM:Combat Rifeman"", ""CVE:Civil Engineer"", ""DIS:Disguise"",
        ""ELC:Electronics"",""EQ:Equestrian"", ""FO:Forward Observer"",
        ""FOR:Forage"", ""FRG:Forgery"", ""FRM:Farming"", ""FSH:Fishing"",
        ""GEO:Geology"", ""GS:Gunsmith"", ""HW:Heavy Weapons"", ""IF:Indirect Fire"",
        ""INS:Instruction"", ""INT:Interrogation"", ""JP:Jet Pilot"", ""LB:Longbow"",
        ""LAP:Light Aircraft Pilot"", ""LCG:Large Caliber Gun"", ""LNG:Language"",
        ""LP:Lockpick"", ""MC:Melee Combat"", ""MCY:Motorcycle"", ""MEC:Mechanic"",
        ""MED:Medical"", ""MET:Meterology"", ""MNE:Mining Engineer"",
        ""MTL:Metallurgy"", ""MTN:Mountaineering"", ""NWH:Nuclear Warhead"",
        ""PAR:Parachute"", ""PST:Pistol"", ""RCN:Recon"", ""RWP:Rotary Wing Pilot"",
        ""SBH:Small Boat Handling"",""SCD:Scuba Diving"", ""SCR:Scrounging"",
        ""SWM:Swimming"", ""TW:Thrown Weapon"", ""TVD:Tracked Vehicle Driver"",
        ""WVD:Wheeled Vehicle Driver""]

    for line in format_columns(skills_defs, 2):
        print line
</code></pre>

<p>This assumes that you have a Python with generators available.</p>
"
31964,"<p>Daniel,
<a href=""http://jinja.pocoo.org/2/documentation/intro"" rel=""nofollow"">Jinja</a> implements a sandboxe environment that may or may not be useful to you. From what I remember, it doesn't yet ""comprehend"" list comprehensions. </p>

<p><a href=""http://jinja.pocoo.org/2/documentation/sandbox"" rel=""nofollow"">Sanbox info</a> </p>
"
33325,"<p>I had the same issue and I simply opened the file and did some replace: then reload the file in the Python interpreter. This works fine and is easy to do. </p>

<p>Otherwise AFAIK you have to use some conf objects.</p>
"
33556,"<p>Ints are immutable and you can't modify them in place, so you should go with option #2 (because option #1 is impossible without some trickery).</p>
"
33673,"<p>what if you do the following:</p>

<h2><code>ssh &lt;remote host&gt; '&lt;your command&gt; ;&lt;your regexp using awk or something&gt;'</code></h2>

<p>For example</p>

<h2><code>ssh &lt;remote host&gt; '&lt;your program&gt;; ps aux | awk \'/root/ {print $2}\''</code></h2>

<p>This will connect to , execute  and then print each PSID for any user root or any process with root in its description.</p>

<p>I have used this method for running all kinds of commands on remote machines.  The catch is to wrap the command(s) you wish to execute in single quotation marks (') and to separate each command with a semi-colon (;).</p>
"
33873,"<p>@Ben Collins</p>

<p>I think you're right about stderr being an issue. I am pretty sure it's blocking on the readline() call. </p>

<p>In the end, I gave up and decided to use the pxssh module from <a href=""http://pexpect.sourceforge.net"" rel=""nofollow"">pexpect</a> to automate my interaction with an ssh session.</p>

<p>@Misha M</p>

<p>Unfortunately, the semi-colon trick doesn't work here: it blocks on executing my program. </p>
"
331923,"<p>What about:</p>

<pre><code>import filecmp
import shutil

local = ""local.txt""
remote = ""remote.txt""
config_file = ""C:\some\path\file.txt""


if filecmp.cmp( local, config_file):
    to_copy = remote
else:
    to_copy = local


shutil.copyfile( to_copy, config_file  )
</code></pre>

<p>yikes, this open id screen name looks terrible.</p>
"
333599,"<p>Are you sure proper status code is being sent, you can use live http headers add-on for firefox to check whether 301 or 303 is being sent or not.</p>
"
333653,"<p>You should use firebug, or live http headers, or somesuch, to see what exactly is happening here. My guess: Your authorized() function is always returning false (even when a user is logged in), so it redirects to the login page, which (if the user is already logged in) immediately redirects the user back to your page, which redirects... you get the idea.</p>
"
180657,"<p>Another upvote for <a href=""http://stackoverflow.com/questions/172066/django-userprofile-without-a-password#172097"">insin's answer</a>: handle this through a <code>UserProfile</code>.  <a href=""http://djangopeople.net/ubernostrum/"" rel=""nofollow"">James Bennett</a> has a <a href=""http://www.b-list.org/weblog/2006/jun/06/django-tips-extending-user-model/"" rel=""nofollow"">great article</a> about extending <code>django.contrib.auth.models.User</code>.  He walks through a couple methods, explains their pros/cons and lands on the <code>UserProfile</code> way as ideal.</p>
"
123258,"<p>Here's another python version, more closely matching the structure of your C# code.  There isn't a builtin for giving distinct results, so I've added a function to do this.</p>

<pre><code>import itertools, random

def distinct(seq):
    seen=set()
    for item in seq:
        if item not in seen:
            seen.add(item)
            yield item

def getRandomNumbers(max):
    while 1:
        yield random.randint(0,max)

for item in itertools.islice(distinct(getRandomNumbers(100)), 5):
    print item
</code></pre>
"
257973,"<p>Check out Apache's <a href=""http://mina.apache.org/ftpserver/"" rel=""nofollow"">FTPServer</a>.</p>

<p>They have an <a href=""http://mina.apache.org/ftpserver/embedding-ftpserver-in-5-minutes.html"" rel=""nofollow"">example</a> of how to embed it in a Java application.</p>
"
133963,"<p>Try granting the Apache user (the user that the apache service is running under) r+w permissions on that file.</p>
"
134007,"<p>Doesn't Apache's error log give you a clue?</p>

<p>Maybe it has to do with SELinux. Check /var/log/audit/audit.log and adjust your SELinux configuration accordingly, if the audit.log file indicates that it's SELinux which denies Apache access.</p>
"
255962,"<p>If you want the auto-complete to use date from your own database, you'll need to do the search yourself and update the suggestions using AJAX as users type. For the search part, you might want to look at <a href=""http://lucene.apache.org/java/docs/"" rel=""nofollow"">Lucene</a>.</p>
"
256028,"<p>You would have to write the web page in Python. There are many Python web frameworks out there (e.g. Django) that are easy to work with. You could convert your entire scripting framework to a web application that has a worker thread going and crawling through html pages, saving them to a particular location, indexing them for you to see and providing a delete button that calls the system's delete function on the particular file.</p>
"
256031,"<p>Rather than having your script output static HTML files, with a little amount of work you could probably adapt your script to run as a small web application with the help of something like web.py.</p>

<p>You would start your script and point a browser at <a href=""http://localhost:8080"" rel=""nofollow"">http://localhost:8080</a>, for instance. The web browser would be your user interface.</p>

<p>To achieve the 'delete' functionality, all you need to do is write some Python that gets executed when a form is submitted to actually perform the deletion.</p>
"
122181,"<p>I use two space indentation and an editor (kwrite) that inserts spaces instead of tabs when I hit the tab key.</p>
"
195776,"<p>Expanding on the delayed-calculation idea, why not turn the dict into a class that supplies (and caches) elements as necessary?</p>

<p>You might also use psyco to speed up overall execution...</p>
"
195792,"<p><em>OR</em> you could just use a database for storing the values in? Check out SQLObject, which makes it very easy to store stuff to a database.</p>
"
334061,"<p>Use whichever you like, but realize that str.split is the recommended way of doing it.  :-)</p>

<p>string.split is a tad older method of doing the same thing.</p>

<p>str.split is a bit more efficient (since you don't have to import the string module or look up any names from it), but not enough to make a huge difference if you prefer string.split.</p>
"
334975,"<p>The problem is actually when I use </p>

<pre><code>return args[0].redirect(users.create_logout_url(args[0].request.uri))
</code></pre>

<p>This goes to the logout page, which then redirects to the current page. However, my logs show that the current page thinks I'm still logged in, even after the logging out is complete.</p>

<p>This is strange, since I haven't modified anything in the app engine users API. </p>
"
31331,"<p>Essentially, yes. I was not sure you could do it like that (current version does not do it like that). When using the python install script, however, there is no option (that I can find) to specify where to put directories and files (eg --prefix). I was hoping to match the current layout of python related files so as to avoid 'polluting' my machine with redundant files.</p>
"
31425,"<p>The short answer is because I can. The long answer, expanding on what the OP said, is to be more compatible with apache and mysql/postgresql. They are all 64bit (apache is a fat binary with ppc, ppc64 x86 and x86 and x86_64, the others just straight 64bit). <strong>Mysqldb and mod_python wont compile unless they are all running the  same architecture.</strong> Yes I could run them all in 32bit (and have in the past) but this is much more work then compiling one program.</p>

<p>EDIT: You pretty much convinced though to just let the installer do its thing and update the PATH to reflect this.</p>
"
244477,"<p>There are many ways to do this problem.  I like <a href=""http://numpy.scipy.org/"" rel=""nofollow"">Numpy</a>'s tools because it is normally already imported in everything I do.  However, if you aren't using Numpy for anything else this probably isn't a good method.</p>

<pre><code>import numpy
li = [[0,1,2],[3,4,5],[6,7,8]]
li2=li[0] #first element of array to merge
i=1 
while i&lt;len(li):
    li2=numpy.concatenate((li2,li[i]))
    i+=1
print li2
</code></pre>

<p>This would print [0 1 2 3 4 5 6 7 8] and then you can convert this into your string too.</p>
"
244526,"<p>That's what I thought too, but I figured it out a couple hours ago.  Apparently if the directory/file I'm trying to write to doesn't exist, FreeImagePy isn't smart enough to create it (most of the time.  Creating a new multipage image seems to work fine) but i guess running it within IDLE, IDLE figures it out and takes care of it or something.  I managed to work around it by using os.mkdir to explicitly make sure things that I need exist.</p>
"
132438,"<p>First, i'd consider wrapping the existing C library with Pythonic goodness to provide an API in the form of a python module.  I'd look at  swig, ctypes, pyrex, and whatever else is out there these days.  The C library itself would stay there unchanged.  Saves work.  </p>

<p>But if i really had to write original Python code based on the C, there's no tool i'd use, just my brain.  C allows too many funny tricks with pointers, clever things with macros, etc that i'd never trust an automated tool even if someone pointed one out to me.  </p>

<p>I mentioned Pyrex - this is a language similar to C but also Python oriented. I haven't done much with it, but it could be easier than writing pure python, given that you're starting with C as a guide.</p>

<p>Converting from more constrained, tamer languages such as IDL (the data languages scientists like to use, not the other IDL) is hard, requiring manual and mental effort.  C?  Forget it, not until the UFO people give us their fancy software tools that are a thousand years ahead of our state of the art!</p>
"
132470,"<p>Any automatic translation is going to suffer for not using the power of Python.  C-type procedural code would run very slowly if translated directly into Python, you would need to profile and replace whole sections with more Python-optimized code.</p>
"
254942,"<p>That's seems way too dynamic.  You're supposed to do</p>

<pre><code>{% url named-url-pattern-string-for-my-home-page-view %}
</code></pre>

<p>And leave it at that.  Dynamically filling in the name of the URL tag is -- frankly -- a little odd.  </p>

<p>If you want to use any of a large number of different URL tags, you'd have to do something like this</p>

<pre><code>{% if tagoption1 %}&lt;a href=""{% url named-url-1 %}""&gt;Text&lt;/a&gt;{% endif %}
</code></pre>

<p>Which seems long-winded because, again, the dynamic thing you're trying to achieve seems a little odd.</p>

<p>If you have something like a ""families"" or ""clusters"" of pages, perhaps separate template directories would be a way to manage this better.  Each of the clusters of pages can inherit from a base templates and override small things like this navigation feature to keep all of the pages in the cluster looking similar but having one navigation difference for a ""local home"".</p>
"
255183,"<p>Check out this tutorial:</p>

<p><a href=""http://wiki.pylonshq.com/display/pylonscookbook/AuthKit+0.4+UsersFromDatabase+with+SQLAlchemy+0.4+and+SQLAlchemyManager"" rel=""nofollow"">http://wiki.pylonshq.com/display/pylonscookbook/AuthKit+0.4+UsersFromDatabase+with+SQLAlchemy+0.4+and+SQLAlchemyManager</a></p>
"
255251,"<p>Same answer came to me while reading the question.</p>

<p>I believe model_browse view is the best way to sort the query parameters and use it as a generic router.</p>
"
335269,"<p>Don't be afraid to adapt the model classes in Django to your own needs. There's nothing magical about them. And I guess this is the Right Place for this code: In the model.</p>
"
28711,"<p>If you can use IronPython, there is TagLibSharp.  <a href=""http://stackoverflow.com/questions/28664/what-is-the-besta-very-good-meta-data-reader-library#28687"">It can be used from any .NET language</a>.</p>
"
194417,"<p>Drools has a modern human readable rules implementation -- https://www.jboss.org/drools/.
They have a way users can enter their rules in Excel. A lot more users can understand what is in Excel than in other tools.</p>
"
195137,"<p>i think python tend to have lower hosting requirements (i.e., grails needs a jvm, and most el-cheapo hosts dont provide one, where as they usually provide python support). Plus google app engine supports django (to some extend). </p>

<p>But if you got the dough, grails is so much better imho. </p>
"
122212,"<p>Here's a transliteration from your solution to Python.</p>

<p>First, a generator that creates Random numbers.  This isn't very Pythonic, but it's a good match with your sample code. </p>

<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; def getRandomNumbers( max ):
...     while True:
...             yield random.randrange(0,max)
</code></pre>

<p>Here's a client loop that collects a set of 5 distinct values.  This is -- again -- not the most Pythonic implementation.</p>

<pre><code>&gt;&gt;&gt; distinctSet= set()
&gt;&gt;&gt; for r in getRandomNumbers( 100 ):
...     distinctSet.add( r )
...     if len(distinctSet) == 5: 
...             break
... 
&gt;&gt;&gt; distinctSet
set([81, 66, 28, 53, 46])
</code></pre>

<p>It's not clear why you want to use a generator for random numbers -- that's one of the few things that's so simple that a generator doesn't simplify it.  </p>

<p>A more Pythonic version might be something like:</p>

<pre><code>distinctSet= set()
while len(distinctSet) != 5:
    distinctSet.add( random.randrange(0,100) )
</code></pre>

<p>If the requirements are to generate 5 values and find distinct among those 5, then something like</p>

<pre><code>distinctSet= set( [random.randrange(0,100) for i in range(5) ] )
</code></pre>
"
122285,"<p>Maybe this will suit your needs and look a bit more linqish:</p>

<pre><code>from numpy import random,unique

def GetRandomNumbers(total=5):
    while True:
    	yield unique(random.random(total*2))[:total]

randomGenerator = GetRandomNumbers()

myRandomNumbers = randomGenerator.next()
</code></pre>
"
244843,"<p>BTW, in Haskell you'd rather use</p>

<pre><code>enumFromTo 1 n
[1 .. n]
</code></pre>

<p>These are just unnecessary.</p>

<pre><code>take n [1 ..]
take n $ iterate (+1) 1
</code></pre>
"
125142,"<p>If you wanted to do it with javascript/jQuery, take a look at this question: <a href=""http://stackoverflow.com/questions/119441/highlight-a-word-with-jquery"">http://stackoverflow.com/questions/119441/highlight-a-word-with-jquery</a></p>
"
125163,"<p>You need to append the c:\Oracle32\bin directory to the PATH variable of your environment before you execute python.exe.<br>
In Linux, I need to set up the LD_LIBRARY_PATH variable for similar reasons, to locate the Oracle libraries, before calling python. I use wrapper shell scripts that set the variable and then call Python.<br>
In your case, maybe you can call, in the service startup, a .cmd or .vbs script that sets the PATH variable and then calls python.exe with your .py script.</p>

<p>I hope this helps!</p>
"
255484,"<p>Browsers can be accessed anywhere with internet and you deploy it on the server. The desktop app has to be deployed to their computers and each computer somehow has its own uniqueness even with same OS and same version. This could bring you lots of hassles.
Go for web.</p>
"
123090,"<p>Generic views will usually be the way to go, but ultimately you're free to handle URLs however you want. FormWizard does things in a class-based way, as do some apps for RESTful APIs.</p>

<p>Basically with a URL you are given a bunch of variables and place to provide a callable, what callable you provide is completely up to you - the standard way is to provide a function - but ultimately Django puts no restrictions on what you do.</p>

<p>I do agree that a few more examples of how to do this would be good, FormWizard is probably the place to start though.</p>
"
246922,"<p>Perhaps you are calling an OpenGL function that requires an active OpenGL context, without having one? That shouldn't necessarily crash, but I guess it might. How to set up such a context depends on the platform, and it's been a while since I used GL from Python (and when I did, I also used GTK+ which complicates matters).</p>
"
125136,"<p>You could use a metaclass that auto-wraps methods (or class attributes) that follow a naming convention into properties (shamelessly taken from <a href=""http://www.python.org/download/releases/2.2/descrintro/#metaclasses"" rel=""nofollow"">Unifying Types and Classes in Python 2.2</a>:</p>

<pre><code>class autoprop(type):
    def __init__(cls, name, bases, dict):
        super(autoprop, cls).__init__(name, bases, dict)
        props = {}
        for name in dict.keys():
            if name.startswith(""_get_"") or name.startswith(""_set_""):
                props[name[5:]] = 1
        for name in props.keys():
            fget = getattr(cls, ""_get_%s"" % name, None)
            fset = getattr(cls, ""_set_%s"" % name, None)
            setattr(cls, name, property(fget, fset))
</code></pre>

<p>This allows you to use:</p>

<pre><code>class A:
    __metaclass__ = autosuprop
    def _readonly(self):
        return __x
</code></pre>
"
247730,"<p>os.system(""open file.xls"")</p>
"
130623,"<p>You can subtract two <a href=""http://docs.python.org/lib/module-datetime.html"" rel=""nofollow"">datetime</a> objects to find the difference between them.<br />
You can use <code>datetime.fromtimestamp</code> to parse a POSIX time stamp.</p>
"
127105,"<p>Might be wrong, but I don't think there is a way to find the number of groups that would have been returned had the regex matched.  The only way I can think of to make this work the way you want it to is to pass the number of matches your particular regex expects as an argument.</p>

<p>To clarify though: When findall succeeds, you only want the first match to be returned, but when it fails you want a list of empty strings?  Because the comment seems to show all matches being returned as a list.</p>
"
127216,"<p>To smoothly move object between starting coordinate <code>(x1, y1)</code> and destination coordinate <code>(x2,y2)</code>, you need to first ask yourself, how <em>long</em> the object should take to get to its destination. Lets say you want the object to get there in <code>t</code> time units (which maybe seconds, hours, whatever). Once you have determined this it is then trivial to workout the displacement per unit time:</p>

<pre><code>dx = (x2-x1)/t
dy = (y2-y1)/t
</code></pre>

<p>Now you simply need to add <code>(dx,dy)</code> to the object's position (<code>(x,y)</code>, initially <code>(x1,y1)</code>) every unit time, and stop when the object gets within some threshold distance of the destination. This is to account for the fact errors in divisions will accumulate, so if you did an equality check like: </p>

<pre><code>(x,y)==(x2,y2)
</code></pre>

<p>It is unlikely it will ever be true. </p>

<p>Note the above method gives you constant velocity, straight line movement. You may wish to instead use some sort a slightly more complex formula to give the object the appearance of accelerating, maintaining cruise speed, then decelerating. The following formulae may then be useful:</p>

<pre><code>v(t) = u(t) + t*a(t)
x(t) = v(t) + t*v(t)
</code></pre>

<p>This is merely <a href=""http://en.wikipedia.org/wiki/Eulers_Method"" rel=""nofollow"">Euler's method</a>, and should suffice for animation purposes. </p>
"
24962,"<p><em>str()</em> in python on an integer will <strong>not</strong> print any decimal places.</p>

<p>If you have a float that you want to ignore the decimal part, then you can use str(int(floatValue)).</p>

<p>Perhaps the following code will demonstrate:</p>

<pre><code>&gt;&gt;&gt; str(5)
'5'
&gt;&gt;&gt; int(8.7)
8
</code></pre>
"
176251,"<p>See also a question I asked: <a href=""http://stackoverflow.com/questions/47762/how-to-ranking-search-results"">How-to: Ranking Search Results</a>.</p>

<p>Surely there are more approaches, but this is the one I'm using for now.</p>
"
176472,"<p>Using a <a href=""http://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users"" rel=""nofollow"">model with a ForeignKey field linking to User</a> might not work as you want because you need anonymous access. I'm not sure if that's going to work, but you might try what happens if you let it have a ForeignKey to <a href=""http://docs.djangoproject.com/en/dev/topics/auth/#anonymous-users"" rel=""nofollow"">AnonymousUser</a> (whose id is always None!) instead.</p>

<p>If you try it, post your results here, I'd be curious.</p>
"
176521,"<p>Honestly, smarter people than I have figured this stuff out. I'd load up the solr app and make json calls from my appengine app and let solr take care of indexing. </p>
"
177637,"<p>Asking the question helped clarify the issue; here is a function that gets more at what I am trying to do.  Is there a way to represent some of the stuff in Â¶2 above, or a more efficient way to do in SQL or python what I am trying to accomplish in <code>show_distinct</code>?</p>

<pre><code>#!/usr/bin/env python

import sqlite3

conn = sqlite3.connect('so_question.sqlite')
cur = conn.cursor()

cur.execute('create table soquestion (word, big, expensive, smart, fast)')
cur.execute(""insert into soquestion values ('dog', 9, -10, -20, 4)"")
cur.execute(""insert into soquestion values ('professor', 2, 4, 40, -7)"")
cur.execute(""insert into soquestion values ('ferrari', 7, 50, 0, 48)"")
cur.execute(""insert into soquestion values ('alaska', 10, 0, 1, 0)"")
cur.execute(""insert into soquestion values ('gnat', -3, 0, 0, 0)"")

cur.execute(""select * from soquestion"")
all = cur.fetchall()

definition_list = ['word', 'big', 'expensive', 'smart', 'fast']

def show_distinct(db_tuple, def_list=definition_list):
    minimum = min(db_tuple[1:])
    maximum = max(db_tuple[1:])
    if abs(minimum) &gt; maximum:
    	print db_tuple[0], 'is not', def_list[list(db_tuple).index(minimum)]
    elif maximum &gt; abs(minimum):
    	print db_tuple[0], 'is', def_list[list(db_tuple).index(maximum)]
    else:
    	print 'no distinct value'

for item in all:
    show_distinct(item)
</code></pre>

<p>Running this gives:</p>

<pre>
    dog is not smart
    professor is smart
    ferrari is expensive
    alaska is big
    gnat is not big
    >>> 
</pre>
"
245238,"<p>IMO this is one of those metaphors used to describe things in a natural language. The term is essentially used in context of describing functions as first class objects. </p>

<p>If you consider a object oriented language, we can impart various features to objects for eg: inheritance, class definition, ability to pass to other sections of code(method arguments), ability to store in a data structure etc. If we can do the same with an entity which is not normally considered as a object, like functions in the case of java script, such entities are considered to be first class objects.</p>

<p>First class essentially here means, not handled as second class (with degraded behaviour). Essentially the mocking is perfect or indistinguishable.</p>
"
245267,"<p>Excel exposes the same OLE automation API used by VBA to anything that supports COM.  You can use win32com (which is included with ActiveState Python by default) to manipulate spreadsheets in much the same way that you would do in VBA.</p>
"
245505,"<p>Based on CesarB's response and the link Charles provided, I've done the following:</p>

<pre><code>try:
  from subprocess import Popen, PIPE
  _p = Popen([""svnversion"", "".""], stdout=PIPE)
  REVISION= _p.communicate()[0]
  _p = None # otherwise we get a wild exception when Django auto-reloads
except Exception, e:
  print ""Could not get revision number: "", e
  REVISION=""Unknown""
</code></pre>

<p>Golly Python is cool. :)</p>
"
132260,"<p>I don't know of anything similar to <a href=""http://java.sun.com/developer/onlineTraining/Programming/JDCBook/stack.html"" rel=""nofollow"">java's response to SIGQUIT</a>, so you might have to build it in to your application. Maybe you could make a server in another thread that can get a stacktrace on response to a message of some kind?</p>
"
132425,"<p>Why not keeping the C code and <a href=""http://www.python.org/doc/ext/intro.html"" rel=""nofollow"">creating a Python C module</a> which can be imported into a running Python environment?</p>
"
127787,"<p>Start by contributing to a Python project that you use and enjoy.  This can be as simple as answering questions on the mailing list or IRC channel, offering to help with documentation and test writing or fixing bugs.</p>
"
128005,"<p>From the code that was posted, the only difference between Transition and Labeled Transition is the return of get_lable() and has_label().  In which case you can compress these two a single class that sets a label attribute to None and </p>

<pre><code>return self.label is not None
</code></pre>

<p>in the has_label() function.</p>

<p>Can you post the code for the <code>ConditionalTransition</code> class?  I think this would make it clearer.</p>
"
251052,"<p>We need more information.</p>

<ol>
<li>Is sudo asking you for a password?</li>
<li>What kind of interface does the mod script have for asking questions?</li>
</ol>

<p>Because these kind of things are not handled as normal over the pipe.</p>

<p>A solution for both of these might be <a href=""http://www.noah.org/wiki/Pexpect"" rel=""nofollow"">Pexpect</a>, which is rather expert at handling funny scripts that ask for passwords, and various other input issues.</p>
"
251533,"<p>Well there is <a href=""http://www.sto-helit.de/index.php?module=download&amp;action=list&amp;category=18"" rel=""nofollow"">Mortscript</a>. a widely used scripting for Windows Mobile. Not sure if it can access all the phones functions. I believe there is <a href=""http://www.kocjan.org/tclmentor/1-tcl/17-tcl-on-windows-mobile-introduction.html"" rel=""nofollow"">TCL</a> for Windows Mobile as well.</p>
"
193709,"<p>Well, the obvious one would be to keep your naming consistent.  Functions and classes should be named similarly (if not identically) in both implementations.  This usually happens naturally whenever you implement an API separately in two different languages.  The big ticket item though (at least in my book) is to follow language-specific idioms.  For example, let's assume that I were implementing a REST API in two languages I'm more familiar with: Ruby and Scala.  The Ruby version might have a class <code>MyCompany::Foo</code> which contains method <code>bar_baz()</code>.  Conversely, the Scala version of the same API would have a class <code>com.mycompany.rest.Foo</code> with a method <code>barBaz()</code>.  It's just naming conventions, but I find it goes a long way to helping your API to feel ""at home"" in a particular language, even when the design was created elsewhere.</p>

<p>Beyond that I have only one piece of advise: document, document, document.  That's easily the best way to keep your sanity when dealing with a multi-implementation API spec.</p>
"
177046,"<p>I just found this article this weekend: <a href=""http://www.perl.com/pub/a/2003/02/19/engine.html"" rel=""nofollow"">http://www.perl.com/pub/a/2003/02/19/engine.html</a></p>

<p>Looks not too complicated to do a simple one (though it would need heavy optimizing to be an enterprise type solution for sure). I plan on trying a proof of concept with some data from Project Gutenberg.</p>

<p>If you're just looking for something you can explore and learn from I think this is a good start.</p>
"
177742,"<p>The django.contrib.auth.models.User exists solely for the purpose of using default authentication backend (database-based). If you write your own backend, you can make some accounts passwordless, while keeping <em>normal</em> accounts with passwords. Django documentation has a <a href=""http://docs.djangoproject.com/en/dev/topics/auth/#other-authentication-sources"" rel=""nofollow"">chapter on this</a>.</p>
"
193825,"<p>If <code>a.isWhatever</code> is rarely true you could build an ""index"" once:</p>

<pre><code>a_index = set((i,j) 
              for i,arow in enumerate(a) 
              for j,a in enumerate(arow) 
              if a.IsWhatever())
</code></pre>

<p>and each time you want something to be done:</p>

<pre><code>for (i,j) in a_index:
    b[i][j].doSomething()
</code></pre>

<p>If a changes over time, then you will need to
keep the index up-to-date. That's why I used
a set, so items can be added and removed fast.</p>
"
193937,"<p>The <code>import X as Y</code> is useful if you have different implementations of the same module/class.</p>

<p>With some nested <code>try..import..except ImportError..import</code>s you can hide the implementation from your code. See <a href=""http://codespeak.net/lxml/tutorial.html"" rel=""nofollow"">lxml etree import example</a>:</p>

<pre><code>try:
  from lxml import etree
  print(""running with lxml.etree"")
except ImportError:
  try:
    # Python 2.5
    import xml.etree.cElementTree as etree
    print(""running with cElementTree on Python 2.5+"")
  except ImportError:
    try:
      # Python 2.5
      import xml.etree.ElementTree as etree
      print(""running with ElementTree on Python 2.5+"")
    except ImportError:
      try:
        # normal cElementTree install
        import cElementTree as etree
        print(""running with cElementTree"")
      except ImportError:
        try:
          # normal ElementTree install
          import elementtree.ElementTree as etree
          print(""running with ElementTree"")
        except ImportError:
          print(""Failed to import ElementTree from any known place"")
</code></pre>
"
194022,"<p>Damn, verifying everything in this question I eventually solved the problem. The 'No such file or directory' are caused by some __db.XXX files missing. Using bsddb.dbtables.bsdTableDB([dbname],[folder], create=1) after db4.4_recover, these files got created and everything is now working.</p>

<p>Still, it was a bit of an obscure problem, and initially hard to figure out. But thanks to the question Examining Berkeley DB files from the CLI I got the tools I needed. I'll just post it here if someone ends up with the same problem in the future and end up at stackoverflow.com</p>
"
27780,"<p>If you want to share common functionality between pages I suggest you look at custom tags. They're quite <a href=""https://docs.djangoproject.com/en/1.1/howto/custom-template-tags/"" rel=""nofollow"">easy to create</a>, and are very powerful.</p>

<p>Also, <a href=""https://code.djangoproject.com/wiki/ExtendingTemplates"" rel=""nofollow"">templates can extend from other templates</a>. This allows you to have a base template to set up the layout of the page and to share this between other templates which fill in the blanks. You can nest templates to any depth; allowing you to specify the layout on separate groups of related pages in one place.</p>
"
24939,"<p>In which context are you asking?</p>

<p>Are you trying to capture the output from a program you start on the command line?</p>

<p>if so, then this is how to execute it:</p>

<pre><code>somescript.py | your-capture-program-here
</code></pre>

<p>and to read the output, just read from standard input.</p>

<p>If, on the other hand, you're executing that script or cmd.exe or similar from within your program, and want to wait until the script/program has finished, and capture all its output, then you need to look at the library calls you use to start that external program, most likely there is a way to ask it to give you some way to read the output and wait for completion.</p>
"
252399,"<p>IronPython?</p>
"
127092,"<p>The <code>lastindex</code> property of the match object should be what you are looking for. See the <a href=""http://docs.python.org/lib/match-objects.html"" rel=""nofollow"">re module docs</a>.</p>
"
132499,"<p>Don't use a regular expression for this. You will get confused about comments containing opening tags and what not, and do the wrong thing. HTML isn't regular, and trying to modify it with a single regular expression will fail.</p>

<p>Use a HTML parser for this. BeautifulSoup is a good, easy, flexible and sturdy one that is able to handle real-world (meaning hopelessly broken) HTML. With it you can just look up all comment nodes, examine their content (you can use a regular expression for <em>that</em>, if you wish) and remove them if they need to be removed.</p>
"
132521,"<p>This works in Visual Studio 2005, where there is no line span option:</p>

<p><code>\&lt;!--\[if IE\]\&gt;{.|\n}*\&lt;!\[endif\]--\&gt;</code></p>
"
130669,"<p>Like so:</p>

<pre><code># self.timestamp should be a datetime object
if (datetime.now() - self.timestamp).seconds &gt; 100:
    print ""object is over 100 seconds old""
</code></pre>
"
130773,"<p>This is a bit hacky, but it could work.</p>

<p>Why not call multiple .py scripts in a row?</p>

<p>Each scripts can pass in a small subset of the parameters, and the values to a temp text file. The final script will read and work off of the temp text file.</p>

<p>I agree that this method is filled with danger and WTF's, but sometimes you have to just hack stuff together.</p>
"
131383,"<p>Post save. That way the new data (the reason for performing the serialization) is already in the database. It'll make for a much cleaner bit of code that simply takes from the database and doesn't have to worry about adding an extra value.</p>

<p>The other way that comes to mind is to maintain the xml file in parallel to the database. That is to say, in your save() add the data to the database, and to the xml file. This would have a much less overhead if you're dealing with huge tables.</p>
"
131930,"<p>For the specific case where your list is a sequence of single-character strings you can get what you want by changing the list to be searched to a string in advance (eg. ''.join(chars)).</p>

<p>You can then use the .find() method, which does work as you want.  However, there's no corresponding method for lists or tuples.</p>

<p>Another possible option is to use a dictionary instead.  eg.</p>

<pre><code>d = dict((x, loc) for (loc,x) in enumerate(chars))
...
index = d.get(chars_to_find, -1)  # Second argument is default if not found.
</code></pre>

<p>This may also perform better if you're doing a lot of searches on the list.  If it's just a single search on a throwaway list though, its not worth doing.</p>
"
247862,"<pre><code>[dict(zip(keys,values[n:n+len(keys)])) for n in xrange(0,len(values),len(keys)) ]
</code></pre>

<p>UG-LEEE.  I'd hate to see code that looks like that.  But it looks right.</p>

<pre><code>def dictizer(keys, values):
   steps = xrange(0,len(values),len(keys))
   bites = ( values[n:n+len(keys)] for n in steps)
   return ( dict(zip(keys,bite)) for bite in bites )
</code></pre>

<p>Still a little ugly, but the names help make sense of it.</p>
"
248743,"<p>There's no single user that is halfway between a ""normal"" user and root. You have root, and then you have users; users can have differing levels of capabilities. If you want something that's more powerful than a ""normal"" user but not as powerful as root, you just create a new user with the capabilities you want, but don't give it the privileges you don't want it to have.</p>
"
337348,"<p>I have had good luck with <a href=""http://www.biblet.freeserve.co.uk/"" rel=""nofollow"">wmdecode</a> on Windows. Granted, it's an EXE, not a java project. But it could be useful if you run into WINMAIL.DAT files that other solutions can't decode.</p>
"
337727,"<p>Yes, sort of.
In your filter method you can declare a wildcard variable that collects all the unknown  <a href=""http://www.python.org/doc/2.5.2/tut/node6.html#SECTION006720000000000000000"" rel=""nofollow"">keyword arguments</a>. Your method might look like this:</p>

<pre><code>def filter(self, **kwargs):
    for key,value in kwargs:
        if key.startswith('min_price__') and key.endswith('__range'):
            currency = key.replace('min_price__', '').replace('__range','')
            rate = self.current_conversion_rates[currency]
            self.setCurrencyRange(value[0]*rate, value[1]*rate)
</code></pre>
"
337852,"<p>I use different glade files for different windows. But I keep dialog associated with a window in the same glade file. As you said, the naming problem is annoying. </p>
"
337886,"<p>I'd go with <a href=""http://stackoverflow.com/questions/337223/python-item-for-item-until-stopterm-in-item#337285"">Steven Huwig's</a> or <a href=""http://stackoverflow.com/questions/337223/python-item-for-item-until-stopterm-in-item#337279"">S.Lott's</a> solutions for real usage, but as a slightly hacky solution, here's one way to obtain this behaviour:</p>

<pre><code>def stop(): raise StopIteration()

usefullines = list(stop() if stopterm in line else line for line in file)
</code></pre>

<p>It's slightly abusing the fact that anything that raises StopIteration will abort the current iteration (here the generator expression) and uglier to read than your desired syntax, but will work.</p>
"
23041,"<p>Open Calais probably use language parsing technology and language statics to guess which words or phrases are Names, Places, Companies, etc. Then, it is just another step to do some kind of search for those entities and return meta data.</p>

<p>Zementa probably does something similar, but matches the phrases against meta-data attached to images in order to acquire related results.</p>

<p>It certainly isn't easy.</p>
"
23414,"<p>Possibly a version of spawn() for python? <a href=""http://en.wikipedia.org/wiki/Spawn_(operating_system)"" rel=""nofollow"">http://en.wikipedia.org/wiki/Spawn_(operating_system)</a></p>
"
246962,"<p>Isn't that when you use decaling, through <code><a href=""http://www.opengl.org/documentation/specs/man_pages/hardcopy/GL/html/gl/texenv.html"" rel=""nofollow"">glTexEnv()</a></code>?</p>
"
247633,"<p>I'd get rid of wizard in whole. They are the most unpleasant things I've ever used.</p>

<p>The problem that requires a wizard-application where you click 'next' is perhaps a problem where you could apply a better user interface in a bit different manner. Instead of bringing up a dialog with annoying 'next' -button. Do this:</p>

<p>Bring up a page. When the user inserts the information to the page, extend or shorten it according to the input. If your application needs to do some processing to continue, and it's impossible to revert after that, write a new page or disable the earlier section of the current page. When you don't need any input from the user anymore or the app is finished, you can show a button or enable an existing such.</p>

<p>I don't mean you should implement it all in browser. Make simply a scrolling container that can contain buttons and labels in a flat list.</p>

<p>Benefit: The user can just click a tab, and you are encouraged to put all the processing into the end of filling the page.</p>
"
247711,"<p>It should be noted that a Wizard should be the interface for mutli-step, infrequently-performed tasks. The wizard is used to guide the user through something they don't really understand, because they almost never do it.</p>

<p>And if some users might do the task frequently, you want to give those power users a lightweight interface to do the same thing - even if it less self explanatory.</p>

<p>See: <strong><a href=""http://msdn.microsoft.com/en-us/library/aa511331.aspx#wizards"" rel=""nofollow"">Windows Vista User Experience Guidelines - Top Violations</a></strong></p>

<blockquote>
  <p><strong>Wizards</strong></p>
  
  <p><strong>Consider lightweight alternatives first, such as dialog boxes, task
  panes, or single pages.</strong> Wizards are
  a heavy UI, best used for multi-step,
  infrequently performed task. You don't
  have to use wizardsâyou can provide
  helpful information and assistance in
  any UI.</p>
</blockquote>
"
127720,"<p>Have you tried this?</p>

<pre><code>print xml.etree.ElementTree.tostring( conf_new )
</code></pre>
"
249406,"<p>Is the python path still looking at the old binary version of libjpeg?</p>

<p>You will need to modify it to point to the new place if it is.</p>

<p>When you compiled the new version of the PIL did it say that it found libjpeg? It will compile happily without it (iirc) and the first sign of trouble you will see is at include time.</p>

<p>You will need to adjust the path at ./configure time.</p>

<p>The diff might just not work for you. You should test some more and then perhaps file a bug.</p>
"
2941,"<p>You don't need to <em>compile</em> python for Mac/Windows/Linux.  It is an interpreted language, so you simply need to have the Python interpreter installed on the system of your choice (it is available for all three platforms).</p>

<p>As for a GUI library that works cross platform, Python's <a href=""http://www.tcl.tk/"" rel=""nofollow"">Tk/Tcl</a> widget library works very well, and I believe is sufficiently cross platform.</p>

<p><a href=""http://docs.python.org/lib/module-Tkinter.html"" rel=""nofollow"">Tkinter</a> is the python interface to Tk/Tcl</p>

<p>From the python project webpage: </p>

<blockquote>
  <p>Tkinter is not the only GuiProgramming
  toolkit for Python.  It is however the
  most commonly used one, and almost the
  only  one that is portable between
  Unix, Mac and Windows</p>
</blockquote>"
185499,"<p>I've been pretty surprised that imaplib doesn't do a lot of the response parsing.  And it seems that responses were crafted to be hard to parse.</p>

<p>FWIW, to answer my own question:
    c.search(None, 'GM')</p>

<p>(I have no idea what the '(\HasNoChildren) ""/""' part is about.)</p>
"
347129,"<p>This is a ruff business.  Technology churn keeps everyone busy and workers who want to excel at their craft can become constantly busy in a sea of new technology.  But, in the end all of these technologies follow the same patterns and practices to one degree or another.  Becoming an expert in the fundamentals will go a long way to forwarding a career in this business.  The <a href=""http://rads.stackoverflow.com/amzn/click/020161622X"" rel=""nofollow"">Pragamatic Programmer</a> is a classic source for direction.  </p>

<p>Also, what you can or should do (Windows vs. Linux) may depend greatly on Geography. I follow  the job market in my area. Spend a little time finding out what business are looking for and what contractors are doing and choose technologies to learn based on this information.  User groups, conferences, and code camps are also a good source. </p>

<p>If the real problem here is that you are on your own building your first web app and find what you see on channel 9 is more compelling then maybe you should follow your instincts! BTW, I think you will find ""clunkiness"" everywhere, might as well get used to it.</p>
"
347348,"<p>Really all you need to do is make sure you take baby steps and are doing something you are enjoying.</p>

<p>I started off programming in visual basic on a little game. Not the best language, but it was a good starting point for me at the time. My point is, you don't need to pick the best language/operating system/anything from the start, just iterate. It is the programming way.</p>

<p>By the way, just because you use windows as your OS doesn't mean you have to do everything .NET I use windows and then have a server for all my web hosting that I SSH into.</p>
"
347353,"<p>I had the same issue for a little while myself. I was getting bored of just being in PHP and wanted to be able to do more. I ended up settling on C# since it not only fulfilled the 'necessary evil' argument, but allows me to do anything I want in the MS realm, and is the closest syntax wise to another language (Java).</p>

<p>Thinking about all the different types of projects this opened me up to made me choose this direction. Both languages can be used for web development, mobile devices, and desktop applications.</p>
"
347357,"<p>Cool, thanks for the lisp code.  I'll need to study it to make sure I get it.</p>

<p>As for the first answer, the first time I was ""writing c"" in lisp because that's the only way I knew how to program and didn't have a clue why anyone would use lisp.  This time around, I've been playing around with scheme, but wanted to use python so if I got stuck on something I could ""cheat"" and use something pythonish, then while waiting for usenet answers go on to the next part of the problem.</p>
"
347367,"<p>You might want to take a look at <a href=""http://www.cs.utk.edu/~plank/plank/jgraph/jgraph.html"" rel=""nofollow"">Jgraph</a>, which solves a complementary problem: it is a data grapher rather than a function grapher.  But there are a lot of things in common such as dealing with major and minor tick marks, axis labels, and so on and so forth.  I find the input language a little verbose for my taste, but Jgraph produces really nice technical graphs.  There are a lot of examples on the web site and probably some good ideas you could steal.  </p>

<p>And you know what they say: talent imitates, but genius steals :-)</p>
"
347579,"<p>This seems to do what i was expecting.</p>

<p>import math</p>

<p>def main():
    getTickGap(-1,1.5)</p>

<p>def next_multiple(x, y):
    return math.ceil(x/y)*y</p>

<p>def getTickGap(xmin, xmax):
    xdelta = xmax -xmin
    width = 250
    # smallest power of 10 greater than delta
    factor = 10**math.ceil(math.log(xdelta,10))
    # 0.1 &lt;= normalised_delta &lt; 1
    normalised_delta = xdelta / factor
    print(""normalised_delta"", normalised_delta)</p>

<pre><code># we want largest gap
if normalised_delta/4 &gt;= 0.1:
  step_size = 0.1
elif normalised_delta/4 &gt;= 0.05:
  step_size = 0.05
elif normalised_delta/20 &lt;= 0.01:
  step_size = 0.01
step_size = step_size * factor


##    if normalised_delta/20 == 0.005:
##      step_size = 0.005
##    elif normalised_delta/20 &lt;= 0.01:
##      step_size = 0.01
##    elif normalised_delta/4 &gt;= 0.05:
##      step_size = 0.05
##    step_size = step_size * factor
print(""step_size"", step_size)
totalsteps = xdelta/step_size
print(""Total steps"", totalsteps)
print(""Range ["", xmin, "","", xmax, ""]"")

firstInc = next_multiple(xmin, step_size)
count = (250/xdelta)*(firstInc - xmin)
print(""firstInc "", firstInc, 'tick at ', count)
print(""start at "", firstInc - xmin, (width/totalsteps)*(firstInc - xmin))
inc = firstInc

while (inc &lt;xmax):
    inc += step_size
    count += (width/totalsteps)
    print("" inc"", inc, ""tick at "", count)
</code></pre>

<p>if <strong>name</strong> == ""<strong>main</strong>"":
    main()</p>
"
193032,"<p>In some cases, you might want to use the <a href=""https://docs.python.org/2/library/warnings.html"" rel=""nofollow"">warnings</a> library.  You can have very fine-grained control over how your warnings are displayed.</p>
"
177966,"<p>Exactly. So you should only be able to get the information for the currently available egg (singular) of a library. If you have multiple eggs of the same library in your site-packages folder, check the easy-install.pth in the same folder to see which egg is really used :-)</p>

<p>On a site note: This is exactly the point of systems like zc.buildout which lets you define the exact version of a library that will be made available to you for example while developing an application or serving a web application. So you can for example use version 1.0 for one project and 1.2 for another. </p>
"
339388,"<p>I recently wrote a script to do something very similar to this.  It would traverse a project, find all module dependencies and add any missing import statements.  I won't clutter this post up with the entire script, but I'll show how I went about modifying my files.</p>

<pre><code>import os
from mmap import mmap

def insert_import(filename, text):
    if len(text) &lt; 1:
        return
    f = open(filename, 'r+')
    m = mmap(f.fileno(), os.path.getsize(filename))
    origSize = m.size()
    m.resize(origSize + len(text))
    pos = 0
    while True:
        l = m.readline()
        if l.startswith(('import', 'from')):
            continue
        else:
            pos = m.tell() - len(l)
            break
    m[pos+len(text):] = m[pos:origSize]
    m[pos:pos+len(text)] = text
    m.close()
    f.close()
</code></pre>

<p>Summary: This snippet takes a filename and a blob of text to insert.  It finds the last import statement already present, and sticks the text in at that location.</p>

<p>The part I suggest paying most attention to is the use of mmap.  It lets you work with files in the same manner you may work with a string.  Very handy.</p>
"
19665,"<p>Well, python is a high level language.. its not hard to learn and if the guys already have programming knowledge it should be much easier to learn.. i like django.. i think it should be a nice try to use django .. </p>
"
248806,"<p>Take a look here: <a href=""http://www.measurement-factory.com/"" rel=""nofollow"">http://www.measurement-factory.com/</a></p>

<p>The Co-Advisor product might be what you are after. Note that this is by the same mob that created Web-Polygraph/</p>
"
248874,"<p>I'm not familiar enough with Python to tell you what the necessary commands would be in that language, but you should be able to accomplish this by forking and using a pipe to communicate between the parent and child processes.  Something along the lines of:</p>

<ul>
<li>Run the program as root via sudo or suid</li>
<li>On startup, the program immediately forks and establishes a pipe for communication between the parent and child processes</li>
<li>The child process retains root power, but just sits there waiting for input from the pipe</li>
<li>The parent process drops root (changes its uid back to that of the user running it), then displays the GUI, interacts with the user, and handles all operations which are available to a non-privileged user</li>
<li>When an operation is to be performed which requires root privileges, the (non-root) parent process sends a command down the pipe to the (root) child process which executes it and optionally reports back to the parent</li>
</ul>

<p>This is likely to be a bit easier to write than an independent daemon, as well as more convenient to run (since you don't need to worry about whether the daemon is running or not), while also allowing the GUI and other things which don't need root powers to be run as non-root.</p>
"
249444,"<p>Hm... That would do it:</p>

<pre><code>baselen = len(self.basePath)
for path in paths:
    path = path[baselen:].replace(""/"", ""\\"")
    newPaths.append(path)
return newPaths
</code></pre>

<p>If you like, you can do it like this:</p>

<pre><code>baselen = len(self.basePath)
return (path[baselen:].replace(""/"", ""\\"") for path in paths)
</code></pre>

<p>Not calculating <code>baselen</code> in every loop iteration is also good practice.</p>
"
217916,"<p>Here is a <a href=""http://www.unix.com.ua/orelly/perl/cookbook/ch06_10.htm"" rel=""nofollow"">Perl example</a> of doing this. It is simply using a table to replace each wildcard construct with the corresponding regular expression. I've done this myself previously, but in C. It shouldn't be too hard to port to Python.</p>
"
152954,"<p>It's generally not a good idea, for reasons already mentioned.  However, Python deliberately allows this behaviour in case there is no other way of doing something.</p>

<p>For example, if you have a closed-source compiled Python library where the author didn't think you'd need direct access to a certain object's internal state&mdash;but you really do&mdash;you can still get at the information you need.  You have the same problems mentioned before of keeping up with different versions (if you're lucky enough that it's still maintained) but at least you can actually do what you wanted to do.</p>
"
296801,"<p>Python also has meta classes but that is more like a template class than a partial class.  A good example of meta class usage is the Django ORM.  All of your table models inherit from a base model class which also gets functionality included from a meta class.  It is a pretty cool concept that enables an active record like pattern (is it full active record?).</p>
"
299591,"<p>You could try <a href=""http://www.develer.com/oss/GccWinBinaries"" rel=""nofollow"">this</a> unofficial MinGW distribution, it has a simple install process that sets up distutils to use it for compiling extensions.</p>
"
74485,"<p>Seems to work fine for me. Check out the methods in the <a href=""http://docs.python.org/lib/module-random.html"" rel=""nofollow"">official python documentation</a> for random:</p>

<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; random.random()
0.69130806168332215
&gt;&gt;&gt; random.uniform(1, 10)
8.8384170917436293
&gt;&gt;&gt; random.randint(1, 10)
4
</code></pre>
"
74615,"<p>Python has a pretty good IPC library: see <a href=""https://docs.python.org/2/library/ipc.html"" rel=""nofollow""><a href=""https://docs.python.org/2/library/ipc.html"" rel=""nofollow"">https://docs.python.org/2/library/ipc.html</a></a></p>
"
75158,"<p>You may also want to have a look at <a href=""http://code.google.com/p/httplib2/"" rel=""nofollow"">httplib2</a>, with <a href=""http://bitworking.org/projects/httplib2/doc/html/libhttplib2.html#examples"" rel=""nofollow"">examples</a>. I find using httplib2 is more concise than using the built-in HTTP modules.</p>
"
75360,"<p>Works for me:</p>

<pre><code>Python 2.5.1 (r251:54863, Jun 15 2008, 18:24:51) 
[GCC 4.3.0 20080428 (Red Hat 4.3.0-8)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; import random
&gt;&gt;&gt; brothers = ['larry', 'curly', 'moe']
&gt;&gt;&gt; random.choice(brothers)
'moe'
&gt;&gt;&gt; random.choice(brothers)
'curly'
</code></pre>
"
216113,"<p>Python 2.6 supports <a href=""http://docs.python.org/whatsnew/2.6.html#pep-366-explicit-relative-imports-from-a-main-module"" rel=""nofollow"">explicit relative imports</a>, which make using packages even easier than previous versions.
I suggest you look into breaking your app into smaller modules inside a package.
You can organize your application like this:</p>

<pre><code>myapp/
  application/
  gui/
  command/
  state/
</code></pre>

<p>Where each directory has its own <code>__init__.py</code>. You can have a look at any python app or even standard library modules for examples.</p>
"
77112,"<p>The only right answer is ""It depends"". There's a lot of variables that can affect the performance, and you can optimize many things in either situation.</p>
"
77114,"<p>The path was the mistake. Thanks. I was looking at everything else to be wrong :-)</p>
"
185558,"<p>if you don't care about readability, uuid.uuid4() is your friend.</p>

<pre><code>import uuid

def unique_filename(prefix=None, suffix=None):
    fn = []
    if prefix: fn.extend([prefix, '-'])
    fn.append(str(uuid.uuid4()))
    if suffix: fn.extend(['.', suffix.lstrip('.')])
    return ''.join(fn)
</code></pre>
"
4128,"<p>have you tried watching the traffic between the GUI and the serial port to see if there is some kind of special command being sent across?  Also just curious, Python is sending ASCII and not UTF-8 or something else right?  The reason I ask is because I noticed your quote changes for the strings and in some languages that actually is the difference between ASCII and UTF-8.</p>
"
1885,"<p>The  reason msvcrt fails in IDLE is because IDLE is not accessing the library that runs msvcrt. Whereas when you run the program natively in cmd.exe it works nicely. For the same reason that your program blows up on Mac and Linux terminals.</p>

<p>But I guess if you're going to be using this specifically for windows, more power to ya.</p>"
347771,"<p>On range -1, 0</p>

<p>i get </p>

<pre><code>normalised_delta 1.0
step_size 0.1
Total steps 10.0
Range [ -1 , 0 ]
firstInc  -1.0 tick at  0.0
start at  0.0 0.0
 inc -0.9 tick at  25.0
 inc -0.8 tick at  50.0
 inc -0.7 tick at  75.0
 inc -0.6 tick at  100.0
 inc -0.5 tick at  125.0
 inc -0.4 tick at  150.0
 inc -0.3 tick at  175.0
 inc -0.2 tick at  200.0
 inc -0.1 tick at  225.0
 inc -1.38777878078e-16 tick at  250.0
 inc 0.1 tick at  275.0
</code></pre>

<p>How come the second line from bottom get this number ????</p>
"
348082,"<p>The OP here, I've not finally managed to log in using my OpenID.</p>

<p>@S.Lott</p>

<p>Point well taken, but for some Linux distros it seems to be standard to install application-specific data and application-specific modules in specific locations.  I think that making these locations configurable at build/install time is a nice thing to do for people packaging my application.  AFAICS âthe pythonic wayâ in this case would force these packagers to apply patches to my code.</p>

<p>I'm also in the habit of writing applications where the executable part is a tiny wrapper around a main function in an application-specific module.  To me it doesn't seem right to stick this application-specific module in <code>/usr/lib/python2.5/site-packages</code>.</p>
"
1478,"<p>As far as I can tell Python, up through 2.5, only supports hexadecimal &amp; octal literals.  I did find some discussions about adding binary to future versions but nothing definite.</p>"
1479,"<p>I am pretty sure this is one of the things due to change in Python 3.0 with perhaps bin() to go with hex() and oct().</p>

<p>EDIT:
lbrandy's answer is correct in all cases.</p>
"
177321,"<p>Have a look at <a href=""http://moinmo.in/DesktopEdition"" rel=""nofollow"">MoinMoin Desktop Edition</a>.</p>
"
180421,"<p>My answer is very close to S.Lott's, except I'd be even more particular:</p>

<pre><code>try:
    # do something
except IOError, e:
    # ooops, check the attributes of e to see precisely what happened.
    if e.errno != 23:
        # I don't know how to handle this
        raise
</code></pre>

<p>where ""23"" is the error number you get from EPIPE.  This way you won't attempt to handle a permissions error or anything else you're not equipped for.</p>
"
22168,"<p>From <a href=""http://en.wikipedia.org/wiki/UTF-8"" rel=""nofollow"">Wikipedia on UTF-8</a>: </p>

<blockquote>
UTF-8 (8-bit UCS/Unicode Transformation Format) is a <strong>variable-length character encoding for Unicode. It is able to represent any character in the Unicode standard</strong>, yet the initial encoding of byte codes and character assignments for UTF-8 is backwards compatible with ASCII. For these reasons, it is steadily becoming the preferred encoding for e-mail, web pages[1], and other places where characters are stored or streamed.
</blockquote>

<p>So, it's anywhere between one and four bytes depending on which character you wish to represent within the realm of Unicode.</p>

<p><a href=""http://en.wikipedia.org/wiki/Unicode"" rel=""nofollow"">From Wikipedia on Unicode:</a></p>

<blockquote>
In computing, Unicode is an industry standard allowing computers to consistently represent and manipulate text expressed in <strong>most of the world's writing systems</strong>. 
</blockquote>

<p>So it's able to represent most (but not all) of the world's writing systems. </p>

<p>I hope this helps :)</p>
"
177316,"<p>Start an app as a background process that either has a TCP port bound to localhost, or communicates through a file -- your daemon has the file open, and then you <code>echo ""foo"" &gt; c:\your\file</code>. After, say, 1 second of no activity, you display the message and truncate the file.</p>
"
334661,"<p>Here ya go - works just any other iterable:</p>

<pre><code>d = {'param' : 'test'}

def f(dictionary):
    for key in dictionary:
        print key

f(d)
</code></pre>
"
311643,"<p>Restore from a recent Time Machine backup or somehow from DVD?</p>
"
64572,"<p>In the RPC field, Json-RPC will bring a big performance improvement over xml-rpc: 
<a href=""http://json-rpc.org/wiki/python-json-rpc"" rel=""nofollow"">http://json-rpc.org/wiki/python-json-rpc</a></p>
"
312577,"<p>If you use django you might want to use the quoting function which is automatically adapted to the currently configured DBMS :</p>

<pre><code>from django.db import backend
my_quoted_variable = backend.DatabaseOperations().quote_name(myvar)
</code></pre>
"
201862,"<pre><code>import getopt as bettername
</code></pre>

<p>This should allow you to call getopt as bettername.</p>
"
169899,"<p>p.first_name = ""New first name""
p.put()</p>

<p>or p = Person(first_name = ""Firsty"",
              last_name = ""Lasty"" )
p.put()</p>
"
321702,"<p>I am shooting in the dark: could it be <a href=""http://effbot.org/zone/python-register.htm"" rel=""nofollow"">this</a>?</p>
"
322726,"<p>This would be easier with the high-level ""mechanize"" module.</p>
"
327784,"<p>Not sure about a python specific implementation, but in a more language agnostic fashion, what you would want to do is skip (seek) to the end of the file, and then read each character in backwards order until you reach the line feed character that your file is using, usually a character with value 13.  just read forward from that point to the end of the file, and you will have the last line in the file.</p>
"
327299,"<p>You could put all words in a dictionary.
key would be word, and value is number (index).</p>

<p>Then you use it like this:</p>

<pre><code>Word1=indexDict[word1]
Word2=indexDict[word2]
Word3=indexDict[word3]

topDictionary[Word1][Word2][Word3]
</code></pre>

<p>Insert in indexDict with:</p>

<pre><code>if word not in indexDict:
    indexDict[word]=len(indexDict)
</code></pre>
"
329127,"<p>Performance of <code>cPickle</code> vs. <code>marshal</code> (Python 2.5.2, Windows):</p>

<pre><code>python -mtimeit -s""from cPickle import loads,dumps;d=13**666"" ""loads(dumps(d))""
1000 loops, best of 3: 600 usec per loop

python -mtimeit -s""from marshal import loads,dumps;d=13**666"" ""loads(dumps(d))""
100000 loops, best of 3: 7.79 usec per loop

python -mtimeit -s""from pickle import loads,dumps;d= 13**666"" ""loads(dumps(d))""
1000 loops, best of 3: 644 usec per loop
</code></pre>

<p><code>marshal</code> is much faster.</p>
"
36818,"<p>Follow the Django tutorial for setting up the ""admin"" part of an application. This will allow you to modify your database.</p>

<p><a href=""https://docs.djangoproject.com/en/dev/intro/tutorial02/"" rel=""nofollow"">Django Admin Setup</a></p>

<p>Alternatively, you can just connect directly to the database using the standard tools for whatever database type you are using.</p>
"
347070,"<p>Take a look at the article <a href=""http://blog.bjrn.se/2008/01/truecrypt-explained.html"" rel=""nofollow"">TrueCrypt explained</a> by BjÃ¶rn EdstrÃ¶m. It contains easy to understand explanation of how truecrypt works and a simple Python implementation of some of truecrypt's functionality <strong>including password management</strong>.</p>

<blockquote>
  <p>He's talking about the Python crypt() module, not about TrueCrypt in Python</p>
</blockquote>

<p>Default <code>crypt.crypt()</code> in Python 2 is not very secure and <a href=""http://blog.bjrn.se/2008/01/truecrypt-explained.html"" rel=""nofollow"">the article</a> explains how more secure alternatives might work.</p>
"
8020,"<p>The cause of your problem is <strong>NOT</strong> the Win console not willing to accept Unicode (as it does this since I guess Win2k by default). It is the default system encoding. Try this code and see what it gives you:</p>

<pre><code>import sys
sys.getdefaultencoding()
</code></pre>

<p>if it says ascii, there's your cause ;-)
You have to create a file called sitecustomize.py and put it under python path (I put it under /usr/lib/python2.5/site-packages, but that is differen on Win - it is c:\python\lib\site-packages or something), with the following contents:</p>

<pre><code>import sys
sys.setdefaultencoding('utf-8')
</code></pre>

<p>and perhaps you might want to specify the encoding in your files as well:</p>

<pre><code># -*- coding: UTF-8 -*-
import sys,time
</code></pre>

<p>Edit: more info can be found <a href=""http://www.diveintopython.net/xml_processing/unicode.html"" rel=""nofollow"">in excellent the Dive into Python book</a></p>
"
259334,"<p>You can use web2py on GAE and do:</p>

<pre><code>db.define_table('foo',SQLField('bar'),SQLField('baz'))
rows=db(db.foo.id&gt;0).select()
### rows is a list, rows.response is a list of tuples
for row in rows: print  dict(row)
</code></pre>

<p>Runs on Oracle, Postgresql, Mssql, mysql, etc... too.</p>
"
135889,"<p>If you used ruby, you could write</p>

<pre><code>stringValue = otherString.blank? ? defaultString : otherString;
</code></pre>

<p>the built in <code>blank?</code> method means null or empty.<br />
Come over to the dark side...</p>
"
122085,"<p>I can't really read your LINQ, but I think you're trying to get 5 random numbers up to 100 and then remove duplicates.</p>

<p>Here's a solution for that:</p>

<pre><code>def random(max)
    (rand * max).to_i
end

# Get 5 random numbers between 0 and 100
a = (1..5).inject([]){|acc,i| acc &lt;&lt; random( 100)}
# Remove Duplicates
a = a &amp; a
</code></pre>

<p>But perhaps you're actually looking for 5 distinct random numbers between 0 and 100.  In which case:</p>

<pre><code>def random(max)
    (rand * max).to_i
end

a = []
while( a.size &lt; 5)
    a &lt;&lt; random( 100)
    a = a &amp; a
end
</code></pre>

<p>Now, this one might violate your sense of ""not too many loops,"" but presumably Take and Distinct are just hiding the looping from you.  It would be easy enough to just add methods to Enumerable to hide the while loop.</p>
"
267975,"<p>I'm only currently developing agains 0.4.something, but here's how I'd suggest it:</p>

<pre><code>db.query(Object).filter(Object.first==value).filter(Object.second==False).all()
</code></pre>

<p>I think that's what you are trying to do, right?</p>

<p>(Note: written in a web browser, not real code!)</p>
"
267444,"<p>It's a little dangerous depending on where the string is coming from, but how about:</p>

<pre><code>&gt;&gt;&gt; s = '\u003cfoo\u003e'
&gt;&gt;&gt; eval('u""'+s.replace('""', r'\""')+'""').encode('ascii')
'&lt;foo&gt;'
</code></pre>
"
268348,"<p>""I often find a need to put paths in my code""  -- this isn't very Pythonic to begin with.</p>

<p>Ideally, your code lives in some place like site-packages and that's the end of that.</p>

<p>Often, we have an installed ""application"" that uses a fairly fixed set of directories for working files.  In linux, we get this information from environment variables and configuration files owned by the specific userid that's running the application.</p>

<p>I don't think that you should be putting paths in your code.  I think there's a better way.</p>

<p>[I just wrote our app installation tool, which does create all the config files for a fairly complex app. I used the Mako templates tool to generate all four files from templates.]</p>
"
248608,"<p>At the risk of being modded down, is there <strike>a decent</strike> any use-case for this? </p>

<p>Unless we know exactly what it's for, we can't sensibly call it as ""broken"" as it seems.</p>

<p>Perhaps try this:</p>

<pre><code>firstobject.an_attribute = secondobject.an_attribute
firstobject.another_attribute = secondobject.another_attribute
</code></pre>

<p>That's the sane way of copying things between instances.</p>
"
128624,"<p>Here's my suggestion.  Don't use class methods.  </p>

<p>Seriously.  </p>

<p>What's the reason for using class methods in this case?  Why not have an ordinary object of an ordinary class?</p>

<p><hr /></p>

<p>If you simply want to change the value, a property isn't really very helpful is it?  Just set the attribute value and be done with it.</p>

<p>A property should only be used if there's something to conceal -- something that might change in a future implementation.  </p>

<p>Maybe your example is way stripped down, and there is some hellish calculation you've left off.  But it doesn't look like the property adds significant value.</p>

<p>The Java-influenced ""privacy"" techniques (in Python, attribute names that begin with _) aren't really very helpful.  Private from whom?  The point of private is a little nebulous when you have the source (as you do in Python.)</p>

<p>The Java-influenced EJB-style getters and setters (often done as properties in Python) are there to facilitate Java's primitive introspection as well as to pass muster with the static language compiler.  All those getters and setters aren't as helpful in Python.</p>
"
134651,"<p>The reverse function actually uses the ""name"" of the URL.  This is defined like so:</p>

<pre><code>urlpatterns = patterns('',
    (r'^no_monkeys/$', 'views.noMonkeys', {}, ""no-monkeys""),
    (r'^admin/(.*)', admin.site.root),
)
</code></pre>

<p>Now you would call reverse with the string ""no-monkeys"" to get the correct url.</p>

<p>Ninja Edit:  <a href=""http://docs.djangoproject.com/en/dev/topics/http/urls/#id2"" rel=""nofollow"">Here is a link</a> to the django docs on the subject.</p>
"
160035,"<p>Hmmm, I don't fully understand your question. But if you can't do it when you declare the model maybe you can achieve the same thing with overriding methods of the class of objects where you ""send"" the user object, maybe start with the constructor.</p>
"
310775,"<p>A really complex search forms usually indicates that a simpler model is trying to dig it's way out.</p>

<p>How, exactly, do you expect to get the values for the column name and operation?
Where do you get the values of <code>'name'</code> an <code>'startswith'</code>?</p>

<pre><code> filter_by = '%s__%s' % ('name', 'startswith')
</code></pre>

<ol>
<li><p>A ""search"" form?  You're going to -- what? -- pick the name from a list of names?  Pick the operation from a list of operations?  While open-ended, most people find this confusing and hard-to-use.</p>

<p>How many columns have such filters? 6? 12? 18?  </p>

<ul>
<li>A few?  A complex pick-list doesn't make sense.  A few fields and a few if-statements make sense.</li>
<li>A large number?  Your model doesn't sound right.  It sounds like the ""field"" is actually  a key to a row in another table, not a column.</li>
</ul></li>
<li><p>Specific filter buttons.  Wait... That's the way the Django admin works.  Specific filters are turned into buttons.  And the same analysis as above applies.  A few filters make sense.  A large number of filters usually means a kind of first normal form violation.</p></li>
</ol>

<p>A lot of similar fields often means there should have been more rows and fewer fields.</p>
"
61518,"<p>I've recently started to program in Python, so I've not really had chance to find out best practice yet.
But, I've written a module that goes and finds all the tests and runs them.</p>

<p>So, I have:</p>

<pre>
app/
 appfile.py
test/
 appfileTest.py
</pre>

<p>I'll have to see how it goes as I progress to larger projects.</p>
"
211509,"<p>Oh and Sha256 isn't really an industrial strength cryptographic function (although unfortunately it's used quite commonly on many sites). It's not a real way to protect passwords or other critical data, but more than good enough for generating temporal tokens</p>

<p>Edit: As mentioned Sha256 needs at least some salt. Without salt, Sha256 has a low barrier to being cracked with a dictionary attack (time-wise) and there are plenty of Rainbow tables to use as well. Personally I'd not use anything less than Blowfish for passwords (but that's because I'm paranoid) </p>
"
52111,"<p>I would look in to understanding more details about Python syntax. Often times if a piece of code looks odd, there usually is a better way to write it. For example, in the above example:</p>

<pre><code>bar = foo if baz else None
while bar not biz:
    bar = i_am_going_to_find_you_biz_i_swear_on_my_life()

did_i_not_warn_you_biz()
my_father_is_avenged()
</code></pre>

<p>While it is a small change, it might help the readability. Also, in all honesty, I've never used a while loop, so there is a good change you would end up with a nice concise list comprehension or for loop instead. ;)</p>
"
64756,"<p>The switch statement is just syntactical sugar which is probably why Python doesn't have it. You can use if else statements for this functionality easily.</p>

<p>Like Matthew Schinckel said, you can use if and elif and else.</p>

<p>It is also a simple matter to have ""fall-through"" capabilities like most switch statements. All you have to do is not  use elif.</p>

<pre><code>if x == 1:
    # 1
if x == 2:
    # fall-through
elif x == 3:
    # not fall-through
</code></pre>
"
342608,"<p>Thanks for the quick response.  I am passing the multiprocessing.Queue instances as arguments to each Process as you illustrate.  The failure seems to occur in the threads.  I am creating them by subclassing threading.Thread and passing the queue to the '<strong>init</strong>' method of each thread instance. This seems to be the accepted way to pass in Queues to thread subclasses.   My only thought it that multiprocessing Queues may not be compatible with threads (although they are supposedly thread-safe).</p>
"
77997,"<p>A ""more accurate centroid"" I believe centroid is defined the way you calculated it hence there can be no ""more accurate centroid"".</p>
"
296495,"<p>Just call <code>os.remove(""path/to/file"")</code>. For example, to remove the file <code>.emacs</code>, call</p>

<pre><code>os.remove("".emacs"")
</code></pre>

<p>The path should be a <code>str</code> that's the pathname of the file. It may be relative or absolute.</p>
"
78481,"<p>It just dawned on me that you are probably looking for one of the popen functions.</p>

<p>from: <a href=""http://docs.python.org/lib/module-popen2.html"" rel=""nofollow"">http://docs.python.org/lib/module-popen2.html</a></p>

<p>popen3(cmd[, bufsize[, mode]])
    Executes cmd as a sub-process. Returns the file objects (child_stdout, child_stdin, child_stderr). </p>

<p>namaste,
Mark</p>
"
296046,"<p>It is the same performancewise. There is no JIT compiler in Python yet.</p>
"
80361,"<p>If you don't care about sub strings than a simple</p>

<pre><code>&gt;&gt;&gt; 'a short sized string with spaces '.split()
</code></pre>

<p>Performance:</p>

<pre><code>&gt;&gt;&gt; s = "" ('a short sized string with spaces '*100).split() ""
&gt;&gt;&gt; t = timeit.Timer(stmt=s)
&gt;&gt;&gt; print ""%.2f usec/pass"" % (1000000 * t.timeit(number=100000)/100000)
171.39 usec/pass
</code></pre>

<p>Or string module</p>

<pre><code>&gt;&gt;&gt; from string import split as stringsplit; 
&gt;&gt;&gt; stringsplit('a short sized string with spaces '*100)
</code></pre>

<p>Performance: String module seems to perform better than string methods</p>

<pre><code>&gt;&gt;&gt; s = ""stringsplit('a short sized string with spaces '*100)""
&gt;&gt;&gt; t = timeit.Timer(s, ""from string import split as stringsplit"")
&gt;&gt;&gt; print ""%.2f usec/pass"" % (1000000 * t.timeit(number=100000)/100000)
154.88 usec/pass
</code></pre>

<p>Or you can use RE engine</p>

<pre><code>&gt;&gt;&gt; from re import split as resplit
&gt;&gt;&gt; regex = '\s+'
&gt;&gt;&gt; medstring = 'a short sized string with spaces '*100
&gt;&gt;&gt; resplit(regex, medstring)
</code></pre>

<p>Performance</p>

<pre><code>&gt;&gt;&gt; s = ""resplit(regex, medstring)""
&gt;&gt;&gt; t = timeit.Timer(s, ""from re import split as resplit; regex='\s+'; medstring='a short sized string with spaces '*100"")
&gt;&gt;&gt; print ""%.2f usec/pass"" % (1000000 * t.timeit(number=100000)/100000)
540.21 usec/pass
</code></pre>

<p>For very long strings you should not load the entire string into memory and instead either split the lines or use an iterative loop</p>
"
72702,"<p>The setUp method, as everyone else has said, runs before every test method you write. So, when testB runs, the value of i is 1, not 3.</p>

<p>You can also use a tearDown method which runs after every test method. However if one of your tests crashes, your tearDown method will never run.</p>
"
304288,"<p><em>EDIT: ignore this, the edge cases are a pain. Go with Ben's solution.</em></p>

<p>Ok, on closer inspection I noticed that <code>strptime</code> has <code>%W</code> and <code>%w</code> parameters, so the following works:</p>

<pre><code>def fromisocalendar(y,w,d):
   return datetime.strptime( ""%04dW%02d-%d""%(y,w-1,d), ""%YW%W-%w"")
</code></pre>

<p>A couple of gotchas: The ISO week number starts at <code>1</code>, while <code>%W</code> starts at <code>0</code>.  The ISO week day starts at <code>1</code> (Monday), which is the same as <code>%w</code>, so Sunday would probably have to be <code>0</code>, not <code>7</code>...</p>
"
70025,"<p>Logging in securely is very subjective.  Full 'security' is not easy to achieve (if at all possible...debatable). However, you can come close.  </p>

<p>If POST is not an option, maybe you can use a directory security method such as .htaccess or windows authentication depending on what system you're on.</p>

<p>Both of the above will get you the pop-up window that allows for a username and password to be entered.</p>

<p>To use POST as the method to send the login credentials, you'd just use an HTML form with method=""post"" and retrieve the information from, say, a PHP or ASP page, using the $_POST['varname'] method in PHP or the request.form(""varname"") method in ASP.  From the PHP or ASP page, as an example, you can do a lookup in a database of users, to see if that username/password combination exists, and if so, redirect them to the appropriate page.</p>

<p>As reference, use <a href=""http://www.w3schools.com/ASP/showasp.asp?filename=demo_simpleform"" rel=""nofollow"">http://www.w3schools.com/ASP/showasp.asp?filename=demo_simpleform</a> for the HTML/ASP portion</p>
"
214635,"<p>See the script at <a href=""http://www.mail-archive.com/linux-il@cs.huji.ac.il/msg52876.html"" rel=""nofollow"">this post to Linux-IL where someone asked a similar question</a>. It's written in Perl and uses the CPAN Term::ANSIColor module.</p>
"
305397,"<p>You could pass your parameter in the built-in len() function and check whether this causes an error. As others said, the string type requires special handling.</p>

<p>According to the documentation the len function can accept a sequence (string, list, tuple) or a dictionary.</p>

<p>You could check that an object is a string with the following code:</p>

<pre><code>x.__class__ == """".__class__
</code></pre>
"
68377,"<p>Kind of hacky, but the following should work :)</p>

<pre><code>import os
filePath = ""/foo/bar/baz.py""
serverPath = ""/blah/boo/boom.py""
os.system(""scp ""+filePath+"" user@myserver.com:""+serverPath)
</code></pre>
"
68329,"<p>There is also another very simple answer: according to the <a href=""http://www.python.org/dev/peps/pep-0020/"" rel=""nofollow"">zen of python</a>, ""explicit is better than implicit"".</p>
"
66666,"<p>Hum,</p>

<p>Doesn't shelve use pickle ?</p>

<p>Anyway, I agree with the previous anwsers. Since a module is processed only once, I doubt compiling regexps will be your app bottle neck. And Python re module is wicked fast since it's coded in C :-)</p>

<p>But the good news is that Python got a nice community, so I am sure you can find somebody currently hacking just what you need.</p>

<p>I googled 5 sec and found : <a href=""http://home.gna.org/oomadness/en/cerealizer/index.html"" rel=""nofollow"">http://home.gna.org/oomadness/en/cerealizer/index.html</a>.</p>

<p>Don't know if it will do it but if not, good luck in you research :-)</p>
"
65579,"<p>It's possible to place each regex (or group of regexs) into a separate file and then dynamically import the file that you need using the imp module.  I doubt that it scales very well but it could be what you need.</p>
"
153640,"<p>This library provides a handy calendar tool: <a href=""http://www.egenix.com/products/python/mxBase/mxDateTime/"" rel=""nofollow"">mxDateTime</a>, that should be enough :)</p>
"
152305,"<p>Looks like this did the trick:</p>

<p>split=re.compile('(\\W+&amp;\\W+;)*')</p>

<p>Thanks for the suggestions. Most of them worked fine on Reggy, but I don't quite understand why they failed with re.compile.</p>
"
77985,"<p>You got it.  What you are calculating is the centroid, or the mean vector.</p>
"
266018,"<p>Are less than/greater than allowed inside the values?  Because if not you have a very simple solution:</p>

<p>Just replace ever occurance of ""&gt; "" with just ""&gt;"", split on ""&gt;&lt;"", and strip out all less than/greater than from each item.  It's probably longer than the regex code, but it will be clearer what's going on.</p>
"
136786,"<p>If you're platform is Windows, I wouldn't actually recommend Python.  Instead, look into <a href=""http://www.autohotkey.com/"" rel=""nofollow"">Autohotkey</a>.  Trust me, I love Python, but in this circumstance a macro program is the ideal tool for the job.  Autohotkey's scripting is only decent (in my opinion), but the ease of simulating input will save you countless hours.  Autohotkey scripts can be ""compiled"" as well so you don't need the interpreter to run the script.</p>

<p>Also, if this is for something on the Web, I recommend <a href=""https://addons.mozilla.org/en-US/firefox/addon/3863"" rel=""nofollow"">iMacros</a>.  It's a firefox plugin and therefore has a much better integration with websites.  For example, you can say ""write 1000 'a's in this form"" instead of ""simulate a mouseclick at (319,400) and then press 'a' 1000 times"".</p>

<p>For Linux, I unfortunately have not been able to find a good way to easily create keyboard/mouse macros.</p>
"
136475,"<p>On second thought, this is probably just as fast as anything here.</p>

<pre><code>def tail( f, window=20 ):
    lines= ['']*window
    count= 0
    for l in f:
        lines[count%window]= l
        count += 1
    print lines[count%window:], lines[:count%window]
</code></pre>

<p>It's a lot simpler.  And it does seem to rip along at a good pace.  </p>
"
118803,"<p>Do you have to use xlrd?  I just downloaded 'UPDATED - Dow Jones Industrial Average Movers - 2008' from that website and had no trouble reading it with <a href=""http://sourceforge.net/projects/pyexcelerator"" rel=""nofollow"">pyExcelerator</a>.</p>

<pre><code>import pyExcelerator
book = pyExcelerator.parse_xls('DJIAMovers.xls')
</code></pre>
"
263876,"<p>You could do something like this to generate fibonnacci numbers for 1 second then stop.</p>

<pre><code>fibonnacci = [1,1]
stoptime = time.time() + 1 # set stop time to 1 second in the future
while time.time() &lt; stoptime:
  fibonnacci.append(fibonnacci[-1]+fibonnacci[-2])

print ""Generated %s numbers, the last one was %s."" % (len(fibonnacci),fibonnacci[-1])
</code></pre>

<p>I'm not sure how efficient it is to call time.time() in every loop - depending on the what you are doing inside the loop, it might end up taking a lot of the performance away.</p>
"
287351,"<p>I haven't used Tix, but perhaps:</p>

<pre><code>import Tix
help(Tix)
</code></pre>

<p>?</p>
"
93871,"<p>I've always had good results with <a href=""http://codespeak.net/lxml/"" rel=""nofollow"">lxml</a>. It's a pain to install, as it's mostly a wrapper around <a href=""http://xmlsoft.org/"" rel=""nofollow"">libxml2</a>, but <code>lxml.etree</code>  tree objects have a <code>.write()</code> method that takes a file-like object to stream to.</p>

<pre><code>from lxml.etree import XML

tree = XML('&lt;root&gt;&lt;a&gt;&lt;b/&gt;&lt;/a&gt;&lt;/root&gt;')
tree.write(your_file_object)
</code></pre>
"
89915,"<p>use a regex and see if it matches!</p>

<pre><code>([a-z][A-Z][0-9]\_\-)*
</code></pre>
"
135354,"<p>You can take advantage of the fact that logical expressions return their value, and not just true or false status.  For example, you can always use:</p>

<pre><code>result = question and firstanswer or secondanswer
</code></pre>

<p>With the caveat that it doesn't work like the ternary operator if firstanswer is false.  This is because question is evaluated first, assuming it's true firstanswer is returned unless firstanswer is false, so this usage fails to act like the ternary operator.  If you know the values, however, there is usually no problem.  An example would be:</p>

<pre><code>result = choice == 7 and ""Seven"" or ""Another Choice""
</code></pre>
"
135209,"<p>You can always compile the C code, and load in the libraries using ctypes in python.</p>
"
112608,"<p>Yes, you can use cairo, but cairo is not a canvas. You have to code behavior like mouseover/onclick yourself.</p>
"
345764,"<p>No, it is not.</p>

<p>I had a somehow <a href=""http://stackoverflow.com/questions/331767"">similar question</a> the other day. </p>

<p>if the construct </p>

<pre><code>val if cond else alt
</code></pre>

<p>Was not very welcome ( at least by the SO community ) and the preferred one was:</p>

<pre><code>if cond:
    val
else:
    alt
</code></pre>

<p>You can get your own conclusion. :) </p>
"
345774,"<p>Yikes.  Not readable at all.   For me pythonic means easy to read.</p>

<pre><code>return isUp and ""Up"" or ""Down""
</code></pre>

<p>Sounds something you would do in perl.</p>
"
102480,"<p>Assuming you want a default sort order, you can used sorted(list) or list.sort().  If you want your own sort logic, Python lists support the ability to sort based on a function you pass in.  For example, the following would be a way to sort numbers from least to greatest (the default behavior) using a function.  </p>

<pre><code>def compareTwo(a, b):
  if a &gt; b:
    return 1
  if a == b:
    return 0
  if a &lt; b:
    return -1

List.Sort(compareTwo)
print a
</code></pre>

<p>This approach is conceptually a bit cleaner than manually creating a new list and appending the new values and allows you to control the sort logic.</p>
"
102158,"<p>I'm not a python expert or a app engine expert. But did you try following the sample appl at <a href=""http://code.google.com/appengine/docs/gettingstarted/usingusers.html"" rel=""nofollow"">http://code.google.com/appengine/docs/gettingstarted/usingusers.html</a>. I created one at <a href=""http://quizengine.appspot.com"" rel=""nofollow"">http://quizengine.appspot.com</a>, it seemed to work fine with Google authentication and everything.
Just a suggestion, but look in to the getting started guide. Take it easy if the suggestion sounds naive. :)
Thanks.</p>
"
229386,"<p>You could use</p>

<pre><code>print url[url.rstrip(""/"").rfind(""/"") +1 : ]
</code></pre>
"
229650,"<pre><code>filter(None, url.split('/'))[-1]
</code></pre>

<p>(But urlparse is probably more readable, even if more verbose.)</p>
"
277490,"<p>I had only one python experience, my trash-cli project.</p>

<p>I know that probably some or all problems depends of my inexperience with python.</p>

<p>I found frustrating these things: </p>

<ol>
<li>the difficult of finding a good IDE for free</li>
<li>the limited support to automatic refactoring</li>
</ol>

<p>Moreover:</p>

<ol>
<li>the need of introduce two level of grouping packages and modules confuses me.</li>
<li>it seems to me that there is not a widely adopted code naming convention</li>
<li>it seems to me that there are some standard library APIs docs that are incomplete</li>
<li>the fact that some standard libraries are not fully object oriented annoys me</li>
</ol>

<p>Although some python coders tell me that they does not have these problems, or they say these are not problems.</p>
"
103873,"<pre><code>import itertools
itertools.flatten( li )
</code></pre>
"
141700,"<p>OK, great. I just tossed together this example with a tuple, not a filename, but that's easy. Thanks all.</p>

<pre><code>class MyData:
    def __init__(self, data):
        self.myList = []
        if isinstance(data, tuple):
            for i in data:
                self.myList.append(i)
        else:
            self.myList = data

    def GetData(self):
        print self.myList
</code></pre>

<p>a = [1,2]</p>

<p>b = (2,3)</p>

<p>c = MyData(a)</p>

<p>d = MyData(b)</p>

<p>c.GetData()</p>

<p>d.GetData()</p>

<p>[1, 2]</p>

<p>[2, 3]</p>
"
108603,"<p>Retrieve the times in milliseconds and then do the subtraction.</p>
"
289560,"<p>I have no experience with py2exe but a quick <a href=""http://www.google.com/search?q=py2exe+embed+icon"" rel=""nofollow"">google search</a> found <a href=""http://www.py2exe.org/index.cgi/CustomIcons"" rel=""nofollow"">this</a>, if <em>embedding</em> icons in exe files was what you asked for.  </p>

<p>If you want to <em>create</em> .ico files, I'd really suggest you search for a icon designer or finished icons. Sure you <em>can</em> create a Win 3.x style icon fairly easy by creating a 16x16, 32x32, or 64x64 px image in paint, and rename it to .ico. But to create modern multi resolution icons for windows is a lot more complicated.</p>

<p>(I was about to ask what OS you was compiling for, when I realized ""exe"" sounds very windows, and sure enough...)</p>
"
86541,"<p>as python was not meant to deal with OS-specific issues (it's supposed to be interpreted and cross platform), I would execute an external command to do so:</p>

<p>in unix the command is <code>ifconfig</code></p>

<p>if you execute it as a pipe you get the desired result:</p>

<pre><code>import os;
myPipe=os.popen2(""/sbin/ifconfig"",""a"");
print(myPipe[1].read());
</code></pre>
"
290414,"<p>I think you can use forloop.parentloop.counter inside of the inner loop to achieve the numbering you're after.</p>
"
286914,"<p>I figured out by using <strong>os.getcwd()</strong>. I also learned about using <strong>os.path.join</strong> to automatically determine the correct path format based on the OS. Here's the code:</p>

<pre><code>def openNewRecord(self, event): # wxGlade: CharSheet.&lt;event_handler&gt;
    """"""Create a new, blank record sheet.""""""
    path = os.getcwd()
    subprocess.Popen(os.path.join(path, ""TW2K_char_rec_sheet.py""), shell=True).stdout
</code></pre>

<p>It appears to be working. Thanks for the ideas.</p>
"
291005,"<p>You could just use an ordered list instead of unordered:</p>

<pre><code>{% regroup articles by section as articles_by_section %}

&lt;ol&gt;
{% for article in articles_by_section %}        
    &lt;h4&gt;{{ article.grouper }}&lt;/h4&gt;
    {% for item in article.list %}  
        &lt;li&gt;{{ item.headline }}&lt;/li&gt;
    {% endfor %}
{% endfor %}
&lt;/ol&gt;
</code></pre>
"
192352,"<p>It is fairly well explained <a href=""http://www.python.org/doc/2.5.2/lib/multiple-destinations.html"" rel=""nofollow"">here</a>.  </p>

<p>You are pretty close though.  You have the option of just using the default with</p>

<pre><code>logging.warning(""something raised an exception: "" + excep)
</code></pre>

<p>Or you can follow some of the examples on the linked page and get more sophisticated with multiple destinations and filter levels.</p>
"
196783,"<p>I suggest writing a function that will take two arguments: the text to be escaped and the type of quotes the string is in. Then, for example, if the type of quotes are single quotes, the function will escape the single quotes in the string and any other characters that need to be escaped (backslash?).</p>

<pre><code>function escape_string($text, $type) {
    // Escape backslashes for all types of strings?
    $text = str_replace('\\', '\\\\', $text);

    switch($type) {
        case 'single':
            $text = str_replace(""'"", ""\\'"", $text);
            break;
        case 'double':
            $text = str_replace('""', '\\""', $text);
            break;
        // etc...
    }

    return $text;
}
</code></pre>

<p>I'm assuming that for single-quoted strings you want to escape the single quotes, and with double-quoted strings you want to escape the double quotes...</p>
"
22206,"<blockquote>
  <p>so what is a ""Unicode string"" in
  Python?</p>
</blockquote>

<p>Python 'knows' that your string is Unicode. Hence if you do regex on it, it will know which is character and which is not etc, which is really helpful. If you did a strlen it will also give the correct result. As an example if you did string count on Hello, you will get 5 (even if it's Unicode). But if you did a string count of a foreign word and that string was not a Unicode string than you will have much larger result. Pythong uses the information form the Unicode Character Database to identify each character in the Unicode String. Hope that helps. </p>
"
735,"<p>I think:</p>

<pre><code>#!/bin/python<br>bar in dict(Foo)<br></code></pre>

<p>Is what you are thinking of.  When trying to see if a certain key exists within a dictionary in python (python's version of a hash table) there are two ways to check.  First is the <strong><code>has_key()</code></strong> method attached to the dictionary and second is the example given above.  It will return a boolean value.</p>

<p>That should answer your question.</p>

<p>And now a little off topic to tie this in to the <em>list comprehension</em> answer previously given (for a bit more clarity).  <em>List Comprehensions</em> construct a list from a basic <em>for loop</em> with modifiers.  As an example (to clarify slightly), a way to use the <code>in dict</code> language construct in a _list comprehension_:</p>

<p>Say you have a two dimensional dictionary <strong><code>foo</code></strong> and you only want the second dimension dictionaries which contain the key <strong><code>bar</code></strong>.  A relatively straightforward way to do so would be to use a <em>list comprehension</em> with a conditional as follows:</p>

<pre><code>#!/bin/python<br>baz = dict([(key, value) for key, value in foo if bar in value])<br></code></pre>

<p>Note the <strong><code>if bar in value</code></strong> at the end of the statement<strong>, this is a modifying clause which tells the <em>list comprehension</em> to only keep those key-value pairs which meet the conditional.</strong>  In this case <strong><code>baz</code></strong> is a new dictionary which contains only the dictionaries from foo which contain bar (Hopefully I didn't miss anything in that code example... you may have to take a look at the list comprehension documentation found in <a href=""http://docs.python.org/tut/node7.html#SECTION007140000000000000000"" rel=""nofollow"">docs.python.org tutorials</a> and at <a href=""http://www.secnetix.de/olli/Python/list_comprehensions.hawk"" rel=""nofollow"">secnetix.de</a>, both sites are good references if you have questions in the future.).</p>"
186465,"<p>While Python really is my favorite language, I think you need not create you own server for this. When you look at the <a href=""http://www.openbsd.org/cgi-bin/man.cgi?query=sshd&amp;sektion=8"" rel=""nofollow"">OpenSSH Manualpage for sshd</a> you'll find the ""command"" options for the authorized keys file that lets you define a specific command to run on login.</p>

<p>Using keys, you can use one system account to allow many user to log in, just put their public keys in the account's authorized keys file.</p>

<p>We are using this to create SSH tunnels for SVN and it works just great.</p>
"
120969,"<p>The universal problem with tabs is that they can be represented differently in different environment.<br />
In a given editor, a tab might be 8 spaces or it might be 2.<br />
In some editors, you can control this, while in others you can't.</p>

<p>Another issue with tabs is how they are represented in printed output.  I believe most printers interpret a tab as 8 spaces.</p>

<p>With spaces, there is no doubt.  Everything will line up as the author intended.</p>
"
250330,"<p>I don't think there's any one module that you can easily download to implement scp, however you might find this helpful:  <a href=""http://www.ibm.com/developerworks/linux/library/l-twist4.html"" rel=""nofollow"">http://www.ibm.com/developerworks/linux/library/l-twist4.html</a></p>
"
349235,"<p>It feels brittle because it is.  (This is a reprint of an answer in a different context.  <a href=""http://stackoverflow.com/questions/243082/c-casting-programmatically-can-it-be-done"">See C++ casting programmatically : can it be done ?</a>)</p>

<p>Read up on polymorphism. Almost every ""dynamic cast"" situation is an example of polymorphism struggling to be implemented.</p>

<p>Whatever decision you're making in the dynamic cast has already been made. Just delegate the real work to the subclasses.</p>

<p>You left out the most important part of your example. The useful, polymorphic work.</p>

<p>When you said ""I want to determine if the object is of type Child_1 or Child_2..."" you left out the ""so I can make the object do <code>aMethod()</code> in a way that's unique to each subclass"".  That method is the useful work, and it should simply be a method of both subclasses.</p>

<pre><code>class Base(models.model):
    def aMethod(self):
        # base class implementation.

class Child_1(Base):
    def aMethod(self):
        # Child_1 override of base class behavior.

class Child_2(Base):
    def aMethod(self):
        supert( Child_2, self ).aMethod() # Invoke the base class version
        # Child_2 extension to base class behavior.
</code></pre>

<p>Same method, multiple implementations.  Never a need to ""run-time type identification"" or determining the concrete class.</p>
"
34024,"<p>I've used it in several applications and have never had nor heard of threading being anything other than 100% reliable, as long as you know its limits.  You can't spawn 1000 threads at the same time and expect your program to run properly on Windows, however you can easily write a worker pool and just feed it 1000 operations, and keep everything nice and under control.</p>
"
35900,"<p>If you do use the system command, I would try and whitelist what goes into the os.system() call.. For example..</p>

<pre><code>clean_user_input re.sub(""[^a-zA-Z]"", """", user_input)
os.system(""ls %s"" % (clean_user_input))
</code></pre>

<p>The subprocess module is a better option, and I would recommend trying to avoid using anything like os.system/subprocess wherever possible.</p>
"
175683,"<p>Money. Allocate time slots based on who pays the most. In case of a draw don't let any of them have the slot.</p>
"
228877,"<p>As the Twisted libs seem to be out of date, you have two choices:
Implement your own XMPP-handler or look for another library.</p>

<p>I would suggest working with the raw XML; XMPP is not that complicated and you are bound to learn something.</p>
"
222789,"<p>I achieved the same thing using this code, but your suggestion is great. Thanks!</p>

<pre><code>templist = [ (line[1], line) for line in MY_TUPLE ] 
templist.sort()
SORTED_MY_TUPLE = [ line[1] for line in templist ]
</code></pre>
"
182234,"<p>I don't know any Windows specific function. You could try getting the MD5 hash of the file every second/minute/hour (depends on how fast you need it) and compare it to the last hash. When it differs you know the file has been changed and you read out the newest lines.</p>
"
234855,"<p>Works for quotes only.     </p>

<pre><code>rrr = []
qqq = s.split('\""')
[ rrr.extend( qqq[x].split(), [ qqq[x] ] )[ x%2]) for x in range( len( qqq ) )]
print rrr
</code></pre>
"
97581,"<p>Second vote for ElementTree (cElementTree is a C implementation that is a little faster, like cPickle vs pickle).  There's some short example code here that you can look at to give you an idea of how it works: <a href=""http://effbot.org/zone/element-index.htm"" rel=""nofollow"">http://effbot.org/zone/element-index.htm</a>
(this is Fredrik Lundh, who wrote the module in the first place.  It's so good it got drafted into the standard library with 2.5 :-) )</p>
"
118161,"<p>If it doesn't need to be pretty, this might get you on your way:</p>

<pre><code>def f(s, splitifeven):
    if splitifeven &amp; 1:
        return [s]
    return [x.strip() for x in s.split("","") if x.strip() != '']

ss = 'foo, bar, ""one, two"", three four'

print sum([f(s, sie) for sie, s in enumerate(ss.split('""'))], [])
</code></pre>
"
119713,"<p>If you have the complete standard library and the real <code>re</code> module (google for IronPython community edition) it might work.  But IronPython is an incredible bad python implementation, I wouldn't count on that.</p>

<p>Besides, give <code>html5lib</code> a try.  That parser parses with the same rules firefox parses documents.</p>
"
120249,"<p>People will use different editors on the same code. These editors will represent a tab on the screen differently. If you're working on an editor that represents a tab as 4 spaces, if you indent the first line by <code>""\t    ""</code> and the second by <code>""\t\t""</code>, they'll look like they're in the same indent level: 8 spaces. </p>

<p>The python interpreter doesn't know your editor, and he has to interpret the tab as some amount of indentation. In fact, it interprets the tab as 8 spaces, so he'll see different indent levels than what you intended: 12 spaces for the first line, 16 spaces for the second. You're toasted. </p>
"
53170,"<p>You can use <a href=""http://man.he.net/?section=all&amp;topic=df"" rel=""nofollow"">df</a> as a cross-platform way. It is a part of <a href=""http://www.gnu.org/software/coreutils/"" rel=""nofollow"">GNU core utilities</a>. These are the core utilities which are expected to exist on every operating system. However, they are not installed on Windows by default (Here, <a href=""http://getgnuwin32.sourceforge.net/"" rel=""nofollow"">GetGnuWin32</a> comes in handy).</p>

<p><em>df</em> is a command-line utility, therefore a wrapper required for scripting purposes.
For example: </p>

<pre><code>from subprocess import PIPE, Popen

def free_volume(filename):
    """"""Find amount of disk space available to the current user (in bytes) 
       on the file system containing filename.""""""
    stats = Popen([""df"", ""-Pk"", filename], stdout=PIPE).communicate()[0]
    return int(stats.splitlines()[1].split()[3]) * 1024
</code></pre>
"
311345,"<p>Read the following: <a href=""http://docs.djangoproject.com/en/dev/ref/contrib/admin/#ref-contrib-admin"" rel=""nofollow"">The Django admin site</a>.  Then revise your question with specific details.</p>
"
165901,"<p>Some people use getters and setters. Depending on which coding style you use you can name them getSpam and seteggs. But you can also make you attributes readonly or assign only. That's  a bit awkward to do. One way is overriding the </p>

<pre><code>&gt; __getattr__
</code></pre>

<p>and </p>

<pre><code>&gt; __setattr__
</code></pre>

<p>methods.</p>

<h2>Edit:</h2>

<p>While my answer is still true, it's not right, as I came to realize. There are better ways to make accessors in python and are not very awkward.</p>
"
210112,"<p>You other bet it to work around dropped connections yourself with code.</p>

<p>One way to do it would be the following:</p>

<pre><code>import MySQLdb

class DB:
    conn = None

    def connect(self):
        self.conn = MySQLdb.connect()

    def cursor(self):
        try:
            return self.conn.cursor()
        except (AttributeError, MySQLdb.OperationalError):
            self.connect()
            return self.conn.cursor()

db = DB()
cur = db.cursor()
# wait a long time for the Mysql connection to timeout
cur = db.cursor()
# still works
</code></pre>
"
41730,"<p>How about this:</p>

<pre><code>class TypedTuple:
    def __init__(self, fieldlist, items):
       self.fieldlist = fieldlist
       self.items = items
    def __getattr__(self, field):
       return self.items[self.fieldlist.index(field)]
</code></pre>

<p>You could then do:</p>

<pre><code>j = TypedTuple([""jobid"", ""label"", ""username""], job)
print j.jobid
</code></pre>

<p>It should be easy to swap <code>self.fieldlist.index(field)</code> with a dictionary lookup later on... just edit your <code>__init__</code> method! Something like Staale does.</p>
"
41550,"<p>I had a similar issue, however I had first implemented the solution using JavaScript, and just afterwards considered how I would have done the same thing in django templates.</p>

<p>I used the serializer utility to turn a list off models into json, and used the json data as a basis for my hierarchy.</p>
"
51029,"<p>Firstly, note that a datetime.time is a time of day, independent of a given day, and so the different between any two datetime.time values is going to be less than 24 hours.</p>

<p>One approach is to convert both datetime.time values into comparable values (such as milliseconds), and find the difference.</p>

<pre><code>t1, t2 = datetime.time(...), datetime.time(...)

t1_ms = (t1.hour*60*60 + t1.minute*60 + t1.second)*1000 + t1.microsecond
t2_ms = (t2.hour*60*60 + t2.minute*60 + t2.second)*1000 + t2.microsecond

delta_ms = max([t1_ms, t2_ms]) - min([t1_ms, t2_ms])
</code></pre>

<p>It's a little lame, but it works.</p>
"
322922,"<pre><code>def f(x):    
  return {'a': 1,'b': 2,}.get(x) or ""Default""
</code></pre>
"
80015,"<p>Try this:</p>

<pre><code>  def adamsplit(s):
    result = []
    inquotes = False
    for substring in s.split('""'):
      if not inquotes:
        result.extend(substring.split())
      else:
        result.append(substring)
      inquotes = not inquotes
    return result
</code></pre>

<p>Some test strings:</p>

<pre><code>'This is ""a test""' -&gt; ['This', 'is', 'a test']
'""This is \'a test\'""' -&gt; [""This is 'a test'""]
</code></pre>
"
79667,"<p>Unit tests are really useful when you refactor your code (ie. completely rewrite or move a module). As long as you have unit tests before you do the big changes, you'll have confidence that you havent forgotten to move or include something when you finish.</p>
"
80420,"<p>As GAE builds on how data is managed in Django there is a lot of info on how to address similar questions in the Django documentation (for example see <a href=""http://www.djangobook.com/en/1.0/chapter05/"" rel=""nofollow"">here</a>, scroll down to 'Your first model').</p>

<p>In short you design you db model as a regular object model and let GAE sort out all of the object-relational mappings. </p>
"
214412,"<p>As much as I love python, I don't think it a good choice to replace basic windows batch scripts. </p>

<p>I can't see see someone having to import modules like sys, os or getopt to do basic things you can do with shell like call a program, check environment variable or an argument.</p>

<p>Also, in my experience, goto is much easier to understand to most sysadmins than a function call.</p>
"
293189,"<p>I didn't find a good way to do it so I took a simpler but ugly way from <a href=""http://www.djangosnippets.org/snippets/600/"" rel=""nofollow"">http://www.djangosnippets.org/snippets/600/</a></p>

<pre><code>try:
    import socket
    hostname = socket.gethostname().replace('.','_')
    exec ""from host_settings.%s import *"" % hostname
except ImportError, e:
    raise e
</code></pre>
"
266848,"<p>This is from the ruby spec:</p>

<pre><code>it ""returns true if other has the same length and each pair of corresponding elements are eql"" do
    a = [1, 2, 3, 4]
    b = [1, 2, 3, 4]
    a.should eql(b)
    [].should eql([])
end
</code></pre>

<p>So you should it should work for the example you mentioned.</p>

<p>If you're not using integers, but custom objects I <em>think</em> you need to override eql?.</p>

<p>The spec for this method is here:</p>

<p><a href=""http://github.com/rubyspec/rubyspec/tree/master/1.8/core/array/eql_spec.rb"" rel=""nofollow"">http://github.com/rubyspec/rubyspec/tree/master/1.8/core/array/eql_spec.rb</a></p>
"
112716,"<p>I recently used py2exe to create an executable for post-review for sending reviews to ReviewBoard.</p>

<p>This was the setup.py I used</p>

<pre><code>from distutils.core import setup
import py2exe

setup(console=['post-review'])
</code></pre>

<p>It created a directory containing the exe file and the libraries needed. I don't think it is possible to use py2exe to get just a single .exe file. If you need that you will need to first use py2exe and then use some form of installer to make the final executable.</p>

<p>One thing to take care of is that any egg files you use in your application need to be unzipped, otherwise py2exe can't include them. This is covered in the py2exe docs.</p>
"
114137,"<p>The easiest way would be to use one of the sites on <a href=""http://djangofriendly.com/hosts/"" rel=""nofollow"">http://djangofriendly.com/hosts/</a> that will provide the hosting and set up for you, but even if you're wanting to roll your own it will allow you to see what set up other sites are using.</p>
"
117012,"<p>Using a ORM for an iPhone app might be a bad idea because of performance issues, you want your code to be as fast as possible. So you can't avoid boilerplate code. If you are considering a ORM, besides SQLAlchemy I'd recommend Storm.</p>
"
266724,"<p>You might have to check the bytes of the image <a href=""http://www.obrador.com/essentialjpeg/headerinfo.htm"" rel=""nofollow"">http://www.obrador.com/essentialjpeg/headerinfo.htm</a> describes how the jpeg header is set up</p>
"
94543,"<p>The best explanation I ever saw of a closure was to explain the mechanism.  It went something like this:</p>

<p>Imagine your program stack as a degenerate tree where each node has only one child and the single leaf node is the context of your currently executing procedure.</p>

<p>Now relax the constraint that each node can have only one child.</p>

<p>If you do this, you can have a construct ('yield') that can return from a procedure without discarding the local context (i.e. it doesn't pop it off the stack when you return).  The next time the procedure is invoked, the invocation picks up the old stack (tree) frame and continues executing where it left off.</p>
"
192304,"<p>Use <a href=""http://docs.python.org/library/logging.html#logging.Logger.exception"" rel=""nofollow""><code>Logger.exception()</code></a>.</p>

<pre><code>try:
   #Something...
except BaseException, excep:
   logger = logging.getLogger(""component"")
   logger.exception(""something raised an exception"")
</code></pre>
"
336906,"<p>You <em>do</em> have the source, and it <em>is</em> Python, so... you can read the admin application source to see what options it has.</p>

<p>Look at 
<a href=""http://docs.djangoproject.com/en/dev/ref/contrib/admin/#overriding-admin-templates"" rel=""nofollow"">http://docs.djangoproject.com/en/dev/ref/contrib/admin/#overriding-admin-templates</a>.<br />
It appears that you can override templates easily.  They even provide step-by-step instructions for adding your own customized admin templates.</p>
"
263451,"<p>Environment.TickCount seems to work well if you need something quick.</p>

<p>int start = Environment.TickCount</p>

<p>...DoSomething()</p>

<p>int elapsedtime = Environment.TickCount - start</p>

<p>Jon</p>
"
129176,"<p>In your specific case, you can do this:</p>

<pre><code>try:
    foo(a, b)
    bar(c, d)
except Exception, e:
    baz(e)
</code></pre>

<p>Or, you can catch the exception one step above:</p>

<pre><code>try:
    foo_bar() # This function can throw at several places
except Exception, e:
    baz(e)
</code></pre>
"
146784,"<p>Why not use XML and XSLT instead of creating your own template language? What you want to do is pretty easy in XSLT.</p>
"
154468,"<p>If you run a python file directly (#! /usr/bin/python at the top of the file) it should interpret it directly instead of byte-compiling it.</p>
"
82049,"<p><strong>Please remember that TDD is not a panaceum.</strong> It's hard, it's supposed to be hard, and it's especially hard to write mocking tests ""in advance"".</p>

<p>So I would say - do what works for you. Even it's not ""certified TDD"". I do basically the same thing.</p>

<p>You may want to provide your own API for GUI that would sit between controller code and GUI library code. That could be easier to mock, or you can even add some testing hooks to it.</p>

<p>Last but not least, your code doesn't look too unreadable to me. Code using mocks is generally harder to understand. Fortunately in Python mocking is much easier and cleaner than i n other languages.</p>
"
199271,"<p>I did it like this:</p>

<pre><code>def MyStruct(item1=0, item2=0, item3=0):
    """"""Return a new Position tuple.""""""
    class MyStruct(tuple):
        @property
        def item1(self):
            return self[0]
        @property
        def item2(self):
            return self[1]
        @property
        def item3(self):
            return self[2]
    try:
        # case where first argument a 3-tuple                               
        return MyStruct(item1)
    except:
        return MyStruct((item1, item2, item3))
</code></pre>

<p>I did it also a bit more complicate with list instead of tuple, but I had override the setter as well as the getter.</p>

<p>Anyways this allows:</p>

<pre><code>    a = MyStruct(1,2,3)
    print a[0]==a.item1
</code></pre>
"
284363,"<p>""Is there a standard way to deal with this?""  Yes.  Use a standard (i.e., POSIX-compliant) OS.</p>

<p>Since Windows is non-standard -- well -- there's no applicable standard.  Wouldn't it be great if there was?  I feel your pain.</p>

<p>Anything you try to do that's cross-platform like that will have Win32 oddities.</p>

<p>Your solution is -- for the present state of affairs -- excellent.  At some point in the future, Microsoft may elect to write a POSIX-compliant OS.  Until then, you're coping well with the situation.</p>
"
168430,"<p>Maybe you should use shell commands. In Unix/Linux, find piped with sort will probably be able to do what you want. </p>
"
60811,"<p>Theres a couple of ways through SQL, depending on which data base is being used.</p>

<p>(I think SQLAlchemy can use all these anyways)</p>

<p>mysql:</p>

<pre><code>SELECT colum FROM table
ORDER BY RAND()
LIMIT 1
</code></pre>

<p>PostgreSQL:</p>

<pre><code>SELECT column FROM table
ORDER BY RANDOM()
LIMIT 1
</code></pre>

<p>MSSQL:</p>

<pre><code>SELECT TOP 1 column FROM table
ORDER BY NEWID()
</code></pre>

<p>IBM DB2:</p>

<pre><code>SELECT column, RAND() as IDX
FROM table
ORDER BY IDX FETCH FIRST 1 ROWS ONLY
</code></pre>

<p>Oracle:</p>

<pre><code>SELECT column FROM
(SELECT column FROM table
ORDER BY dbms_random.value)
WHERE rownum = 1
</code></pre>

<p>However I don't know of any standard way</p>
"
73811,"<p>The easiest answer is the smtplib, you can find docs on it <a href=""http://docs.python.org/lib/SMTP-example.html"" rel=""nofollow"">here</a>. </p>

<p>All you need to do is configure your local sendmail to accept connection from localhost, which it probably already does by default.  Sure, you're still using SMTP for the transfer, but it's the local sendmail, which is basically the same as using the commandline tool. </p>
"
56832,"<p>What about:</p>

<pre><code>round(n,1)+epsilon
</code></pre>
"
93850,"<p><strong>xml.etree.cElementTree</strong>, included in the default distribution of CPython since 2.5. Lightning fast for both reading and writing XML.</p>
"
13579,"<p>Python has a built-in escape() function analogous to PHP's addslashes, but no unescape() function (stripslashes), which in my mind is kind of ridiculous.</p>

<p>Regular expressions to the rescue (code not tested):</p>

<pre><code>p = re.compile( '\\(\\\S)')
p.sub('\1',escapedstring)
</code></pre>

<p>In theory that takes anything of the form \\(not whitespace) and returns \(same char)</p>

<p>edit: Upon further inspection, Python regular expressions are broken as all hell;</p>

<pre><code>&gt;&gt;&gt; escapedstring
'This is a \\n\\n\\n test'
&gt;&gt;&gt; p = re.compile( r'\\(\S)' )
&gt;&gt;&gt; p.sub(r""\1"",escapedstring)
'This is a nnn test'
&gt;&gt;&gt; p.sub(r""\\1"",escapedstring)
'This is a \\1\\1\\1 test'
&gt;&gt;&gt; p.sub(r""\\\1"",escapedstring)
'This is a \\n\\n\\n test'
&gt;&gt;&gt; p.sub(r""\(\1)"",escapedstring)
'This is a \\(n)\\(n)\\(n) test'
</code></pre>

<p>In conclusion, what the hell, Python.</p>
"
189096,"<pre><code>for d1 in alist
   for d2 in d1
      if d2 = ""whatever""
          do_my_thing()
</code></pre>
"
328066,"<p>I am not sure about Python but most languages have push/append function for arrays.</p>
"
112708,"<p>No, it's doesn't give you a single executable in the sense that you only have one file afterwards - but you have a directory which contains everything you need for running your program, including an exe file.</p>

<p>I just wrote <a href=""http://hg.diotavelli.net/sta/master/file/542689f50e63/setup.py"" rel=""nofollow"">this setup.py</a> today. You only need to invoke <code>python setup.py py2exe</code>.</p>
"
159236,"<p>For Linux you can retrieve the MAC address using a SIOCGIFHWADDR ioctl.</p>

<pre><code>struct ifreq    ifr;
uint8_t         macaddr[6];

if ((s = socket(AF_INET, SOCK_DGRAM, IPPROTO_IP)) &lt; 0)
    return -1;

strcpy(ifr.ifr_name, ""eth0"");

if (ioctl(s, SIOCGIFHWADDR, (void *)&amp;ifr) == 0) {
    if (ifr.ifr_hwaddr.sa_family == ARPHRD_ETHER) {
        memcpy(macaddr, ifr.ifr_hwaddr.sa_data, 6);
        return 0;
... etc ...
</code></pre>

<p>You've tagged the question ""python"". I don't know of an existing Python module to get this information. You could use <A HREF=""http://pypi.python.org/pypi/ctypes/1.0.2"" rel=""nofollow"">ctypes</A> to call the ioctl directly.</p>
"
984,"<p>I don't know Python syntax, but I know Ruby can do it, and it is rather trivial.  Let's say you want to add a method to Array that prints the length to standard out:</p>

<pre><code>class Array<br>  def print_length<br>    puts length<br>  end<br>end<br></code></pre>

<p>If you don't want to modify the whole class, you can just add the method to a single instance of the array, and no other arrays will have the method:</p>

<pre><code>array = [1, 2, 3]<br>def array.print_length<br>  puts length<br>end<br></code></pre>

<p>Just be aware of the issues involved in using this feature.  Jeff Atwood actually <a href=""http://www.codinghorror.com/blog/archives/001151.html"" rel=""nofollow"">wrote about it</a> not too long ago.</p>"
323802,"<p>The most simple way is to search the list for the item:</p>

<pre><code>def get_previous(l, item):
    idx = l.find(item)
    return None if idx == 0 else l[idx-1]
</code></pre>

<p>Of course, this only works if the list only contains unique items. The other solution is:</p>

<pre><code>for idx in range(len(l)):
    item = l[idx]
    if item == 2:
        l[idx-1]
</code></pre>
"
182235,"<p>I'd try something like this.</p>

<pre><code>    try:
            f = open(filePath)
    except IOError:
            print ""No such file: %s"" % filePath
            raw_input(""Press Enter to close window"")
    try:
            lines = f.readlines()
            while True:
                    line = f.readline()
                    try:
                            if not line:
                                    time.sleep(1)
                            else:
                                    functionThatAnalisesTheLine(line)
                    except Exception, e:
                            # handle the exception somehow (for example, log the trace) and raise the same exception again
                            raw_input(""Press Enter to close window"")
                            raise e
    finally:
            f.close()
</code></pre>

<p>The loop checks if there is a new line(s) since last time file was read - if there is, it's read and passed to the <code>functionThatAnalisesTheLine</code> function. If not, script waits 1 second and retries the process. </p>
"
78433,"<p>Because python is a dynamic language, it's not usually a good idea to give a variable and a function the same name.  id() is a function in python, so it's recommend not to use a variable named id.  Bearing that in mind, that applies to all functions that you might use... a variable shouldn't have the same name as a function.</p>
"
73009,"<p>I think that what you have to ask yourself is:</p>

<ul>
<li>Why i need to do this?</li>
<li>Is my package separation well done?</li>
</ul>

<p>I don't know the context why you want to do it this way. But for me a cleaner design would be to have the following packages structure:</p>

<pre><code>app/
   __init__.py
   sub1/
      __init__.py
      mod1.py
      sub12/
           __init__.py
           mod2.py
</code></pre>

<p>Then you only have to do:</p>

<pre><code>from sub12 import mod2
</code></pre>
"
72904,"<p>Why you even need this? Why you just do not import it as</p>

<pre><code>from app.sub2 import mod2
</code></pre>
"
193083,"<p>Nope.</p>

<p>Python is notoriously flaky with respect to different setups. The only sane way to deploy a python app is to ship the whole bundle of interpreter and libraries that you are relying on with your code. That will most likely work.</p>
"
73060,"<p>Don't do relative imports. They'll only make your code more fragile. If you do an absolute import as Matej suggested, you'll be less vulnerable to changes in sys.path and changes in file locations.</p>
"
188427,"<p>You could try writing a <a href=""http://www.sqlalchemy.org/docs/05/types.html#types_custom"" rel=""nofollow"">custom type</a>, for instance:</p>

<pre><code>import sqlalchemy.types as types

class UUID(types.TypeEngine):
    def get_col_spec(self):
        return ""uuid""

    def bind_processor(self, dialect):
        def process(value):
            return value
        return process

    def result_processor(self, dialect):
        def process(value):
            return value
        return process

table = Table('foo', meta,
    Column('id', UUID(), primary_key=True),
)
</code></pre>
"
29347,"<p>Most editors support the ""whole word"" search option. It's usually a checkbox in the search dialog, and what it does is only match the search term if it has leading and trailing spaces, dots, and most other delimiters.
It will probably work in your case.</p>
"
